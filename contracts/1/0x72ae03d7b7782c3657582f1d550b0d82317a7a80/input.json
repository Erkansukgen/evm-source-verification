{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/ENS.sol":{"content":"// SPDX-License-Identifier: Unlicense\npragma solidity 0.8.11;\n\ninterface Reverse {\n  function node(address addr) external pure returns (bytes32);\n}\n\ninterface  ENS {\n    function resolver(bytes32 node) external view returns (Resolver);\n}\n\ninterface Resolver {\n    function name(bytes32 node) external view returns (string memory);\n}\n\n\ncontract PepegaClapWR {\n\n  ENS public ens = ENS(0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e);\n  Reverse public reverse = Reverse(0x084b1c3C81545d370f3634392De611CaaBFf8148);\n  \n  string public name;\n  bytes32 public dj = keccak256(abi.encodePacked(\"defijesus.eth\"));\n  bytes32 public returned;\n\n\n  constructor(){}\n\n  function mint() external payable {\n    bytes32 node = reverse.node(msg.sender);\n    Resolver r = ens.resolver(node);\n    name = r.name(node);\n    returned = keccak256(abi.encodePacked(name));\n  }\n}"}}}