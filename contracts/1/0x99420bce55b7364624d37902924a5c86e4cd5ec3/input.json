{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/MultiSendSell.sol": {
      "content": "pragma solidity ^0.6.6;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface UNISWAPv2 {\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n}\n\ncontract MultiSendSell {\n\n    address payable public  owner;\n    address public token_address;\n    uint256 public eth_amount;\n    uint256 public min_tokens;\n    address WETHAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    \n    \n    constructor() public {\n        owner = msg.sender;\n    }\n\n    receive() external payable { }\n\n    function conf(address config_token_address, uint256 config_eth_amount, uint256 config_min_tokens) public payable returns (bool) {\n        require(msg.sender == owner, 'ALERT!: ONLY OWNER ALLOWED');\n        require(address(this).balance >= config_eth_amount, 'ETH_AMOUNT is higher than balance');\n        token_address = config_token_address;\n        eth_amount = config_eth_amount;\n        min_tokens = config_min_tokens;\n        return true;\n    }\n\n    function tokenApprove(uint256 tokens) public returns (bool) {\n        require(msg.sender == owner, 'ALERT!: ONLY OWNER ALLOWED');\n        IERC20 token_contract = IERC20(token_address);\n        token_contract.approve(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, tokens);\n        return true;\n    }\n\n    function sellTokens(uint256 amountOutMin) public returns (bool) {\n        require(msg.sender == owner, 'ALERT!: ONLY OWNER ALLOWED');\n        UNISWAPv2 uniswap_contract = UNISWAPv2(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        IERC20 token_contract = IERC20(token_address);\n        uint256 my_token_balance = token_contract.balanceOf(address(this));\n        address[] memory addresses = new address[](2);\n        addresses[0] = token_address;\n        addresses[1] = WETHAddress;\n        uniswap_contract.swapExactTokensForETH(my_token_balance, amountOutMin, addresses, address(this), now+6000);\n        return true;\n    }\n\n    function withdrawETH() public returns (bool) {\n        require(msg.sender == owner, 'ALERT!: ONLY OWNER ALLOWED');\n        owner.transfer(address(this).balance);\n        return true;\n    }\n\n    function widthdrawToken(address token_contract_addr) public returns (bool){\n        require(msg.sender == owner, 'ALERT!: ONLY OWNER ALLOWED');\n        IERC20 token_contract = IERC20(token_contract_addr);\n        uint256 my_token_balance = token_contract.balanceOf(address(this));\n        token_contract.transfer(owner, my_token_balance);\n        return true;\n    }\n\n    function runtx() public returns (bool) {\n        //address[] memory addresses = [WETHAddress, token_address];\n        address[] memory addresses = new address[](2);\n        UNISWAPv2 uniswap_contract = UNISWAPv2(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        addresses[0] = WETHAddress;\n        addresses[1] = token_address;\n        uniswap_contract.swapExactETHForTokens{value:eth_amount}(min_tokens, addresses, address(this), now+6000);\n        return true;\n    }\n}\n\n"
    }
  }
}