{"language":"Solidity","settings":{"evmVersion":"istanbul","libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/CYAN.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./GlobalsAndUtility.sol\";\r\n\r\ncontract CYAN is GlobalsAndUtility {\r\n\r\n    address private FLUSH_ADDR; //Address that ETH/CYN is flushed to\r\n    uint256 public _totalBurntSupply = 0; //The total amount of CYAN burnt by everyone\r\n    uint256 public deployBlockTimestamp; //Unix time of when the contract was deployed\r\n    uint256 public deployBlockInterval; // deployBlockTimestamp / INTEREST_INTERVAL\r\n    uint256 public currentInterestDenominator; //The reciprocal of the current interval interest rate\r\n    uint256 public burnStartDay; //The first day of the first interest interval.\r\n\r\n    //Information stored for each address\r\n    mapping (address => uint256) public _burntBalances;\r\n    mapping (address => uint256) public _unclaimedBalances;\r\n    mapping (address => uint256) public _timeOfLastBurnChange;\r\n\r\n    //Stores supply information for given interest intervals\r\n    mapping (uint256 => uint256) public intervalsTotalSupply;\r\n    mapping (uint256 => uint256) public intervalsTotalBurntSupply;\r\n\r\n    event BurntCyan(address burner, uint256 amount);\r\n    event ClaimedInterest(address claimer, uint256 amount);\r\n    event CheckedUnclaimedBalance(address checker, address checked);\r\n    event FlushedCYN(uint amount);\r\n    event FlushedETH(uint amount);\r\n\r\n    //Function that is only called once when the contract is deployed\r\n    constructor(uint256 initialSupply, uint256 _burnStartDay) ERC20(\"CYAN\", \"CYN\") {\r\n\r\n        _mint(msg.sender, initialSupply); //ERC20 initialization function\r\n\r\n        deployBlockTimestamp = block.timestamp;\r\n        deployBlockInterval = block.timestamp / (INTEREST_INTERVAL);\r\n        burnStartDay = _burnStartDay;\r\n\r\n        FLUSH_ADDR = msg.sender; //Set ETH flush address to contract deployer\r\n\r\n    }\r\n\r\n    //Get how much CYAN a certain address has burnt\r\n    function burntBalanceOf(address account) public view returns (uint256) {\r\n        return _burntBalances[account];\r\n    }\r\n\r\n    //Get the unclaimed balance of a certain address. Requires gas.\r\n    //There are only minor differences between calling this function and \"updateUnclaimedBalance()\"\r\n    //Differences: This function check if current time is pre burn period. This function also called the CheckUnclaimedBalance event.\r\n    function unclaimedBalanceOf(address account) public returns (uint256) {\r\n\r\n        //Return 0 if burn start time is still in the future\r\n        if ((block.timestamp / (BURN_TIME_UNIT)) < burnStartDay) {\r\n            return 0;\r\n        }\r\n        else {\r\n\r\n            updateUnclaimedBalance(account);\r\n            CheckedUnclaimedBalance(msg.sender, account);\r\n            return _unclaimedBalances[account];\r\n\r\n        }\r\n\r\n    }\r\n\r\n    //Probably the most complicated function in the CYAN contract\r\n    //Updates the unclaimed balance of a given address/user\r\n    function updateUnclaimedBalance(address account) internal {\r\n\r\n        uint256 currentTime = (block.timestamp / (INTEREST_INTERVAL)); //Get current interval\r\n\r\n        updateIntervals(currentTime); //Update interval data\r\n\r\n        //Initialize some loop variables\r\n        uint256 amountToAddToBalance = 0; //Interest from all intervals combined\r\n        uint256 lastAmount = 0; //Keeps track of how much was added for last interval's calculation\r\n\r\n        //Set time of last burn change to now if it is not already set\r\n        if (_timeOfLastBurnChange[account] == 0) {\r\n            _timeOfLastBurnChange[account] = block.timestamp / (INTEREST_INTERVAL);\r\n        }\r\n\r\n        if (currentTime - _timeOfLastBurnChange[account] > 0) { // Checks if it has been 1 or more intervals since last unclaimed balance update\r\n\r\n            for (uint256 i = _timeOfLastBurnChange[account]; i < currentTime; i++) { //Runs 1 iteration for every interval since last unclaimed balance update\r\n\r\n                if (intervalsTotalBurntSupply[i] > 0) { //Checks if anybody burnt or claimed CYAN during interval \"i\"\r\n\r\n                    if (intervalsTotalSupply[i] > 0) {\r\n\r\n                        uint256 thisIntervalDenominator =  (INTEREST_MULTIPLIER * intervalsTotalBurntSupply[i]) / intervalsTotalSupply[i]; //Get the reciprocal of interval \"i\" interest rate. This uses the weekly interest equation seen in the green paper and blue paper.\r\n\r\n                        if (thisIntervalDenominator < 1) {\r\n\r\n                            lastAmount = _burntBalances[account]; //Maximum weekly interest is 100%;\r\n                            amountToAddToBalance += lastAmount;\r\n\r\n                        }\r\n\r\n                        else if (thisIntervalDenominator < MINIMUM_INTEREST_DENOMINATOR) { //Check if current equation interest is greater than minimum interest.\r\n\r\n                            lastAmount = _burntBalances[account] / thisIntervalDenominator; //Divide by reciprocal is same as multiplying by interest rate\r\n                            amountToAddToBalance += lastAmount;\r\n\r\n                            continue;\r\n\r\n                        }\r\n\r\n                        //Use minimum interest if equation interest is less.\r\n                        else {\r\n\r\n                            lastAmount = _burntBalances[account] / MINIMUM_INTEREST_DENOMINATOR;\r\n                            amountToAddToBalance += lastAmount;\r\n\r\n                            continue;\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                    else {\r\n\r\n                        //Use minimum interest if equation interest is less.\r\n                        lastAmount = _burntBalances[account] / MINIMUM_INTEREST_DENOMINATOR;\r\n                        amountToAddToBalance += lastAmount;\r\n\r\n                        continue;\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                else { //If nobody burnt or claimed any CYAN during interval \"i\", the ratio will be the same as interval \"i\" - 1, so we can just add lastAmount to amountToAddToBalance\r\n\r\n                    amountToAddToBalance += lastAmount;\r\n\r\n                    //Since none was burnt or claimed, total supplies are same as last interval\r\n                    intervalsTotalSupply[i] = intervalsTotalSupply[i - 1];\r\n                    intervalsTotalBurntSupply[i] = intervalsTotalBurntSupply[i - 1];\r\n\r\n                    continue;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        _unclaimedBalances[account] += amountToAddToBalance; //Update the uncaimed balance\r\n        _timeOfLastBurnChange[account] = currentTime; //Change the last update time\r\n\r\n    }\r\n\r\n    //Second most complicated function\r\n    //Allows user to burn cyan\r\n    function burnCyan(uint256 amount) public {\r\n\r\n        require ((block.timestamp / (BURN_TIME_UNIT)) >= burnStartDay, \"Cyan can not be burned yet. Try again on or after the burn start day.\"); //Check that current time is not before the burn start time.\r\n        require (amount >= minBurnAmount, \"You have not entered an amount greater than or equal to the minimum.\"); //Check if user is trying to burn at least the minimum burn amount.\r\n        require (_balances[msg.sender] >= amount, \"You have attempted to burn more CYAN than you own.\"); //Check if user has enough CYAN to burn.\r\n\r\n        //Set time of last burn change to now if it is not already set\r\n        if (_timeOfLastBurnChange[msg.sender] == 0) {\r\n            _timeOfLastBurnChange[msg.sender] = block.timestamp / (INTEREST_INTERVAL);\r\n        }\r\n\r\n        //Update balances\r\n        _balances[msg.sender] -= amount;\r\n        updateUnclaimedBalance(msg.sender);\r\n        _burntBalances[msg.sender] += amount;\r\n\r\n        //Update total supplies\r\n        _totalSupply -= amount;\r\n        _totalBurntSupply += amount;\r\n        updateIntervals(block.timestamp / (INTEREST_INTERVAL)); //Update supplies for this interval\r\n\r\n        BurntCyan(msg.sender, amount); //Call burnt cyan event\r\n\r\n    }\r\n\r\n    //Allows user to add their unclaimed balance to their balance.\r\n    function claimInterest() public returns (uint256) {\r\n\r\n        require ((block.timestamp / (BURN_TIME_UNIT)) > burnStartDay, \"It is before the burn start time\"); //Make sure burning has started.\r\n        require (_burntBalances[msg.sender] > 0, \"You have no burnt CYAN.\"); //Only let them claim if they have burnt CYAN.\r\n\r\n        updateUnclaimedBalance(msg.sender); //Update the unclaimed balance\r\n        _balances[msg.sender] += _unclaimedBalances[msg.sender]; //Add unclaimed CYAN to balance\r\n        _totalSupply += _unclaimedBalances[msg.sender]; //Update total supply\r\n        intervalsTotalSupply[(block.timestamp - deployBlockTimestamp) / (INTEREST_INTERVAL)] += _unclaimedBalances[msg.sender]; //Update total supply without updating burnt supply\r\n\r\n        ClaimedInterest(msg.sender, _unclaimedBalances[msg.sender]);\r\n\r\n        uint256 amountClaimed = _unclaimedBalances[msg.sender];\r\n        _unclaimedBalances[msg.sender] = 0; //Reset unclaimed balance\r\n\r\n        return amountClaimed;\r\n\r\n    }\r\n\r\n    //Sets total supplies of given interval to current total supplies\r\n    function updateIntervals(uint256 interval) internal {\r\n\r\n        intervalsTotalSupply[interval] = _totalSupply;\r\n        intervalsTotalBurntSupply[interval] = _totalBurntSupply;\r\n\r\n        updateCurrentInterestDenominator();\r\n\r\n    }\r\n\r\n    //Updates the vallu of currentInterestDenominator\r\n    function updateCurrentInterestDenominator() internal {\r\n\r\n        uint256 timeNow = block.timestamp / (INTEREST_INTERVAL); //Use some memory so division doesn't need to happen twice.\r\n        uint256 currentInterestEquation = (INTEREST_MULTIPLIER * intervalsTotalBurntSupply[timeNow]) / intervalsTotalSupply[timeNow];\r\n\r\n        if (currentInterestEquation < 1) {\r\n            currentInterestDenominator = 1;\r\n        }\r\n        else {\r\n            currentInterestDenominator = currentInterestEquation;\r\n        }\r\n\r\n    }\r\n\r\n    //Send ETH that is trapped in the contract to the flush address\r\n    function flushETH() external {\r\n\r\n        require(address(this).balance != 0, \"Currently no ETH in CYAN.\");\r\n\r\n        uint256 bal = address(this).balance;\r\n        payable(FLUSH_ADDR).transfer(bal);\r\n\r\n        FlushedETH(bal);\r\n\r\n    }\r\n\r\n    //Send CYN that is trapped in the contract to the flush address\r\n    function flushCYN() public {\r\n\r\n        FlushedCYN(balanceOf(address(this)));\r\n        _transfer(address(this), FLUSH_ADDR, balanceOf(address(this)));\r\n\r\n    }\r\n\r\n    //Backup functions\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n}\r\n"},"contracts/CYAN_ICO.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./CYAN.sol\";\r\n\r\ncontract CYAN_ICO {\r\n\r\n    address public FLUSH_ADDR; //Where to send flushed ETH and CYAN\r\n    CYAN cyanContract; //CYAN contract object\r\n    uint256 public priceStart; //wei\r\n    uint256 public priceEnd; //wei\r\n    uint256 public icoStartTime; //in days\r\n    uint256 public icoEndTime; //in days\r\n    uint256 public cyanideSold = 0;\r\n    uint256 public ethCollected = 0;\r\n\r\n    event Sell(address _buyer, uint256 _amount);\r\n    event SaleStart(uint256 time);\r\n    event SaleEnd(uint256 time);\r\n    event PriceChange(uint256 price);\r\n    event FlushedCYN(uint amount);\r\n    event FlushedETH(uint amount);\r\n\r\n    //Called once when contract is deployed\r\n    constructor(address _cyanContractAddress, uint256 _priceStart, uint256 _priceEnd, uint256 _icoStartTime, uint256 _icoEndTime) {\r\n\r\n        //Ensure later values are greater than earlier values\r\n        require (_icoStartTime < _icoEndTime);\r\n        require (_priceStart < _priceEnd);\r\n\r\n        FLUSH_ADDR = msg.sender; //Assign flush address to contract deployer\r\n        cyanContract = CYAN(payable(_cyanContractAddress)); //Assign CYAN contract by address\r\n\r\n        priceStart = _priceStart; //INPUT IN WEI\r\n        priceEnd = _priceEnd; //INPUT IN WEI\r\n\r\n        icoStartTime = _icoStartTime; //INPUT IN DAYS\r\n        icoEndTime = _icoEndTime; // INPUT IN DAYS\r\n\r\n    }\r\n\r\n    function changeSettings(address _cyanContractAddress, uint256 _priceStart, uint256 _priceEnd, uint256 _icoStartTime, uint256 _icoEndTime) public {\r\n\r\n        require (msg.sender == FLUSH_ADDR, \"Sender not FLUSH_ADDR\");\r\n        require (_icoStartTime < _icoEndTime);\r\n        require (_priceStart < _priceEnd);\r\n\r\n        cyanContract = CYAN(payable(_cyanContractAddress)); //Assign CYAN contract by address\r\n\r\n        priceStart = _priceStart; //INPUT IN WEI\r\n        priceEnd = _priceEnd; //INPUT IN WEI\r\n\r\n        icoStartTime = _icoStartTime; //INPUT IN DAYS\r\n        icoEndTime = _icoEndTime; // INPUT IN DAYS\r\n\r\n    }\r\n\r\n    function getCurrentDay() view public returns (uint256) {\r\n        return ((block.timestamp / (1 days)) - icoStartTime);\r\n    }\r\n\r\n    function checkSaleEnabled() view public returns (bool) {\r\n        return ((block.timestamp / (1 days)) >= icoStartTime && (block.timestamp / (1 days)) <= icoEndTime);\r\n    }\r\n\r\n    //Returns start price if before ICO and end price if after ICO\r\n    function checkCurrentPrice() view public returns (uint256) {\r\n        if ((block.timestamp / (1 days)) < icoStartTime) {\r\n            return priceStart;\r\n        }\r\n        else if ((block.timestamp / (1 days)) > icoEndTime) {\r\n            return priceEnd;\r\n        }\r\n        else {\r\n            return priceStart + ((((block.timestamp / (1 days)) - icoStartTime) * (priceEnd-priceStart)) / (icoEndTime - icoStartTime));\r\n        }\r\n\r\n    }\r\n\r\n    function purchaseCYN(uint256 _amount) public payable {\r\n\r\n        //Ensure the purchase is correct\r\n        require(checkSaleEnabled(), \"Sale not enabled\");\r\n        uint256 price = checkCurrentPrice();\r\n        require(msg.value >= (_amount * price), \"Not enough ETH sent\");\r\n        require(cyanContract.balanceOf(address(this)) >= _amount, \"Not enough CYAN left\");\r\n        require(cyanContract.transfer(msg.sender, _amount), \"CYAN could not be transferred\");\r\n\r\n        //Update ICO trackers\r\n        cyanideSold += _amount;\r\n        ethCollected += msg.value;\r\n\r\n        Sell(msg.sender, _amount);\r\n\r\n    }\r\n\r\n    //Send all CYAN remaining in the contract to FLUSH_ADDR\r\n    function flushCYN() public {\r\n\r\n        require(msg.sender == FLUSH_ADDR, \"Sender not FLUSH_ADDR\");\r\n\r\n        uint256 bal = cyanContract.balanceOf(address(this));\r\n        require(cyanContract.transfer(FLUSH_ADDR, bal));\r\n\r\n        FlushedCYN(bal);\r\n\r\n    }\r\n\r\n    //Send all ETH remaining in the contract to FLUSH_ADDR\r\n    function flushETH() public {\r\n\r\n        require(msg.sender == FLUSH_ADDR, \"Sender not FLUSH_ADDR\");\r\n        require(address(this).balance != 0, \"Currently no ETH in CYAN_ICO.\");\r\n\r\n        uint256 bal = address(this).balance;\r\n        payable(FLUSH_ADDR).transfer(bal);\r\n\r\n        FlushedETH(bal);\r\n\r\n    }\r\n\r\n    //Backup functions\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n}\r\n"},"contracts/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"./utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) public _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 public _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 12;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"},"contracts/GlobalsAndUtility.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./ERC20.sol\";\r\n\r\nabstract contract GlobalsAndUtility is ERC20 {\r\n\r\n    uint32 public constant minBurnAmount = 5000000;\r\n    uint256 public constant INTEREST_INTERVAL = 7 days;\r\n    uint256 public constant INTEREST_MULTIPLIER = 1612;\r\n    uint256 public constant MINIMUM_INTEREST_DENOMINATOR = 1612;\r\n    uint256 public constant BURN_TIME_UNIT = 1 days;\r\n    uint256 public constant CYANIDE_PER_CYAN = 1000000000000; // 1 CYAN = 1e12 CYANIDE\r\n\r\n}\r\n"},"contracts/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"contracts/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n"}}}