{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/escrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.4;\r\n\r\ncontract WertoEscrow {\r\n\taddress payable private owner;\r\n\taddress[] private approvedSubOwners;\r\n\tbool private paused;\r\n\tuint private feePercent;\r\n\tuint private lockupTime;\r\n\tuint private minimumBid;\r\n\tuint private minimumBidPercent;\r\n\tuint private ownerBalance;\r\n\r\n\tstruct Bid {\r\n\t\tuint amount;\r\n\t\taddress payable bidder;\r\n\t\tuint timestamp;\r\n\t}\r\n\r\n\tmapping(address => bool) private subOwners;\r\n\tmapping(address => uint) private balances;\r\n\tmapping(uint => address) private postSellers;\r\n\tmapping(uint => Bid) private bids;\r\n\r\n\tevent makeOffer(\r\n\t\tuint indexed postId,\r\n\t\taddress indexed bidder,\r\n\t\taddress indexed outbid,\r\n\t\tuint amount,\r\n\t\tuint timestamp\r\n\t);\r\n\r\n\tevent cancelOffer(\r\n\t\tuint indexed postId,\r\n\t\taddress indexed bidder,\r\n\t\tuint amount,\r\n\t\tuint timestamp\r\n\t);\r\n\r\n\tevent acceptOffer(\r\n\t\tuint indexed postId,\r\n\t\taddress indexed seller,\r\n\t\taddress indexed buyer,\r\n\t\tuint amount,\r\n\t\tuint timestamp\r\n\t);\r\n\r\n\tevent withdraw(\r\n\t\taddress indexed account,\r\n\t\tuint amount,\r\n\t\tuint timestamp\r\n\t);\r\n\r\n\tconstructor() public {\r\n\t\towner = payable(msg.sender);\r\n\t\tpaused = false;\r\n\t\tfeePercent = 8;\r\n\t\tlockupTime = 24 * 3600; //seconds\r\n\t\tminimumBid = 0.01 * 10**18; //0.01 ETH\r\n\t\tminimumBidPercent = 10;\r\n\t\townerBalance = 0;\r\n\t}\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner, 'Only owner');\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyOwners {\r\n\t\trequire(subOwners[msg.sender] || msg.sender == owner, 'Only owners');\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier notPaused {\r\n\t\trequire(!paused, 'Contract is paused');\r\n\t\t_;\r\n\t}\r\n\r\n\t//Ставка\r\n\tfunction MakeOffer(uint postId) public payable notPaused {\r\n\t\tif(bids[postId].amount > 0) {\r\n\t\t\t//Если ставки были, то проверяем на минимальную величину увеличения ставки\r\n\t\t\tif(msg.value - (msg.value % 10**10) < bids[postId].amount + (bids[postId].amount * minimumBidPercent / 100) - ((bids[postId].amount * minimumBidPercent / 100) % 10**10)) revert('Offer too low');\r\n\t\t} else {\r\n\t\t\t//Если ставок еще не было, то проверяем на величину минимальной ставки\r\n\t\t\tif((msg.value - (msg.value % 10**10)) < minimumBid) revert('Offer too low');\r\n\t\t}\r\n\r\n\t\t//Возвращаем деньги предыдущему наивысшему участнику\r\n\t\tif(bids[postId].amount > 0) {\r\n\t\t\t(bool success,) = bids[postId].bidder.call{value: bids[postId].amount}('');\r\n\r\n\t\t\t//Если не получилось отправить деньги предыдущему участнику, то увеличиваем его баланс для последующего вывода\r\n\t\t\tif(!success) balances[bids[postId].bidder] += bids[postId].amount;\r\n\t\t}\r\n\r\n\t\t//Запоминаем предыдущего участника\r\n\t\taddress outbidder = bids[postId].bidder;\r\n\r\n\t\t//Устанавливаем нового наивысшего участника\r\n\t\tbids[postId].bidder = payable(msg.sender);\r\n\t\tbids[postId].timestamp = block.timestamp;\r\n\t\tbids[postId].amount = msg.value - (msg.value % 10**10);\r\n\r\n\t\t//Отправляем ивент\r\n\t\temit makeOffer(\r\n\t\t\tpostId,\r\n\t\t\tmsg.sender,\r\n\t\t\toutbidder,\r\n\t\t\tmsg.value - (msg.value % 10**10),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\t//Отмена ставок\r\n\tfunction CancelOffer(uint postId) public notPaused {\r\n\t\t//Проверяем есть ли права у пользователя отменить ставки\r\n\t\trequire(bids[postId].bidder == msg.sender, 'Current offer has a different owner');\r\n\r\n\t\t//Проверяем баланс\r\n\t\trequire(bids[postId].amount > 0, 'Balance is empty');\r\n\r\n\t\t//Проверяем на лимит удержания ставки\r\n\t\trequire((bids[postId].timestamp + lockupTime) <= block.timestamp, 'Minimum offer lock time has not expired');\r\n\t\t\r\n\t\tuint sendValue = bids[postId].amount;\r\n\r\n\t\t//Обнуляем ставку\r\n\t\tbids[postId].amount = 0;\r\n\r\n\t\t//Возвращаем деньги\r\n\t\t(bool success,) = bids[postId].bidder.call{value: sendValue}('');\r\n\t\trequire(success, 'Transfer failed');\r\n\r\n\t\t//Отправляем ивент\r\n\t\temit cancelOffer(\r\n\t\t\tpostId,\r\n\t\t\tbids[postId].bidder,\r\n\t\t\tsendValue,\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\t//Закрытие аукциона от имени владельца контракта\r\n\tfunction AcceptOffer(uint postId, address payable seller, uint price) public onlyOwners notPaused {\r\n\t\tAcceptOfferHandler(postId, seller, price, false);\r\n\t}\r\n\r\n\t//Закрытие аукциона от имени владельца поста\r\n\tfunction AcceptOfferSeller(uint postId, uint price) public notPaused {\r\n\t\tAcceptOfferHandler(postId, payable(msg.sender), price, true);\r\n\t}\r\n\r\n\tfunction AcceptOfferHandler(uint postId, address payable seller, uint price, bool asSeller) private notPaused {\r\n\t\t//Если функция вызвана от имени владельца/автора поста, то проверяем на наличие адреса в базе\r\n\t\tif(asSeller) require(postSellers[postId] == seller, 'Not an owner of the item');\r\n\r\n\t\t//Если запрашиваемя сумма больше реальной, то отклоняем\r\n\t\trequire(bids[postId].amount >= price, 'Invalid price specified');\r\n\r\n\t\tuint sendValue = bids[postId].amount - (bids[postId].amount * feePercent / 100);\r\n\t\tuint ownerShare = bids[postId].amount * feePercent / 100;\r\n\r\n\t\t//Обнуляем пост\r\n\t\tbids[postId].amount = 0;\r\n\r\n\t\t//Удаляем владельца поста\r\n\t\tdelete postSellers[postId];\r\n\r\n\t\t//Вывод денег на кошелек продавца поста за вычетом комиссии Werto\r\n\t\t(bool success,) = seller.call{value: sendValue}('');\r\n\r\n\t\t//Если отправить не удалось, то создаем запись в списке балансов для продавца\r\n\t\tif(!success) balances[seller] += sendValue;\r\n\r\n\t\t//Отправляем ивент\r\n\t\temit acceptOffer(\r\n\t\t\tpostId,\r\n\t\t\tseller,\r\n\t\t\tbids[postId].bidder,\r\n\t\t\tsendValue,\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\r\n\t\t//Вывод вознаграждения на кошелек владельца контракта\r\n\t\tif(ownerShare > 0) {\r\n\t\t\t(bool ownSuccess,) = owner.call{value: ownerShare}('');\r\n\r\n\t\t\t//Если отправить не удалось, то увеличиваем баланс владельца\r\n\t\t\tif(!ownSuccess) ownerBalance += ownerShare;\r\n\t\t}\r\n\t}\r\n\r\n\t//Вывод денег\r\n\tfunction Withdraw() public notPaused {\r\n\t\trequire(balances[msg.sender] > 0, 'Balance is empty');\r\n\r\n\t\tuint sendValue = balances[msg.sender];\r\n\t\t\r\n\t\t//Обнуляем баланс\r\n\t\tbalances[msg.sender] = 0;\r\n\r\n\t\t//Отправяем деньги\r\n\t\t(bool success,) = msg.sender.call{value: sendValue}('');\r\n\t\trequire(success, 'Transfer failed');\r\n\t\r\n\t\t//Отправляем ивент\r\n\t\temit withdraw(\r\n\t\t\tmsg.sender,\r\n\t\t\tsendValue,\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\t//Получаем текущего владельца поста\r\n\tfunction GetPostSeller(uint postId) public view onlyOwners returns (address) {\r\n\t\treturn postSellers[postId];\r\n\t}\r\n\r\n\t//Устанавливаем текущего владельца поста\r\n\tfunction SetPostSeller(uint postId, address postSeller) public onlyOwners {\r\n\t\tpostSellers[postId] = postSeller;\r\n\t}\r\n\r\n\t//Получаем информацию о последней ставке поста\r\n\tfunction GetBid(uint postId) public view returns (uint timestamp, address bidder, uint amount) {\r\n\t\treturn (bids[postId].timestamp, bids[postId].bidder, bids[postId].amount);\r\n\t}\r\n\r\n\t//Получаем минимальную величину ставки\r\n\tfunction GetBidMinimum() public view returns (uint) {\r\n\t\treturn minimumBid;\r\n\t}\r\n\r\n\t//Устанавливаем минимальную величину ставки (устанавливается в ETH)\r\n\tfunction SetBidMinimum(uint amount) public onlyOwners {\r\n\t\trequire(amount >= 10**10, 'Invalid minimum');\r\n\t\tminimumBid = amount;\r\n\t}\r\n\r\n\t//Устанавливаем минимальную величину процента увеличения ставки\r\n\tfunction SetBidMinimumPercent(uint percent) public onlyOwners {\r\n\t\trequire(percent >= 0 && percent <= 100, 'Invalid percent');\r\n\t\tminimumBidPercent = percent;\r\n\t}\r\n\r\n\t//Получить минимальное время удержания ставки\r\n\tfunction GetBidLockupTime() public view returns (uint) {\r\n\t\treturn lockupTime;\r\n\t}\r\n\r\n\t//Установить минимальное время удержания ставки\r\n\tfunction SetBidLockupTime(uint duration) public onlyOwners {\r\n\t\trequire(duration <= (365 * 24 * 3600), 'Invalid duration');\r\n\t\tlockupTime = duration;\r\n\t}\r\n\r\n\t//Получить комиссию Werto\r\n\tfunction GetFeePercent() public view returns (uint) {\r\n\t\treturn feePercent;\r\n\t}\r\n\r\n\t//Установить комиссию Werto\r\n\tfunction SetFeePercent(uint percent) public onlyOwners {\r\n\t\tfeePercent = percent;\r\n\t}\r\n\r\n\t//Получить баланс участника\r\n\tfunction GetBalance(address bidder) public view returns (uint) {\r\n\t\treturn balances[bidder];\r\n\t}\r\n\r\n\t//Получить баланс владельца контракта\r\n\tfunction GetOwnerBalance() public view onlyOwners returns (uint) {\r\n\t\treturn ownerBalance;\r\n\t}\r\n\r\n\t//Вывод денег владельца\r\n\tfunction OwnerWithdraw() public onlyOwner {\r\n\t\trequire(ownerBalance > 0, 'Balance is empty');\r\n\r\n\t\t//Обнуляем баланс\r\n\t\tuint sendValue = ownerBalance;\r\n\t\townerBalance = 0;\r\n\r\n\t\t//Отправяем деньги\r\n\t\t(bool success,) = msg.sender.call{value: sendValue}('');\r\n\t\trequire(success, 'Transfer failed');\r\n\t}\r\n\r\n\t//Изменить паузу контракта\r\n\tfunction SetPause(bool state) public onlyOwners {\r\n\t\tpaused = state;\r\n\t}\r\n\r\n\t//Установка владельца контракта\r\n\tfunction SetOwner(address payable newOwner) public onlyOwner {\r\n\t\towner = newOwner;\r\n\t}\r\n\r\n\t//Установка суб-владельцев контракта\r\n\tfunction SetSubOwner(address subOwner, bool approved) public onlyOwner {\r\n\t\tsubOwners[subOwner] = approved;\r\n\r\n\t\tif(approved) approvedSubOwners.push(subOwner);\r\n\t}\r\n\r\n\t//Получение суб-владельцев контракта\r\n\tfunction GetSubOwners() public view onlyOwners returns (address[] memory)  {\r\n\t\treturn approvedSubOwners;\r\n\t}\r\n\r\n\t//Проверка, является ли адрес суб-владельцем\r\n\tfunction IsSubOwner(address subOwner) public view returns (bool) {\r\n\t\treturn subOwners[subOwner];\r\n\t}\r\n\r\n\t//Если не совпало ни одно из условий контракта, то возвращаем деньги обратно\r\n\treceive() external payable {\r\n\t\trevert('Unidentified transaction');\r\n\t}\r\n\r\n\t//Если не совпало ни одно из условий контракта, то возвращаем деньги обратно\r\n\tfallback() external payable {\r\n\t\trevert('Unidentified transaction');\r\n\t}\r\n}"
    }
  }
}