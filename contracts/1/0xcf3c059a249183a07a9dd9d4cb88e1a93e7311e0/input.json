{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/sd.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.0;\n\ncontract SignatureVerifier {\n  /**\n   * @notice Recovers the address for an ECDSA signature and message hash, note that the hash is automatically prefixed with \"\\x19Ethereum Signed Message:\\n32\"\n   * @return address The address that was used to sign the message\n   */\n  function recoverAddress (bytes32 hash, uint8 v, bytes32 r, bytes32 s) public pure returns (address) {\n    bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n    bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, hash));\n    \n    return ecrecover(prefixedHash, v, r, s);\n  }\n  \n  /**\n   * @notice Checks if the recovered address from an ECDSA signature is equal to the address `signer` provided.\n   * @return valid Whether the provided address matches with the signature\n   */\n  function isValid (address signer, bytes32 hash, uint8 v, bytes32 r, bytes32 s) external pure returns (bool) {\n    return recoverAddress(hash, v, r, s) == signer;\n  }\n}"
    }
  }
}