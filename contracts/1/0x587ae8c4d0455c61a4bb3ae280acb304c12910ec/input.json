{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 20000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "SDA.optimized.flattened.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Scroll down to the bottom to find the contract of interest. \n\n// File: @openzeppelin/contracts@4.3.2/utils/introspection/IERC165.sol\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n\n// File: @openzeppelin/contracts@4.3.2/token/ERC721/IERC721.sol\n\n\npragma solidity ^0.8.0;\n\n// import \"@openzeppelin/contracts@4.3.2/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\n\n// File: @openzeppelin/contracts@4.3.2/token/ERC721/IERC721Receiver.sol\n\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n\n// File: @openzeppelin/contracts@4.3.2/token/ERC721/extensions/IERC721Metadata.sol\n\n\npragma solidity ^0.8.0;\n\n// import \"@openzeppelin/contracts@4.3.2/token/ERC721/IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n\n// File: @openzeppelin/contracts@4.3.2/utils/Address.sol\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n// File: @openzeppelin/contracts@4.3.2/utils/Context.sol\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n\n// File: @openzeppelin/contracts@4.3.2/utils/Strings.sol\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\n\n// File: @openzeppelin/contracts@4.3.2/utils/introspection/ERC165.sol\n\n\npragma solidity ^0.8.0;\n\n// import \"@openzeppelin/contracts@4.3.2/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n\n// File: @openzeppelin/contracts@4.3.2/token/ERC721/extensions/IERC721Enumerable.sol\n\n\npragma solidity ^0.8.0;\n\n// import \"@openzeppelin/contracts@4.3.2/token/ERC721/IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\n\n// File: @openzeppelin/contracts@4.3.2/access/Ownable.sol\n\n\npragma solidity ^0.8.0;\n\n// import \"@openzeppelin/contracts@4.3.2/utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n// File: @openzeppelin/contracts@4.3.2/security/ReentrancyGuard.sol\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// File: bd/contracts/SDA.optimized.sol\n\npragma solidity ^0.8.0;\n\n// import \"@openzeppelin/contracts@4.3.2/token/ERC721/IERC721.sol\";\n// import \"@openzeppelin/contracts@4.3.2/token/ERC721/IERC721Receiver.sol\";\n// import \"@openzeppelin/contracts@4.3.2/token/ERC721/extensions/IERC721Metadata.sol\";\n// import \"@openzeppelin/contracts@4.3.2/utils/Address.sol\";\n// import \"@openzeppelin/contracts@4.3.2/utils/Context.sol\";\n// import \"@openzeppelin/contracts@4.3.2/utils/Strings.sol\";\n// import \"@openzeppelin/contracts@4.3.2/utils/introspection/ERC165.sol\";\n\n/**\n * This is a modified version of the ERC721 class, where we only store\n * the address of the minter into an _owners array upon minting.\n * \n * While this saves on minting gas costs, it means that the the balanceOf\n * function needs to do a bruteforce search through all the tokens.\n *\n * For small amounts of tokens (e.g. 8888), RPC services like Infura\n * can still query the function. \n *\n * It also means any future contracts that reads the balanceOf function \n * in a non-view function will incur a gigantic gas fee. \n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    \n    using Address for address;\n    \n    string private _name;\n    \n    string private _symbol;\n    \n    address[] internal _owners;\n    \n    mapping(uint256 => address) private _tokenApprovals;\n    \n    mapping(address => mapping(address => bool)) private _operatorApprovals;     \n    \n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }     \n    \n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n    \n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        uint count = 0;\n        uint n = _owners.length;\n        for (uint i = 0; i < n; ++i) {\n            if (owner == _owners[i]) {\n                ++count;\n            }\n        }\n        return count;\n    }\n    \n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n    \n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n    \n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n    \n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n    \n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n    \n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n    \n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n    \n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n    \n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n    \n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }     \n    \n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n  \n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return tokenId < _owners.length && _owners[tokenId] != address(0);\n    }\n  \n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n  \n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n  \n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n  \n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n        _owners.push(to);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n  \n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n        _owners[tokenId] = address(0);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n  \n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n  \n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n  \n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n  \n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n\npragma solidity ^0.8.0;\n\n// import \"@openzeppelin/contracts@4.3.2/token/ERC721/extensions/IERC721Enumerable.sol\";\n\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    \n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n    \n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256 tokenId) {\n        uint256 count = 0;\n        uint256 n = _owners.length;\n        for (uint256 i = 0; i < n; ++i) {\n            if (owner == _owners[i]) {\n                if (count == index) {\n                    return i;\n                } else {\n                    ++count;\n                }\n            }\n        }\n        require(false, \"Token not found.\");\n    }\n    \n    function totalSupply() public view virtual override returns (uint256) {\n        return _owners.length;\n    }\n    \n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"Token not found.\");\n        return index;\n    }\n}\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\n// import \"@openzeppelin/contracts@4.3.2/access/Ownable.sol\";\n// import \"@openzeppelin/contracts@4.3.2/security/ReentrancyGuard.sol\";\n\ncontract SoraDarkAge is ERC721Enumerable, Ownable, ReentrancyGuard {\n\n    using Strings for uint;\n    \n    uint public constant TOKEN_PRICE = 80000000000000000; // 0.08 ETH\n\n    uint public constant PRE_SALE_TOKEN_PRICE = 50000000000000000; // 0.05 ETH\n\n    uint public constant MAX_TOKENS_PER_PUBLIC_MINT = 10; // Only applies during public sale.\n\n    uint public constant MAX_TOKENS = 8888;\n\n    address public constant GENESIS_BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\n\n    /// @dev 1: presale, 2: public sale, 3: genesis claim, 4: genesis burn, 255: closed.\n    uint public saleState; \n\n    /// @dev A mapping of the token names.\n    mapping(uint => string) public tokenNames;\n\n    // @dev Whether the presale slot has been used. One slot per address.\n    mapping(address => bool) public presaleUsed;\n\n    /// @dev 256-bit words, each representing 256 booleans.\n    mapping(uint => uint) internal genesisClaimedMap;\n\n    /// @dev The license text/url for every token.\n    string public LICENSE = \"https://www.nftlicense.org\"; \n\n    /// @dev Link to a Chainrand NFT.\n    ///      This contains all the information needed to reproduce\n    ///      the traits with a locked Chainlink VRF result.\n    string public PROVENANCE; \n\n    /// @dev The base URI\n    string public baseURI;\n\n    event TokenNameChanged(address _by, uint _tokenId, string _name);\n\n    event LicenseSet(string _license);\n\n    event ProvenanceSet(string _provenance);\n\n    event SaleClosed();\n\n    event PreSaleOpened();\n\n    event PublicSaleOpened();\n\n    event GenesisClaimOpened();\n\n    event GenesisBurnOpened();\n\n    // IMPORTANT: Make sure to change this to the correct address before publishing!\n    // Gen 0 mainnet address: 0x4e2781e3aD94b2DfcF34c51De0D8e9358c69F296\n    IERC721 internal genesisContract = IERC721(0x4e2781e3aD94b2DfcF34c51De0D8e9358c69F296);\n\n    constructor() \n    ERC721(\"Sora Dark Age\", \"SDA\") { \n        saleState = 255;\n        baseURI = \"https://sorasdreamworld.io/tokens/dark/\";\n    }\n    \n    /// @dev Withdraws Ether for the owner.    \n    function withdraw() public onlyOwner {\n        uint256 amount = address(this).balance;\n        payable(msg.sender).transfer(amount);\n    }\n\n    /// @dev Sets the provenance.\n    function setProvenance(string memory _provenance) public onlyOwner {\n        PROVENANCE = _provenance;\n        emit ProvenanceSet(_provenance);\n    }\n\n    /// @dev Sets base URI for all token IDs. \n    ///      e.g. https://sorasdreamworld.io/tokens/dark/\n    function setBaseURI(string memory _baseURI) public onlyOwner {\n        baseURI = _baseURI;\n    }\n\n    /// @dev Open the pre-sale. \n    function openPreSale() public onlyOwner {\n        saleState = 1;\n        emit PreSaleOpened();\n    }\n\n    /// @dev Open the public sale. \n    function openPublicSale() public onlyOwner {\n        saleState = 2;\n        emit PublicSaleOpened();\n    }\n\n    /// @dev Open the claim phase. \n    function openGenesisClaim() public onlyOwner {\n        saleState = 3;\n        emit GenesisClaimOpened();\n    }\n\n    /// @dev Open the burn phase. \n    function openGenesisBurn() public onlyOwner {\n        saleState = 4;\n        emit GenesisBurnOpened();\n    }\n\n    /// @dev Close the sale.\n    function closeSale() public onlyOwner {\n        saleState = 255;\n        emit SaleClosed();\n    }\n\n    /// @dev Mint just one NFT.\n    function mintOne(address _toAddress) internal {\n        uint mintIndex = totalSupply();\n        require(mintIndex < MAX_TOKENS, \"Sold out.\");\n        _safeMint(_toAddress, mintIndex);\n    }\n\n    /// @dev Force mint for the addresses. \n    //       Can be called anytime.\n    //       If called right after the creation of the contract, the tokens \n    //       are assigned sequentially starting from id 0. \n    function forceMint(address[] memory _addresses) public onlyOwner { \n        for (uint i = 0; i < _addresses.length; ++i) {\n            mintOne(_addresses[i]);\n        }\n    }\n    \n    /// @dev Self mint for the owner. \n    ///      Can be called anytime.\n    ///      This does not require the sale to be open.\n    function selfMint(uint _numTokens) public onlyOwner { \n        for (uint i = 0; i < _numTokens; ++i) {\n            mintOne(msg.sender);\n        }\n    }\n    \n    /// @dev Sets the license text.\n    function setLicense(string memory _license) public onlyOwner {\n        LICENSE = _license;\n        emit LicenseSet(_license);\n    }\n\n    /// @dev Returns the license for tokens.\n    function tokenLicense(uint _id) public view returns(string memory) {\n        require(_id < totalSupply(), \"Token not found.\");\n        return LICENSE;\n    }\n    \n    /// @dev Mints tokens.\n    function mint(uint _numTokens) public payable nonReentrant {\n        // saleState == 1 || saleState == 2. Zero is not used.\n        require(saleState < 3, \"Not open.\"); \n        require(_numTokens > 0, \"Minimum number to mint is 1.\");\n        \n        address sender = msg.sender;\n\n        uint effectiveTokenPrice;\n        if (saleState == 1) {\n            effectiveTokenPrice = PRE_SALE_TOKEN_PRICE; \n            require(_numTokens <= 1, \"Number per mint exceeded.\");\n            require(genesisContract.balanceOf(sender) > 0, \"You don't have a Dream Machine.\");\n            require(!presaleUsed[sender], \"Presale slot already used.\");\n            presaleUsed[sender] = true;\n        } else { // 2\n            effectiveTokenPrice = TOKEN_PRICE;\n            require(_numTokens <= MAX_TOKENS_PER_PUBLIC_MINT, \"Number per mint exceeded.\");\n        }\n\n        require(msg.value >= effectiveTokenPrice * _numTokens, \"Wrong Ether value.\");\n\n        for (uint i = 0; i < _numTokens; ++i) {\n            mintOne(sender);\n        }\n    }\n\n    /// @dev Returns whether the genesis token has been claimed.\n    function checkGenesisClaimed(uint _genesisId) public view returns(bool) {\n        uint t = _genesisId;\n        uint q = t >> 8;\n        uint r = t & 255;\n        uint m = genesisClaimedMap[q];\n        return m & (1 << r) != 0;\n    }\n\n    /// @dev Returns an array of uints representing whether the token has been claimed.\n    function genesisClaimed(uint[] memory _genesisIds) public view returns(bool[] memory) {\n        uint n = _genesisIds.length;\n        bool[] memory a = new bool[](n);\n        for (uint i = 0; i < n; ++i) {\n            a[i] = checkGenesisClaimed(_genesisIds[i]);\n        }\n        return a;\n    }\n\n    /// @dev Use the genesis tokens to claim free mints.\n    function genesisClaim(uint[] memory _genesisIds) public nonReentrant {\n        require(saleState == 3, \"Not open.\");\n        uint n = _genesisIds.length;\n        require(n > 0 && n % 3 == 0, \"Please submit a positive multiple of 3.\");\n        address sender = msg.sender;\n        uint qPrevInitial = 1 << 255;\n        uint qPrev = qPrevInitial;\n        uint m;\n        for (uint i = 0; i < n; i += 3) {\n            for (uint j = 0; j < 3; ++j) {\n                uint t = _genesisIds[i + j];\n                uint q = t >> 8;\n                uint r = t & 255;\n                if (q != qPrev) {\n                    if (qPrev != qPrevInitial) {\n                        genesisClaimedMap[qPrev] = m;\n                    } \n                    m = genesisClaimedMap[q];\n                } \n                qPrev = q;\n                uint b = 1 << r;\n                // Token must be unused and owned.\n                require(m & b == 0 && genesisContract.ownerOf(t) == sender, \"Invalid submission.\");\n                // Modifying the map and checking will ensure that there \n                // are no duplicates in _genesisIds.\n                m = m | b;\n            }\n            mintOne(sender);\n        }\n        genesisClaimedMap[qPrev] = m;    \n    }\n\n    /// @dev Burns the genesis tokens for free mints.\n    function genesisBurn(uint[] memory _genesisIds) public nonReentrant {\n        require(saleState == 4, \"Not open.\");\n        uint n = _genesisIds.length;\n        require(n > 0 && n & 1 == 0, \"Please submit a positive multiple of 2.\");\n        address sender = msg.sender;\n        for (uint i = 0; i < n; i += 2) {\n            // Transfer from requires that the token must be owned.\n            // Calling it in sequence will ensure that no are no \n            // duplicates in _genesisIds.\n            genesisContract.transferFrom(sender, GENESIS_BURN_ADDRESS, _genesisIds[i]);\n            genesisContract.transferFrom(sender, GENESIS_BURN_ADDRESS, _genesisIds[i + 1]);\n            mintOne(sender);\n        }   \n    }\n\n    /// @dev Returns an array of the token ids under the owner.\n    function tokensOfOwner(address _owner) external view returns (uint[] memory) {\n        uint[] memory a = new uint[](balanceOf(_owner));\n        uint j = 0;\n        uint n = _owners.length;\n        for (uint i; i < n; ++i) {\n            if (_owner == _owners[i]) {\n                a[j++] = i;\n            }\n        }\n        return a;\n    }\n    \n    /// @dev Change the token name.\n    function changeTokenName(uint _id, string memory _name) public {\n        require(ownerOf(_id) == msg.sender, \"You do not own this token.\");\n        require(sha256(bytes(_name)) != sha256(bytes(tokenNames[_id])), \"Name unchanged.\");\n        tokenNames[_id] = _name;\n        emit TokenNameChanged(msg.sender, _id, _name);\n    }\n\n    /// @dev Returns the token's URI for the metadata.\n    function tokenURI(uint256 _id) public view virtual override returns (string memory) {\n        require(_id < totalSupply(), \"Token not found.\");\n        return string(abi.encodePacked(baseURI, _id.toString()));\n    }\n\n    /// @dev Returns the most relevant stats in a single go to reduce RPC calls.\n    function stats() external view returns (uint[] memory) {\n        uint[] memory a = new uint[](4);\n        a[0] = saleState; \n        a[1] = totalSupply(); \n        a[2] = genesisContract.balanceOf(GENESIS_BURN_ADDRESS);\n        a[3] = saleState == 1 ? PRE_SALE_TOKEN_PRICE : TOKEN_PRICE;\n        return a;\n    }\n}\n"
    }
  }
}