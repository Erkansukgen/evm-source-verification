{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Tommy Token.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ncontract Token{\r\n    \r\n    mapping (address => uint) public balances;\r\n    mapping (address => mapping(address => uint)) public allowance;\r\n\r\n    uint public totalSupply = 1000000 ;\r\n    string public name = \"Tommy Token\";\r\n    string public symbol = \"TMY\";\r\n    uint public decimals = 0;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    \r\n    constructor() {\r\n        balances[msg.sender] = totalSupply;\r\n    } \r\n\r\n    function balanceOf(address owner) public view returns(uint) {\r\n        return balances[owner];\r\n    }\r\n\r\n\r\n    function Tranfer(address to, uint value) public returns(bool) {\r\n        require(balanceOf(msg.sender) >= value, \"balance too low\");\r\n        balances[to] += value;\r\n        balances[msg.sender] -= value;\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;         \r\n    }\r\n\r\n    function TransferFrom(address from, address to, uint value) public returns (bool){\r\n        require(balanceOf(from) >= value, \"Balance is too low\");\r\n        require (allowance[from][msg.sender] >= value, \"Allowance too low\" );\r\n        balances[to] += value;\r\n        balances [from] -= value;\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function Approve(address spender, uint value) public returns(bool) {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n}"}}}