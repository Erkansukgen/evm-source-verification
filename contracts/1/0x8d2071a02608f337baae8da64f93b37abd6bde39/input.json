{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Howl_flat.sol":{"content":"\n// File: @openzeppelin/contracts/utils/cryptography/ECDSA.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Counters.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Strings.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n\n\n\n\n\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n\n// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n\n// File: contracts/Howl.sol\n\n\npragma solidity ^0.8.2;\n\n\n\n\n\ninterface ISoul {\n    function mint(address _address, uint256 _amount) external;\n\n    function collectAndBurn(address _address, uint256 _amount) external;\n}\n\ncontract Howl is ERC721Burnable, Ownable {\n    using ECDSA for bytes32;\n    using Counters for Counters.Counter;\n\n    constructor() ERC721(\"House of Warlords\", \"HOWL\") Ownable() {\n        genesisTokenIdCounter._value = 888; // accounting for giveaways and reserve\n        genesisReserveTokenIdCounter._value = 8; // accounting for legendaries\n    }\n\n    struct Warlord {\n        uint16 face; // 0\n        uint16 headGear; // 1\n        uint16 clothes; // 2\n        uint16 shoulderGuard; // 3\n        uint16 armGuards; // 4\n        uint16 sideWeapon; // 5\n        uint16 backWeapon; // 6\n        uint16 background; // 7\n        uint16 killCount; // 8\n    }\n\n    event Seppuku(\n        address indexed _address,\n        uint256 indexed _generation,\n        uint256 _tokenId1,\n        uint256 _tokenId2\n    );\n\n    event Resurrection(\n        uint256 indexed _tokenId,\n        address indexed _address,\n        uint256 indexed _generation\n    );\n\n    event VoucherUsed(\n        address indexed _address,\n        uint256 indexed _nonce,\n        uint256 _claimQty\n    );\n\n    event StartConquest(uint256 indexed _tokenId, uint256 _startDate);\n    event EndConquest(uint256 indexed _tokenId, uint256 _reward);\n    event NameChange(uint256 indexed _tokenId, string _name);\n\n    Counters.Counter public generationCounter;\n    Counters.Counter public genesisTokenIdCounter;\n    Counters.Counter public genesisReserveTokenIdCounter;\n\n    uint256 public constant GENESIS_MAX_SUPPLY = 8888;\n    uint256 public constant RESERVE_QTY = 888;\n    uint256 public SALE_MINT_PRICE = 0.069 ether;\n    bool public IS_SALE_ON;\n    bool public IS_SEPPUKU_ON;\n    bool public IS_STAKING_ON;\n\n    uint256[3] private _stakingRewards = [250, 600, 1000];\n    uint256[3] private _stakingPeriods = [30, 60, 90];\n\n    uint256 public seppukuBaseFee = 1000;\n    uint256 public seppukuMultiplierFee = 500;\n\n    bool public canSummonLegendaries = true;\n\n    string public preRevealUrl;\n    string public apiUrl;\n    address public signer;\n    address public soulContractAddress;\n\n    // When warlords are minted for the first time this contract generates a random looking DNA mapped to a tokenID.\n    // The actual uint16 properties of the warlord are later derived by decoding it with the\n    // information that's inside of the generationRanges and generationRarities mappings.\n    // Each generation of warlords will have its own set of rarities and property ranges\n    // with a provenance hash uploaded ahead of time.\n    // It gurantees that the actual property distribution is hidden during the pre-reveal phase since decoding depends on\n    // the unknown information.\n    // Property ranges are stored inside of a uint16[4] array per each property.\n    // These 4 numbers are interpreted as buckets of traits. Traits are just sequential numbers.\n    // For example [1, 100, 200, 300] value inside of generationRanges for the face property will be interpreted as:\n    // - Common: 1-99\n    // - Uncommon: 100-199\n    // - Rare: 200 - 299\n    //\n    // The last two pieces of data are located inside of generationRarities mapping which holds uint16[2] arrays of rarities.\n    // For example, if our rarities were defined as [80, 15], combined with buckets from above they will result in:\n    // - Common: 1-99 [80% chance]\n    // - Uncommon: 100-199 [15% chance]\n    // - Rare: 200 - 299 [5% chance]\n    //\n    // This framework helps us to keep our trait generation random and hidden while still allowing for\n    // clearly defined rarity categories.\n    mapping(uint256 => mapping(uint256 => uint16[4])) public generationRanges;\n    mapping(uint256 => uint16[2]) public generationRarities;\n    mapping(uint256 => uint256) public generationProvenance;\n    mapping(uint256 => bool) public isGenerationRevealed;\n    mapping(uint256 => uint256) public generationSeed;\n    mapping(uint256 => uint256) public generationResurrectionChance;\n    mapping(address => mapping(uint256 => uint256)) public resurrectionTickets;\n    mapping(uint256 => uint256) private _tokenIdToWarlord;\n    mapping(uint256 => uint256) public conquests;\n    mapping(uint256 => uint256) private _voucherToMinted;\n    mapping(uint256 => string) public tokenIdToWarlordName;\n    mapping(string => bool) public namesTaken;\n\n    // This mapping is going to be used to connect our howl store implementation and potential future\n    // mechanics that will enhance this collection.\n    mapping(address => bool) public authorizedToEquip;\n    // Kill switch for the mapping above, if community decides that it's too dangerous to have this\n    // list extendable we can prevent it from being modified.\n    bool public isAuthorizedToEquipLocked;\n\n    mapping(address => bool) public admins;\n\n    function _isTokenOwner(uint256 _tokenId) private view {\n        require(\n            ownerOf(_tokenId) == msg.sender,\n            \"HOWL: you don't own this token\"\n        );\n    }\n\n    function _isOwnerOrAdmin() private view {\n        require(\n            owner() == msg.sender || admins[msg.sender],\n            \"HOWL: unauthorized\"\n        );\n    }\n\n    modifier onlyOwnerOrAdmin() {\n        _isOwnerOrAdmin();\n        _;\n    }\n\n    modifier onlyTokenOwner(uint256 _tokenId) {\n        _isTokenOwner(_tokenId);\n        _;\n    }\n\n    modifier onlyAuthorizedToEquip() {\n        require(authorizedToEquip[msg.sender], \"HOWL: unauthorized\");\n        _;\n    }\n\n    function withdraw() external onlyOwner {\n        payable(owner()).transfer(address(this).balance);\n    }\n\n    function setAuthorizedToEquip(address _address, bool _isAuthorized)\n        external\n        onlyOwner\n    {\n        require(!isAuthorizedToEquipLocked);\n        authorizedToEquip[_address] = _isAuthorized;\n    }\n\n    function lockAuthorizedToEquip() external onlyOwner {\n        isAuthorizedToEquipLocked = true;\n    }\n\n    function setAdmin(address _address, bool _hasAccess) external onlyOwner {\n        admins[_address] = _hasAccess;\n    }\n\n    function setSaleMintPrice(uint256 _mintPrice) external onlyOwner {\n        SALE_MINT_PRICE = _mintPrice;\n    }\n\n    function setSigner(address _signer) external onlyOwner {\n        signer = _signer;\n    }\n\n    function setApiUrl(string calldata _apiUrl) external onlyOwner {\n        apiUrl = _apiUrl;\n    }\n\n    function setPreRevealUrl(string calldata _preRevealUrl) external onlyOwner {\n        preRevealUrl = _preRevealUrl;\n    }\n\n    function setSoulContractAddress(address _address) external onlyOwner {\n        soulContractAddress = _address;\n    }\n\n    function setIsSaleOn(bool _isSaleOn) external onlyOwnerOrAdmin {\n        IS_SALE_ON = _isSaleOn;\n    }\n\n    function setIsSeppukuOn(bool _isSeppukuOn) external onlyOwnerOrAdmin {\n        IS_SEPPUKU_ON = _isSeppukuOn;\n    }\n\n    function setSeppukuBaseAndMultiplierFee(\n        uint256 _baseFee,\n        uint256 _multiplierFee\n    ) external onlyOwnerOrAdmin {\n        seppukuBaseFee = _baseFee;\n        seppukuMultiplierFee = _multiplierFee;\n    }\n\n    function setStakingRewardsAndPeriods(\n        uint256[3] calldata _rewards,\n        uint256[3] calldata _periods\n    ) external onlyOwnerOrAdmin {\n        _stakingRewards = _rewards;\n        _stakingPeriods = _periods;\n    }\n\n    function getStakingRewardsAndPeriods()\n        external\n        view\n        returns (uint256[3][2] memory)\n    {\n        return [\n            [_stakingRewards[0], _stakingRewards[1], _stakingRewards[2]],\n            [_stakingPeriods[0], _stakingPeriods[1], _stakingPeriods[2]]\n        ];\n    }\n\n    function setIsStakingOn(bool _isStakingOn) external onlyOwnerOrAdmin {\n        IS_STAKING_ON = _isStakingOn;\n    }\n\n    function setIsGenerationRevealed(uint256 _gen, bool _isGenerationRevealed)\n        external\n        onlyOwnerOrAdmin\n    {\n        require(!isGenerationRevealed[_gen]);\n        isGenerationRevealed[_gen] = _isGenerationRevealed;\n    }\n\n    function setGenerationRanges(\n        uint256 _gen,\n        uint16[4] calldata _face,\n        uint16[4] calldata _headGear,\n        uint16[4] calldata _clothes,\n        uint16[4] calldata _shoulderGuard,\n        uint16[4] calldata _armGuards,\n        uint16[4] calldata _sideWeapon,\n        uint16[4] calldata _backWeapon,\n        uint16[4] calldata _background\n    ) external onlyOwnerOrAdmin {\n        require(!isGenerationRevealed[_gen]);\n\n        generationRanges[_gen][0] = _face;\n        generationRanges[_gen][1] = _headGear;\n        generationRanges[_gen][2] = _clothes;\n        generationRanges[_gen][3] = _shoulderGuard;\n        generationRanges[_gen][4] = _armGuards;\n        generationRanges[_gen][5] = _sideWeapon;\n        generationRanges[_gen][6] = _backWeapon;\n        generationRanges[_gen][7] = _background;\n    }\n\n    function setGenerationRarities(\n        uint256 _gen,\n        uint16 _common,\n        uint16 _uncommon\n    ) external onlyOwnerOrAdmin {\n        require(!isGenerationRevealed[_gen]);\n        // rare is derived by 100% - common + uncommon\n        // so in the case of [80,15] - rare will be 5%\n        require(_common > _uncommon);\n        generationRarities[_gen] = [_common, _uncommon];\n    }\n\n    function setGenerationProvenance(uint256 _provenance, uint256 _gen)\n        external\n        onlyOwnerOrAdmin\n    {\n        require(generationProvenance[_gen] == 0);\n        generationProvenance[_gen] = _provenance;\n    }\n\n    function startNextGenerationResurrection(uint256 _resurrectionChance)\n        external\n        onlyOwnerOrAdmin\n    {\n        require(!IS_SEPPUKU_ON);\n        generationCounter.increment();\n        uint256 gen = generationCounter.current();\n        generationSeed[gen] = _getSeed();\n        generationResurrectionChance[gen] = _resurrectionChance;\n    }\n\n    function mintReserve(address _address, uint256 _claimQty)\n        external\n        onlyOwner\n    {\n        require(\n            genesisReserveTokenIdCounter.current() + _claimQty <= RESERVE_QTY\n        );\n\n        for (uint256 i = 0; i < _claimQty; i++) {\n            genesisReserveTokenIdCounter.increment();\n            _mintWarlord(_address, genesisReserveTokenIdCounter.current(), 0);\n        }\n    }\n\n    function summonLegendaries(address _address) external onlyOwner {\n        require(canSummonLegendaries);\n        // make sure that this action cannot be performed again\n        // in theory all 10 legendaries can be burned\n        canSummonLegendaries = false;\n\n        uint256 traitBase = 10000;\n        for (uint256 i = 1; i < 9; i++) {\n            // first 4 are zen, second 4 are aku\n            _tokenIdToWarlord[i] = _generateDecodedDna(\n                Warlord(\n                    uint16(traitBase + i), // produces traits that look like 10001 - 10002 - ...etc.\n                    uint16(traitBase + i),\n                    uint16(traitBase + i),\n                    uint16(traitBase + i),\n                    uint16(traitBase + i),\n                    uint16(traitBase + i),\n                    uint16(traitBase + i),\n                    (i <= 4) ? uint16(traitBase + 1) : uint16(traitBase + 2), // background is 10001 for zen and 10002 for aku\n                    0 // 0 kills\n                )\n            );\n\n            _safeMint(_address, i);\n        }\n    }\n\n    function redeemVoucher(\n        address _address,\n        uint256 _approvedQty,\n        uint256 _price,\n        uint256 _nonce,\n        bool _isLastItemFree,\n        bool _isTeamReserve,\n        uint256 _claimQty,\n        bytes calldata _voucher\n    ) external payable {\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                _address,\n                _approvedQty,\n                _price,\n                _nonce,\n                _isLastItemFree,\n                _isTeamReserve\n            )\n        );\n\n        require(\n            _verifySignature(signer, hash, _voucher),\n            \"HOWL: invalid signature\"\n        );\n\n        uint256 totalWithClaimed = _voucherToMinted[uint256(hash)] + _claimQty;\n        require(totalWithClaimed <= _approvedQty, \"HOWL: exceeds approved qty\");\n\n        _voucherToMinted[uint256(hash)] += _claimQty;\n\n        // Make last item free if voucher allows\n        string memory err = \"HOWL: not enough funds sent\";\n        if (totalWithClaimed == _approvedQty && _isLastItemFree) {\n            require(msg.value >= _price * (_claimQty - 1), err);\n        } else {\n            require(msg.value >= _price * _claimQty, err);\n        }\n\n        if (_isTeamReserve) {\n            // Minting from 9-888 range if authorized to mint from the reserve\n            require(\n                genesisReserveTokenIdCounter.current() + _claimQty <=\n                    RESERVE_QTY,\n                \"HOWL: exceeds reserve supply\"\n            );\n            for (uint256 i = 0; i < _claimQty; i++) {\n                genesisReserveTokenIdCounter.increment();\n                _mintWarlord(\n                    _address,\n                    genesisReserveTokenIdCounter.current(),\n                    0\n                );\n            }\n        } else {\n            // minting from 889 to 8888\n            require(\n                genesisTokenIdCounter.current() + _claimQty <=\n                    GENESIS_MAX_SUPPLY,\n                \"HOWL: exceeds max genesis supply\"\n            );\n\n            for (uint256 i = 0; i < _claimQty; i++) {\n                genesisTokenIdCounter.increment();\n                _mintWarlord(_address, genesisTokenIdCounter.current(), 0);\n            }\n        }\n\n        emit VoucherUsed(_address, _nonce, _claimQty);\n    }\n\n    function mintSale(uint256 _claimQty) external payable {\n        require(IS_SALE_ON, \"HOWL: sale is not active\");\n        require(\n            _claimQty <= 10,\n            \"HOWL: can't claim more than 10 in one transaction\"\n        );\n        require(\n            msg.value >= SALE_MINT_PRICE * _claimQty,\n            \"HOWL: not enough funds sent\"\n        );\n        require(\n            genesisTokenIdCounter.current() + _claimQty <= GENESIS_MAX_SUPPLY,\n            \"HOWL: exceeds max genesis supply\"\n        );\n\n        for (uint256 i = 0; i < _claimQty; i++) {\n            genesisTokenIdCounter.increment();\n            _mintWarlord(msg.sender, genesisTokenIdCounter.current(), 0);\n        }\n    }\n\n    function _mintWarlord(\n        address _address,\n        uint256 _tokenId,\n        uint256 _gen\n    ) private {\n        uint256 dna = uint256(\n            keccak256(abi.encodePacked(_address, _tokenId, _getSeed()))\n        );\n\n        // When warlords are generated for the first time\n        // the last 9 bits of their DNA will be used to store the generation number (8 bit)\n        // and a flag that indicates whether the dna is in its encoded\n        // or decoded state (1 bit).\n\n        // Generation number will help to properly decode properties based on\n        // property ranges that are unknown during minting.\n\n        // ((dna >> 9) << 9) clears the last 9 bits.\n        // _gen * 2 moves generation information one bit to the left and sets the last bit to 0.\n        dna = ((dna >> 9) << 9) | (uint8(_gen) * 2);\n        _tokenIdToWarlord[_tokenId] = dna;\n        _safeMint(_address, _tokenId);\n    }\n\n    function canResurrectWarlord(address _address, uint256 _tokenId)\n        public\n        view\n        returns (bool)\n    {\n        // Check if resurrection ticket was submitted\n        uint256 currentGen = generationCounter.current();\n        uint256 resurrectionGen = resurrectionTickets[_address][_tokenId];\n        if (resurrectionGen == 0 || resurrectionGen != currentGen) {\n            return false;\n        }\n\n        // Check if current generation was seeded\n        uint256 seed = generationSeed[currentGen];\n        if (seed == 0) {\n            return false;\n        }\n\n        // Check if this token is lucky to be reborn\n        if (\n            (uint256(keccak256(abi.encodePacked(_tokenId, seed))) % 100) >\n            generationResurrectionChance[currentGen]\n        ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function resurrectWarlord(uint256 _tokenId) external {\n        require(\n            canResurrectWarlord(msg.sender, _tokenId),\n            \"HOWL: warlord cannot be resurrected\"\n        );\n\n        delete resurrectionTickets[msg.sender][_tokenId];\n\n        uint256 gen = generationCounter.current();\n        _mintWarlord(msg.sender, _tokenId, gen);\n        emit Resurrection(_tokenId, msg.sender, gen);\n    }\n\n    function seppuku(\n        uint256 _tokenId1,\n        uint256 _tokenId2,\n        uint16[8] calldata _w\n    ) external onlyTokenOwner(_tokenId1) onlyTokenOwner(_tokenId2) {\n        require(\n            soulContractAddress != address(0) && IS_SEPPUKU_ON,\n            \"HOWL: seppuku is not active\"\n        );\n\n        Warlord memory w1 = getWarlord(_tokenId1);\n        Warlord memory w2 = getWarlord(_tokenId2);\n\n        require(\n            (_w[0] == w1.face || _w[0] == w2.face) &&\n                (_w[1] == w1.headGear || _w[1] == w2.headGear) &&\n                (_w[2] == w1.clothes || _w[2] == w2.clothes) &&\n                (_w[3] == w1.shoulderGuard || _w[3] == w2.shoulderGuard) &&\n                (_w[4] == w1.armGuards || _w[4] == w2.armGuards) &&\n                (_w[5] == w1.sideWeapon || _w[5] == w2.sideWeapon) &&\n                (_w[6] == w1.backWeapon || _w[6] == w2.backWeapon) &&\n                (_w[7] == w1.background || _w[7] == w2.background),\n            \"HOWL: invalid property transfer\"\n        );\n\n        _burn(_tokenId2);\n\n        ISoul(soulContractAddress).mint(\n            msg.sender,\n            seppukuBaseFee +\n                ((w1.killCount + w2.killCount) * seppukuMultiplierFee)\n        );\n\n        // Once any composability mechanic is used warlord traits become fully decoded\n        // for the ease of future trait transfers between generations.\n        _tokenIdToWarlord[_tokenId1] = _generateDecodedDna(\n            Warlord(\n                _w[0],\n                _w[1],\n                _w[2],\n                _w[3],\n                _w[4],\n                _w[5],\n                _w[6],\n                _w[7],\n                w1.killCount + w2.killCount + 1\n            )\n        );\n\n        uint256 gen = generationCounter.current();\n\n        // Burned token has a chance of resurrection during the next generation.\n        resurrectionTickets[msg.sender][_tokenId2] = gen + 1;\n        emit Seppuku(msg.sender, gen, _tokenId1, _tokenId2);\n    }\n\n    function equipProperties(\n        address _originalCaller,\n        uint256 _tokenId,\n        uint16[8] calldata _w\n    ) external onlyAuthorizedToEquip {\n        require(\n            ownerOf(_tokenId) == _originalCaller,\n            \"HOWL: you don't own this token\"\n        );\n\n        Warlord memory w = getWarlord(_tokenId);\n\n        w.face = _w[0] == 0 ? w.face : _w[0];\n        w.headGear = _w[1] == 0 ? w.headGear : _w[1];\n        w.clothes = _w[2] == 0 ? w.clothes : _w[2];\n        w.shoulderGuard = _w[3] == 0 ? w.shoulderGuard : _w[3];\n        w.armGuards = _w[4] == 0 ? w.armGuards : _w[4];\n        w.sideWeapon = _w[5] == 0 ? w.sideWeapon : _w[5];\n        w.backWeapon = _w[6] == 0 ? w.backWeapon : _w[6];\n        w.background = _w[7] == 0 ? w.background : _w[7];\n\n        _tokenIdToWarlord[_tokenId] = _generateDecodedDna(w);\n    }\n\n    function startConquest(uint256 _tokenId) external onlyTokenOwner(_tokenId) {\n        require(IS_STAKING_ON, \"HOWL: conquests are disabled\");\n        require(\n            conquests[_tokenId] == 0,\n            \"HOWL: current conquest hasn't ended yet\"\n        );\n        conquests[_tokenId] = block.timestamp;\n        emit StartConquest(_tokenId, block.timestamp);\n    }\n\n    function getCurrentConquestReward(uint256 _tokenId)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 conquestStart = conquests[_tokenId];\n        require(conquestStart != 0, \"HOWL: warlord is not on a conquest\");\n\n        // Calculate for how long the token has been staked\n        uint256 stakedDays = (block.timestamp - conquestStart) / 24 / 60 / 60;\n        uint256[3] memory periods = _stakingPeriods;\n        uint256[3] memory rewards = _stakingRewards;\n\n        if (stakedDays >= periods[2]) {\n            return rewards[2];\n        } else if (stakedDays >= periods[1]) {\n            return rewards[1];\n        } else if (stakedDays >= periods[0]) {\n            return rewards[0];\n        }\n\n        return 0;\n    }\n\n    function endConquest(uint256 _tokenId) external onlyTokenOwner(_tokenId) {\n        uint256 reward = getCurrentConquestReward(_tokenId);\n        delete conquests[_tokenId];\n\n        if (reward != 0) {\n            ISoul(soulContractAddress).mint(msg.sender, reward);\n        }\n\n        emit EndConquest(_tokenId, reward);\n    }\n\n    // Tokens can't be transferred when on a conquest\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal view override {\n        require(\n            conquests[tokenId] == 0,\n            \"HOWL: can't transfer or burn warlord while on a conquest\"\n        );\n    }\n\n    function nameWarlord(uint256 _tokenId, string calldata _name)\n        external\n        onlyTokenOwner(_tokenId)\n    {\n        require(!namesTaken[_name], \"HOWL: this name has been taken\");\n        ISoul(soulContractAddress).collectAndBurn(msg.sender, 250);\n\n        // if warlords was renamed - unreserve the previous name\n        string memory previousName = tokenIdToWarlordName[_tokenId];\n        if (bytes(previousName).length > 0) {\n            namesTaken[previousName] = false;\n        }\n\n        tokenIdToWarlordName[_tokenId] = _name;\n\n        if (bytes(_name).length > 0) {\n            namesTaken[_name] = true;\n        }\n\n        emit NameChange(_tokenId, _name);\n    }\n\n    function tokenURI(uint256 _tokenId)\n        public\n        view\n        override\n        returns (string memory)\n    {\n        require(_exists(_tokenId), \"HOWL: warlord doesn't exist\");\n\n        if (\n            bytes(apiUrl).length == 0 ||\n            !_isDnaRevealed(_tokenIdToWarlord[_tokenId])\n        ) {\n            return preRevealUrl;\n        }\n\n        Warlord memory w = getWarlord(_tokenId);\n        string memory separator = \"-\";\n        return\n            string(\n                abi.encodePacked(\n                    apiUrl,\n                    abi.encodePacked(\n                        _toString(_tokenId),\n                        separator,\n                        _toString(w.face),\n                        separator,\n                        _toString(w.headGear),\n                        separator,\n                        _toString(w.clothes)\n                    ),\n                    abi.encodePacked(\n                        separator,\n                        _toString(w.shoulderGuard),\n                        separator,\n                        _toString(w.armGuards),\n                        separator,\n                        _toString(w.sideWeapon)\n                    ),\n                    abi.encodePacked(\n                        separator,\n                        _toString(w.backWeapon),\n                        separator,\n                        _toString(w.background),\n                        separator,\n                        _toString(w.killCount)\n                    )\n                )\n            );\n    }\n\n    function _verifySignature(\n        address _signer,\n        bytes32 _hash,\n        bytes memory _signature\n    ) private pure returns (bool) {\n        return\n            _signer ==\n            ECDSA.recover(ECDSA.toEthSignedMessageHash(_hash), _signature);\n    }\n\n    function _getSeed() private view returns (uint256) {\n        return uint256(blockhash(block.number - 1));\n    }\n\n    function _generateDecodedDna(Warlord memory _w)\n        private\n        pure\n        returns (uint256)\n    {\n        uint256 dna = _w.killCount; // 8\n        dna = (dna << 16) | _w.background; // 7\n        dna = (dna << 16) | _w.backWeapon; // 6\n        dna = (dna << 16) | _w.sideWeapon; // 5\n        dna = (dna << 16) | _w.armGuards; // 4\n        dna = (dna << 16) | _w.shoulderGuard; // 3\n        dna = (dna << 16) | _w.clothes; // 2\n        dna = (dna << 16) | _w.headGear; // 1\n        dna = (dna << 16) | _w.face; // 0\n        dna = (dna << 1) | 1; // flag indicating whether this dna was decoded\n        // Decoded DNA won't have a generation number anymore.\n        // These traits will permanently look decoded and no further manipulation will be needed\n        // apart from just extracting it with a bitshift.\n\n        return dna;\n    }\n\n    function _isDnaRevealed(uint256 _dna) private view returns (bool) {\n        // Check the last bit to see if dna is decoded.\n        if (_dna & 1 == 1) {\n            return true;\n        }\n\n        // If dna wasn't decoded we wanna look up whether the generation it belongs to was revealed.\n        return isGenerationRevealed[(_dna >> 1) & 0xFF];\n    }\n\n    function getWarlord(uint256 _tokenId) public view returns (Warlord memory) {\n        uint256 dna = _tokenIdToWarlord[_tokenId];\n        require(_isDnaRevealed(dna), \"HOWL: warlord is not revealed yet\");\n\n        Warlord memory w;\n        w.face = _getWarlordProperty(dna, 0);\n        w.headGear = _getWarlordProperty(dna, 1);\n        w.clothes = _getWarlordProperty(dna, 2);\n        w.shoulderGuard = _getWarlordProperty(dna, 3);\n        w.armGuards = _getWarlordProperty(dna, 4);\n        w.sideWeapon = _getWarlordProperty(dna, 5);\n        w.backWeapon = _getWarlordProperty(dna, 6);\n        w.background = _getWarlordProperty(dna, 7);\n        w.killCount = _getWarlordProperty(dna, 8);\n\n        return w;\n    }\n\n    function _getWarlordProperty(uint256 _dna, uint256 _propertyId)\n        private\n        view\n        returns (uint16)\n    {\n        // Property right offset in bits.\n        uint256 bitShift = _propertyId * 16;\n\n        // Last bit shows whether the dna was already decoded.\n        // If it was we can safely return the stored value after bitshifting and applying a mask.\n        // Decoded values don't have a generation number, so only need to shift by one bit to account for the flag.\n        if (_dna & 1 == 1) {\n            return uint16(((_dna >> 1) >> bitShift) & 0xFFFF);\n        }\n\n        // Every time warlords commit seppuku their DNA will be decoded.\n        // If we got here it means that it wasn't decoded and we can safely assume that their kill counter is 0.\n        if (_propertyId == 8) {\n            return 0;\n        }\n\n        // Minted generation number is stored inside of 8 bits after the encoded/decoded flag.\n        uint256 gen = (_dna >> 1) & 0xFF;\n\n        // Rarity and range values to decode the property (specific to generation)\n        uint16[2] storage _rarity = generationRarities[gen];\n        uint16[4] storage _range = generationRanges[gen][_propertyId];\n\n        // Extracting the encoded (raw) property (also shifting by 9bits first to account for generation metadata and a flag).\n        // This property is just a raw value, it will get decoded with _rarity and _range information from above.\n        uint256 encodedProp = (((_dna >> 9) >> bitShift) & 0xFFFF);\n\n        if (\n            (_propertyId == 3 || _propertyId == 4 || _propertyId == 5) &&\n            // 60% chance that sideWeapon/armGuards/shoulderGuard will appear\n            uint256(keccak256(abi.encodePacked(encodedProp, _range))) % 100 > 60\n        ) {\n            // Unlucky\n            return 0;\n        }\n\n        // A value that will dictate from which pool of properties we should pull (common, uncommon, rare)\n        uint256 rarityDecider = (uint256(\n            keccak256(abi.encodePacked(_propertyId, _dna, _range))\n        ) % 100) + 1;\n\n        uint256 rangeStart;\n        uint256 rangeEnd;\n\n        // There is an opportunity to optimize for SLOAD operations here by byte packing all\n        // rarity/range information and loading it in getWarlord before this function\n        // is called to minimize state access.\n        if (rarityDecider <= _rarity[0]) {\n            // common\n            rangeStart = _range[0];\n            rangeEnd = _range[1];\n        } else if (rarityDecider <= _rarity[1] + _rarity[0]) {\n            // uncommon\n            rangeStart = _range[1];\n            rangeEnd = _range[2];\n        } else {\n            // rare\n            rangeStart = _range[2];\n            rangeEnd = _range[3];\n        }\n\n        // Returns a decoded property that will fall within one of the rarity buckets.\n        return uint16((encodedProp % (rangeEnd - rangeStart)) + rangeStart);\n    }\n\n    function _toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT license\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n}\n"}}}