{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/MiniswapERC20.sol": {
      "content": "// SPDX-License-Identifier: SimPL-2.0\npragma solidity=0.6.9;\n\nimport './interfaces/IMiniswapERC20.sol';\nimport './libraries/SafeMath.sol';\n\ncontract MiniswapERC20 is IMiniswapERC20 {\n    using SafeMath for uint;\n\n    string override public constant name = 'Miniswap';\n    string override public constant symbol = 'MINI';\n    uint8 override public constant decimals = 18;\n    uint override  public totalSupply;\n    mapping(address => uint)  override public balanceOf;\n    mapping(address => mapping(address => uint)) override public allowance;\n\n    bytes32 override public DOMAIN_SEPARATOR;\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 override public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n     mapping(address => uint) override public nonces;\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    constructor() public {\n        uint chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n                keccak256(bytes(name)),\n                keccak256(bytes('1')),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    function _mint(address to, uint value) internal {\n        totalSupply = totalSupply.add(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint value) internal {\n        balanceOf[from] = balanceOf[from].sub(value);\n        totalSupply = totalSupply.sub(value);\n        emit Transfer(from, address(0), value);\n    }\n\n    function _approve(address owner, address spender, uint value) private {\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _transfer(address from, address to, uint value) private {\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function approve(address spender, uint value) override external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint value) override external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) override external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) override external {\n        require(deadline >= block.timestamp, 'Miniswap: EXPIRED');\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                '\\x19\\x01',\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'Miniswap: INVALID_SIGNATURE');\n        _approve(owner, spender, value);\n    }\n}\n"
    },
    "browser/MiniswapFactory.sol": {
      "content": "// SPDX-License-Identifier: SimPL-2.0\npragma solidity=0.6.9;\n\nimport './interfaces/IMiniswapFactory.sol';\nimport './interfaces/IMiniswapMiner.sol';\nimport './MiniswapPair.sol';\nimport './MiniswapMiner.sol';\n\ncontract MiniswapFactory is IMiniswapFactory {\n    address override public feeTo;\n    address override public feeToSetter;\n    address override public miner;\n    address override public MINI;\n\n    mapping(address => mapping(address => address)) override public getPair;\n    address[] override public allPairs;\n\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    constructor(address _miner,address _mini,address _feeToSetter) public {\n        feeToSetter = _feeToSetter;\n        MINI = _mini;\n        miner = _miner;\n    }\n\n    function allPairsLength() override external view returns (uint) {\n        return allPairs.length;\n    }\n\n    function createPair(address tokenA, address tokenB) override external returns (address pair) {\n        require(tokenA != tokenB, 'Miniswap: IDENTICAL_ADDRESSES');\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'Miniswap: ZERO_ADDRESS');\n        require(getPair[token0][token1] == address(0), 'Miniswap: PAIR_EXISTS'); // single check is sufficient\n        bytes memory bytecode = type(MiniswapPair).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        assembly {\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        IMiniswapPair(pair).initialize(miner,MINI,token0, token1);\n        getPair[token0][token1] = pair;\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\n        allPairs.push(pair);\n        emit PairCreated(token0, token1, pair, allPairs.length);\n    }\n\n    function setFeeTo(address _feeTo) override external {\n        require(msg.sender == feeToSetter, 'Miniswap: FORBIDDEN');\n        feeTo = _feeTo;\n    }\n\n    function setFeeToSetter(address _feeToSetter) override external {\n        require(msg.sender == feeToSetter, 'Miniswap: FORBIDDEN');\n        feeToSetter = _feeToSetter;\n    }\n}\n"
    },
    "browser/MiniswapMiner.sol": {
      "content": "// SPDX-License-Identifier: SimPL-2.0\npragma solidity=0.6.9;\n\nimport './interfaces/IMiniswapMiner.sol';\nimport './libraries/TransferHelper.sol';\nimport './interfaces/IMiniswapPair.sol';\nimport './libraries/MiniswapLibrary.sol';\nimport './interfaces/IERC20.sol';\nimport './libraries/SafeMath.sol';\nimport './interfaces/IMini.sol';\n\ncontract MiniswapMiner is IMiniswapMiner{\n    using SafeMath for uint;\n    \n    address public override owner;\n    address public override feeder;\n\n    mapping(address=>bool) public override whitelistMap;\n    mapping(uint256=>uint256) public override mineInfo; // day=>issueAmount\n    mapping(address=>uint256) private balances;\n    \n    uint256 public override minFee;\n\n    uint256 firstTxHeight;\n    address MINI;\n    address USDT;\n    mapping (uint=>mapping(address=>bool)) rewardMap;\n    mapping (uint=>uint) rewardAmountByRoundMap;\n\n    constructor(uint256 _minFee,address _mini,address _usdt,address _feeder) public {\n        owner = msg.sender;\n        minFee = _minFee;\n        MINI = _mini;\n        USDT = _usdt;\n        feeder = _feeder;\n        firstTxHeight = block.number;\n    }\n\n    modifier isOwner(){\n        require(msg.sender == owner,\"forbidden:owner\");\n        _;\n    }\n\n    modifier isWhiteAddress(){\n        require(whitelistMap[msg.sender] == true,\"forbidden:whitelist\");\n        _;\n    }\n\n    function getToken(address token,address to) public isOwner() {\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        IERC20(token).transfer(to,balance);\n    }\n\n    function changeMinFee(uint256 _minFee) override public isOwner() {\n        minFee = _minFee;\n    }\n\n    function addWhitelist(address pair) override public isOwner() {\n        whitelistMap[pair] = true;\n    }\n\n    function addWhitelistByTokens(address factory ,address token0,address token1) override public isOwner() {\n        address pair = MiniswapLibrary.pairFor(factory, token0, token1);\n        addWhitelist(pair);\n    }\n\n    function removeWhitelist(address pair) override public isOwner() {\n        whitelistMap[pair] = false;\n    }\n\n    function removeWhitelistByTokens(address factory ,address token0,address token1) override public isOwner() {\n        address pair = MiniswapLibrary.pairFor(factory, token0, token1);\n        removeWhitelist(pair);\n    }\n\n    function mining(address factory,address feeTemp,address originSender,address token,uint amount) override public isWhiteAddress(){\n        TransferHelper.safeTransferFrom(token,msg.sender,address(this),amount);\n        uint issueAmount;\n        uint miniAmount;\n        if (token == MINI){\n            //send half of increment to address0,the other send to feeder\n            issueAmount = amount;\n            miniAmount = amount;\n        } else if (token == USDT) {\n            //get price from token-USDT-MINI\n            address[] memory path = new address[](2);\n            path[0] = token;\n            path[1] = MINI;\n            uint256[] memory amountsOut = MiniswapLibrary.getAmountsOut(factory,amount,path); //[USDTAmountOut,MINIAmountOut]\n            issueAmount = amountsOut[1];\n            //only mine when usdtout more than minFee\n            if(issueAmount<= minFee)\n                return;\n            miniAmount = swapMini(factory,USDT,issueAmount,amountsOut[0]); //usdt-->mini\n        } else {\n         //get price from token-USDT-MINI\n            address[] memory path = new address[](3);\n            path[0] = token;\n            path[1] = USDT;\n            path[2] = MINI;\n            uint256[] memory amountsOut = MiniswapLibrary.getAmountsOut(factory,amount,path); //[tokenAmountOut,USDTAmountOut,MINIAmountOut]\n            issueAmount = amountsOut[2];\n            //only mine when usdtout more than minFee\n            if(issueAmount<= minFee)\n                return;\n            uint usdtAmount = swapUsdt(factory,token,amountsOut[1],amount); //token-->usdt\n            miniAmount = swapMini(factory,USDT,issueAmount,usdtAmount); //usdt-->mini\n        }\n        //send half of increment to address0,the other half send to feeder\n        TransferHelper.safeTransfer(MINI,address(0x1111111111111111111111111111111111111111), miniAmount.div(2));\n        TransferHelper.safeTransfer(MINI,feeder, miniAmount.div(2));\n        issueMini(issueAmount,feeTemp,originSender);\n    }\n\n    function swapUsdt(address factory, address token,uint usdtAmount,uint amount) internal returns(uint){\n        uint256 balance0 = IERC20(USDT).balanceOf(address(this));\n        (address token0,address token1) = MiniswapLibrary.sortTokens(token,USDT);\n        address pair_token_usdt = MiniswapLibrary.pairFor(factory,token0,token1);\n        (uint amount0Out ,uint amount1Out) = token0==token ? (uint(0),usdtAmount):(usdtAmount,uint(0));\n        TransferHelper.safeTransfer(token,pair_token_usdt,amount); //send token to pair\n        IMiniswapPair(pair_token_usdt).swap(\n                amount0Out, amount1Out, address(this), address(this),new bytes(0)\n            );\n        return IERC20(USDT).balanceOf(address(this)).sub(balance0);\n    }\n\n    function swapMini(address factory, address token,uint issueAmount,uint amount) internal returns(uint){\n        uint256 balance0 = IERC20(MINI).balanceOf(address(this));\n        (address token0,address token1) = MiniswapLibrary.sortTokens(token,MINI);\n        address pair_token_mini = MiniswapLibrary.pairFor(factory,token0,token1);\n        (uint amount0Out ,uint amount1Out) = token0==token ? (uint(0),issueAmount):(issueAmount,uint(0));\n        TransferHelper.safeTransfer(token,pair_token_mini,amount); //send token to pair\n        IMiniswapPair(pair_token_mini).swap(\n                amount0Out, amount1Out, address(this),address(this),new bytes(0)\n            );\n        return IERC20(MINI).balanceOf(address(this)).sub(balance0);\n    }\n\n    function issueMini(uint256 issueAmount,address feeTemp,address originSender) internal {\n        ///////The 6000 block height is one day, 30 day is one month\n        uint durationDay = (block.number.sub(firstTxHeight)).div(6000);\n        uint256 issueAmountLimit = MiniswapLibrary.getIssueAmountLimit(durationDay);\n        //issue mini to liquilidity && user\n        if( mineInfo[durationDay].add(issueAmount).add(issueAmount) > issueAmountLimit){\n            issueAmount = issueAmountLimit.sub( mineInfo[durationDay]).div(2);\n        }\n        if(issueAmount > 0){\n            IMini(MINI).issueTo(originSender,issueAmount);\n            IMini(MINI).issueTo(feeTemp,issueAmount);\n            mineInfo[durationDay] = mineInfo[durationDay].add(issueAmount).add(issueAmount);\n        }\n    }\n}"
    },
    "browser/MiniswapPair.sol": {
      "content": "// SPDX-License-Identifier: SimPL-2.0\npragma solidity =0.6.9;\n\nimport \"./interfaces/IMiniswapPair.sol\";\nimport \"./MiniswapERC20.sol\";\nimport \"./libraries/Math.sol\";\nimport \"./libraries/UQ112x112.sol\";\nimport \"./libraries/TransferHelper.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IMiniswapFactory.sol\";\nimport \"./interfaces/IMiniswapCallee.sol\";\nimport \"./interfaces/IMiniswapMiner.sol\";\nimport \"./TokenTemp.sol\";\n\ncontract MiniswapPair is IMiniswapPair, MiniswapERC20 {\n    using SafeMath for uint256;\n    using UQ112x112 for uint224;\n\n    uint256 public constant override MINIMUM_LIQUIDITY = 10**3;\n    bytes4 private constant SELECTOR = bytes4(\n        keccak256(bytes(\"transfer(address,uint256)\"))\n    );\n\n    address public immutable override factory;\n    address public override miner;\n    address public override token0;\n    address public override token1;\n    address public override MINI;\n    address public override feeTemp;\n\n    mapping(address => uint256) public override userInFeeAmount;\n\n    uint256 public override totalFeeAmount;\n\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\n\n    uint256 public override price0CumulativeLast;\n    uint256 public override price1CumulativeLast;\n    uint256 public override kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n\n    uint256 private unlocked = 1;\n    modifier lock() {\n        if (msg.sender != miner) {\n            require(unlocked == 1, \"Miniswap: LOCKED\");\n            unlocked = 0;\n            _;\n            unlocked = 1;\n        } else {\n            _;\n        }\n    }\n\n    function getReserves()\n        public\n        override\n        view\n        returns (\n            uint112 _reserve0,\n            uint112 _reserve1,\n            uint32 _blockTimestampLast\n        )\n    {\n        _reserve0 = reserve0;\n        _reserve1 = reserve1;\n        _blockTimestampLast = blockTimestampLast;\n    }\n\n    function _safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) private {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(SELECTOR, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"Miniswap: TRANSFER_FAILED\"\n        );\n    }\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 amountmini,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    constructor() public {\n        factory = msg.sender;\n    }\n\n    // called once by the factory at time of deployment\n    function initialize(\n        address _miner,\n        address _mini,\n        address _token0,\n        address _token1\n    ) external override {\n        require(msg.sender == factory, \"Miniswap: FORBIDDEN\"); // sufficient check\n\n        miner = _miner;\n        token0 = _token0;\n        token1 = _token1;\n        MINI = _mini;\n\n        bytes memory bytecode = type(TokenTemp).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        address _tokenTemp;\n        assembly {\n            _tokenTemp := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        feeTemp = _tokenTemp;\n    }\n\n    // update reserves and, on the first call per block, price accumulators\n    function _update(\n        uint256 balance0,\n        uint256 balance1,\n        uint112 _reserve0,\n        uint112 _reserve1\n    ) private {\n        require(\n            balance0 <= uint112(-1) && balance1 <= uint112(-1),\n            \"Miniswap: OVERFLOW\"\n        );\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n            // * never overflows, and + overflow is desired\n            price0CumulativeLast +=\n                uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *\n                timeElapsed;\n            price1CumulativeLast +=\n                uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *\n                timeElapsed;\n        }\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n        blockTimestampLast = blockTimestamp;\n        emit Sync(reserve0, reserve1);\n    }\n\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\n    function _mintFee(uint112 _reserve0, uint112 _reserve1)\n        private\n        returns (bool feeOn)\n    {\n        address feeTo = IMiniswapFactory(factory).feeTo();\n        feeOn = feeTo != address(0);\n        uint256 _kLast = kLast; // gas savings\n        if (feeOn) {\n            if (_kLast != 0) {\n                uint256 rootK = Math.sqrt(uint256(_reserve0).mul(_reserve1));\n                uint256 rootKLast = Math.sqrt(_kLast);\n                if (rootK > rootKLast) {\n                    uint256 numerator = totalSupply.mul(rootK.sub(rootKLast));\n                    uint256 denominator = rootK.mul(5).add(rootKLast);\n                    uint256 liquidity = numerator / denominator;\n                    if (liquidity > 0) _mint(feeTo, liquidity);\n                }\n            }\n        } else if (_kLast != 0) {\n            kLast = 0;\n        }\n    }\n\n    function _settlementMineFee(uint liquidity,address to)\n        private\n        returns (uint256 amountMINI)\n    {\n        if(userInFeeAmount[to] == 0 || totalFeeAmount == 0){\n            return 0;\n        } \n\n        uint256 balance = IERC20(MINI).balanceOf(feeTemp);\n        uint256 durationFee = totalFeeAmount.add(1).sub(userInFeeAmount[to]);\n        amountMINI = liquidity\n                    .mul(balance)\n                    .mul(durationFee)\n                    .div(totalFeeAmount)\n                    .div(totalSupply);\n        if (amountMINI > 0) {\n            TokenTemp(feeTemp).sendTokenTo(MINI, to, amountMINI);\n        }\n        userInFeeAmount[to] = totalFeeAmount;\n    }\n\n    function getMineFeeAmount(address to) external override view returns(uint amountMINI){\n         if(userInFeeAmount[to] == 0 || totalFeeAmount == 0){\n            return 0;\n        } \n        uint256 balance = IERC20(MINI).balanceOf(feeTemp);\n        uint256 durationFee = totalFeeAmount.add(1).sub(userInFeeAmount[to]);\n        amountMINI = balanceOf[to]\n                    .mul(balance)\n                    .mul(durationFee)\n                    .div(totalFeeAmount)\n                    .div(totalSupply);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function mint(address to)\n        external\n        override\n        lock\n        returns (uint256 liquidity)\n    {\n        if (userInFeeAmount[to] > 0) {\n            _settlementMineFee(balanceOf[to],to);\n        }\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\n        uint256 amount0 = balance0.sub(_reserve0);\n        uint256 amount1 = balance1.sub(_reserve1);\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        if (_totalSupply == 0) {\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n        } else {\n            liquidity = Math.min(\n                amount0.mul(_totalSupply) / _reserve0,\n                amount1.mul(_totalSupply) / _reserve1\n            );\n        }\n        require(liquidity > 0, \"Miniswap: INSUFFICIENT_LIQUIDITY_MINTED\");\n        _mint(to, liquidity);\n        userInFeeAmount[to] = totalFeeAmount + 1;\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Mint(msg.sender, amount0, amount1);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function burn(address to)\n        external\n        override\n        lock\n        returns (\n            uint256 amount0,\n            uint256 amount1,\n            uint256 amountMINI\n        )\n    {\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\n        uint256 liquidity = balanceOf[address(this)];\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n        require(\n            amount0 > 0 && amount1 > 0,\n            \"Miniswap: INSUFFICIENT_LIQUIDITY_BURNED\"\n        );\n        amountMINI = _settlementMineFee(liquidity + balanceOf[to],to);\n        _burn(address(this), liquidity);\n        _safeTransfer(_token0, to, amount0);\n        _safeTransfer(_token1, to, amount1);\n\n\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Burn(msg.sender, amount0, amount1, amountMINI, to);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        address originSender,\n        bytes calldata data\n    ) external override lock() {\n        require(\n            amount0Out > 0 || amount1Out > 0,\n            \"Miniswap: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n        require(\n            amount0Out < _reserve0 && amount1Out < _reserve1,\n            \"Miniswap: INSUFFICIENT_LIQUIDITY\"\n        );\n\n        uint256 balance0;\n        uint256 balance1;\n        {\n            // scope for _token{0,1}, avoids stack too deep errors\n            address _token0 = token0;\n            address _token1 = token1;\n            require(to != _token0 && to != _token1, \"Miniswap: INVALID_TO\");\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n            if (data.length > 0)\n                IMiniswapCallee(to).miniswapCall(\n                    msg.sender,\n                    amount0Out,\n                    amount1Out,\n                    data\n                );\n            balance0 = IERC20(_token0).balanceOf(address(this));\n            balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint256 amount0In = balance0 > _reserve0 - amount0Out\n            ? balance0 - (_reserve0 - amount0Out)\n            : 0;\n        uint256 amount1In = balance1 > _reserve1 - amount1Out\n            ? balance1 - (_reserve1 - amount1Out)\n            : 0;\n\n        require(\n            amount0In > 0 || amount1In > 0,\n            \"Miniswap: INSUFFICIENT_INPUT_AMOUNT\"\n        );\n\n        {\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n            uint256 balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\n            uint256 balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\n            require(\n                balance0Adjusted.mul(balance1Adjusted) >=\n                    uint256(_reserve0).mul(_reserve1).mul(1000**2),\n                \"Miniswap: K\"\n            );\n        }\n\n        {\n            uint _amount0In = amount0In;\n            uint _amount1In = amount1In;\n            uint _amount0Out = amount0Out;\n            uint _amount1Out = amount1Out;\n            emit Swap(msg.sender, _amount0In, _amount1In, _amount0Out, _amount1Out, to);\n        }\n\n        {\n            bool isWhiteAddr = IMiniswapMiner(miner).whitelistMap(\n                address(this)\n            );\n            if (isWhiteAddr && msg.sender != miner) {\n                uint256 balanceOfFee0 = IERC20(MINI).balanceOf(feeTemp);\n                address _originSender = originSender;\n                uint256 fee0 = amount0In.mul(3).div(1000);\n                uint256 fee1 = amount1In.mul(3).div(1000);\n                if (fee0 > 0) {\n                    _update(balance0 - fee0, balance1, _reserve0, _reserve1);\n                    TransferHelper.safeApprove(token0, miner, fee0); //send token to miner\n                    IMiniswapMiner(miner).mining(\n                        factory,\n                        feeTemp,\n                        _originSender,\n                        token0,\n                        fee0\n                    );\n                }\n                if (fee1 > 0) {\n                    _update(balance0, balance1 - fee1, _reserve0, _reserve1);\n                    TransferHelper.safeApprove(token1, miner, fee1); //send token to miner\n                    IMiniswapMiner(miner).mining(\n                        factory,\n                        feeTemp,\n                        _originSender,\n                        token1,\n                        fee1\n                    );\n                }\n                uint256 balanceOfFee1 = IERC20(MINI).balanceOf(feeTemp);\n                totalFeeAmount = totalFeeAmount.add(balanceOfFee1).sub(\n                    balanceOfFee0\n                );\n            }\n        }\n\n        _update(\n            IERC20(token0).balanceOf(address(this)),\n            IERC20(token1).balanceOf(address(this)),\n            _reserve0,\n            _reserve1\n        );\n    }\n\n    // force balances to match reserves\n    function skim(address to) external override lock {\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        _safeTransfer(\n            _token0,\n            to,\n            IERC20(_token0).balanceOf(address(this)).sub(reserve0)\n        );\n        _safeTransfer(\n            _token1,\n            to,\n            IERC20(_token1).balanceOf(address(this)).sub(reserve1)\n        );\n    }\n\n    // force reserves to match balances\n    function sync() external override lock {\n        _update(\n            IERC20(token0).balanceOf(address(this)),\n            IERC20(token1).balanceOf(address(this)),\n            reserve0,\n            reserve1\n        );\n    }\n}\n"
    },
    "browser/TokenTemp.sol": {
      "content": "// SPDX-License-Identifier: SimPL-2.0\npragma solidity=0.6.9;\n\nimport \"./interfaces/IERC20.sol\";\n\ncontract TokenTemp {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function sendTokenTo(address token,address to,uint amount) public{\n        require(msg.sender == owner,\"forbidden\");\n        IERC20(token).transfer(to,amount);\n    }\n}"
    },
    "browser/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: SimPL-2.0\npragma solidity=0.6.9;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"
    },
    "browser/interfaces/IMini.sol": {
      "content": "// SPDX-License-Identifier: SimPL-2.0\npragma solidity=0.6.9;\n\ninterface IMini {\n    function k() external view returns(uint256);\n    function kTotals(uint256) external view returns(uint256);\n    function issueTo(address to, uint256 amount) external;\n}"
    },
    "browser/interfaces/IMiniswapCallee.sol": {
      "content": "// SPDX-License-Identifier: SimPL-2.0\npragma solidity=0.6.9;\n\ninterface IMiniswapCallee {\n    function miniswapCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}\n"
    },
    "browser/interfaces/IMiniswapERC20.sol": {
      "content": "// SPDX-License-Identifier: SimPL-2.0\npragma solidity=0.6.9;\n\ninterface IMiniswapERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n"
    },
    "browser/interfaces/IMiniswapFactory.sol": {
      "content": "// SPDX-License-Identifier: SimPL-2.0\npragma solidity=0.6.9;\n\ninterface IMiniswapFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function miner() external view returns(address);\n    function MINI() external view returns(address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "browser/interfaces/IMiniswapMiner.sol": {
      "content": "// SPDX-License-Identifier: SimPL-2.0\npragma solidity=0.6.9;\n\ninterface IMiniswapMiner {\n    event AddWhitelist(address);\n    event RemoveWhitelist(address);\n\n    function owner() external view returns(address);\n    function feeder() external view returns(address);\n\n    function whitelistMap(address) external view returns(bool);\n    function mineInfo(uint256) external view returns(uint256);\n    function minFee() external view returns(uint256);\n\n    function changeMinFee(uint256) external;\n    function addWhitelist(address) external;\n    function addWhitelistByTokens(address,address,address) external;\n    function removeWhitelist(address) external;\n    function removeWhitelistByTokens(address,address,address) external;\n\n    function mining(address,address,address,address,uint) external;//factory receiver token amount\n}"
    },
    "browser/interfaces/IMiniswapPair.sol": {
      "content": "// SPDX-License-Identifier: SimPL-2.0\npragma solidity=0.6.9;\n\ninterface IMiniswapPair {\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1,uint amountMINI, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function miner() external view returns(address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function MINI() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function feeTemp() external view returns(address);\n    function userInFeeAmount(address) external returns(uint);\n    function totalFeeAmount() external returns(uint);\n    function getMineFeeAmount(address) external view returns(uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1,uint amountmini);\n    function swap(uint amount0Out, uint amount1Out, address to,address originSender, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address,address,address, address) external;\n}\n"
    },
    "browser/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: SimPL-2.0\npragma solidity=0.6.9;\n\n// a library for performing various math operations\n\nlibrary Math {\n    function min(uint x, uint y) internal pure returns (uint z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "browser/libraries/MiniswapLibrary.sol": {
      "content": "// SPDX-License-Identifier: SimPL-2.0\npragma solidity=0.6.9;\n\nimport '../interfaces/IMiniswapPair.sol';\n\nimport \"./SafeMath.sol\";\n\nlibrary MiniswapLibrary {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'MiniswapLibrary: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'MiniswapLibrary: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'6a08c047c328990d36617fdbe002638ad81671f5f252ed6812da4b278f06a8e5' // init code hash\n            ))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IMiniswapPair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'MiniswapLibrary: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'MiniswapVLibrary: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'MiniswapLibrary: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'MiniswapLibrary: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, 'MiniswapLibrary: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'MiniswapLibrary: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'MiniswapLibrary: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'MiniswapLibrary: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    function getIssueAmountLimit(uint256 durationDay) internal pure returns(uint256 amount){\n        ///////The 6000 block height is one day, 30 day is one month\n        uint durationMonth = durationDay.div(30);\n        amount = 18000 * (10**18);\n        if (durationMonth < 10) {\n            amount =  uint(500000 * (10**18)).mul(7**durationMonth).div(10**durationMonth);\n        }\n    }\n}\n"
    },
    "browser/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: SimPL-2.0\npragma solidity=0.6.9;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n}\n"
    },
    "browser/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// SPDX-License-Identifier: SimPL-2.0\npragma solidity=0.6.9;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n"
    },
    "browser/libraries/UQ112x112.sol": {
      "content": "// SPDX-License-Identifier: SimPL-2.0\npragma solidity=0.6.9;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n\n// range: [0, 2**112 - 1]\n// resolution: 1 / 2**112\n\nlibrary UQ112x112 {\n    uint224 constant Q112 = 2**112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112; // never overflows\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}\n"
    }
  }
}