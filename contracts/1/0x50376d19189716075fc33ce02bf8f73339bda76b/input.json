{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/tests/CurveTest.sol":{"content":"// SPDX-License-Identifier: SimPL-2.0\r\npragma solidity >=0.6.11;\r\n\r\ninterface ICurve {\r\n    function get_dy(int128 i, int128 j, uint256 dx) external returns (uint256);\r\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n}\r\n\r\n\r\ncontract CureveDemo {\r\n\r\n    address private amountIn = 0xdAC17F958D2ee523a2206206994597C13D831ec7;     \r\n    address private amountOut = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    // address private usdtContract = 0x3B00Ef435fA4FcFF5C209a37d1f3dcff37c705aD;     \r\n    // address private daiContract = 0xc7AD46e0b8a400Bb3C915120d284AafbA8fc4735;\r\n    address private curvePoolContract = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\r\n    address private owner;\r\n    int128 private curveUsdtIndex = 2;\r\n    int128 private curveDaiIndex = 0;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function _withdrawAllOut(address _address) public {\r\n        IERC20 erc = IERC20(amountOut);\r\n        uint amount = erc.balanceOf(address(this));\r\n        erc.transfer(_address, amount);\r\n    }\r\n    \r\n    function _withdrawAllIn(address _address)public {\r\n        IERC20 erc = IERC20(amountIn);\r\n        uint amount = erc.balanceOf(address(this));\r\n        erc.transfer(_address, amount);\r\n    }\r\n    \r\n     function _swapAllUsdt(int128 amoutIndex,int128 amountOutIndex,address _pool,uint _amount) public {\r\n        IERC20 erc = IERC20(amountIn);\r\n        bool b = erc.approve(_pool, _amount);\r\n        require(b,\"approve fail\");\r\n        ICurve curve = ICurve(_pool);\r\n        curve.exchange(amoutIndex, amountOutIndex,_amount,0);\r\n    }\r\n    \r\n     function setAmoutIn(address _address) public{\r\n        amountIn = _address;\r\n    }\r\n    \r\n     function setAmoutOut(address _address) public{\r\n        amountOut = _address;\r\n    }\r\n    \r\n}\r\n"}}}