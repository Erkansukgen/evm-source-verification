{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Utils.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\ncontract Utils {\r\n    address owner;\r\n    \r\n    \r\n    constructor () {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    address[] private Contracts;\r\n   \r\n    modifier restricted {\r\n        for (uint i = 0; i < Contracts.length; i++) {\r\n            if (msg.sender == Contracts[i]) {\r\n                _;\r\n                return;\r\n            }\r\n        }\r\n        revert();\r\n    }\r\n   \r\n    function getContractsLength() external view restricted returns (uint256) {\r\n        return Contracts.length;\r\n    }\r\n    \r\n    function getContracts() external view restricted returns (address[] memory)  {\r\n        return Contracts;\r\n    }\r\n    \r\n    function addContract (address _contract) public {\r\n        require(msg.sender == owner);\r\n        Contracts.push(_contract);\r\n    }\r\n    \r\n    function removeContract (address _contract) public {\r\n        require(msg.sender == owner);\r\n        uint index;\r\n        for (uint i = 0; i < Contracts.length; i++) {\r\n            if (Contracts[i] == _contract) {\r\n                index = i;\r\n            }\r\n        }\r\n\r\n        for (uint i = index; i < Contracts.length-1; i++){\r\n            Contracts[i] = Contracts[i+1];\r\n        }\r\n        Contracts.pop();\r\n\r\n    }\r\n    \r\n       \r\n    function isContract(address addr) public view returns (bool) {\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n    \r\n        bytes32 codehash;\r\n        assembly {\r\n            codehash := extcodehash(addr)\r\n        }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n}"
    }
  }
}