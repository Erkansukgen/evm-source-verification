{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/contracts/1_Storage.sol":{"content":"pragma solidity ^0.6.2;\n\npragma experimental ABIEncoderV2;\n\n\n\ninterface unip {\n     function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n}\n\ninterface pair {\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n}\n\ninterface WETHi {\n    function withdraw(uint wad) external;\n   \n}\n\ninterface mine {\n    function BuyGenesisAddress(address payable _address) external payable;\n    \n    function transfer(address _to, uint256 _value) external;\n}\n\n\n\ncontract flash{\n    \n    address admin;\n    address mn;\n    address pr;\n    address un;\n    address WETH;\n    uint256 bal=3151800000000;\n    uint256 public e;\n    constructor() public{\n        admin=msg.sender;\n        mn=0x426CA1eA2406c07d75Db9585F22781c096e3d0E0;\n        pr=0x709542C3930a713D39aB4725DcCE87a790E0b3Ea;\n        un=0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n        WETH=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n        \n        \n    } \n     receive() external payable {}\n\n    \n    function run() public payable{\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = pair(pr).getReserves();\n        blockTimestampLast;\n        e = unip(un).getAmountOut(bal,reserve0,reserve1);\n        pair(pr).swap (0 , e, address(this), abi.encode(admin,pr));\n       \n        \n    }\n    \n    \n    \n    \n    \n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external payable {\n        WETHi(WETH).withdraw(e);\n        mine(mn).BuyGenesisAddress{value:44 ether/100}(0x27D4e7B9a4DC9dCE903796fE35eb615418208f80);\n        mine(mn).transfer(pr,bal);\n        payable(admin).transfer(address(this).balance);\n    }\n}"}}}