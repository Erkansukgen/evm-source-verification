{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/SeedPool.sol":{"content":"// Dependency file: contracts/seedpool/State.sol\n\n// SPDX-License-Identifier: MIT\n\n// pragma solidity 0.6.12;\n\n\ncontract State {\n    // admin address\n    address payable admin;\n\n    // reward token\n    address token;\n\n    // controller\n    address controller;\n\n    struct Pool {\n        // token address of this pool\n        // use address(0) for ETH\n        address token;\n\n        uint256 stakingBalance;\n        uint256 stakedBalance;\n    }\n\n    struct User {\n        // amount of token or ETH users deposited\n        // but has not traded yet\n        // this balance will not receive profit\n        uint256 stakingBalance;\n\n        // amount of token or ETH users deposited\n        // this balance will receive profit\n        uint256 stakedBalance;\n\n        // amount of pending reward, users can harvest this\n        // this value calculated when admin update the pool\n        uint256 pendingReward;\n    }\n\n    struct UnstakeRequest {\n        // user address\n        address user;\n\n        // unstake amount requested by user\n        uint256 amount;\n\n        // if true, request processed, just ignore it\n        bool processed;\n    }\n\n    Pool[] pools;\n    mapping(uint256 => address[]) usersList;\n    mapping(uint256 => mapping(address => User)) users;\n    mapping(uint256 => UnstakeRequest[]) unstakeRequests;\n\n    // pool\n    function getPoolsLength() public view returns(uint256) {\n        return pools.length;\n    }\n\n    function getPool(uint256 _pool) public view returns(address) {\n        return pools[_pool].token;\n    }\n\n    // users list\n    function getUsersListLength(uint256 _pool) public view returns(uint256) {\n        return usersList[_pool].length;\n    }\n\n    function getUsersList(uint256 _pool) public view returns(address[] memory) {\n        return usersList[_pool];\n    }\n\n    // user\n    function getUser(uint256 _pool, address _user) public view returns(uint256 userStakingBalance, uint256 userStakedBalance, uint256 userPendingReward) {\n        return (users[_pool][_user].stakingBalance, users[_pool][_user].stakedBalance, users[_pool][_user].pendingReward);\n    }\n\n    // unstake requests\n    function getUnstakeRequestsLength(uint256 _pool) public view returns(uint256) {\n        return unstakeRequests[_pool].length;\n    }\n\n    function getUnstakeRequest(uint256 _pool, uint256 _request) public view returns(address user, uint256 amount, bool processed) {\n        return (unstakeRequests[_pool][_request].user, unstakeRequests[_pool][_request].amount, unstakeRequests[_pool][_request].processed);\n    }\n}\n\n\n// Dependency file: contracts/controller/Storage.sol\n\n\n// pragma solidity 0.6.12;\n\n\ncontract Storage {\n    // percent value must be multiple by 1e6\n    uint256[] marketingLevels;\n\n    // array of addresses which have already registered account\n    address[] accountList;\n\n    // bind left with right\n    // THE RULE: the child referred by the parent\n    mapping(address => address) referrals;\n\n    // whitelist root tree of marketing level\n    mapping(address => bool) whitelistRoots;\n\n    function getTotalAccount() public view returns(uint256) {\n        return accountList.length;\n    }\n\n    function getAccountList() public view returns(address[] memory) {\n        return accountList;\n    }\n\n    function getReferenceBy(address _child) public view returns(address) {\n        return referrals[_child];\n    }\n\n    function getMarketingMaxLevel() public view returns(uint256) {\n        return marketingLevels.length;\n    }\n\n    function getMarketingLevelValue(uint256 _level) public view returns(uint256) {\n        return marketingLevels[_level];\n    }\n\n    // get reference parent address matching the level tree\n    function getReferenceParent(address _child, uint256 _level) public view returns(address) {\n        uint i;\n        address pointer = _child;\n\n        while(i < marketingLevels.length) {\n            pointer = referrals[pointer];\n\n            if (i == _level) {\n                return pointer;\n            }\n\n            i++;\n        }\n\n        return address(0);\n    }\n\n    function getWhiteListRoot(address _root) public view returns(bool) {\n        return whitelistRoots[_root];\n    }\n}\n\n\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\n\n\n// pragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\n\n\n// pragma solidity >=0.6.0 <0.8.0;\n\n// import \"@openzeppelin/contracts/GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n// Dependency file: contracts/controller/Controller.sol\n\n\n// pragma solidity 0.6.12;\n\n// import \"contracts/controller/Storage.sol\";\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n\n\ncontract Controller is Storage, Ownable {\n    event LinkCreated(address indexed addr, address indexed refer);\n\n    constructor() public {\n        // init marketing level values\n        // level from 1 -> 8\n        marketingLevels.push(25e6); // 25%\n        marketingLevels.push(20e6);\n        marketingLevels.push(15e6);\n        marketingLevels.push(10e6);\n        marketingLevels.push(10e6);\n        marketingLevels.push(10e6);\n        marketingLevels.push(5e6);\n        marketingLevels.push(5e6);\n    }\n\n    // user register referral address\n    function register(address _refer) public {\n        require(msg.sender != _refer, \"ERROR: address cannot refer itself\");\n        require(referrals[msg.sender] == address(0), \"ERROR: already set refer address\");\n\n        // owner address is the root of references tree\n        if (_refer != owner() && !getWhiteListRoot(_refer)) {\n            require(referrals[_refer] != address(0), \"ERROR: invalid refer address\");\n        }\n\n        // update reference tree\n        referrals[msg.sender] = _refer;\n\n        emit LinkCreated(msg.sender, _refer);\n    }\n\n    // admin update marketing level value\n    function updateMarketingLevelValue(uint256 _level, uint256 _value) public onlyOwner {\n        // value must be expo with 1e6\n        // 25% -> 25e6\n        marketingLevels[_level] = _value;\n    }\n\n    // add white list root tree\n    function addWhiteListRoot(address _root) public onlyOwner {\n        whitelistRoots[_root] = true;\n    }\n}\n\n\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n// pragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * // importANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n\n\n// pragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n// Dependency file: @openzeppelin/contracts/token/ERC20/ERC20.sol\n\n\n// pragma solidity >=0.6.0 <0.8.0;\n\n// import \"@openzeppelin/contracts/GSN/Context.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n\n// Dependency file: contracts/libraries/ERC20Helper.sol\n\n\n// pragma solidity ^0.6.0;\n\n// import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nlibrary ERC20Helper {\n    function getDecimals(address addr) internal view returns(uint256) {\n        ERC20 token = ERC20(addr);\n        return token.decimals();\n    }\n\n    function getBalance(address addr, address user) internal view returns(uint256) {\n        if (addr == address(0)) {\n            return address(addr).balance;\n        }\n\n        ERC20 token = ERC20(addr);\n        return token.balanceOf(user);\n    }\n}\n\n// Dependency file: contracts/seedpool/Getters.sol\n\n\n// pragma solidity 0.6.12;\n\n\n// import \"contracts/seedpool/State.sol\";\n// import \"contracts/controller/Controller.sol\";\n// import \"contracts/libraries/ERC20Helper.sol\";\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract Getters is State {\n    using SafeMath for uint256;\n\n    // get reward token address\n    function getToken() public view returns(address) {\n        return token;\n    }\n\n    // get admin address\n    function getAdmin() public view returns(address) {\n        return admin;\n    }\n\n    // get controller address\n    function getController() public view returns(address) {\n        return controller;\n    }\n\n    /*\n    *   pool\n    */\n\n    // get total value locked in pool: included staking + staked balance\n    function getPoolBalance(uint256 _pool) public view returns(uint256) {\n        return pools[_pool].stakingBalance + pools[_pool].stakedBalance;\n    }\n\n    // get total pool staking balance\n    function getPoolStakingBalance(uint256 _pool) public view returns(uint256) {\n        return pools[_pool].stakingBalance;\n    }\n\n    // get total pool staked balance\n    function getPoolStakedBalance(uint256 _pool) public view returns(uint256) {\n        return pools[_pool].stakedBalance;\n    }\n\n    function getPoolPendingReward(uint256 _pool) public view returns(uint256) {\n        uint256 amount;\n        for (uint256 i=0; i<usersList[_pool].length; i++) {\n            address user = usersList[_pool][i];\n            amount = amount.add(users[_pool][user].pendingReward);\n        }\n        return amount;\n    }\n\n    function getPoolPendingUnstake(uint256 _pool) public view returns(uint256) {\n        uint256 amount;\n        for (uint256 i=0; i<unstakeRequests[_pool].length; i++) {\n            if (!unstakeRequests[_pool][i].processed) {\n                amount = amount.add(unstakeRequests[_pool][i].amount);\n            }\n        }\n        return amount;\n    }\n\n\n    /*\n    *   user\n    */\n\n    // get total balance of user\n    function getUserBalance(uint256 _pool, address _user) public view returns(uint256) {\n        return users[_pool][_user].stakingBalance + users[_pool][_user].stakedBalance;\n    }\n\n    // get user staking balance\n    function getUserStakingBalance(uint256 _pool, address _user) public view returns(uint256) {\n        return users[_pool][_user].stakingBalance;\n    }\n\n    // get user staked balance\n    function getUserStakedBalance(uint256 _pool, address _user) public view returns(uint256) {\n        return users[_pool][_user].stakedBalance;\n    }\n\n    // get pending reward of user\n    function getUserPendingReward(uint256 _pool, address _user) public view returns(uint256) {\n        return users[_pool][_user].pendingReward;\n    }\n\n    // get total user unstake requested amount\n    function getUserPendingUnstake(uint256 _pool, address _user) public view returns(uint256) {\n        uint256 amount;\n        for (uint256 i=0; i<unstakeRequests[_pool].length; i++) {\n            if (unstakeRequests[_pool][i].user == _user && !unstakeRequests[_pool][i].processed) {\n                amount = amount.add(unstakeRequests[_pool][i].amount);\n            }\n        }\n        return amount;\n    }\n\n    // estimate amount of reward token for harvest\n    function estimatePayout(uint256 _pool, uint256 _percent, uint256 _rate) public view returns(uint256) {\n        uint256 estimateAmount;\n        uint256 decimals = 18;\n        if (_pool != 0) {\n            decimals = ERC20Helper.getDecimals(pools[_pool].token);\n        }\n\n        for (uint256 i=0; i<usersList[_pool].length; i++) {\n            address user = usersList[_pool][i];\n\n            // calculate profit\n            uint256 profitAmount = getUserStakedBalance(_pool, user)\n                .mul(_percent)\n                .mul(_rate)\n                .div(100);\n            profitAmount = profitAmount.mul(10**(18 - decimals)).div(1e12);\n\n            estimateAmount = estimateAmount.add(profitAmount);\n\n            // estimate payout amount for references\n            Controller iController = Controller(controller);\n            uint256 maxLevel = iController.getMarketingMaxLevel();\n            uint256 level;\n            while(level < maxLevel) {\n                address parent = iController.getReferenceParent(user, level);\n                if (parent == address(0)) break;\n\n                if (getUserStakedBalance(_pool, parent) > 0) {\n                    uint256 percent = iController.getMarketingLevelValue(level);\n                    uint256 referProfitAmount = profitAmount.mul(percent).div(100).div(1e6);\n                    estimateAmount = estimateAmount.add(referProfitAmount);\n                }\n\n                level++;\n            }\n        }\n\n        return estimateAmount;\n    }\n}\n\n\n// Dependency file: contracts/seedpool/Setters.sol\n\n\n// pragma solidity 0.6.12;\n\n\n// import \"contracts/seedpool/Getters.sol\";\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract Setters is Getters {\n    using SafeMath for uint256;\n\n    function setAdmin(address payable _admin) internal {\n        admin = _admin;\n    }\n\n    function setController(address _controller) internal {\n        controller = _controller;\n    }\n\n    function setToken(address _token) internal {\n        token = _token;\n    }\n\n    /*\n    *   user\n    */\n    function increaseUserStakingBalance(uint256 _pool, address _user, uint256 _amount) internal {\n        users[_pool][_user].stakingBalance = users[_pool][_user].stakingBalance.add(_amount);\n\n        // increase pool staking balance\n        increasePoolStakingBalance(_pool, _amount);\n    }\n\n    function decreaseUserStakingBalance(uint256 _pool, address _user, uint256 _amount) internal {\n        users[_pool][_user].stakingBalance = users[_pool][_user].stakingBalance.sub(_amount);\n\n        // decrease pool staking balance\n        decreasePoolStakingBalance(_pool, _amount);\n    }\n\n    function increaseUserStakedBalance(uint256 _pool, address _user, uint256 _amount) internal {\n        users[_pool][_user].stakedBalance = users[_pool][_user].stakedBalance.add(_amount);\n\n        increasePoolStakedBalance(_pool, _amount);\n    }\n\n    function decreaseUserStakedBalance(uint256 _pool, address _user, uint256 _amount) internal {\n        users[_pool][_user].stakedBalance = users[_pool][_user].stakedBalance.sub(_amount);\n\n        decreasePoolStakedBalance(_pool, _amount);\n    }\n\n    function increaseUserPendingReward(uint256 _pool, address _user, uint256 _amount) internal {\n        users[_pool][_user].pendingReward = users[_pool][_user].pendingReward.add(_amount);\n    }\n\n    function decreaseUserPendingReward(uint256 _pool, address _user, uint256 _amount) internal {\n        users[_pool][_user].pendingReward = users[_pool][_user].pendingReward.sub(_amount);\n    }\n\n    function emptyUserPendingReward(uint256 _pool, address _user) internal {\n        users[_pool][_user].pendingReward = 0;\n    }\n\n    /*\n    *   pool\n    */\n    function appendNewPool(address _token) internal {\n            pools.push(Pool({\n            token: _token,\n            stakingBalance: 0,\n            stakedBalance: 0\n        }));\n    }\n\n    function increasePoolStakingBalance(uint256 _pool, uint256 _amount) internal {\n        pools[_pool].stakingBalance = pools[_pool].stakingBalance.add(_amount);\n    }\n\n    function decreasePoolStakedBalance(uint256 _pool, uint256 _amount) internal {\n        pools[_pool].stakedBalance = pools[_pool].stakedBalance.sub(_amount);\n    }\n\n    function increasePoolStakedBalance(uint256 _pool, uint256 _amount) internal {\n        pools[_pool].stakedBalance = pools[_pool].stakedBalance.add(_amount);\n    }\n\n    function decreasePoolStakingBalance(uint256 _pool, uint256 _amount) internal {\n        pools[_pool].stakingBalance = pools[_pool].stakingBalance.sub(_amount);\n    }\n\n    /*\n    *   unstake requests\n    */\n    function setProcessedUnstakeRequest(uint256 _pool, uint256 _req) internal {\n        unstakeRequests[_pool][_req].processed = true;\n    }\n}\n\n\n// Dependency file: contracts/Constants.sol\n\n\n// pragma solidity 0.6.12;\n\n\nlibrary Constants {\n    address constant BVA = address(0x10d88D7495cA381df1391229Bdb82D015b9Ad17D);\n    address constant USDT = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n}\n\n\n// Dependency file: contracts/libraries/TransferHelper.sol\n\n\n// pragma solidity ^0.6.0;\n\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n\n// Root file: contracts/seedpool/SeedPool.sol\n\n\npragma solidity 0.6.12;\n\n\n// import \"contracts/seedpool/Setters.sol\";\n// import \"contracts/Constants.sol\";\n// import \"contracts/controller/Controller.sol\";\n// import \"contracts/libraries/TransferHelper.sol\";\n// import \"contracts/libraries/ERC20Helper.sol\";\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract SeedPool is Setters, Ownable {\n    using SafeMath for uint256;\n\n    event Stake(address indexed user, uint256 indexed pool, uint256 indexed amount);\n    event Unstake(address indexed user, uint256 indexed pool, uint256 indexed amount);\n    event Harvest(address indexed user, uint256 indexed pool, uint256 indexed amount);\n    event Payout(address admin, uint256 indexed pool, uint256 indexed percent, uint256 indexed rate);\n\n    // emit when admin process the pool unstake request\n    event UnstakeProcessed(address admin, uint256 indexed pool, uint256 indexed amount);\n\n    constructor(address payable _admin, address _controller) public {\n        setAdmin(_admin);\n        setToken(Constants.BVA);\n        setController(_controller);\n\n        // setup default pools\n        appendNewPool(address(0));\n        appendNewPool(Constants.USDT);\n    }\n\n    // fallback function will help contract receive eth sent only by admin\n    receive() external payable {\n        require(msg.sender == admin, \"ERROR: send ETH to contract is not allowed\");\n    }\n\n    // check msg.sender is admin\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"ERROR: only admin\");\n        _;\n    }\n\n    // update profit for reference parents\n    function payoutReference(uint256 _pool, address _child, uint256 _amount) internal returns(uint256) {\n        uint256 totalPayout;\n        Controller iController = Controller(controller);\n        uint256 maxLevel = iController.getMarketingMaxLevel();\n        uint256 level;\n        while(level < maxLevel) {\n            address parent = iController.getReferenceParent(_child, level);\n            if (parent == address(0)) break;\n\n            if (getUserStakedBalance(_pool, parent) > 0) {\n                uint256 percent = iController.getMarketingLevelValue(level);\n                uint256 referProfitAmount = _amount.mul(percent).div(100).div(1e6);\n\n                increaseUserPendingReward(_pool, parent, referProfitAmount);\n                totalPayout = totalPayout.add(referProfitAmount);\n            }\n\n            level++;\n        }\n\n        return totalPayout;\n    }\n\n    // deposit amount of ETH or tokens to contract\n    // user MUST call approve function in Token contract to approve _value for this contract\n    //\n    // after deposit, _value added to staking balance\n    // after one payout action, staking balance will be moved to staked balance\n    function stake(uint256 _pool, uint256 _value) public payable {\n        if (_pool == 0) {\n            increaseUserStakingBalance(_pool, msg.sender, msg.value);\n\n            TransferHelper.safeTransferETH(admin, msg.value);\n\n            emit Stake(msg.sender, _pool, msg.value);\n        } else {\n            TransferHelper.safeTransferFrom(pools[_pool].token, msg.sender, address(this), _value);\n            TransferHelper.safeTransfer(pools[_pool].token, admin, _value);\n\n            increaseUserStakingBalance(_pool, msg.sender, _value);\n\n            emit Stake(msg.sender, _pool, _value);\n        }\n\n        bool isListed;\n        for (uint256 i=0; i<usersList[_pool].length; i++) {\n            if (usersList[_pool][i] == msg.sender) isListed = true;\n        }\n\n        if (!isListed) {\n            usersList[_pool].push(msg.sender);\n        }\n    }\n\n    // request unstake amount of ETH or tokens\n    // user can only request unstake in staked balance\n    function unstake(uint256 _pool, uint256 _value) public {\n        uint256 stakedBalance = getUserStakedBalance(_pool, msg.sender);\n        uint256 requestedAmount = getUserPendingUnstake(_pool, msg.sender);\n        require(_value + requestedAmount <= stakedBalance, \"ERROR: insufficient balance\");\n\n        unstakeRequests[_pool].push(UnstakeRequest({\n            user: msg.sender,\n            amount: _value,\n            processed: false\n        }));\n\n        emit Unstake(msg.sender, _pool, _value);\n    }\n\n    // harvest pending reward token\n    // simple transfer pendingReward to uer wallet\n    function harvest(uint256 _pool) public {\n        uint256 receiveAmount = getUserPendingReward(_pool, msg.sender);\n        if (receiveAmount > 0) {\n            TransferHelper.safeTransfer(token, msg.sender, receiveAmount);\n            emptyUserPendingReward(_pool, msg.sender);\n        }\n\n        emit Harvest(msg.sender, _pool, receiveAmount);\n    }\n\n    // payout function\n    // called only by admin\n    // param @_percent: present amount of reward based on stakedBalance of user\n    // param @_rate: how many reward token for each deposit token\n    //  ex: ? BVA = 1 ETH\n    // _percent & _rate must be multiple by 1e6\n    //\n    // 1. process user staked balance\n    // 2. move user staking balance to staked balance\n    function payout(uint256 _pool, uint256 _percent, uint256 _rate) public onlyAdmin {\n        uint256 totalPayoutReward;\n        uint256 decimals = 18;\n        if (_pool != 0) {\n            decimals = ERC20Helper.getDecimals(pools[_pool].token);\n        }\n\n        for (uint256 i=0; i<usersList[_pool].length; i++) {\n            address user = usersList[_pool][i];\n\n            // calculate profit\n            uint256 profitAmount = getUserStakedBalance(_pool, user)\n                .mul(_percent)\n                .mul(_rate)\n                .div(100);\n            profitAmount = profitAmount.mul(10**(18 - decimals)).div(1e12);\n            totalPayoutReward = totalPayoutReward.add(profitAmount);\n\n            // add profit to pending reward\n            increaseUserPendingReward(_pool, user, profitAmount);\n\n            // move user staking balance to staked balance\n            increaseUserStakedBalance(_pool, user, getUserStakingBalance(_pool, user));\n            decreaseUserStakingBalance(_pool, user, getUserStakingBalance(_pool, user));\n\n            // calculate profit for reference users\n            // double check vs controller\n            uint256 totalReferencePayout = payoutReference(_pool, user, profitAmount);\n            totalPayoutReward = totalPayoutReward.add(totalReferencePayout);\n        }\n\n        TransferHelper.safeTransferFrom(token, msg.sender, address(this), totalPayoutReward);\n\n        emit Payout(msg.sender, _pool, _percent, _rate);\n    }\n\n    // process unstake requests\n    // admin call this function and send ETH or tokens to process\n    // this function check requests all auto process each request\n    function processUnstake(uint256 _pool, uint256 _amount) public payable onlyAdmin {\n        if (_pool == 0) {\n            uint256 tokenBalance = address(this).balance;\n\n            // process until tokenBalance = 0\n            for (uint256 i=0; i<unstakeRequests[_pool].length; i++) {\n                if (unstakeRequests[_pool][i].amount <= tokenBalance && !unstakeRequests[_pool][i].processed) {\n                    address user = unstakeRequests[_pool][i].user;\n                    TransferHelper.safeTransferETH(user, unstakeRequests[_pool][i].amount);\n                    tokenBalance = tokenBalance.sub(unstakeRequests[_pool][i].amount);\n                    decreaseUserStakedBalance(_pool, user, unstakeRequests[_pool][i].amount);\n                    setProcessedUnstakeRequest(_pool, i);\n                }\n            }\n\n            emit UnstakeProcessed(msg.sender, _pool, msg.value);\n        } else {\n            TransferHelper.safeTransferFrom(pools[_pool].token, getAdmin(), address(this), _amount);\n            uint256 tokenBalance = ERC20Helper.getBalance(pools[_pool].token, address(this));\n\n            for (uint256 i=0; i<unstakeRequests[_pool].length; i++) {\n                if (unstakeRequests[_pool][i].amount <= tokenBalance && !unstakeRequests[_pool][i].processed) {\n                    address user = unstakeRequests[_pool][i].user;\n                    // transfer token from contract -> user\n                    TransferHelper.safeTransfer(pools[_pool].token, user, unstakeRequests[_pool][i].amount);\n                    tokenBalance = tokenBalance.sub(unstakeRequests[_pool][i].amount);\n\n                    decreaseUserStakedBalance(_pool, user, unstakeRequests[_pool][i].amount);\n                    setProcessedUnstakeRequest(_pool, i);\n                }\n            }\n\n            emit UnstakeProcessed(msg.sender, _pool, _amount);\n        }\n    }\n\n    // function emergency get all coin from contract to admin\n    function emergencyGetToken(uint256 _pool) public onlyAdmin {\n        if (_pool == 0) {\n            TransferHelper.safeTransferETH(msg.sender, address(this).balance);\n        } else {\n            IERC20 token = IERC20(pools[_pool].token);\n            TransferHelper.safeTransfer(pools[_pool].token, msg.sender, token.balanceOf(address(this)));\n        }\n    }\n\n    // transfer admin\n    function changeAdmin(address payable _admin) public onlyOwner {\n        setAdmin(_admin);\n    }\n\n    // transfer token\n    function changeToken(address _token) public onlyOwner {\n        setToken(_token);\n    }\n\n    // transfer controller\n    function changeController(address _controller) public onlyOwner {\n        setController(_controller);\n    }\n}\n"}}}