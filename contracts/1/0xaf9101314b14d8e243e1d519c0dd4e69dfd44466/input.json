{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"contracts/MetalSwapIronStakingPool.sol":{"content":"\r\n// \"SPDX-License-Identifier: UNLICENSED\"\r\n\r\npragma solidity ^0.8.7;\r\nimport'./StakingPoolPremium.sol';\r\n\r\ncontract MetalSwapIronStakingPool is StakingPoolPremium {\r\n\r\n    constructor(IERC20 stakingToken)  StakingPool(stakingToken) {\r\n        \r\n    }\r\n\r\n}\r\n"},"contracts/StakingPool.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n\r\n contract StakingPool is ReentrancyGuard, Ownable {\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n  \r\n    IERC20 public stakingToken;\r\n    uint256 public startStaking;\r\n    uint256 public endStaking;\r\n    uint256 public poolWeightedAverage;\r\n    \r\n    uint256 public rewardTokensAmount; \r\n    uint256 public stakedTokensTotal; \r\n    bool public paused;\r\n    bool public finalized;\r\n    address private _governance;\r\n    \r\n    mapping(address => uint256) public tokensStakedPerUser;\r\n    mapping(address => uint256) public userWeightedAverage;\r\n    \r\n    /* ========== EVENTS ========== */\r\n\r\n    event RewardAdded(uint256 reward);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Exit(address indexed user, uint256 stakedTokens, uint256 reward);\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(\r\n        IERC20 _stakingToken\r\n    ) {\r\n        stakingToken = _stakingToken;\r\n        _transferGovernance(_msgSender());\r\n        paused = true;\r\n        finalized = false;\r\n    }\r\n\r\n    /* ========== FUNCTIONS ========== */\r\n       \r\n    function finalizePoolCreation (uint256 _startStaking, uint256 periodInSec, uint256 amountOfRewardsTokensToSend,uint16 _slotNumber, uint256 _forSlotAmount) public virtual  onlyGovernance nonReentrant {\r\n        require(finalized == false, \"Error: Staking Pool must be paused in order to finalize!\");\r\n        require (amountOfRewardsTokensToSend > 0, \"Error: The creator must send some reward tokens to the pool in order to create it\");\r\n        require (stakingToken.transferFrom(msg.sender, address(this), amountOfRewardsTokensToSend), \"Error: Reward tokens trasnfer error, cannot create pool\");\r\n        \r\n        startStaking = _startStaking;\r\n        \r\n        endStaking = _startStaking + periodInSec;\r\n        \r\n        rewardTokensAmount = amountOfRewardsTokensToSend;\r\n\r\n        paused = false;\r\n        finalized = true;\r\n        \r\n        emit RewardAdded(amountOfRewardsTokensToSend);\r\n    }\r\n\r\n    function stake(uint256 userInput) public virtual nonReentrant checkPoolOpen checkStakingUnpaused{\r\n        require(userInput > 0, \"Error: Cannot stake 0\");\r\n        \r\n        require(stakingToken.transferFrom(msg.sender, address(this), userInput), \"Error during token transfer\");\r\n        \r\n        tokensStakedPerUser[msg.sender] += userInput;\r\n        \r\n        uint256 weightedAverage = calcWeightedAverage(userInput);\r\n        userWeightedAverage[msg.sender] += weightedAverage;\r\n        \r\n        poolWeightedAverage += weightedAverage;\r\n        stakedTokensTotal += userInput;\r\n        \r\n        emit Staked(msg.sender, userInput);\r\n    }\r\n\r\n    function exit() public nonReentrant checkStakingFinished checkStakingUnpaused{\r\n        \r\n        uint256 stakedTokens = tokensStakedPerUser[msg.sender];\r\n        uint256 reward = calcReward(msg.sender);\r\n        require(stakedTokens > 0, \"Error: Cannot get reward if staked tokens = 0\");\r\n        require(reward > 0, \"Error: Cannot get reward = 0\");\r\n        tokensStakedPerUser[msg.sender] = 0;\r\n        userWeightedAverage[msg.sender] = 0;\r\n        require(stakingToken.transfer(msg.sender, (stakedTokens+reward)), \"Error during the withdrawal of user reward\");\r\n        emit Exit(msg.sender, stakedTokens, reward);\r\n    }\r\n\r\n    function addRewardTokensAmount(uint256 amountToAdd) external onlyGovernance nonReentrant {\r\n        require(stakingToken.transferFrom(msg.sender, address(this), amountToAdd), \"Error during the token reward increase transaction!\");\r\n        rewardTokensAmount += amountToAdd;\r\n        emit RewardAdded(amountToAdd);\r\n    }\r\n    \r\n    function setTime(uint256 initTimestamp, uint256 endTimestamp) public onlyGovernance {\r\n        if(endTimestamp > initTimestamp){\r\n            startStaking = initTimestamp;\r\n            endStaking = endTimestamp;\r\n        }\r\n    }\r\n    \r\n    function closePool() public onlyGovernance nonReentrant{     \r\n        paused = true;                   \r\n        require (stakingToken.transfer(msg.sender, stakingToken.balanceOf(address(this))), \"Error during token transfer\");\r\n    }\r\n    \r\n    function pauseStaking () public onlyGovernance {\r\n        paused = true;\r\n    }\r\n    \r\n    function unpauseStaking () public onlyGovernance {\r\n        paused = false;\r\n    }\r\n    \r\n    \r\n    /* ========== VIEWS ========== */\r\n\r\n    function calcWeightedAverage(uint256 amount) public view returns (uint256 weightedAverage) {\r\n        if(endStaking > startStaking){\r\n            return amount * (endStaking - block.timestamp ) / (endStaking - startStaking );\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function calcReward(address user) public view returns (uint256 reward) {\r\n        if(poolWeightedAverage>0){\r\n            return userWeightedAverage[user] * rewardTokensAmount / poolWeightedAverage;\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function canIStakeNow() public view returns (bool poolReady) {                  \r\n        if((paused == false) && (block.timestamp >= startStaking) && (block.timestamp <= endStaking)){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function canIExitPoolNow() public view returns (bool poolReady) {                  \r\n        if(block.timestamp >= endStaking){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    function getPoolUserData(address user) public view returns (uint256 userStakedTokens, uint256 userReward ){\r\n        return (tokensStakedPerUser[user],calcReward(user));\r\n    }\r\n\r\n    function getStakingPeriod() public view returns (uint256 returnStartStaking, uint256 returnEndStaking){\r\n        return (startStaking, endStaking);\r\n    }\r\n\r\n    function getPoolWeightedAverage() public view returns (uint256){\r\n        return poolWeightedAverage;\r\n    }\r\n    \r\n    function getRewardTokensAmount() public view returns (uint256){\r\n        return rewardTokensAmount;\r\n    }\r\n    \r\n    function getStakedTokensTotal() public view returns (uint256){\r\n        return stakedTokensTotal;\r\n    }\r\n    \r\n    function getTokensStakedPerUser(address user) public view returns (uint256){\r\n        return tokensStakedPerUser[user];\r\n    }\r\n    \r\n    function getUserWeightedAverage(address user) public view returns (uint256){\r\n        return userWeightedAverage[user];\r\n    }\r\n    \r\n    function transferGovernance(address newGovernace) public virtual onlyOwner {\r\n        require(newGovernace != address(0), \"Governace: new owner is the zero address\");\r\n        _transferGovernance(newGovernace);\r\n    }\r\n    \r\n     function _transferGovernance(address newGovernace) internal virtual {\r\n        _governance = newGovernace;\r\n     }\r\n     \r\n     function governance() public view virtual returns (address) {\r\n        return _governance;\r\n    }\r\n    \r\n    /* ========== MODIFIERS ========== */\r\n    \r\n    modifier checkPoolOpen() {\r\n        require(block.timestamp <= endStaking, \"Error: Staking is finished\");\r\n        require(block.timestamp >= startStaking, \"Error: Staking has not yet begun\");\r\n        _;\r\n    }\r\n    \r\n    modifier checkStakingFinished() {\r\n        require(block.timestamp >= endStaking, \"Error: Staking period is not finished\");\r\n        _;\r\n    }\r\n    \r\n    modifier checkStakingUnpaused() {\r\n        require(paused == false, \"Error: Swap is paused, try again later\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyGovernance() {\r\n        require(owner() == _msgSender() || governance() == _msgSender() , \"Ownable: caller is not the owner/governance\");\r\n        _;\r\n    }\r\n\r\n}"},"contracts/StakingPoolPremium.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport './StakingPool.sol';\r\nabstract contract StakingPoolPremium is StakingPool {\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    uint16 public slotNumber;\r\n    uint256 public forSlotAmount;\r\n    uint16 public takenSlots;\r\n\r\n    function finalizePoolCreation(\r\n        uint256 _startStaking,\r\n        uint256 periodInSec,\r\n        uint256 amountOfRewardsTokensToSend,\r\n        uint16 _slotNumber,\r\n        uint256 _forSlotAmount\r\n    )  public override   onlyGovernance nonReentrant {\r\n        require(\r\n            finalized == false,\r\n            \"Error: Staking Pool must be paused in order to finalize!\"\r\n        );\r\n        require(\r\n            amountOfRewardsTokensToSend > 0,\r\n            \"Error: The creator must send some reward tokens to the pool in order to create it\"\r\n        );\r\n        require(\r\n            stakingToken.transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                amountOfRewardsTokensToSend\r\n            ),\r\n            \"Error: Reward tokens trasnfer error, cannot create pool\"\r\n        );\r\n\r\n        startStaking = _startStaking;\r\n\r\n        endStaking = _startStaking + periodInSec;\r\n\r\n        slotNumber = _slotNumber;\r\n        forSlotAmount = _forSlotAmount;\r\n        rewardTokensAmount = amountOfRewardsTokensToSend;\r\n\r\n        paused = false;\r\n        finalized = true;\r\n\r\n        emit RewardAdded(amountOfRewardsTokensToSend);\r\n    }\r\n\r\n    function stake(uint256 userInput)\r\n        public  override \r\n        nonReentrant\r\n        checkPoolOpen\r\n        checkStakingUnpaused\r\n    {\r\n        require(userInput > 0, \"Error: Cannot stake 0\");\r\n        require(\r\n            takenSlots + userInput <= slotNumber,\r\n            \"Error: slot are full\"\r\n        );\r\n\r\n        takenSlots = takenSlots + uint16(userInput);\r\n        uint256 amount = userInput * forSlotAmount;\r\n\r\n        require(\r\n            stakingToken.transferFrom(msg.sender, address(this), amount),\r\n            \"Error during token transfer\"\r\n        );\r\n\r\n        tokensStakedPerUser[msg.sender] += amount;\r\n\r\n        uint256 weightedAverage = calcWeightedAverage(amount);\r\n        userWeightedAverage[msg.sender] += weightedAverage;\r\n\r\n        poolWeightedAverage += weightedAverage;\r\n        stakedTokensTotal += amount;\r\n\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n\r\n    function getTakenSlots() public view returns (uint16) {\r\n        return takenSlots;\r\n    }\r\n\r\n    function getSlotInfo() public view returns (uint256 forSlotAmountInfo,uint16 slotNumberInfo) {\r\n        return (forSlotAmount,slotNumber);\r\n    }\r\n}\r\n"}}}