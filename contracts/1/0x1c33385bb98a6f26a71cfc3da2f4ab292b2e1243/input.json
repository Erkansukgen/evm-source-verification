{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":10000},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"dexbot-impl/implementation.sol":{"content":"pragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\n//SPDX-License-Identifier: UNLICENSED\n\nimport \"./libs/Bancor.sol\";\nimport \"./libs/SafeMath.sol\";\nimport \"./libs/Dydx.sol\";\nimport \"./libs/Interfaces.sol\";\nimport \"./libs/Uniswap.sol\";\nimport \"./libs/Zeroex.sol\";\nimport \"./libs/Balancer.sol\";\nimport \"./libs/Aave.sol\";\nimport \"./libs/Curve.sol\";\nimport \"./libs/Uniswapv3.sol\";\n\ncontract Implementation {\n    using SafeMath for uint256;\n    using Address for address;\n    \n    struct Swap {\n        uint protocol;\n        address swapContract;\n        address poolContract;\n        address tokenAcontract;\n        address tokenBcontract;\n        uint swapFees;\n        uint zeroExOrderID;\n        Univ3Input univ3Check;\n    }\n    \n    struct Univ3Input {\n        uint clientInput;\n        uint clientOutput;\n        uint balanceIn;\n        uint balanceOut;\n    }\n    \n    struct SSwap {\n        uint protocol;\n        address swapContract;\n        address poolContract;\n        address tokenAcontract;\n        address tokenBcontract;\n    }\n    \n    struct SequenceParams {\n        uint targetBlock;\n        bool WithLoan;\n        bool UseChi;\n        uint LoanProtocolID;\n        address LoanContract;\n        address LoanToken;\n        address RepayToken;\n        uint initialAmountIn;\n        uint minAmountOut;\n        uint estGasCost;\n        uint swapFees;\n        bool isFlashbots;\n        uint minerTip;\n        uint chiCost;\n        bool Check;\n    }\n    \n    event BalancerDebug(address indexed pool, uint balTokenIn, uint dwTokenIn, uint balTokenOut, uint dwTokenOut, uint inputAmount, uint outputAmount);\n    event UniswapDebug(address indexed pool, uint balTokenIn, uint balTokenOut, uint inputAmount, uint outputAmount);\n    event BancorDebug(address[] path, uint inputAmount, uint outputAmount);\n    event CurveDebug(uint inputAmount, uint outputAmount);\n    event ZeroexDebug(uint status, uint expectedOutput, uint remaining, uint lastAmount);\n    event Univ3Debug(uint clientInput, uint clientOutput, uint input, uint clientBalIn, uint clientBalOut, uint balIn, uint balOut);\n    event OutputDebug(uint lastAmount, uint checkMinAmountOut, uint estGasCost);\n    event FailCheck(uint targetBlock);\n    event SimpleSwapDebug(uint InputAmount, uint OutputAmount);\n    \n    function SimpleSwap(bool Reversed, address SHolder, SSwap[] memory Requests, uint AmountIn, uint AmountToPay, uint MinAmountOut, bool UseChi, uint TargetBlock) public {\n        if (MinAmountOut != 0) {\n            if (block.number != TargetBlock) {\n                revert();\n            }\n        }\n        uint256 gasStart;\n        if (UseChi) {\n            gasStart = gasleft();\n        }\n        uint InputAmount;\n        if (AmountIn == 0) {\n            if (Reversed) {\n                InputAmount = Stateholder(SHolder).GetValue(1);\n            } else {            \n                ERC20Token tokenIn = ERC20Token(Requests[0].tokenAcontract);\n                uint256 balTokenIn = tokenIn.balanceOf(address(this));\n                if (balTokenIn != 0) {\n                    InputAmount = balTokenIn;\n                } else {\n                    revert();\n                }\n            }\n        } else {\n            if (Reversed) {\n                Stateholder(SHolder).SetValue(0, 1);\n            }\n            InputAmount = AmountIn;\n        }\n        uint requestsLength = Requests.length;\n        uint OutputAmount = InputAmount;\n        for (uint i=0; i<requestsLength; i++) {\n            SSwap memory Request = Requests[i];\n            if (Request.protocol == 1) { // Uniswap\n                OutputAmount = SwapUniswap(Request.swapContract, Request.tokenAcontract, Request.tokenBcontract, OutputAmount);\n            } else if (Request.protocol == 2) { // Balancer\n                OutputAmount = SwapBalancer(Request.swapContract, Request.tokenAcontract, Request.tokenBcontract, OutputAmount);\n            } else if (Request.protocol == 4) { // Bancor\n                OutputAmount = SwapBancor(Request.poolContract, Request.tokenAcontract, Request.tokenBcontract, OutputAmount);\n            } else {\n                revert();\n            }\n        }\n        if (OutputAmount < MinAmountOut) {\n            revert();\n        }\n        if (AmountToPay != 0) {\n            IERC20 wETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n            wETH.withdraw(AmountToPay);\n            block.coinbase.transfer(AmountToPay);\n            if (Reversed) {\n                Stateholder(SHolder).SetValue(0, 1);\n            }\n        } else if (Reversed) {\n            Stateholder(SHolder).SetValue(OutputAmount, 1);\n        }\n        if (UseChi) {\n            uint256 gasSpent = 31000 + gasStart - gasleft() + 16 * msg.data.length;\n            ChiGT Chi = ChiGT(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n            Chi.freeUpTo((gasSpent + 14154) / 41130);\n        }\n    }\n    \n    function ExecuteArbitrage(SequenceParams memory Params, Swap[] memory Requests, Zeroex.OrderParams[] memory zeroExOrders) public {\n        uint256 gasStart = gasleft();\n        bool isValid;\n        if (Params.targetBlock == 0 || block.number == Params.targetBlock) {\n            isValid = true;\n        } else {\n            emit FailCheck(Params.targetBlock);\n        }\n        if (isValid && Params.Check) {\n            uint requestsLength = Requests.length;\n            uint checkMinAmountOut = Params.initialAmountIn;\n            if (Params.WithLoan) {\n                if (Params.LoanProtocolID == 1) {\n                    ERC20Token tokenIn = ERC20Token(Params.RepayToken);\n                    ERC20Token tokenOut = ERC20Token(Params.LoanToken);\n                    uint256 balTokenIn = tokenIn.balanceOf(Params.LoanContract);\n                    uint256 balTokenOut = tokenOut.balanceOf(Params.LoanContract);\n                    checkMinAmountOut = UniswapV2Library.getAmountIn(Params.initialAmountIn, balTokenIn, balTokenOut, Params.swapFees);\n                    emit UniswapDebug(Params.LoanContract, balTokenIn, balTokenOut, Params.initialAmountIn, checkMinAmountOut);\n                }\n            }\n            address bancorNetworkAddress;\n            IBancorNetwork networkContract;\n            bool bancorNetworkContractDefined;\n            uint lastAmount = Params.initialAmountIn;\n            for (uint i=0; i<requestsLength; i++) {\n                Swap memory currentRequest = Requests[i];\n                if (currentRequest.protocol == 1) { // Uniswap\n                    ERC20Token tokenIn = ERC20Token(currentRequest.tokenAcontract);\n                    ERC20Token tokenOut = ERC20Token(currentRequest.tokenBcontract);\n                    uint256 balTokenIn = tokenIn.balanceOf(currentRequest.poolContract);\n                    uint256 balTokenOut = tokenOut.balanceOf(currentRequest.poolContract);\n                    uint inputAmount = lastAmount;\n                    lastAmount = UniswapV2Library.getAmountOut(inputAmount, balTokenIn, balTokenOut, currentRequest.swapFees);\n                    emit UniswapDebug(currentRequest.poolContract, balTokenIn, balTokenOut, inputAmount, lastAmount);\n                } else if (currentRequest.protocol == 2) { // Balancer\n                    ERC20Token tokenIn = ERC20Token(currentRequest.tokenAcontract);\n                    ERC20Token tokenOut = ERC20Token(currentRequest.tokenBcontract);\n                    uint256 balTokenIn = tokenIn.balanceOf(currentRequest.poolContract);\n                    uint256 balTokenOut = tokenOut.balanceOf(currentRequest.poolContract);\n                    BalancerPool pool = BalancerPool(currentRequest.poolContract);\n                    uint dwTokenIn = pool.getDenormalizedWeight(currentRequest.tokenAcontract);\n                    uint dwTokenOut = pool.getDenormalizedWeight(currentRequest.tokenBcontract);\n                    uint poolFees = pool.getSwapFee();\n                    uint inputAmount = lastAmount;\n                    lastAmount = bmaths.calcOutGivenIn(balTokenIn, dwTokenIn, balTokenOut, dwTokenOut, inputAmount, poolFees);\n                    uint outputAmount = lastAmount;\n                    emit BalancerDebug(currentRequest.poolContract, balTokenIn, dwTokenIn, balTokenOut, dwTokenOut, inputAmount, outputAmount);\n                } else if (currentRequest.protocol == 4) { // Bancor\n                   if (!bancorNetworkContractDefined) {\n                        (networkContract, bancorNetworkAddress) = getBancorNetworkContract();\n                        bancorNetworkContractDefined = true;\n                   }\n                   IConverter bancorPool = IConverter(currentRequest.poolContract);\n                   address[] memory path = new address[](3);\n                   path[0] = currentRequest.tokenAcontract;\n                   path[1] = address(bancorPool.anchor());\n                   path[2] = currentRequest.tokenBcontract;\n                   uint inputAmount = lastAmount;\n                   uint fees;\n                   (lastAmount, fees) = networkContract.getReturnByPath(path, inputAmount);\n                   emit BancorDebug(path, inputAmount, lastAmount);\n                } else if (currentRequest.protocol == 3) { // Curve\n                    CurveRegistry exchangeContract = CurveRegistry(currentRequest.swapContract);\n                    uint inputAmount = lastAmount;\n                    lastAmount = exchangeContract.get_exchange_amount(currentRequest.poolContract, currentRequest.tokenAcontract, currentRequest.tokenBcontract, inputAmount);\n                    emit CurveDebug(inputAmount, lastAmount);\n                } else if (currentRequest.protocol == 5) { // Zeroex\n                    Zeroex.OrderParams memory Order = Zeroex.GetOrderByID(zeroExOrders, currentRequest.zeroExOrderID);\n                    ZeroexExchange Exchange = ZeroexExchange(currentRequest.swapContract);\n                    Zeroex.OrderInfo memory orderInfo = Exchange.getOrderInfo(Order.zOrder);\n                    uint Remaining = Order.zOrder.takerAssetAmount - orderInfo.orderTakerAssetFilledAmount;\n                    if (orderInfo.orderStatus == uint8(Zeroex.OrderStatus.FILLABLE) && Remaining > lastAmount) {\n                        uint inputAmount = lastAmount;\n                        lastAmount = Zeroex.CalcOutput(inputAmount, Order.inputDecimals, Order.outputDecimals, Order.price);\n                        address Maker = Order.zOrder.makerAddress;\n                        ERC20Token MakerToken = ERC20Token(currentRequest.tokenBcontract);\n                        uint256 MakerBalance = MakerToken.balanceOf(Maker);\n                        if (MakerBalance < lastAmount) {\n                            lastAmount = 1;\n                        }\n                    } else {\n                        lastAmount = 1;\n                    }\n                    emit ZeroexDebug(orderInfo.orderStatus, Order.price, Remaining, lastAmount);\n                    if (lastAmount == 1) {\n                        break;\n                    }\n                } else if (currentRequest.protocol == 6) { // Univ3\n                    ERC20Token tokenIn = ERC20Token(currentRequest.tokenAcontract);\n                    ERC20Token tokenOut = ERC20Token(currentRequest.tokenBcontract);\n                    uint256 balTokenIn = tokenIn.balanceOf(currentRequest.poolContract);\n                    uint256 balTokenOut = tokenOut.balanceOf(currentRequest.poolContract);\n                    uint currInput = lastAmount;\n                    if ( (currentRequest.univ3Check.balanceIn+1) >= balTokenIn && (currentRequest.univ3Check.balanceOut-1) <= balTokenOut && (currentRequest.univ3Check.clientInput-1) <= lastAmount ) {\n                        lastAmount = currentRequest.univ3Check.clientOutput;\n                    } else {\n                        lastAmount = 1;\n                    }\n                    emit Univ3Debug(currentRequest.univ3Check.clientInput, currentRequest.univ3Check.clientOutput, currInput, currentRequest.univ3Check.balanceIn, currentRequest.univ3Check.balanceOut, balTokenIn, balTokenOut);\n                    if (lastAmount == 1) {\n                        break;\n                    }\n                }\n            }\n            checkMinAmountOut = checkMinAmountOut + Params.estGasCost;\n            if (lastAmount < checkMinAmountOut) {\n                isValid = false;\n            }\n            emit OutputDebug(lastAmount, checkMinAmountOut, Params.estGasCost);\n        }\n        if (isValid) {\n            ERC20Token wethToken = ERC20Token(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n            uint256 balanceBefore;\n            uint256 balanceAfter;\n            if (Params.isFlashbots) {\n                balanceBefore = wethToken.balanceOf(address(this));\n            }\n            if (Params.WithLoan) {\n                if (Params.LoanProtocolID == 1) {\n                    UniswapLoan(Params.LoanContract, Params.LoanToken, Params.RepayToken, Params.initialAmountIn, Params.minAmountOut, Requests, zeroExOrders, Params.swapFees);\n                } else if (Params.LoanProtocolID == 2) {\n                    dYdXLoan(Params.LoanContract, Params.LoanToken, Params.RepayToken, Params.initialAmountIn, Params.minAmountOut, Requests, zeroExOrders);\n                } else if (Params.LoanProtocolID == 3) {\n                    AaveLoan(Params.LoanContract, Params.LoanToken, Params.RepayToken, Params.initialAmountIn, Params.minAmountOut, Requests, zeroExOrders);\n                } else {\n                    revert();\n                }\n            } else {\n                Sequence(Params.initialAmountIn, Params.minAmountOut, Requests, zeroExOrders);\n            }\n            if (Params.isFlashbots) {\n                balanceAfter = wethToken.balanceOf(address(this));\n                if (balanceAfter > balanceBefore) {\n                    uint256 rawProfit = SafeMath.sub(balanceAfter, balanceBefore);\n                    uint256 profitLessChiCost = SafeMath.sub(rawProfit, Params.chiCost);\n                    uint256 tipA = SafeMath.mul(profitLessChiCost, Params.minerTip);\n                    uint256 tipB = SafeMath.div(tipA, (10**18));\n                    IERC20 wETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n                    wETH.withdraw(tipB);\n                    block.coinbase.transfer(tipB);\n                }\n            }\n        }\n        if (Params.UseChi) {\n            uint256 gasSpent = 31000 + gasStart - gasleft() + 16 * msg.data.length;\n            ChiGT Chi = ChiGT(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n            Chi.freeUpTo((gasSpent + 14154) / 41130);\n        }\n    }\n\n    function Sequence(uint initialAmountIn, uint minAmountOut, Swap[] memory swapRequests, Zeroex.OrderParams[] memory zeroExOrders) internal {\n        uint requestsLength = swapRequests.length;\n        uint lastAmountOut = initialAmountIn;\n        for (uint i=0; i<requestsLength; i++) { \n            Swap memory currentRequest = swapRequests[i];\n            if (lastAmountOut == 0) {\n                revert();\n            }\n            if (currentRequest.protocol == 1) { // Uniswap\n                uint currAmountOut = SwapUniswap(currentRequest.swapContract, currentRequest.tokenAcontract, currentRequest.tokenBcontract, lastAmountOut);\n                if (currAmountOut > type(uint).min) {\n                    lastAmountOut = currAmountOut;\n                } else {\n                    revert();\n                }\n            } else if (currentRequest.protocol == 2) { // Balancer\n                uint currAmountOut = SwapBalancer(currentRequest.swapContract, currentRequest.tokenAcontract, currentRequest.tokenBcontract, lastAmountOut);\n                if (currAmountOut > type(uint).min) {\n                    lastAmountOut = currAmountOut;\n                } else {\n                    revert();\n                }\n            } else if (currentRequest.protocol == 3) { // Curve\n                uint currAmountOut = SwapCurve(currentRequest.swapContract, currentRequest.poolContract, currentRequest.tokenAcontract, currentRequest.tokenBcontract, lastAmountOut);\n                if (currAmountOut > type(uint).min) {\n                    lastAmountOut = currAmountOut;\n                } else {\n                    revert();\n                }\n            } else if (currentRequest.protocol == 4) { // Bancor\n                uint currAmountOut = SwapBancor(currentRequest.poolContract, currentRequest.tokenAcontract, currentRequest.tokenBcontract, lastAmountOut);\n                if (currAmountOut > type(uint).min) {\n                    lastAmountOut = currAmountOut;\n                } else {\n                    revert();\n                }\n            } else if (currentRequest.protocol == 5) { // 0x\n                Zeroex.OrderParams memory Order = Zeroex.GetOrderByID(zeroExOrders, currentRequest.zeroExOrderID);\n                uint currAmountOut = SwapZeroex(currentRequest.swapContract, currentRequest.poolContract, currentRequest.tokenAcontract, lastAmountOut, Order);\n                if (currAmountOut > type(uint).min) {\n                    lastAmountOut = currAmountOut;\n                } else {\n                    revert();\n                }\n            } else if (currentRequest.protocol == 6) { // Univ3\n                uint currAmountOut = SwapUniv3(currentRequest.swapContract, currentRequest.poolContract, currentRequest.tokenAcontract, currentRequest.tokenBcontract, lastAmountOut, currentRequest.swapFees);\n                if (currAmountOut > type(uint).min) {\n                    lastAmountOut = currAmountOut;\n                } else {\n                    revert();\n                }\n            } else {\n                revert();\n            }\n        }\n        if (lastAmountOut < minAmountOut) {\n            revert();\n        }\n    }\n    \n    event Univ3Balances(uint balanceIn, uint balanceOut);\n    \n    function SwapUniv3(address swapContract, address poolContract, address contractA, address contractB, uint amountIn, uint fees) public returns(uint) {\n        checkAllowance(contractA, swapContract, amountIn);\n        ERC20Token tokenIn = ERC20Token(contractA);\n        ERC20Token tokenOut = ERC20Token(contractB);\n        uint256 balTokenIn = tokenIn.balanceOf(poolContract);\n        uint256 balTokenOut = tokenOut.balanceOf(poolContract);\n        emit Univ3Balances(balTokenIn, balTokenOut);\n        Uniswapv3Router.ExactInputSingleParams memory inputParams;\n        inputParams.tokenIn = contractA;\n        inputParams.tokenOut = contractB;\n        inputParams.fee = uint24(fees);\n        inputParams.recipient = address(this);\n        inputParams.deadline = block.timestamp+1;\n        inputParams.amountIn = amountIn;\n        inputParams.amountOutMinimum = 0;\n        inputParams.sqrtPriceLimitX96 = 0;\n        Uniswapv3Router router = Uniswapv3Router(swapContract);\n        uint amountOut = router.exactInputSingle(inputParams);\n        return amountOut;\n    }\n    \n    function SwapZeroex(address swapContract, address poolContract, address contractA, uint amountIn, Zeroex.OrderParams memory order) public returns(uint) {\n        checkAllowance(contractA, swapContract, amountIn);\n        checkAllowance(contractA, poolContract, amountIn);\n        ZeroexExchange Exchange = ZeroexExchange(swapContract);\n        Zeroex.FillResults memory results = Exchange.fillOrder(order.zOrder, amountIn, order.signature);\n        return results.makerAssetFilledAmount;\n    }\n    \n    function SwapUniswap(address swapContract, address contractA, address contractB, uint amountIn) public returns(uint) {\n        checkAllowance(contractA, swapContract, amountIn);\n        UniswapRouter router = UniswapRouter(swapContract);\n        address[] memory fullPath = new address[](2);\n        fullPath[0] = contractA;\n        fullPath[1] = contractB;\n        uint deadLine = block.timestamp + 20 minutes;\n        uint[] memory Output = router.swapExactTokensForTokens(amountIn, type(uint).min, fullPath, address(this), deadLine);\n        return Output[Output.length - 1];\n    }\n    \n    function SwapBalancer(address swapContract, address contractA, address contractB, uint amountIn) public returns(uint) {\n        checkAllowance(contractA, swapContract, amountIn);\n        BalancerPool pool = BalancerPool(swapContract);\n        (uint tokenOut, ) = pool.swapExactAmountIn(contractA, amountIn, contractB, type(uint).min, type(uint).max);\n        return tokenOut;\n    }\n    \n    function SwapBancor(address swapContract, address contractA, address contractB, uint amountIn) public returns(uint) {\n        address ethBancorAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n        (IBancorNetwork networkContract, address bancorNetworkAddress) = getBancorNetworkContract();\n        IConverter bancorPool = IConverter(swapContract);\n        address[] memory path = new address[](3);\n        path[0] = contractA;\n        path[1] = address(bancorPool.anchor());\n        path[2] = contractB;\n        uint ethInputAmount;\n        if (contractA != ethBancorAddress) {\n            checkAllowance(contractA, bancorNetworkAddress, amountIn);\n        } else {\n            // WETH -> ETH\n            IERC20 wETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n            wETH.withdraw(amountIn);\n            ethInputAmount = amountIn;\n        }\n        uint tokenOut = networkContract.convert{value: ethInputAmount}(path, amountIn, type(uint).min+1);\n        if (contractB == ethBancorAddress) {\n            // ETH -> WETH\n            address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2).call{value: tokenOut}(\"\");\n        }\n        return tokenOut;\n    }\n    \n    function SwapCurve(address swapContract, address poolContract, address contractA, address contractB, uint amountIn) public returns(uint) {\n        checkAllowance(contractA, swapContract, amountIn);\n        CurveRegistry registry = CurveRegistry(swapContract);\n        uint tokenOut = registry.exchange(poolContract, contractA, contractB, amountIn, type(uint).min);\n        return tokenOut;\n    }\n    \n    function checkAllowance(address tokenContract, address spenderContract, uint256 approvedAmount) internal {\n        ERC20Token targetToken = ERC20Token(tokenContract);\n        uint256 allowed = targetToken.allowance(address(this), spenderContract);\n        if (allowed < approvedAmount) {\n            if (allowed != 0) {\n                safeApprove(IERC20(tokenContract), spenderContract, 0);\n            }\n            safeApprove(IERC20(tokenContract), spenderContract, (approvedAmount * 1000));\n        }\n    }\n    \n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n    \n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            require(abi.decode(returndata, (bool)));\n        }\n    }\n    \n    // Uniswap flash loan\n    \n    struct unilikeParams {\n        uint feesA;\n        uint feesB;\n        address sender;\n        uint amount0;\n        uint amount1;\n        bytes data;\n    }\n    \n    function unilikeCall(unilikeParams memory params) internal {\n        require(params.sender == address(this)); // ensure that proxy contract is the caller\n        (\n            address LoanContract,\n            address LoanToken,\n            address RepayToken,\n            uint initialAmountIn,\n             ,\n            Swap[] memory swapRequests,\n            Zeroex.OrderParams[] memory zeroExOrders,\n             \n        ) = abi.decode(params.data, (address, address, address, uint, uint, Swap[], Zeroex.OrderParams[], uint));\n        require(msg.sender == LoanContract); // ensure that msg.sender is LoanContract\n    \n        uint amountToRepay;\n        uint fees = params.feesA;\n        if (LoanToken == RepayToken) {\n            uint fee = ((initialAmountIn * params.feesA) / params.feesB) + 1;\n            amountToRepay = initialAmountIn + fee;\n        } else {\n            address token0 = IUniswapV2Pair(msg.sender).token0(); \n            address token1 = IUniswapV2Pair(msg.sender).token1();\n            uint ReserveIn;\n            uint ReserveOut;\n            (uint Reserve0, uint Reserve1, ) = IUniswapV2Pair(msg.sender).getReserves();\n            if (LoanToken == token0) {\n                ReserveIn = Reserve1;\n                ReserveOut = Reserve0;\n            }\n            if (LoanToken == token1) {\n                ReserveIn = Reserve0;\n                ReserveOut = Reserve1;\n            }\n            amountToRepay = UniswapV2Library.getAmountIn(initialAmountIn, ReserveIn, ReserveOut, fees);\n        }\n        \n        uint requestsLength = swapRequests.length;\n        if (requestsLength != 0) {\n            Sequence(initialAmountIn, amountToRepay, swapRequests, zeroExOrders);\n        }\n        \n        ERC20Token(RepayToken).transfer(msg.sender, amountToRepay);\n    }\n    \n    function swapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external {\n        ( , , , , , , , uint swapFees) = abi.decode(data, (address, address, address, uint, uint, Swap[], Zeroex.OrderParams[], uint));\n        unilikeParams memory params;\n        params.feesA = swapFees;\n        params.feesB = 10000-params.feesA;\n        params.sender = sender;\n        params.amount0 = amount0;\n        params.amount1 = amount1;\n        params.data = data;\n        unilikeCall(params);\n    }\n    \n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external {\n        ( , , , , , , , uint swapFees) = abi.decode(data, (address, address, address, uint, uint, Swap[], Zeroex.OrderParams[], uint));\n        unilikeParams memory params;\n        params.feesA = swapFees;\n        params.feesB = 10000-params.feesA;\n        params.sender = sender;\n        params.amount0 = amount0;\n        params.amount1 = amount1;\n        params.data = data;\n        unilikeCall(params);\n    }\n    \n    function pancakeCall(address sender, uint amount0, uint amount1, bytes calldata data) external {\n        ( , , , , , , , uint swapFees) = abi.decode(data, (address, address, address, uint, uint, Swap[], Zeroex.OrderParams[], uint));\n        unilikeParams memory params;\n        params.feesA = swapFees;\n        params.feesB = 10000-params.feesA;\n        params.sender = sender;\n        params.amount0 = amount0;\n        params.amount1 = amount1;\n        params.data = data;\n        unilikeCall(params);\n    }\n    \n    function demaxCall(address sender, uint amount0, uint amount1, bytes calldata data) external {\n        ( , , , , , , , uint swapFees) = abi.decode(data, (address, address, address, uint, uint, Swap[], Zeroex.OrderParams[], uint));\n        unilikeParams memory params;\n        params.feesA = swapFees;\n        params.feesB = 10000-params.feesA;\n        params.sender = sender;\n        params.amount0 = amount0;\n        params.amount1 = amount1;\n        params.data = data;\n        unilikeCall(params);\n    }\n    \n    function BSCswapCall(address sender, uint amount0, uint amount1, bytes calldata data) external {\n        ( , , , , , , , uint swapFees) = abi.decode(data, (address, address, address, uint, uint, Swap[], Zeroex.OrderParams[], uint));\n        unilikeParams memory params;\n        params.feesA = swapFees;\n        params.feesB = 10000-params.feesA;\n        params.sender = sender;\n        params.amount0 = amount0;\n        params.amount1 = amount1;\n        params.data = data;\n        unilikeCall(params);\n    }\n    \n    function ThugswapCall(address sender, uint amount0, uint amount1, bytes calldata data) external {\n        ( , , , , , , , uint swapFees) = abi.decode(data, (address, address, address, uint, uint, Swap[], Zeroex.OrderParams[], uint));\n        unilikeParams memory params;\n        params.feesA = swapFees;\n        params.feesB = 10000-params.feesA;\n        params.sender = sender;\n        params.amount0 = amount0;\n        params.amount1 = amount1;\n        params.data = data;\n        unilikeCall(params);\n    }\n    \n    function croDefiSwapCall(address sender, uint amount0, uint amount1, bytes calldata data) external {\n        ( , , , , , , , uint swapFees) = abi.decode(data, (address, address, address, uint, uint, Swap[], Zeroex.OrderParams[], uint));\n        unilikeParams memory params;\n        params.feesA = swapFees;\n        params.feesB = 10000-params.feesA;\n        params.sender = sender;\n        params.amount0 = amount0;\n        params.amount1 = amount1;\n        params.data = data;\n        unilikeCall(params);\n    }\n    \n    function UniswapLoan(address LoanContract, address LoanToken, address RepayToken, uint initialAmountIn, uint minAmountOut, Swap[] memory swapRequests, Zeroex.OrderParams[] memory zeroExOrders, uint swapFees) internal {\n        address token0 = IUniswapV2Pair(LoanContract).token0(); \n        address token1 = IUniswapV2Pair(LoanContract).token1();\n        \n        uint amount0Out;\n        uint amount1Out;\n        if (LoanToken == token0) {\n            amount0Out = initialAmountIn;\n            amount1Out = 0;\n        } else if (LoanToken == token1) {\n            amount1Out = initialAmountIn;\n            amount0Out = 0;\n        }\n        require(amount1Out == 0 || amount0Out == 0);\n        \n        Proxy(address(this)).setAllowedDelegate(LoanContract);\n        \n        bytes memory SequenceData = abi.encode(\n            LoanContract,\n            LoanToken,\n            RepayToken,\n            initialAmountIn,\n            minAmountOut,\n            swapRequests,\n            zeroExOrders,\n            swapFees\n        );\n        IUniswapV2Pair(LoanContract).swap(amount0Out, amount1Out, address(this), SequenceData);\n    }\n    \n    // dYdX flash loan\n    \n    function callFunction(address sender, Account.Info memory account, bytes memory data) external {\n        (\n             ,\n             ,\n             ,\n            uint initialAmountIn,\n            uint minAmountOut,\n            Swap[] memory swapRequests,\n            Zeroex.OrderParams[] memory zeroExOrders\n        ) = abi.decode(data, (address, address, address, uint, uint, Swap[], Zeroex.OrderParams[]));\n        \n        Sequence(initialAmountIn, minAmountOut, swapRequests, zeroExOrders);\n    }\n    \n    function dYdXLoan(address LoanContract, address LoanToken, address RepayToken, uint initialAmountIn, uint minAmountOut, Swap[] memory swapRequests, Zeroex.OrderParams[] memory zeroExOrders) internal {\n        bytes memory SequenceData = abi.encode(\n            LoanContract,\n            LoanToken,\n            RepayToken,\n            initialAmountIn,\n            minAmountOut,\n            swapRequests,\n            zeroExOrders\n        );\n        uint RepayAmount = initialAmountIn.add(2);\n        ISoloMargin soloContract = ISoloMargin(LoanContract);\n        uint256 marketId = DydxFlashloanBase._getMarketIdFromTokenAddress(LoanContract, LoanToken);\n        checkAllowance(LoanToken, LoanContract, RepayAmount);\n        \n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\n        \n        operations[0] = DydxFlashloanBase._getWithdrawAction(marketId, initialAmountIn);\n        operations[1] = DydxFlashloanBase._getCallAction(SequenceData);\n        operations[2] = DydxFlashloanBase._getDepositAction(marketId, RepayAmount);\n        \n        Account.Info[] memory accountInfos = new Account.Info[](1);\n        accountInfos[0] = DydxFlashloanBase._getAccountInfo();\n        \n        Proxy(address(this)).setAllowedDelegate(LoanContract);\n        soloContract.operate(accountInfos, operations);\n    }\n    \n    // Aave flash loan\n    \n    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes memory _params) external {\n        (\n            address LoanContract,\n            address LoanToken,\n             ,\n            uint initialAmountIn,\n            uint minAmountOut,\n            Swap[] memory swapRequests,\n            Zeroex.OrderParams[] memory zeroExOrders\n        ) = abi.decode(_params, (address, address, address, uint, uint, Swap[], Zeroex.OrderParams[]));\n        \n        uint RepayAmount = _amount.add(_fee);\n        \n        Sequence(initialAmountIn, minAmountOut, swapRequests, zeroExOrders);\n        \n        address Provider = ILendingPool(LoanContract).addressesProvider();\n        address payable LendingCore = ILendingPoolAddressesProvider(Provider).getLendingPoolCore();\n        \n        ERC20Token(LoanToken).transfer(LendingCore, RepayAmount);\n    }\n    \n    function AaveLoan(address LoanContract, address LoanToken, address RepayToken, uint initialAmountIn, uint minAmountOut, Swap[] memory swapRequests, Zeroex.OrderParams[] memory zeroExOrders) internal {\n        bytes memory SequenceData = abi.encode(\n            LoanContract,\n            LoanToken,\n            RepayToken,\n            initialAmountIn,\n            minAmountOut,\n            swapRequests,\n            zeroExOrders\n        );\n        ILendingPool LendingPool = ILendingPool(LoanContract);\n        Proxy(address(this)).setAllowedDelegate(LoanContract);\n        LendingPool.flashLoan(address(this), LoanToken, initialAmountIn, SequenceData);\n    }\n    \n    function getBancorNetworkContract() public returns(IBancorNetwork, address) {\n        IContractRegistry contractRegistry = IContractRegistry(0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4); // IContractRegistry(0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4);\n        address output = contractRegistry.addressOf('BancorNetwork');\n        return (IBancorNetwork(output), output);\n    }\n    \n}"},"dexbot-impl/libs/Aave.sol":{"content":"pragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\n//SPDX-License-Identifier: UNLICENSED\n\ninterface ILendingPool {\n    function flashLoan(address _receiver, address _reserve, uint256 _amount, bytes calldata _params) external;\n    function addressesProvider() external view returns (address);\n}\n\ninterface ILendingPoolAddressesProvider {\n    function getLendingPoolCore() external view returns (address payable);\n    function getLendingPool() external view returns (address);\n}"},"dexbot-impl/libs/Balancer.sol":{"content":"pragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\n//SPDX-License-Identifier: UNLICENSED\n\ncontract BalancerPool {\n    function swapExactAmountIn(\n        address tokenIn,\n        uint tokenAmountIn,\n        address tokenOut,\n        uint minAmountOut,\n        uint maxPrice\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter) {}\n    \n    function calcOutGivenIn(\n        uint tokenBalanceIn,\n        uint tokenWeightIn,\n        uint tokenBalanceOut,\n        uint tokenWeightOut,\n        uint tokenAmountIn,\n        uint swapFee\n    ) public pure returns (uint tokenAmountOut) {}\n    \n    function getDenormalizedWeight(\n        address token\n    ) external view returns (uint) {}\n    \n    function getSwapFee() external view returns (uint) {}\n}\n\nlibrary bmaths {\n    function bdiv(uint a, uint b)\n        internal pure\n        returns (uint)\n    {\n        require(b != 0);\n        uint c0 = a * (10**18);\n        require(a == 0 || c0 / a == (10**18)); // bmul overflow\n        uint c1 = c0 + (b / 2);\n        require(c1 >= c0); //  badd require\n        uint c2 = c1 / b;\n        return c2;\n    }\n    \n    function bmul(uint a, uint b)\n        internal pure\n        returns (uint)\n    {\n        uint c0 = a * b;\n        require(a == 0 || c0 / a == b);\n        uint c1 = c0 + ((10**18) / 2);\n        require(c1 >= c0);\n        uint c2 = c1 / (10**18);\n        return c2;\n    }\n    \n    function bsub(uint a, uint b)\n        internal pure\n        returns (uint)\n    {\n        (uint c, bool flag) = bsubSign(a, b);\n        require(!flag);\n        return c;\n    }\n    \n    function badd(uint a, uint b)\n        internal pure\n        returns (uint)\n    {\n        uint c = a + b;\n        require(c >= a);\n        return c;\n    }\n    \n    function bpowi(uint a, uint n)\n        internal pure\n        returns (uint)\n    {\n        uint z = n % 2 != 0 ? a : (10**18);\n        for (n /= 2; n != 0; n /= 2) {\n            a = bmul(a, a);\n\n            if (n % 2 != 0) {\n                z = bmul(z, a);\n            }\n        }\n        return z;\n    }\n\n    function bpow(uint base, uint exp)\n        internal pure\n        returns (uint)\n    {\n        require(base >= (1 wei));\n        require(base <= ((2 * (10**18)) - 1 wei));\n        uint whole  = bfloor(exp);   \n        uint remain = bsub(exp, whole);\n        uint wholePow = bpowi(base, btoi(whole));\n        if (remain == 0) {\n            return wholePow;\n        }\n        uint partialResult = bpowApprox(base, remain, (10**18) / 10**10);\n        return bmul(wholePow, partialResult);\n    }\n\n    function bpowApprox(uint base, uint exp, uint precision)\n        internal pure\n        returns (uint)\n    {\n        uint a     = exp;\n        (uint x, bool xneg)  = bsubSign(base, (10**18));\n        uint term = (10**18);\n        uint sum   = term;\n        bool negative = false;\n        for (uint i = 1; term >= precision; i++) {\n            uint bigK = i * (10**18);\n            (uint c, bool cneg) = bsubSign(a, bsub(bigK, (10**18)));\n            term = bmul(term, bmul(c, x));\n            term = bdiv(term, bigK);\n            if (term == 0) break;\n            if (xneg) negative = !negative;\n            if (cneg) negative = !negative;\n            if (negative) {\n                sum = bsub(sum, term);\n            } else {\n                sum = badd(sum, term);\n            }\n        }\n        return sum;\n    }\n    \n    function bsubSign(uint a, uint b)\n        internal pure\n        returns (uint, bool)\n    {\n        if (a >= b) {\n            return (a - b, false);\n        } else {\n            return (b - a, true);\n        }\n    }\n    \n    function btoi(uint a)\n        internal pure \n        returns (uint)\n    {\n        return a / (10**18);\n    }\n\n    function bfloor(uint a)\n        internal pure\n        returns (uint)\n    {\n        return btoi(a) * (10**18);\n    }\n    \n    function calcOutGivenIn(\n        uint tokenBalanceIn,\n        uint tokenWeightIn,\n        uint tokenBalanceOut,\n        uint tokenWeightOut,\n        uint tokenAmountIn,\n        uint swapFee\n    )\n        internal pure\n        returns (uint tokenAmountOut)\n    {\n        uint weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\n        uint adjustedIn = bsub((10**18), swapFee);\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\n        uint y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\n        uint foo = bpow(y, weightRatio);\n        uint bar = bsub((10**18), foo);\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\n        return tokenAmountOut;\n    }\n}"},"dexbot-impl/libs/Bancor.sol":{"content":"pragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\n//SPDX-License-Identifier: UNLICENSED\n\ninterface IContractRegistry {\n    function addressOf(\n        bytes32 contractName\n    ) external returns(address);\n}\n\ninterface IOwned {\n    // this function isn't since the compiler emits automatically generated getter functions as external\n    function owner() external view returns (address);\n\n    function transferOwnership(address _newOwner) external;\n\n    function acceptOwnership() external;\n}\n\ninterface IConverter is IOwned {\n    function anchor() external view returns (IConverterAnchor);\n}\n\ninterface IConverterAnchor is IOwned {\n\n}\n\ninterface IBancorNetwork {\n    function convert(\n        address[] memory _path, \n        uint256 _amount, \n        uint256 _minReturn\n    ) external payable returns (uint256);\n\n    function getReturnByPath(\n        address[] memory _path, \n        uint256 _amount\n    ) external view returns (uint256, uint256);\n\n    function conversionPath(\n        IERC20Token _sourceToken, \n        IERC20Token _targetToken\n    ) external view returns (address[] memory);\n}\n\ninterface IERC20Token {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address _owner) external view returns (uint256);\n\n    function allowance(address _owner, address _spender) external view returns (uint256);\n\n    function transfer(address _to, uint256 _value) external returns (bool);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) external returns (bool);\n\n    function approve(address _spender, uint256 _value) external returns (bool);\n}"},"dexbot-impl/libs/Curve.sol":{"content":"pragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\n//SPDX-License-Identifier: UNLICENSED\n\ncontract CurveRegistry {\n    function exchange(\n        address _pool,\n        address _from,\n        address _to,\n        uint256 _amount,\n        uint256 _expected\n    ) external returns (uint256) {}\n    \n    function get_exchange_amount(\n        address _pool,\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external returns (uint256) {}\n}"},"dexbot-impl/libs/Dydx.sol":{"content":"pragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\n//SPDX-License-Identifier: UNLICENSED\n\nimport \"./SafeMath.sol\";\n\n\nlibrary Account {\n    enum Status {Normal, Liquid, Vapor}\n    struct Info {\n        address owner; // The address that owns the account\n        uint256 number; // A nonce that allows a single address to control many accounts\n    }\n}\n\n\nlibrary Actions {\n    enum ActionType {\n        Deposit, // supply tokens\n        Withdraw, // borrow tokens\n        Transfer, // transfer balance between accounts\n        Buy, // buy an amount of some token (publicly)\n        Sell, // sell an amount of some token (publicly)\n        Trade, // trade tokens against another account\n        Liquidate, // liquidate an undercollateralized or expiring account\n        Vaporize, // use excess tokens to zero-out a completely negative account\n        Call // send arbitrary data to an address\n    }\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\n    struct ActionArgs {\n        ActionType actionType;\n        uint256 accountId;\n        Types.AssetAmount amount;\n        uint256 primaryMarketId;\n        uint256 secondaryMarketId;\n        address otherAddress;\n        uint256 otherAccountId;\n        bytes data;\n    }\n}\n\nlibrary Types {\n    enum AssetDenomination {\n        Wei, // the amount is denominated in wei\n        Par // the amount is denominated in par\n    }\n    enum AssetReference {\n        Delta, // the amount is given as a delta from the current value\n        Target // the amount is given as an exact number to end up at\n    }\n    struct AssetAmount {\n        bool sign; // true if positive\n        AssetDenomination denomination;\n        AssetReference ref;\n        uint256 value;\n    }\n}\n\n\ninterface ISoloMargin {\n    function getMarketTokenAddress(uint256 marketId)\n        external\n        view\n        returns (address);\n    function getNumMarkets() external view returns (uint256);\n    function operate(\n        Account.Info[] memory accounts,\n        Actions.ActionArgs[] memory actions\n    ) external;\n}\n\nlibrary DydxFlashloanBase {\n    using SafeMath for uint256;\n\n    function _getMarketIdFromTokenAddress(address _solo, address token)\n        internal\n        view\n        returns (uint256)\n    {\n        ISoloMargin solo = ISoloMargin(_solo);\n\n        uint256 numMarkets = solo.getNumMarkets();\n\n        address curToken;\n        for (uint256 i = 0; i < numMarkets; i++) {\n            curToken = solo.getMarketTokenAddress(i);\n\n            if (curToken == token) {\n                return i;\n            }\n        }\n\n        revert();\n    }\n\n    function _getAccountInfo() internal view returns (Account.Info memory) {\n        return Account.Info({owner: address(this), number: 1});\n    }\n\n    function _getWithdrawAction(uint marketId, uint256 amount)\n        internal\n        view\n        returns (Actions.ActionArgs memory)\n    {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Withdraw,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: false,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: amount\n                }),\n                primaryMarketId: marketId,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: \"\"\n            });\n    }\n\n    function _getCallAction(bytes memory data)\n        internal\n        view\n        returns (Actions.ActionArgs memory)\n    {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Call,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: false,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: 0\n                }),\n                primaryMarketId: 0,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: data\n            });\n    }\n\n    function _getDepositAction(uint marketId, uint256 amount)\n        internal\n        view\n        returns (Actions.ActionArgs memory)\n    {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Deposit,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: true,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: amount\n                }),\n                primaryMarketId: marketId,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: \"\"\n            });\n    }\n}\n"},"dexbot-impl/libs/Interfaces.sol":{"content":"pragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\n//SPDX-License-Identifier: UNLICENSED\n\ninterface ChiGT {\n    function freeUpTo(uint256 value) external returns (uint256 freed);\n}\n\ninterface Stateholder {\n    function GetValue(uint256 ID) external view returns (uint256);\n    function SetValue(uint256 value, uint256 ID) external;\n}\n\ncontract ERC20Token {\n    function approve(\n        address _spender, \n        uint256 _value\n    ) external returns (bool success) {}\n    \n    function transfer(\n        address dst, \n        uint256 amount\n    ) external returns (bool) {}\n    \n    function allowance(\n        address _owner, \n        address _spender\n    ) external returns (uint256 remaining) {}\n    \n    function balanceOf(\n        address _owner\n    ) external returns (uint256 balance) {}\n}\n\ninterface IERC20 {\n    function approve(address spender, uint256 amount) external returns (bool);\n    function withdraw(uint wad) external;\n}\n\ninterface Proxy {\n    function setAllowedDelegate(address newAddress) external;\n    function getStaticConfig(uint Index) external returns (address);\n}\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value);\n        require(isContract(target));\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"dexbot-impl/libs/SafeMath.sol":{"content":"pragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\n//SPDX-License-Identifier: UNLICENSED\n\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a); // dev: overflow\n    }\n    \n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a); // dev: underflow\n        c = a - b;\n    }\n    \n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b); // dev: overflow\n    }\n    \n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0); // dev: divide by zero\n        c = a / b;\n    }\n    \n    function bdiv(uint a, uint b) internal pure returns (uint) {\n        uint BONE = 10**18;\n        require(b != 0);\n        uint c0 = a * BONE;\n        require(a == 0 || c0 / a == BONE); // bmul overflow\n        uint c1 = c0 + (b / 2);\n        require(c1 >= c0); //  badd require\n        uint c2 = c1 / b;\n        return c2;\n    }\n    \n    function getBase() internal pure returns (uint) {\n        uint BONE = 10**18;\n        return BONE;\n    }\n}"},"dexbot-impl/libs/Uniswap.sol":{"content":"pragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\n//SPDX-License-Identifier: UNLICENSED\n\nimport \"./SafeMath.sol\";\nimport \"./Interfaces.sol\";\n\nlibrary UniswapV2Library {\n    using SafeMath for uint;\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n    \n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint fees) internal pure returns (uint amountIn) {\n        //require(amountOut > 0);\n        require(reserveIn > 0 && reserveOut > 0);\n        uint numerator = reserveIn.mul(amountOut).mul(10000);\n        uint denominator = reserveOut.sub(amountOut).mul(10000-fees);\n        amountIn = (numerator / denominator).add(1);\n    }\n    \n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint fees) internal pure returns (uint amountOut) {\n        //require(amountIn > 0);\n        require(reserveIn > 0 && reserveOut > 0);\n        uint amountInWithFee = amountIn.mul(10000-fees);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(10000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n}\n\ninterface IUniswapV2Factory {\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n\ninterface IUniswapV2Pair {\n    function transfer(address to, uint value) external returns (bool);\n    event Swap(\n      address indexed sender,\n      uint amount0In,\n      uint amount1In,\n      uint amount0Out,\n      uint amount1Out,\n      address indexed to\n    );\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n}\n\ncontract UniswapRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts) {}\n}"},"dexbot-impl/libs/Uniswapv3.sol":{"content":"pragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\n//SPDX-License-Identifier: UNLICENSED\n\ninterface Uniswapv3Pool {\n  //function burn ( int24 tickLower, int24 tickUpper, uint128 amount ) external returns ( uint256 amount0, uint256 amount1 );\n  //function collect ( address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested ) external returns ( uint128 amount0, uint128 amount1 );\n  //function collectProtocol ( address recipient, uint128 amount0Requested, uint128 amount1Requested ) external returns ( uint128 amount0, uint128 amount1 );\n  //function factory (  ) external view returns ( address );\n  //function increaseObservationCardinalityNext ( uint16 observationCardinalityNext ) external;\n  //function initialize ( uint160 sqrtPriceX96 ) external;\n  //function liquidity (  ) external view returns ( uint128 );\n  //function maxLiquidityPerTick (  ) external view returns ( uint128 );\n  //function mint ( address recipient, int24 tickLower, int24 tickUpper, uint128 amount, bytes data ) external returns ( uint256 amount0, uint256 amount1 );\n  //function observations ( uint256 ) external view returns ( uint32 blockTimestamp, int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128, bool initialized );\n  //function observe ( uint32[] secondsAgos ) external view returns ( int56[] tickCumulatives, uint160[] secondsPerLiquidityCumulativeX128s );\n  //function positions ( bytes32 ) external view returns ( uint128 liquidity, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, uint128 tokensOwed0, uint128 tokensOwed1 );\n  //function setFeeProtocol ( uint8 feeProtocol0, uint8 feeProtocol1 ) external;\n  //function slot0 (  ) external view returns ( uint160 sqrtPriceX96, int24 tick, uint16 observationIndex, uint16 observationCardinality, uint16 observationCardinalityNext, uint8 feeProtocol, bool unlocked );\n  //function snapshotCumulativesInside ( int24 tickLower, int24 tickUpper ) external view returns ( int56 tickCumulativeInside, uint160 secondsPerLiquidityInsideX128, uint32 secondsInside );\n  //function tickBitmap ( int16 ) external view returns ( uint256 );\n  //function tickSpacing (  ) external view returns ( int24 );\n  //function ticks ( int24 ) external view returns ( uint128 liquidityGross, int128 liquidityNet, uint256 feeGrowthOutside0X128, uint256 feeGrowthOutside1X128, int56 tickCumulativeOutside, uint160 secondsPerLiquidityOutsideX128, uint32 secondsOutside, bool initialized );\n  \n  function token0() external view returns (address);\n  function token1() external view returns (address);\n  function fee() external view returns (uint24);\n  function feeGrowthGlobal0X128() external view returns (uint256);\n  function feeGrowthGlobal1X128() external view returns (uint256);\n  function flash(address recipient, uint256 amount0, uint256 amount1, bytes calldata data) external;\n  function swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes calldata data) external returns (int256, int256);\n  function protocolFees() external view returns (uint128, uint128);\n}\n\ninterface Uniswapv3Router {\n    \n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n    \n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n    \n    function exactInputSingle(ExactInputSingleParams calldata params) external returns (uint256 amountOut);\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external returns (uint256 amountIn);\n    \n  //function WETH9 (  ) external view returns ( address );\n  //function exactInput ( tuple params ) external returns ( uint256 amountOut );\n  //function exactOutput ( tuple params ) external returns ( uint256 amountIn );\n  //function factory (  ) external view returns ( address );\n  //function multicall ( bytes[] data ) external returns ( bytes[] results );\n  //function refundETH (  ) external;\n  //function selfPermit ( address token, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external;\n  //function selfPermitAllowed ( address token, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s ) external;\n  //function selfPermitAllowedIfNecessary ( address token, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s ) external;\n  //function selfPermitIfNecessary ( address token, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external;\n  //function sweepToken ( address token, uint256 amountMinimum, address recipient ) external;\n  //function sweepTokenWithFee ( address token, uint256 amountMinimum, address recipient, uint256 feeBips, address feeRecipient ) external;\n  //function uniswapV3SwapCallback ( int256 amount0Delta, int256 amount1Delta, bytes _data ) external;\n  //function unwrapWETH9 ( uint256 amountMinimum, address recipient ) external;\n  //function unwrapWETH9WithFee ( uint256 amountMinimum, address recipient, uint256 feeBips, address feeRecipient ) external;\n}\n"},"dexbot-impl/libs/Zeroex.sol":{"content":"pragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\n//SPDX-License-Identifier: UNLICENSED\n\nimport \"./SafeMath.sol\";\n\ninterface ZeroexExchange {\n  function fillOrder(Zeroex.Order memory order, uint256 takerAssetFillAmount, bytes memory signature) external payable returns (Zeroex.FillResults memory fillResults);\n  function getOrderInfo(Zeroex.Order memory order) external view returns (Zeroex.OrderInfo memory orderInfo);\n}\n\nlibrary Zeroex {\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n    \n    struct OrderParams {\n        Order zOrder;\n        bytes signature;\n        uint price;\n        uint inputDecimals;\n        uint outputDecimals;\n        uint ID;\n    }\n    \n    struct Order {\n        address makerAddress;           // Address that created the order.\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 makerFee;               // Fee paid to feeRecipient by maker when order is filled.\n        uint256 takerFee;               // Fee paid to feeRecipient by taker when order is filled.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes makerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring makerFeeAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring takerFeeAsset. The leading bytes4 references the id of the asset proxy.\n    }\n    \n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of fees paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of fees paid by taker to feeRecipients(s).\n        uint256 protocolFeePaid;         // Total amount of fees paid by taker to the staking contract.\n    }\n    \n    struct OrderInfo {\n        uint8 orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 typed data hash of the order (see LibOrder.getTypedDataHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n    \n    function CalcOutput(uint inputAmount, uint inputDecimals, uint outputDecimals, uint price) internal pure returns(uint outputAmount) {\n        uint a = SafeMath.mul(inputAmount, price);\n        uint b = SafeMath.mul((10**18), inputDecimals);\n        uint c = SafeMath.div(b, outputDecimals);\n        outputAmount = SafeMath.div(a, c);\n        return outputAmount;\n    }\n    \n    function GetOrderByID(OrderParams[] memory zeroExOrders, uint ID) internal pure returns(OrderParams memory result) {\n        uint ordersLength = zeroExOrders.length;\n        for (uint i=0; i<ordersLength; i++) {\n            OrderParams memory currentOrder = zeroExOrders[i];\n            if (currentOrder.ID == ID) {\n                result = currentOrder;\n                break;\n            }\n        }\n        return result;\n    }\n}"}}}