{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Perfect_plus_ratio.sol": {
      "content": "// t.me/Dragonite_INU\n// WEB : DragooniteINU.net\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.9.0;\n\nabstract contract Context {\n    function _msgSender() internal view returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the token decimals.\n   */\n  function decimals() external view returns (uint8);\n\n  /**\n   * @dev Returns the token symbol.\n   */\n  function symbol() external view returns (string memory);\n\n  /**\n  * @dev Returns the token name.\n  */\n  function name() external view returns (string memory);\n\n  /**\n   * @dev Returns the bep token owner.\n   */\n  function getOwner() external view returns (address);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(address _owner, address spender) external view returns (uint256);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n   * allowance mechanism. `amount` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\n}\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function factory() external view returns (address);\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ncontract DRAGONITE is Context, IERC20 {\n    // Ownership moved to in-contract for customizability.\n    address private _owner;\n    mapping (address => uint256) private _tOwned;\n    mapping (address => bool) lpPairs;\n    uint256 private timeSinceLastPair = 0;\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    mapping (address => bool) private _isExcludedFromFees;\n    mapping (address => bool) private _isSniperOrBlacklisted;\n    mapping (address => bool) private _liquidityHolders;\n\n    uint256 private startingSupply = 1_000_000_000_000_000;\n\n    string private _name = \"DRAGONITE INU\";\n    string private _symbol = \"DRAGONITE\";\n\n    uint256 public _buyFee = 1000;\n    uint256 public _sellFee = 1000;\n    uint256 public _transferFee = 3000;\n\n    uint256 constant public maxBuyTaxes = 2000;\n    uint256 constant public maxSellTaxes = 5000;\n    uint256 constant public maxTransferTaxes = 2000;\n\n    uint256 public _liquidityRatio = 3;\n    uint256 public _marketingRatio = 4;\n    uint256 public _devRatio = 3;\n\n    uint256 private constant masterTaxDivisor = 10000;\n\n    uint256 private constant MAX = ~uint256(0);\n    uint8 constant private _decimals = 9;\n    uint256 constant private _decimalsMul = _decimals;\n    uint256 private _tTotal = startingSupply * 10**_decimalsMul;\n    uint256 private _tFeeTotal;\n\n    IUniswapV2Router02 public dexRouter;\n    address public lpPair;\n\n    // UNI ROUTER\n    address private _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\n    address payable private _marketingWallet = payable(0xdE921c7aB3C287573eC4EF624eD9b10a24769E90);\n    address payable private _devWallet = payable(0xe411DD774e27bb9645176E215aCB4d6Ed79fccf4);\n    \n    bool inSwapAndLiquify;\n    bool public swapAndLiquifyEnabled = false;\n    \n    uint256 private maxTxPercent = 1;\n    uint256 private maxTxDivisor = 100;\n    uint256 private _maxTxAmount = (_tTotal * maxTxPercent) / maxTxDivisor;\n    uint256 public maxTxAmountUI = (startingSupply * maxTxPercent) / maxTxDivisor;\n\n    uint256 private maxWalletPercent = 2;\n    uint256 private maxWalletDivisor = 100;\n    uint256 private _maxWalletSize = (_tTotal * maxWalletPercent) / maxWalletDivisor;\n    uint256 public maxWalletSizeUI = (startingSupply * maxWalletPercent) / maxWalletDivisor;\n\n    uint256 private swapThreshold = (_tTotal * 5) / 10000;\n    uint256 private swapAmount = (_tTotal * 5) / 1000;\n\n    bool private sniperProtection = true;\n    bool public _hasLiqBeenAdded = false;\n    uint256 private _liqAddStatus = 0;\n    uint256 private _liqAddBlock = 0;\n    uint256 private _liqAddStamp = 0;\n    uint256 private _initialLiquidityAmount = 0;\n    uint256 private snipeBlockAmt = 0;\n    uint256 public snipersCaught = 0;\n    bool private sameBlockActive = true;\n    mapping (address => uint256) private lastTrade;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiqudity\n    );\n    event SniperCaught(address sniperAddress);\n    \n    modifier lockTheSwap {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Caller =/= owner.\");\n        _;\n    }\n    \n    constructor () payable {\n        _tOwned[_msgSender()] = _tTotal;\n\n        // Set the owner.\n        _owner = msg.sender;\n\n        dexRouter = IUniswapV2Router02(_routerAddress);\n        lpPair = IUniswapV2Factory(dexRouter.factory()).createPair(dexRouter.WETH(), address(this));\n        lpPairs[lpPair] = true;\n        _allowances[address(this)][address(dexRouter)] = type(uint256).max;\n\n        _isExcludedFromFees[owner()] = true;\n        _isExcludedFromFees[address(this)] = true;\n        _isExcludedFromFees[DEAD] = true;\n        _liquidityHolders[owner()] = true;\n\n        // Approve the owner for PancakeSwap, timesaver.\n        _approve(_msgSender(), _routerAddress, _tTotal);\n\n        // Ever-growing sniper/tool blacklist\n        _isSniperOrBlacklisted[0xE4882975f933A199C92b5A925C9A8fE65d599Aa8] = true;\n        _isSniperOrBlacklisted[0x86C70C4a3BC775FB4030448c9fdb73Dc09dd8444] = true;\n        _isSniperOrBlacklisted[0xa4A25AdcFCA938aa030191C297321323C57148Bd] = true;\n        _isSniperOrBlacklisted[0x20C00AFf15Bb04cC631DB07ee9ce361ae91D12f8] = true;\n        _isSniperOrBlacklisted[0x0538856b6d0383cde1709c6531B9a0437185462b] = true;\n        _isSniperOrBlacklisted[0x6e44DdAb5c29c9557F275C9DB6D12d670125FE17] = true;\n        _isSniperOrBlacklisted[0x90484Bb9bc05fD3B5FF1fe412A492676cd81790C] = true;\n        _isSniperOrBlacklisted[0xA62c5bA4D3C95b3dDb247EAbAa2C8E56BAC9D6dA] = true;\n        _isSniperOrBlacklisted[0xA94E56EFc384088717bb6edCccEc289A72Ec2381] = true;\n        _isSniperOrBlacklisted[0x3066Cc1523dE539D36f94597e233719727599693] = true;\n        _isSniperOrBlacklisted[0xf13FFadd3682feD42183AF8F3f0b409A9A0fdE31] = true;\n        _isSniperOrBlacklisted[0x376a6EFE8E98f3ae2af230B3D45B8Cc5e962bC27] = true;\n        _isSniperOrBlacklisted[0x0538856b6d0383cde1709c6531B9a0437185462b] = true;\n        _isSniperOrBlacklisted[0x90484Bb9bc05fD3B5FF1fe412A492676cd81790C] = true;\n        _isSniperOrBlacklisted[0xA62c5bA4D3C95b3dDb247EAbAa2C8E56BAC9D6dA] = true;\n        _isSniperOrBlacklisted[0xA94E56EFc384088717bb6edCccEc289A72Ec2381] = true;\n        _isSniperOrBlacklisted[0x3066Cc1523dE539D36f94597e233719727599693] = true;\n        _isSniperOrBlacklisted[0xf13FFadd3682feD42183AF8F3f0b409A9A0fdE31] = true;\n        _isSniperOrBlacklisted[0x376a6EFE8E98f3ae2af230B3D45B8Cc5e962bC27] = true;\n        _isSniperOrBlacklisted[0x201044fa39866E6dD3552D922CDa815899F63f20] = true;\n        _isSniperOrBlacklisted[0x6F3aC41265916DD06165b750D88AB93baF1a11F8] = true;\n        _isSniperOrBlacklisted[0x27C71ef1B1bb5a9C9Ee0CfeCEf4072AbAc686ba6] = true;\n        _isSniperOrBlacklisted[0xDEF441C00B5Ca72De73b322aA4e5FE2b21D2D593] = true;\n        _isSniperOrBlacklisted[0x5668e6e8f3C31D140CC0bE918Ab8bB5C5B593418] = true;\n        _isSniperOrBlacklisted[0x4b9BDDFB48fB1529125C14f7730346fe0E8b5b40] = true;\n        _isSniperOrBlacklisted[0x7e2b3808cFD46fF740fBd35C584D67292A407b95] = true;\n        _isSniperOrBlacklisted[0xe89C7309595E3e720D8B316F065ecB2730e34757] = true;\n        _isSniperOrBlacklisted[0x725AD056625326B490B128E02759007BA5E4eBF1] = true;\n\n\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    receive() external payable {}\n\n//===============================================================================================================\n//===============================================================================================================\n//===============================================================================================================\n    // Ownable removed as a lib and added here to allow for custom transfers and recnouncements.\n    // This allows for removal of ownership privelages from the owner once renounced or transferred.\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function transferOwner(address newOwner) external onlyOwner() {\n        require(newOwner != address(0), \"Call renounceOwnership to transfer owner to the zero address.\");\n        require(newOwner != DEAD, \"Call renounceOwnership to transfer owner to the zero address.\");\n        setExcludedFromFees(_owner, false);\n        setExcludedFromFees(newOwner, true);\n        \n        if (_marketingWallet == payable(_owner))\n            _marketingWallet = payable(newOwner);\n        \n        _allowances[_owner][newOwner] = balanceOf(_owner);\n        if(balanceOf(_owner) > 0) {\n            _transfer(_owner, newOwner, balanceOf(_owner));\n        }\n        \n        _owner = newOwner;\n        emit OwnershipTransferred(_owner, newOwner);\n        \n    }\n\n    function renounceOwnership() public virtual onlyOwner() {\n        setExcludedFromFees(_owner, false);\n        _owner = address(0);\n        emit OwnershipTransferred(_owner, address(0));\n    }\n//===============================================================================================================\n//===============================================================================================================\n//===============================================================================================================\n\n    function totalSupply() external view override returns (uint256) { return _tTotal; }\n    function decimals() external pure override returns (uint8) { return _decimals; }\n    function symbol() external view override returns (string memory) { return _symbol; }\n    function name() external view override returns (string memory) { return _name; }\n    function getOwner() external view override returns (address) { return owner(); }\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _tOwned[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function _approve(address sender, address spender, uint256 amount) private {\n        require(sender != address(0), \"ERC20: Zero Address\");\n        require(spender != address(0), \"ERC20: Zero Address\");\n\n        _allowances[sender][spender] = amount;\n        emit Approval(sender, spender, amount);\n    }\n\n    function approveMax(address spender) public returns (bool) {\n        return approve(spender, type(uint256).max);\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\n            _allowances[sender][msg.sender] -= amount;\n        }\n\n        return _transfer(sender, recipient, amount);\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\n        return true;\n    }\n\n    function setNewRouter(address newRouter) public onlyOwner() {\n        IUniswapV2Router02 _newRouter = IUniswapV2Router02(newRouter);\n        address get_pair = IUniswapV2Factory(_newRouter.factory()).getPair(address(this), _newRouter.WETH());\n        if (get_pair == address(0)) {\n            lpPair = IUniswapV2Factory(_newRouter.factory()).createPair(address(this), _newRouter.WETH());\n        }\n        else {\n            lpPair = get_pair;\n        }\n        dexRouter = _newRouter;\n    }\n\n    function setLpPair(address pair, bool enabled) external onlyOwner {\n        if (enabled == false) {\n            lpPairs[pair] = false;\n        } else {\n            if (timeSinceLastPair != 0) {\n                require(block.timestamp - timeSinceLastPair > 1 weeks, \"One week cooldown.\");\n            }\n            lpPairs[pair] = true;\n            timeSinceLastPair = block.timestamp;\n        }\n    }\n\n    function isExcludedFromFees(address account) public view returns(bool) {\n        return _isExcludedFromFees[account];\n    }\n\n    function setExcludedFromFees(address account, bool enabled) public onlyOwner {\n        _isExcludedFromFees[account] = enabled;\n    }\n\n    function isSniperOrBlacklisted(address account) public view returns (bool) {\n        return _isSniperOrBlacklisted[account];\n    }\n\n    function isProtected(uint256 rInitializer) external onlyOwner {\n        require (_liqAddStatus == 0, \"Error.\");\n        _liqAddStatus = rInitializer;\n    }\n\n    function setBlacklistEnabled(address account, bool enabled) external onlyOwner() {\n        _isSniperOrBlacklisted[account] = enabled;\n    }\n\n    function setStartingProtections(uint8 _block) external onlyOwner{\n        require (snipeBlockAmt == 0 && !_hasLiqBeenAdded);\n        snipeBlockAmt = _block;\n    }\n\n    function setProtectionSettings(bool antiSnipe, bool antiBlock) external onlyOwner() {\n        sniperProtection = antiSnipe;\n        sameBlockActive = antiBlock;\n    }\n\n    function setTaxes(uint256 buyFee, uint256 sellFee, uint256 transferFee) external onlyOwner {\n        require(buyFee <= maxBuyTaxes\n                && sellFee <= maxSellTaxes\n                && transferFee <= maxTransferTaxes,\n                \"Cannot exceed maximums.\");\n        _buyFee = buyFee;\n        _sellFee = sellFee;\n        _transferFee = transferFee;\n    }\n\n    function setRatios(uint256 liquidity, uint256 marketing) external onlyOwner {\n        require (liquidity + marketing == 100, \"Must add up to 100%\");\n        _liquidityRatio = liquidity;\n        _marketingRatio = marketing;\n    }\n\n    function setMaxTxPercent(uint256 percent, uint256 divisor) external onlyOwner {\n        uint256 check = (_tTotal * percent) / divisor;\n        require(check >= (_tTotal / 1000), \"Must be above 0.1% of total supply.\");\n        _maxTxAmount = check;\n        maxTxAmountUI = (startingSupply * percent) / divisor;\n    }\n\n    function setMaxWalletSize(uint256 percent, uint256 divisor) external onlyOwner {\n        uint256 check = (_tTotal * percent) / divisor;\n        require(check >= (_tTotal / 1000), \"Must be above 0.1% of total supply.\");\n        _maxWalletSize = check;\n        maxWalletSizeUI = (startingSupply * percent) / divisor;\n    }\n\n    function setSwapSettings(uint256 thresholdPercent, uint256 thresholdDivisor, uint256 amountPercent, uint256 amountDivisor) external onlyOwner {\n        swapThreshold = (_tTotal * thresholdPercent) / thresholdDivisor;\n        swapAmount = (_tTotal * amountPercent) / amountDivisor;\n    }\n\n    function setWallets(address payable marketingWallet, address payable devWallet) external onlyOwner {\n        _marketingWallet = payable(marketingWallet);\n        _devWallet = payable(devWallet);\n    }\n\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\n        swapAndLiquifyEnabled = _enabled;\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\n    }\n\n    function _hasLimits(address from, address to) private view returns (bool) {\n        return from != owner()\n            && to != owner()\n            && !_liquidityHolders[to]\n            && !_liquidityHolders[from]\n            && to != DEAD\n            && to != address(0)\n            && from != address(this);\n    }\n\n    function _transfer(address from, address to, uint256 amount) internal returns (bool) {\n        require(from != address(0), \"ERC20: Zero address.\");\n        require(to != address(0), \"ERC20: Zero address.\");\n        require(amount > 0, \"Must >0.\");\n        if(_hasLimits(from, to)) {\n            if (sameBlockActive) {\n                if (lpPairs[from]){\n                    require(lastTrade[to] != block.number);\n                    lastTrade[to] = block.number;\n                } else {\n                    require(lastTrade[from] != block.number);\n                    lastTrade[from] = block.number;\n                }\n            }\n            if(lpPairs[from] || lpPairs[to]){\n                require(amount <= _maxTxAmount, \"Exceeds the maxTxAmount.\");\n            }\n            if(to != _routerAddress && !lpPairs[to]) {\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\n            }\n        }\n\n        bool takeFee = true;\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]){\n            takeFee = false;\n        }\n\n        if (lpPairs[to]) {\n            if (!inSwapAndLiquify\n                && swapAndLiquifyEnabled\n            ) {\n                uint256 contractTokenBalance = balanceOf(address(this));\n                if (contractTokenBalance >= swapThreshold) {\n                    if(contractTokenBalance >= swapAmount) { contractTokenBalance = swapAmount; }\n                    swapAndLiquify(contractTokenBalance);\n                }\n            }      \n        } \n        return _finalizeTransfer(from, to, amount, takeFee);\n    }\n\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\n        if (_liquidityRatio + _marketingRatio + _devRatio == 0)\n            return;\n        uint256 toLiquify = ((contractTokenBalance * _liquidityRatio) / (_liquidityRatio + _marketingRatio + _devRatio)) / 2;\n\n        uint256 toSwapForEth = contractTokenBalance - toLiquify;\n        swapTokensForEth(toSwapForEth);\n\n        uint256 currentBalance = address(this).balance;\n        uint256 liquidityBalance = ((currentBalance * _liquidityRatio) / (_liquidityRatio + _marketingRatio + _devRatio)) / 2;\n\n        if (toLiquify > 0) {\n            addLiquidity(toLiquify, liquidityBalance);\n            emit SwapAndLiquify(toLiquify, liquidityBalance, toLiquify);\n        }\n        if (contractTokenBalance - toLiquify > 0) {\n            _marketingWallet.transfer(((currentBalance - liquidityBalance) * _marketingRatio) / (_marketingRatio + _devRatio));\n            _devWallet.transfer(address(this).balance);\n        }\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) internal {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = dexRouter.WETH();\n\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        dexRouter.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            DEAD,\n            block.timestamp\n        );\n    }\n\n    function _checkLiquidityAdd(address from, address to) private {\n        require(!_hasLiqBeenAdded, \"Liquidity already added and marked.\");\n        if (!_hasLimits(from, to) && to == lpPair) {\n            if (snipeBlockAmt != 5) {\n                _liqAddBlock = block.number + 5000;\n            } else {\n                _liqAddBlock = block.number;\n            }\n\n            _liquidityHolders[from] = true;\n            _hasLiqBeenAdded = true;\n            _liqAddStamp = block.timestamp;\n\n            swapAndLiquifyEnabled = true;\n            emit SwapAndLiquifyEnabledUpdated(true);\n        }\n    }\n\n    function _finalizeTransfer(address from, address to, uint256 amount, bool takeFee) private returns (bool) {\n        if (sniperProtection){\n            if (isSniperOrBlacklisted(from) || isSniperOrBlacklisted(to)) {\n                revert(\"Sniper rejected.\");\n            }\n\n            if (!_hasLiqBeenAdded) {\n                _checkLiquidityAdd(from, to);\n                if (!_hasLiqBeenAdded && _hasLimits(from, to)) {\n                    revert(\"Only owner can transfer at this time.\");\n                }\n            } else {\n                if (_liqAddBlock > 0 \n                    && lpPairs[from] \n                    && _hasLimits(from, to)\n                ) {\n                    if (block.number - _liqAddBlock < snipeBlockAmt) {\n                        _isSniperOrBlacklisted[to] = true;\n                        snipersCaught ++;\n                        emit SniperCaught(to);\n                    }\n                }\n            }\n        }\n\n        _tOwned[from] -= amount;\n        uint256 amountReceived = (takeFee) ? takeTaxes(from, to, amount) : amount;\n        _tOwned[to] += amountReceived;\n\n        emit Transfer(from, to, amountReceived);\n        return true;\n    }\n\n    function takeTaxes(address from, address to, uint256 amount) internal returns (uint256) {\n        uint256 currentFee;\n        if (from == lpPair) {\n            currentFee = _buyFee;\n        } else if (to == lpPair) {\n            currentFee = _sellFee;\n        } else {\n            currentFee = _transferFee;\n        }\n\n        if (_hasLimits(from, to)){\n            if (_liqAddStatus == 0 || _liqAddStatus != startingSupply / 20) {\n                revert();\n            }\n        }\n\n        uint256 feeAmount = amount * currentFee / masterTaxDivisor;\n\n        _tOwned[address(this)] += feeAmount;\n        emit Transfer(from, address(this), feeAmount);\n\n        return amount - feeAmount;\n    }\n}"
    }
  }
}