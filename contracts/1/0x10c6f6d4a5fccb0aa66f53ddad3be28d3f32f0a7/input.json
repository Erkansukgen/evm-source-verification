{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Staking.sol":{"content":"// SPDX-License-Identifier: MIT\n// @dev TG: defi_guru\n\npragma solidity ^0.6.0;\n\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view returns (address);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// File contracts/farms/IBEP20Mintable.sol\n\npragma solidity ^0.6.0;\ninterface IBEP20Mintable is IBEP20 {\n    function mint(address to, uint256 amount) external;\n    function transferOwnership(address newOwner) external;\n}\n\n\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.1\n\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/Address.sol@v3.4.1\n\n\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n// File contracts/farms/SafeBEP20.sol\n\n\n\npragma solidity ^0.6.0;\n/**\n * @title SafeBEP20\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeBEP20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IBEP20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IBEP20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IBEP20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\n            value,\n            \"SafeBEP20: decreased allowance below zero\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeBEP20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeBEP20: BEP20 operation did not succeed\");\n        }\n    }\n}\n\n\n// File contracts/farms/IReferral.sol\n\n\n\npragma solidity ^0.6.0;\n\ninterface IReferral {\n    /**\n     * @dev Record referral.\n     */\n    function recordReferral(address user, address referrer) external;\n\n    /**\n     * @dev Record referral commission.\n     */\n    function recordReferralCommission(address referrer, uint256 commission) external;\n\n    /**\n     * @dev Get the referrer address that referred the user.\n     */\n    function getReferrer(address user) external view returns (address);\n}\n\n\n// File @openzeppelin/contracts/utils/Context.sol@v3.4.1\n\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\n// File @openzeppelin/contracts/access/Ownable.sol@v3.4.1\n\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n// File contracts/farms/Referral.sol\n\n\n\npragma solidity ^0.6.0;\ncontract Referral is IReferral, Ownable {\n    using SafeBEP20 for IBEP20;\n\n    mapping(address => bool) public operators;\n    mapping(address => address) public referrers; // user address => referrer address\n    mapping(address => uint256) public referralsCount; // referrer address => referrals count\n    mapping(address => uint256) public totalReferralCommissions; // referrer address => total referral commissions\n\n    event ReferralRecorded(address indexed user, address indexed referrer);\n    event ReferralCommissionRecorded(address indexed referrer, uint256 commission);\n    event OperatorUpdated(address indexed operator, bool indexed status);\n\n    modifier onlyOperator {\n        require(operators[msg.sender], \"Operator: caller is not the operator\");\n        _;\n    }\n\n    function recordReferral(address _user, address _referrer) public override onlyOperator {\n        if (_user != address(0)\n            && _referrer != address(0)\n            && _user != _referrer\n            && referrers[_user] == address(0)\n        ) {\n            referrers[_user] = _referrer;\n            referralsCount[_referrer] += 1;\n            emit ReferralRecorded(_user, _referrer);\n        }\n    }\n\n    function recordReferralCommission(address _referrer, uint256 _commission) public override onlyOperator {\n        if (_referrer != address(0) && _commission > 0) {\n            totalReferralCommissions[_referrer] += _commission;\n            emit ReferralCommissionRecorded(_referrer, _commission);\n        }\n    }\n\n    // Get the referrer address that referred the user\n    function getReferrer(address _user) public override view returns (address) {\n        return referrers[_user];\n    }\n\n    // Update the status of the operator\n    function updateOperator(address _operator, bool _status) external onlyOwner {\n        operators[_operator] = _status;\n        emit OperatorUpdated(_operator, _status);\n    }\n\n    // Owner can drain tokens that are sent here by mistake\n    function drainBEP20Token(IBEP20 _token, uint256 _amount, address _to) external onlyOwner {\n        _token.safeTransfer(_to, _amount);\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/ReentrancyGuard.sol@v3.4.1\n\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n\n// File @openzeppelin/contracts/introspection/IERC165.sol@v3.4.1\n\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n\n// File @openzeppelin/contracts/token/ERC1155/IERC1155.sol@v3.4.1\n\n\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n\n\n// File @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol@v3.4.1\n\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n}\n\n\n// File @openzeppelin/contracts/introspection/ERC165.sol@v3.4.1\n\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\n\n// File @openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol@v3.4.1\n\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    constructor() internal {\n        _registerInterface(\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\n            ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\n        );\n    }\n}\n\n\n// File @openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol@v3.4.1\n\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n\n\n// File contracts/farms/IslandInuStaking.sol\n\n\n\npragma solidity ^0.6.0;\ncontract Reserve is Ownable {\n    function safeTransfer(IBEP20 rewardToken, address _to, uint256 _amount) external onlyOwner {\n        uint256 tokenBal = rewardToken.balanceOf(address(this));\n        if (_amount > tokenBal) {\n            rewardToken.transfer(_to, tokenBal);\n        } else {\n            rewardToken.transfer(_to, _amount);\n        }\n    }\n}\n\ncontract IslandInuStaking is Ownable, ERC1155Holder {\n    using SafeMath for uint256;\n    using SafeBEP20 for IBEP20;\n\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewardDebt;\n        uint256 rewardLockedUp;  // Reward locked up.\n        uint256 nextHarvestUntil; // When can the user harvest again.\n    }\n\n    struct PoolInfo {\n        IBEP20 stakedToken;\n        IBEP20 rewardToken;\n        uint256 stakedAmount;\n        uint256 rewardSupply;\n        uint256 tokenPerBlock;\n        uint256 lastRewardBlock;\n        uint256 accTokenPerShare;\n        uint16 depositFeeBP;\n        uint256 minDeposit;\n        uint256 harvestInterval;  // Harvest interval in seconds\n        uint256 nftId;\n        uint256 minNft;\n        bool lockDeposit;\n    }\n\n    IERC1155 public nft;\n    Reserve public rewardReserve;\n    address public devaddr;\n    uint256 public devReward;\n    uint256 public constant BONUS_MULTIPLIER = 1;\n    // Max harvest interval: 14 days.\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\n    address public feeAddress;\n    \n    mapping(address => mapping(address => bool)) poolExists;\n\n    PoolInfo[] public poolInfo;\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\n    address public setup;\n    uint256 public startBlock;\n    bool public paused = true;\n    bool public initialized = false;\n\n    modifier onlyOwnerAndSetup() {\n        require(owner() == _msgSender() || setup == _msgSender(), \"IslandInuStaking: caller is not the owner or setup\");\n        _;\n    }\n    \n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event RewardLockedUp(address indexed user, uint256 indexed pid, uint256 amountLockedUp);\n    event ReferralCommissionPaid(address indexed user, address indexed referrer, uint256 commissionAmount);\n\n    constructor() public {\n        setup = msg.sender;\n        devaddr = msg.sender;\n        feeAddress = msg.sender;\n        devReward = 0;\n        startBlock = 0;\n        rewardReserve = new Reserve();\n\n        add(\n            10000e9,\n            IBEP20(0xe9fba30fF18D305feA49836939eACA55f26C019c),\n            IBEP20(0xe9fba30fF18D305feA49836939eACA55f26C019c),\n            0,\n            0,\n            0,\n            0,\n            0\n        );\n    }\n    \n    function initialize() public onlyOwner {\n        require(!initialized,\"IslandInuStaking: Farming already started!\");\n        initialized = true;\n        paused = false;\n        startBlock = block.number;\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            poolInfo[pid].lastRewardBlock = startBlock;\n        }\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    function depositRewardToken(uint256 poolId, uint256 amount) external {\n        PoolInfo storage pool = poolInfo[poolId];\n\n        uint256 initialBalance = pool.rewardToken.balanceOf(address(rewardReserve));\n        pool.rewardToken.transferFrom(msg.sender, address(rewardReserve), amount);\n        uint256 finalBalance = pool.rewardToken.balanceOf(address(rewardReserve));\n        pool.rewardSupply = pool.rewardSupply.add(finalBalance.sub(initialBalance));\n    }\n\n    function add(uint256 _tokenPerBlock, IBEP20 _stakedToken, IBEP20 _rewardToken, uint16 _depositFeeBP, uint256 _minDeposit, uint256 _harvestInterval, uint256 _nftId, uint256 _minNft) public onlyOwnerAndSetup {\n        require(poolInfo.length <= 1000, \"IslandInuStaking: Pool Length Full!\");\n        require(!poolExists[address(_stakedToken)][address(_rewardToken)], \"IslandInuStaking: Pool Already Exists!\");\n        require(_depositFeeBP <= 10000, \"IslandInuStaking: invalid deposit fee basis points\");\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \"IslandInuStaking: invalid harvest interval\");\n        \n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        poolInfo.push(PoolInfo({\n            stakedToken: _stakedToken,\n            rewardToken: _rewardToken,\n            stakedAmount: 0,\n            rewardSupply: 0,\n            tokenPerBlock: _tokenPerBlock,\n            lastRewardBlock: lastRewardBlock,\n            accTokenPerShare: 0,\n            depositFeeBP: _depositFeeBP,\n            minDeposit: _minDeposit,\n            harvestInterval: _harvestInterval,\n            nftId: _nftId,\n            minNft: _minNft,\n            lockDeposit: false\n        }));\n        poolExists[address(_stakedToken)][address(_rewardToken)] = true;\n    }\n\n    function set(uint256 _pid, uint256 _tokenPerBlock, uint16 _depositFeeBP, uint256 _minDeposit, uint256 _harvestInterval) public onlyOwnerAndSetup {\n        require(_depositFeeBP <= 10000, \"IslandInuStaking: invalid deposit fee basis points\");\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \"IslandInuStaking: invalid harvest interval\");\n        \n        poolInfo[_pid].tokenPerBlock = _tokenPerBlock;\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\n        poolInfo[_pid].minDeposit = _minDeposit;\n        poolInfo[_pid].harvestInterval = _harvestInterval;\n    }\n\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\n    }\n\n    function pendingToken(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accTokenPerShare = pool.accTokenPerShare;\n        if (block.number > pool.lastRewardBlock && pool.stakedAmount != 0 && pool.rewardSupply > 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 tokenReward = multiplier.mul(pool.tokenPerBlock);\n            accTokenPerShare = accTokenPerShare.add(tokenReward.mul(1e12).div(pool.stakedAmount));\n        }\n        return user.amount.mul(accTokenPerShare).div(1e12).sub(user.rewardDebt);\n    }\n\n    // View function to see if user can harvest Reward Token.\n    function canHarvest(uint256 _pid, address _user) public view returns (bool) {\n        UserInfo storage user = userInfo[_pid][_user];\n        return block.timestamp >= user.nextHarvestUntil;\n    }\n\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 tokenBalance = pool.stakedAmount; \n        if (tokenBalance == 0 || pool.tokenPerBlock == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        \n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 tokenReward = multiplier.mul(pool.tokenPerBlock);\n        uint256 _devReward = tokenReward.mul(devReward).div(10000);\n        uint256 rewardTokenSupply = pool.rewardSupply;\n        if(rewardTokenSupply >= tokenReward.add(_devReward) && _devReward > 0) {\n            rewardReserve.safeTransfer(pool.rewardToken, devaddr, _devReward);\n            pool.accTokenPerShare = pool.accTokenPerShare.add(tokenReward.mul(1e12).div(tokenBalance));\n            pool.rewardSupply = pool.rewardSupply.sub(tokenReward.add(_devReward));\n        } else if(rewardTokenSupply > 0){\n            pool.accTokenPerShare = pool.accTokenPerShare.add(rewardTokenSupply.mul(1e12).div(tokenBalance));\n            pool.rewardSupply = 0;\n        }\n        pool.lastRewardBlock = block.number;\n    }\n\n    function deposit(uint256 _pid, uint256 _amount) public {\n        require(paused == false, \"IslandInuStaking: Paused!\");\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        if(user.amount == 0 && address(nft) != address(0) && pool.minNft > 0) {\n            nft.safeTransferFrom(msg.sender, address(this), pool.nftId, pool.minNft, \"\");\n        }\n        require(!pool.lockDeposit, \"IslandInuStaking: Deposit Locked!\");\n        updatePool(_pid);\n        payOrLockupPendingToken(_pid);\n        if(_amount > 0) {\n            // track balance before and after calling tranferFrom to incorporate tokens that charge a fee on transfer\n            uint256 initialBalance = pool.stakedToken.balanceOf(address(this));\n            pool.stakedToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n            uint256 finalBalance = pool.stakedToken.balanceOf(address(this));\n            uint256 delta = finalBalance.sub(initialBalance);\n            require(pool.stakedToken.balanceOf(msg.sender) >= poolInfo[_pid].minDeposit,\"IslandInuStaking: Not Enough Required Staking Tokens!\");\n            if(pool.depositFeeBP > 0){\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\n                pool.stakedToken.safeTransfer(feeAddress, depositFee);\n                user.amount = user.amount.add(delta).sub(depositFee);\n                pool.stakedAmount = pool.stakedAmount.add(delta).sub(depositFee);\n            } else {\n                user.amount = user.amount.add(delta);\n                pool.stakedAmount = pool.stakedAmount.add(delta);\n            }\n        }\n        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(1e12);\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"IslandInuStaking: withdraw not good\");\n        updatePool(_pid);\n        payOrLockupPendingToken(_pid);\n        if(address(nft) != address(0) && pool.minNft > 0) {\n            nft.safeTransferFrom(address(this), msg.sender, pool.nftId, pool.minNft, \"\");\n        }\n        if(_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.stakedAmount = pool.stakedAmount.sub(_amount);\n            pool.stakedToken.safeTransfer(address(msg.sender), _amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(1e12);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    function payOrLockupPendingToken(uint256 _pid) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        if (user.nextHarvestUntil == 0) {\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\n        }\n\n        uint256 pending = user.amount.mul(pool.accTokenPerShare).div(1e12).sub(user.rewardDebt);\n        if (canHarvest(_pid, msg.sender)) {\n            if (pending > 0 || user.rewardLockedUp > 0) {\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\n\n                // reset lockup\n                user.rewardLockedUp = 0;\n                user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\n\n                // send rewards\n                rewardReserve.safeTransfer(pool.rewardToken, msg.sender, totalRewards);\n            }\n        } else if (pending > 0) {\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\n            emit RewardLockedUp(msg.sender, _pid, pending);\n        }\n    }\n\n    function emergencyWithdraw(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        user.rewardLockedUp = 0;\n        user.nextHarvestUntil = 0;\n        pool.stakedToken.safeTransfer(address(msg.sender), amount);\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\n    }\n\n    function emergencyAdminWithdraw(uint256 _pid) public onlyOwner {\n        PoolInfo storage pool = poolInfo[_pid];\n        pool.rewardToken.transfer(owner(), pool.rewardToken.balanceOf(address(this)));\n        rewardReserve.safeTransfer(pool.rewardToken, owner(), pool.rewardToken.balanceOf(address(rewardReserve)));\n        pool.accTokenPerShare = 0;\n        pool.tokenPerBlock = 0;\n        pool.lastRewardBlock = block.number;\n    }\n\n    function setNFT(IERC1155 _nft) external onlyOwnerAndSetup {\n        nft = _nft;\n    }\n\n    function updateDevReward(uint _devReward) public onlyOwner {\n        devReward = _devReward;\n    }\n\n    function dev(address _devaddr) public {\n        require(msg.sender == devaddr, \"dev: wut?\");\n        devaddr = _devaddr;\n    }\n\n    function setFeeAddress(address _feeAddress) public {\n        require(msg.sender == feeAddress, \"IslandInuStaking: FORBIDDEN\");\n        feeAddress = _feeAddress;\n    }\n\n    function updateSetup(address _setup) public onlyOwnerAndSetup {\n        setup = _setup;\n    }\n\n    function updatePaused(bool _value) public onlyOwner {\n        paused = _value;\n    }\n\n    function setLockDeposit(uint pid, bool locked) public onlyOwnerAndSetup {\n        poolInfo[pid].lockDeposit = locked;\n    }\n}"}}}