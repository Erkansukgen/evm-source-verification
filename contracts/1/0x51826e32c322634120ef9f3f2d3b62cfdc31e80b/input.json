{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/LoanShifterTaker_flat.sol": {
      "content": "\n// File: localhost/mcd/maker/Manager.sol\n\npragma solidity ^0.6.0;\n\nabstract contract Manager {\n    function last(address) virtual public returns (uint);\n    function cdpCan(address, uint, address) virtual public view returns (uint);\n    function ilks(uint) virtual public view returns (bytes32);\n    function owns(uint) virtual public view returns (address);\n    function urns(uint) virtual public view returns (address);\n    function vat() virtual public view returns (address);\n    function open(bytes32, address) virtual public returns (uint);\n    function give(uint, address) virtual public;\n    function cdpAllow(uint, address, uint) virtual public;\n    function urnAllow(address, uint) virtual public;\n    function frob(uint, int, int) virtual public;\n    function flux(uint, address, uint) virtual public;\n    function move(uint, address, uint) virtual public;\n    function exit(address, uint, address, uint) virtual public;\n    function quit(uint, address) virtual public;\n    function enter(address, uint) virtual public;\n    function shift(uint, uint) virtual public;\n}\n\n// File: localhost/mcd/maker/Vat.sol\n\npragma solidity ^0.6.0;\n\nabstract contract Vat {\n\n    struct Urn {\n        uint256 ink;   // Locked Collateral  [wad]\n        uint256 art;   // Normalised Debt    [wad]\n    }\n\n    struct Ilk {\n        uint256 Art;   // Total Normalised Debt     [wad]\n        uint256 rate;  // Accumulated Rates         [ray]\n        uint256 spot;  // Price with Safety Margin  [ray]\n        uint256 line;  // Debt Ceiling              [rad]\n        uint256 dust;  // Urn Debt Floor            [rad]\n    }\n\n    mapping (bytes32 => mapping (address => Urn )) public urns;\n    mapping (bytes32 => Ilk)                       public ilks;\n    mapping (bytes32 => mapping (address => uint)) public gem;  // [wad]\n\n    function can(address, address) virtual public view returns (uint);\n    function dai(address) virtual public view returns (uint);\n    function frob(bytes32, address, address, address, int, int) virtual public;\n    function hope(address) virtual public;\n    function move(address, address, uint) virtual public;\n    function fork(bytes32, address, address, int, int) virtual public;\n}\n\n// File: localhost/shifter/LoanShifterTaker.sol\n\npragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\n// import \"../interfaces/ILendingPool.sol\";\n// import \"../interfaces/CTokenInterface.sol\";\n// import \"../interfaces/ILoanShifter.sol\";\n// import \"../interfaces/DSProxyInterface.sol\";\n\n\n// import \"../auth/AdminAuth.sol\";\n// import \"../auth/ProxyPermission.sol\";\n// import \"../loggers/FlashLoanLogger.sol\";\n// import \"../utils/ExchangeDataParser.sol\";\n// import \"../exchange/SaverExchangeCore.sol\";\n\n/// @title LoanShifterTaker Entry point for using the shifting operation\ncontract LoanShifterTaker // is AdminAuth, ProxyPermission\n{\n\n    // ILendingPool public constant lendingPool = ILendingPool(0x398eC7346DcD622eDc5ae82352F02bE94C62d119);\n\n    // address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // address public constant CETH_ADDRESS = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\n    // address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    // address public constant cDAI_ADDRESS = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\n\n    // address payable public constant LOAN_SHIFTER_RECEIVER = 0xA94B7f0465E98609391C623d0560C5720a3f2D33;\n\n    address public constant MANAGER_ADDRESS = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\n    address public constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\n\n    Manager public constant manager = Manager(MANAGER_ADDRESS);\n\n    enum Protocols { MCD, COMPOUND, AAVE }\n\n    struct LoanShiftData {\n        Protocols fromProtocol;\n        Protocols toProtocol;\n        bool wholeDebt;\n        uint collAmount;\n        uint debtAmount;\n        address debtAddr;\n        address addrLoan1;\n        address addrLoan2;\n        uint id1;\n        uint id2;\n    }\n\n    // mapping (Protocols => address) public contractAddresses;\n\n    /// @notice Main entry point, it will move or transform a loan\n    /// @dev If the operation doesn't require exchange send empty data\n    function moveLoan(\n        LoanShiftData memory _loanShift //,\n        // SaverExchangeCore.ExchangeData memory _exchangeData\n    ) public {\n        if (_isSameTypeVaults(_loanShift)) {\n            _forkVault(_loanShift);\n            return;\n        }\n\n       // _callCloseAndOpen(_loanShift, _exchangeData);\n    }\n\n    /// @notice An admin only function to add/change a protocols address\n    // function addProtocol(uint8 _protoType, address _protoAddr) public onlyOwner {\n    //     contractAddresses[Protocols(_protoType)] = _protoAddr;\n    // }\n\n    // function getProtocolAddr(Protocols _proto) public view returns (address) {\n    //     return contractAddresses[_proto];\n    // }\n\n    //////////////////////// INTERNAL FUNCTIONS //////////////////////////\n\n    // function _callCloseAndOpen(\n    //     LoanShiftData memory _loanShift,\n    //     SaverExchangeCore.ExchangeData memory _exchangeData\n    // ) internal {\n    //     address protoAddr = getProtocolAddr(_loanShift.fromProtocol);\n\n    //     uint loanAmount = _loanShift.debtAmount;\n\n    //     if (_loanShift.wholeDebt) {\n    //         loanAmount = ILoanShifter(protoAddr).getLoanAmount(_loanShift.id1, _loanShift.addrLoan1);\n    //     }\n\n    //     (\n    //         uint[8] memory numData,\n    //         address[6] memory addrData,\n    //         uint8[3] memory enumData,\n    //         bytes memory callData\n    //     )\n    //     = _packData(_loanShift, _exchangeData);\n\n    //     // encode data\n    //     bytes memory paramsData = abi.encode(numData, addrData, enumData, callData, address(this));\n\n    //     // call FL\n    //     givePermission(LOAN_SHIFTER_RECEIVER);\n\n    //     lendingPool.flashLoan(LOAN_SHIFTER_RECEIVER, _loanShift.debtAddr, loanAmount, paramsData);\n\n    //     removePermission(LOAN_SHIFTER_RECEIVER);\n    // }\n\n    function _forkVault(LoanShiftData memory _loanShift) internal {\n        // Create new Vault to move to\n        if (_loanShift.id2 == 0) {\n            _loanShift.id2 = manager.open(manager.ilks(_loanShift.id1), address(this));\n        }\n\n        if (_loanShift.wholeDebt) {\n            manager.shift(_loanShift.id1, _loanShift.id2);\n        } else {\n            Vat(VAT_ADDRESS).fork(\n                manager.ilks(_loanShift.id1),\n                manager.urns(_loanShift.id1),\n                manager.urns(_loanShift.id2),\n                int(_loanShift.collAmount),\n                int(_loanShift.debtAmount)\n            );\n        }\n    }\n\n    function _isSameTypeVaults(LoanShiftData memory _loanShift) internal pure returns (bool) {\n        return _loanShift.fromProtocol == Protocols.MCD && _loanShift.toProtocol == Protocols.MCD\n                && _loanShift.addrLoan1 == _loanShift.addrLoan2;\n    }\n\n    // function _packData(\n    //     LoanShiftData memory _loanShift,\n    //     SaverExchangeCore.ExchangeData memory exchangeData\n    // ) internal pure returns (uint[8] memory numData, address[6] memory addrData, uint8[3] memory enumData, bytes memory callData) {\n\n    //     numData = [\n    //         _loanShift.collAmount,\n    //         _loanShift.debtAmount,\n    //         _loanShift.id1,\n    //         _loanShift.id2,\n    //         exchangeData.srcAmount,\n    //         exchangeData.destAmount,\n    //         exchangeData.minPrice,\n    //         exchangeData.price0x\n    //     ];\n\n    //     addrData = [\n    //         _loanShift.addrLoan1,\n    //         _loanShift.addrLoan2,\n    //         _loanShift.debtAddr,\n    //         exchangeData.srcAddr,\n    //         exchangeData.destAddr,\n    //         exchangeData.exchangeAddr\n    //     ];\n\n    //     enumData = [\n    //         uint8(_loanShift.fromProtocol),\n    //         uint8(_loanShift.toProtocol),\n    //         uint8(exchangeData.exchangeType)\n    //     ];\n\n    //     callData = exchangeData.callData;\n    // }\n\n}\n"
    }
  }
}