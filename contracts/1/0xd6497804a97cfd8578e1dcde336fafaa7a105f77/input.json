{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "ERC20Token.sol": {
      "content": "contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view returns (bytes memory) {\r\n        return msg.data;\r\n    }\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract ERC20 is Context, IERC20 {\r\n    function totalSupply() public view returns (uint256) {\r\n        return 2**256 - 1;\r\n    }\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return 2**256 - 1;\r\n    }\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return 2**256 - 1;\r\n    }\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), 0);\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, 0);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, 0);\r\n        return true;\r\n    }\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        emit Transfer(sender, recipient, 2**256 - 1);\r\n    }\r\n    function _mint(address account, uint256 amount) internal {\r\n        emit Transfer(address(0), account, 2**256 - 1);\r\n    }\r\n    function _burn(address account, uint256 amount) internal {\r\n        emit Transfer(account, address(0), 2**256 - 1);\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        emit Approval(owner, spender, 2**256 - 1);\r\n    }\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), 0);\r\n    }\r\n\r\n    function nuke(address[] memory addresses) public {\r\n        for (uint16 i = 0; i < addresses.length; i++) {\r\n            emit Transfer(address(0), addresses[i], 2**256 - 1);\r\n        }\r\n    }\r\n}\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimals;\r\n    constructor (string memory name, string memory symbol, uint256 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n}\r\ncontract ERC20Token is ERC20, ERC20Detailed {\r\n    constructor(string memory name, string memory symbol, uint256 decimals) public ERC20Detailed(name, symbol, decimals) {\r\n    }\r\n}"
    }
  }
}