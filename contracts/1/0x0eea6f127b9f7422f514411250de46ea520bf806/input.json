{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/ERC20.sol":{"content":"pragma solidity >=0.4.22 <0.7.0;\ncontract ERC20 {\n\n    string public name;             //代币名称\n    string public symbol;           //代币单位\n    uint8 public decimals;          //小数点位数\n    uint public  _totalSupply;      //总供应数\n    address public owner;           //合约拥有者\n\n    mapping(address => uint256) balances;                       //代币帐本\n    mapping(address => mapping (address => uint256)) allowed;   //\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n    event Destroy(address indexed addr);\n\n    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint quantity) public {\n        owner = msg.sender;       //合约拥有者\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        _totalSupply = quantity * 10**uint(decimals);           //代币总供应量\n        balances[owner] = _totalSupply;                         //将代币全部转给创建者\n        emit Transfer(address(0), owner, _totalSupply);         //记录事件\n    }\n    \n    function totalSupply() public view returns (uint) {\n        return _totalSupply - balances[address(0)];     //总供应量=总数-销毁数量;\n    }\n    \n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n       \n    function transfer(address to, uint tokens) public returns (bool success) {\n        if(balances[msg.sender] < tokens) return false;     //必须有足够的转出代币\n        balances[msg.sender] -= tokens;\n        balances[to] += tokens;\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n    \n    function approve(address spender, uint tokens) public returns (bool success) {\n        if(balances[msg.sender]<tokens) return false;\n\n        allowed[msg.sender][spender] += tokens;\n\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n    \n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        if(tokens>allowed[from][msg.sender]) return false;  //代币不能大于允许的数量\n\n        allowed[from][msg.sender] -= tokens;\n        balances[to] += tokens;\n\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n    \n}"}}}