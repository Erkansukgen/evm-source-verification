{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "staking.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface ERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @title Claimable Protocol\n * @dev Smart contract allow recipients to claim ERC20 tokens\n *      according to an initial cliff and a vesting period\n *      Formual:\n *      - claimable at cliff: (cliff / vesting) * amount\n *      - claimable at time t after cliff (t0 = start time)\n *        (t - t0) / vesting * amount\n *      - multiple claims, last claim at t1, claim at t:\n *        (t - t1) / vesting * amount\n *        or\n *        (t - t0) / vesting * amount - claimed\n */\ncontract Claimable is Context {\n    using SafeMath for uint256;\n\n    /// @notice unique claim ticket id, auto-increment\n    uint256 public currentId;\n\n    /// @notice claim ticket\n    /// @dev payable is not needed for ERC20, need more work to support Ether\n    struct Ticket {\n      address token; // ERC20 token address\n      address payable grantor; // grantor address\n      address payable beneficiary;\n      uint256 cliff; // cliff time from creation in days\n      uint256 vesting; // vesting period in days\n      uint256 amount; // initial funding amount\n      uint256 claimed; // amount already claimed\n      uint256 balance; // current balance\n      uint256 createdAt; // begin time\n      uint256 lastClaimedAt;\n      uint256 numClaims;\n      bool irrevocable; // cannot be revoked\n      bool isRevoked; // return balance to grantor\n      uint256 revokedAt; // revoke timestamp\n    //   mapping (uint256\n    //     => mapping (uint256 => uint256)) claims; // claimId => lastClaimAt => amount\n    }\n\n    /// @dev address => id[]\n    /// @dev this is expensive but make it easy to create management UI\n    mapping (address => uint256[]) private grantorTickets;\n    mapping (address => uint256[]) private beneficiaryTickets;\n\n    /**\n     * Claim tickets\n     */\n    /// @notice id => Ticket\n    mapping (uint256 => Ticket) public tickets;\n\n    event TicketCreated(uint256 id, address token, uint256 amount, bool irrevocable);\n    event Claimed(uint256 id, address token, uint256 amount);\n    event Revoked(uint256 id, uint256 amount);\n\n    modifier canView(uint256 _id) {\n        Ticket memory ticket = tickets[_id];\n        require(ticket.grantor == _msgSender() || ticket.beneficiary == _msgSender(), \"Only grantor or beneficiary can view.\");\n        _;\n    }\n\n    modifier notRevoked(uint256 _id) {\n        Ticket memory ticket = tickets[_id];\n        require(ticket.isRevoked == false, \"Ticket is already revoked\");\n        _;\n    }\n\n    /// @dev show all my grantor tickets\n    function myGrantorTickets() public view returns (uint256[] memory myTickets) {\n        myTickets = grantorTickets[_msgSender()];\n    }\n\n    /// @dev show all my beneficiary tickets\n    function myBeneficiaryTickets() public view returns (uint256[] memory myTickets) {\n        myTickets = beneficiaryTickets[_msgSender()];\n    }\n\n    /// @notice special cases: cliff = period: all claimable after the cliff\n    function create(address _token, address payable _beneficiary, uint256 _cliff, uint256 _vesting, uint256 _amount, bool _irrevocable) public returns (uint256 ticketId) {\n      /// @dev sender needs to approve this contract to fund the claim\n      require(_beneficiary != address(0), \"Beneficiary is required\");\n      require(_amount > 0, \"Amount is required\");\n      require(_vesting >= _cliff, \"Vesting period should be equal or longer to the cliff\");\n      ERC20 token = ERC20(_token);\n      require(token.balanceOf(_msgSender()) >= _amount, \"Insufficient balance\");\n      require(token.transferFrom(_msgSender(), address(this), _amount), \"Funding failed.\");\n      ticketId = ++currentId;\n      Ticket storage ticket = tickets[ticketId];\n      ticket.token = _token;\n      ticket.grantor = _msgSender();\n      ticket.beneficiary = _beneficiary;\n      ticket.cliff = _cliff;\n      ticket.vesting = _vesting;\n      ticket.amount = _amount;\n      ticket.balance = _amount;\n      ticket.createdAt = block.timestamp;\n      ticket.irrevocable = _irrevocable;\n      grantorTickets[_msgSender()].push(ticketId);\n      beneficiaryTickets[_beneficiary].push(ticketId);\n      emit TicketCreated(ticketId, _token, _amount, _irrevocable);\n    }\n\n    /// @notice claim available balance, only beneficiary can call\n    function claim(uint256 _id) notRevoked(_id) public returns (bool success) {\n      Ticket storage ticket = tickets[_id];\n      require(ticket.beneficiary == _msgSender(), \"Only beneficiary can claim.\");\n      require(ticket.balance > 0, \"Ticket has no balance.\");\n      ERC20 token = ERC20(ticket.token);\n      uint256 amount = available(_id);\n      require(amount > 0, \"Nothing to claim.\");\n      require(token.transfer(_msgSender(), amount), \"Claim failed\");\n      ticket.claimed = SafeMath.add(ticket.claimed, amount);\n      ticket.balance = SafeMath.sub(ticket.balance, amount);\n      ticket.lastClaimedAt = block.timestamp;\n      ticket.numClaims = SafeMath.add(ticket.numClaims, 1);\n      emit Claimed(_id, ticket.token, amount);\n      success = true;\n    }\n\n    /// @notice revoke ticket, balance returns to grantor, only grantor can call\n    function revoke(uint256 _id) notRevoked(_id) public returns (bool success) {\n      Ticket storage ticket = tickets[_id];\n      require(ticket.grantor == _msgSender(), \"Only grantor can revoke.\");\n      require(ticket.irrevocable == false, \"Ticket is irrevocable.\");\n      require(ticket.balance > 0, \"Ticket has no balance.\");\n      ERC20 token = ERC20(ticket.token);\n      require(token.transfer(_msgSender(), ticket.balance), \"Return balance failed\");\n      ticket.isRevoked = true;\n      ticket.balance = 0;\n      emit Revoked(_id, ticket.balance);\n      success = true;\n    }\n\n\n    /// @dev checks the ticket has cliffed or not\n    function hasCliffed(uint256 _id) canView(_id) public view returns (bool) {\n        Ticket memory ticket = tickets[_id];\n        if (ticket.cliff == 0) {\n            return true;\n        }\n        return block.timestamp > SafeMath.add(ticket.createdAt, SafeMath.mul(ticket.cliff, 86400)); // in seconds 24 x 60 x 60\n    }\n\n    /// @dev calculates the available balances excluding cliff and claims\n    function unlocked(uint256 _id) canView(_id) public view returns (uint256 amount) {\n        Ticket memory ticket = tickets[_id];\n        uint256 timeLapsed = SafeMath.sub(block.timestamp, ticket.createdAt); // in seconds\n        uint256 vestingInSeconds = SafeMath.mul(ticket.vesting, 86400); // in seconds: 24 x 60 x 60\n        amount = SafeMath.div(\n            SafeMath.mul(timeLapsed, ticket.amount),\n            vestingInSeconds\n        );\n    }\n\n    /// @notice check available claims, only grantor or beneficiary can call\n    function available(uint256 _id) canView(_id) notRevoked(_id) public view returns (uint256 amount) {\n        Ticket memory ticket = tickets[_id];\n        require(ticket.balance > 0, \"Ticket has no balance.\");\n        if (hasCliffed(_id)) {\n            amount = SafeMath.sub(unlocked(_id), ticket.claimed);\n        } else {\n            amount = 0;\n        }\n    }\n}\n"
    }
  }
}