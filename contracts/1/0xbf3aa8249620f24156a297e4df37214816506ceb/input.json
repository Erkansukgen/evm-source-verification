{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/decentstore.sol": {
      "content": "pragma solidity ^0.6.9;\ninterface tokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\n}\ncontract ERC20 {\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burn(address indexed from, uint256 value);\n\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0x0));\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n    }\n}\n\n\n\ncontract decentstore {\n   address creator;\n   address erush = 0x3cC5EB07E0e1227613F1DF58f38b549823d11cB9;\n   mapping (string => uint256 ) public balances;\n   uint256 public listprice = 0;\n   event NewProduct(address indexed from, uint256 value);\n   constructor() public { creator = msg.sender; }\n\n    struct pds {\n       address _lister;\n       string _pkey;\n       string _pimage;\n       uint256 _pprice;\n       string _pexplain;\n       bool _isdelisted;\n   }\n   \n   \n   mapping(uint256 => pds) plist;\n   uint256[] private indexList;\n\n\n    function listproduct(uint256 tokens, string memory _pkey, string memory _pimage, uint256 _pprice, string memory _pexplain )  public {\n      require(ERC20(erush).balanceOf(msg.sender) >= listprice);\n      require(tokens >= listprice);\n      \n      ERC20(erush).transferFrom(msg.sender, address(this), tokens);\n      plist[indexList.length]._lister = msg.sender;\n      plist[indexList.length]._pkey = _pkey;\n      plist[indexList.length]._pimage = _pimage;\n      plist[indexList.length]._pprice = _pprice;\n      plist[indexList.length]._pexplain = _pexplain;\n      plist[indexList.length]._isdelisted = false;\n      \n      indexList.push(indexList.length+1);\n      emit NewProduct(msg.sender, indexList.length+1);\n     \n   }\n   \n    function plister(uint256 _index) view public returns(address, string memory, string memory, uint256, string memory, bool) {\n       address _lister = plist[_index]._lister;\n       string memory _phead = plist[_index]._pkey;\n       string memory _pimage = plist[_index]._pimage;\n       uint256 _pprice = plist[_index]._pprice;\n       string memory _pexplain = plist[_index]._pexplain;\n       bool isdelisted = plist[_index]._isdelisted;\n        return ( _lister,_phead, _pimage, _pprice, _pexplain, isdelisted);\n       \n   }\n   \n   function pcount() view public returns (uint256) {\n       return indexList.length;\n   }\n   \n   function changeListingprice(uint256 newprice) public{\n        require(msg.sender == creator);   // Check if the sender is manager\n        listprice = newprice;\n    }\n    \n     function transferOwnership(address newOwner) public{\n        require(msg.sender == creator);   // Check if the sender is manager\n        if (newOwner != address(0)) {\n            creator = newOwner;\n        }\n    }\n    \n     function awithdrawal(uint tokens)  public {\n          require(msg.sender == creator); \n          ERC20(erush).transfer(creator, tokens);\n    }\n    \n    \n    function delist(uint256 productid) public{\n        require(plist[productid]._lister == msg.sender || plist[productid]._lister == creator);\n        plist[productid]._isdelisted = true;\n    }\n    \n    function changepprice(uint256 productid, uint256 newprice) public{\n        require(plist[productid]._lister == msg.sender);\n        plist[productid]._pprice = newprice;\n    }\n}\n"
    }
  }
}