{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Aramym.sol":{"content":"\npragma solidity 0.6.6;\n\n// ----------------------------------------------------------------------------\n\n// 'ARAMYMToken' token contract\n\n//\n\n// Deployed to : 0x04015434B039b43235A31E00639F7FEEE7d55848\n\n// Symbol : ARAM\n\n// Name : ARAMYM\n\n// Total supply: 880000\n\n// Decimals : 1\n\n//\n\n// Enjoy.\n\n//\n\n// (c) by Ahiwe Onyebuchi Valentine.\n\n// ----------------------------------------------------------------------------\n\n \n\n// ----------------------------------------------------------------------------\n\n// Safe maths\n\n// ----------------------------------------------------------------------------\n\ncontract SafeMath {\n\nfunction safeAdd(uint a, uint b) public pure returns (uint c) {\n\nc = a + b;\n\nrequire(c >= a);\n\n}\n\nfunction safeSub(uint a, uint b) public pure returns (uint c) {\n\nrequire(b <= a);\n\nc = a - b;\n\n}\n\nfunction safeMul(uint a, uint b) public pure returns (uint c) {\n\nc = a * b;\n\nrequire(a == 0 || c / a == b);\n\n}\n\nfunction safeDiv(uint a, uint b) public pure returns (uint c) {\n\nrequire(b > 0);\n\nc = a / b;\n\n}\n\n}\n\n \n\n// ----------------------------------------------------------------------------\n\n// ERC Token Standard #20 Interface\n\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n\n// ----------------------------------------------------------------------------\n\nabstract contract ERC20Interface {\n\nfunction totalSupply() virtual public view returns (uint);\n\nfunction balanceOf(address tokenOwner) virtual public view returns (uint balance);\n\nfunction allowance(address tokenOwner, address spender) virtual public view returns (uint remaining);\n\nfunction transfer(address to, uint tokens) virtual public returns (bool success);\n\nfunction approve(address spender, uint tokens) virtual public returns (bool success);\n\nfunction transferFrom(address from, address to, uint tokens) virtual public returns (bool success);\n\nevent Transfer(address indexed from, address indexed to, uint tokens);\n\nevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n\n}\n\n \n\n// ----------------------------------------------------------------------------\n\n// Contract function to receive approval and execute function in one call\n\n//\n\n// Borrowed from MiniMeToken\n\n// ----------------------------------------------------------------------------\n\nabstract contract ApproveAndCallFallBack {\n\nfunction receiveApproval(address from, uint256 tokens, address token, bytes memory data) virtual public;\n\n}\n\n \n\n// ----------------------------------------------------------------------------\n\n// Owned contract\n\n// ----------------------------------------------------------------------------\n\ncontract Owned {\n\naddress public owner;\n\naddress public newOwner;\n\nevent OwnershipTransferred(address indexed _from, address indexed _to);\n\nconstructor() public {\n\nowner = msg.sender;\n\n}\n\nmodifier onlyOwner {\n\nrequire(msg.sender == owner);\n\n_;\n\n}\n\nfunction transferOwnership(address _newOwner) public onlyOwner {\n\nnewOwner = _newOwner;\n\n}\n\nfunction acceptOwnership() public {\n\nrequire(msg.sender == newOwner);\n\nemit OwnershipTransferred(owner, newOwner);\n\nowner = newOwner;\n\nnewOwner = address(0);\n\n}\n\n}\n\n \n\n// ----------------------------------------------------------------------------\n\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\n\n// token transfers\n\n// ----------------------------------------------------------------------------\n\ncontract ARAMYM is ERC20Interface, Owned, SafeMath {\n\nstring public symbol;\n\nstring public name;\n\nuint8 public decimals;\n\nuint public _totalSupply;\n\nmapping(address => uint) balances;\n\nmapping(address => mapping(address => uint)) allowed;\n\n \n\n// ------------------------------------------------------------------------\n\n// Constructor\n\n// ------------------------------------------------------------------------\n\nconstructor() public {\n\nsymbol = \"ARAM\";\n\nname = \"ARAMYM\";\n\ndecimals = 1;\n\n_totalSupply = 880000;\n\nbalances[0x04015434B039b43235A31E00639F7FEEE7d55848] = _totalSupply;\n\nemit Transfer(address(0), 0x04015434B039b43235A31E00639F7FEEE7d55848, _totalSupply);\n\n}\n\n \n\n// ------------------------------------------------------------------------\n\n// Total supply\n\n// ------------------------------------------------------------------------\n\nfunction totalSupply() public override view returns (uint) {\n\nreturn _totalSupply - balances[address(0)];\n\n}\n\n \n\n// ------------------------------------------------------------------------\n\n// Get the token balance for account tokenOwner\n\n// ------------------------------------------------------------------------\n\nfunction balanceOf(address tokenOwner) public override view returns (uint balance) {\n\nreturn balances[tokenOwner];\n\n}\n\n \n\n// ------------------------------------------------------------------------\n\n// Transfer the balance from token owner's account to to account\n\n// - Owner's account must have sufficient balance to transfer\n\n// - 0 value transfers are allowed\n\n// ------------------------------------------------------------------------\n\nfunction transfer(address to, uint tokens) public override returns (bool success) {\n\nbalances[msg.sender] = safeSub(balances[msg.sender], tokens);\n\nbalances[to] = safeAdd(balances[to], tokens);\n\nemit Transfer(msg.sender, to, tokens);\n\nreturn true;\n\n}\n\n \n\n// ------------------------------------------------------------------------\n\n// Token owner can approve for spender to transferFrom(...) tokens\n\n// from the token owner's account\n\n//\n\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n\n// recommends that there are no checks for the approval double-spend attack\n\n// as this should be implemented in user interfaces\n\n// ------------------------------------------------------------------------\n\nfunction approve(address spender, uint tokens) public override returns (bool success) {\n\nallowed[msg.sender][spender] = tokens;\n\nemit Approval(msg.sender, spender, tokens);\n\nreturn true;\n\n}\n\n \n\n// ------------------------------------------------------------------------\n\n// Transfer tokens from the from account to the to account\n\n//\n\n// The calling account must already have sufficient tokens approve(...)-d\n\n// for spending from the from account and\n\n// - From account must have sufficient balance to transfer\n\n// - Spender must have sufficient allowance to transfer\n\n// - 0 value transfers are allowed\n\n// ------------------------------------------------------------------------\n\nfunction transferFrom(address from, address to, uint tokens) public override returns (bool success) {\n\nbalances[from] = safeSub(balances[from], tokens);\n\nallowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n\nbalances[to] = safeAdd(balances[to], tokens);\n\nemit Transfer(from, to, tokens);\n\nreturn true;\n\n}\n\n \n\n// ------------------------------------------------------------------------\n\n// Returns the amount of tokens approved by the owner that can be\n\n// transferred to the spender's account\n\n// ------------------------------------------------------------------------\n\nfunction allowance(address tokenOwner, address spender) public override view returns (uint remaining) {\n\nreturn allowed[tokenOwner][spender];\n\n}\n\n \n\n// ------------------------------------------------------------------------\n\n// Token owner can approve for spender to transferFrom(...) tokens\n\n// from the token owner's account. The spender contract function\n\n// receiveApproval(...) is then executed\n\n// ------------------------------------------------------------------------\n\nfunction approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n\nallowed[msg.sender][spender] = tokens;\n\nemit Approval(msg.sender, spender, tokens);\n\nApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n\nreturn true;\n\n}\n\n \n\n// ------------------------------------------------------------------------\n\n// Don't accept ETH\n\n// ------------------------------------------------------------------------\n\n// function () external payable {\n\n// revert();\n\n// }\n\n \n\n// ------------------------------------------------------------------------\n\n// Owner can transfer out any accidentally sent ERC20 tokens\n\n// ------------------------------------------------------------------------\n\nfunction transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n\nreturn ERC20Interface(tokenAddress).transfer(owner, tokens);\n\n}\n\n}\n"}}}