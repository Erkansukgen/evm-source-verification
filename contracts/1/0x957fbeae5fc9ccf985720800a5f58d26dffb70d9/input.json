{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/generator.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\n\n/* \n        BACKGROUNDS\n\n    01: \"rocknroll\"\n    02: \"fibonacci\"\n    03: \"clash\"\n    04: \"river\"\n    05: \"decide\"\n    06: \"everlast\"\n    07: \"vibe\"\n    08: \"motion\"\n    09: \"A village\"\n    10: \"jump in\"\n    11: \"walk\"\n    12: \"underwater\"\n    13: \"vision\"\n    14: \"dreamy\"\n    15: \"roundnround\"\n    16: \"joanna\"\n    17: \"dna1\"\n    18: \"yes and no\"\n    19: \"love\"\n    20: \"wild\"\n    21: \"seek\"\n    22: \"foundations\"\n    23: \"i will not\"\n    24: \"feel\"\n    25: \"flow\"\n    26: \"landing\"\n    27: \"japan\"\n    28: \"teamwork\"\n    29: \"Jelly\"\n    30: \"joa1\"\n    31: \"joa2\"\n    32: \"tiger roar\"\n    33: \"shadows\"\n    34: \"catch\"\n    35: \"passion\"\n    36: \"cylces\"\n    37: \"poetry\"\n    38: \"lucky\"\n    39: \"classical\"\n    40: \"trust\"\n    41: \"circles\"\n    42: \"live\"\n    43: \"around the world\"\n    44: \"now is it\"\n    45: \"wants\"\n    46: \"h20\"\n    47: \"rotations\"\n    48: \"lust\"\n    49: \"bloom\"\n    50: \"desires\"\n    51: \"eyes\"\n    52: \"dna2\"\n    53: \"triple\"\n    54: \"virgin\"\n    55: \"steal\"\n    56: \"spiral\"\n    57: \"monaco\"\n    58: \"growl33\"\n    59: \"bigmac\"\n    60: \"loyalty\"\n    61: \"jazz\"\n\n        BODIES\n\n    01: \"film\"\n    02: \"juice\"\n    03: \"power\"\n    04: \"trip\"\n    05: \"smooth\"\n    06: \"electric\"\n    07: \"scarecrow\"\n    08: \"boring\"\n    09: \"stinna\"\n    10: \"whawha\"\n    11: \"shimmer\"\n    12: \"space\"\n    13: \"gold\"\n    14: \"rock out\"\n    15: \"style\"\n    16: \"blueberry\"\n    17: \"bronze\"\n    18: \"chalk\"\n    19: \"positivity\"\n    20: \"orange juice\"\n    21: \"favorite\"\n    22: \"pompom\"\n    23: \"fruity\"\n    24: \"spacemen\"\n    25: \"maroon\"\n    26: \"black\"\n    27: \"poem\"\n    28: \"reckless\"\n    29: \"solve\"\n    30: \"victory\"\n    31: \"launch\"\n    32: \"greenboy\"\n    33: \"flowers\"\n    34: \"spacegirl\"\n    35: \"chance\"\n    36: \"raspberry\"\n    37: \"again\"\n    38: \"family\"\n    39: \"round about\"\n    40: \"goldandblue\"\n    41: \"give\"\n    42: \"take\"\n    43: \"want\"\n    44: \"taste\"\n    45: \"lebron\"\n    46: \"pinnochio\"\n    47: \"celtic\"\n    48: \"stay\"\n    49: \"yellow\"\n    50: \"impossible\"\n    51: \"goldy \"\n    52: \"mission\"\n    53: \"blackberry\"\n    54: \"gorgy\"\n    55: \"gardens\"\n    56: \"recent\"\n    57: \"loop\"\n    58: \"emerald\"\n    59: \"teach\"\n    60: \"home\"\n    61: \"new\"\n    62: \"rivers\"\n\n        EARS\n\n    01: \"ruby\"\n    02: \"on\"\n    03: \"turquoise\"\n    04: \"hotpink\"\n    05: \"blueboy\"\n    06: \"tight\"\n    07: \"squeeze\"\n    08: \"send\"\n    09: \"trips\"\n    10: \"lemonade\"\n    11: \"solve it\"\n    12: \"balls\"\n    13: \"floppy\"\n    14: \"relax\"\n    15: \"exits\"\n    16: \"lust\"\n    17: \"Love\"\n    18: \"weak\"\n    19: \"ask\"\n    20: \"jingle\"\n    21: \"vox\"\n    22: \"dizzy\"\n    23: \"black\"\n    24: \"sweep\"\n    25: \"commit\"\n    26: \"harvard\"\n    27: \"ucla\"\n    28: \"stanford\"\n    29: \"boston\"\n    30: \"please\"\n    31: \"tricks\"\n    32: \"treats\"\n    33: \"play\"\n    34: \"electric\"\n    35: \"soul\"\n    36: \"heart\"\n    37: \"intense\"\n    38: \"inject\"\n    39: \"eject\"\n    40: \"creamy\"\n    41: \"drive\"\n    42: \"fly\"\n    43: \"cruise\"\n    44: \"glide\"\n    45: \"work\"\n    46: \"wonder\"\n    47: \"please\"\n    48: \"visions\"\n    49: \"fantsies\"\n    50: \"molasses\"\n    \n        VISORS\n    \n    01: \"crush\"\n    02: \"rubies\"\n    03: \"emeralds\"\n    04: \"sapphire\"\n    05: \"wings\"\n    06: \"midnight\"\n    07: \"teeth\"\n    08: \"matisse\"\n    09: \"chrome\"\n    10: \"spaceboy\"\n    11: \"roll\"\n    12: \"Sirrichard\"\n    13: \"pinky\"\n    14: \"rush\"\n    15: \"onyx\"\n    16: \"when\"\n    17: \"treat\"\n    18: \"marble\"\n    19: \"reruns\"\n    20: \"tiptoe\"\n    21: \"meadow\"\n    22: \"modesty\"\n    23: \"smooth\"\n    24: \"more\"\n    25: \"fluff\"\n    26: \"lightning\"\n    27: \"prince\"\n    28: \"windows\"\n    29: \"girlz\"\n    30: \"dexter\"\n    31: \"blossom\"\n    32: \"straight\"\n    33: \"growling\"\n    34: \"chalkboards\"\n*/\n\n\ncontract Generator {\n\n    uint[] public backgroundWeights = [\n        0.0161e18,\n        0.0161e18,\n        0.008e18,\n        0.0161e18,\n        0.0241e18,\n        0.0161e18,\n        0.0241e18,\n        0.008e18,\n        0.0161e18,\n        0.008e18,\n        0.0241e18,\n        0.0241e18,\n        0.008e18,\n        0.0161e18,\n        0.0241e18,\n        0.0241e18,\n        0.0161e18,\n        0.0161e18,\n        0.008e18,\n        0.004e18,\n        0.0241e18,\n        0.0241e18,\n        0.0161e18,\n        0.008e18,\n        0.0161e18,\n        0.0161e18,\n        0.0241e18,\n        0.008e18,\n        0.0161e18,\n        0.0161e18,\n        0.0241e18,\n        0.008e18,\n        0.008e18,\n        0.0264e18,\n        0.0241e18,\n        0.008e18,\n        0.0161e18,\n        0.0241e18,\n        0.0161e18,\n        0.0161e18,\n        0.0161e18,\n        0.0161e18,\n        0.0161e18,\n        0.0161e18,\n        0.0241e18,\n        0.0241e18,\n        0.008e18,\n        0.0241e18,\n        0.0241e18,\n        0.0241e18,\n        0.0002e18,\n        0.0161e18,\n        0.0241e18,\n        0.004e18,\n        0.0161e18,\n        0.0241e18,\n        0.0161e18,\n        0.0161e18,\n        0.0161e18,\n        0.0002e18,\n        0.0161e18\n    ];\n    uint public backgroundTotalWeight;\n\n    uint[] public bodiesWeights = [\n        0.0074e18,\n        0.0222e18,\n        0.0074e18,\n        0.0222e18,\n        0.0074e18,\n        0.0222e18,\n        0.0074e18,\n        0.0074e18,\n        0.0222e18,\n        0.0222e18,\n        0.0222e18,\n        0.0074e18,\n        0.0222e18,\n        0.0074e18,\n        0.0148e18,\n        0.0222e18,\n        0.0222e18,\n        0.0222e18,\n        0.0148e18,\n        0.0222e18,\n        0.0222e18,\n        0.0148e18,\n        0.0148e18,\n        0.0222e18,\n        0.0222e18,\n        0.0037e18,\n        0.0037e18,\n        0.0222e18,\n        0.0222e18,\n        0.0222e18,\n        0.0222e18,\n        0.0222e18,\n        0.0037e18,\n        0.0222e18,\n        0.0037e18,\n        0.0074e18,\n        0.0222e18,\n        0.0222e18,\n        0.0222e18,\n        0.0148e18,\n        0.0222e18,\n        0.0148e18,\n        0.0222e18,\n        0.0222e18,\n        0.0037e18,\n        0.0222e18,\n        0.0148e18,\n        0.0148e18,\n        0.0074e18,\n        0.0037e18,\n        0.0074e18,\n        0.0222e18,\n        0.0148e18,\n        0.0222e18,\n        0.0074e18,\n        0.0222e18,\n        0.0074e18,\n        0.0222e18,\n        0.0148e18,\n        0.0074e18,\n        0.0222e18,\n        0.0222e18\n    ];\n    uint public bodiesTotalWeight;\n    \n    uint[] public earsWeights = [\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18,\n        0.02e18\n    ];\n    uint public earsTotalWeight;\n\n    uint[] public visorsWeights = [\n        0.0072e18,\n        0.0072e18,\n        0.0144e18,\n        0.0144e18,\n        0.0072e18,\n        0.0144e18,\n        0.0144e18,\n        0.0144e18,\n        0.0144e18,\n        0.0432e18,\n        0.0432e18,\n        0.0144e18,\n        0.0144e18,\n        0.0432e18,\n        0.0432e18,\n        0.0144e18,\n        0.0144e18,\n        0.0432e18,\n        0.0144e18,\n        0.0432e18,\n        0.0719e18,\n        0.0719e18,\n        0.0072e18,\n        0.0719e18,\n        0.0432e18,\n        0.0144e18,\n        0.0432e18,\n        0.0144e18,\n        0.0432e18,\n        0.0072e18,\n        0.0432e18,\n        0.0432e18,\n        0.0432e18,\n        0.0432e18\n    ];\n    uint public visorsTotalWeight;\n    \n    uint public constant LAST_NFT = 11111;\n    uint public constant ONE_OF_ONE_COUNT = 25;\n\n    uint[] public oneOfOne;\n    \n    uint public seedBlock;\n    uint public seed;\n    uint nonce;\n\n    constructor() {\n        \n        seedBlock = block.number + 10;\n        \n        uint backgroundBuf;\n        for(uint i = 0; i < backgroundWeights.length; i++) {\n            backgroundBuf+= backgroundWeights[i];\n        }\n\n        backgroundTotalWeight = backgroundBuf;\n\n        uint bodiesBuf;\n        for(uint i = 0; i < bodiesWeights.length; i++) {\n            bodiesBuf+= bodiesWeights[i];\n        }\n\n        bodiesTotalWeight = bodiesBuf;\n\n        uint earsBuf;\n        for(uint i = 0; i < earsWeights.length; i++) {\n            earsBuf+= earsWeights[i];\n        }\n\n        earsTotalWeight = earsBuf;\n\n        uint visorsBuf;\n        for(uint i = 0; i < visorsWeights.length; i++) {\n            visorsBuf+= visorsWeights[i];\n        }\n\n        visorsTotalWeight = visorsBuf;\n    }\n\n    function generateOneOfOne() public {\n        require(blockhash(seedBlock) != bytes32(0), \"too early or expired\");\n        require(oneOfOne.length == 0, \"already generated\");\n        \n        seed = uint(keccak256(abi.encodePacked(blockhash(seedBlock), tx.gasprice, block.timestamp)));\n\n        for(uint i = 0; i < ONE_OF_ONE_COUNT; i++) {\n            nonce++;\n            uint _random = uint(keccak256(abi.encode(seed, nonce))) % LAST_NFT + 1;\n            \n            //exclude lost NFT \n            if(_random == 6127) {\n                i--; \n                continue;\n            }\n            \n            oneOfOne.push(_random);\n        }\n\n        // check for duplicates\n        for(uint i = 0; i < ONE_OF_ONE_COUNT; i++) {\n            uint item = oneOfOne[i];\n            uint count = 0;\n            for(uint j = 0; j < ONE_OF_ONE_COUNT; j++) {\n                if(oneOfOne[j] == item) {\n                    count++;\n                }\n                if(count > 1) {\n                    //remove all array and try again\n                    oneOfOne = new uint[](0);\n                    return;\n                }\n            }\n        }\n    }\n\n    function getNFTData(uint _tokenId) public view returns(uint[] memory res) {\n        res = new uint[](5);\n        \n        for(uint i = 0; i < oneOfOne.length; i++) {\n            if(_tokenId == oneOfOne[i]) {\n                res[4] = i + 1;\n                return res;\n            }\n        }\n        //0 - background\n        //1 - body\n        //2 - ear\n        //3 - visor\n        //4 - oneOfOne\n        \n        res[0] = getRandomBackground(_tokenId) + 1;\n        res[1] = getRandomBody(_tokenId) + 1;\n        res[2] = getRandomEar(_tokenId) + 1;\n        res[3] = getRandomVisor(_tokenId) + 1;\n        res[4] = 0;\n    }\n    \n    function getRandomBackground(uint _tokenId) public view returns(uint) {\n        uint rnd = random(_tokenId, backgroundTotalWeight);\n\n        for(uint i = 0; i < backgroundWeights.length; i++) {\n          if(rnd < backgroundWeights[i]) {\n            return i;\n          }\n\n          rnd -= backgroundWeights[i];\n        }\n\n        return 0;\n    }\n\n    function getRandomBody(uint _tokenId) public view returns(uint) {\n        uint rnd = random(_tokenId, bodiesTotalWeight);\n\n        for(uint i = 0; i < bodiesWeights.length; i++) {\n          if(rnd < bodiesWeights[i]) {\n            return i;\n          }\n\n          rnd -= bodiesWeights[i];\n        }\n\n        return 0;\n    }\n\n    function getRandomEar(uint _tokenId) public view returns(uint) {\n        uint rnd = random(_tokenId, earsTotalWeight);\n\n        for(uint i = 0; i < earsWeights.length; i++) {\n          if(rnd < earsWeights[i]) {\n            return i;\n          }\n\n          rnd -= earsWeights[i];\n        }\n\n        return 0;\n    }\n\n    function getRandomVisor(uint _tokenId) public view returns(uint) {\n        uint rnd = random(_tokenId, visorsTotalWeight);\n\n        for(uint i = 0; i < visorsWeights.length; i++) {\n          if(rnd < visorsWeights[i]) {\n            return i;\n          }\n\n          rnd -= visorsWeights[i];\n        }\n\n        return 0;\n    }\n    \n    function random(uint _tokenId, uint _maximum) public view returns (uint) {\n        return uint(keccak256(abi.encode(seed, _tokenId))) % _maximum;\n    }\n\n}"}}}