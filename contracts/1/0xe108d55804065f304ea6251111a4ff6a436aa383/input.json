{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/AlphaV201.sol":{"content":"pragma solidity =0.7.4;\r\nimport \"./SafeMath.sol\";\r\nlibrary AddressAH2 {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[che\r\ncks-effects-interactions patt\r\nern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20AH2 {\r\n    using SafeMath for uint256;\r\n    using AddressAH2 for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\")\r\n;\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns(uint supply);\r\n\r\n    function balanceOf(address _owner) external view returns(uint balance);\r\n\r\n    function transfer(address _to, uint _value) external returns(bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint _value) external returns(bool success);\r\n\r\n    function approve(address _spender, uint _value) external returns(bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns(uint remaining);\r\n\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface UniswapV2 {\r\n\r\n   function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n\r\n\r\n\r\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns(uint256[\r\n] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\n\r\ninterface FlashLoanInterface {\r\n    function flashLoan(address _receiver, address _reserve, uint256 _amount, bytes calldata _params) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface WSTAKINGREWARDS {\r\n         function balanceOf(address _owner, uint256 collId) external view returns(uint balance);\r\n        function burn(uint256 tokenId, uint amount) external;\r\n}\r\n\r\n\r\ninterface iBank {\r\n\r\n        function getPositionDebtShareOf(uint positionId, address token) external view returns (uint);\r\n        function liquidate(\r\n        uint positionId,\r\n        address debtToken,\r\n        uint amountCall\r\n        ) external  ;\r\n}\r\n\r\ninterface BPOOL {\r\n        function balanceOf(address owner) external view returns (uint);\r\n        function exitPool(uint256 amountIn, uint256[] memory minAmountsOut) external;\r\n        function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\r\n        function allowance(address _owner, address _spender) external view returns(uint remaining);\r\n}\r\n\r\ncontract alphaV201 {\r\n\r\n\r\n    address payable owner;\r\n    address bankAddress = 0x5f5Cd91070960D13ee549C9CC47e7a4Cd00457bb;\r\n    address payable aaveRepaymentAddress = 0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3;\r\n\r\n    address uniAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    UniswapV2 usi = UniswapV2(uniAddress);\r\n    FlashLoanInterface fli = FlashLoanInterface(0x398eC7346DcD622eDc5ae82352F02bE94C62d119);\r\n    bytes theBytes;\r\n        bytes32 theBytes2;\r\n    address aaveEthAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    address currentCToken;\r\n    address currentLToken;\r\n    address core = 0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3;\r\n    address debt;\r\n    uint256 pathCode;\r\n    uint256 pos_id;\r\n    uint256 maxLiquidatable;\r\n    iBank bank = iBank(bankAddress);\r\n    address collateral;\r\n    address collToken;\r\n    uint256 collId;\r\n\r\n    address perpLpAddress = 0xF54025aF2dc86809Be1153c1F20D77ADB7e8ecF4;\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender == owner) _;\r\n    }\r\n\r\n\r\n\r\n    constructor() public payable {\r\n        owner = msg.sender;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    fallback() external payable {\r\n\r\n    }\r\n\r\n\r\n\r\n        function kill(uint256 pos_id, uint256 amt, address token) public  {\r\n                IERC20 debtToken = IERC20(token);\r\n                if (debtToken.allowance(address(this), bankAddress) <= debtToken.balanceOf(address(this))) {\r\n                        SafeERC20AH2.safeApprove(debtToken, bankAddress, 10000000000000000000000000);\r\n\r\n\r\n\r\n                }\r\n                require(debtToken.balanceOf(address(this)) > 0, 'l3');\r\n\r\n                bank.liquidate(pos_id, token, debtToken.balanceOf(address(this)));\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n    function convertTokenToEth(uint256 amount, address addr) public {\r\n        uint deadline = block.timestamp + 150;\r\n        IERC20 dai = IERC20(addr);\r\n        address[] memory path = new address[](2);\r\n        path[0] = addr;\r\n        path[1] = usi.WETH();\r\n        //if (exchange == 0){\r\n                if (dai.allowance(address(this), address(usi)) == 0){\r\n                        SafeERC20AH2.safeApprove(dai, address(usi), 10000000000000000000000000);\r\n                }\r\n                usi.swapExactTokensForETH(amount,0, path, address(this), deadline);\r\n\r\n                //}\r\n\r\n        }\r\n\r\n\r\n\r\n    function convertEthToToken(uint256 amountOutMin, uint256 inputAmount, address addr) public {\r\n        uint deadline = block.timestamp + 150;\r\n        address[] memory path = new address[](2);\r\n        path[0] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n        path[1] = addr;\r\n        usi.swapExactETHForTokens{value: inputAmount }(amountOutMin, path, address(this), deadline);\r\n    }\r\n\r\n\r\n    function _execute(address _debt, uint _maxLiquidatable, uint256 _pathCode, uint256 _pos_id,address _collateral, address _collToken, uint256 _collId) public {\r\n        pos_id = _pos_id;\r\n        collToken = _collToken;\r\n        collId = _collId;\r\n        collateral = _collateral;\r\n        debt = _debt;\r\n        pathCode = _pathCode;\r\n        uint256 on_chain_amt = bank.getPositionDebtShareOf(pos_id, _debt);\r\n        require(on_chain_amt > _maxLiquidatable, 'a');\r\n        maxLiquidatable = _maxLiquidatable;\r\n        if (_debt == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2){\r\n                 fli.flashLoan(address(this), 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, _maxLiquidatable, theBytes);\r\n        }\r\n        else {\r\n\r\n                fli.flashLoan(address(this), _debt, _maxLiquidatable, theBytes);\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes calldata _params) external {\r\n\r\n\r\n        IERC20 debtToken = IERC20(debt);\r\n        require(debtToken.balanceOf(address(this)) > 0, 'whoa');\r\n\r\n        kill(pos_id,debtToken.balanceOf(address(this)), debt);\r\n\r\n\r\n\r\n        if (pathCode == 2){\r\n                burnPerp(collToken, collId, perpLpAddress);\r\n                IERC20 tokenB = IERC20(collateral);\r\n                removePerp(debt, collateral);\r\n                convertTokenToEth(tokenB.balanceOf(address(this)), collateral);\r\n                convertEthToToken(0, address(this).balance, debt);\r\n        }\r\n\r\n\r\n\r\n\r\n        //repayments\r\n        if (_reserve == aaveEthAddress) {\r\n            require(address(this).balance > _amount + _fee, 'b');\r\n            uint256 repayAmount = (_amount + _fee);\r\n\r\n            aaveRepaymentAddress.call {\r\n                value: repayAmount\r\n            }(\"\");\r\n\r\n        } else {\r\n            IERC20 firstToken = IERC20(_reserve);\r\n            require(firstToken.balanceOf(address(this)) > _amount + _fee, 'c7');\r\n            SafeERC20AH2.safeTransfer(firstToken, aaveRepaymentAddress, (_amount + _fee));\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\nfunction removePerp(address tokenA, address tokenB) public {\r\n        uint256[] memory minAmts = new uint256[](2);\r\n        minAmts[0] = 0;\r\n        minAmts[1] = 0;\r\n        BPOOL perpLp = BPOOL(perpLpAddress);\r\n        if (perpLp.allowance(address(this), address(usi)) < perpLp.balanceOf(address(this))){\r\n                perpLp.exitPool(perpLp.balanceOf(address(this)), minAmts);\r\n        }\r\n        IERC20 aTok = IERC20(tokenA);\r\n        IERC20 bTok = IERC20(tokenB);\r\n        require(bTok.balanceOf(address(this)) > 0, 'j2');\r\n        require(aTok.balanceOf(address(this)) > 0, 'j2e');\r\n}\r\n\r\n   function burnPerp(address collToken, uint256 collId, address lpTokenAddr) public {\r\n        WSTAKINGREWARDS toBurn = WSTAKINGREWARDS(collToken);\r\n        require(toBurn.balanceOf(address(this), collId) > 0, 'f2');\r\n        toBurn.burn(collId, toBurn.balanceOf(address(this), collId));\r\n        BPOOL perpLp = BPOOL(lpTokenAddr);\r\n        require(perpLp.balanceOf(address(this)) > 0, 's');\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // send token 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE if you want to withdraw ether\r\n    function withdraw(address token) public onlyOwner returns(bool) {\r\n\r\n\r\n    //for ether withdrawal from smart contract\r\n        if (address(token) == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            uint256 amount = address(this).balance;\r\n\r\n            msg.sender.transfer(amount);\r\n\r\n        }\r\n        //for ether withdrawal from smart contract. Note on dividing by zero: likely will error.\r\n        else {\r\n            IERC20 tokenToken = IERC20(token);\r\n            uint256 newTokenBalance = tokenToken.balanceOf(address(this));\r\n            SafeERC20AH2.safeTransfer(tokenToken, msg.sender, newTokenBalance);\r\n\r\n\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    }"},"browser/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\n//pragma solidity >=0.6.6;\r\npragma solidity >=0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"}}}