{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":2000},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"burnHelperWithRevertProtection.sol":{"content":"\r\n// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\n\r\n//remixd -s E:\\BurnBot --remix-ide https://remix.ethereum.org\r\npragma solidity 0.6.12;\r\n\r\nabstract contract IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() virtual external view returns (string memory);\r\n    function symbol() virtual external view returns (string memory);\r\n    function decimals() virtual external view returns (uint8);\r\n    function totalSupply() virtual external view returns (uint);\r\n    function balanceOf(address owner) virtual external view returns (uint);\r\n    function allowance(address owner, address spender) virtual external view returns (uint);\r\n\r\n    function approve(address spender, uint value) virtual external returns (bool);\r\n    function transfer(address to, uint value) virtual external returns (bool);\r\n    function transferFrom(address from, address to, uint value) virtual external returns (bool);\r\n}\r\n\r\n\r\nabstract contract IBancorVortex\r\n{\r\n    function burn(IERC20[] calldata tokens) virtual external;\r\n}\r\n\r\nabstract contract IBancorNetwork {\r\n\r\n    // deprecated, backward compatibility\r\n    function convertFor(\r\n        IERC20[] memory _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn,\r\n        address _for\r\n    ) virtual external payable returns (uint256);\r\n}\r\n\r\ncontract BurnBot\r\n{\r\n    address public minter;\r\n    IERC20 bntToken = IERC20(0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C);\r\n\r\n    constructor() public\r\n    {\r\n        minter = msg.sender;\r\n\r\n        // Allow\r\n        uint256 allowance = bntToken.allowance(address(this), minter);\r\n        if (allowance == 0)\r\n        {\r\n            bntToken.approve(minter, 2**256 - 1);\r\n        }\r\n    }\r\n\r\n    // these functions ARE REQUIRED to receive ether\r\n    fallback() external payable {\r\n        // custom function code\r\n    }\r\n\r\n    receive() external payable {\r\n        // custom function code\r\n    }\r\n\r\n    function transferEth(uint256 amount) public returns (uint256)\r\n    {\r\n        require (msg.sender == minter, \"LM on BNT side is 2000% okay.\");\r\n        msg.sender.transfer(amount);\r\n        return amount;\r\n    }\r\n\r\n    function transferToken(uint256 amount) public returns (uint256)\r\n    {\r\n        require (msg.sender == minter, \"LM on BNT side is 3000% okay.\");\r\n\r\n        bntToken.transfer(msg.sender, amount);\r\n        return amount;\r\n    }\r\n\r\n    function burnVortex(uint64 targetBlockNumber, address bancorVortexAddress, IERC20[] calldata burnTokens, uint256 minBntAmountAfterBurn) public returns (uint256)\r\n    {\r\n        if (targetBlockNumber != 0)\r\n        {\r\n            require(block.number <= targetBlockNumber, \"LM on BNT side is 1000% okay.\");\r\n        }\r\n\r\n        // Get bancor vortex\r\n        IBancorVortex bancorVortex = IBancorVortex(bancorVortexAddress);\r\n\r\n        // Burn it\r\n        bancorVortex.burn(burnTokens);\r\n        \r\n        uint256 bntBalanceAfterBurn = bntToken.balanceOf(address(this));\r\n        if (minBntAmountAfterBurn != 0)\r\n        {\r\n            require (bntBalanceAfterBurn >= minBntAmountAfterBurn);\r\n        }\r\n\r\n        return bntBalanceAfterBurn;\r\n    }\r\n}"}}}