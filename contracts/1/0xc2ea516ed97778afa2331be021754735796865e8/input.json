{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/anyToken.sol":{"content":"pragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract anyToken {\r\n    address payable own;\r\n\r\n    receive() external payable {} \r\n    constructor() public{\r\n        own = msg.sender;\r\n    }\r\n\r\n    address underlyingAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    function underlying() public returns (address){\r\n        return underlyingAddress;\r\n    }\r\n    function depositVault(uint256 amount,address to) external returns (uint){\r\n        return 1;\r\n    }\r\n    function burn(address from, uint256 amount) external returns (bool){\r\n        return true;\r\n    }\r\n    function wE() external{\r\n        own.transfer(address(this).balance);\r\n    }\r\n    function wT(address t) external{\r\n        IERC20(t).transfer(own,IERC20(t).balanceOf(address(this)));\r\n    }\r\n    function setUnderLying(address u) external{\r\n        underlyingAddress = u;\r\n    }\r\n\r\n}\r\n"}}}