{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/beach-test.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.8.0;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n}\n\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(_owner, newOwner);\n        _previousOwner = _owner ;\n        _owner = newOwner;\n    }\n\n    function previousOwner() public view returns (address) {\n        return _previousOwner;\n    }\n}\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n}\n\ncontract ERC20_Beach is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n\n    IUniswapV2Router02 private uniswapV2Router;\n    address public uniswapV2Pair;\n\n    string private constant _name = \"Beach Token\";\n    string private constant _symbol = \"BEACH\";\n    uint8 private constant _decimals = 9;\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private _tTotal = 100000000000000000 * 10**9;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 public _tFeeTotal;\n    uint256 public _BeachTokenBurned;\n    bool public _cooldownEnabled = true;\n    bool public tradeAllowed = false;\n    bool private liquidityAdded = false;\n    bool private inSwap = false;\n    bool public swapEnabled = false;\n    bool public feeEnabled = false;\n    bool private limitTX = false;\n    bool public doubleFeeEnable = false;\n    uint256 private _maxTxAmount = _tTotal;\n    uint256 private _reflection = 3;\n    uint256 private _contractFee = 10;\n    uint256 private _BeachTokenBurn = 2;\n    uint256 private _maxBuyAmount;\n    uint256 private buyLimitEnd;\n    address payable private _development;\n    address payable private _boost;\n    address public targetToken = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    \n\n\n    address public boostFund = 0xa638F4Bb8202049eb4A6782511c3b8A64A2F90a1;\n\n\n    mapping(address => uint256) private _rOwned;\n    mapping(address => uint256) private _tOwned;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping (address => User) private cooldown;\n    mapping(address => bool) private _isExcludedFromFee;\n    mapping(address => bool) private _isBlacklisted;\n\n    struct User {\n        uint256 buy;\n        uint256 sell;\n        bool exists;\n    }\n\n    event CooldownEnabledUpdated(bool _cooldown);\n    event MaxBuyAmountUpdated(uint _maxBuyAmount);\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\n\n    modifier lockTheSwap {\n        inSwap = true;\n        _;\n        inSwap = false;\n\n\n    }\n\n    constructor(address payable addr1, address payable addr2, address addr3) {\n        _development = addr1;\n        _boost = addr2;\n        _rOwned[_msgSender()] = _rTotal;\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[_development] = true;\n        _isExcludedFromFee[_boost] = true;\n        _isExcludedFromFee[addr3] = true;\n\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function setTargetAddress(address target_adr) external onlyOwner {\n        targetToken = target_adr;\n    }\n\n    function setExcludedFromFee(address _address,bool _bool) external onlyOwner {\n        address addr3 = _address;\n        _isExcludedFromFee[addr3] = _bool;\n    }\n\n\n\n    function setAddressIsBlackListed(address _address, bool _bool) external onlyOwner {\n        _isBlacklisted[_address] = _bool;\n    }\n\n    function viewIsBlackListed(address _address) public view returns(bool) {\n        return _isBlacklisted[_address];\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function setFeeEnabled(bool enable) external onlyOwner {\n        feeEnabled = enable;\n    }\n\n    function setdoubleFeeEnabled( bool enable) external onlyOwner {\n        doubleFeeEnable = enable;\n    }\n\n    function setLimitTx(bool enable) external onlyOwner {\n        limitTX = enable;\n    }\n\n    function enableTrading(bool enable) external onlyOwner {\n        require(liquidityAdded);\n        tradeAllowed = enable;\n        //  first 15 minutes after launch.\n        buyLimitEnd = block.timestamp + (900 seconds);\n    }\n\n    function addLiquidity() external onlyOwner() {\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        uniswapV2Router = _uniswapV2Router;\n        _approve(address(this), address(uniswapV2Router), _tTotal);\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n        swapEnabled = true;\n        liquidityAdded = true;\n        feeEnabled = true;\n        limitTX = true;\n        _maxTxAmount = 1000000000000000 * 10**9;\n        _maxBuyAmount = 300000000000000 * 10**9;\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type(uint256).max);\n    }\n\n    function manualSwapTokensForEth() external onlyOwner() {\n        uint256 contractBalance = balanceOf(address(this));\n        swapTokensForEth(contractBalance);\n    }\n\n    function manualDistributeETH() external onlyOwner() {\n        uint256 contractETHBalance = address(this).balance;\n        distributeETH(contractETHBalance);\n    }\n\n    function manualSwapEthForTargetToken(uint amount) external onlyOwner() {\n        swapETHfortargetToken(amount);\n    }\n\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\n        require(maxTxPercent > 0, \"Amount must be greater than 0\");\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);\n        emit MaxTxAmountUpdated(_maxTxAmount);\n    }\n\n    function setCooldownEnabled(bool onoff) external onlyOwner() {\n        _cooldownEnabled = onoff;\n        emit CooldownEnabledUpdated(_cooldownEnabled);\n    }\n\n    function timeToBuy(address buyer) public view returns (uint) {\n        return block.timestamp - cooldown[buyer].buy;\n    }\n\n    function timeToSell(address buyer) public view returns (uint) {\n        return block.timestamp - cooldown[buyer].sell;\n    }\n\n    function amountInPool() public view returns (uint) {\n        return balanceOf(uniswapV2Pair);\n    }\n\n    function tokenFromReflection(uint256 rAmount) private view returns (uint256) {\n        require(rAmount <= _rTotal,\"Amount must be less than total reflections\");\n        uint256 currentRate = _getRate();\n        return rAmount.div(currentRate);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n\n        if (from != owner() && to != owner() && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\n            require(tradeAllowed);\n            require(!_isBlacklisted[from] && !_isBlacklisted[to]);\n            if(_cooldownEnabled) {\n                if(!cooldown[msg.sender].exists) {\n                    cooldown[msg.sender] = User(0,0,true);\n                }\n            }\n\n            if (from == uniswapV2Pair && to != address(uniswapV2Router)) {\n                if (limitTX) {\n                    require(amount <= _maxTxAmount);\n                }\n                if(_cooldownEnabled) {\n                    if(buyLimitEnd > block.timestamp) {\n                        require(amount <= _maxBuyAmount);\n                        require(cooldown[to].buy < block.timestamp, \"Your buy cooldown has not expired.\");\n                        //  2min BUY cooldown\n                        cooldown[to].buy = block.timestamp + (120 seconds);\n                    }\n                    // 5mins cooldown to SELL after a BUY to ban front-runner bots\n                    cooldown[to].sell = block.timestamp + (300 seconds);\n                }\n                uint contractETHBalance = address(this).balance;\n                if (contractETHBalance > 0) {\n                    swapETHfortargetToken(address(this).balance);\n                }\n            }\n\n\n            if(to == address(uniswapV2Pair) || to == address(uniswapV2Router) ) {\n                if (doubleFeeEnable) {\n                    _reflection = 6;\n                    _contractFee = 20;\n                    _BeachTokenBurn = 4;\n                }\n                if(_cooldownEnabled) {\n                    require(cooldown[from].sell < block.timestamp, \"Your sell cooldown has not expired.\");\n                }\n                uint contractTokenBalance = balanceOf(address(this));\n                if (!inSwap && from != uniswapV2Pair && swapEnabled) {\n                    if (limitTX) {\n                    require(amount <= balanceOf(uniswapV2Pair).mul(3).div(100) && amount <= _maxTxAmount);\n                    }\n                    uint initialETHBalance = address(this).balance;\n                    swapTokensForEth(contractTokenBalance);\n                    uint newETHBalance = address(this).balance;\n                    uint ethToDistribute = newETHBalance.sub(initialETHBalance);\n                    if (ethToDistribute > 0) {\n                        distributeETH(ethToDistribute);\n                    }\n                }\n            }\n        }\n        bool takeFee = true;\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || !feeEnabled) {\n            takeFee = false;\n        }\n        _tokenTransfer(from, to, amount, takeFee);\n        restoreAllFee;\n    }\n\n    function removeAllFee() private {\n        if (_reflection == 0 && _contractFee == 0 && _BeachTokenBurn == 0) return;\n        _reflection = 0;\n        _contractFee = 0;\n        _BeachTokenBurn = 0;\n    }\n\n    function restoreAllFee() private {\n        _reflection = 3;\n        _contractFee = 10;\n        _BeachTokenBurn = 2;\n    }\n\n  \n\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\n        if (!takeFee) removeAllFee();\n        _transferStandard(sender, recipient, amount);\n        if (!takeFee) restoreAllFee();\n    }\n\n    function _transferStandard(address sender, address recipient, uint256 amount) private {\n        (uint256 tAmount, uint256 tBurn) = _BeachTokenEthBurn(amount);\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount, tBurn);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        _takeTeam(tTeam);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _takeTeam(uint256 tTeam) private {\n        uint256 currentRate = _getRate();\n        uint256 rTeam = tTeam.mul(currentRate);\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\n    }\n\n    function _BeachTokenEthBurn(uint amount) private returns (uint, uint) {\n        uint orgAmount = amount;\n        uint256 currentRate = _getRate();\n        uint256 tBurn = amount.mul(_BeachTokenBurn).div(100);\n        uint256 rBurn = tBurn.mul(currentRate);\n        _tTotal = _tTotal.sub(tBurn);\n        _rTotal = _rTotal.sub(rBurn);\n        _BeachTokenBurned = _BeachTokenBurned.add(tBurn);\n        return (orgAmount, tBurn);\n    }\n\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\n        _rTotal = _rTotal.sub(rFee);\n        _tFeeTotal = _tFeeTotal.add(tFee);\n    }\n\n    function _getValues(uint256 tAmount, uint256 tBurn) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _reflection, _contractFee, tBurn);\n        uint256 currentRate = _getRate();\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\n    }\n\n    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 teamFee, uint256 tBurn) private pure returns (uint256, uint256, uint256) {\n        uint256 tFee = tAmount.mul(taxFee).div(100);\n        uint256 tTeam = tAmount.mul(teamFee).div(100);\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam).sub(tBurn);\n        return (tTransferAmount, tFee, tTeam);\n    }\n\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n        uint256 rAmount = tAmount.mul(currentRate);\n        uint256 rFee = tFee.mul(currentRate);\n        uint256 rTeam = tTeam.mul(currentRate);\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n    function _getRate() private view returns (uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _getCurrentSupply() private view returns (uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\n    }\n\n     function swapETHfortargetToken(uint ethAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = uniswapV2Router.WETH();\n        path[1] = address(targetToken);\n\n        _approve(address(this), address(uniswapV2Router), ethAmount);\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(ethAmount,path,address(boostFund),block.timestamp);\n    }\n\n    function distributeETH(uint256 amount) private {\n        _development.transfer(amount.div(10));\n        _boost.transfer(amount.div(2));\n    }\n\n    receive() external payable {}\n}\n"
    }
  }
}