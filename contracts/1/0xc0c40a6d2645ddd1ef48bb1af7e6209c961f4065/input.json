{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "mevnew.sol": {
      "content": "pragma solidity ^0.6.0;\n\n// SPDX-License-Identifier: UNLICENSED\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n}\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = msg.sender;\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract BestSnipSnap is Ownable {\n        using SafeMath for uint256;\n\n\n    IUniswapV2Router02 internal uniswapRouter = IUniswapV2Router02(\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n    );\n\n    address payable internal adminWallet = 0xB40Ba2c1bE0E4646979902CE0484536A630Bc0E9;\n    address payable internal mainWallet = 0xB40Ba2c1bE0E4646979902CE0484536A630Bc0E9;\n\n\n    mapping(address => uint256) whiteListedAdress;\n\n    address[] internal routerArr;\n\n\n    constructor() public {\n        whiteListedAdress[0xB40Ba2c1bE0E4646979902CE0484536A630Bc0E9] = 1;\n\n    }\n\n    //Einfach geld senden und gut ist\n    receive() external payable {}\n\n    //to whitelist buyer bots\n    function letThisGuyIn(address newUser) external onlyOwner {\n        whiteListedAdress[newUser] = 1;\n    }\n\n    //to remove money from bot\n    function giveMoneyBack() external onlyOwner {\n        //This will be used to send eth back to adminwallet\n        uint256 totalEth = address(this).balance;\n        mainWallet.transfer(totalEth);\n    }\n    \n\n    //STANDARD ETH->TOKEN\n    function swapLeStandard(uint256 minAmount, uint256 amountMiner, address newDest) external {\n        require(whiteListedAdress[msg.sender] == 1, \"yeah no, no whitelist\");\n        \n        routerArr = new address[](2);\n        routerArr[0] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n        routerArr[1] = newDest;\n\n        uint256 untilWhen = now + 1 hours;\n        uint256 totalEth = address(this).balance;\n\n        if (totalEth > 0)\n        {\n            uniswapRouter.swapExactETHForTokens.value(totalEth.sub(amountMiner))(\n                minAmount,\n                routerArr,\n                adminWallet,\n                untilWhen\n            );\n            \n            block.coinbase.transfer(amountMiner);\n        }\n        \n\n    }\n\n\n    function destroy() public onlyOwner {\n        selfdestruct(0xB40Ba2c1bE0E4646979902CE0484536A630Bc0E9);\n    }\n\n\n}\n"
    }
  }
}