{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/FRSlayer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.8.0;\n\ninterface IGST2 {\n    function mint(uint) external;\n    function transfer(address to, uint value) external returns (bool);\n    function balanceOf(address user) external returns (uint);\n}\n\ncontract HoneyPot {\n    address payable public owner;\n    IGST2 public GST2 = IGST2(0x0000000000b3F879cb30FE243b4Dfee438691c04);\n    \n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    constructor() payable {\n        owner = msg.sender;\n    }\n    \n    receive() external payable {}\n    \n    function withdrawETH(uint value) public onlyOwner {\n        owner.transfer(value);\n    }\n    \n    function withdrawAllETH() public {\n        withdrawETH(address(this).balance);\n    }\n    \n    function withdrawGST2(uint value) public onlyOwner {\n        GST2.transfer(owner, value);\n    }\n    \n    function withdrawAllGST2() public {\n        withdrawGST2(GST2.balanceOf(address(this)));\n    }\n    \n    function freeMoney(uint currentBlockNumber, uint mintedTokens) public {\n        GST2.mint(mintedTokens);\n        if(block.number == currentBlockNumber) msg.sender.transfer(address(this).balance);\n    }\n}"
    }
  }
}