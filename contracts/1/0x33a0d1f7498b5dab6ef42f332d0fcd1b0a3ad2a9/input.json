{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/joint.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n// Global Enums and Structs\n\n\n\nstruct StrategyParams {\n    uint256 performanceFee;\n    uint256 activation;\n    uint256 debtRatio;\n    uint256 minDebtPerHarvest;\n    uint256 maxDebtPerHarvest;\n    uint256 lastReport;\n    uint256 totalDebt;\n    uint256 totalGain;\n    uint256 totalLoss;\n}\n\n// Part: HegicJointAPI\n\ninterface HegicJointAPI {\n    function hegicCallOptionsPool() external view returns (address);\n\n    function hegicPutOptionsPool() external view returns (address);\n}\n\n// Part: IMasterchef\n\ninterface IMasterchef {\n    // Info of each pool.\n    struct PoolInfo {\n        address lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. Tokenss to distribute per block.\n        uint256 lastRewardBlock; // Last block number that Tokens distribution occurs.\n        uint256 acctokenPerShare; // Accumulated Tokens per share, times 1e12. See below.\n    }\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt.\n    }\n\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    function userInfo(uint256, address) external view returns (UserInfo memory);\n\n    function poolInfo(uint256) external view returns (PoolInfo memory);\n}\n\n// Part: IPriceCalculator\n\n/**\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\n// /**\n//  * @author 0mllwntrmt3\n//  * @title Hegic Protocol V8888 Interface\n//  * @notice The interface for the price calculator,\n//  *   options, pools and staking contracts.\n//  **/\n\n/**\n * @notice The interface fot the contract that calculates\n *   the options prices (the premiums) that are adjusted\n *   through balancing the `ImpliedVolRate` parameter.\n **/\ninterface IPriceCalculator {\n    /**\n     * @param period The option period\n     * @param amount The option size\n     * @param strike The option strike\n     **/\n    function calculateTotalPremium(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) external view returns (uint256 settlementFee, uint256 premium);\n}\n\n// Part: IPriceProvider\n\ninterface IPriceProvider {\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n\n// Part: IUniswapV2Factory\n\ninterface IUniswapV2Factory {\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256\n    );\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n\n// Part: IUniswapV2Pair\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n// Part: IUniswapV2Router01\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\n// Part: JointAPI\n\ninterface JointAPI {\n    function closePositionReturnFunds() external;\n\n    function openPosition() external;\n\n    function providerA() external view returns (address);\n\n    function providerB() external view returns (address);\n\n    function estimatedTotalAssetsInToken(address token)\n        external\n        view\n        returns (uint256);\n\n    function WETH() external view returns (address);\n\n    function router() external view returns (address);\n\n    function migrateProvider(address _newProvider) external view;\n\n    function shouldEndEpoch() external view returns (bool);\n\n    function dontInvestWant() external view returns (bool);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/Address\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/IERC165\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/IERC20\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/SafeMath\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Part: SafeMathUniswap\n\nlibrary SafeMathUniswap {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n}\n\n// Part: iearn-finance/yearn-vaults@0.4.3/BaseStrategy\n\n/**\n * @title Yearn Base Strategy\n * @author yearn.finance\n * @notice\n *  BaseStrategy implements all of the required functionality to interoperate\n *  closely with the Vault contract. This contract should be inherited and the\n *  abstract methods implemented to adapt the Strategy to the particular needs\n *  it has to create a return.\n *\n *  Of special interest is the relationship between `harvest()` and\n *  `vault.report()'. `harvest()` may be called simply because enough time has\n *  elapsed since the last report, and not because any funds need to be moved\n *  or positions adjusted. This is critical so that the Vault may maintain an\n *  accurate picture of the Strategy's performance. See  `vault.report()`,\n *  `harvest()`, and `harvestTrigger()` for further details.\n */\n\nabstract contract BaseStrategy {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    string public metadataURI;\n\n    // health checks\n    bool public doHealthCheck;\n    address public healthCheck;\n\n    /**\n     * @notice\n     *  Used to track which version of `StrategyAPI` this Strategy\n     *  implements.\n     * @dev The Strategy's version must match the Vault's `API_VERSION`.\n     * @return A string which holds the current API version of this contract.\n     */\n    function apiVersion() public pure returns (string memory) {\n        return \"0.4.3\";\n    }\n\n    /**\n     * @notice This Strategy's name.\n     * @dev\n     *  You can use this field to manage the \"version\" of this Strategy, e.g.\n     *  `StrategySomethingOrOtherV1`. However, \"API Version\" is managed by\n     *  `apiVersion()` function above.\n     * @return This Strategy's name.\n     */\n    function name() external view virtual returns (string memory);\n\n    /**\n     * @notice\n     *  The amount (priced in want) of the total assets managed by this strategy should not count\n     *  towards Yearn's TVL calculations.\n     * @dev\n     *  You can override this field to set it to a non-zero value if some of the assets of this\n     *  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.\n     *  Note that this value must be strictly less than or equal to the amount provided by\n     *  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.\n     *  Also note that this value is used to determine the total assets under management by this\n     *  strategy, for the purposes of computing the management fee in `Vault`\n     * @return\n     *  The amount of assets this strategy manages that should not be included in Yearn's Total Value\n     *  Locked (TVL) calculation across it's ecosystem.\n     */\n    function delegatedAssets() external view virtual returns (uint256) {\n        return 0;\n    }\n\n    VaultAPI public vault;\n    address public strategist;\n    address public rewards;\n    address public keeper;\n\n    IERC20 public want;\n\n    // So indexers can keep track of this\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\n\n    event UpdatedStrategist(address newStrategist);\n\n    event UpdatedKeeper(address newKeeper);\n\n    event UpdatedRewards(address rewards);\n\n    event UpdatedMinReportDelay(uint256 delay);\n\n    event UpdatedMaxReportDelay(uint256 delay);\n\n    event UpdatedProfitFactor(uint256 profitFactor);\n\n    event UpdatedDebtThreshold(uint256 debtThreshold);\n\n    event EmergencyExitEnabled();\n\n    event UpdatedMetadataURI(string metadataURI);\n\n    // The minimum number of seconds between harvest calls. See\n    // `setMinReportDelay()` for more details.\n    uint256 public minReportDelay;\n\n    // The maximum number of seconds between harvest calls. See\n    // `setMaxReportDelay()` for more details.\n    uint256 public maxReportDelay;\n\n    // The minimum multiple that `callCost` must be above the credit/profit to\n    // be \"justifiable\". See `setProfitFactor()` for more details.\n    uint256 public profitFactor;\n\n    // Use this to adjust the threshold at which running a debt causes a\n    // harvest trigger. See `setDebtThreshold()` for more details.\n    uint256 public debtThreshold;\n\n    // See note on `setEmergencyExit()`.\n    bool public emergencyExit;\n\n    // modifiers\n    modifier onlyAuthorized() {\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\n        _;\n    }\n\n    modifier onlyEmergencyAuthorized() {\n        require(\n            msg.sender == strategist || msg.sender == governance() || msg.sender == vault.guardian() || msg.sender == vault.management(),\n            \"!authorized\"\n        );\n        _;\n    }\n\n    modifier onlyStrategist() {\n        require(msg.sender == strategist, \"!strategist\");\n        _;\n    }\n\n    modifier onlyGovernance() {\n        require(msg.sender == governance(), \"!authorized\");\n        _;\n    }\n\n    modifier onlyKeepers() {\n        require(\n            msg.sender == keeper ||\n                msg.sender == strategist ||\n                msg.sender == governance() ||\n                msg.sender == vault.guardian() ||\n                msg.sender == vault.management(),\n            \"!authorized\"\n        );\n        _;\n    }\n\n    modifier onlyVaultManagers() {\n        require(msg.sender == vault.management() || msg.sender == governance(), \"!authorized\");\n        _;\n    }\n\n    constructor(address _vault) public {\n        _initialize(_vault, msg.sender, msg.sender, msg.sender);\n    }\n\n    /**\n     * @notice\n     *  Initializes the Strategy, this is called only once, when the\n     *  contract is deployed.\n     * @dev `_vault` should implement `VaultAPI`.\n     * @param _vault The address of the Vault responsible for this Strategy.\n     * @param _strategist The address to assign as `strategist`.\n     * The strategist is able to change the reward address\n     * @param _rewards  The address to use for pulling rewards.\n     * @param _keeper The adddress of the _keeper. _keeper\n     * can harvest and tend a strategy.\n     */\n    function _initialize(\n        address _vault,\n        address _strategist,\n        address _rewards,\n        address _keeper\n    ) internal {\n        require(address(want) == address(0), \"Strategy already initialized\");\n\n        vault = VaultAPI(_vault);\n        want = IERC20(vault.token());\n        want.safeApprove(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\n        strategist = _strategist;\n        rewards = _rewards;\n        keeper = _keeper;\n\n        // initialize variables\n        minReportDelay = 0;\n        maxReportDelay = 86400;\n        profitFactor = 100;\n        debtThreshold = 0;\n\n        vault.approve(rewards, uint256(-1)); // Allow rewards to be pulled\n    }\n\n    function setHealthCheck(address _healthCheck) external onlyVaultManagers {\n        healthCheck = _healthCheck;\n    }\n\n    function setDoHealthCheck(bool _doHealthCheck) external onlyVaultManagers {\n        doHealthCheck = _doHealthCheck;\n    }\n\n    /**\n     * @notice\n     *  Used to change `strategist`.\n     *\n     *  This may only be called by governance or the existing strategist.\n     * @param _strategist The new address to assign as `strategist`.\n     */\n    function setStrategist(address _strategist) external onlyAuthorized {\n        require(_strategist != address(0));\n        strategist = _strategist;\n        emit UpdatedStrategist(_strategist);\n    }\n\n    /**\n     * @notice\n     *  Used to change `keeper`.\n     *\n     *  `keeper` is the only address that may call `tend()` or `harvest()`,\n     *  other than `governance()` or `strategist`. However, unlike\n     *  `governance()` or `strategist`, `keeper` may *only* call `tend()`\n     *  and `harvest()`, and no other authorized functions, following the\n     *  principle of least privilege.\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _keeper The new address to assign as `keeper`.\n     */\n    function setKeeper(address _keeper) external onlyAuthorized {\n        require(_keeper != address(0));\n        keeper = _keeper;\n        emit UpdatedKeeper(_keeper);\n    }\n\n    /**\n     * @notice\n     *  Used to change `rewards`. EOA or smart contract which has the permission\n     *  to pull rewards from the vault.\n     *\n     *  This may only be called by the strategist.\n     * @param _rewards The address to use for pulling rewards.\n     */\n    function setRewards(address _rewards) external onlyStrategist {\n        require(_rewards != address(0));\n        vault.approve(rewards, 0);\n        rewards = _rewards;\n        vault.approve(rewards, uint256(-1));\n        emit UpdatedRewards(_rewards);\n    }\n\n    /**\n     * @notice\n     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\n     *  of blocks that should pass for `harvest()` to be called.\n     *\n     *  For external keepers (such as the Keep3r network), this is the minimum\n     *  time between jobs to wait. (see `harvestTrigger()`\n     *  for more details.)\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _delay The minimum number of seconds to wait between harvests.\n     */\n    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\n        minReportDelay = _delay;\n        emit UpdatedMinReportDelay(_delay);\n    }\n\n    /**\n     * @notice\n     *  Used to change `maxReportDelay`. `maxReportDelay` is the maximum number\n     *  of blocks that should pass for `harvest()` to be called.\n     *\n     *  For external keepers (such as the Keep3r network), this is the maximum\n     *  time between jobs to wait. (see `harvestTrigger()`\n     *  for more details.)\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _delay The maximum number of seconds to wait between harvests.\n     */\n    function setMaxReportDelay(uint256 _delay) external onlyAuthorized {\n        maxReportDelay = _delay;\n        emit UpdatedMaxReportDelay(_delay);\n    }\n\n    /**\n     * @notice\n     *  Used to change `profitFactor`. `profitFactor` is used to determine\n     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\n     *  for more details.)\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _profitFactor A ratio to multiply anticipated\n     * `harvest()` gas cost against.\n     */\n    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\n        profitFactor = _profitFactor;\n        emit UpdatedProfitFactor(_profitFactor);\n    }\n\n    /**\n     * @notice\n     *  Sets how far the Strategy can go into loss without a harvest and report\n     *  being required.\n     *\n     *  By default this is 0, meaning any losses would cause a harvest which\n     *  will subsequently report the loss to the Vault for tracking. (See\n     *  `harvestTrigger()` for more details.)\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _debtThreshold How big of a loss this Strategy may carry without\n     * being required to report to the Vault.\n     */\n    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\n        debtThreshold = _debtThreshold;\n        emit UpdatedDebtThreshold(_debtThreshold);\n    }\n\n    /**\n     * @notice\n     *  Used to change `metadataURI`. `metadataURI` is used to store the URI\n     * of the file describing the strategy.\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _metadataURI The URI that describe the strategy.\n     */\n    function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {\n        metadataURI = _metadataURI;\n        emit UpdatedMetadataURI(_metadataURI);\n    }\n\n    /**\n     * Resolve governance address from Vault contract, used to make assertions\n     * on protected functions in the Strategy.\n     */\n    function governance() internal view returns (address) {\n        return vault.governance();\n    }\n\n    /**\n     * @notice\n     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)\n     *  to `want` (using the native decimal characteristics of `want`).\n     * @dev\n     *  Care must be taken when working with decimals to assure that the conversion\n     *  is compatible. As an example:\n     *\n     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),\n     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)\n     *\n     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`\n     * @return The amount in `want` of `_amtInEth` converted to `want`\n     **/\n    function ethToWant(uint256 _amtInWei) public view virtual returns (uint256);\n\n    /**\n     * @notice\n     *  Provide an accurate estimate for the total amount of assets\n     *  (principle + return) that this Strategy is currently managing,\n     *  denominated in terms of `want` tokens.\n     *\n     *  This total should be \"realizable\" e.g. the total value that could\n     *  *actually* be obtained from this Strategy if it were to divest its\n     *  entire position based on current on-chain conditions.\n     * @dev\n     *  Care must be taken in using this function, since it relies on external\n     *  systems, which could be manipulated by the attacker to give an inflated\n     *  (or reduced) value produced by this function, based on current on-chain\n     *  conditions (e.g. this function is possible to influence through\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\n     *  mechanisms).\n     *\n     *  It is up to governance to use this function to correctly order this\n     *  Strategy relative to its peers in the withdrawal queue to minimize\n     *  losses for the Vault based on sudden withdrawals. This value should be\n     *  higher than the total debt of the Strategy and higher than its expected\n     *  value to be \"safe\".\n     * @return The estimated total assets in this Strategy.\n     */\n    function estimatedTotalAssets() public view virtual returns (uint256);\n\n    /*\n     * @notice\n     *  Provide an indication of whether this strategy is currently \"active\"\n     *  in that it is managing an active position, or will manage a position in\n     *  the future. This should correlate to `harvest()` activity, so that Harvest\n     *  events can be tracked externally by indexing agents.\n     * @return True if the strategy is actively managing a position.\n     */\n    function isActive() public view returns (bool) {\n        return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;\n    }\n\n    /**\n     * Perform any Strategy unwinding or other calls necessary to capture the\n     * \"free return\" this Strategy has generated since the last time its core\n     * position(s) were adjusted. Examples include unwrapping extra rewards.\n     * This call is only used during \"normal operation\" of a Strategy, and\n     * should be optimized to minimize losses as much as possible.\n     *\n     * This method returns any realized profits and/or realized losses\n     * incurred, and should return the total amounts of profits/losses/debt\n     * payments (in `want` tokens) for the Vault's accounting (e.g.\n     * `want.balanceOf(this) >= _debtPayment + _profit`).\n     *\n     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\n     * debt limit, otherwise its value will be how far past the debt limit\n     * the Strategy is. The Strategy's debt limit is configured in the Vault.\n     *\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\n     *       It is okay for it to be less than `_debtOutstanding`, as that\n     *       should only used as a guide for how much is left to pay back.\n     *       Payments should be made to minimize loss from slippage, debt,\n     *       withdrawal fees, etc.\n     *\n     * See `vault.debtOutstanding()`.\n     */\n    function prepareReturn(uint256 _debtOutstanding)\n        internal\n        virtual\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _debtPayment\n        );\n\n    /**\n     * Perform any adjustments to the core position(s) of this Strategy given\n     * what change the Vault made in the \"investable capital\" available to the\n     * Strategy. Note that all \"free capital\" in the Strategy after the report\n     * was made is available for reinvestment. Also note that this number\n     * could be 0, and you should handle that scenario accordingly.\n     *\n     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\n     */\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\n\n    /**\n     * Liquidate up to `_amountNeeded` of `want` of this strategy's positions,\n     * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.\n     * This function should return the amount of `want` tokens made available by the\n     * liquidation. If there is a difference between them, `_loss` indicates whether the\n     * difference is due to a realized loss, or if there is some other sitution at play\n     * (e.g. locked funds) where the amount made available is less than what is needed.\n     *\n     * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\n     */\n    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _liquidatedAmount, uint256 _loss);\n\n    /**\n     * Liquidate everything and returns the amount that got freed.\n     * This function is used during emergency exit instead of `prepareReturn()` to\n     * liquidate all of the Strategy's positions back to the Vault.\n     */\n\n    function liquidateAllPositions() internal virtual returns (uint256 _amountFreed);\n\n    /**\n     * @notice\n     *  Provide a signal to the keeper that `tend()` should be called. The\n     *  keeper will provide the estimated gas cost that they would pay to call\n     *  `tend()`, and this function should use that estimate to make a\n     *  determination if calling it is \"worth it\" for the keeper. This is not\n     *  the only consideration into issuing this trigger, for example if the\n     *  position would be negatively affected if `tend()` is not called\n     *  shortly, then this can return `true` even if the keeper might be\n     *  \"at a loss\" (keepers are always reimbursed by Yearn).\n     * @dev\n     *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).\n     *\n     *  This call and `harvestTrigger()` should never return `true` at the same\n     *  time.\n     * @param callCostInWei The keeper's estimated gas cost to call `tend()` (in wei).\n     * @return `true` if `tend()` should be called, `false` otherwise.\n     */\n    function tendTrigger(uint256 callCostInWei) public view virtual returns (bool) {\n        // We usually don't need tend, but if there are positions that need\n        // active maintainence, overriding this function is how you would\n        // signal for that.\n        // If your implementation uses the cost of the call in want, you can\n        // use uint256 callCost = ethToWant(callCostInWei);\n\n        return false;\n    }\n\n    /**\n     * @notice\n     *  Adjust the Strategy's position. The purpose of tending isn't to\n     *  realize gains, but to maximize yield by reinvesting any returns.\n     *\n     *  See comments on `adjustPosition()`.\n     *\n     *  This may only be called by governance, the strategist, or the keeper.\n     */\n    function tend() external onlyKeepers {\n        // Don't take profits with this call, but adjust for better gains\n        adjustPosition(vault.debtOutstanding());\n    }\n\n    /**\n     * @notice\n     *  Provide a signal to the keeper that `harvest()` should be called. The\n     *  keeper will provide the estimated gas cost that they would pay to call\n     *  `harvest()`, and this function should use that estimate to make a\n     *  determination if calling it is \"worth it\" for the keeper. This is not\n     *  the only consideration into issuing this trigger, for example if the\n     *  position would be negatively affected if `harvest()` is not called\n     *  shortly, then this can return `true` even if the keeper might be \"at a\n     *  loss\" (keepers are always reimbursed by Yearn).\n     * @dev\n     *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).\n     *\n     *  This call and `tendTrigger` should never return `true` at the\n     *  same time.\n     *\n     *  See `min/maxReportDelay`, `profitFactor`, `debtThreshold` to adjust the\n     *  strategist-controlled parameters that will influence whether this call\n     *  returns `true` or not. These parameters will be used in conjunction\n     *  with the parameters reported to the Vault (see `params`) to determine\n     *  if calling `harvest()` is merited.\n     *\n     *  It is expected that an external system will check `harvestTrigger()`.\n     *  This could be a script run off a desktop or cloud bot (e.g.\n     *  https://github.com/iearn-finance/yearn-vaults/blob/main/scripts/keep.py),\n     *  or via an integration with the Keep3r network (e.g.\n     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\n     * @param callCostInWei The keeper's estimated gas cost to call `harvest()` (in wei).\n     * @return `true` if `harvest()` should be called, `false` otherwise.\n     */\n    function harvestTrigger(uint256 callCostInWei) public view virtual returns (bool) {\n        uint256 callCost = ethToWant(callCostInWei);\n        StrategyParams memory params = vault.strategies(address(this));\n\n        // Should not trigger if Strategy is not activated\n        if (params.activation == 0) return false;\n\n        // Should not trigger if we haven't waited long enough since previous harvest\n        if (block.timestamp.sub(params.lastReport) < minReportDelay) return false;\n\n        // Should trigger if hasn't been called in a while\n        if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;\n\n        // If some amount is owed, pay it back\n        // NOTE: Since debt is based on deposits, it makes sense to guard against large\n        //       changes to the value from triggering a harvest directly through user\n        //       behavior. This should ensure reasonable resistance to manipulation\n        //       from user-initiated withdrawals as the outstanding debt fluctuates.\n        uint256 outstanding = vault.debtOutstanding();\n        if (outstanding > debtThreshold) return true;\n\n        // Check for profits and losses\n        uint256 total = estimatedTotalAssets();\n        // Trigger if we have a loss to report\n        if (total.add(debtThreshold) < params.totalDebt) return true;\n\n        uint256 profit = 0;\n        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\n\n        // Otherwise, only trigger if it \"makes sense\" economically (gas cost\n        // is <N% of value moved)\n        uint256 credit = vault.creditAvailable();\n        return (profitFactor.mul(callCost) < credit.add(profit));\n    }\n\n    /**\n     * @notice\n     *  Harvests the Strategy, recognizing any profits or losses and adjusting\n     *  the Strategy's position.\n     *\n     *  In the rare case the Strategy is in emergency shutdown, this will exit\n     *  the Strategy's position.\n     *\n     *  This may only be called by governance, the strategist, or the keeper.\n     * @dev\n     *  When `harvest()` is called, the Strategy reports to the Vault (via\n     *  `vault.report()`), so in some cases `harvest()` must be called in order\n     *  to take in profits, to borrow newly available funds from the Vault, or\n     *  otherwise adjust its position. In other cases `harvest()` must be\n     *  called to report to the Vault on the Strategy's position, especially if\n     *  any losses have occurred.\n     */\n    function harvest() external onlyKeepers {\n        uint256 profit = 0;\n        uint256 loss = 0;\n        uint256 debtOutstanding = vault.debtOutstanding();\n        uint256 debtPayment = 0;\n        if (emergencyExit) {\n            // Free up as much capital as possible\n            uint256 amountFreed = liquidateAllPositions();\n            if (amountFreed < debtOutstanding) {\n                loss = debtOutstanding.sub(amountFreed);\n            } else if (amountFreed > debtOutstanding) {\n                profit = amountFreed.sub(debtOutstanding);\n            }\n            debtPayment = debtOutstanding.sub(loss);\n        } else {\n            // Free up returns for Vault to pull\n            (profit, loss, debtPayment) = prepareReturn(debtOutstanding);\n        }\n\n        // Allow Vault to take up to the \"harvested\" balance of this contract,\n        // which is the amount it has earned since the last time it reported to\n        // the Vault.\n        uint256 totalDebt = vault.strategies(address(this)).totalDebt;\n        debtOutstanding = vault.report(profit, loss, debtPayment);\n\n        // Check if free returns are left, and re-invest them\n        adjustPosition(debtOutstanding);\n\n        // call healthCheck contract\n        if (doHealthCheck && healthCheck != address(0)) {\n            require(HealthCheck(healthCheck).check(profit, loss, debtPayment, debtOutstanding, totalDebt), \"!healthcheck\");\n        } else {\n            doHealthCheck = true;\n        }\n\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\n    }\n\n    /**\n     * @notice\n     *  Withdraws `_amountNeeded` to `vault`.\n     *\n     *  This may only be called by the Vault.\n     * @param _amountNeeded How much `want` to withdraw.\n     * @return _loss Any realized losses\n     */\n    function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {\n        require(msg.sender == address(vault), \"!vault\");\n        // Liquidate as much as possible to `want`, up to `_amountNeeded`\n        uint256 amountFreed;\n        (amountFreed, _loss) = liquidatePosition(_amountNeeded);\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\n        want.safeTransfer(msg.sender, amountFreed);\n        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\n    }\n\n    /**\n     * Do anything necessary to prepare this Strategy for migration, such as\n     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\n     * value.\n     */\n    function prepareMigration(address _newStrategy) internal virtual;\n\n    /**\n     * @notice\n     *  Transfers all `want` from this Strategy to `_newStrategy`.\n     *\n     *  This may only be called by the Vault.\n     * @dev\n     * The new Strategy's Vault must be the same as this Strategy's Vault.\n     *  The migration process should be carefully performed to make sure all\n     * the assets are migrated to the new address, which should have never\n     * interacted with the vault before.\n     * @param _newStrategy The Strategy to migrate to.\n     */\n    function migrate(address _newStrategy) external {\n        require(msg.sender == address(vault));\n        require(BaseStrategy(_newStrategy).vault() == vault);\n        prepareMigration(_newStrategy);\n        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice\n     *  Activates emergency exit. Once activated, the Strategy will exit its\n     *  position upon the next harvest, depositing all funds into the Vault as\n     *  quickly as is reasonable given on-chain conditions.\n     *\n     *  This may only be called by governance or the strategist.\n     * @dev\n     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\n     */\n    function setEmergencyExit() external onlyEmergencyAuthorized {\n        emergencyExit = true;\n        vault.revokeStrategy();\n\n        emit EmergencyExitEnabled();\n    }\n\n    /**\n     * Override this to add all tokens/tokenized positions this contract\n     * manages on a *persistent* basis (e.g. not just for swapping back to\n     * want ephemerally).\n     *\n     * NOTE: Do *not* include `want`, already included in `sweep` below.\n     *\n     * Example:\n     * ```\n     *    function protectedTokens() internal override view returns (address[] memory) {\n     *      address[] memory protected = new address[](3);\n     *      protected[0] = tokenA;\n     *      protected[1] = tokenB;\n     *      protected[2] = tokenC;\n     *      return protected;\n     *    }\n     * ```\n     */\n    function protectedTokens() internal view virtual returns (address[] memory);\n\n    /**\n     * @notice\n     *  Removes tokens from this Strategy that are not the type of tokens\n     *  managed by this Strategy. This may be used in case of accidentally\n     *  sending the wrong kind of token to this Strategy.\n     *\n     *  Tokens will be sent to `governance()`.\n     *\n     *  This will fail if an attempt is made to sweep `want`, or any tokens\n     *  that are protected by this Strategy.\n     *\n     *  This may only be called by governance.\n     * @dev\n     *  Implement `protectedTokens()` to specify any additional tokens that\n     *  should be protected from sweeping in addition to `want`.\n     * @param _token The token to transfer out of this vault.\n     */\n    function sweep(address _token) external onlyGovernance {\n        require(_token != address(want), \"!want\");\n        require(_token != address(vault), \"!shares\");\n\n        address[] memory _protectedTokens = protectedTokens();\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \"!protected\");\n\n        IERC20(_token).safeTransfer(governance(), IERC20(_token).balanceOf(address(this)));\n    }\n}\n\n// Part: iearn-finance/yearn-vaults@0.4.3/BaseStrategyInitializable\n\nabstract contract BaseStrategyInitializable is BaseStrategy {\n    bool public isOriginal = true;\n    event Cloned(address indexed clone);\n\n    constructor(address _vault) public BaseStrategy(_vault) {}\n\n    function initialize(\n        address _vault,\n        address _strategist,\n        address _rewards,\n        address _keeper\n    ) external virtual {\n        _initialize(_vault, _strategist, _rewards, _keeper);\n    }\n\n    function clone(address _vault) external returns (address) {\n        require(isOriginal, \"!clone\");\n        return this.clone(_vault, msg.sender, msg.sender, msg.sender);\n    }\n\n    function clone(\n        address _vault,\n        address _strategist,\n        address _rewards,\n        address _keeper\n    ) external returns (address newStrategy) {\n        // Copied from https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol\n        bytes20 addressBytes = bytes20(address(this));\n\n        assembly {\n            // EIP-1167 bytecode\n            let clone_code := mload(0x40)\n            mstore(clone_code, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(clone_code, 0x14), addressBytes)\n            mstore(add(clone_code, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            newStrategy := create(0, clone_code, 0x37)\n        }\n\n        BaseStrategyInitializable(newStrategy).initialize(_vault, _strategist, _rewards, _keeper);\n\n        emit Cloned(newStrategy);\n    }\n}\n\n// Part: iearn-finance/yearn-vaults@0.4.3/HealthCheck\n\ninterface HealthCheck {\n    function check(\n        uint256 profit,\n        uint256 loss,\n        uint256 debtPayment,\n        uint256 debtOutstanding,\n        uint256 totalDebt\n    ) external view returns (bool);\n}\n\n// Part: IERC20Extended\n\ninterface IERC20Extended is IERC20 {\n    function decimals() external view returns (uint8);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n}\n\n// Part: ISushiMasterchef\n\ninterface ISushiMasterchef is IMasterchef {\n    function pendingSushi(uint256 _pid, address _user)\n        external\n        view\n        returns (uint256);\n}\n\n// Part: IUniswapV2Router02\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/IERC721\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transfered from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/SafeERC20\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// Part: UniswapV2Library\n\nlibrary UniswapV2Library {\n    using SafeMathUniswap for uint256;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex\"ff\",\n                        factory,\n                        keccak256(abi.encodePacked(token0, token1)),\n                        hex\"e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\" // init code hash\n                    )\n                )\n            )\n        );\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) =\n            IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (uint256 amountB) {\n        require(amountA > 0, \"UniswapV2Library: INSUFFICIENT_AMOUNT\");\n        require(\n            reserveA > 0 && reserveB > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        uint256 amountInWithFee = amountIn.mul(997);\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {\n        require(amountOut > 0, \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\");\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(\n        address factory,\n        uint256 amountIn,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i; i < path.length - 1; i++) {\n            (uint256 reserveIn, uint256 reserveOut) =\n                getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(\n        address factory,\n        uint256 amountOut,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; i--) {\n            (uint256 reserveIn, uint256 reserveOut) =\n                getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n\n// Part: iearn-finance/yearn-vaults@0.4.3/VaultAPI\n\ninterface VaultAPI is IERC20 {\n    function name() external view returns (string calldata);\n\n    function symbol() external view returns (string calldata);\n\n    function decimals() external view returns (uint256);\n\n    function apiVersion() external pure returns (string memory);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 expiry,\n        bytes calldata signature\n    ) external returns (bool);\n\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\n    function deposit() external returns (uint256);\n\n    function deposit(uint256 amount) external returns (uint256);\n\n    function deposit(uint256 amount, address recipient) external returns (uint256);\n\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\n    function withdraw() external returns (uint256);\n\n    function withdraw(uint256 maxShares) external returns (uint256);\n\n    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\n\n    function token() external view returns (address);\n\n    function strategies(address _strategy) external view returns (StrategyParams memory);\n\n    function pricePerShare() external view returns (uint256);\n\n    function totalAssets() external view returns (uint256);\n\n    function depositLimit() external view returns (uint256);\n\n    function maxAvailableShares() external view returns (uint256);\n\n    /**\n     * View how much the Vault would increase this Strategy's borrow limit,\n     * based on its present performance (since its last report). Can be used to\n     * determine expectedReturn in your Strategy.\n     */\n    function creditAvailable() external view returns (uint256);\n\n    /**\n     * View how much the Vault would like to pull back from the Strategy,\n     * based on its present performance (since its last report). Can be used to\n     * determine expectedReturn in your Strategy.\n     */\n    function debtOutstanding() external view returns (uint256);\n\n    /**\n     * View how much the Vault expect this Strategy to return at the current\n     * block, based on its present performance (since its last report). Can be\n     * used to determine expectedReturn in your Strategy.\n     */\n    function expectedReturn() external view returns (uint256);\n\n    /**\n     * This is the main contact point where the Strategy interacts with the\n     * Vault. It is critical that this call is handled as intended by the\n     * Strategy. Therefore, this function will be called by BaseStrategy to\n     * make sure the integration is correct.\n     */\n    function report(\n        uint256 _gain,\n        uint256 _loss,\n        uint256 _debtPayment\n    ) external returns (uint256);\n\n    /**\n     * This function should only be used in the scenario where the Strategy is\n     * being retired but no migration of the positions are possible, or in the\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\n     * mode in order for it to exit as quickly as possible. The latter scenario\n     * could be for any reason that is considered \"critical\" that the Strategy\n     * exits its position as fast as possible, such as a sudden change in\n     * market conditions leading to losses, or an imminent failure in an\n     * external dependency.\n     */\n    function revokeStrategy() external;\n\n    /**\n     * View the governance address of the Vault to assert privileged functions\n     * can only be called by governance. The Strategy serves the Vault, so it\n     * is subject to governance defined by the Vault.\n     */\n    function governance() external view returns (address);\n\n    /**\n     * View the management address of the Vault to assert privileged functions\n     * can only be called by management. The Strategy serves the Vault, so it\n     * is subject to management defined by the Vault.\n     */\n    function management() external view returns (address);\n\n    /**\n     * View the guardian address of the Vault to assert privileged functions\n     * can only be called by guardian. The Strategy serves the Vault, so it\n     * is subject to guardian defined by the Vault.\n     */\n    function guardian() external view returns (address);\n}\n\n// Part: IHegicPool\n\n/**\n * @notice The interface for the contract that manages pools and the options parameters,\n *   accumulates the funds from the liquidity providers and makes the withdrawals for them,\n *   sells the options contracts to the options buyers and collateralizes them,\n *   exercises the ITM (in-the-money) options with the unrealized P&L and settles them,\n *   unlocks the expired options and distributes the premiums among the liquidity providers.\n **/\ninterface IHegicPool is IERC721, IPriceCalculator {\n    enum OptionState {Invalid, Active, Exercised, Expired}\n    enum TrancheState {Invalid, Open, Closed}\n\n    /**\n     * @param state The state of the option: Invalid, Active, Exercised, Expired\n     * @param strike The option strike\n     * @param amount The option size\n     * @param lockedAmount The option collateral size locked\n     * @param expired The option expiration timestamp\n     * @param hedgePremium The share of the premium paid for hedging from the losses\n     * @param unhedgePremium The share of the premium paid to the hedged liquidity provider\n     **/\n    struct Option {\n        OptionState state;\n        uint256 strike;\n        uint256 amount;\n        uint256 lockedAmount;\n        uint256 expired;\n        uint256 hedgePremium;\n        uint256 unhedgePremium;\n    }\n\n    /**\n     * @param state The state of the liquidity tranche: Invalid, Open, Closed\n     * @param share The liquidity provider's share in the pool\n     * @param amount The size of liquidity provided\n     * @param creationTimestamp The liquidity deposit timestamp\n     * @param hedged The liquidity tranche type: hedged or unhedged (classic)\n     **/\n    struct Tranche {\n        TrancheState state;\n        uint256 share;\n        uint256 amount;\n        uint256 creationTimestamp;\n        bool hedged;\n    }\n\n    /**\n     * @param id The ERC721 token ID linked to the option\n     * @param settlementFee The part of the premium that\n     *   is distributed among the HEGIC staking participants\n     * @param premium The part of the premium that\n     *   is distributed among the liquidity providers\n     **/\n    event Acquired(uint256 indexed id, uint256 settlementFee, uint256 premium);\n\n    /**\n     * @param id The ERC721 token ID linked to the option\n     * @param profit The profits of the option if exercised\n     **/\n    event Exercised(uint256 indexed id, uint256 profit);\n\n    /**\n     * @param id The ERC721 token ID linked to the option\n     **/\n    event Expired(uint256 indexed id);\n\n    /**\n     * @param account The liquidity provider's address\n     * @param trancheID The liquidity tranche ID\n     **/\n    event Withdrawn(\n        address indexed account,\n        uint256 indexed trancheID,\n        uint256 amount\n    );\n\n    function priceProvider() external view returns (address);\n\n    /**\n     * @param id The ERC721 token ID linked to the option\n     **/\n    function unlock(uint256 id) external;\n\n    /**\n     * @param id The ERC721 token ID linked to the option\n     **/\n    function exercise(uint256 id) external;\n\n    function setLockupPeriod(uint256, uint256) external;\n\n    /**\n     * @param value The hedging pool address\n     **/\n    function setHedgePool(address value) external;\n\n    /**\n     * @param trancheID The liquidity tranche ID\n     * @return amount The liquidity to be received with\n     *   the positive or negative P&L earned or lost during\n     *   the period of holding the liquidity tranche considered\n     **/\n    function withdraw(uint256 trancheID) external returns (uint256 amount);\n\n    function pricer() external view returns (IPriceCalculator);\n\n    /**\n     * @return amount The unhedged liquidity size\n     *   (unprotected from the losses on selling the options)\n     **/\n    function unhedgedBalance() external view returns (uint256 amount);\n\n    /**\n     * @return amount The hedged liquidity size\n     * (protected from the losses on selling the options)\n     **/\n    function hedgedBalance() external view returns (uint256 amount);\n\n    /**\n     * @param account The liquidity provider's address\n     * @param amount The size of the liquidity tranche\n     * @param hedged The type of the liquidity tranche\n     * @param minShare The minimum share in the pool of the user\n     **/\n    function provideFrom(\n        address account,\n        uint256 amount,\n        bool hedged,\n        uint256 minShare\n    ) external returns (uint256 share);\n\n    /**\n     * @param holder The option buyer address\n     * @param period The option period\n     * @param amount The option size\n     * @param strike The option strike\n     **/\n    function sellOption(\n        address holder,\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) external returns (uint256 id);\n\n    /**\n     * @param trancheID The liquidity tranche ID\n     * @return amount The amount to be received after the withdrawal\n     **/\n    function withdrawWithoutHedge(uint256 trancheID)\n        external\n        returns (uint256 amount);\n\n    /**\n     * @return amount The total liquidity provided into the pool\n     **/\n    function totalBalance() external view returns (uint256 amount);\n\n    /**\n     * @return amount The total liquidity locked in the pool\n     **/\n    function lockedAmount() external view returns (uint256 amount);\n\n    function token() external view returns (IERC20);\n\n    /**\n     * @return state The state of the option: Invalid, Active, Exercised, Expired\n     * @return strike The option strike\n     * @return amount The option size\n     * @return lockedAmount The option collateral size locked\n     * @return expired The option expiration timestamp\n     * @return hedgePremium The share of the premium paid for hedging from the losses\n     * @return unhedgePremium The share of the premium paid to the hedged liquidity provider\n     **/\n    function options(uint256 id)\n        external\n        view\n        returns (\n            OptionState state,\n            uint256 strike,\n            uint256 amount,\n            uint256 lockedAmount,\n            uint256 expired,\n            uint256 hedgePremium,\n            uint256 unhedgePremium\n        );\n\n    /**\n     * @return state The state of the liquidity tranche: Invalid, Open, Closed\n     * @return share The liquidity provider's share in the pool\n     * @return amount The size of liquidity provided\n     * @return creationTimestamp The liquidity deposit timestamp\n     * @return hedged The liquidity tranche type: hedged or unhedged (classic)\n     **/\n    function tranches(uint256 id)\n        external\n        view\n        returns (\n            TrancheState state,\n            uint256 share,\n            uint256 amount,\n            uint256 creationTimestamp,\n            bool hedged\n        );\n\n    function profitOf(uint256 id) external view returns (uint256);\n}\n\n// Part: ProviderStrategy\n\ncontract ProviderStrategy is BaseStrategyInitializable {\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint256;\n\n    address public joint;\n\n    bool public forceLiquidate;\n\n    constructor(address _vault) public BaseStrategyInitializable(_vault) {}\n\n    function name() external view override returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    \"Strategy_ProviderOf\",\n                    IERC20Extended(address(want)).symbol(),\n                    \"To\",\n                    IERC20Extended(address(joint)).name()\n                )\n            );\n    }\n\n    function estimatedTotalAssets() public view override returns (uint256) {\n        return\n            want.balanceOf(address(this)).add(\n                JointAPI(joint).estimatedTotalAssetsInToken(address(want))\n            );\n    }\n\n    function totalDebt() public view returns (uint256) {\n        return vault.strategies(address(this)).totalDebt;\n    }\n\n    function prepareReturn(uint256 _debtOutstanding)\n        internal\n        override\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _debtPayment\n        )\n    {\n        // NOTE: this strategy is operated following epochs. These begin during adjustPosition and end during prepareReturn\n        // The Provider will always ask the joint to close the position before harvesting\n        JointAPI(joint).closePositionReturnFunds();\n\n        // After closePosition, the provider will always have funds in its own balance (not in joint)\n        uint256 _totalDebt = totalDebt();\n        uint256 totalAssets = balanceOfWant();\n\n        if (_totalDebt > totalAssets) {\n            // we have losses\n            _loss = _totalDebt.sub(totalAssets);\n        } else {\n            // we have profit\n            _profit = totalAssets.sub(_totalDebt);\n        }\n\n        uint256 amountAvailable = totalAssets;\n        uint256 amountRequired = _debtOutstanding.add(_profit);\n\n        if (amountRequired > amountAvailable) {\n            if (_debtOutstanding > amountAvailable) {\n                // available funds are lower than the repayment that we need to do\n                _profit = 0;\n                _debtPayment = amountAvailable;\n                // we dont report losses here as the strategy might not be able to return in this harvest\n                // but it will still be there for the next harvest\n            } else {\n                // NOTE: amountRequired is always equal or greater than _debtOutstanding\n                // important to use amountAvailable just in case amountRequired is > amountAvailable\n                _debtPayment = _debtOutstanding;\n                _profit = amountAvailable.sub(_debtPayment);\n            }\n        } else {\n            _debtPayment = _debtOutstanding;\n            // profit remains unchanged unless there is not enough to pay it\n            if (amountRequired.sub(_debtPayment) < _profit) {\n                _profit = amountRequired.sub(_debtPayment);\n            }\n        }\n    }\n\n    function harvestTrigger(uint256 callCost)\n        public\n        view\n        override\n        returns (bool)\n    {\n        // Delegating decision to joint\n        return JointAPI(joint).shouldEndEpoch();\n    }\n\n    function dontInvestWant() public view returns (bool) {\n        // Delegating decision to joint\n        return JointAPI(joint).dontInvestWant();\n    }\n\n    function adjustPosition(uint256 _debtOutstanding) internal override {\n        if (emergencyExit || dontInvestWant()) {\n            return;\n        }\n\n        // Using a push approach (instead of pull)\n        uint256 wantBalance = balanceOfWant();\n        if (wantBalance > 0) {\n            want.transfer(joint, wantBalance);\n        }\n        JointAPI(joint).openPosition();\n    }\n\n    function liquidatePosition(uint256 _amountNeeded)\n        internal\n        override\n        returns (uint256 _liquidatedAmount, uint256 _loss)\n    {\n        uint256 availableAssets = want.balanceOf(address(this));\n        if (_amountNeeded > availableAssets) {\n            _liquidatedAmount = availableAssets;\n            _loss = _amountNeeded.sub(availableAssets);\n        } else {\n            _liquidatedAmount = _amountNeeded;\n        }\n    }\n\n    function prepareMigration(address _newStrategy) internal override {\n        JointAPI(joint).migrateProvider(_newStrategy);\n    }\n\n    function protectedTokens()\n        internal\n        view\n        override\n        returns (address[] memory)\n    {}\n\n    function balanceOfWant() public view returns (uint256) {\n        return IERC20(want).balanceOf(address(this));\n    }\n\n    function setJoint(address _joint) external onlyGovernance {\n        require(\n            JointAPI(_joint).providerA() == address(this) ||\n                JointAPI(_joint).providerB() == address(this)\n        ); // dev: providers uncorrectly set\n        require(healthCheck != address(0)); // dev: healthCheck\n        joint = _joint;\n    }\n\n    function setForceLiquidate(bool _forceLiquidate)\n        external\n        onlyEmergencyAuthorized\n    {\n        forceLiquidate = _forceLiquidate;\n    }\n\n    function liquidateAllPositions()\n        internal\n        virtual\n        override\n        returns (uint256 _amountFreed)\n    {\n        uint256 expectedBalance = estimatedTotalAssets();\n        JointAPI(joint).closePositionReturnFunds();\n        _amountFreed = balanceOfWant();\n        // NOTE: we accept a 1% difference before reverting\n        require(\n            forceLiquidate ||\n                expectedBalance.mul(9_900).div(10_000) < _amountFreed,\n            \"!liquidation\"\n        );\n    }\n\n    function ethToWant(uint256 _amtInWei)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        // NOTE: using joint params to avoid changing fixed values for other chains\n        // gas price is not important as this will only be used in triggers (queried from off-chain)\n        return tokenToWant(JointAPI(joint).WETH(), _amtInWei);\n    }\n\n    function tokenToWant(address token, uint256 amount)\n        internal\n        view\n        returns (uint256)\n    {\n        if (amount == 0 || address(want) == token) {\n            return amount;\n        }\n\n        uint256[] memory amounts =\n            IUniswapV2Router02(JointAPI(joint).router()).getAmountsOut(\n                amount,\n                getTokenOutPath(token, address(want))\n            );\n\n        return amounts[amounts.length - 1];\n    }\n\n    function getTokenOutPath(address _token_in, address _token_out)\n        internal\n        view\n        returns (address[] memory _path)\n    {\n        bool is_weth =\n            _token_in == address(JointAPI(joint).WETH()) ||\n                _token_out == address(JointAPI(joint).WETH());\n        _path = new address[](is_weth ? 2 : 3);\n        _path[0] = _token_in;\n\n        if (is_weth) {\n            _path[1] = _token_out;\n        } else {\n            _path[1] = address(JointAPI(joint).WETH());\n            _path[2] = _token_out;\n        }\n    }\n}\n\n// Part: Joint\n\nabstract contract Joint {\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint256;\n\n    uint256 internal constant RATIO_PRECISION = 1e4;\n\n    ProviderStrategy public providerA;\n    ProviderStrategy public providerB;\n\n    address public tokenA;\n    address public tokenB;\n\n    address public WETH;\n    address public reward;\n    address public router;\n\n    IUniswapV2Pair public pair;\n\n    uint256 public investedA;\n    uint256 public investedB;\n\n    bool public dontInvestWant;\n    bool public autoProtectionDisabled;\n\n    uint256 public minAmountToSell;\n    uint256 public maxPercentageLoss;\n\n    modifier onlyGovernance {\n        checkGovernance();\n        _;\n    }\n\n    modifier onlyVaultManagers {\n        checkVaultManagers();\n        _;\n    }\n\n    modifier onlyProviders {\n        require(\n            msg.sender == address(providerA) || msg.sender == address(providerB)\n        );\n        _;\n    }\n\n    function checkGovernance() internal {\n        require(isGovernance());\n    }\n\n    function checkVaultManagers() internal {\n        require(isGovernance() || isVaultManager());\n    }\n\n    function checkProvider() internal {\n        require(isProvider());\n    }\n\n    function isGovernance() internal returns (bool) {\n        return\n            msg.sender == providerA.vault().governance() ||\n            msg.sender == providerB.vault().governance();\n    }\n\n    function isVaultManager() internal returns (bool) {\n        return\n            msg.sender == providerA.vault().management() ||\n            msg.sender == providerB.vault().management();\n    }\n\n    function isProvider() internal returns (bool) {\n        return\n            msg.sender == address(providerA) ||\n            msg.sender == address(providerB);\n    }\n\n    constructor(\n        address _providerA,\n        address _providerB,\n        address _router,\n        address _weth,\n        address _reward\n    ) public {\n        _initialize(_providerA, _providerB, _router, _weth, _reward);\n    }\n\n    function _initialize(\n        address _providerA,\n        address _providerB,\n        address _router,\n        address _weth,\n        address _reward\n    ) internal virtual {\n        require(address(providerA) == address(0), \"Joint already initialized\");\n        providerA = ProviderStrategy(_providerA);\n        providerB = ProviderStrategy(_providerB);\n        router = _router;\n        WETH = _weth;\n        reward = _reward;\n\n        // NOTE: we let some loss to avoid getting locked in the position if something goes slightly wrong\n        maxPercentageLoss = 500; // 0.1%\n\n        tokenA = address(providerA.want());\n        tokenB = address(providerB.want());\n        require(tokenA != tokenB, \"!same-want\");\n        pair = IUniswapV2Pair(getPair());\n\n        IERC20(tokenA).approve(address(_router), type(uint256).max);\n        IERC20(tokenB).approve(address(_router), type(uint256).max);\n        IERC20(_reward).approve(address(_router), type(uint256).max);\n        IERC20(address(pair)).approve(address(_router), type(uint256).max);\n    }\n\n    function name() external view virtual returns (string memory);\n\n    function shouldEndEpoch() public view virtual returns (bool);\n\n    function _autoProtect() internal view virtual returns (bool);\n\n    function setDontInvestWant(bool _dontInvestWant)\n        external\n        onlyVaultManagers\n    {\n        dontInvestWant = _dontInvestWant;\n    }\n\n    function setMinAmountToSell(uint256 _minAmountToSell)\n        external\n        onlyVaultManagers\n    {\n        minAmountToSell = _minAmountToSell;\n    }\n\n    function setAutoProtectionDisabled(bool _autoProtectionDisabled)\n        external\n        onlyVaultManagers\n    {\n        autoProtectionDisabled = _autoProtectionDisabled;\n    }\n\n    function setMaxPercentageLoss(uint256 _maxPercentageLoss)\n        external\n        onlyVaultManagers\n    {\n        require(_maxPercentageLoss <= RATIO_PRECISION);\n        maxPercentageLoss = _maxPercentageLoss;\n    }\n\n    function closePositionReturnFunds() external onlyProviders {\n        // Check if it needs to stop starting new epochs after finishing this one. _autoProtect is implemented in children\n        if (_autoProtect() && !autoProtectionDisabled) {\n            dontInvestWant = true;\n        }\n\n        // Check that we have a position to close\n        if (investedA == 0 || investedB == 0) {\n            return;\n        }\n\n        // 1. CLOSE LIQUIDITY POSITION\n        // Closing the position will:\n        // - Remove liquidity from DEX\n        // - Claim pending rewards\n        // - Close Hedge and receive payoff\n        // and returns current balance of tokenA and tokenB\n        (uint256 currentBalanceA, uint256 currentBalanceB) = _closePosition();\n\n        // 2. SELL REWARDS FOR WANT\n        (address rewardSwappedTo, uint256 rewardSwapOutAmount) =\n            swapReward(balanceOfReward());\n        if (rewardSwappedTo == tokenA) {\n            currentBalanceA = currentBalanceA.add(rewardSwapOutAmount);\n        } else if (rewardSwappedTo == tokenB) {\n            currentBalanceB = currentBalanceB.add(rewardSwapOutAmount);\n        }\n\n        // 3. REBALANCE PORTFOLIO\n        // Calculate rebalance operation\n        // It will return which of the tokens (A or B) we need to sell and how much of it to leave the position with the initial proportions\n        (address sellToken, uint256 sellAmount) =\n            calculateSellToBalance(\n                currentBalanceA,\n                currentBalanceB,\n                investedA,\n                investedB\n            );\n\n        if (sellToken != address(0) && sellAmount > minAmountToSell) {\n            uint256 buyAmount =\n                sellCapital(\n                    sellToken,\n                    sellToken == tokenA ? tokenB : tokenA,\n                    sellAmount\n                );\n        }\n\n        // reset invested balances\n        investedA = investedB = 0;\n\n        _returnLooseToProviders();\n        // Check that we have returned with no losses\n        //\n        require(\n            IERC20(tokenA).balanceOf(address(providerA)) >=\n                providerA\n                    .totalDebt()\n                    .mul(RATIO_PRECISION.sub(maxPercentageLoss))\n                    .div(RATIO_PRECISION),\n            \"!wrong-balanceA\"\n        );\n        require(\n            IERC20(tokenB).balanceOf(address(providerB)) >=\n                providerB\n                    .totalDebt()\n                    .mul(RATIO_PRECISION.sub(maxPercentageLoss))\n                    .div(RATIO_PRECISION),\n            \"!wrong-balanceB\"\n        );\n    }\n\n    function openPosition() external onlyProviders {\n        // No capital, nothing to do\n        if (balanceOfA() == 0 || balanceOfB() == 0) {\n            return;\n        }\n\n        require(\n            balanceOfStake() == 0 &&\n                balanceOfPair() == 0 &&\n                investedA == 0 &&\n                investedB == 0\n        ); // don't create LP if we are already invested\n\n        (uint256 amountA, uint256 amountB, ) = createLP();\n        (uint256 costHedgeA, uint256 costHedgeB) = hedgeLP();\n\n        investedA = amountA.add(costHedgeA);\n        investedB = amountB.add(costHedgeB);\n\n        depositLP();\n\n        if (balanceOfStake() != 0 || balanceOfPair() != 0) {\n            _returnLooseToProviders();\n        }\n    }\n\n    function getHedgeProfit() public view virtual returns (uint256, uint256);\n\n    function estimatedTotalAssetsAfterBalance()\n        public\n        view\n        returns (uint256 _aBalance, uint256 _bBalance)\n    {\n        uint256 rewardsPending = pendingReward().add(balanceOfReward());\n\n        (_aBalance, _bBalance) = balanceOfTokensInLP();\n\n        _aBalance = _aBalance.add(balanceOfA());\n        _bBalance = _bBalance.add(balanceOfB());\n\n        (uint256 callProfit, uint256 putProfit) = getHedgeProfit();\n        _aBalance = _aBalance.add(callProfit);\n        _bBalance = _bBalance.add(putProfit);\n\n        if (reward == tokenA) {\n            _aBalance = _aBalance.add(rewardsPending);\n        } else if (reward == tokenB) {\n            _bBalance = _bBalance.add(rewardsPending);\n        } else if (rewardsPending != 0) {\n            address swapTo = findSwapTo(reward);\n            uint256[] memory outAmounts =\n                IUniswapV2Router02(router).getAmountsOut(\n                    rewardsPending,\n                    getTokenOutPath(reward, swapTo)\n                );\n            if (swapTo == tokenA) {\n                _aBalance = _aBalance.add(outAmounts[outAmounts.length - 1]);\n            } else if (swapTo == tokenB) {\n                _bBalance = _bBalance.add(outAmounts[outAmounts.length - 1]);\n            }\n        }\n\n        (address sellToken, uint256 sellAmount) =\n            calculateSellToBalance(_aBalance, _bBalance, investedA, investedB);\n\n        (uint256 reserveA, uint256 reserveB) = getReserves();\n\n        if (sellToken == tokenA) {\n            uint256 buyAmount =\n                UniswapV2Library.getAmountOut(sellAmount, reserveA, reserveB);\n            _aBalance = _aBalance.sub(sellAmount);\n            _bBalance = _bBalance.add(buyAmount);\n        } else if (sellToken == tokenB) {\n            uint256 buyAmount =\n                UniswapV2Library.getAmountOut(sellAmount, reserveB, reserveA);\n            _bBalance = _bBalance.sub(sellAmount);\n            _aBalance = _aBalance.add(buyAmount);\n        }\n    }\n\n    function estimatedTotalAssetsInToken(address token)\n        public\n        view\n        returns (uint256 _balance)\n    {\n        if (token == tokenA) {\n            (_balance, ) = estimatedTotalAssetsAfterBalance();\n        } else if (token == tokenB) {\n            (, _balance) = estimatedTotalAssetsAfterBalance();\n        }\n    }\n\n    function getHedgeBudget(address token)\n        public\n        view\n        virtual\n        returns (uint256);\n\n    function hedgeLP() internal virtual returns (uint256, uint256);\n\n    function closeHedge() internal virtual;\n\n    function calculateSellToBalance(\n        uint256 currentA,\n        uint256 currentB,\n        uint256 startingA,\n        uint256 startingB\n    ) internal view returns (address _sellToken, uint256 _sellAmount) {\n        if (startingA == 0 || startingB == 0) return (address(0), 0);\n\n        (uint256 ratioA, uint256 ratioB) =\n            getRatios(currentA, currentB, startingA, startingB);\n\n        if (ratioA == ratioB) return (address(0), 0);\n\n        (uint256 reserveA, uint256 reserveB) = getReserves();\n\n        if (ratioA > ratioB) {\n            _sellToken = tokenA;\n            _sellAmount = _calculateSellToBalance(\n                currentA,\n                currentB,\n                startingA,\n                startingB,\n                reserveA,\n                reserveB,\n                10**uint256(IERC20Extended(tokenA).decimals())\n            );\n        } else {\n            _sellToken = tokenB;\n            _sellAmount = _calculateSellToBalance(\n                currentB,\n                currentA,\n                startingB,\n                startingA,\n                reserveB,\n                reserveA,\n                10**uint256(IERC20Extended(tokenB).decimals())\n            );\n        }\n    }\n\n    function _calculateSellToBalance(\n        uint256 current0,\n        uint256 current1,\n        uint256 starting0,\n        uint256 starting1,\n        uint256 reserve0,\n        uint256 reserve1,\n        uint256 precision\n    ) internal pure returns (uint256 _sellAmount) {\n        uint256 numerator =\n            current0.sub(starting0.mul(current1).div(starting1)).mul(precision);\n        uint256 denominator;\n        uint256 exchangeRate;\n\n        // First time to approximate\n        exchangeRate = UniswapV2Library.getAmountOut(\n            precision,\n            reserve0,\n            reserve1\n        );\n        denominator = precision + starting0.mul(exchangeRate).div(starting1);\n        _sellAmount = numerator.div(denominator);\n        // Shortcut to avoid Uniswap amountIn == 0 revert\n        if (_sellAmount == 0) {\n            return 0;\n        }\n\n        // Second time to account for price impact\n        exchangeRate = UniswapV2Library\n            .getAmountOut(_sellAmount, reserve0, reserve1)\n            .mul(precision)\n            .div(_sellAmount);\n        denominator = precision + starting0.mul(exchangeRate).div(starting1);\n        _sellAmount = numerator.div(denominator);\n    }\n\n    function getRatios(\n        uint256 currentA,\n        uint256 currentB,\n        uint256 startingA,\n        uint256 startingB\n    ) internal pure returns (uint256 _a, uint256 _b) {\n        _a = currentA.mul(RATIO_PRECISION).div(startingA);\n        _b = currentB.mul(RATIO_PRECISION).div(startingB);\n    }\n\n    function getReserves()\n        public\n        view\n        returns (uint256 reserveA, uint256 reserveB)\n    {\n        if (tokenA == pair.token0()) {\n            (reserveA, reserveB, ) = pair.getReserves();\n        } else {\n            (reserveB, reserveA, ) = pair.getReserves();\n        }\n    }\n\n    function createLP()\n        internal\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        // **WARNING**: This call is sandwichable, care should be taken\n        //              to always execute with a private relay\n        return\n            IUniswapV2Router02(router).addLiquidity(\n                tokenA,\n                tokenB,\n                balanceOfA()\n                    .mul(RATIO_PRECISION.sub(getHedgeBudget(tokenA)))\n                    .div(RATIO_PRECISION),\n                balanceOfB()\n                    .mul(RATIO_PRECISION.sub(getHedgeBudget(tokenB)))\n                    .div(RATIO_PRECISION),\n                0,\n                0,\n                address(this),\n                now\n            );\n    }\n\n    function findSwapTo(address token) internal view returns (address) {\n        if (tokenA == token) {\n            return tokenB;\n        } else if (tokenB == token) {\n            return tokenA;\n        } else if (reward == token) {\n            if (tokenA == WETH || tokenB == WETH) {\n                return WETH;\n            }\n            return tokenA;\n        } else {\n            revert(\"!swapTo\");\n        }\n    }\n\n    function getTokenOutPath(address _token_in, address _token_out)\n        internal\n        view\n        returns (address[] memory _path)\n    {\n        bool is_weth =\n            _token_in == address(WETH) || _token_out == address(WETH);\n        bool is_internal =\n            (_token_in == tokenA && _token_out == tokenB) ||\n                (_token_in == tokenB && _token_out == tokenA);\n        _path = new address[](is_weth || is_internal ? 2 : 3);\n        _path[0] = _token_in;\n        if (is_weth || is_internal) {\n            _path[1] = _token_out;\n        } else {\n            _path[1] = address(WETH);\n            _path[2] = _token_out;\n        }\n    }\n\n    function getReward() internal virtual;\n\n    function depositLP() internal virtual;\n\n    function withdrawLP() internal virtual;\n\n    function swapReward(uint256 _rewardBal)\n        internal\n        returns (address, uint256)\n    {\n        if (reward == tokenA || reward == tokenB || _rewardBal == 0) {\n            return (reward, 0);\n        }\n\n        if (tokenA == WETH || tokenB == WETH) {\n            return (WETH, sellCapital(reward, WETH, _rewardBal));\n        }\n\n        // Assume that position has already been liquidated\n        (uint256 ratioA, uint256 ratioB) =\n            getRatios(balanceOfA(), balanceOfB(), investedA, investedB);\n        if (ratioA >= ratioB) {\n            return (tokenB, sellCapital(reward, tokenB, _rewardBal));\n        }\n        return (tokenA, sellCapital(reward, tokenA, _rewardBal));\n    }\n\n    // If there is a lot of impermanent loss, some capital will need to be sold\n    // To make both sides even\n    function sellCapital(\n        address _tokenFrom,\n        address _tokenTo,\n        uint256 _amountIn\n    ) internal returns (uint256 _amountOut) {\n        uint256[] memory amounts =\n            IUniswapV2Router02(router).swapExactTokensForTokens(\n                _amountIn,\n                0,\n                getTokenOutPath(_tokenFrom, _tokenTo),\n                address(this),\n                now\n            );\n        _amountOut = amounts[amounts.length - 1];\n    }\n\n    function _closePosition() internal returns (uint256, uint256) {\n        // Unstake LP from staking contract\n        withdrawLP();\n\n        // Close the hedge\n        closeHedge();\n\n        if (balanceOfPair() == 0) {\n            return (0, 0);\n        }\n\n        // **WARNING**: This call is sandwichable, care should be taken\n        //              to always execute with a private relay\n        IUniswapV2Router02(router).removeLiquidity(\n            tokenA,\n            tokenB,\n            balanceOfPair(),\n            0,\n            0,\n            address(this),\n            now\n        );\n\n        return (balanceOfA(), balanceOfB());\n    }\n\n    function _returnLooseToProviders()\n        internal\n        returns (uint256 balanceA, uint256 balanceB)\n    {\n        balanceA = balanceOfA();\n        if (balanceA > 0) {\n            IERC20(tokenA).transfer(address(providerA), balanceA);\n        }\n\n        balanceB = balanceOfB();\n        if (balanceB > 0) {\n            IERC20(tokenB).transfer(address(providerB), balanceB);\n        }\n    }\n\n    function getPair() internal view returns (address) {\n        address factory = IUniswapV2Router02(router).factory();\n        return IUniswapV2Factory(factory).getPair(tokenA, tokenB);\n    }\n\n    function balanceOfPair() public view returns (uint256) {\n        return IERC20(getPair()).balanceOf(address(this));\n    }\n\n    function balanceOfA() public view returns (uint256) {\n        return IERC20(tokenA).balanceOf(address(this));\n    }\n\n    function balanceOfB() public view returns (uint256) {\n        return IERC20(tokenB).balanceOf(address(this));\n    }\n\n    function balanceOfReward() public view returns (uint256) {\n        return IERC20(reward).balanceOf(address(this));\n    }\n\n    function balanceOfStake() public view virtual returns (uint256);\n\n    function balanceOfTokensInLP()\n        public\n        view\n        returns (uint256 _balanceA, uint256 _balanceB)\n    {\n        (uint256 reserveA, uint256 reserveB) = getReserves();\n        uint256 lpBal = balanceOfStake().add(balanceOfPair());\n        uint256 pairPrecision = 10**uint256(pair.decimals());\n        uint256 percentTotal = lpBal.mul(pairPrecision).div(pair.totalSupply());\n        _balanceA = reserveA.mul(percentTotal).div(pairPrecision);\n        _balanceB = reserveB.mul(percentTotal).div(pairPrecision);\n    }\n\n    function pendingReward() public view virtual returns (uint256);\n\n    // --- MANAGEMENT FUNCTIONS ---\n    function liquidatePositionManually(\n        uint256 expectedBalanceA,\n        uint256 expectedBalanceB\n    ) external onlyVaultManagers {\n        (uint256 balanceA, uint256 balanceB) = _closePosition();\n        require(expectedBalanceA <= balanceA, \"!sandwidched\");\n        require(expectedBalanceB <= balanceB, \"!sandwidched\");\n    }\n\n    function returnLooseToProvidersManually() external onlyVaultManagers {\n        _returnLooseToProviders();\n    }\n\n    function removeLiquidityManually(\n        uint256 amount,\n        uint256 expectedBalanceA,\n        uint256 expectedBalanceB\n    ) external onlyVaultManagers {\n        IUniswapV2Router02(router).removeLiquidity(\n            tokenA,\n            tokenB,\n            amount,\n            0,\n            0,\n            address(this),\n            now\n        );\n        require(expectedBalanceA <= balanceOfA(), \"!sandwidched\");\n        require(expectedBalanceA <= balanceOfB(), \"!sandwidched\");\n    }\n\n    function swapTokenForTokenManually(\n        address[] memory swapPath,\n        uint256 swapInAmount,\n        uint256 minOutAmount\n    ) external onlyGovernance returns (uint256) {\n        address swapTo = swapPath[swapPath.length - 1];\n        require(swapTo == tokenA || swapTo == tokenB); // swapTo must be tokenA or tokenB\n        uint256[] memory amounts =\n            IUniswapV2Router02(router).swapExactTokensForTokens(\n                swapInAmount,\n                minOutAmount,\n                swapPath,\n                address(this),\n                now\n            );\n        return amounts[amounts.length - 1];\n    }\n\n    function sweep(address _token) external onlyGovernance {\n        require(_token != address(tokenA));\n        require(_token != address(tokenB));\n\n        SafeERC20.safeTransfer(\n            IERC20(_token),\n            providerA.vault().governance(),\n            IERC20(_token).balanceOf(address(this))\n        );\n    }\n\n    function migrateProvider(address _newProvider) external onlyProviders {\n        ProviderStrategy newProvider = ProviderStrategy(_newProvider);\n        if (address(newProvider.want()) == tokenA) {\n            providerA = newProvider;\n        } else if (address(newProvider.want()) == tokenB) {\n            providerB = newProvider;\n        } else {\n            revert(\"Unsupported token\");\n        }\n    }\n}\n\n// Part: LPHedgingLib\n\nlibrary LPHedgingLib {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    address public constant hegicOptionsManager =\n        0x1BA4b447d0dF64DA64024e5Ec47dA94458C1e97f;\n\n    uint256 private constant MAX_BPS = 10_000;\n\n    function _checkAllowance(\n        uint256 callAmount,\n        uint256 putAmount,\n        uint256 period\n    ) internal {\n        IERC20 _token;\n        IHegicPool hegicCallOptionsPool = _hegicCallOptionsPool();\n        IHegicPool hegicPutOptionsPool = _hegicPutOptionsPool();\n        _token = hegicCallOptionsPool.token();\n        if (\n            _token.allowance(address(hegicCallOptionsPool), address(this)) <\n            getOptionCost(hegicCallOptionsPool, period, callAmount)\n        ) {\n            _token.approve(address(hegicCallOptionsPool), type(uint256).max);\n        }\n\n        _token = hegicPutOptionsPool.token();\n        if (\n            _token.allowance(address(hegicPutOptionsPool), address(this)) <\n            getOptionCost(hegicPutOptionsPool, period, putAmount)\n        ) {\n            _token.approve(address(hegicPutOptionsPool), type(uint256).max);\n        }\n    }\n\n    function getCurrentPrice() public returns (uint256) {\n        IPriceProvider pp =\n            IPriceProvider(_hegicCallOptionsPool().priceProvider());\n        (, int256 answer, , , ) = pp.latestRoundData();\n        return uint256(answer);\n    }\n\n    function _hegicCallOptionsPool() internal view returns (IHegicPool) {\n        return IHegicPool(HegicJointAPI(address(this)).hegicCallOptionsPool());\n    }\n\n    function _hegicPutOptionsPool() internal view returns (IHegicPool) {\n        return IHegicPool(HegicJointAPI(address(this)).hegicPutOptionsPool());\n    }\n\n    function hedgeLPToken(\n        address lpToken,\n        uint256 h,\n        uint256 period\n    )\n        external\n        returns (\n            uint256 callID,\n            uint256 putID,\n            uint256 strike\n        )\n    {\n        IHegicPool hegicCallOptionsPool = _hegicCallOptionsPool();\n        IHegicPool hegicPutOptionsPool = _hegicPutOptionsPool();\n        uint256 q = getLPInfo(lpToken, hegicCallOptionsPool);\n        if (h == 0 || period == 0 || q == 0) {\n            return (0, 0, 0);\n        }\n\n        (uint256 putAmount, uint256 callAmount) = getOptionsAmount(q, h);\n\n        _checkAllowance(callAmount, putAmount, period);\n        callID = buyOptionFrom(hegicCallOptionsPool, callAmount, period);\n        putID = buyOptionFrom(hegicPutOptionsPool, putAmount, period);\n        strike = getCurrentPrice();\n    }\n\n    function getOptionCost(\n        IHegicPool pool,\n        uint256 period,\n        uint256 amount\n    ) public view returns (uint256) {\n        // Strike = 0 means ATM option\n        (uint256 premium, uint256 settlementFee) =\n            pool.calculateTotalPremium(period, amount, 0);\n        return premium + settlementFee;\n    }\n\n    function getOptionsProfit(uint256 callID, uint256 putID)\n        external\n        view\n        returns (uint256, uint256)\n    {\n        return (getCallProfit(callID), getPutProfit(putID));\n    }\n\n    function getCallProfit(uint256 id) internal view returns (uint256) {\n        if (id == 0) {\n            return 0;\n        }\n        return _hegicCallOptionsPool().profitOf(id);\n    }\n\n    function getPutProfit(uint256 id) internal view returns (uint256) {\n        if (id == 0) {\n            return 0;\n        }\n        return _hegicPutOptionsPool().profitOf(id);\n    }\n\n    function closeHedge(uint256 callID, uint256 putID)\n        external\n        returns (\n            uint256 payoutTokenA,\n            uint256 payoutTokenB,\n            uint256 exercisePrice\n        )\n    {\n        IHegicPool hegicCallOptionsPool = _hegicCallOptionsPool();\n        IHegicPool hegicPutOptionsPool = _hegicPutOptionsPool();\n\n        exercisePrice = getCurrentPrice();\n        // Check the options have not expired\n        // NOTE: call and put options expiration MUST be the same\n        (, , , , uint256 expired, , ) = hegicCallOptionsPool.options(callID);\n        if (expired < block.timestamp) {\n            return (0, 0, exercisePrice);\n        }\n\n        payoutTokenA = hegicCallOptionsPool.profitOf(callID);\n        payoutTokenB = hegicPutOptionsPool.profitOf(putID);\n\n        if (payoutTokenA > 0) {\n            // call option is ITM\n            hegicCallOptionsPool.exercise(callID);\n        }\n\n        if (payoutTokenB > 0) {\n            // put option is ITM\n            hegicPutOptionsPool.exercise(putID);\n        }\n    }\n\n    function getOptionsAmount(uint256 q, uint256 h)\n        public\n        view\n        returns (uint256 putAmount, uint256 callAmount)\n    {\n        callAmount = getCallAmount(q, h);\n        putAmount = getPutAmount(q, h);\n    }\n\n    function getCallAmount(uint256 q, uint256 h) public view returns (uint256) {\n        uint256 one = MAX_BPS;\n        return\n            one\n                .sub(uint256(2).mul(one).mul(sqrt(one.add(h)).sub(one)).div(h))\n                .mul(q)\n                .div(MAX_BPS); // 1 - 2 / h * (sqrt(1 + h) - 1)\n    }\n\n    function getPutAmount(uint256 q, uint256 h) public view returns (uint256) {\n        uint256 one = MAX_BPS;\n        return\n            uint256(2)\n                .mul(one)\n                .mul(one.sub(sqrt(one.sub(h))))\n                .div(h)\n                .sub(one)\n                .mul(q)\n                .div(MAX_BPS); // 2 * (1 - sqrt(1 - h)) / h - 1\n    }\n\n    function buyOptionFrom(\n        IHegicPool pool,\n        uint256 amount,\n        uint256 period\n    ) internal returns (uint256) {\n        return pool.sellOption(address(this), period, amount, 0); // strike = 0 is ATM\n    }\n\n    function getLPInfo(address lpToken, IHegicPool hegicCallOptionsPool)\n        public\n        view\n        returns (uint256 q)\n    {\n        uint256 amount = IUniswapV2Pair(lpToken).balanceOf(address(this));\n\n        address token0 = IUniswapV2Pair(lpToken).token0();\n        address token1 = IUniswapV2Pair(lpToken).token1();\n\n        uint256 balance0 = IERC20(token0).balanceOf(address(lpToken));\n        uint256 balance1 = IERC20(token1).balanceOf(address(lpToken));\n        uint256 totalSupply = IUniswapV2Pair(lpToken).totalSupply();\n\n        uint256 token0Amount = amount.mul(balance0) / totalSupply;\n        uint256 token1Amount = amount.mul(balance1) / totalSupply;\n\n        address mainAsset = address(hegicCallOptionsPool.token());\n        if (mainAsset == token0) {\n            q = token0Amount;\n        } else if (mainAsset == token1) {\n            q = token1Amount;\n        } else {\n            revert(\"LPtoken not supported\");\n        }\n    }\n\n    function getTimeToMaturity(uint256 callID, uint256 putID)\n        public\n        view\n        returns (uint256)\n    {\n        if (callID == 0 || putID == 0) {\n            return 0;\n        }\n        (, , , , uint256 expiredCall, , ) =\n            _hegicCallOptionsPool().options(callID);\n        (, , , , uint256 expiredPut, , ) =\n            _hegicPutOptionsPool().options(putID);\n        // use lowest time to maturity (should be the same)\n        uint256 expired = expiredCall > expiredPut ? expiredPut : expiredCall;\n        if (expired < block.timestamp) {\n            return 0;\n        }\n        return expired.sub(block.timestamp);\n    }\n\n    function getHedgeStrike(uint256 callID, uint256 putID)\n        public\n        view\n        returns (uint256)\n    {\n        // NOTE: strike is the same for both options\n        (, uint256 strikeCall, , , , , ) =\n            _hegicCallOptionsPool().options(callID);\n        return strikeCall;\n    }\n\n    function sqrt(uint256 x) public pure returns (uint256 result) {\n        x = x.mul(MAX_BPS);\n        result = x;\n        uint256 k = (x >> 1) + 1;\n        while (k < result) (result, k) = (k, (x / k + k) >> 1);\n    }\n}\n\n// Part: HegicJoint\n\nabstract contract HegicJoint is Joint {\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint256;\n\n    uint256 public activeCallID;\n    uint256 public activePutID;\n\n    uint256 public hedgeBudget;\n    uint256 public protectionRange;\n    uint256 public period;\n\n    uint256 private minTimeToMaturity;\n\n    bool public skipManipulatedCheck;\n    bool public isHedgingEnabled;\n\n    uint256 private constant PRICE_DECIMALS = 1e8;\n    uint256 public maxSlippageOpen;\n    uint256 public maxSlippageClose;\n\n    address public hegicCallOptionsPool;\n    address public hegicPutOptionsPool;\n\n    constructor(\n        address _providerA,\n        address _providerB,\n        address _router,\n        address _weth,\n        address _reward,\n        address _hegicCallOptionsPool,\n        address _hegicPutOptionsPool\n    ) public Joint(_providerA, _providerB, _router, _weth, _reward) {\n        _initializeHegicJoint(_hegicCallOptionsPool, _hegicPutOptionsPool);\n    }\n\n    function _initializeHegicJoint(\n        address _hegicCallOptionsPool,\n        address _hegicPutOptionsPool\n    ) internal {\n        hegicCallOptionsPool = _hegicCallOptionsPool;\n        hegicPutOptionsPool = _hegicPutOptionsPool;\n\n        hedgeBudget = 50; // 0.5% per hedging period\n        protectionRange = 1000; // 10%\n        period = 7 days;\n        minTimeToMaturity = 3600; // 1 hour\n        maxSlippageOpen = 100; // 1%\n        maxSlippageClose = 100; // 1%\n\n        isHedgingEnabled = true;\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) public pure virtual returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    function getHedgeBudget(address token)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return hedgeBudget;\n    }\n\n    function getTimeToMaturity() public view returns (uint256) {\n        return LPHedgingLib.getTimeToMaturity(activeCallID, activePutID);\n    }\n\n    function getHedgeProfit() public view override returns (uint256, uint256) {\n        return LPHedgingLib.getOptionsProfit(activeCallID, activePutID);\n    }\n\n    function setSkipManipulatedCheck(bool _skipManipulatedCheck)\n        external\n        onlyVaultManagers\n    {\n        skipManipulatedCheck = _skipManipulatedCheck;\n    }\n\n    function setMaxSlippageClose(uint256 _maxSlippageClose)\n        external\n        onlyVaultManagers\n    {\n        require(_maxSlippageClose <= RATIO_PRECISION); // dev: !boundary\n        maxSlippageClose = _maxSlippageClose;\n    }\n\n    function setMaxSlippageOpen(uint256 _maxSlippageOpen)\n        external\n        onlyVaultManagers\n    {\n        require(_maxSlippageOpen <= RATIO_PRECISION); // dev: !boundary\n        maxSlippageOpen = _maxSlippageOpen;\n    }\n\n    function setMinTimeToMaturity(uint256 _minTimeToMaturity)\n        external\n        onlyVaultManagers\n    {\n        require(_minTimeToMaturity <= period); // avoid incorrect settings\n        minTimeToMaturity = _minTimeToMaturity;\n    }\n\n    function setIsHedgingEnabled(bool _isHedgingEnabled, bool force)\n        external\n        onlyVaultManagers\n    {\n        // if there is an active hedge, we need to force the disabling\n        if (force || (activeCallID == 0 && activePutID == 0)) {\n            isHedgingEnabled = _isHedgingEnabled;\n        }\n    }\n\n    function setHedgeBudget(uint256 _hedgeBudget) external onlyVaultManagers {\n        require(_hedgeBudget < RATIO_PRECISION);\n        hedgeBudget = _hedgeBudget;\n    }\n\n    function setHedgingPeriod(uint256 _period) external onlyVaultManagers {\n        require(_period < 90 days);\n        period = _period;\n    }\n\n    function setProtectionRange(uint256 _protectionRange)\n        external\n        onlyVaultManagers\n    {\n        require(_protectionRange < RATIO_PRECISION);\n        protectionRange = _protectionRange;\n    }\n\n    function resetHedge() external onlyGovernance {\n        activeCallID = 0;\n        activePutID = 0;\n    }\n\n    function getHedgeStrike() internal view returns (uint256) {\n        return LPHedgingLib.getHedgeStrike(activeCallID, activePutID);\n    }\n\n    function closeHedgeManually(uint256 callID, uint256 putID)\n        external\n        onlyVaultManagers\n    {\n        (, , uint256 exercisePrice) = LPHedgingLib.closeHedge(callID, putID);\n        require(\n            _isWithinRange(exercisePrice, maxSlippageClose) ||\n                skipManipulatedCheck\n        ); // dev: !close-price\n        activeCallID = 0;\n        activePutID = 0;\n    }\n\n    function hedgeLP()\n        internal\n        override\n        returns (uint256 costA, uint256 costB)\n    {\n        if (hedgeBudget > 0 && isHedgingEnabled) {\n            // take into account that if hedgeBudget is not enough, it will revert\n            IERC20 _pair = IERC20(getPair());\n            uint256 initialBalanceA = balanceOfA();\n            uint256 initialBalanceB = balanceOfB();\n            // Only able to open a new position if no active options\n            require(activeCallID == 0 && activePutID == 0); // dev: opened\n            uint256 strikePrice;\n            (activeCallID, activePutID, strikePrice) = LPHedgingLib\n                .hedgeLPToken(address(_pair), protectionRange, period);\n\n            require(\n                _isWithinRange(strikePrice, maxSlippageOpen) ||\n                    skipManipulatedCheck\n            ); // dev: !open-price\n\n            costA = initialBalanceA.sub(balanceOfA());\n            costB = initialBalanceB.sub(balanceOfB());\n        }\n    }\n\n    function closeHedge() internal override {\n        uint256 exercisePrice;\n        // only close hedge if a hedge is open\n        if (activeCallID != 0 && activePutID != 0 && isHedgingEnabled) {\n            (, , exercisePrice) = LPHedgingLib.closeHedge(\n                activeCallID,\n                activePutID\n            );\n            require(\n                _isWithinRange(exercisePrice, maxSlippageClose) ||\n                    skipManipulatedCheck\n            ); // dev: !close-price\n            activeCallID = 0;\n            activePutID = 0;\n        }\n    }\n\n    function _isWithinRange(uint256 oraclePrice, uint256 maxSlippage)\n        internal\n        view\n        returns (bool)\n    {\n        if (oraclePrice == 0) {\n            return false;\n        }\n        uint256 tokenADecimals =\n            uint256(10)**uint256(IERC20Extended(tokenA).decimals());\n        uint256 tokenBDecimals =\n            uint256(10)**uint256(IERC20Extended(tokenB).decimals());\n\n        (uint256 reserveA, uint256 reserveB) = getReserves();\n        uint256 currentPairPrice =\n            reserveB.mul(tokenADecimals).mul(PRICE_DECIMALS).div(reserveA).div(\n                tokenBDecimals\n            );\n        // This is a price check to avoid manipulated pairs. It checks current pair price vs hedging protocol oracle price (i.e. exercise)\n        // we need pairPrice ⁄ oraclePrice to be within (1+maxSlippage) and (1-maxSlippage)\n        // otherwise, we consider the price manipulated\n        return\n            currentPairPrice > oraclePrice\n                ? currentPairPrice.mul(RATIO_PRECISION).div(oraclePrice) <\n                    RATIO_PRECISION.add(maxSlippage)\n                : currentPairPrice.mul(RATIO_PRECISION).div(oraclePrice) >\n                    RATIO_PRECISION.sub(maxSlippage);\n    }\n\n    function shouldEndEpoch() public view override returns (bool) {\n        // End epoch if price moved too much (above / below the protectionRange) or hedge is about to expire\n        if (activeCallID != 0 || activePutID != 0) {\n            // if Time to Maturity of hedge is lower than min threshold, need to end epoch NOW\n            if (\n                LPHedgingLib.getTimeToMaturity(activeCallID, activePutID) <=\n                minTimeToMaturity\n            ) {\n                return true;\n            }\n\n            // NOTE: the initial price is calculated using the added liquidity\n            uint256 tokenADecimals =\n                uint256(10)**uint256(IERC20Extended(tokenA).decimals());\n            uint256 tokenBDecimals =\n                uint256(10)**uint256(IERC20Extended(tokenB).decimals());\n            uint256 initPrice =\n                investedB\n                    .mul(tokenADecimals)\n                    .mul(PRICE_DECIMALS)\n                    .div(investedA)\n                    .div(tokenBDecimals);\n            return !_isWithinRange(initPrice, protectionRange);\n        }\n    }\n\n    // this function is called by Joint to see if it needs to stop initiating new epochs due to too high volatility\n    function _autoProtect() internal view override returns (bool) {\n        // if we are closing the position before 50% of hedge period has passed, we did something wrong so auto-init is stopped\n        uint256 timeToMaturity = getTimeToMaturity();\n        if (activeCallID != 0 && activePutID != 0) {\n            // NOTE: if timeToMaturity is 0, it means that the epoch has finished without being exercised\n            // Something might be wrong so we don't start new epochs\n            if (\n                timeToMaturity == 0 || timeToMaturity > period.mul(50).div(100)\n            ) {\n                return true;\n            }\n        }\n    }\n}\n\n// File: SushiJoint.sol\n\ncontract SushiJoint is HegicJoint {\n    uint256 public pid;\n\n    IMasterchef public masterchef;\n    bool public dontWithdraw;\n\n    bool public isOriginal = true;\n\n    constructor(\n        address _providerA,\n        address _providerB,\n        address _router,\n        address _weth,\n        address _reward,\n        address _hegicCallOptionsPool,\n        address _hegicPutOptionsPool,\n        address _masterchef,\n        uint256 _pid\n    )\n        public\n        HegicJoint(\n            _providerA,\n            _providerB,\n            _router,\n            _weth,\n            _reward,\n            _hegicCallOptionsPool,\n            _hegicPutOptionsPool\n        )\n    {\n        _initalizeSushiJoint(_masterchef, _pid);\n    }\n\n    function initialize(\n        address _providerA,\n        address _providerB,\n        address _router,\n        address _weth,\n        address _reward,\n        address _hegicCallOptionsPool,\n        address _hegicPutOptionsPool,\n        address _masterchef,\n        uint256 _pid\n    ) external {\n        _initialize(_providerA, _providerB, _router, _weth, _reward);\n        _initializeHegicJoint(_hegicCallOptionsPool, _hegicPutOptionsPool);\n        _initalizeSushiJoint(_masterchef, _pid);\n    }\n\n    function _initalizeSushiJoint(address _masterchef, uint256 _pid) internal {\n        masterchef = IMasterchef(_masterchef);\n        pid = _pid;\n\n        IERC20(address(pair)).approve(_masterchef, type(uint256).max);\n    }\n\n    event Cloned(address indexed clone);\n\n    function cloneSushiJoint(\n        address _providerA,\n        address _providerB,\n        address _router,\n        address _weth,\n        address _reward,\n        address _hegicCallOptionsPool,\n        address _hegicPutOptionsPool,\n        address _masterchef,\n        uint256 _pid\n    ) external returns (address newJoint) {\n        require(isOriginal, \"!original\");\n        bytes20 addressBytes = bytes20(address(this));\n\n        assembly {\n            // EIP-1167 bytecode\n            let clone_code := mload(0x40)\n            mstore(\n                clone_code,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(clone_code, 0x14), addressBytes)\n            mstore(\n                add(clone_code, 0x28),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n            newJoint := create(0, clone_code, 0x37)\n        }\n\n        SushiJoint(newJoint).initialize(\n            _providerA,\n            _providerB,\n            _router,\n            _weth,\n            _reward,\n            _hegicCallOptionsPool,\n            _hegicPutOptionsPool,\n            _masterchef,\n            _pid\n        );\n\n        emit Cloned(newJoint);\n    }\n\n    function name() external view override returns (string memory) {\n        string memory ab =\n            string(\n                abi.encodePacked(\n                    IERC20Extended(address(tokenA)).symbol(),\n                    \"-\",\n                    IERC20Extended(address(tokenB)).symbol()\n                )\n            );\n\n        return string(abi.encodePacked(\"HegicSushiJoint(\", ab, \")\"));\n    }\n\n    function balanceOfStake() public view override returns (uint256) {\n        return masterchef.userInfo(pid, address(this)).amount;\n    }\n\n    function pendingReward() public view override returns (uint256) {\n        return\n            ISushiMasterchef(address(masterchef)).pendingSushi(\n                pid,\n                address(this)\n            );\n    }\n\n    function getReward() internal override {\n        masterchef.deposit(pid, 0);\n    }\n\n    function setDontWithdraw(bool _dontWithdraw) external onlyVaultManagers {\n        dontWithdraw = _dontWithdraw;\n    }\n\n    function depositLP() internal override {\n        if (balanceOfPair() > 0) {\n            masterchef.deposit(pid, balanceOfPair());\n        }\n    }\n\n    function withdrawLP() internal override {\n        uint256 stakeBalance = balanceOfStake();\n        if (stakeBalance > 0 && !dontWithdraw) {\n            masterchef.withdraw(pid, stakeBalance);\n        }\n    }\n\n    function withdrawLPManually(uint256 amount) external onlyVaultManagers {\n        masterchef.withdraw(pid, amount);\n    }\n}\n"}}}