{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/I_Curve.sol": {
      "content": "pragma solidity ^0.6.1;\r\n\r\n// describe the interface\r\n\r\ncontract Service{\r\n    function mint (uint256 _amount, uint256 _maxCollateralSpend) public{}\r\n    function redeem(uint256 _amount, uint256 _minCollateralReward) public{}\r\n}\r\n\r\ncontract ERC20 {\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {}\r\n    function transfer(address to, uint tokens) public returns (bool success){}\r\n    function approve(address useder, uint tokens) public returns (bool success){}\r\n    function transferFrom(address from, address to, uint value) public returns (bool success){}\r\n}\r\n\r\ncontract Client {\r\n    Service _s;\r\n    address payable public manager;\r\n    address public bonding_curve;\r\n    address public dai;\r\n    address public bzz;\r\n    constructor(address _curve, address _dai, address _bzz) public {\r\n        manager = msg.sender;\r\n        bonding_curve = _curve;\r\n        dai = _dai;\r\n        bzz = _bzz;\r\n    }\r\n\r\n    modifier restricted {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n    function buy_bzz(uint256 _bzz_wanted, uint256 _dai_spend) public  {\r\n        Service(bonding_curve).mint(_bzz_wanted * 10 ** 16, _dai_spend * 10 ** 18);\r\n    }\r\n    \r\n    function sell_bzz(uint256 _bzz_spend, uint256 _dai_wanted) public  {\r\n        Service(bonding_curve).redeem(_bzz_spend * 10 ** 16, _dai_wanted * 10 ** 18);\r\n    }    \r\n\r\n    function approve_t(address _token, address _spender) public restricted {\r\n        ERC20(_token).approve(_spender, 2**256 - 1);\r\n    }\r\n\r\n    function withdraw() public restricted {\r\n        manager.transfer(address(this).balance);\r\n    }\r\n    \r\n    function withdraw_bzz(uint256 _amount) public restricted {\r\n        ERC20(bzz).transfer(manager, _amount * 10 ** 16);\r\n    }\r\n\r\n    function withdraw_dai(uint256 _amount) public restricted {\r\n        ERC20(dai).transfer(manager,  _amount * 10 ** 18);\r\n    }\r\n\r\n    function transferFrom_t(address _token, address _from, address _to, uint _value) public restricted {\r\n        ERC20(_token).transferFrom(_from, _to, _value);\r\n    }    \r\n}\r\n"
    }
  }
}