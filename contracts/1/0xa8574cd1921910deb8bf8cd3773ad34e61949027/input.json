{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Untitled36.sol":{"content":"/**\n *Submitted for verification at Etherscan.io on 2020-08-05\n*/\n\npragma solidity 0.6.9;\npragma experimental ABIEncoderV2;\n\n\nstruct Account {\n    uint256 etherBalance;\n    TokenBalance[] tokenBalances;\n}\n\n\nstruct TokenBalance {\n    bool callSuccess;\n    uint256 balance;\n}\n\n\ninterface ERC20Interface {\n    function balanceOf(address account) external view returns (uint256 balance);\n}\n\n\ninterface AccountWatcherInterface {\n    function balancesOf(\n        ERC20Interface[] calldata tokens, address[] calldata accounts\n    ) external returns (Account[] memory accountBalances);\n}\n\n\n/// Quickly check the Ether balance, as well as the balance of each\n/// supplied ERC20 token, for a collection of accounts.\n/// @author 0age\ncontract AccountWatcherV2 is AccountWatcherInterface {\n    function balancesOf(\n        ERC20Interface[] calldata tokens, address[] calldata accounts\n    ) external override returns (Account[] memory) {\n        Account[] memory accountBalances = new Account[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n            address account = accounts[i];\n\n            TokenBalance[] memory tokenBalances = new TokenBalance[](tokens.length);\n\n            for (uint256 j = 0; j < tokens.length; j++) {\n                ERC20Interface token = tokens[j];\n                (bool success, bytes memory returnData) = address(token).call(\n                    abi.encodeWithSelector(token.balanceOf.selector, account)\n                );\n                \n                if (success && returnData.length == 32) {\n                    TokenBalance memory tokenBalance;\n                    \n                    tokenBalance.callSuccess = true;\n                    tokenBalance.balance = abi.decode(returnData, (uint256));\n                    \n                    tokenBalances[j] = tokenBalance;\n                }\n            }\n\n            accountBalances[i].etherBalance = account.balance;\n            accountBalances[i].tokenBalances = tokenBalances;\n        }\n\n        return accountBalances;\n    }\n}"}}}