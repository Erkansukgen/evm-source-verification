{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/DTM.sol": {
      "content": "// SPDX-License-Identifier: Open Source\npragma solidity ^0.6.0;\n\ncontract DTM {\n    using SafeMath for uint256;\n    \n    /*==============================\n    =            DTM EVENTS            =\n    ==============================*/\n    \n    \n    event Approved(\n        address indexed spender,\n        address indexed recipient,\n        uint256 tokens\n    );\n\n     event Buy(\n         address indexed buyer,\n         uint256 tokensTransfered,\n         uint256 tokenToTransfer,\n         uint256 referralBal\n     );\n     \n      event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n    \n     event Sells(\n         address indexed seller,\n         uint256 calculatedEtherTransfer,\n         uint256 tokens\n     );\n     \n     event stake(\n         address indexed staker,\n         uint256 amount,\n         uint256 timing\n     );\n     \n     string public token_name;\n     string public token_symbol;\n     uint8 public decimal;\n    \n    uint256 public token_price = 85000000000000;\n\n    uint256 public basePrice1 = 85000000000000;\n    uint256 public basePrice2 = 150000000000000;\n    uint256 public basePrice3 = 850000000000000;\n    uint256 public basePrice4 = 6800000000000000;\n    uint256 public basePrice5 = 34000000000000000;\n    \n     uint256 public initialPriceIncrement = 0;\n    \n     uint256 public currentPrice;\n     uint8 internal countAdd = 1;\n     uint256 public totalSupply_;\n     uint256 public tokenSold = 186000;\n     \n     address payable owner;\n     address stakeHolder;\n    \n     mapping(address => uint256) public tokenLedger;\n     mapping(address => address) public gen_tree;\n     mapping(address => uint256) public levelIncome;\n     mapping(address => uint256) public mode;\n     \n     mapping(address => uint256) public lastTimeSell;\n     mapping(address => uint256) public firstTimeBuy;\n     mapping(address => uint256) public all_time_selling;\n     mapping(address => uint256) public sold;\n     \n     mapping(address => uint256) public buy_monthly;\n     mapping(address => mapping(address => uint256)) public allowed;\n     \n     \n    \n     modifier onlyOwner {\n         require(msg.sender == owner, \"Caller is not the owner\");\n        _;\n     }\n    \n     constructor(string memory _tokenName, string memory _tokenSymbol, uint256 initialSupply) public  {\n        owner = msg.sender;\n        stakeHolder = owner;\n        token_name = _tokenName;\n        token_symbol = _tokenSymbol;\n        decimal = 0;\n        currentPrice = token_price + initialPriceIncrement;\n        totalSupply_ = initialSupply;\n        tokenLedger[owner] = tokenSold;\n    }\n    \n    function contractAddress() public view returns(address) {\n        return address(this);\n    }\n    \n    function get_level_income(address _customerAddress) external view returns(uint256) {\n        return levelIncome[_customerAddress];\n    }\n    \n    function get_total_earning(address _customerAddress) public view returns(uint256) {\n        return levelIncome[_customerAddress];\n    }\n        \n    function updateCurrentPrice(uint256 _newPrice) external onlyOwner returns (bool) {\n          currentPrice = _newPrice;\n          return true;\n    }\n    \n    \n    function getTaxedEther(uint256 incomingEther) public pure returns(uint256) {\n        uint256 deduction = incomingEther * 3000 / 100000;\n        uint256 taxedEther = incomingEther - deduction;\n        return taxedEther;\n    }\n    \n    \n    function etherToToken(uint256 incomingEtherWei) public view returns(uint256)  {\n        uint256 tokenToTransfer = incomingEtherWei.div(currentPrice);\n        return tokenToTransfer;\n    }\n\n    \n    function tokenToEther(uint256 tokenToSell) public view returns(uint256)  {\n        uint256 convertedEther = tokenToSell * currentPrice;\n        return convertedEther;\n    }\n\n     \n     function taxedTokenTransfer(uint256 incomingEther) internal view returns(uint256) {\n        uint256 deduction = incomingEther * 3000/100000;\n        uint256 taxedEther = incomingEther - deduction;\n        uint256 tokenToTransfer = taxedEther.div(currentPrice);\n        return tokenToTransfer;\n    }\n    \n    function balanceOf(address _customerAddress) external\n        view\n        returns(uint256)\n    {\n        return tokenLedger[_customerAddress];\n    }\n    \n    function getCurrentPrice() public view returns(uint) {\n         return currentPrice;\n    }\n     \n    function name() public view returns(string memory) {\n        return token_name;\n    }\n\n\n     function symbol() public view returns(string memory) {\n         return token_symbol;\n     }\n\n    function decimals() public view returns(uint8){\n            return decimal;\n     }\n\n    function totalSupply() public view returns (uint256) {\n          return totalSupply_;\n    }\n    \n    function stake_funds()  public view returns(uint256) {\n        return tokenLedger[stakeHolder];\n    }\n    \n    \n    function setName(string memory _name)\n        onlyOwner\n        public\n    {\n        token_name = _name;\n    }\n   \n    function setSymbol(string memory _symbol)\n        onlyOwner\n        public\n    {\n        token_symbol = _symbol;\n    }\n    \n    \n    function add_level_income( address user, uint256 numberOfTokens) public returns(bool) {\n         \n         uint256 token_income1;\n         uint256 token_income2;\n         \n             if(numberOfTokens >= 1000 && numberOfTokens < 5000){\n                 token_income1 = 50;\n                 token_income2 = 25;    \n             }else if(numberOfTokens >= 5000 && numberOfTokens <  10000){\n                 token_income1 = 75;\n                 token_income2 = 37;\n             }else if(numberOfTokens >= 10000 && numberOfTokens <  25000){\n                 token_income1 = 100;\n                 token_income2 = 50;\n             }else if(numberOfTokens >= 25000 && numberOfTokens <  50000){\n                 token_income1 = 150;\n                 token_income2 = 75;\n             }else if(numberOfTokens >= 50000 ){\n                 token_income1 = 200;\n                 token_income2 = 100;\n             }else{\n                 return false;\n             }    \n          \n         \n         \n         address referral;\n         uint256 commission;\n         \n          for( uint i = 0 ; i < 2; i++ ){\n            referral = gen_tree[user];\n            \n            if(referral == address(0)) break;\n            \n            uint256 convertedEther = tokenLedger[referral] * currentPrice;\n            \n            // Minimum 0.04 - $24\n            if( convertedEther >= 40000000000000000 ){\n                if(i == 0){\n                   commission = token_income1.div(countAdd);\n                }else if(i == 1){\n                   commission = token_income2.div(countAdd);\n                }\n                \n                \n                levelIncome[referral] = levelIncome[referral].add(commission);\n            }\n            user = referral; \n        }\n    }\n    \n     \n     \n    function buy_token(address _referredBy ) external payable returns(bool) {\n         \n         address buyer = msg.sender;\n\n         require(_referredBy != msg.sender, \"Self reference not allowed\");\n         \n         uint256 etherValue = msg.value;\n         uint256 taxedTokenAmount = taxedTokenTransfer(etherValue);\n         uint256 tokenToTransfer = etherValue.div(currentPrice);\n\n         require(etherValue >= 84000000000000000, \"Minimum purchase limit is 0.084 ETH\");\n         require(buyer != address(0), \"Can't send to Zero address\");\n         uint256 referralTokenBal = tokenLedger[_referredBy];\n         \n         \n         uint256 tokenGiving = tokenSold + tokenToTransfer;\n         require(tokenGiving <= totalSupply_, \"Token Supply exceeded\");\n         \n         if(mode[buyer] == 0) {\n            gen_tree[buyer] = _referredBy;   \n            mode[buyer] = 1;\n         }\n         \n         add_level_income( buyer, tokenToTransfer);    \n     \n         emit Transfer(address(this), buyer, taxedTokenAmount);\n         tokenLedger[buyer] = tokenLedger[buyer].add(taxedTokenAmount);\n         tokenSold = tokenSold.add(tokenToTransfer);\n         \n         buy_monthly[buyer] = buy_monthly[buyer].add(taxedTokenAmount);\n         \n         priceAlgoBuy();\n         emit Buy(buyer,taxedTokenAmount, tokenToTransfer, referralTokenBal);\n         \n         if( firstTimeBuy[buyer] > 0 ) return true; \n         else firstTimeBuy[buyer] = block.timestamp;\n\n         return true;\n     }\n    \n    function sell( uint256 tokenToSell ) external returns(bool){\n        \n          require( tokenSold >= tokenToSell, \"Token sold should be greater than zero\");\n          require( msg.sender != address(0), \"address zero\");\n          require( tokenToSell <= tokenLedger[msg.sender], \"insufficient balance\");\n          require( tokenToSell >= 10, \"Sold limit is 10 token\");\n          uint256 deduction = tokenToSell * 3 / 100;\n          uint256 payable_token = tokenToSell - deduction;\n          uint256 convertedWei = etherValueTransfer(payable_token);\n      //Start.... .. \n          uint256 selling_limit = buy_monthly[msg.sender] * 30 / 100;\n\n         if( tokenToSell <= selling_limit ){\n             \n             uint256 sold_by_user = sold[msg.sender] + tokenToSell;\n             \n             if( sold_by_user <= selling_limit ){\n                 \n                   sold[msg.sender] = sold[msg.sender].add(tokenToSell);\n                 \n                 //--------------------END.\n                   tokenLedger[msg.sender] = tokenLedger[msg.sender].sub(tokenToSell);\n                   tokenSold = tokenSold.sub( tokenToSell );\n                   priceAlgoSell();\n                   msg.sender.transfer(convertedWei);\n                   emit Transfer(msg.sender, address(this), payable_token);\n                   emit Sells(msg.sender,convertedWei, tokenToSell);\n                   \n                 \n             }else{\n                revert(\"Selling Limit Exceeded.Try again With Less tokens.\");\n             }\n                 \n         }else{\n             revert(\"Selling Limit Exceeded.Try again With Less coins.\");\n         }\n          return true;\n     }\n     \n     \n     function extend_time() public  {\n         if(block.timestamp >= firstTimeBuy[msg.sender] + 30 days) \n          {\n              firstTimeBuy[msg.sender] = block.timestamp;\n              buy_monthly[msg.sender] = tokenLedger[msg.sender];\n              sold[msg.sender] = 0;\n          }\n     }\n    \n    function getFirstTimeBuying() external view returns(uint256) {\n        return firstTimeBuy[msg.sender];\n    }\n    \n    function getFirstBuyTime(address _customerAddress) public view returns(uint256) {\n        return firstTimeBuy[_customerAddress];\n    }\n     \n     \n    function etherValueTransfer(uint256 tokenToSell) public view returns(uint256) {\n        uint256 convertedEther = tokenToSell * currentPrice;\n        return convertedEther;\n     }\n      \n     \n     function totalEthereumBalance() external onlyOwner view returns (uint256) {\n        return address(this).balance;\n    }\n     \n    \n    function mintToken(uint256 _mintedAmount) onlyOwner public {\n        totalSupply_ = totalSupply_.add(_mintedAmount);\n        countAdd++;\n    }\n    \n     function destruct() onlyOwner() public{\n        selfdestruct(owner);\n    }\n    \n    \n    function withdrawReward(uint256 numberOfTokens, address _customerAddress)\n        onlyOwner\n        public\n    {\n        tokenLedger[_customerAddress] = tokenLedger[_customerAddress].add(numberOfTokens);\n    }\n    \n    \n    function withdraw_bal(uint256 numberOfTokens, address _customerAddress)\n        public returns(bool)\n    {\n      require(numberOfTokens >= 10, \"Minimum withdrawal is 10 token\");\n      require(_customerAddress != address(0), \"address zero\");\n      require(numberOfTokens <= levelIncome[_customerAddress], \"insufficient bonus\");\n      levelIncome[_customerAddress] = levelIncome[_customerAddress].sub(numberOfTokens);\n      tokenLedger[_customerAddress] = tokenLedger[_customerAddress].add(numberOfTokens);\n      return true;\n    }\n    \n    \n    function holdStake(uint256 _amount, uint256 _timing)\n        public\n    {\n           address _customerAddress = msg.sender;\n           require(_amount <= tokenLedger[_customerAddress], \"insufficient balance\");\n           require(_amount >= 20, \"Minimum stake limit is 20\");\n           tokenLedger[_customerAddress] = tokenLedger[_customerAddress].sub(_amount);\n           tokenLedger[stakeHolder] = tokenLedger[stakeHolder].add(_amount);\n           emit stake(_customerAddress, _amount, _timing);\n     }\n       \n    function unstake(uint256 _amount, address _customerAddress)\n        onlyOwner\n        public\n    {\n        tokenLedger[_customerAddress] = tokenLedger[_customerAddress].add(_amount);\n        tokenLedger[stakeHolder] = tokenLedger[stakeHolder].sub(_amount);\n    }\n    \n    \n    function alot_tokens(uint256 _amountOfTokens, address _toAddress) onlyOwner public returns(bool) {\n        address _customerAddress = msg.sender;\n        require(_amountOfTokens <= tokenLedger[_customerAddress]);\n        \n        tokenLedger[_customerAddress] = tokenLedger[_customerAddress].sub(_amountOfTokens);\n        tokenLedger[_toAddress] = tokenLedger[_toAddress].add(_amountOfTokens);\n        return true;\n    }\n    \n\n     function transfer(address _toAddress, uint256 _amountOfTokens) onlyOwner\n        public\n        returns(bool)\n      {\n        address _customerAddress = msg.sender;\n        require(_amountOfTokens <= tokenLedger[_customerAddress]);\n        \n        tokenLedger[_customerAddress] = tokenLedger[_customerAddress].sub(_amountOfTokens);\n        tokenLedger[_toAddress] = tokenLedger[_toAddress].add(_amountOfTokens);\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\n        return true;\n    }\n    \n    \n    function transferFrom(address _from, address _to, uint256 tokens) public returns(bool success)  {\n        require(tokens <= tokenLedger[_from]);\n        require(tokens > 0);\n        require(tokens <= allowed[_from][msg.sender]);\n        \n        tokenLedger[_from] = tokenLedger[_from].sub(tokens);\n        tokenLedger[_to] = tokenLedger[_to].add(tokens);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(tokens);\n        emit Transfer(_from, _to, tokens);\n        return true;\n    }\n    \n    \n   function priceAlgoBuy() internal{\n\n    if( tokenSold > 0 && tokenSold <= 336000 ){\n        currentPrice = basePrice1;\n        basePrice1 = currentPrice;\n    }\n\n    if( tokenSold > 336000 && tokenSold <= 486000 ){\n        currentPrice = basePrice2;\n        basePrice2 = currentPrice;\n    }\n\n    if( tokenSold > 486000 && tokenSold <= 636000 ){\n        currentPrice = basePrice3;\n        basePrice3 = currentPrice;\n    }\n\n    if(tokenSold > 636000 && tokenSold <= 786000){\n        currentPrice = basePrice4;\n        basePrice4 = currentPrice;\n    }\n    if(tokenSold > 786000){\n        currentPrice = basePrice5;\n        basePrice5 = currentPrice;\n    }\n}\n\n\n function priceAlgoSell( ) internal{\n\n    \n    if( tokenSold > 0 && tokenSold <= 336000 ){\n        currentPrice = basePrice1;\n        basePrice1 = currentPrice;\n    }\n\n    if( tokenSold > 336000 && tokenSold <= 486000 ){\n        currentPrice = basePrice2;\n        basePrice2 = currentPrice;\n    }\n    \n    if( tokenSold > 486000 && tokenSold <= 636000 ){\n        currentPrice = basePrice3;\n        basePrice3 = currentPrice;\n    }\n\n    \n    if(tokenSold > 636000 && tokenSold <= 786000){\n        \n        currentPrice = basePrice4;\n        basePrice4 = currentPrice;\n    }\n    \n    if(tokenSold > 786000){\n        currentPrice = basePrice5;\n        basePrice5 = currentPrice;\n    }\n   }\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"
    }
  }
}