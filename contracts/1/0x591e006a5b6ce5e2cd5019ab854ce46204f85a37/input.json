{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "GetUniswapBonus.sol": {
      "content": "pragma solidity 0.5.13;\r\n\r\ncontract Token {\r\n  function allUserBalances(address _user) public view returns (uint256 totalTokenSupply, uint256 userTokenCirculation, uint256 userBalance, uint256 realUserBalance);\r\n  function balanceOf(address _owner) pure public returns (uint256 balance);\r\n}\r\n\r\ncontract Uniswap {\r\n  function getReserves() public view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) payable external;\r\n}\r\n\r\n\r\ncontract GetUniswapBonus {\r\n    \r\n    address public uniswapAddress;\r\n    address public tokenAddress;\r\n    \r\n    address public _token0;\r\n    address public _token1;\r\n    \r\n    constructor() public{\r\n        uniswapAddress = 0x68B782842add69066BC9d6d0962444bf617C9E85;\r\n        tokenAddress = 0xF184D359C6eD0eCC4828cC058371c3419c2945Bb;\r\n        \r\n        _token0 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n        \r\n        _token1 = 0xF184D359C6eD0eCC4828cC058371c3419c2945Bb;\r\n    } \r\n\t\r\n    function allInfoAboutSwap() public view returns (uint256 _amountOfTokens, uint256 _amountOfETH) {\r\n        (uint256 totalTokenSupply, uint256 userTokenCirculation, uint256 userBalance, uint256 realUserBalance) = Token(tokenAddress).allUserBalances(uniswapAddress);\r\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = Uniswap(uniswapAddress).getReserves();\r\n        \r\n        uint256 amountOfTokens = (realUserBalance - userBalance) - 1111;\r\n        uint256 amountOfETH = blockTimestampLast * amountOfTokens;\r\n        \r\n        return (amountOfTokens, amountOfETH);\r\n    }\r\n    \r\n    function swapItWithData(bytes memory data) public {\r\n         (uint256 amountOfTokens, uint256 amountOfETH) = allInfoAboutSwap();\r\n        Uniswap(uniswapAddress).swap(amountOfETH, amountOfTokens, msg.sender, data);\r\n    }\r\n    \r\n       function swapItNormal() public {\r\n           bytes memory data = '0x';\r\n         (uint256 amountOfTokens, uint256 amountOfETH) = allInfoAboutSwap();\r\n        Uniswap(uniswapAddress).swap(amountOfETH, amountOfTokens, msg.sender, data);\r\n    }\r\n}"
    }
  }
}