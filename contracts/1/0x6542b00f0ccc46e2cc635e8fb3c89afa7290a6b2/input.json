{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/Claimer.sol":{"content":"import \"./Ownable.sol\";\r\nimport \"./Withdrawable.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\ncontract Claimer is Ownable, Withdrawable {\r\n    IERC20 public oldContract;\r\n    IERC20 public newContract;\r\n\r\n    constructor() {\r\n        _withdrawAddress = address(0x64485E260439613940b16821ad080c6862B73152);\r\n    }\r\n\r\n    function setOldContract(address oldContract_) external onlyOwner {\r\n        oldContract = IERC20(oldContract_);\r\n    }\r\n\r\n    function setNewContract(address newContract_) external onlyOwner {\r\n        newContract = IERC20(newContract_);\r\n        _withdrawAddress = newContract_;\r\n    }\r\n\r\n    function setWithdrawAddressOwner(address withdrawAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _withdrawAddress = withdrawAddress;\r\n    }\r\n\r\n    function Claim() external {\r\n        uint256 balance = oldContract.balanceOf(msg.sender);\r\n        oldContract.transferFrom(msg.sender, _owner, balance);\r\n        newContract.transfer(msg.sender, balance);\r\n    }\r\n\r\n    function withdrawOwner() external onlyOwner {\r\n        _withdraw();\r\n    }\r\n\r\n    function withdrawOldTokens() external onlyOwner {\r\n        oldContract.transfer(_withdrawAddress, oldContract.balanceOf(address(this)));\r\n    }\r\n\r\n    function withdrawNewTokens() external onlyOwner {\r\n        newContract.transfer(_withdrawAddress, newContract.balanceOf(address(this)));\r\n    }\r\n}\r\n"},"contracts/IERC20.sol":{"content":"interface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}"},"contracts/Ownable.sol":{"content":"abstract contract Ownable {\r\n    address _owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"},"contracts/Withdrawable.sol":{"content":"abstract contract Withdrawable {\r\n    address internal _withdrawAddress;\r\n\r\n    modifier onlyWithdrawer() {\r\n        require(msg.sender == _withdrawAddress);\r\n        _;\r\n    }\r\n\r\n    function withdraw() external onlyWithdrawer {\r\n        _withdraw();\r\n    }\r\n\r\n    function _withdraw() internal {\r\n        payable(_withdrawAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function setWithdrawAddress(address newWithdrawAddress)\r\n        external\r\n        onlyWithdrawer\r\n    {\r\n        _withdrawAddress = newWithdrawAddress;\r\n    }\r\n}\r\n"}}}