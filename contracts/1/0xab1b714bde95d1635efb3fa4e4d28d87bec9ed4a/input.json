{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "/home/mark/src/carson/smart-contract/contracts/ChainLinkPrices.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.7.5;\npragma experimental ABIEncoderV2;\n\nstruct RoundData {\n    address contractAddr;\n    uint80 roundId;\n    int256 answer;\n    uint256 startedAt;\n    uint256 updatedAt;\n    uint80 answeredInRound;\n}\n\ninterface IChainLinkPrices {\n    function latestRoundData() external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n\ncontract ChainLinkPrices {\n    constructor () public {\n\n    }\n\n    function getAllRoundData(address[] memory pairs) public view returns (RoundData[] memory) {\n        RoundData[] memory output = new RoundData[](pairs.length);\n        for (uint256 i = 0; i < pairs.length; i++) {\n            IChainLinkPrices pair = IChainLinkPrices(pairs[i]);\n            (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound) = pair.latestRoundData();\n            output[i] = RoundData(pairs[i], roundId, answer, startedAt, updatedAt, answeredInRound);\n        }\n\n        return output;\n    }\n}"
    }
  }
}