{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/DSA_test/1inch1.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface TokenInterface {\n    function approve(address, uint256) external;\n    function transfer(address, uint) external;\n    function transferFrom(address, address, uint) external;\n    function deposit() external payable;\n    function withdraw(uint) external;\n    function balanceOf(address) external view returns (uint);\n    function decimals() external view returns (uint);\n}\n\ninterface MemoryInterface {\n    function getUint(uint id) external returns (uint num);\n    function setUint(uint id, uint val) external;\n}\n\ninterface EventInterface {\n    function emitEvent(uint connectorType, uint connectorID, bytes32 eventCode, bytes calldata eventData) external;\n}\n\ncontract Stores {\n\n  /**\n   * @dev Return ethereum address\n   */\n  function getEthAddr() internal pure returns (address) {\n    return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\n  }\n\n  /**\n   * @dev Return memory variable address\n   */\n  function getMemoryAddr() internal pure returns (address) {\n    return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\n  }\n\n  /**\n   * @dev Return InstaEvent Address.\n   */\n  function getEventAddr() internal pure returns (address) {\n    return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\n  }\n\n  /**\n   * @dev Get Uint value from InstaMemory Contract.\n   */\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\n    returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\n  }\n\n  /**\n  * @dev Set Uint value in InstaMemory Contract.\n  */\n  function setUint(uint setId, uint val) virtual internal {\n    if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\n  }\n\n  /**\n  * @dev emit event on event contract\n  */\n  function emitEvent(bytes32 eventCode, bytes memory eventData) virtual internal {\n    (uint model, uint id) = connectorID();\n    EventInterface(getEventAddr()).emitEvent(model, id, eventCode, eventData);\n  }\n\n  /**\n  * @dev Connector Details - needs to be changed before deployment\n  */\n  function connectorID() public view returns(uint model, uint id) {\n    (model, id) = (0, 0);\n  }\n\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: contracts/common/math.sol\n\npragma solidity ^0.6.0;\n\n\ncontract DSMath {\n  uint constant WAD = 10 ** 18;\n  uint constant RAY = 10 ** 27;\n\n  function add(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.add(x, y);\n  }\n\n  function sub(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.sub(x, y);\n  }\n\n  function mul(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.mul(x, y);\n  }\n\n  function div(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.div(x, y);\n  }\n\n  function wmul(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\n  }\n\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\n  }\n\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\n  }\n\n  function rmul(uint x, uint y) internal pure returns (uint z) {\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\n  }\n\n}\n\ninterface OneInchInterace {\n    function swap(\n        TokenInterface fromToken,\n        TokenInterface toToken,\n        uint256 fromTokenAmount,\n        uint256 minReturnAmount,\n        uint256 guaranteedAmount,\n        address payable referrer,\n        address[] calldata callAddresses,\n        bytes calldata callDataConcat,\n        uint256[] calldata starts,\n        uint256[] calldata gasLimitsAndValues\n    )\n    external\n    payable\n    returns (uint256 returnAmount);\n}\n\ninterface OneProtoInterface {\n    function swapWithReferral(\n        TokenInterface fromToken,\n        TokenInterface destToken,\n        uint256 amount,\n        uint256 minReturn,\n        uint256[] calldata distribution,\n        uint256 flags, // See contants in IOneSplit.sol\n        address referral,\n        uint256 feePercent\n    ) external payable returns(uint256);\n\n    function swapWithReferralMulti(\n        TokenInterface[] calldata tokens,\n        uint256 amount,\n        uint256 minReturn,\n        uint256[] calldata distribution,\n        uint256[] calldata flags,\n        address referral,\n        uint256 feePercent\n    ) external payable returns(uint256 returnAmount);\n\n    function getExpectedReturn(\n        TokenInterface fromToken,\n        TokenInterface destToken,\n        uint256 amount,\n        uint256 parts,\n        uint256 flags // See constants in IOneSplit.sol\n    )\n    external\n    view\n    returns(\n        uint256 returnAmount,\n        uint256[] memory distribution\n    );\n}\n\n\ncontract OneHelpers is Stores, DSMath {\n    /**\n     * @dev Return  1Inch Address\n     */\n    function getOneInchAddress() internal pure returns (address) {\n        return 0x11111254369792b2Ca5d084aB5eEA397cA8fa48B;\n    }\n\n    /**\n     * @dev Return 1proto Address\n     */\n    function getOneProtoAddress() internal pure returns (address payable) {\n        return 0x50FDA034C0Ce7a8f7EFDAebDA7Aa7cA21CC1267e;\n    }\n\n    /**\n     * @dev Return 1inch Token Taker Address\n     */\n    function getOneInchTokenTaker() internal pure returns (address payable) {\n        return 0xE4C9194962532fEB467DCe8b3d42419641c6eD2E;\n    }\n\n    /**\n     * @dev Return 1inch swap function sig\n     */\n    function getOneInchSig() internal pure returns (bytes4) {\n        return 0xf88309d7;\n    }\n\n    function getReferralAddr() internal pure returns (address) {\n        return 0xa7615CD307F323172331865181DC8b80a2834324;\n    }\n\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n        amt = (_amt / 10 ** (18 - _dec));\n    }\n\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n        amt = mul(_amt, 10 ** (18 - _dec));\n    }\n\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\n        _amt = address(token) == getEthAddr() ? address(this).balance : token.balanceOf(address(this));\n    }\n\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\n        buyDec = address(buyAddr) == getEthAddr() ?  18 : buyAddr.decimals();\n        sellDec = address(sellAddr) == getEthAddr() ?  18 : sellAddr.decimals();\n    }\n\n    function getSlippageAmt(\n        TokenInterface _buyAddr,\n        TokenInterface _sellAddr,\n        uint _sellAmt,\n        uint unitAmt\n    ) internal view returns(uint _slippageAmt) {\n        (uint _buyDec, uint _sellDec) = getTokensDec(_buyAddr, _sellAddr);\n        uint _sellAmt18 = convertTo18(_sellDec, _sellAmt);\n        _slippageAmt = convert18ToDec(_buyDec, wmul(unitAmt, _sellAmt18));\n    }\n\n    function convertToTokenInterface(address[] memory tokens) internal pure returns(TokenInterface[] memory) {\n        TokenInterface[] memory _tokens = new TokenInterface[](tokens.length);\n        for (uint i = 0; i < tokens.length; i++) {\n            _tokens[i] = TokenInterface(tokens[i]);\n        }\n        return _tokens;\n    }\n}\n\n\ncontract Resolver is OneHelpers {\n    function checkOneInchSig(bytes memory callData) internal pure returns(bool isOk) {\n        bytes memory _data = callData;\n        bytes4 sig;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            sig := mload(add(_data, 32))\n        }\n        isOk = sig == getOneInchSig();\n    }\n\n    function oneProtoSwap(\n        OneProtoInterface oneSplitContract,\n        TokenInterface _sellAddr,\n        TokenInterface _buyAddr,\n        uint _sellAmt,\n        uint unitAmt,\n        uint[] memory distribution,\n        uint disableDexes\n    ) internal returns (uint buyAmt){\n        uint _slippageAmt = getSlippageAmt(_buyAddr, _sellAddr, _sellAmt, unitAmt);\n\n        uint ethAmt;\n        if (address(_sellAddr) == getEthAddr()) {\n            ethAmt = _sellAmt;\n        } else {\n            _sellAddr.approve(address(oneSplitContract), _sellAmt);\n        }\n\n        uint initalBal = getTokenBal(_buyAddr);\n\n        oneSplitContract.swapWithReferral.value(ethAmt)(\n            _sellAddr,\n            _buyAddr,\n            _sellAmt,\n            _slippageAmt,\n            distribution,\n            disableDexes,\n            getReferralAddr(),\n            0\n        );\n\n        uint finalBal = getTokenBal(_buyAddr);\n        buyAmt = sub(finalBal, initalBal);\n\n        require(_slippageAmt <= buyAmt, \"Too much slippage\");\n    }\n\n    function oneProtoSwapMulti(\n        address[] memory tokens,\n        TokenInterface _sellAddr,\n        TokenInterface _buyAddr,\n        uint _sellAmt,\n        uint unitAmt,\n        uint[] memory distribution,\n        uint[] memory disableDexes\n    ) internal returns (uint buyAmt){\n        OneProtoInterface oneSplitContract = OneProtoInterface(getOneProtoAddress());\n        uint _slippageAmt = getSlippageAmt(_buyAddr, _sellAddr, _sellAmt, unitAmt);\n\n        uint ethAmt;\n        if (address(_sellAddr) == getEthAddr()) {\n            ethAmt = _sellAmt;\n        } else {\n            _sellAddr.approve(address(oneSplitContract), _sellAmt);\n        }\n\n        uint initalBal = getTokenBal(_buyAddr);\n        oneSplitContract.swapWithReferralMulti.value(ethAmt)(\n            convertToTokenInterface(tokens),\n            _sellAmt,\n            _slippageAmt,\n            distribution,\n            disableDexes,\n            getReferralAddr(),\n            0\n        );\n        uint finalBal = getTokenBal(_buyAddr);\n\n        buyAmt = sub(finalBal, initalBal);\n\n        require(_slippageAmt <= buyAmt, \"Too much slippage\");\n    }\n\n    function oneInchSwap(\n        TokenInterface _buyAddr,\n        TokenInterface _sellAddr,\n        bytes memory callData,\n        uint sellAmt,\n        uint unitAmt,\n        uint ethAmt\n    ) internal returns (uint buyAmt) {\n        (uint _buyDec, uint _sellDec) = getTokensDec(_buyAddr, _sellAddr);\n        uint _sellAmt18 = convertTo18(_sellDec, sellAmt);\n        uint _slippageAmt = convert18ToDec(_buyDec, wmul(unitAmt, _sellAmt18));\n        uint initalBal = getTokenBal(_buyAddr);\n\n        // solium-disable-next-line security/no-call-value\n        (bool success, ) = address(getOneInchAddress()).call.value(ethAmt)(callData);\n        if (!success) revert(\"1Inch-swap-failed\");\n\n        uint finalBal = getTokenBal(_buyAddr);\n        buyAmt = sub(finalBal, initalBal);\n\n        require(_slippageAmt <= buyAmt, \"Too much slippage\");\n    }\n}\n\ncontract OneProtoResolver is Resolver {\n    event LogSell(\n        address indexed buyToken,\n        address indexed sellToken,\n        uint256 buyAmt,\n        uint256 sellAmt,\n        uint256 getId,\n        uint256 setId\n    );\n\n    event LogSellTwo(\n        address indexed buyToken,\n        address indexed sellToken,\n        uint256 buyAmt,\n        uint256 sellAmt,\n        uint256 getId,\n        uint256 setId\n    );\n\n    event LogSellMulti(\n        address[] tokens,\n        address indexed buyToken,\n        address indexed sellToken,\n        uint256 buyAmt,\n        uint256 sellAmt,\n        uint256 getId,\n        uint256 setId\n    );\n\n    /**\n     * @dev Sell ETH/ERC20_Token using 1split.\n     * @param buyAddr buying token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n     * @param sellAddr selling token amount.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n     * @param sellAmt selling token amount.\n     * @param unitAmt unit amount of buyAmt/sellAmt with slippage.\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\n    */\n    function sell(\n        address buyAddr,\n        address sellAddr,\n        uint sellAmt,\n        uint unitAmt,\n        uint getId,\n        uint setId\n    ) external payable {\n        uint _sellAmt = getUint(getId, sellAmt);\n\n        TokenInterface _buyAddr = TokenInterface(buyAddr);\n        TokenInterface _sellAddr = TokenInterface(sellAddr);\n\n        _sellAmt = _sellAmt == uint(-1) ? getTokenBal(_sellAddr) : _sellAmt;\n\n        OneProtoInterface oneSplitContract = OneProtoInterface(getOneProtoAddress());\n\n        (, uint[] memory distribution) = oneSplitContract.getExpectedReturn(\n                _sellAddr,\n                _buyAddr,\n                _sellAmt,\n                5,\n                0\n            );\n\n        uint _buyAmt = oneProtoSwap(\n            oneSplitContract,\n            _sellAddr,\n            _buyAddr,\n            _sellAmt,\n            unitAmt,\n            distribution,\n            0\n        );\n\n        setUint(setId, _buyAmt);\n\n        emit LogSell(address(_buyAddr), address(_sellAddr), _buyAmt, _sellAmt, getId, setId);\n        bytes32 _eventCode = keccak256(\"LogSell(address,address,uint256,uint256,uint256,uint256)\");\n        bytes memory _eventParam = abi.encode(address(_buyAddr), address(_sellAddr), _buyAmt, _sellAmt, getId, setId);\n        // emitEvent(_eventCode, _eventParam);\n    }\n\n    /**\n     * @dev Sell ETH/ERC20_Token using 1split.\n     * @param buyAddr buying token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n     * @param sellAddr selling token amount.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n     * @param sellAmt selling token amount.\n     * @param unitAmt unit amount of buyAmt/sellAmt with slippage.\n     * @param distribution distribution of swap across different dex.\n     * @param disableDexes disable a dex. (To disable none: 0)\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\n    */\n    function sellTwo(\n        address buyAddr,\n        address sellAddr,\n        uint sellAmt,\n        uint unitAmt,\n        uint[] calldata distribution,\n        uint disableDexes,\n        uint getId,\n        uint setId\n    ) external payable {\n        uint _sellAmt = getUint(getId, sellAmt);\n\n        TokenInterface _buyAddr = TokenInterface(buyAddr);\n        TokenInterface _sellAddr = TokenInterface(sellAddr);\n\n        _sellAmt = _sellAmt == uint(-1) ? getTokenBal(_sellAddr) : _sellAmt;\n\n        uint _buyAmt = oneProtoSwap(\n            OneProtoInterface(getOneProtoAddress()),\n            _sellAddr,\n            _buyAddr,\n            _sellAmt,\n            unitAmt,\n            distribution,\n            disableDexes\n        );\n\n        setUint(setId, _buyAmt);\n\n        emit LogSellTwo(address(_buyAddr), address(_sellAddr), _buyAmt, _sellAmt, getId, setId);\n        bytes32 _eventCode = keccak256(\"LogSellTwo(address,address,uint256,uint256,uint256,uint256)\");\n        bytes memory _eventParam = abi.encode(address(_buyAddr), address(_sellAddr), _buyAmt, _sellAmt, getId, setId);\n        // emitEvent(_eventCode, _eventParam);\n    }\n\n    /**\n     * @dev Sell ETH/ERC20_Token using 1split using muliple token.\n     * @param tokens buying token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n     * @param sellAmt selling token amount.\n     * @param unitAmt unit amount of buyAmt/sellAmt with slippage.\n     * @param distribution distribution of swap across different dex.\n     * @param disableDexes disable a dex. (To disable none: 0)\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\n    */\n    function sellMulti(\n        address[] calldata tokens,\n        uint sellAmt,\n        uint unitAmt,\n        uint[] calldata distribution,\n        uint[] calldata disableDexes,\n        uint getId,\n        uint setId\n    ) external payable {\n        uint _sellAmt = getUint(getId, sellAmt);\n        require(tokens.length >= 2, \"token tokens.lengthgth is less than 2\");\n        TokenInterface _sellAddr = TokenInterface(address(tokens[0]));\n        TokenInterface _buyAddr = TokenInterface(address(tokens[tokens.length-1]));\n\n        _sellAmt = _sellAmt == uint(-1) ? getTokenBal(_sellAddr) : _sellAmt;\n\n        uint _buyAmt = oneProtoSwapMulti(\n            tokens,\n            _sellAddr,\n            _buyAddr,\n            _sellAmt,\n            unitAmt,\n            distribution,\n            disableDexes\n        );\n\n        setUint(setId, _buyAmt);\n\n        emitLogSellMulti(tokens, address(_sellAddr), address(_buyAddr), _buyAmt, _sellAmt, getId, setId);\n    }\n\n    function emitLogSellMulti(\n        address[] memory tokens,\n        address buyToken,\n        address sellToken,\n        uint256 buyAmt,\n        uint256 sellAmt,\n        uint256 getId,\n        uint256 setId\n    ) internal {\n        emit LogSellMulti(tokens, address(buyToken), address(sellToken), buyAmt, sellAmt, getId, setId);\n        bytes32 _eventCode = keccak256(\"LogSellMulti(address[],address,address,uint256,uint256,uint256,uint256)\");\n        bytes memory _eventParam = abi.encode(tokens, address(buyToken), address(sellToken), buyAmt, sellAmt, getId, setId);\n        // emitEvent(_eventCode, _eventParam);\n    }\n}\n\ncontract OneInchResolver is OneProtoResolver {\n    event LogSellThree(\n        address indexed buyToken,\n        address indexed sellToken,\n        uint256 buyAmt,\n        uint256 sellAmt,\n        uint256 getId,\n        uint256 setId\n    );\n\n     /**\n     * @dev Sell ETH/ERC20_Token using 1Inch.\n     * @param buyAddr buying token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n     * @param sellAddr selling token amount.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n     * @param sellAmt selling token amount.\n     * @param unitAmt unit amount of buyAmt/sellAmt with slippage.\n     * @param callData Data from 1inch API.\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\n    */\n    function sellThree(\n        address buyAddr,\n        address sellAddr,\n        uint sellAmt,\n        uint unitAmt,\n        bytes calldata callData,\n        uint setId\n    ) external payable {\n        TokenInterface _buyAddr = TokenInterface(buyAddr);\n        TokenInterface _sellAddr = TokenInterface(sellAddr);\n\n        uint ethAmt;\n        if (address(_sellAddr) == getEthAddr()) {\n            ethAmt = sellAmt;\n        } else {\n            TokenInterface(_sellAddr).approve(getOneInchTokenTaker(), sellAmt);\n        }\n\n        require(checkOneInchSig(callData), \"Not-swap-function\");\n\n        uint buyAmt = oneInchSwap(_buyAddr, _sellAddr, callData, sellAmt, unitAmt, ethAmt);\n\n        setUint(setId, buyAmt);\n\n        emit LogSellThree(address(_buyAddr), address(_sellAddr), buyAmt, sellAmt, 0, setId);\n        bytes32 _eventCode = keccak256(\"LogSellThree(address,address,uint256,uint256,uint256,uint256)\");\n        bytes memory _eventParam = abi.encode(address(_buyAddr), address(_sellAddr), buyAmt, sellAmt, 0, setId);\n        // emitEvent(_eventCode, _eventParam);\n    }\n}\ncontract ConnectOne is OneInchResolver {\n    string public name = \"1Inch-1proto-v1\";\n}\n"
    }
  }
}