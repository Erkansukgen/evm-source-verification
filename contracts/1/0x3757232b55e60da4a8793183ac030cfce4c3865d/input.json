{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"YDR_eth_flat.sol":{"content":"\n// SPDX-License-Identifier: MIT\n\n// File: contracts/LERC20.sol\n\npragma solidity ^0.8.0;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface ILosslessController {\n    function beforeTransfer(address sender, address recipient, uint256 amount) external;\n\n    function beforeTransferFrom(address msgSender, address sender, address recipient, uint256 amount) external;\n\n    function beforeApprove(address sender, address spender, uint256 amount) external;\n\n    function beforeIncreaseAllowance(address msgSender, address spender, uint256 addedValue) external;\n\n    function beforeDecreaseAllowance(address msgSender, address spender, uint256 subtractedValue) external;\n\n    function afterApprove(address sender, address spender, uint256 amount) external;\n\n    function afterTransfer(address sender, address recipient, uint256 amount) external;\n\n    function afterTransferFrom(address msgSender, address sender, address recipient, uint256 amount) external;\n\n    function afterIncreaseAllowance(address sender, address spender, uint256 addedValue) external;\n\n    function afterDecreaseAllowance(address sender, address spender, uint256 subtractedValue) external;\n}\n\ncontract LERC20 is Context, IERC20 {\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n\n    address public recoveryAdmin;\n    address private recoveryAdminCanditate;\n    bytes32 private recoveryAdminKeyHash;\n    address public admin;\n    uint256 public timelockPeriod;\n    uint256 public losslessTurnOffTimestamp;\n    bool public isLosslessTurnOffProposed;\n    bool public isLosslessOn = true;\n    ILosslessController private lossless;\n\n    event AdminChanged(address indexed previousAdmin, address indexed newAdmin);\n    event RecoveryAdminChangeProposed(address indexed candidate);\n    event RecoveryAdminChanged(address indexed previousAdmin, address indexed newAdmin);\n    event LosslessTurnOffProposed(uint256 turnOffDate);\n    event LosslessTurnedOff();\n    event LosslessTurnedOn();\n\n    constructor(uint256 totalSupply_, string memory name_, string memory symbol_, address admin_, address recoveryAdmin_, uint256 timelockPeriod_, address lossless_) {\n        _name = name_;\n        _symbol = symbol_;\n        admin = admin_;\n        _mint(admin, totalSupply_);\n        recoveryAdmin = recoveryAdmin_;\n        timelockPeriod = timelockPeriod_;\n        lossless = ILosslessController(lossless_);\n    }\n\n    // --- LOSSLESS modifiers ---\n\n    modifier lssAprove(address spender, uint256 amount) {\n        if (isLosslessOn) {\n            lossless.beforeApprove(_msgSender(), spender, amount);\n            _;\n            lossless.afterApprove(_msgSender(), spender, amount);\n        } else {\n            _;\n        }\n    }\n\n    modifier lssTransfer(address recipient, uint256 amount) {\n        if (isLosslessOn) {\n            lossless.beforeTransfer(_msgSender(), recipient, amount);\n            _;\n            lossless.afterTransfer(_msgSender(), recipient, amount);\n        } else {\n            _;\n        }\n    }\n\n    modifier lssTransferFrom(address sender, address recipient, uint256 amount) {\n        if (isLosslessOn) {\n            lossless.beforeTransferFrom(_msgSender(),sender, recipient, amount);\n            _;\n            lossless.afterTransferFrom(_msgSender(), sender, recipient, amount);\n        } else {\n            _;\n        }\n    }\n\n    modifier lssIncreaseAllowance(address spender, uint256 addedValue) {\n        if (isLosslessOn) {\n            lossless.beforeIncreaseAllowance(_msgSender(), spender, addedValue);\n            _;\n            lossless.afterIncreaseAllowance(_msgSender(), spender, addedValue);\n        } else {\n            _;\n        }\n    }\n\n    modifier lssDecreaseAllowance(address spender, uint256 subtractedValue) {\n        if (isLosslessOn) {\n            lossless.beforeDecreaseAllowance(_msgSender(), spender, subtractedValue);\n            _;\n            lossless.afterDecreaseAllowance(_msgSender(), spender, subtractedValue);\n        } else {\n            _;\n        }\n    }\n\n    modifier onlyRecoveryAdmin() {\n        require(_msgSender() == recoveryAdmin, \"LERC20: Must be recovery admin\");\n        _;\n    }\n\n    // --- LOSSLESS management ---\n\n    function getAdmin() external view returns (address) {\n        return admin;\n    }\n\n    function transferOutBlacklistedFunds(address[] calldata from) external {\n        require(_msgSender() == address(lossless), \"LERC20: Only lossless contract\");\n        for (uint i = 0; i < from.length; i++) {\n            _transfer(from[i], address(lossless), balanceOf(from[i]));\n        }\n    }\n\n    function setLosslessAdmin(address newAdmin) public onlyRecoveryAdmin {\n        emit AdminChanged(admin, newAdmin);\n        admin = newAdmin;\n    }\n\n    function transferRecoveryAdminOwnership(address candidate, bytes32 keyHash) public onlyRecoveryAdmin {\n        recoveryAdminCanditate = candidate;\n        recoveryAdminKeyHash = keyHash;\n        emit RecoveryAdminChangeProposed(candidate);\n    }\n\n    function acceptRecoveryAdminOwnership(bytes memory key) external {\n        require(_msgSender() == recoveryAdminCanditate, \"LERC20: Must be canditate\");\n        require(keccak256(key) == recoveryAdminKeyHash, \"LERC20: Invalid key\");\n        emit RecoveryAdminChanged(recoveryAdmin, recoveryAdminCanditate);\n        recoveryAdmin = recoveryAdminCanditate;\n    }\n\n    function proposeLosslessTurnOff() public onlyRecoveryAdmin {\n        losslessTurnOffTimestamp = block.timestamp + timelockPeriod;\n        isLosslessTurnOffProposed = true;\n        emit LosslessTurnOffProposed(losslessTurnOffTimestamp);\n    }\n\n    function executeLosslessTurnOff() public onlyRecoveryAdmin {\n        require(isLosslessTurnOffProposed, \"LERC20: TurnOff not proposed\");\n        require(losslessTurnOffTimestamp <= block.timestamp, \"LERC20: Time lock in progress\");\n        isLosslessOn = false;\n        isLosslessTurnOffProposed = false;\n        emit LosslessTurnedOff();\n    }\n\n    function executeLosslessTurnOn() public onlyRecoveryAdmin {\n        isLosslessTurnOffProposed = false;\n        isLosslessOn = true;\n        emit LosslessTurnedOn();\n    }\n\n    // --- ERC20 methods ---\n\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override lssTransfer(recipient, amount) returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override lssAprove(spender, amount) returns (bool) {\n        require((amount == 0) || (_allowances[_msgSender()][spender] == 0), \"LERC20: Cannot change non zero allowance\");\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override lssTransferFrom(sender, recipient, amount) returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"LERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual lssIncreaseAllowance(spender, addedValue) returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual lssDecreaseAllowance(spender, subtractedValue) returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"LERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"LERC20: transfer from the zero address\");\n        require(recipient != address(0), \"LERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"LERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"LERC20: mint to the zero address\");\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"LERC20: approve from the zero address\");\n        require(spender != address(0), \"LERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n// File: contracts/external/UniswapV2Library.sol\n\npragma solidity ^0.8.0;\n\n// Exempt from the original UniswapV2Library.\nlibrary UniswapV2Library {\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(bytes32 initCodeHash, address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                initCodeHash // init code hash\n            )))));\n    }\n}\n\n// File: contracts/external/UniswapV3Library.sol\n\npragma solidity ^0.8.0;\n\n/// @notice based on https://github.com/Uniswap/uniswap-v3-periphery/blob/v1.0.0/contracts/libraries/PoolAddress.sol\n/// @notice changed compiler version and lib name.\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary UniswapV3Library {\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex'ff',\n                            factory,\n                            keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                            POOL_INIT_CODE_HASH\n                        )\n                    )\n                )\n            )\n        );\n    }\n}\n\n// File: contracts/IPLPS.sol\n\npragma solidity ^0.8.0;\n\ninterface IPLPS {\n    function LiquidityProtection_beforeTokenTransfer(\n        address _pool, address _from, address _to, uint _amount) external;\n    function isBlocked(address _pool, address _who) external view returns(bool);\n    function unblock(address _pool, address _who) external;\n}\n\n// File: contracts/UsingLiquidityProtectionService.sol\n\npragma solidity ^0.8.0;\n\n\n\n\nabstract contract UsingLiquidityProtectionService {\n    bool private unProtected = false;\n    IPLPS private plps;\n    uint64 internal constant HUNDRED_PERCENT = 1e18;\n    bytes32 internal constant UNISWAP = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f;\n    bytes32 internal constant PANCAKESWAP = 0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5;\n    bytes32 internal constant QUICKSWAP = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f;\n\n    enum UniswapVersion {\n        V2,\n        V3\n    }\n\n    enum UniswapV3Fees {\n        _005, // 0.05%\n        _03, // 0.3%\n        _1 // 1%\n    }\n\n    modifier onlyProtectionAdmin() {\n        protectionAdminCheck();\n        _;\n    }\n\n    constructor (address _plps) {\n        plps = IPLPS(_plps);\n    }\n\n    function LiquidityProtection_setLiquidityProtectionService(IPLPS _plps) external onlyProtectionAdmin() {\n        plps = _plps;\n    }\n\n    function token_transfer(address from, address to, uint amount) internal virtual;\n    function token_balanceOf(address holder) internal view virtual returns(uint);\n    function protectionAdminCheck() internal view virtual;\n    function uniswapVariety() internal pure virtual returns(bytes32);\n    function uniswapVersion() internal pure virtual returns(UniswapVersion);\n    function uniswapFactory() internal pure virtual returns(address);\n    function counterToken() internal pure virtual returns(address) {\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // WETH\n    }\n    function uniswapV3Fee() internal pure virtual returns(UniswapV3Fees) {\n        return UniswapV3Fees._03;\n    }\n    function protectionChecker() internal view virtual returns(bool) {\n        return ProtectionSwitch_manual();\n    }\n\n    function lps() private view returns(IPLPS) {\n        return plps;\n    }\n\n    function LiquidityProtection_beforeTokenTransfer(address _from, address _to, uint _amount) internal virtual {\n        if (protectionChecker()) {\n            if (unProtected) {\n                return;\n            }\n            lps().LiquidityProtection_beforeTokenTransfer(getLiquidityPool(), _from, _to, _amount);\n        }\n    }\n\n    function revokeBlocked(address[] calldata _holders, address _revokeTo) external onlyProtectionAdmin() {\n        require(protectionChecker(), 'UsingLiquidityProtectionService: protection removed');\n        unProtected = true;\n        address pool = getLiquidityPool();\n        for (uint i = 0; i < _holders.length; i++) {\n            address holder = _holders[i];\n            if (lps().isBlocked(pool, holder)) {\n                token_transfer(holder, _revokeTo, token_balanceOf(holder));\n            }\n        }\n        unProtected = false;\n    }\n\n    function LiquidityProtection_unblock(address[] calldata _holders) external onlyProtectionAdmin() {\n        require(protectionChecker(), 'UsingLiquidityProtectionService: protection removed');\n        address pool = getLiquidityPool();\n        for (uint i = 0; i < _holders.length; i++) {\n            lps().unblock(pool, _holders[i]);\n        }\n    }\n\n    function disableProtection() external onlyProtectionAdmin() {\n        unProtected = true;\n    }\n\n    function isProtected() public view returns(bool) {\n        return not(unProtected);\n    }\n\n    function ProtectionSwitch_manual() internal view returns(bool) {\n        return isProtected();\n    }\n\n    function ProtectionSwitch_timestamp(uint _timestamp) internal view returns(bool) {\n        return not(passed(_timestamp));\n    }\n\n    function ProtectionSwitch_block(uint _block) internal view returns(bool) {\n        return not(blockPassed(_block));\n    }\n\n    function blockPassed(uint _block) internal view returns(bool) {\n        return _block < block.number;\n    }\n\n    function passed(uint _timestamp) internal view returns(bool) {\n        return _timestamp < block.timestamp;\n    }\n\n    function not(bool _condition) internal pure returns(bool) {\n        return !_condition;\n    }\n\n    function feeToUint24(UniswapV3Fees _fee) internal pure returns(uint24) {\n        if (_fee == UniswapV3Fees._03) return 3000;\n        if (_fee == UniswapV3Fees._005) return 500;\n        return 10000;\n    }\n\n    function getLiquidityPool() public view returns(address) {\n        if (uniswapVersion() == UniswapVersion.V2) {\n            return UniswapV2Library.pairFor(uniswapVariety(), uniswapFactory(), address(this), counterToken());\n        }\n        require(uniswapVariety() == UNISWAP, 'LiquidityProtection: uniswapVariety() can only be UNISWAP for V3.');\n        return UniswapV3Library.computeAddress(uniswapFactory(),\n            UniswapV3Library.getPoolKey(address(this), counterToken(), feeToUint24(uniswapV3Fee())));\n    }\n}\n\n// File: contracts/YDR.sol\n\n\npragma solidity ^0.8.0;\n\n\n\ncontract YDR is LERC20, UsingLiquidityProtectionService(0x5C3fB8fF925996da50f03836FD8734270f5016AC) {\n    constructor(uint256 totalSupply_, address admin_, address recoveryAdmin_, uint256 timelockPeriod_, address lossless_) LERC20(totalSupply_, \"YDragon\", \"YDR\", admin_, recoveryAdmin_, timelockPeriod_, lossless_) {\n\n    }\n\n    modifier onlyAdmin() {\n        require(admin == _msgSender(), \"YDR: caller is not the admin\");\n        _;\n    }\n\n    function burn(uint256 amount) external onlyAdmin {\n        _burn(_msgSender(), amount);\n    }\n\n    function token_transfer(address _from, address _to, uint _amount) internal override {\n        _transfer(_from, _to, _amount); // Expose low-level token transfer function.\n    }\n    function token_balanceOf(address _holder) internal view override returns(uint) {\n        return balanceOf(_holder); // Expose balance check function.\n    }\n    function protectionAdminCheck() internal view override onlyAdmin {} // Must revert to deny access.\n    function uniswapVariety() internal pure override returns(bytes32) {\n        return UNISWAP; // UNISWAP / PANCAKESWAP / QUICKSWAP.\n    }\n    function uniswapVersion() internal pure override returns(UniswapVersion) {\n        return UniswapVersion.V3; // V2 or V3.\n    }\n    function uniswapFactory() internal pure override returns(address) {\n        return 0x1F98431c8aD98523631AE4a59f267346ea31F984; // Replace with the correct address.\n    }\n    function _beforeTokenTransfer(address _from, address _to, uint _amount) internal override {\n        super._beforeTokenTransfer(_from, _to, _amount);\n        LiquidityProtection_beforeTokenTransfer(_from, _to, _amount);\n    }\n    // All the following overrides are optional, if you want to modify default behavior.\n\n    // How the protection gets disabled.\n    function protectionChecker() internal view override returns(bool) {\n         return ProtectionSwitch_timestamp(1630367999); // Switch off protection on Monday, August 30, 2021 11:59:59 PM GTM.\n        // return ProtectionSwitch_block(13000000); // Switch off protection on block 13000000.\n//        return ProtectionSwitch_manual(); // Switch off protection by calling disableProtection(); from owner. Default.\n    }\n\n    // This token will be pooled in pair with:\n    function counterToken() internal pure override returns(address) {\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // WETH\n    }\n\n}\n"}}}