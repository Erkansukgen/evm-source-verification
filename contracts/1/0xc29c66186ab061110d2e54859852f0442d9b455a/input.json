{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"localhost/interface/Curve.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.7.0;\n\nabstract contract Curve {\n\t// keccak256(\"ERC20.decimals\")\n\tbytes32 private constant DECIMALS_SLOT = 0x9af4a8efdef7082fbe0a356fe9ce920abbe3461c19ff1888bb79ec1fbee0a564;\n\t// keccak256(\"curve.parameters\")\n\tbytes32 private constant PARAMETERS_SLOT = 0x9bb186d4e76241ac6fcfb26f9c0c67a7a4288892aa856bb2ef40fc277c0bbbe2;\n\t// keccak256(keccak256(\"curve.parameters\"))\n\tbytes32 private constant PARAMETERS_SLOT_HASH = 0x22e3a4713640ec908fad4277bc5c59c3802aee5469f8a18fa0b552bf09d2299b;\n\t\n\tbool public isCurve = true;\n\tfunction name() external view virtual returns (string memory);\n\tstring public url;\n\taddress payable public maintainer;\n\n\tconstructor() {\n\t\tmaintainer = msg.sender;\n\t}\n\n\tfunction updateURL(string memory _url) public {\n\t\trequire(msg.sender == maintainer);\n\t\turl = _url;\n\t}\n\n\t/**\n\t\t* @dev Returns the curve parameters from specified slot.\n\t\t*/\n\tfunction _parameter(uint256 index) internal view returns (uint256 param) {\n\t\tassembly {\n\t\t\tparam := sload(add(PARAMETERS_SLOT_HASH, index))\n\t\t}\n\t}\n\n\t/**\n\t\t* @dev Returns the token decimals from specified slot.\n\t\t*/\n\tfunction _decimals() internal view returns (uint256) {\n\t\tuint256 d;\n\t\tassembly {\n\t\t\td := sload(DECIMALS_SLOT)\n\t\t}\n\t\treturn d;\n\t}\n\n\t/**\n\t\t* @dev Returns the value of the corresponding point on the curve.\n\t\t* @param x corresponding point\n\t\t*/\n\tfunction valueOf(uint256 x) external view virtual returns (uint256);\n\n\t/**\n\t\t* @dev Returns the area between two points on a curve.\n\t\t* @param left left side\n\t\t* @param right right side\n\t\t*/\n\tfunction integral(uint256 left, uint256 right) external view virtual returns (uint256);\n}\n"},"localhost/lib/PowerCurveV2.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.7.0;\n\nimport { Curve } from \"../interface/Curve.sol\";\n\nlibrary SafeMath {\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n  }\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (b == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n\t\tassert(c / b == a);\n\t\treturn c;\n  }\n}\n\ncontract PowerCurve is Curve {\n  using SafeMath for uint256;\n\n\tstring public override name = \"PowerCurveV2\";\n\n\tuint256 constant MAX = 0xc097ce7bc90715b34b9f1000000000; // 1e36\n\n\tfunction valueOf(uint256 x) external view override returns (uint256) {\n\t\tuint256 k = _parameter(0);\n\t\tuint256 a = _parameter(1);\n\t\tuint256 b = _parameter(2);\n\t\tuint256 d = _parameter(3);\n\n\t\trequire(d != 0);\n\n\t\tuint256 decimals = _decimals();\n\t\trequire(decimals <= 36);\n\t\tuint256 unit = 10 ** decimals;\n\n\t\tuint256 a1 = x.add(a);\n\t\tuint256 a2 = a1.mul(a1);\n\n\t\treturn b.add(k.mul(a2 / unit) / unit / d);\n\t}\n\n\tfunction integral(uint256 left, uint256 right) external view override returns (uint256) {\n\t\tassert(right >= left);\n\n\t\tuint256 k = _parameter(0);\n\t\tuint256 a = _parameter(1);\n\t\tuint256 b = _parameter(2);\n\t\tuint256 d = _parameter(3);\n\t\n\t\trequire(d != 0);\n\t\trequire(a < MAX);\n\t\trequire(left < MAX);\n\t\trequire(right < MAX);\n\n\t\tuint256 decimals = _decimals();\n\t\trequire(decimals <= 36);\n\t\tuint256 e = 10 ** decimals;\n\n\t\tuint256 s = left + right;\n\t\tuint256 m = left * right;\n\t\tuint256 m2 = (s * s - m) / 3 + a * s + a * a;\n\n\t\treturn (k.mul(m2 / e) / e / d + b) * (right - left) / e;\n\t}\n}\n\n// 588807\n"}}}