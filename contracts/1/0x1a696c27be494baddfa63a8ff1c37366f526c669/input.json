{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/DSA/static/basic.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @title StaticConnectBasic.\n * @dev Static Connector to withdraw assets.\n */\n\ninterface TokenInterface {\n    function balanceOf(address) external view returns (uint);\n    function transfer(address, uint) external returns (bool);\n}\n\ninterface AccountInterface {\n    function isAuth(address) external view returns (bool);\n}\n\ninterface EventInterface {\n    function emitEvent(uint _connectorType, uint _connectorID, bytes32 _eventCode, bytes calldata _eventData) external;\n}\n\ncontract Memory {\n\n    /**\n     * @dev Return InstaEvent Address.\n     */\n    function getEventAddr() public pure returns (address) {\n        return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97;\n    }\n\n    function connectorID() public pure returns(uint _type, uint _id) {\n        (_type, _id) = (2, 1);\n    }\n\n}\n\ncontract BasicResolver is Memory {\n\n    event LogWithdraw(address erc20, uint tokenAmt, address to);\n\n    /**\n     * @dev ETH Address.\n     */\n    function getEthAddr() public pure returns (address) {\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    }\n\n   /**\n     * @dev Withdraw Assets To Smart Account.\n     * @param erc20 Token Address.\n     * @param tokenAmt Token Amount.\n     */\n    function withdraw(\n        address erc20,\n        uint tokenAmt\n    ) public payable {\n        uint amt;\n        if (erc20 == getEthAddr()) {\n            amt = tokenAmt == uint(-1) ? address(this).balance : tokenAmt;\n            msg.sender.transfer(amt);\n        } else {\n            TokenInterface token = TokenInterface(erc20);\n            amt = tokenAmt == uint(-1) ? token.balanceOf(address(this)) : tokenAmt;\n            token.transfer(msg.sender, amt);\n        }\n\n        emit LogWithdraw(erc20, amt, msg.sender);\n\n        bytes32 _eventCode = keccak256(\"LogWithdraw(address,uint256,address)\");\n        bytes memory _eventParam = abi.encode(erc20, amt, msg.sender);\n        (uint _type, uint _id) = connectorID();\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\n    }\n\n}\n\n\ncontract StaticConnectBasic is BasicResolver {\n    string public constant name = \"Static-Basic-v1\";\n}"}}}