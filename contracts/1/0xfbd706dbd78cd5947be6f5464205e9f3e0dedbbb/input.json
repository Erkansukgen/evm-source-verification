{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "DXSCR.sol": {
      "content": "/**\r\n * @title CMTA20\r\n * Capital Market and Technology Association, 2018-2019\r\n * https://cmta.ch\r\n * \r\n * \r\n * @title CMTA20\r\n * @dev CMTA20 contract since 2018 to 2020\r\n * @author Sébastien Krafft - <sebastien.krafft@mtpelerin.com>\r\n * https://github.com/CMTA/CMTA20\r\n * \r\n * \r\n * @title DXSCR\r\n * @dev DXSCR arrowtrade.ch from 2020\r\n * @author Felix Götz & Colin S. - to the moon :-)\r\n * arrowtrade.ch // securuscoin.com  \r\n * \r\n * \r\n *    ((((((((                                                                                                                                                                                           \r\n     ((((((((((//                                                                                                                                                                                       \r\n     ,((((((((((/////                                                                                                                                                                                   \r\n      /((((((((//////////                                                                                                                                                                               \r\n       ((((((((//////////////.                                                                                                                                                                          \r\n        ((((((///////////////////                                                                                                                                                                       \r\n         ((((////////////////////////                                                                                                                                                                   \r\n          ((////////////////////////////.                                                                                                                                                               \r\n          ((//////////////////////////////                                                                                                                                                              \r\n           ///////////////////////////////                                                                                                                                        .                     \r\n          ///////////////////////////////     ,(                                                                                                                                &&&                     \r\n          ////////////////////////////       ,(((                                                                                    /&                                         %&&                     \r\n        /////////////////////////            (((((         (((((   /((   (((((   /((     /((((((((/    ((((/    ((((     *((((     &&&&        .   (%,     #&&&#           %&&/ %&&        .%%(         \r\n        ///////////////////////               ((/((,       (((((*(((((   (((((*(/(((  ,(/(((((((/((((/  /((((   /((((   ,((((       &&&      &&&,& *&&  &&&     &&      &&      &&&     &&     &&&      \r\n       ////////////////////                    (((((      (((((((       (((((((     *((((/      /((((/  ((((( (((((((,,((((        &&&       &&,        .      &&(   %&&       %&&    &&&&&&&&&&&&     \r\n      /////////////////                  /(((((((((((/     (((((.        (((((.      (((((        (((((   (((((((/ ((((((((         &&&       &&,         *&&   &&(   &&&       %&&   &&&               \r\n     //////////////                     *********((((((    (((((         (((((        (((((      (((((*    (((((/   *(((((          &&&       &&,       &&*     &&(   &&&       %&&   ,&&#         &    \r\n     //////////                                   (((((/   (((((         (((((         (((((((((/((((       /((.      (((           &&&   .   &&/      #&&&    &&&%    &&&#     &&&    *&&&&    .&*     \r\n     /////,                                        //////  /////         /////            ,/(((((/           /         (             (&&&  %%%%%%%%      %&&%   .&&*     ,&&&&. %%        %&&&&/        \r\n                                                                                                        \r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXXNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWNK000XNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKOxoodk0XNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKOxolcldxOKNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOxoc;'';lkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKOdc;;::lodOKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOdl:,....,lOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0xolc:;,;cldOKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKko:,....''';o0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0xollclc:;;;cokKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXko:'...'''''',l0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0doollllllc:;;dNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKxc,...''''''''';dXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkooollllloolxNMMWK0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0d:'..'''''''''''':kWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOoooolcloookNMMNx:coONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0d:'..'''''''''''''':OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOooolcloookNMMWOlc;;:o0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXx:'..'''''''''''''''';kWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOollcloookNMMWOllllc;oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWOl,..'''''''''''''''''',dNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXxllcloookNMMWOolccclxNMMWNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXk:...''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0occloookNMMWOolllccxNMMNxcxXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXd;..'''''''''''''''''''''',xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWNNNNNWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNxccloookNMMWOolllllkNMMWOc;;oKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKo,..''''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNK0kxxxxxxxxxkO0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0ocllookNMMWOlclllokNMMWOol:;;o0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMWKo,..''''''''''''''''''''''''''oNMMMMMMMMMMMMMMMMMMMMMMMMMMMN0xolllllllooolllldkKWMMMMMMMMMMMMMMMMMMMMMMMMMMMXdcloookNMMWOlclllokNMMWOllllc;oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMXd,..''''''''''''''''''''''''''',xWMMMMMMMMMMMMMMMMMMMMMMMMMWXkolllooolllllllllllloONMMMMMMMMMMMMMMMMMMMMMMMMMMNxllollkNMMWOlcllllkNMMWOllllllxNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMNk;..''''''''''''''''''''''''''''';OMMMMMMMMMMMMMMMMMMMMMMMMMMNkoolllooooollclllllllcl0WMMMMMMMMMMMMMMMMMMMMMMMMMWOlllllkNMMWOlclollxNMMWOlllllcxNMMWXNMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMW0c..''''''''''''''''''''''''''''''':0MMMMMMMMMMMMMMMMMMMMMMMMMW0ooollllllllllllllllllllxXMMMMMMMMMMMMMMMMMMMMMMMMMWOllcclkNMMWOlllollxNMMWOollcccxNMMNdcOWMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMXd'..'''''''''''''''''''''''''''''''':0MMMMMMMMMMMMMMMMMMMMMMMMMWOolollloolllooooolcclllldKMMMMMMMMMMMMMMMMMMMMMMMMMM0olc;ckNMMWOlllollxNMMWOlccclcxNMMWk:,lKWMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMWO:..''''''''''''''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMWkllollloooooooool:;:llclo0WMMMMMMMMMMMMMMMMMMMMMMMMM0oolclkNMMWOlclllcxNMMNkccllccxNMMWOl:';kNMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMNd'.''''''''''''''''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMWkllolllooooolllllllcccccdKWMMMMMMMMMMMMMMMMMMMMMMMMM0ollclkNMMWOlcllllxNMMWOllllccxNMMWOlc:,,oXMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMKc..'''''''''''''''''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMWkllollloooollllloooolc::oKWMMMMMMMMMMMMMMMMMMMMMMMMMKdlc:lkNMMWOolllccxNMMWOlcllccxNMMWkc::cc,oXMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMWO;..''''''''''''''''''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMWkloollloooolllooooooolc:l0WMMMMMMMMMMMMMMMMMMMMMMMMW0ollcckNMMWOllll::dNMMWOlcllccxNMMWklccllcdXMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMWx'.''''''''''''''''''''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMNkllollloooollooooollllcco0WMMMMMMMMMMMMMMMMMMMMMMMMMKolc:cxNMMWOllllcckNMMWOlcllllxNMMWOlcccclxNMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMNo..'''''''''''''''''''''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMNkllollloooollooooollllccdKWMMMMMMMMMMMMMMMMMMMMMMMMMKdlc::xNMMWOollc:ckNMMWOlcllllxNMMWOlc:cllkNMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMNo..''''''''''''''''''''''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMNkloollloooolloooooooolccoKWMMMMMMMMMMMMMMMMMMMMMMMMMKolc::xNMMWOllll:cxNMMWOlcllclxNMMWkl::cllkNMMWKXMMMMMMMMMMMMM\r\nMMMMMMMMMMMXl..'''''''''''''''''''''''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMNkllollloooollloooooolllco0WMMMMMMMMMMMMMMMMMMMMMMMMMKolc:ckNMMWOllllccxXMMWkllllccxNMMWOl::cllkNMMNocKMMMMMMMMMMMM\r\nMMMMMMMMMMNl..''''''''''''''''''''''''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMNOllllllooolllllooollllllo0WMMMMMMMMMMMMMMMMMMMMMMMMMKolc:ckNMMWOollcclkNMMWOllccllxNMMWOlc:lllkNMMWx,cKMMMMMMMMMMM\r\nMMMMMMMMMNo..''''''''''''''''''''''''''''''''''''''''''''':KMMMMMMMMMMMMMMMMMMMMMMMMMWOoolllloooollloooollollldKWMMMMMMMMMMMMMMMMMMMMMMMMMKolc:cxNMMWOolccclkNMMWOlcllllxNMMWOlc:cllkNMMWOc'cXMMMMMMMMMM\r\nMMMMMMMMWd..'''''''''''''''''''''''''''''''''''''''''''''':0MMMMMMMMMMMMMMMMMMMMMMMMMW0doollllooooooooooooollldKWMMMMMMMMMMMMMMMMMMMMMMMMM0ollccxNMMWOollcccxNMMWklllllcxNMMWklcclccxNMMWOl:'oNMMMMMMMMM\r\nMMMMMMMWk'.''''''''''''''''''''''''''''''''''''''''''''''':0MMMMMMMMMMMMMMMMMMMMMMMMMMNkoolllllloooooooololllldKWMMMMMMMMMMMMMMMMMMMMMMMMM0ollccxNMMWOollcc:xNMMNkllllllxNMMWOl:ccccxNMMNkll:,dWMMMMMMMM\r\nMMMMMMM0;..''''''''''''''''''''''''''''''''''''''''''''''',kWMMMMMMMMMMMMMMMMMMMMMMMMMWXxolllollllloooollllllld0WWWWWWWWWWWWWWWWWWWWWWWWWW0lcccckNMMWOollc::xNMMNkllllllxNMMWklcccllkNMMWOoll;,OWMMMMMMM\r\nMMMMMMXc..'''''''''''''''''''''''''''''''''''''''''''''''''dNMMMMMMMMMMMMMMMMMMMMMMMMMMWXxlllooolllllloooollllodxkkkkxxkxxxxkxxxkkxxkkkxxxdlcc:cxNMMWOolcc:cxNMMNkllllllxNMMWOllccllkNMMWOollc,:KMMMMMMM\r\nMMMMMWx..''''''''''''''''''''''''''''''''''''''''''''''''''c0MMMMMMMMMMMMMMMMMMMMMMMMMMMMNkollooooollllloololllccoloolllcclllc::llllollcccllll:cxNMMWOlcccccxNMMNkcllllcxNMMWOolccllxNMMWOolllc'oNMMMMMM\r\nMMMMM0;.''''''''''''''''''''''''''''''''''''''''''''''''''',xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0dlloooooollllllllllcclllllllc:clll:;cllloolc::llllccxNMMWOllccccxNMMWkccllccdNMMWOolccllxNMMWOlllll;,OMMMMMM\r\nMMMMNo..''''''''''''''''''''''''''''''''''''''''''''''''''''c0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNOdooooooolllllllllcclllllllccclllc:clclolllc:llllccxXMMWOllccccxNMMWOllccccdNMMWOolccllxNMMWOlllllc'cXMMMMM\r\nMMMM0,.''''''''''''''''''''''''''''''''''''''''''''''''''''',oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkdooooolllolllllcclllllloccllllc:llccllool:clllc:xNMMWOlllccckNMMWklllcccdNMMWOllccllxNMMWOllllll;,kMMMMM\r\nMMMWo..'''''''''''''''''''''''''''''''''''''''''''''''''''''',xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkdooollloloollccllllloolcllllc:lllcllllc:cllc:cxNMMWOlcccclkNMMWklllcccdNMMWkllclllxNMMWOllllllc'cXMMMM\r\nMMM0,.'''''''''''''''''''''''''''''''''''''''''''''''''''''''';kWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOxdlllllloolccllllooolcllllc:llllllccllcc:cccxNMMWOlcccclkNMMNkcllcccdNMMWOllllllxNMMWklllllll;,kMMMM\r\nMMWx..''''''''''''''''''''''''''''''''''''''''''''''''''''''''';kWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWXOdollololcclllooooccllllc:llllllclllcll:::xNMMWkccllclkNMMNkcllcccdNMMWOollcccdNMMWklllllllc'oWMMM\r\nMMNc..'''''''''''''''''''''''''''''''''''''''''''''''''''''''''';kNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0kdooolccolllloolcllllc:lllllccllcclc:::xNMMWOllllclkNMMNkcllcc:dNMMWOolccccdNMMWkllllllll,:KMMM\r\nMM0,.'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''';dXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOxolccol:cooolcllllc:lllll:;clcclc:::xNMMWOllllclkNMMNkcllcc:dXMMWOlcccllxNMMWkllllllll;,kMMM\r\nMMx..''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''',l0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKkllllclooolcllllc:lllll::llc:ccc::xNMMWOlclcclkNMMWklllcc:dNMMWkllllllxNMMWkllllllll:'oWMM\r\nMWo..''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''':xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOxollloolcllllc:lllll::ll;;llc::xNMMWOc:cllokNMMWkllccc:dXMMWkllllllxNMMWkllllllllc'cNMM\r\nMNc..'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''',l0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOdollccllllc:lllcl::ll::llc::xNMMWkccllllkNMMWklccll:dNMMWkllclllxNMMWkllcllllll,:KMM\r\nMX:.''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''';oKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0kolcllllc:llcll::ll:cllc::xNMMWkccllllxXMMWkccllc:dXMMWkllllllxNMMWOlllllllll,;0MM\r\nMK;.''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''';dKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkollllc:cllll::ll::llc:;dNMMWOlcllllxXMMWklllllcdXMMWkllllllxNMMWOlllllclll;,OMM\r\nMK,.''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''';o0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOdllc:lolllc:llccllc::xNMMWOllllllxXMMWklllllcdXMMWkcllllcdXMMWOlllllllll;,OMM\r\nM0,.''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''';lONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkocclolllc:llccllcccxNMMNklllllldXMMWkcllllcxNMMWkllccllkNMMWklllllllll;,kMM\r\nMK;.''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''',cxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXxllllllc:clccllccckNMMWkcclllcdXMMNxcccllcxNMMWkccclllkNMMWklllllllll;,OMM\r\nMK;.'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''';lkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0xolllccclccllc:ckNMMWOlcccllxXMMNxccccccxNMMWkccclllkNMMWOlllllllll;;OMM\r\nMX:.''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''':oONWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOoclc:cc:cllc::xNMMWOllllccxNMMWkllcclcxNMMWOl::cllkNMMWOlllllclll,;0MM\r\nMNl..'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''',cdKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0dl:::clllllc:dXMMWklllllcxNMMWkllcclcxNMMWOlc:cclkNMMWOlllllclll':XMM\r\nMWd..''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''';lONWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXxc;:llllccllxNMMWOllllllkNMMWkllcclcxNMMWklccclcxNMMWOlllllcllc'lNMM\r\nMMk'.''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''',cxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNxcccclllllcdNMMWkllccllkNMMWkllcclcxNMMWOl::cllkNMMWOllllllll:'dWMM\r\nMMK;.'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''';dKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXdllllllllcdXMMWkc::cllkNMMWkcccclcxNMMWOoc:cclkNMMWOlllllcll;,OMMM\r\nMMNl..''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''';o0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXxlllllc:;dNMMWOl:;:llkNMMWklc::ccxNMMWOocccclkNMMWOlllllcll':XMMM\r\nMMMk..''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''';:oKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKdlllc:;;dNMMWOl:;cccxNMMWkll::ccxNMMWOlcccclkNMMWOlllllcl:'dWMMM\r\nMMMX:.'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''';dXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWOollccccxNMMWkc;;clcxNMMWkll::ccxNMMWOlcccclkNMMWOlllllcc,;0MMMM\r\nMMMWd..'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''cONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXxllccllxNMMWOl:;:clkNMMWkll::clxNMMWOlc:ccckNMMWOllllll:'lNMMMM\r\nMMMMK;.'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''',dXMMMMMMMMMMMMMMMMMMMMMMMMMMMMWOolccllxNMMWOl::lllkNMMWklc::ccdNMMWOlc:ccckNMMWOlllllc,,OMMMMM\r\nMMMMWx..'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''l0WMMMMMMMMMMMMMMMMMMMMMMMMMMMXxlccllxNMMWkl:clllkNMMWkccc:::dNMMWOlcccccxNMMWOlllll:'oNMMMMM\r\nMMMMMX:..'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''c0WMMMMMMMMMMMMMMMMMMMMMMMMMMNklc:lcxNMMWOl:clccxNMMWklc::ccxNMMWOlcccccxNMMWOollll,;0MMMMMM\r\nMMMMMMO'.''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMMWOo::ccxNMMWkccccclkNMMWkccccclxNMMWOlc::clxNMMWOllll;,xWMMMMMM\r\nMMMMMMWo..'''''''''''''''''''''''''''''''''''''''''''''''',:cccccccccccccccccccccccccc;'''''''''''''''''''''',dNMMMMMMMMMMMMMMMMMMMMMMMMMW0o::llxNMMWOlcclllxNMMWkllc:ccxNMMWOlc::ccxNMMWklllc'lXMMMMMMM\r\nMMMMMMMXc..''''''''''''''''''''''''''''''''''''''''''''''':0WWWWWWWWWWWWWWWWWWWWWWWWWXo''''''''''''''''''''''':0MMMMMMMMMMMMMMMMMMMMMMMMMMKo::llxNMMWOlclllcxNMMWOol::clkNMMWkcccc:cxNMMWkllc,:KMMMMMMMM\r\nMMMMMMMM0;.'''''''''''''''''''''''''''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMNo''''''''''''''''''''''';OMMMMMMMMMMMMMMMMMMMMMMMMMMKo::llxNMMWOlclllcxNMMWOlc:cclkNMMWkcccllcxNMMWOlc,,kWMMMMMMMM\r\nMMMMMMMMMO,.''''''''''''''''''''''''''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMNo''''''''''''''''''''''';OMMMMMMMMMMMMMMMMMMMMMMMMMM0o::llxNMMWOlclllcxNMMWOlcccllkNMMWkcllllcxNMMWOl;,xWMMMMMMMMM\r\nMMMMMMMMMWk'.'''''''''''''''''''''''''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMNo''''''''''''''''''''''';OMMMMMMMMMMMMMMMMMMMMMMMMMM0o;:llxNMMWOcclllcxNMMWOlcccllkNMMWOlllllcdNMMWk:'dNMMMMMMMMMM\r\nMMMMMMMMMMWx'.''''''''''''''''''''''''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMNo''''''''''''''''''''''';OMMMMMMMMMMMMMMMMMMMMMMMMMMKdc:::xNMMWOl:cllcxNMMWOlc:cllkNMMWOlllllcxNMMWd,oNMMMMMMMMMMM\r\nMMMMMMMMMMMWx'.'''''''''''''''''''''''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMNo''''''''''''''''''''''';OMMMMMMMMMMMMMMMMMMMMMMMMMMKdcc:;dNMMWOlccllcxNMMWOlc::llkNMMWOlllllcdNMMNddNMMMMMMMMMMMM\r\nMMMMMMMMMMMMWk'.''''''''''''''''''''''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMNo''''''''''''''''''''''';OMMMMMMMMMMMMMMMMMMMMMMMMMMKdccccxNMMWOlclllcxNMMWkccccccxNMMWOlllllcdNMMWNNMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMWO,.'''''''''''''''''''''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMNo''''''''''''''''''''''';OMMMMMMMMMMMMMMMMMMMMMMMMMM0occllxNMMWOlclllcxNMMWkcclllcxNMMWOlllllcxNMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMM0:..'''''''''''''''''''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMNo''''''''''''''''''''''';OMMMMMMMMMMMMMMMMMMMMMMMMMMKoccllxNMMWOc:llllkNMMWOolcclcxNMMWOlllllcdNMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMXl..''''''''''''''''''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMNo''''''''''''''''''''''';OMMMMMMMMMMMMMMMMMMMMMMMMMMKdc:;:xNMMWOl:clllkNMMWOllcclcxNMMWOlllll:lXMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMNd'.''''''''''''''''''''''''''''''''''''':KMMMMMMMMMMMMMMMMMMMMMMMMMNo''''''''''''''''''''''';OMMMMMMMMMMMMMMMMMMMMMMMMMMKdcc:cxNMMWOlc:cllkNMMWkclcclcxNMMWOlllc;,dNMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMWO;..''''''''''''''''''''''''''''''''''':KMMMMMMMMMMMMMMMMMMMMMMMMMNo''''''''''''''''''''''';OMMMMMMMMMMMMMMMMMMMMMMMMMMKocc:cxNMMWOlcccccxNMMWkclcclcxNMMWkll:,;kWMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMXo'.'''''''''''''''''''''''''''''''''':KMMMMMMMMMMMMMMMMMMMMMMMMMNo''''''''''''''''''''''';OMMMMMMMMMMMMMMMMMMMMMMMMMMKolc::xNMMWOllllllxNMMWkclcclcxNMMWk:,'lKMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMWO:..'''''''''''''''''''''''''''''''':0MMMMMMMMMMMMMMMMMMMMMMMMMWd,'''''''''''''''''''''';OMMMMMMMMMMMMMMMMMMMMMMMMMM0olc::xNMMWkllllllkNMMWkclcclcxNMMWx';kNMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMNd,..'''''''''''''''''''''''''''''':0MMMMMMMMMMMMMMMMMMMMMMMMMMO;''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMW0lclc:dNMMWOlcclllkNMMWkclcclcdNMMNxdKMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMWKl'.''''''''''''''''''''''''''''';OMMMMMMMMMMMMMMMMMMMMMMMMMMXo''''''''''''''''''''',xWMMMMMMMMMMMMMMMMMMMMMMMMMWOlclllxNMMWOocclllkNMMWkclccl:oXMMWWWMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMW0c...'''''''''''''''''''''''''',kWMMMMMMMMMMMMMMMMMMMMMMMMMMKl,'''''''''''''''''',dNMMMMMMMMMMMMMMMMMMMMMMMMMMNkcccllxNMMWOocclllkNMMWkcc::c:dXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMWOc..''''''''''''''''''''''''''oNMMMMMMMMMMMMMMMMMMMMMMMMMMMXxc,'''''''''''''',lONMMMMMMMMMMMMMMMMMMMMMMMMMMMXxc:cllxNMMWOlcccllkNMMWk:ccc;,oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWOc'..'''''''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOxoc:;;;;;;:loxKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0lcllllxNMMWOlcccllkNMMWx::;,ckNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0l'..''''''''''''''''''''',xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWNXXXXXXNWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNkc:ccccdNMMWklccc::xNMMWx,,lONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKd;...'''''''''''''''''''cKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKdll:;;:xNMMNkllccccxNMMWkd0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNkc'..''''''''''''''''',dNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXxlllc:;:xNMMWklccclcdNMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKd:...''''''''''''''';kWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNklllllcccxNMMWkllc:,,dNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0o;...''''''''''''':OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOlcllll::cxNMMWkc;,;oONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0o:'...'''''''''':OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOoccllcc::lkNMMNxcoONWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKxc,...'''''''';xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXkolccc::::ccdXMMWNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOoc,...''''',l0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0dcclccc;;;,;ckNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOdc;'...'';dKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKxolc::;,;:lokKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0xoc;'..,oONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0xl:;;;:cox0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKkdl::lx0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOoc::lodk0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNK00XNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKOxxOKNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n *\r\n *\r\n */\r\n\r\n\r\npragma solidity ^0.5.3;\r\n\r\nlibrary SafeMath {\r\n  \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n  \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n   \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n   \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n   \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n   \r\n    function totalSupply() external view returns (uint256);\r\n\r\n  \r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n  \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n   \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n   \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n  \r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n   \r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n   \r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n   \r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n  \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n  \r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n   \r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n   \r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n \r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n   \r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    \r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    \r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n   \r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n\r\ncontract Pausable is PauserRole {\r\n   \r\n    event Paused(address account);\r\n\r\n  \r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n   \r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n   \r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    \r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n   \r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n   \r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n   \r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n} \r\n\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n \r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"OW01\");\r\n    _;\r\n  }\r\n\r\n \r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n \r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n \r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0), \"OW02\");\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\ninterface IIssuable {\r\n  function issue(uint256 value) external;\r\n  function redeem(uint256 value) external;\r\n  \r\n  event LogIssued(uint256 value);\r\n\r\n  \r\n  event LogRedeemed(uint256 value);\r\n}\r\n\r\n\r\ninterface IDestroyable {\r\n \r\n  function destroy(address[] calldata shareholders) external;\r\n\r\n \r\n  event LogDestroyed(address[] shareholders);\r\n}\r\n\r\n\r\ninterface IReassignable {\r\n \r\n  function reassign(\r\n    address original,\r\n    address replacement\r\n  ) \r\n    external;\r\n\r\n  \r\n  event LogReassigned(\r\n    address indexed original,\r\n    address indexed replacement,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\ninterface IIdentifiable {\r\n  function identity(address shareholder) external view returns (bytes memory);\r\n  function setMyIdentity(bytes calldata _identity) external;\r\n}\r\n\r\n\r\ninterface IContactable {\r\n  function contact() external view returns (string memory);\r\n  function setContact(string calldata _contact) external;\r\n\r\n\r\n  event LogContactSet(string contact);\r\n}\r\n\r\n\r\ninterface IRule {\r\n  function isTransferValid(\r\n    address _from, address _to, uint256 _amount)\r\n  external view returns (bool isValid);\r\n\r\n  function detectTransferRestriction(\r\n    address _from, address _to, uint256 _amount)\r\n  external view returns (uint8);\r\n\r\n  function canReturnTransferRestrictionCode(uint8 _restrictionCode) external view returns (bool);\r\n  function messageForTransferRestriction(uint8 _restrictionCode) external view returns (string memory);\r\n}\r\n\r\n\r\ninterface IRuleEngine {\r\n\r\n  function setRules(IRule[] calldata rules) external;\r\n  function ruleLength() external view returns (uint256);\r\n  function rule(uint256 ruleId) external view returns (IRule);\r\n  function rules() external view returns(IRule[] memory);\r\n\r\n  function validateTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _amount)\r\n  external view returns (bool);\r\n\r\n  function detectTransferRestriction (\r\n    address _from,\r\n    address _to,\r\n    uint256 _value)\r\n  external view returns (uint8);\r\n\r\n  function messageForTransferRestriction (uint8 _restrictionCode) external view returns (string memory);\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\n .----------------.  .----------------.  .----------------.  .----------------.  .----------------. \r\n| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |\r\n| |  ________    | || |  ____  ____  | || |    _______   | || |     ______   | || |  _______     | |\r\n| | |_   ___ `.  | || | |_  _||_  _| | || |   /  ___  |  | || |   .' ___  |  | || | |_   __ \\    | |\r\n| |   | |   `. \\ | || |   \\ \\  / /   | || |  |  (__ \\_|  | || |  / .'   \\_|  | || |   | |__) |   | |\r\n| |   | |    | | | || |    > `' <    | || |   '.___`-.   | || |  | |         | || |   |  __ /    | |\r\n| |  _| |___.' / | || |  _/ /'`\\ \\_  | || |  |`\\____) |  | || |  \\ `.___.'\\  | || |  _| |  \\ \\_  | |\r\n| | |________.'  | || | |____||____| | || |  |_______.'  | || |   `._____.'  | || | |____| |___| | |\r\n| |              | || |              | || |              | || |              | || |              | |\r\n| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |\r\n '----------------'  '----------------'  '----------------'  '----------------'  '----------------' \r\n*/\r\n \r\n \r\ncontract DXSCR is ERC20, Ownable, Pausable, IContactable, IIdentifiable, IIssuable, IDestroyable, IReassignable {\r\n  using SafeMath for uint256;\r\n\r\n  uint8 constant TRANSFER_OK = 0;\r\n  uint8 constant TRANSFER_REJECTED_PAUSED = 1;\r\n\r\n  string constant TEXT_TRANSFER_OK = \"No restriction\";\r\n  string constant TEXT_TRANSFER_REJECTED_PAUSED = \"All transfers paused\";\r\n\r\n  string public name;\r\n  string public symbol;\r\n  string public contact;\r\n  mapping (address => bytes) internal identities;\r\n  IRuleEngine public ruleEngine;\r\n\r\n  uint8 constant public decimals = 0;\r\n\r\n  constructor(string memory _name, string memory _symbol, string memory _contact) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    contact = _contact;\r\n  }\r\n\r\n  event LogRuleEngineSet(address indexed newRuleEngine);\r\n\r\n\r\n  function setRuleEngine(IRuleEngine _ruleEngine) external onlyOwner {\r\n    ruleEngine = _ruleEngine;\r\n    emit LogRuleEngineSet(address(_ruleEngine));\r\n  }\r\n\r\n\r\n  function setContact(string calldata _contact) external onlyOwner {\r\n    contact = _contact;\r\n    emit LogContactSet(_contact);\r\n  }\r\n\r\n\r\n  function identity(address shareholder) external view returns (bytes memory) {\r\n    return identities[shareholder];\r\n  }\r\n\r\n\r\n  function setMyIdentity(bytes calldata _identity) external {\r\n    identities[msg.sender] = _identity;\r\n  }\r\n\r\n\r\n  function issue(uint256 _value) public onlyOwner {\r\n    _balances[owner] = _balances[owner].add(_value);\r\n    _totalSupply = _totalSupply.add(_value);\r\n\r\n    emit Transfer(address(0), owner, _value);\r\n    emit LogIssued(_value);\r\n  }\r\n\r\n\r\n  function redeem(uint256 _value) public onlyOwner {\r\n    _balances[owner] = _balances[owner].sub(_value);\r\n    _totalSupply = _totalSupply.sub(_value);\r\n\r\n    emit Transfer(owner, address(0), _value);\r\n    emit LogRedeemed(_value);\r\n  }\r\n\r\n\r\n  function canTransfer(address _from, address _to, uint256 _value) public view returns (bool) {\r\n    if (paused()) {\r\n      return false;\r\n    }\r\n    if (address(ruleEngine) != address(0)) {\r\n      return ruleEngine.validateTransfer(_from, _to, _value);\r\n    }\r\n    return true;\r\n  }\r\n\r\n\r\n  function detectTransferRestriction (address _from, address _to, uint256 _value) public view returns (uint8) {\r\n    if (paused()) {\r\n      return TRANSFER_REJECTED_PAUSED;\r\n    }\r\n    if (address(ruleEngine) != address(0)) {\r\n      return ruleEngine.detectTransferRestriction(_from, _to, _value);\r\n    }\r\n    return TRANSFER_OK;\r\n  }\r\n\r\n\r\n  function messageForTransferRestriction (uint8 _restrictionCode) external view returns (string memory) {\r\n    if (_restrictionCode == TRANSFER_OK) {\r\n      return TEXT_TRANSFER_OK;\r\n    } else if (_restrictionCode == TRANSFER_REJECTED_PAUSED) {\r\n      return TEXT_TRANSFER_REJECTED_PAUSED;\r\n    } else if (address(ruleEngine) != address(0)) {\r\n      return ruleEngine.messageForTransferRestriction(_restrictionCode);\r\n    }\r\n  }\r\n\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    if (address(ruleEngine) != address(0)) {\r\n      require(ruleEngine.validateTransfer(msg.sender, _to, _value), \"CM04\");\r\n      return super.transfer(_to, _value);\r\n    } else {\r\n      return super.transfer(_to, _value);\r\n    }\r\n  }\r\n\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    if (address(ruleEngine) != address(0)) {\r\n      require(ruleEngine.validateTransfer(_from, _to, _value), \"CM04\");\r\n      return super.transferFrom(_from, _to, _value);\r\n    } else {\r\n      return super.transferFrom(_from, _to, _value);\r\n    }\r\n  }\r\n\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n\r\n  function increaseAllowance(address _spender, uint256 _addedValue) public whenNotPaused returns (bool)\r\n  {\r\n    return super.increaseAllowance(_spender, _addedValue);\r\n  }\r\n\r\n\r\n  function decreaseAllowance(address _spender, uint256 _subtractedValue) public whenNotPaused returns (bool)\r\n  {\r\n    return super.decreaseAllowance(_spender, _subtractedValue);\r\n  }\r\n\r\n\r\n  function reassign(address original, address replacement) external onlyOwner whenNotPaused {\r\n    require(original != address(0), \"CM01\");\r\n    require(replacement != address(0), \"CM02\");\r\n    require(original != replacement, \"CM03\");\r\n    uint256 originalBalance = _balances[original];\r\n    require(originalBalance != 0, \"CM05\");\r\n    _balances[replacement] = _balances[replacement].add(originalBalance);\r\n    _balances[original] = 0;\r\n    emit Transfer(original, replacement, originalBalance);\r\n    emit LogReassigned(original, replacement, originalBalance);\r\n  }\r\n\r\n\r\n  function destroy(address[] calldata shareholders) external onlyOwner {\r\n    for (uint256 i = 0; i<shareholders.length; i++) {\r\n      require(shareholders[i] != owner, \"CM06\");\r\n      uint256 shareholderBalance = _balances[shareholders[i]];\r\n      _balances[owner] = _balances[owner].add(shareholderBalance);\r\n      _balances[shareholders[i]] = 0;\r\n      emit Transfer(shareholders[i], owner, shareholderBalance);\r\n    }\r\n    emit LogDestroyed(shareholders);\r\n  }\r\n}"
    }
  }
}