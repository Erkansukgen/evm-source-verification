{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"localhost/1_Route.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.6.6;\n\n\nimport './Lib.sol';//'@uniswap/v2-periphery/contracts/libraries/UniswapV2Library.sol';\nimport './IERC20.sol';//'@uniswap/v2-periphery/contracts/interfaces/IERC20.sol';\n// import './Log4s.sol';\n// contract MyRouteX is Log4s{\ncontract MyRouteX {\n\n    //主网\n    address private constant WETH=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address payable private constant creator=0x5f4b30F1c52aFe2829050269F4e8BEb7C7A73003;\n    //测试\n    // address private constant WETH=0xc778417E063141139Fce010982780140Aa0cD5Ab;\n    // address payable private constant creator=0x5f4b30F1c52aFe2829050269F4e8BEb7C7A73003;//测试网\n    // address payable private constant creator=0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;//测试VM\n    \n    // address private constant user1=0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;\n    // address private constant user2=0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;\n    // address private constant user3=0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;\n    // address private constant user4=0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;\n    // address private constant user5=0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;\n\n    constructor () public {//155686gas\n    \t\n    }\n    modifier onlyCreator() {//修饰符：必须是创建者才能调用. 155686gas\n\t    require(msg.sender == creator,'mc');//must Creator\n\t    _;\n  \t}\n    modifier onlyAllowedUsers() {//修饰符：必须组内用户调用\n\t   // require(msg.sender==user1 || msg.sender==user2 || msg.sender==user3 || msg.sender==user4 || msg.sender==user5 ,'ma');//函数修改后，包含大量重复代码\n\t    require(isAllowed(msg.sender),'ma');//must AllowedUsers\n\t    _;\n  \t}\n    receive() external payable {//可接受eth 163612gas\n//\t\tassert(msg.sender == XXX); // only accept ETH via fallback from the XXX contract\n    }\n\n    // function isAllowed(address user) private view returns(bool){//判断是否有权限\n    //     // address[] memory allowedUsers=new address[](2);\n    //     // allowedUsers[0]=creator;\n    //     // allowedUsers[1]=0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;\n    //     for(uint i=0;i<allowedUsers.length;i++){\n    //         if(allowedUsers[i]==user)return true;\n    //     }\n    //     return false;\n    // }\n    function isAllowed(address user) private pure returns(bool){//判断是否有权限\n        address user1=0x0000001aad7DAc00eaF6acF53bEb3A0374B1d75b;\n        address user2=0x0000002b229a0E062b26F5a23cc7bbB62f6Dd5cb;\n        address user3=0x00000034e44a2Fa4d953209319e3A9ed3e6882F1;\n        address user4=0x00000069204379ad78031648549525eB8D9eF6C8;\n        address user5=0x0000008f772AdDf2eAa2b6f4A58386e1176984E7;\n        return user==creator || user==user1 || user==user2 || user==user3 || user==user4 || user==user5;\n    }\n\n\n\tfunction expandR(uint r) private pure returns(uint ret){//解密算法 163612gas\n    \tr=r+256;\n\t    for(uint i = 0; i < 10; i++){\n    \t    ret = ret+(r<<(16*i));\n\t    }\n\t}\n\t\n\t\n\t\n\t// swapExactTokensForTokens\n    function x(uint inA, uint outAMin,address inT,address outT) private{ //163612gas\n        address pair=Lib.pairFor(inT, outT);\n        (uint reserveIn, uint reserveOut) = Lib.getReserves(inT, outT,pair);\n        uint outA = Lib.getAmountOut(inA,reserveIn,reserveOut);\n        if(outA<outAMin)return;\n//        Lib.safeTransferFrom(inT, address(this), pair, inA);//注意可能不是erc20的币，不能IERC20(inT).transfer(),但是必须有transfer()\n        Lib.safeTransferFrom(inT, pair, inA);//注意可能不是erc20的币，不能IERC20(inT).transfer(),但是必须有transfer()\n        //_x(outA, inT, outT);\n        // **** SWAP ****\n    \t// requires the initial amount to have already been sent to the first pair\n        (address t0,) = Lib.sortTokens(inT, outT);\n        (uint outA0, uint outA1) = inT == t0 ? (uint(0), outA) : (outA, uint(0));\n        IUniswapV2Pair(pair).swap(outA0, outA1, address(this), new bytes(0));\n//        pair.call(abi.encodeWithSelector(0x090f344e, outA0, outA1, address(this), new bytes(0)));\n    }\n    \n\t\n    function b(uint inA,uint outAMin,uint r8,uint t) external onlyAllowedUsers{//买 938227gas\n\t\tuint r=expandR(r8);\n\t\taddress tokenId=address(t^r);\n        x(inA^r, outAMin^r, WETH,tokenId);\n    }\n    function s(uint inA,uint outAMin,uint r8,uint t) external onlyAllowedUsers{//卖 1040803gas\n\t\tuint r=expandR(r8);\n\t\taddress tokenId=address(t^r);\n\t\tuint inAr=inA^r;\n\t\tif(IERC20(tokenId).balanceOf(address(this))<inAr)return;//判断是否有足够币卖出\n        x(inAr, outAMin^r, tokenId,WETH);\n    }\n    function s(uint inA,uint outAMin,uint r8,uint t,uint obAddr,uint obBalance) external onlyAllowedUsers{//卖 1040803gas\n\t\tuint r=expandR(r8);\n\t\taddress tokenId=address(t^r);\n\t\tuint inAr=inA^r;\n\t\tif(IERC20(tokenId).balanceOf(address(this))<inAr)return;//判断是否有足够币卖出\n\t\tif(IERC20(tokenId).balanceOf(address(obAddr^r))<=obBalance^r)return;//观察的tx没有成交\n        x(inAr, outAMin^r, tokenId,WETH);\n    }\n    \n    \n    function getEth() external onlyCreator {//提取eth到创建者账户 1111319gas\n        creator.transfer(address(this).balance);\n    }\n    function getTokenById(address token,uint amount) external onlyCreator {\n    \tIERC20(token).transfer(creator, amount);//1eth=0xDE0B6B3A7640000\n    }\n    \n    \n    \n\n    \n    \n    \n}\n\n\n\n"},"localhost/IERC20.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"},"localhost/IUniswapV2Pair.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"},"localhost/Lib.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\n\nimport \"./IUniswapV2Pair.sol\";//'@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol'\nimport \"./SafeMath.sol\";\n\n\n\nlibrary Lib {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'ia');//UniswapV2Library: IDENTICAL_ADDRESSES\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'za');//UniswapV2Library: ZERO_ADDRESS\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address tokenA, address tokenB) internal pure returns (address) {//根据tokenA和tokenB计算pair地址\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        return address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f,//工场地址，测试和主网相同\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n            ))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address tokenA, address tokenB,address pair) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pair).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n//    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n//        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n//        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n//        amountB = amountA.mul(reserveB) / reserveA;\n//    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n//    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'iia');//UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\n        require(reserveIn > 0 && reserveOut > 0, 'il');//UniswapV2Library: INSUFFICIENT_LIQUIDITY\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n//    function getOutA(uint amountIn, address inT,address outT,address pairId) internal view returns (uint) {\n//        (uint reserveIn, uint reserveOut) = getReserves(inT, outT,pairId);\n//        getOutA(amountIn,reserveIn,reserveOut);\n//    }\n    \n    \n    \n    \n/*\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n*/\n//    function getOutA(uint amountIn, address inT,address outT) internal view returns (uint) {\n//        (uint reserveIn, uint reserveOut) = getReserves(inT, outT);\n//        return getAmountOut(amountIn, reserveIn, reserveOut);\n//    }\n    \n    //TransferHelper.safeTransferFrom()\n//    function safeTransferFrom(address token,address from,address to,uint256 value) internal {\n//        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));// bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n//        require(success && (data.length == 0 || abi.decode(data, (bool))), 'tf');//TransferHelper::transferFrom: transferFrom failed\n//    }\n    function safeTransferFrom(address token,address to,uint256 value) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb,to,value));//bytes4(keccak256(bytes('transfer(address,uint256)')));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'tf');//TransferHelper::transferFrom: transferFrom failed\n    }\n//    function transfer(address token,address to,uint256 value) internal {\n//        token.call(abi.encodeWithSelector(0xa9059cbb,to,value));//bytes4(keccak256(bytes('transfer(address,uint256)')));\n//    }\n//    function balanceOf(address token,address owner) internal returns(uint){\n//        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x70a08231,owner));//bytes4(keccak256(bytes('balanceOf(address)')));\n//        return abi.decode(data, (uint));\n//    }\n    \n    \n}\n"},"localhost/SafeMath.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.6.6;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n"}}}