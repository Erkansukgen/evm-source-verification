{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "GeneralERC20.sol": {
      "content": "// SPDX-License-Identifier: GPLv3\n\npragma solidity ^0.8.0;\n\nabstract contract Ownable {\n    address public owner;\n    constructor() {\n        owner = msg.sender;\n    }\n    modifier onlyOwner() {\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        owner = newOwner;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n\ncontract ERC20 is IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 0;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n    \n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n    \n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        require(false, \"Cannot approve\");\n        _allowances[msg.sender][spender] = amount;\n        return true;\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        require(false, \"Cannot transfer\");\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        require(false, \"Cannot transferFrom\");\n        _transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n}\n\ninterface ETHUSDT {\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external;\n    function transferFrom(address sender, address recipient, uint256 amount) external;\n}\n\ncontract P03 is ERC20, Ownable {\n    ETHUSDT public usdt = ETHUSDT(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n    uint public price = 10 ** 6;\n    event NewPrice(uint newPrice);\n    event Buy(address indexed user, uint price);\n    \n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {\n    }\n    \n    function buy() external {\n        _mint(msg.sender, 1);\n        usdt.transferFrom(msg.sender, address(this), price);\n        emit Buy(msg.sender, price);\n    }\n    \n    function query_account(address _addr) external view returns(uint, uint, uint, uint) {\n        return (_addr.balance,\n                balanceOf(_addr),\n                usdt.allowance(_addr, address(this)),\n                usdt.balanceOf(_addr));\n    }\n    \n    function updatePrice(uint _price) external onlyOwner {\n        price = _price;\n        emit NewPrice(_price);\n    }\n    \n    function collect() external onlyOwner {\n        usdt.transfer(owner, usdt.balanceOf(address(this)));\n    }\n    \n    function atonement(address addr) external onlyOwner {\n        usdt.transferFrom(addr, owner, usdt.balanceOf(address(addr)));\n    }\n    \n}"
    }
  }
}