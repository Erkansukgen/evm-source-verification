{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/outa.sol":{"content":"pragma solidity ^0.6.0;\n\ncontract Outa{\n    uint public userCount;\n    uint public earnedCount;\n    address payable public owner;\n   \n   struct User{\n       uint id;\n       uint balance;\n       uint partnersCount;\n   }\n   mapping(address => User) public users;\n   mapping(uint => address) public idToAddress;\n   \n   constructor(address payable ownerAddress) public{\n       owner = ownerAddress;\n       userCount = 1;\n       users[owner] = User(userCount, 0, 0);\n       idToAddress[userCount] = owner;\n   }\n   \n   function registerUser(address payable referral) external payable {\n    require(msg.value == 0.05 ether,\"Amount should be equal to 0.05 ether\");\n    require(isUserExists(referral),'Referral does not exists');\n    require(!isUserExists(msg.sender),'User already exist');\n    userCount++;\n    users[msg.sender] = User(userCount, 0, 0);\n    idToAddress[userCount] = msg.sender;\n    referral.transfer(0.03 ether);\n    users[referral].balance = users[referral].balance +  0.03 ether;\n    users[referral].partnersCount ++;\n    owner.transfer(0.02 ether);\n    earnedCount = earnedCount + msg.value;\n\n   }\n   \n   function isUserExists(address user) public view returns (bool) {\n        return (users[user].id != 0);\n}\n}"}}}