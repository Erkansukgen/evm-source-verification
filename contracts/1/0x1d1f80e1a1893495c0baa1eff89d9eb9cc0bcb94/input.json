{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/pocr.sol": {
      "content": "pragma solidity ^0.5.0;\n\ncontract ProofOfContributionRepresentatives {\n    string public constant name= \"ProofOfContributionRepresentatives\";\n    string public constant symbol = \"POCR\";\n    uint8 public constant decimals = 8;\n\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n    event Transfer(address indexed from, address indexed to, uint tokens);\n\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    uint256 public totalSupply;\n    address public owner;\n\n    using SafeMath for uint256;\n\n    constructor() public {\n        totalSupply = 2100000000e8;\n        owner = msg.sender;\n        balances[msg.sender] = totalSupply;\n    }\n\n    function balanceOf(address tokenOwner) public view returns (uint) {\n        return balances[tokenOwner];\n    }\n\n    function transfer(address receiver, uint numTokens) public returns (bool) {\n        require(numTokens <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\n        balances[receiver] = balances[receiver].add(numTokens);\n        emit Transfer(msg.sender, receiver, numTokens);\n        return true;\n    }\n\n    function approve(address delegate, uint numTokens) public returns (bool) {\n        allowed[msg.sender][delegate] = numTokens;\n        emit Approval(msg.sender, delegate, numTokens);\n        return true;\n    }\n\n    function allowance(address from, address delegate) public view returns (uint) {\n        return allowed[from][delegate];\n    }\n\n    function transferFrom(address from, address buyer, uint numTokens) public returns (bool) {\n        require(numTokens <= balances[from]);\n        require(numTokens <= allowed[from][msg.sender]);\n\n        balances[from] = balances[from].sub(numTokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(numTokens);\n        balances[buyer] = balances[buyer].add(numTokens);\n        emit Transfer(from, buyer, numTokens);\n        return true;\n    }\n\n    function burnFrom(address from, uint numTokens) public returns (bool) {\n        require(numTokens <= balances[from]);\n        require(msg.sender == owner);\n        balances[from] = balances[from].sub(numTokens);\n        balances[owner] = balances[owner].add(numTokens);\n        return true;\n    }\n}\n\nlibrary SafeMath {\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}"
    }
  }
}