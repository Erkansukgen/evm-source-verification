{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "localhost/arb-bot/contracts/ArbBot.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.7.1;\n\nimport \"../../import/github/Uniswap/uniswap-v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport \"../../import/github/Uniswap/uniswap-v1/IUniswapExchangeInterface.sol\";\nimport \"../../import/github/KyberNetwork/smart-contracts/contracts/sol6/IKyberNetworkProxy.sol\";\nimport \"../../import/github/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\";\n\n\ncontract ArbBot {\n\n\n    //\n    // Chain config\n    //\n    \n    uint internal constant MAINNET = 1;\n    uint internal constant ROPSTEN = 2;\n    \n    //\n    // Exch config\n    //\n    \n    address internal constant UNISWAP_V2_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n  \n    address internal constant SUSHISWAP_V1_MAINNET_ROUTER_ADDRESS = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\n\n    address internal constant KYBER_V1_MAINNET_NETWORK_PROXY = 0x9AAb3f75489902f3a48495025729a0AF77d4b11e;\n    address internal constant KYBER_V1_ROPSTEN_NETWORK_PROXY = 0xd719c34261e099Fdb33030ac8909d5788D3039C4;\n    \n    //\n    // Trade config\n    //\n    \n    uint internal constant UNISWAP_V2 = 1;\n    uint internal constant SUSHISWAP_V1 = 2;\n    uint internal constant UNISWAP_V1 = 3;\n    uint internal constant KYBER_V1 = 4;\n    \n    //\n    // Misc\n    //\n    \n    address internal constant WETH_ADDRESS = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n    address internal constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    ERC20 internal constant ETH_TOKEN = ERC20(ETH_ADDRESS);\n    uint internal constant MAX_QTY = (10**28); // 10B tokens\n    uint internal constant DEADLINE_OFFSET_SECS = 15;\n\n\n    uint private chainId;\n    address private owner;\n\n    IUniswapV2Router02 private uniswapV2Router;\n    IUniswapV2Router02 private sushiswapV1Router;\n    IKyberNetworkProxy private kyberV1NetworkProxy;\n    \n    \n    // modifier to check if caller is owner\n    modifier isOwner() {\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n\n\n    constructor(uint _chainId) public {\n        require(((_chainId == MAINNET) || (_chainId == ROPSTEN)), 'chainId must be MAINNET or ROPSTEN');\n        chainId = _chainId;\n        \n        owner = msg.sender;\n\n        // Uniswap V2 addresses consistent across chains\n        uniswapV2Router = IUniswapV2Router02(UNISWAP_V2_ROUTER_ADDRESS);\n        \n        if (chainId == MAINNET) {\n            sushiswapV1Router = IUniswapV2Router02(SUSHISWAP_V1_MAINNET_ROUTER_ADDRESS);\n            kyberV1NetworkProxy = IKyberNetworkProxy(KYBER_V1_MAINNET_NETWORK_PROXY);\n        }\n        else if (chainId == ROPSTEN) {\n            // No ropsten sushiswap\n            kyberV1NetworkProxy = IKyberNetworkProxy(KYBER_V1_ROPSTEN_NETWORK_PROXY);\n        }\n    }\n    \n    \n    //\n    // Trade\n    //\n\n    \t\n    function trade(\n        uint buyExch, \n    \tuint sellExch, \n    \taddress targetAddress, \n    \tuint minTokenAmountOut, \n    \tuint minBaseTotalOut, \n    \taddress exchAddress, // Uniswap v1\n    \tuint buyExchangeRate, // Kyber v1\n    \tuint sellExchangeRate // Kyber v1\n    \t) public isOwner payable {\n    \t  \n    \t    require((msg.value > 0), 'msg.value must be > 0');\n            require(isValidExch(buyExch), 'buyExch invalid');\n            require(isValidExch(sellExch), 'sellExch invalid');\n            require((buyExch != sellExch), 'buy and sell exch can not be the same');\n            require((targetAddress != address(0)), 'targetAddress can not be null');\n            require(isValidTargetAddress(targetAddress), 'targetAddress can not be ETH or WETH');\n            require((minTokenAmountOut > 0), 'minTokenAmountOut must be > 0');\n            // TODO - suspend for test\n            // require((minBaseTotalOut > msg.value), 'minBaseTotalOut must be > eth in');\n\n            if ((buyExch == UNISWAP_V1) || (sellExch == UNISWAP_V1)) {\n                require((exchAddress != address(0)), 'exchAddress can not be null');\n            }\n\n    \t    if (buyExch == KYBER_V1) {\n                require((buyExchangeRate > 0), 'buyExchangeRate must be > 0');\n            }   \n    \t        \n    \t    if (sellExch == KYBER_V1) {\n                require((sellExchangeRate > 0), 'sellExchangeRate must be > 0');\n            } \n            \n            // Make the buy\n            \n            if (buyExch == UNISWAP_V2) {\n                doUniswapV2Buy(targetAddress, minTokenAmountOut);\n            }\n            else if (buyExch == SUSHISWAP_V1) {\n                doSushiswapV1Buy(targetAddress, minTokenAmountOut);\n            }\n            else if (buyExch == UNISWAP_V1) {\n                doUniswapV1Buy(exchAddress, minTokenAmountOut);\n            }\n            else if (buyExch == KYBER_V1) {\n                doKyberV1Buy(targetAddress, buyExchangeRate);\n            }           \n            \n            uint tokenAmountBought = getTokenBalance(targetAddress);\n            require((tokenAmountBought >= minTokenAmountOut), 'tokenAmountBought < minTokenAmountOut');\n\n            // Make the sell\n            \n            if (sellExch == UNISWAP_V2) {\n                doUniswapV2Sell(targetAddress, tokenAmountBought, minBaseTotalOut);\n            }\n            else if (sellExch == SUSHISWAP_V1) {\n                doSushiswapV1Sell(targetAddress, tokenAmountBought, minBaseTotalOut);\n            }\n            else if (sellExch == UNISWAP_V1) {\n                doUniswapV1Sell(targetAddress, tokenAmountBought, minBaseTotalOut, exchAddress);\n            }\n            else if (sellExch == KYBER_V1) {\n                doKyberV1Sell(targetAddress, tokenAmountBought, sellExchangeRate);\n            }\n    \t        \n    }\n    \n    \n    //\n    // Uniswap v1\n    //\n    \n    \n    // Input: eth from wallet; output: tokens to contract\n    // minTokenAmountOut - must be decimalised\n    function doUniswapV1Buy(address exchAddress, uint minTokenAmountOut) public isOwner payable {\n        \n        UniswapExchangeInterface uniswapV1Exchange = UniswapExchangeInterface(exchAddress);\n        \n        uint deadline = block.timestamp + DEADLINE_OFFSET_SECS;\n        \n        uint tokenAmountOut = uniswapV1Exchange.ethToTokenSwapInput{ value: msg.value }(minTokenAmountOut, deadline);\n    }\n    \n    \n    // Input: tokens in contract; output: eth to wallet\n    // tokenAmountIn, minBaseTotalOut - must be decimalised\n    function doUniswapV1Sell(address targetAddress, uint tokenAmountIn, uint minBaseTotalOut, address exchAddress) public isOwner {\n        \n        doExchangeApproval(targetAddress, tokenAmountIn, exchAddress);\n\n        UniswapExchangeInterface uniswapV1Exchange = UniswapExchangeInterface(exchAddress);\n        \n        uint deadline = block.timestamp + DEADLINE_OFFSET_SECS;\n        \n        uint baseTotalOut = uniswapV1Exchange.tokenToEthTransferInput(tokenAmountIn, minBaseTotalOut, deadline, msg.sender);\n    }\n    \n    \n    //\n    // Kyber v1\n    //\n    \n    \n    // Input: eth from wallet; output: tokens to contract\n    // buyExchangeRate - must be decimalised\n    function doKyberV1Buy(address targetAddress, uint buyExchangeRate) public isOwner payable {\n        \n        ERC20 targetToken = ERC20(targetAddress);\n        \n        bytes memory hint;\n        \n        uint tokenAmountOut = kyberV1NetworkProxy.tradeWithHintAndFee{value: msg.value}(\n            ETH_TOKEN,\n            msg.value,\n            targetToken,\n            address(this),\n            MAX_QTY,\n            buyExchangeRate,\n            address(0),\n            0,\n            hint);\n            \n    }\n    \n    \n    // Input: tokens in contract; output: eth to wallet\n    // tokenAmountIn, sellExchangeRate - must be decimalised\n    function doKyberV1Sell(address targetAddress, uint tokenAmountIn, uint sellExchangeRate) public isOwner {\n        \n        doExchangeApproval(targetAddress, tokenAmountIn, address(kyberV1NetworkProxy));\n\n        ERC20 targetToken = ERC20(targetAddress);\n        \n        bytes memory hint;\n        \n        uint baseTotalOut = kyberV1NetworkProxy.tradeWithHintAndFee(\n            targetToken,\n            tokenAmountIn,\n            ETH_TOKEN,\n            msg.sender,\n            MAX_QTY,\n            sellExchangeRate,\n            address(0),\n            0,\n            hint);\n            \n    }\n    \n    \n    //\n    // Sushiswap v1\n    //\n    \n    \n    // Input: eth from wallet; output: tokens to contract\n    // minTokenAmountOut - must be decimalised\n    function doSushiswapV1Buy(address targetAddress, uint minTokenAmountOut) public isOwner payable {\n        _doUniswapV2Buy(sushiswapV1Router, minTokenAmountOut, targetAddress);\n    }\n    \n    \n    // Input: tokens in contract; output: eth to wallet\n    // tokenAmountIn, minBaseTotalOut - must be decimalised\n    function doSushiswapV1Sell(address targetAddress, uint tokenAmountIn, uint minBaseTotalOut) public isOwner {\n        _doUniswapV2Sell(sushiswapV1Router, tokenAmountIn, minBaseTotalOut, targetAddress);\n    }\n    \n    \n    //\n    // Uniswap v2\n    //\n\n\n    // Input: eth from wallet; output: tokens to contract\n    // minTokenAmountOut - must be decimalised\n    function doUniswapV2Buy(address targetAddress, uint minTokenAmountOut) public isOwner payable {\n        _doUniswapV2Buy(uniswapV2Router, minTokenAmountOut, targetAddress);\n    }\n    \n    \n    // Input: tokens in contract; output: eth to wallet\n    // tokenAmountIn, minBaseTotalOut - must be decimalised\n    function doUniswapV2Sell(address targetAddress, uint tokenAmountIn, uint minBaseTotalOut) public isOwner {\n        _doUniswapV2Sell(uniswapV2Router, tokenAmountIn, minBaseTotalOut, targetAddress);\n    }\n    \n    \n    // Input: eth from wallet; output: tokens to contract\n    // minTokenAmountOut - must be decimalised\n    function _doUniswapV2Buy(IUniswapV2Router02 _uniswapV2Router, uint minTokenAmountOut, address targetAddress) private {\n        \n        address[] memory path = new address[](2);\n        path[0] = uniswapV2Router.WETH();\n        path[1] = targetAddress;\n    \n        address to = address(this);\n        \n        uint deadline = block.timestamp + DEADLINE_OFFSET_SECS;\n\n        uint[] memory amounts = _uniswapV2Router.swapExactETHForTokens{ value: msg.value }(minTokenAmountOut, path, to, deadline);\n        \n        // amounts[0] will contain token amount out\n        uint tokenAmountOut = amounts[0];\n    }\n    \n    \n    // Input: tokens in contract; output: eth to wallet\n    // tokenAmountIn, minBaseTotalOut - must be decimalised\n    function _doUniswapV2Sell(IUniswapV2Router02 _uniswapV2Router, uint tokenAmountIn, uint minBaseTotalOut, address targetAddress) private {\n\n        doExchangeApproval(targetAddress, tokenAmountIn, address(_uniswapV2Router));\n\n        address[] memory path = new address[](2);\n        path[0] = targetAddress;\n        path[1] = uniswapV2Router.WETH();\n    \n        address to = msg.sender;\n        \n        uint deadline = block.timestamp + DEADLINE_OFFSET_SECS;\n\n        uint[] memory amounts = _uniswapV2Router.swapExactTokensForETH(tokenAmountIn, minBaseTotalOut, path, to, deadline);\n\n        // amounts[1] will contain base total out\n        uint baseTotalOut = amounts[1];\n    }\n    \n    \n    //\n    // Eth/token in/out\n    //\n\n\n    // Get contract's token balance\n    function getTokenBalance(address targetAddress) public isOwner view returns (uint _balance) {\n        ERC20 targetToken = ERC20(targetAddress);\n        uint balance = targetToken.balanceOf(address(this));\n        return balance;\n    }\n    \n\n    // Transfer tokens from contract to wallet -\n    // this requires approving this contract on the token before calling this function\n    function doTokenOut(address targetAddress, uint tokenAmountOut) public isOwner returns (bool) {\n        ERC20 targetToken = ERC20(targetAddress);\n        targetToken.transfer(owner, tokenAmountOut);\n        return true;\n    }\n    \n    \n    // Transfer eth to wallet\n    function doEthOut(uint ethOut) public isOwner {\n        payable(owner).transfer(ethOut);\n    }\n    \n    \n    //\n    // Contract\n    //\n    \n    \n    function selfDestruct() public isOwner {\n        selfdestruct(payable(owner));\n    }\n\n\n    // important to receive ETH\n    receive() payable external {}\n    \n    \n    //\n    // Private\n    //\n\n\n    // Contract approve use of the exchange for the token\n    function doExchangeApproval(address targetAddress, uint tokenAmountIn, address exchAddress) private returns (bool) {\n        ERC20 targetToken = ERC20(targetAddress);\n        require(targetToken.approve(address(exchAddress), tokenAmountIn), 'doExchangeApproval failed for exchange');\n        return true;\n    }\n    \n    \n    function isValidExch(uint exch) private returns (bool) {\n        \n        if (chainId == MAINNET) {\n            if ((exch == UNISWAP_V2) || (exch == UNISWAP_V1) || (exch == SUSHISWAP_V1) || (exch == KYBER_V1)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else if (chainId == ROPSTEN) {\n            if ((exch == UNISWAP_V2) || (exch == UNISWAP_V1) || (exch == KYBER_V1)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        \n        return false;\n    }\n    \n    \n    function isValidTargetAddress(address targetAddress) private returns (bool) {\n        if ((targetAddress == ETH_ADDRESS) || (targetAddress == WETH_ADDRESS)) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    \n    \n    //\n    // Test\n    //\n    \n    \n    function testUniswapV1(address targetAddress, uint minTokenAmountOut, uint minBaseTotalOut, address exchAddress) public isOwner payable {\n        doUniswapV1Buy(exchAddress, minTokenAmountOut);\n        uint tokenAmountBought = getTokenBalance(targetAddress);\n        doUniswapV1Sell(targetAddress, tokenAmountBought, minBaseTotalOut, exchAddress);\n    }\n    \n    \n    function testUniswapV2(address targetAddress, uint minTokenAmountOut, uint minBaseTotalOut) public isOwner payable {\n        doUniswapV2Buy(targetAddress, minTokenAmountOut);\n        uint tokenAmountBought = getTokenBalance(targetAddress);\n        doUniswapV2Sell(targetAddress, tokenAmountBought, minBaseTotalOut);\n    }\n    \n    \n    function testSushiswapV1(address targetAddress, uint minTokenAmountOut, uint minBaseTotalOut) public isOwner payable {\n        doSushiswapV1Buy(targetAddress, minTokenAmountOut);\n        uint tokenAmountBought = getTokenBalance(targetAddress);\n        doSushiswapV1Sell(targetAddress, tokenAmountBought, minBaseTotalOut);\n    }\n\n\n    function testKyberV1(address targetAddress) public isOwner payable {\n        // uint buyExchangeRate = testKyberV1ExpectedBuyRate(msg.value, targetAddress);\n        doKyberV1Buy(targetAddress, 500000000000000000000);\n        uint tokenAmountBought = getTokenBalance(targetAddress);\n        // uint sellExchangeRate = testKyberV1ExpectedSellRate(tokenAmountBought, targetAddress);\n        doKyberV1Sell(targetAddress, tokenAmountBought, 1000000000000000);\n    }\n    \n    \n    function testKyberV1ExpectedBuyRate(address targetAddress, uint baseTotalIn) public isOwner view returns (uint) {\n        ERC20 targetToken = ERC20(targetAddress);\n        (uint expectedRate, uint worstRate) = kyberV1NetworkProxy.getExpectedRate(ETH_TOKEN, targetToken, baseTotalIn);\n        return expectedRate;\n    }\n    \n    \n    function testKyberV1ExpectedSellRate(address targetAddress, uint tokenAmountIn) public isOwner view returns (uint) {\n        ERC20 targetToken = ERC20(targetAddress);\n        (uint expectedRate, uint worstRate) = kyberV1NetworkProxy.getExpectedRate( targetToken, ETH_TOKEN, tokenAmountIn);\n        return expectedRate;\n    }\n\n}\n"
    },
    "localhost/import/github/KyberNetwork/smart-contracts/contracts/sol6/IKyberNetworkProxy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.6.6;\n\nimport \"../../../../openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\";\n\n\ninterface IKyberNetworkProxy {\n\n    event ExecuteTrade(\n        address indexed trader,\n        IERC20 src,\n        IERC20 dest,\n        address destAddress,\n        uint256 actualSrcAmount,\n        uint256 actualDestAmount,\n        address platformWallet,\n        uint256 platformFeeBps\n    );\n\n    /// @notice backward compatible\n    function tradeWithHint(\n        ERC20 src,\n        uint256 srcAmount,\n        ERC20 dest,\n        address payable destAddress,\n        uint256 maxDestAmount,\n        uint256 minConversionRate,\n        address payable walletId,\n        bytes calldata hint\n    ) external payable returns (uint256);\n\n    function tradeWithHintAndFee(\n        IERC20 src,\n        uint256 srcAmount,\n        IERC20 dest,\n        address payable destAddress,\n        uint256 maxDestAmount,\n        uint256 minConversionRate,\n        address payable platformWallet,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    ) external payable returns (uint256 destAmount);\n\n    function trade(\n        IERC20 src,\n        uint256 srcAmount,\n        IERC20 dest,\n        address payable destAddress,\n        uint256 maxDestAmount,\n        uint256 minConversionRate,\n        address payable platformWallet\n    ) external payable returns (uint256);\n\n    /// @notice backward compatible\n    /// @notice Rate units (10 ** 18) => destQty (twei) / srcQty (twei) * 10 ** 18\n    function getExpectedRate(\n        ERC20 src,\n        ERC20 dest,\n        uint256 srcQty\n    ) external view returns (uint256 expectedRate, uint256 worstRate);\n\n    function getExpectedRateAfterFee(\n        IERC20 src,\n        IERC20 dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    ) external view returns (uint256 expectedRate);\n}\n"
    },
    "localhost/import/github/Uniswap/uniswap-v1/IUniswapExchangeInterface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\n\ninterface UniswapExchangeInterface {\n    // Address of ERC20 token sold on this exchange\n    function tokenAddress() external view returns (address token);\n    // Address of Uniswap Factory\n    function factoryAddress() external view returns (address factory);\n    // Provide Liquidity\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\n    // Get Prices\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\n    // Trade ETH to ERC20\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\n    // Trade ERC20 to ETH\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\n    // Trade ERC20 to ERC20\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\n    // Trade ERC20 to Custom Pool\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\n    // ERC20 comaptibility for liquidity tokens\n    // bytes32 public name;\n    // bytes32 public symbol;\n    // uint256 public decimals;\n    function transfer(address _to, uint256 _value) external returns (bool);\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\n    function approve(address _spender, uint256 _value) external returns (bool);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256);\n    function totalSupply() external view returns (uint256);\n    // Never use\n    function setup(address token_addr) external;\n}"
    },
    "localhost/import/github/Uniswap/uniswap-v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "localhost/import/github/Uniswap/uniswap-v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "localhost/import/github/openzeppelin-contracts/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "localhost/import/github/openzeppelin-contracts/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "localhost/import/github/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "localhost/import/github/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    }
  }
}