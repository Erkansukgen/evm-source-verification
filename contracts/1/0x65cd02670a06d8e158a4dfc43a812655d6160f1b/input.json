{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/ballot.sol": {
      "content": "\npragma solidity ^0.6.12;\n\ncontract Ownable {\n    address payable public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address payable newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\ninterface ERC20 {\n    function totalSupply() external view returns (uint supply);\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    function decimals() external view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\nabstract contract ProxyKyberSwap {\n    function getExpectedRate(\n        ERC20 src,\n        ERC20 dest,\n        uint srcQty\n    ) virtual external view returns (uint256 expectedRate, uint256 worstRate);\n}\ncontract StrongWalletPresale is Ownable {\n    using SafeMath for uint256;\n\n    uint public presaleAmount = 3000000 ether;\n    ProxyKyberSwap public proxyKyberSwap = ProxyKyberSwap(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\n    ERC20 public STRONG = ERC20(0xf217f7df49f626f83f40D7D5137D663B1ec4EE6E);\n    ERC20 constant public ETH_TOKEN_ADDRESS = ERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    ERC20 constant public USDT_TOKEN_ADDRESS = ERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n    uint[] rates = [160, 150, 135, 125, 115, 100]; // decimal = 3\n    struct seller {\n        uint total;\n        address addr;\n    }\n    mapping(address => seller) public sellers;\n    mapping(uint => seller) public topSellers;\n    address[] public lengthSeller;\n    // event\n    event DepositETH(address receiver, uint amount, uint amountStrong);\n    event DepositUSDT(address receiver, uint amount, uint amountStrong);\n    event DepositETHWithSeller(address receiver, uint amount, uint amountStrong, address _seller);\n    event DepositUSDTWithSeller(address receiver, uint amount, uint amountStrong, address _seller);\n    event LogWithdrawal(address _to, uint _amountStrong);\n    \n    constructor() public {}\n    function getRate(uint _usdtAmount) public view returns(uint _rate) {\n        if(_usdtAmount <= 100 ether) return rates[0];\n        else if(_usdtAmount <= 1000 ether) return rates[1];\n        else if(_usdtAmount <= 5000 ether) return rates[2];\n        else if(_usdtAmount <= 10000 ether) return rates[3];\n        else if(_usdtAmount <= 50000 ether) return rates[4];\n        else return rates[5];\n    }\n    function USDT2Strong(uint _usdtAmount) public view returns(uint _amountStrong) {\n        uint rate = getRate(_usdtAmount);\n        return _usdtAmount.mul(1000).div(rate);\n    }\n    function ETH2USDT() public view returns (uint _amountUsdt){\n        uint256 expectedRate;\n        (expectedRate,) = proxyKyberSwap.getExpectedRate(ETH_TOKEN_ADDRESS, USDT_TOKEN_ADDRESS, 1 ether);\n        return expectedRate;\n    }\n    function ETH2STRONG(uint _amountETH) public view returns(uint _amountStrong) {\n        uint256 expectedRate = ETH2USDT();\n        uint256 usdtAmount = expectedRate.mul(_amountETH).div(1 ether);\n        return USDT2Strong(usdtAmount);\n    }\n    function depositEth() public payable {\n        uint256 amountStrong = ETH2STRONG(msg.value);\n        owner.transfer(msg.value);\n        STRONG.transfer(msg.sender, amountStrong);\n        emit DepositETH(msg.sender, msg.value, amountStrong);\n    }\n    function depositUSDT(uint256 _amountUsdt) public {\n        uint256 amountStrong = USDT2Strong(_amountUsdt);\n        require(USDT_TOKEN_ADDRESS.transferFrom(msg.sender, owner, _amountUsdt));\n        STRONG.transfer(msg.sender, amountStrong);\n        emit DepositUSDT(msg.sender, _amountUsdt, amountStrong);\n    }\n    function updateTopSeller(uint _selledAmount, address _seller) internal {\n        uint length = lengthSeller.length;\n        uint existedIndex = 11;\n        uint index = 11;\n        uint ltAmount;\n        for(uint i = 0; i < length; i++) {\n            uint currentTotal = sellers[topSellers[i].addr].total;\n            if(topSellers[i].addr == _seller) {\n                existedIndex = i;\n                index = i;\n                topSellers[i].total = _selledAmount;\n                break;\n            }\n            if(i > 0) {\n                if(_selledAmount > currentTotal && ltAmount > currentTotal) {\n                    index = i;\n                    ltAmount = currentTotal;\n                }\n            } else {\n                if(_selledAmount > currentTotal) {\n                    index = i;\n                }\n                ltAmount = currentTotal;\n            }\n        }\n        \n        if(length == 10) {\n            if(existedIndex == 11 && index != 11) {\n                topSellers[index].total = _selledAmount;\n                topSellers[index].addr = _seller;\n            }\n        } else if(length > 0){\n            if(existedIndex == 11) {\n                lengthSeller.push(_seller);\n                topSellers[length] = seller(_selledAmount, _seller);\n            } else {\n                topSellers[index].total = _selledAmount;\n            }\n        } else {\n            lengthSeller.push(_seller);\n            topSellers[length] = seller(_selledAmount, _seller);\n        }\n        \n    }\n    function depositEthWithSeller(address _seller) public payable {\n        require(msg.sender != _seller);\n        depositEth();\n        uint selledAmout = sellers[_seller].total;\n        uint bonusPercent = selledAmout > 0 ? 20 : 50;\n        uint amountStrong = ETH2STRONG(msg.value);\n        uint bonusAmount = amountStrong.mul(bonusPercent).div(1000);\n        STRONG.transfer(_seller, bonusAmount);\n        sellers[_seller].total += amountStrong;\n        sellers[_seller].addr = _seller;\n        updateTopSeller(sellers[_seller].total, _seller);\n        emit DepositETHWithSeller(msg.sender, msg.value, amountStrong, _seller);\n    }\n    function depositUSDTWithSeller(uint256 _amountUsdt, address _seller) public {\n        require(msg.sender != _seller);\n        depositUSDT(_amountUsdt);\n        uint selledAmout = sellers[_seller].total;\n        uint bonusPercent = selledAmout > 0 ? 20 : 50;\n        uint amountStrong = USDT2Strong(_amountUsdt);\n        uint bonusAmount = amountStrong.mul(bonusPercent).div(1000);\n        STRONG.transfer(_seller, bonusAmount);\n        sellers[_seller].total += amountStrong;\n        sellers[_seller].addr = _seller;\n        updateTopSeller(sellers[_seller].total, _seller);\n        emit DepositUSDTWithSeller(msg.sender, _amountUsdt, amountStrong, _seller);\n    }\n    /**\n    * @dev Withdraw the amount of token that is remaining in this contract.\n    * @param _address The address of EOA that can receive token from this contract.\n    */\n    function withdraw(address _address) public onlyOwner {\n        uint tokenBalanceOfContract = getRemainingToken();\n        STRONG.transfer(_address, tokenBalanceOfContract);\n        emit LogWithdrawal(_address, tokenBalanceOfContract);\n    }\n\n    /**\n    * @dev Get the remaining amount of token user can receive.\n    * @return Uint256 the amount of token that user can reveive.\n    */\n    function getRemainingToken() public view returns (uint256) {\n        return STRONG.balanceOf(address(this));\n    }\n}"
    }
  }
}