{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/ni.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\n\n\ncontract TokenReceiver {\n    IERC20 private _token1; //USDT\n    IERC20 private _token2; //DAI\n    IERC20 private _token3; //BUSD\n    IERC20 private _token4; //USDC\n    IERC20 private _ni;    //nihrome\n    address private _owner;\n    \n    \n    \n    mapping (address => uint256) private _balancesR1;\n    mapping (address => uint256) private _balancesR2;\n    mapping (address => uint256) private _balancesR3;\n    \n    \n    uint256 private _firstStartRound;//29.07.2021\n    uint256 private _secondStartRound;//29.08.2021\n    uint256 private _thirdStartRound;//29.09.2021\n    uint256 private _endRound;//29.10.2021\n    \n    uint256 private _price1=31;\n    uint256 private _price2=38;\n    uint256 private _price3=50;\n    \n    \n    uint256 private _maxtotal1=10000000000000;\n    uint256 private _maxtotal2=18000000000000;\n    uint256 private _maxtotal3=27000000000000;\n    \n    \n    \n    uint256 private _total1;\n    uint256 private _total2;\n    uint256 private _total3;\n    \n    \n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    constructor (IERC20 token1,IERC20 token2,IERC20 token3,IERC20 token4,IERC20 token5,address addr,\n                uint256 firstStartRound,uint256 secondStartRound,uint256 thirdStartRound,uint256 endRound) {\n        _token1 = token1;\n        _token2 = token2;\n        _token3 = token3;\n        _token4 = token4;\n        _ni=token5;\n        _setOwner(addr);\n        \n        _firstStartRound=firstStartRound;\n        _secondStartRound=secondStartRound;\n        _thirdStartRound=thirdStartRound;\n        _endRound=endRound;\n        \n        _total1=0;\n        _total2=0;\n        _total3=0;\n        \n        \n        \n    }\n    \n    \n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    \n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n    \n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n    \n    \n    function retCoin() public virtual onlyOwner\n    {\n        uint256 balance_ni=_ni.balanceOf(address(this));\n        _ni.transfer(address(0xA7f510f0025F14a07949489338378fE6021c3030),balance_ni);\n        \n    }\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n    \n    \n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n    \n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function buyR1USDT(uint256 amount) public  returns (bool) {\n        require(amount > 0, \"You need to sell at least some tokens\");\n        uint256 allowance = _token1.allowance(msg.sender, address(this));\n        require(block.timestamp <= _endRound, \"ICO: END\"); \n        require(amount >= 100000000, \"ICO: Buy to low\");//100000000 TODO\n        if( block.timestamp > _firstStartRound ) {\n            if( block.timestamp < _secondStartRound) {\n                //now first round\n                uint256 sum=div(mul(amount,100),_price1);\n                uint256 result=sum;\n                \n                require(result+_total1 <= _maxtotal1, \"ICO: First round limit sales\");\n                require(result+_balancesR1[msg.sender] <= 16129000000, \"ICO: Limit per wallet(max 10000)\");//16129000000 TODO\n                \n                _total1=_total1+result;\n                _balancesR1[msg.sender]=_balancesR1[msg.sender]+result;\n                \n                _token1.transferFrom(msg.sender, address(this), amount);\n                _token1.transfer(address(0xA7f510f0025F14a07949489338378fE6021c3030),amount);\n             return true;\n            }\n        }\n        \n        if( block.timestamp > _secondStartRound) {\n            if( block.timestamp < _thirdStartRound) {\n                //now second round\n                uint256 sum=div(mul(amount,100),_price2);\n                uint256 result=sum;\n                \n                require(result+_total2 <= _maxtotal2, \"ICO: 2 round limit sales\");\n                require(result+_balancesR2[msg.sender] <= 26316000000, \"ICO: Limit per wallet(max 10000)\");//32258000000 TODO\n                \n                _total2=_total2+result;\n                _balancesR2[msg.sender]=_balancesR2[msg.sender]+result;\n                \n                _token1.transferFrom(msg.sender, address(this), amount);\n                _token1.transfer(address(0xA7f510f0025F14a07949489338378fE6021c3030),amount);\n                \n                return true;\n            }\n        }\n        \n        if( block.timestamp > _thirdStartRound) {\n            if( block.timestamp < _endRound) {\n                //now second round\n                uint256 sum=div(mul(amount,100),_price3);\n                uint256 result=sum;\n                \n                require(result+_total3 <= _maxtotal3, \"ICO: 3 round limit sales\");\n                require(result+_balancesR3[msg.sender] <= 20000000000, \"ICO: Limit per wallet(max 10000)\");//32258000000 TODO\n                \n                _total3=_total3+result;\n                _balancesR3[msg.sender]=_balancesR3[msg.sender]+result;\n                \n                _token1.transferFrom(msg.sender, address(this), amount);\n                _token1.transfer(address(0xA7f510f0025F14a07949489338378fE6021c3030),amount);\n                return true;\n            }\n        }\n    }\n    \n    \n    \n    function balanceOfR1(address account) public view virtual  returns (uint256) {\n        return _balancesR1[account];\n    }\n    \n    function balanceOfR2(address account) public view virtual  returns (uint256) {\n        return _balancesR2[account];\n    }\n    \n    function balanceOfR3(address account) public view virtual  returns (uint256) {\n        return _balancesR3[account];\n    }\n    \n    function balanceOfTotal1() public view virtual  returns (uint256) {\n        return _total1;\n    }\n    \n    function balanceOfTotal2() public view virtual  returns (uint256) {\n        return _total2;\n    }\n    \n    function balanceOfTotal3() public view virtual  returns (uint256) {\n        return _total3;\n    }\n    \n}\n\n\n"
    }
  }
}