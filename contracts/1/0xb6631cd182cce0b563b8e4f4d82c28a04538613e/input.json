{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"localhost/CommonUtilities.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\nimport \"./ICommonUtilities.sol\";\r\n\r\ncontract CommonUtilities is ICommonUtilities {\r\n\r\n    function toString(address _addr) public override pure returns(string memory) {\r\n        bytes32 value = bytes32(uint256(_addr));\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n\r\n        bytes memory str = new bytes(42);\r\n        str[0] = '0';\r\n        str[1] = 'x';\r\n        for (uint i = 0; i < 20; i++) {\r\n            str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\r\n            str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0f))];\r\n        }\r\n        return string(str);\r\n    }\r\n\r\n    function toString(uint _i) public override pure returns(string memory) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    function toUint256(bytes memory bs) public override pure returns(uint256 x) {\r\n        if(bs.length >= 32) {\r\n            assembly {\r\n                x := mload(add(bs, add(0x20, 0)))\r\n            }\r\n        }\r\n    }\r\n\r\n    function toAddress(bytes memory b) public override pure returns (address addr) {\r\n        if(b.length > 0) {\r\n            assembly {\r\n                addr := mload(add(b,20))\r\n            }\r\n        }\r\n    }\r\n\r\n    function compareStrings(string memory a, string memory b) public override pure returns(bool) {\r\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\r\n    }\r\n\r\n    function getFirstJSONPart(address sourceLocation, uint256 sourceLocationId, address location) public override pure returns(bytes memory) {\r\n        return abi.encodePacked(\r\n            '\"sourceLocation\":\"',\r\n            toString(sourceLocation),\r\n            '\",\"sourceLocationId\":',\r\n            toString(sourceLocationId),\r\n            ',\"location\":\"',\r\n            toString(location)\r\n        );\r\n    }\r\n\r\n    function formatReturnAbiParametersArray(string memory m) public override pure returns(string memory) {\r\n        bytes memory b = bytes(m);\r\n        if(b.length < 2) {\r\n            return \"[]\";\r\n        }\r\n        if(b[0] != bytes1(\"[\")) {\r\n            return \"[]\";\r\n        }\r\n        if(b[b.length - 1] != bytes1(\"]\")) {\r\n            return \"[]\";\r\n        }\r\n        return m;\r\n    }\r\n\r\n    function toLowerCase(string memory str) public override pure returns(string memory) {\r\n        bytes memory bStr = bytes(str);\r\n        for (uint i = 0; i < bStr.length; i++) {\r\n            bStr[i] = bStr[i] >= 0x41 && bStr[i] <= 0x5A ? bytes1(uint8(bStr[i]) + 0x20) : bStr[i];\r\n        }\r\n        return string(bStr);\r\n    }\r\n}"},"localhost/ICommonUtilities.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\ninterface ICommonUtilities {\r\n    function toString(address _addr) external pure returns(string memory);\r\n    function toString(uint _i) external pure returns(string memory);\r\n    function toUint256(bytes calldata bs) external pure returns(uint256 x);\r\n    function toAddress(bytes calldata b) external pure returns (address addr);\r\n    function compareStrings(string calldata a, string calldata b) external pure returns(bool);\r\n    function getFirstJSONPart(address sourceLocation, uint256 sourceLocationId, address location) external pure returns(bytes memory);\r\n    function formatReturnAbiParametersArray(string calldata m) external pure returns(string memory);\r\n    function toLowerCase(string calldata str) external pure returns(string memory);\r\n}"},"localhost/IMVDProxy.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\ninterface IMVDProxy {\r\n\r\n    function init(address votingTokenAddress, address stateHolderAddress, address functionalityModelsManagerAddress, address functionalityProposalManagerAddress, address functionalitiesManagerAddress) external;\r\n\r\n    function getToken() external view returns(address);\r\n    function setToken(address newAddress) external;\r\n    function getStateHolderAddress() external view returns(address);\r\n    function setStateHolderAddress(address newAddress) external;\r\n    function getMVDFunctionalityProposalManagerAddress() external view returns(address);\r\n    function setMVDFunctionalityProposalManagerAddress(address newAddress) external;\r\n    function getMVDFunctionalityModelsManagerAddress() external view returns(address);\r\n    function setMVDFunctionalityModelsManagerAddress(address newAddress) external;\r\n    function getMVDFunctionalitiesManagerAddress() external view returns(address);\r\n    function setMVDFunctionalitiesManagerAddress(address newAddress) external;\r\n    function changeProxy(address payable newAddress) external payable;\r\n    function getFunctionalitiesAmount() external view returns(uint256);\r\n    function isValidProposal(address proposal) external view returns (bool);\r\n    function isValidFunctionality(address functionality) external view returns(bool);\r\n    function isAuthorizedFunctionality(address functionality) external view returns(bool);\r\n    function getFunctionalityAddress(string calldata codeName) external view returns(address);\r\n    function hasFunctionality(string calldata codeName) external view returns(bool);\r\n    function functionalitiesToJSON() external view returns(string memory functionsJSONArray);\r\n    function functionalitiesToJSON(uint256 start, uint256 l) external view returns(string memory functionsJSONArray);\r\n    function getPendingProposal(string calldata codeName) external view returns(address proposalAddress, bool isPending);\r\n    function newProposal(string calldata codeName, bool emergency, address sourceLocation, uint256 sourceLocationId, address location, bool submitable, string calldata methodSignature, string calldata returnParametersJSONArray, bool isInternal, bool needsSender, string calldata replaces) external returns(address proposalAddress);\r\n    function startProposal(address proposalAddress) external;\r\n    function disableProposal(address proposalAddress) external;\r\n    function transfer(address receiver, uint256 value, address token) external;\r\n    function setProposal() external;\r\n    function read(string calldata codeName, bytes calldata data) external view returns(bytes memory returnData);\r\n    function submit(string calldata codeName, bytes calldata data) external payable returns(bytes memory returnData);\r\n    function callFromManager(address location, bytes calldata payload) external returns(bool, bytes memory);\r\n    function emitFromManager(string calldata codeName, uint256 position, address proposal, string calldata replaced, address location, bool submitable, string calldata methodSignature, bool isInternal, bool needsSender, address proposalAddress, uint256 replacedPosition) external;\r\n\r\n    function emitEvent(string calldata eventSignature, bytes calldata firstIndex, bytes calldata secondIndex, bytes calldata data) external;\r\n\r\n    event TokenChanged(address indexed oldAddress, address indexed newAddress);\r\n    event MVDFunctionalityProposalManagerChanged(address indexed oldAddress, address indexed newAddress);\r\n    event MVDFunctionalityModelsManagerChanged(address indexed oldAddress, address indexed newAddress);\r\n    event MVDFunctionalitiesManagerChanged(address indexed oldAddress, address indexed newAddress);\r\n    event StateHolderChanged(address indexed oldAddress, address indexed newAddress);\r\n    event ProxyChanged(address indexed newAddress);\r\n\r\n    event PaymentReceived(address indexed sender, uint256 value);\r\n    event Proposal(address proposal);\r\n    event ProposalSet(address indexed proposal, bool success);\r\n    event FunctionalitySet(string indexed codeName, uint256 position, address proposal, string indexed replaced, address replacedLocation, bool replacedWasSubmitable, string replacedMethodSignature, bool replacedWasInternal, bool replacedNeededSender, address replacedProposal, uint256 replacedPosition);\r\n\r\n    event Event(string indexed key, bytes32 indexed firstIndex, bytes32 indexed secondIndex, bytes data);\r\n}"},"localhost/IStateHolder.sol":{"content":"pragma solidity ^0.6.0;\n\ninterface IStateHolder {\n\n    function init() external;\n\n    function getProxy() external view returns (address);\n    function setProxy() external;\n    function toJSON() external view returns(string memory);\n    function toJSON(uint256 start, uint256 l) external view returns(string memory);\n    function getStateSize() external view returns (uint256);\n    function exists(string calldata varName) external view returns(bool);\n    function getDataType(string calldata varName) external view returns(string memory dataType);\n    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\n    function setBytes(string calldata varName, bytes calldata val) external returns(bytes memory);\n    function getBytes(string calldata varName) external view returns(bytes memory);\n    function setString(string calldata varName, string calldata val) external returns(string memory);\n    function getString(string calldata varName) external view returns (string memory);\n    function setBool(string calldata varName, bool val) external returns(bool);\n    function getBool(string calldata varName) external view returns (bool);\n    function getUint256(string calldata varName) external view returns (uint256);\n    function setUint256(string calldata varName, uint256 val) external returns(uint256);\n    function getAddress(string calldata varName) external view returns (address);\n    function setAddress(string calldata varName, address val) external returns (address);\n}"},"localhost/StateHolder.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./IMVDProxy.sol\";\nimport \"./CommonUtilities.sol\";\nimport \"./IStateHolder.sol\";\n\ncontract StateHolder is IStateHolder, CommonUtilities {\n\n    enum DataType {\n        ADDRESS,\n        BOOL,\n        BYTES,\n        STRING,\n        UINT256\n    }\n\n    struct Var {\n        string name;\n        DataType dataType;\n        bytes value;\n        uint256 position;\n        bool active;\n    }\n\n    Var[] private _state;\n    mapping(string => uint256) private _index;\n    address private _proxy;\n    uint256 private _stateSize;\n\n    constructor() public {\n        init();\n    }\n\n    function init() public override {\n        require(_state.length == 0, \"Init already called!\");\n        _state.push(Var(\"\", DataType.BYTES, \"\", 0, false));\n    }\n\n    function toJSON() public override view returns(string memory) {\n        return toJSON(0, _state.length - 1);\n    }\n\n    function toJSON(uint256 start, uint256 l) public override view returns(string memory json) {\n        uint256 length = start + 1 + l;\n        json = \"[\";\n        for(uint256 i = start; i < length; i++) {\n            json = !_state[i].active ? json : string(abi.encodePacked(json, '{\"name\":\"', _state[i].name, '\",\"type\":\"', toString(_state[i].dataType), '\"}', i == length - (_state[i].active ? 1 : 0) ? \"\" : \",\"));\n            length += _state[i].active ? 0 : 1;\n            length = length > _state.length ? _state.length : length;\n        }\n        json = string(abi.encodePacked(json, ']'));\n    }\n\n    function getStateSize() public override view returns (uint256) {\n        return _stateSize;\n    }\n\n    function exists(string memory varName) public override view returns(bool) {\n        return _state[_index[varName]].active;\n    }\n\n    function getDataType(string memory varName) public override view returns(string memory dataType) {\n        Var memory v = _state[_index[varName]];\n        if(v.active) {\n            dataType = toString(v.dataType);\n        }\n    }\n\n    function setVal(string memory varName, DataType dataType, bytes memory val) private returns(bytes memory oldVal) {\n        require(_state.length > 0, \"Not Initialized!\");\n        require(_proxy == address(0) || IMVDProxy(_proxy).isAuthorizedFunctionality(msg.sender), \"Only Proxy Functionalities can set vars\");\n        if(compareStrings(varName, \"\")) {\n            return \"\";\n        }\n        Var memory v = _state[_index[varName]];\n        oldVal = v.value;\n        v.name = varName;\n        v.value = val;\n        if(v.position == 0) {\n            for(uint256 i = 1; i < _state.length; i++) {\n                if(!_state[i].active) {\n                    v.position = i;\n                    break;\n                }\n            }\n        } else {\n            require(!v.active || v.dataType == dataType, \"Invalid dataType\");\n        }\n        v.dataType = dataType;\n        if(!v.active) {\n            _stateSize++;\n        }\n        v.active = true;\n        if(v.position == 0) {\n            v.position = _state.length;\n            _state.push(v);\n        } else {\n            _state[v.position] = v;\n        }\n        _index[varName] = v.position;\n    }\n\n    function clear(string memory varName) public override returns(string memory oldDataType, bytes memory oldVal) {\n        require(_state.length > 0, \"Not Initialized!\");\n        require(_proxy == address(0) || IMVDProxy(_proxy).isAuthorizedFunctionality(msg.sender), \"Only Proxy Functionalities can set vars\");\n        Var storage v = _state[_index[varName]];\n        if(v.position > 0 && v.active) {\n            oldDataType = toString(v.dataType);\n            oldVal = v.value;\n            v.value = \"\";\n            v.position = 0;\n            _index[v.name] = 0;\n            v.active = false;\n            _stateSize--;\n        }\n    }\n\n    function setBytes(string memory varName, bytes memory val) public override returns(bytes memory) {\n        return setVal(varName, DataType.BYTES, val);\n    }\n\n    function getBytes(string memory varName) public override view returns(bytes memory) {\n        return _state[_index[varName]].value;\n    }\n\n    function setString(string memory varName, string memory val) public override returns(string memory) {\n        return string(setVal(varName, DataType.STRING, bytes(val)));\n    }\n\n    function getString(string memory varName) public override view returns (string memory) {\n        return string(_state[_index[varName]].value);\n    }\n\n    function setBool(string memory varName, bool val) public override returns(bool) {\n        return toUint256(setVal(varName, DataType.BOOL, abi.encode(val ? 1 : 0))) == 1;\n    }\n\n    function getBool(string memory varName) public override view returns (bool) {\n        return toUint256(_state[_index[varName]].value) == 1;\n    }\n\n    function getUint256(string memory varName) public override view returns (uint256) {\n        return toUint256(_state[_index[varName]].value);\n    }\n\n    function setUint256(string memory varName, uint256 val) public override returns(uint256) {\n        return toUint256(setVal(varName, DataType.UINT256, abi.encode(val)));\n    }\n\n    function getAddress(string memory varName) public override view returns (address) {\n        return toAddress(_state[_index[varName]].value);\n    }\n\n    function setAddress(string memory varName, address val) public override returns (address) {\n        return toAddress(setVal(varName, DataType.ADDRESS, abi.encodePacked(val)));\n    }\n\n    function getProxy() public override view returns (address) {\n        return _proxy;\n    }\n\n    function setProxy() public override {\n        require(_state.length != 0, \"Init not called!\");\n        require(_proxy == address(0) || _proxy == msg.sender, _proxy != address(0) ? \"Proxy already set!\" : \"Only Proxy can toggle itself!\");\n        _proxy = _proxy == address(0) ?  msg.sender : address(0);\n    }\n\n    function toString(DataType dataType) private pure returns (string memory) {\n        return\n            dataType == DataType.ADDRESS ? \"address\" :\n            dataType == DataType.BOOL ? \"bool\" :\n            dataType == DataType.BYTES ? \"bytes\" :\n            dataType == DataType.STRING ? \"string\" :\n            dataType == DataType.UINT256 ? \"uint256\" :\n            \"\";\n    }\n\n    function toDataType(string memory dataType) private pure returns (DataType) {\n        return\n            compareStrings(dataType, \"address\") ? DataType.ADDRESS :\n            compareStrings(dataType, \"bool\") ? DataType.BOOL :\n            compareStrings(dataType, \"string\") ? DataType.STRING :\n            compareStrings(dataType, \"uint256\") ? DataType.UINT256 :\n            DataType.BYTES;\n    }\n}"}}}