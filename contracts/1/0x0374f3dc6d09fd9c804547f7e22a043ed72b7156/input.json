{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "BurnGas.sol": {
      "content": "pragma solidity ^0.5.10;\r\n\r\ncontract GasToken1 {\r\n    function free(uint256 value) public returns (bool success);\r\n    function freeUpTo(uint256 value) public returns (uint256 freed);\r\n    function freeFrom(address from, uint256 value) public returns (bool success);\r\n    function freeFromUpTo(address from, uint256 value) public returns (uint256 freed);\r\n}\r\n\r\ncontract ERC918Interface {\r\n  function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\r\n}\r\ncontract BurnGas {\r\n\r\n    // This function consumes a lot of gas\r\n    function expensiveStuff(address mToken, uint256 nonce, bytes32 challenge_digest) private {\r\n        require(ERC918Interface(mToken).mint(nonce, challenge_digest), \"Could not mint token\");\r\n    }\r\n\r\n    /*\r\n     * Frees free' tokens from the Gastoken at address gas_token'.\r\n     * The freed tokens belong to this Example contract. The gas refund can pay\r\n     * for up to half of the gas cost of the total transaction in which this \r\n     * call occurs.\r\n     */\r\n    function burnGasAndFree(address gas_token, uint256 free, address mToken, uint256 nonce, bytes32 challenge_digest) public {\r\n        require(GasToken1(gas_token).free(free), \"Could not free\");\r\n        expensiveStuff(mToken, nonce, challenge_digest);\r\n    }\r\n}"
    }
  }
}