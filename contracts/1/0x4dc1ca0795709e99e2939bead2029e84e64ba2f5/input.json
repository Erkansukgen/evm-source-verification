{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/arb.sol":{"content":"//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.7.3;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { cs := extcodesize(self) }\r\n        return cs == 0;\r\n    }\r\n}\r\n\r\ncontract Ownable is Initializable {\r\n    address private _owner;\r\n    address private _newOwner;\r\n\r\n    event OwnershipTransferInitiated(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipTransferCompleted(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev COVER: Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initializeOwner() internal initializer {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferCompleted(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferInitiated(_owner, newOwner);\r\n        _newOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function claimOwnership() public virtual {\r\n        require(_newOwner == msg.sender, \"Ownable: caller is not the owner\");\r\n        emit OwnershipTransferCompleted(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\ninterface ISwap {\r\n  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n      external\r\n      payable\r\n      returns (uint[] memory amounts);\r\n  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n      external\r\n      returns (uint[] memory amounts);\r\n}\r\n\r\ncontract Arbitrage is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  address public WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n  // ISwap public UniswapRouter = ISwap(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n  // ISwap public SushiswapRouter = ISwap(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\r\n\r\n  constructor() {\r\n      initializeOwner();\r\n  }\r\n\r\n  function arb(\r\n    uint256 wethAmt,\r\n    address entryRouter, \r\n    address exitRouter, \r\n    uint256 amountOutMin, \r\n    address[] calldata entryPath, \r\n    address[] calldata exitPath, \r\n    uint secondsBeforeRevert, \r\n    uint256 minProfit\r\n    ) \r\n    external \r\n    payable \r\n  {\r\n    uint[] memory entryAmounts = enter(wethAmt, entryRouter, amountOutMin, entryPath, address(this), block.timestamp + secondsBeforeRevert);\r\n    uint[] memory exitAmounts = exit(exitRouter, entryAmounts[entryAmounts.length - 1], wethAmt + minProfit, exitPath, address(this), block.timestamp + secondsBeforeRevert);\r\n    uint256 profit = uint256(exitAmounts[exitAmounts.length - 1]).sub(wethAmt);\r\n    require(profit >= minProfit, \"Arb: < minProfit\");\r\n  }\r\n\r\n  function enter(\r\n    uint256 wethAmt, \r\n    address entryRouter, \r\n    uint256 amountOutMin, \r\n    address[] calldata entryPath, \r\n    address to, \r\n    uint deadline\r\n    ) \r\n    public \r\n    payable \r\n    returns (uint[] memory) \r\n  {\r\n    return ISwap(entryRouter).swapExactETHForTokens{value: wethAmt}(\r\n        amountOutMin, \r\n        entryPath, \r\n        to, \r\n        deadline\r\n        );\r\n  }\r\n\r\n  function exit(address exitRouter, uint256 tokenAmt, uint256 amountOutMin, address[] calldata exitPath, address to, uint deadline) public returns (uint[] memory) {\r\n    return ISwap(exitRouter).swapExactTokensForETH(\r\n      tokenAmt, \r\n      amountOutMin, \r\n      exitPath, \r\n      to, \r\n      deadline\r\n      );\r\n  }\r\n\r\n  function withdraw(address _token) external {\r\n      IERC20 token = IERC20(_token);\r\n      uint256 amount = token.balanceOf(address(this));\r\n      require(amount > 0, \"Arb: balance = 0\");\r\n      if (_token == address(0)) {\r\n          payable(owner()).transfer(amount);\r\n      } else {\r\n          token.transfer(owner(), amount);\r\n      }\r\n  }\r\n}\r\n"}}}