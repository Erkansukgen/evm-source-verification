{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/DequestJackpot.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"https://github.com/openzeppelin/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\n\ncontract DequestJackpot {\n    \n    address private owner;\n    uint8 private tokenIndex;\n    mapping(uint8 => address) public idToToken;\n    mapping(uint8 => address) public idToSigner;\n    mapping(address => uint8) public tokenToId;\n    mapping(address => uint256) public request;\n    \n    event Claim(uint8 _tokenIndex, address indexed _receiver, uint256 indexed _index, uint256 _amount);\n    \n    constructor() {\n        owner = msg.sender;\n    }\n    \n    function changeOwner(address _owner) external returns (bool) {\n        require(msg.sender == owner, \"DequestJackpot: Invalid owner\");\n        owner = _owner;\n        return true;\n    }\n    \n    function changeSigner(uint8 _index, address _signer) external returns (bool) {\n        require(msg.sender == owner, \"DequestJackpot: Invalid owner\");\n        idToSigner[_index] = _signer;\n        return true;\n    }\n    \n    function addToken(address _tokenAddress, address _signer) external returns (bool) {\n        require(msg.sender == owner, \"DequestJackpot: Invalid owner\");\n        idToSigner[tokenIndex] = _signer;\n        idToToken[tokenIndex] = _tokenAddress;\n        tokenToId[_tokenAddress] = tokenIndex;\n        ++tokenIndex;\n        return true;\n    }\n    \n    function claim(uint8 tIndex, uint256 amount, uint8 v, bytes32 r, bytes32 s) external returns (bool) {\n        require(idToSigner[tIndex] != address(0x0), \"DequestJackpot: Invalid index\");\n        require(idToToken[tIndex] != address(0x0), \"DequestJackpot: Invalid token\");\n        \n        address sender  = msg.sender;\n        bytes32 message = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", keccak256(abi.encode(tIndex, sender, request[sender], amount))));\n        \n        require(ecrecover(message, v, r, s) == idToSigner[tIndex], \"DequestJackpot: Invalid signer\");\n        \n        IERC20 token = IERC20(idToToken[tIndex]);\n        \n        token.transfer(sender, amount);\n        \n        emit Claim(tIndex, sender, request[sender], amount);\n        \n        ++request[sender];\n        \n        return true;\n    }\n}"},"https://github.com/openzeppelin/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"}}}