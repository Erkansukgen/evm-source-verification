{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/DivSplitter.sol":{"content":"pragma solidity 0.6.4;\r\n\r\n\r\nimport \"./SafeMath.sol\";\r\n\r\ninterface Token {\r\n    function symbol()\r\n    external\r\n    view\r\n    returns (string memory);\r\n    \r\n    function totalSupply()\r\n    external\r\n    view\r\n    returns (uint256);\r\n    \r\n    function balanceOf (address account)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function transfer (address recipient, uint256 amount)\r\n    external\r\n    returns (bool);\r\n}\r\n\r\ncontract DivSplitter {\r\n\r\n    using SafeMath for uint256;\r\n    ///////////////////\r\n    //EVENTS//\r\n    ///////////////////\r\n\r\n    event DistributedToken(\r\n        uint256 timestamp,\r\n        address indexed senderAddress,\r\n        uint256 distributed,\r\n        string indexed tokenSymbol\r\n    );\r\n    \r\n    event DistributedEth(\r\n        uint256 timestamp,\r\n        address indexed senderAddress,\r\n        uint256 distributed\r\n    );\r\n\r\n    /////////////////////\r\n    //SETUP//\r\n    /////////////////////\r\n    Token[] public tokens;\r\n    uint256 public maxTokens = 5;\r\n    mapping(address => bool) tokenAdded;\r\n    \r\n    uint256 _gasLimit = 21000;\r\n    \r\n    address payable internal _p1 = 0xbf1984B12878c6A25f0921535c76C05a60bdEf39;//14%\r\n    address payable internal _p2 = 0xc70DAfC298B5de4DA424EB80DC2743173f944A9f;//14%\r\n    address payable internal _p3 = 0x0CC501fFd20e865d85867Fb5fbFb1259D1CAfD13;//9%\r\n    address payable internal _p4 = 0xF80A891c1A7600dDd84b1F9d54E0b092610Ed804;//2%\r\n    address payable internal _p5 = 0xc61f905832aE9FB6Ef5BaD8CF6e5b8B5aE1DF026;//10%\r\n    address payable internal _p6 = 0x47705B509A4Fe6a0237c975F81030DAC5898Dc06;//10%\r\n    address payable internal _p7 = 0x4c7b5cB8240Dc5e5437FEf4AcC6445e47F3706A6;//5%\r\n    address payable internal _p8 = 0xe2Ef81dCe4a639187B5c550da4A2ad89DB434C00;//5%\r\n    address payable internal _p9 = 0xeC28143Fe252d0655C02768841Af4a7df1178ece;//3%\r\n    address payable internal _p10 = 0xD6968Da8725D30738f926B9DE940a997C16b9a86;//3%\r\n    address payable internal _p11 = 0x142CC1Fbaa49CF65Ac9Eb0CdD098A84638891BD7;//3%\r\n    address payable internal _p12 = 0x35e9034f47cc00b8A9b555fC1FDB9598b2c245fD;//3%\r\n    address payable internal _p13 = 0x5a952b3501c827Ef96412C5CA61418DF93d955C4;//3%\r\n    address payable internal _p14 = 0x454f203260a74C0A8B5c0a78fbA5B4e8B31dCC63;//3%\r\n    address payable internal _p15 = 0x7E152f108ee3B497291Cbd757De63BB1B14F238F;//3%\r\n    address payable internal _p16 = 0x975C3Da56B958AB3581D3789544b1cf19c0b8b23;//3%\r\n    address payable internal _p17 = 0x86b0C0c3fF5aDE3a6F00180D09C1CEEB2b7765eA;//3%\r\n    address payable internal _p18 = 0x3b822eB7A07255fd468EC3a68e7f06C2c550D56f;//3%\r\n    address payable internal _p19 = 0x65fBE695FE29897ADdECA149aBc3c8eb742EB204;//1%\r\n\r\n    mapping(address => bool) admins;\r\n\r\n    modifier onlyAdmins(){\r\n        require(admins[msg.sender], \"not an admin\");\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        admins[_p1] = true;\r\n        admins[_p2] = true;\r\n        admins[_p3] = true;\r\n    }\r\n    \r\n    ////////////////////\r\n    //DISTRIBUTE//\r\n    ////////////////////\r\n\r\n    function distributeAll() public {\r\n        for(uint i = 0; i < tokens.length; i++){\r\n            if(tokens[i].balanceOf(address(this)) > 99){\r\n                distributeToken(address(0), tokens[i]);\r\n            }\r\n        }\r\n        if(address(this).balance > 99){\r\n            distributeEth();   \r\n        }\r\n    }\r\n\r\n    function distributeToken(address _tokenAddress, Token _token) public {\r\n        if(_tokenAddress != address(0)){\r\n            _token = Token(_tokenAddress);\r\n        }\r\n        //get balance \r\n        uint256 balance = _token.balanceOf(address(this));\r\n        require(balance > 99, \"value too low to distribute\");\r\n        //distribute\r\n        uint256 percent = balance.div(100);\r\n        uint256 two_percent = balance.mul(2).div(100);\r\n        uint256 three_percent = balance.mul(3).div(100);\r\n        uint256 five_percent = balance.mul(5).div(100);\r\n        uint256 nine_percent = balance.mul(9).div(100);\r\n        uint256 ten_percent = balance.mul(10).div(100);\r\n        uint256 fourteen_percent = balance.mul(14).div(100);\r\n        require(_token.transfer(_p1, fourteen_percent));\r\n        require(_token.transfer(_p2, fourteen_percent));\r\n        require(_token.transfer(_p3, nine_percent));\r\n        require(_token.transfer(_p4, two_percent));\r\n        require(_token.transfer(_p5, ten_percent));\r\n        require(_token.transfer(_p6, ten_percent));\r\n        require(_token.transfer(_p7, five_percent));\r\n        require(_token.transfer(_p8, five_percent));\r\n        require(_token.transfer(_p9, three_percent));\r\n        require(_token.transfer(_p10, three_percent));\r\n        require(_token.transfer(_p11, three_percent));\r\n        require(_token.transfer(_p12, three_percent));\r\n        require(_token.transfer(_p13, three_percent));\r\n        require(_token.transfer(_p14, three_percent));\r\n        require(_token.transfer(_p15, three_percent));\r\n        require(_token.transfer(_p16, three_percent));\r\n        require(_token.transfer(_p17, three_percent));\r\n        require(_token.transfer(_p18, three_percent));\r\n        require(_token.transfer(_p19, percent));\r\n        emit DistributedToken(now, msg.sender, balance, _token.symbol());\r\n    }\r\n\r\n    function distributeEth() public payable {\r\n        uint256 balance = 0;\r\n        if(msg.value > 0){\r\n            balance = msg.value.add(address(this).balance);\r\n        }\r\n        else{\r\n            balance = address(this).balance;\r\n        }\r\n        require(balance > 99, \"value too low to distribute\");\r\n        bool success = false;\r\n        //distribute\r\n        uint256 percent = balance.div(100);\r\n        uint256 two_percent = balance.mul(2).div(100);\r\n        uint256 three_percent = balance.mul(3).div(100);\r\n        uint256 five_percent = balance.mul(5).div(100);\r\n        uint256 nine_percent = balance.mul(9).div(100);\r\n        uint256 ten_percent = balance.mul(10).div(100);\r\n        uint256 fourteen_percent = balance.mul(14).div(100);\r\n        (success, ) =  _p1.call{value:fourteen_percent}{gas:_gasLimit}('');\r\n        require(success, \"Transfer failed\");\r\n        (success, ) =  _p2.call{value:fourteen_percent}{gas:_gasLimit}('');\r\n        require(success, \"Transfer failed\");\r\n        (success, ) =  _p3.call{value:nine_percent}{gas:_gasLimit}('');\r\n        require(success, \"Transfer failed\");\r\n        (success, ) =  _p4.call{value:two_percent}{gas:_gasLimit}('');\r\n        require(success, \"Transfer failed\");\r\n        (success, ) =  _p5.call{value:ten_percent}{gas:_gasLimit}('');\r\n        require(success, \"Transfer failed\");\r\n        (success, ) =  _p6.call{value:ten_percent}{gas:_gasLimit}('');\r\n        require(success, \"Transfer failed\");\r\n        (success, ) =  _p7.call{value:five_percent}{gas:_gasLimit}('');\r\n        require(success, \"Transfer failed\");\r\n        (success, ) =  _p8.call{value:five_percent}{gas:_gasLimit}('');\r\n        require(success, \"Transfer failed\");\r\n        (success, ) =  _p9.call{value:three_percent}{gas:_gasLimit}('');\r\n        require(success, \"Transfer failed\");\r\n        (success, ) =  _p10.call{value:three_percent}{gas:_gasLimit}('');\r\n        require(success, \"Transfer failed\");\r\n        (success, ) =  _p11.call{value:three_percent}{gas:_gasLimit}('');\r\n        require(success, \"Transfer failed\");\r\n        (success, ) =  _p12.call{value:three_percent}{gas:_gasLimit}('');\r\n        require(success, \"Transfer failed\");\r\n        (success, ) =  _p13.call{value:three_percent}{gas:_gasLimit}('');\r\n        require(success, \"Transfer failed\");\r\n        (success, ) =  _p14.call{value:three_percent}{gas:_gasLimit}('');\r\n        require(success, \"Transfer failed\");\r\n        (success, ) =  _p15.call{value:three_percent}{gas:_gasLimit}('');\r\n        require(success, \"Transfer failed\");\r\n        (success, ) =  _p16.call{value:three_percent}{gas:_gasLimit}('');\r\n        require(success, \"Transfer failed\");\r\n        (success, ) =  _p17.call{value:three_percent}{gas:_gasLimit}('');\r\n        require(success, \"Transfer failed\");\r\n        (success, ) =  _p18.call{value:three_percent}{gas:_gasLimit}('');\r\n        require(success, \"Transfer failed\");\r\n        (success, ) =  _p19.call{value:percent}{gas:_gasLimit}('');\r\n        require(success, \"Transfer failed\");\r\n        emit DistributedEth(now, msg.sender, balance);\r\n    }\r\n\r\n    //optional fallback for eth sent to contract - auto distribute on payment\r\n    //receive() external payable {\r\n    //    distributeEth();    \r\n    //}\r\n\r\n    /////////////////\r\n    //MUTABLE//\r\n    /////////////////\r\n\r\n    function addToken(address _token)\r\n        public\r\n        onlyAdmins\r\n    {\r\n        require(_token != address(0), \"invalid address\");\r\n        require(Token(_token).totalSupply() > 0, \"invalid contract address\");\r\n        require(!tokenAdded[_token], \"token already exists\");\r\n        require(tokens.length < maxTokens, \"cannot add more tokens than maxTokens\");\r\n        tokenAdded[_token] = true;\r\n        tokens.push(Token(_token));\r\n    }\r\n\r\n    function setGasLimit(uint gasLimit)\r\n        public\r\n        onlyAdmins\r\n    {\r\n        require(gasLimit > 0, \"gasLimit must be greater than 0\");\r\n        _gasLimit = gasLimit;\r\n    }\r\n    \r\n}"},"browser/SafeMath.sol":{"content":"pragma solidity 0.6.4;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"}}}