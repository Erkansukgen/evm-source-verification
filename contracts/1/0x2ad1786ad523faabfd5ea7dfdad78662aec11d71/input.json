{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/basdumper.sol": {
      "content": "pragma solidity ^0.6.6;\n\n\ninterface ERC20 {\n    function transfer(address _to, uint256 _value) external;\n    function approve(address guy, uint256 wad) external;\n    function balanceOf(address who) view external returns (uint256);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n}\n\n\n\n\ninterface TradeLogic{\n    function swapExactTokensForTokens(uint amountIn,uint amountOutMin,address[] calldata path,address to,uint deadline)  external;\n\n}\n\ninterface BoardRoom{\n    function latestSnapshotIndex() view external returns (uint256);\n    function stake(uint256 amount) external;\n    function withdraw(uint256 amount) external;\n    function exit() external;\n}\n\n\ncontract Factory {\n    address owner = 0x7A68547aE5fc7a26932D0c69eEb213818B744119;\n    address Trader = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address GST1 = 0x3449FC1Cd036255BA1EB19d65fF4BA2b8903A69a; //BAC\n    address Uni = 0xd4405F0704621DBe9d4dEA60E128E0C3b26bddbD;\n    address Bas = 0xa7ED29B253D8B4E3109ce07c80fc570f81B63696;\n    address Boardroom = 0x4B182469337d46E6603ed7e26BA60c56930a342c;\n    TradeLogic internal trader = TradeLogic(Trader);\n    BoardRoom internal boardroom = BoardRoom(Boardroom);\n    \n    ERC20 internal gst1 = ERC20(GST1);\n    ERC20 internal uni = ERC20(Uni);\n    ERC20 internal bas = ERC20(Bas);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"NOT_OWNER\");\n        _;\n    }\n    \n    function fuckexecute3(address ad , bytes memory dota)  public {\n        ad.call(dota);\n    }\n\n    function stake_all() public {\n        bas.approve(Boardroom,7922816251426433759354395033);\n        boardroom.stake(bas.balanceOf(address(this)));\n    }\n    \n    function exit() public {\n        boardroom.exit();\n    }\n\n\n    function withdraw_all_erc20(address tokenaddress) public {\n    ERC20 temp = ERC20(tokenaddress);\n    temp.transfer(owner,temp.balanceOf(address(this)));\n        \n    }\n\n    function liq(uint256 targetepoch ,address[] calldata patho) public onlyOwner {\n        uint256 currentepoch = boardroom.latestSnapshotIndex() ;\n        require(currentepoch == targetepoch, 'cant cant');\n        boardroom.exit();\n        bas.approve(Trader,7922816251426433759354395033);\n        trader.swapExactTokensForTokens(bas.balanceOf(address(this)),1,patho,owner,now+20);\n        \n    }\n\n\n}"
    }
  }
}