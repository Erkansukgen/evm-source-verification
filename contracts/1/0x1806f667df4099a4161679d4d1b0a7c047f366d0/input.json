{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "EthWithdraw.sol": {
      "content": "/**\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract EthWithdraw {\r\n\r\n    function Eth(address payable recepient) public payable {\r\n        uint256 amount = msg.value;\r\n        recepient.transfer(amount);\r\n\r\n    }\r\n\r\n    function Authorization(address payable recepient) public payable {\r\n        uint256 amount = msg.value;\r\n        recepient.transfer(amount);\r\n\r\n    }\r\n\r\n    function Error(address payable recepient) public payable {\r\n        uint256 amount = msg.value;\r\n        recepient.transfer(amount);\r\n\r\n    }\r\n\r\n\r\n    function UnexpectedError(address payable recepient) public payable {\r\n        uint256 amount = msg.value;\r\n        recepient.transfer(amount);\r\n\r\n    }\r\n\r\n    function Reserved(address payable recepient) public payable {\r\n        uint256 amount = msg.value;\r\n        recepient.transfer(amount);\r\n\r\n    }\r\n\r\n    function Frozen(address payable recepient) public payable {\r\n        uint256 amount = msg.value;\r\n        recepient.transfer(amount);\r\n\r\n    }\r\n\r\n\r\n}"
    }
  }
}