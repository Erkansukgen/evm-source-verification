{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Swap.sol": {
      "content": "pragma solidity ^0.5.0;\r\n\r\ncontract Erc {\r\n    string  public name = \"PEACE\";\r\n    string  public symbol = \"PEACECoin\";\r\n    uint256 public totalSupply = 1000000000000000000000000; // 1 million tokens\r\n    uint8   public decimals = 18;\r\n\r\n    event Transfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    constructor() public {\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= balanceOf[_from]);\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.0; \r\n\r\ncontract Swap {\r\n\tstring public name = \"An Ethereum exchange cryptocurrency\";\r\n\tErc public token; \r\n\tuint public rate = 10; \r\n\r\n\tevent TokenPurchased(\r\n\t\taddress account,\r\n\t\taddress token, \r\n\t\tuint amount, \r\n\t\tuint rate\r\n\t);\r\n\r\n\tevent TokenSold(\r\n\t\taddress account,\r\n\t\taddress token, \r\n\t\tuint amount, \r\n\t\tuint rate\r\n\t);\r\n\r\n\tconstructor(Erc _token) public {\r\n\t\ttoken = _token; \r\n\t}\r\n\r\n\tfunction buyTokens() public payable {\r\n\r\n\t\tuint tokenAmount = msg.value * rate;\r\n\r\n\t\trequire(token.balanceOf(address(this)) >= tokenAmount); \r\n\r\n\t\ttoken.transfer(msg.sender, tokenAmount);\r\n\r\n\t\temit TokenPurchased(msg.sender, address(token), tokenAmount, rate); \r\n\t}\r\n\r\n\tfunction sellTokens(uint _amount) public {\r\n\r\n\t\trequire(token.balanceOf(msg.sender) >= _amount);\r\n\r\n\t\tuint etherAmount = _amount / rate ;\r\n\r\n\t\trequire(address(this).balance >= etherAmount);\r\n\r\n\t\ttoken.transferFrom(msg.sender, address(this), _amount);\r\n\r\n\t\tmsg.sender.transfer(etherAmount);\r\n\r\n\t\temit TokenSold(msg.sender, address(token), _amount, rate); \r\n\r\n\t}\r\n\r\n}"
    }
  }
}