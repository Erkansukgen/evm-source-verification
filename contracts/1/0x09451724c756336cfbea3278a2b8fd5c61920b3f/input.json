{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"ThriftToken.sol":{"content":"pragma solidity ^0.5.8;\r\n\r\n//Change the contract name to your token name\r\ncontract ThriftToken {\r\n    // Name your custom token\r\n    string public constant name = \"Thrift\";\r\n\r\n    // Name your custom token symbol\r\n    string public constant symbol = \"THR\";\r\n\r\n    uint8 public constant decimals = 18;\r\n    \r\n    // Contract owner will be your Link account\r\n    address public owner;\r\n\r\n    address public treasury;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping (address => mapping (address => uint256)) private allowed;\r\n    mapping (address => uint256) private balances;\r\n\r\n    event Approval(address indexed tokenholder, address indexed spender, uint256 value);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n\r\n        // Add your wallet address here which will contain your total token supply\r\n        treasury = address(0xa9499ED5f1295B157768833157110482a5D756E0);\r\n\r\n        // Set your total token supply (default 1000)\r\n        totalSupply = 21000000 * 10**uint(decimals);\r\n\r\n        balances[treasury] = totalSupply;\r\n        emit Transfer(address(0), treasury, totalSupply);\r\n    }\r\n\r\n    function () external payable {\r\n        revert();\r\n    }\r\n\r\n    function allowance(address _tokenholder, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_tokenholder][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(_spender != address(0));\r\n        require(_spender != msg.sender);\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _tokenholder) public view returns (uint256 balance) {\r\n        return balances[_tokenholder];\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n        require(_spender != address(0));\r\n        require(_spender != msg.sender);\r\n\r\n        if (allowed[msg.sender][_spender] <= _subtractedValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = allowed[msg.sender][_spender] - _subtractedValue;\r\n        }\r\n\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n        require(_spender != address(0));\r\n        require(_spender != msg.sender);\r\n        require(allowed[msg.sender][_spender] <= allowed[msg.sender][_spender] + _addedValue);\r\n\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender] + _addedValue;\r\n\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != msg.sender);\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(balances[msg.sender] - _value <= balances[msg.sender]);\r\n        require(balances[_to] <= balances[_to] + _value);\r\n        require(_value <= transferableTokens(msg.sender));\r\n\r\n        balances[msg.sender] = balances[msg.sender] - _value;\r\n        balances[_to] = balances[_to] + _value;\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_from != address(0));\r\n        require(_from != address(this));\r\n        require(_to != _from);\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(_value <= transferableTokens(_from));\r\n        require(allowed[_from][msg.sender] - _value <= allowed[_from][msg.sender]);\r\n        require(balances[_from] - _value <= balances[_from]);\r\n        require(balances[_to] <= balances[_to] + _value);\r\n\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\r\n        balances[_from] = balances[_from] - _value;\r\n        balances[_to] = balances[_to] + _value;\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public {\r\n        require(msg.sender == owner);\r\n        require(_newOwner != address(0));\r\n        require(_newOwner != address(this));\r\n        require(_newOwner != owner);\r\n\r\n        address previousOwner = owner;\r\n        owner = _newOwner;\r\n\r\n        emit OwnershipTransferred(previousOwner, _newOwner);\r\n    }\r\n\r\n    function transferableTokens(address holder) public view returns (uint256) {\r\n        return balanceOf(holder);\r\n    }\r\n}"}}}