{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/advanced.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\";\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\";\nimport \"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\";\n\ncontract Advanced is ERC20 {\n    address payable public _owner;\n    // address _usdtaddress=0x005dD61E5E1318376C06ba0222B39fd24FCe3bae; //testnet\n    // address kp8raddress=0xa403093162E0b7D3087A1E855c8f82758a2792c5; //testnet\n    address _usdtaddress=0xdAC17F958D2ee523a2206206994597C13D831ec7; //mainnet\n    address kp8raddress=0x2f8d8a07533dc4b3E0c36F49D96d5413673c052C; //mainnet\n    IERC20 kp8rtoken=IERC20(kp8raddress);\n    \n    address internal constant UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    IUniswapV2Router02 public uniswapRouter;\n    address public WETH;\n    \n   \n    uint _stakingdeposit=2000e18;\n    uint _farmingdeposit=2000e18;\n    \n    uint _remainingstakingdeposit=_stakingdeposit;\n    uint _remainingfarmingdeposit=_farmingdeposit;\n    \n    function getremainingstakingdeposit() public view returns(uint){\n        return _remainingstakingdeposit;\n    }\n    function getremainingfarmingdeposit() public view returns(uint){\n        return _remainingfarmingdeposit;\n    }\n    \n    function topupstaking(uint amount) public returns(bool){\n        require(msg.sender==_owner,\"Only Owner\");\n        _stakingdeposit=_stakingdeposit.add(amount);\n    }\n    function topupfarming(uint amount) public returns(bool){\n        require(msg.sender==_owner,\"Only Owner\");\n        _farmingdeposit=_farmingdeposit.add(amount);\n    }\n    \n    uint _ico1start=1606309200; //wed, 2020-11-25 20:00\n    uint _ico2start=1606568400; //sat, 2020-11-28 20:00\n    uint _icoend=1606827600; //tue, 2020-12-1 20:00\n    uint _ico1=10000e18;\n    uint _ico2=10000e18;\n    uint _ico1sold;\n    uint _ico2sold;\n    uint _totalsold=0;\n    uint _ico1remaining=_ico1;\n    uint _ico2remaining=_ico2;\n    \n    struct stakingParticipant {\n      uint stakeAmount;\n      uint start;\n      uint withdrawn;\n      uint period;\n      uint interest;\n    }\n    mapping(address => stakingParticipant) public stakingParticipants;\n    mapping(address=>bool) public ParticipantInStaking;\n    \n    \n    struct farmingParticipant {\n      address farmingToken;\n      uint farmAmount;\n      uint start;\n      uint withdrawn;\n      uint period;\n      uint interest;\n    }\n    mapping(address => farmingParticipant) public farmingParticipants;\n    mapping(address=>bool) public ParticipantInFarming;\n    \n    uint _totalstakedamount=0;\n    \n    function gettotalstakedamount() public view returns(uint){\n        return _totalstakedamount;\n    }\n    \n    function checkparticipantinstaking(address _address) public view returns(bool){\n        return ParticipantInStaking[_address];\n    }\n    \n    function checkparticipantinfarming(address _address) public view returns(bool){\n        return ParticipantInFarming[_address];\n    }\n    function getstakeparticipandetail(address _address) public view returns (uint,uint,uint,uint,uint){\n        require(ParticipantInStaking[_address]==true, \"Not A Staker\");\n        return (\n            stakingParticipants[_address].stakeAmount,\n            stakingParticipants[_address].start,\n            stakingParticipants[_address].withdrawn,\n            stakingParticipants[_address].period,\n            stakingParticipants[_address].interest\n        );\n    }\n    function getfarmparticipandetail(address _address) public view returns (address,uint,uint,uint,uint,uint){\n        require(ParticipantInFarming[_address]==true, \"Not A Farmer\");\n        return (\n            farmingParticipants[_address].farmingToken,\n            farmingParticipants[_address].farmAmount,\n            farmingParticipants[_address].start,\n            farmingParticipants[_address].withdrawn,\n            farmingParticipants[_address].period,\n            farmingParticipants[_address].interest\n        );\n    }\n    \n    function joinstake(uint _stakeAmount, uint _period, uint _interest) public {\n        require(block.timestamp>_ico1start,\"Staking only after ico start\");\n        require(ParticipantInStaking[msg.sender]==false, \"Already In Staking Program\");\n        require(kp8rtoken.allowance(msg.sender, address(this)) >=_stakeAmount, \"Please Check Your Token Allowance To Stake\");\n        require(kp8rtoken.balanceOf(msg.sender) >=_stakeAmount, \"Insufficient Ammount To Stake\");\n        \n        kp8rtoken.transferFrom(msg.sender, _owner, _stakeAmount);\n        stakingParticipant storage theParticipant=stakingParticipants[msg.sender];\n        theParticipant.stakeAmount=_stakeAmount;\n        theParticipant.start=block.timestamp;\n        theParticipant.period=_period;\n        theParticipant.interest=_interest;\n        ParticipantInStaking[msg.sender]=true;\n        _totalstakedamount=_totalstakedamount.add(_stakeAmount);\n    }\n    \n    function joinfarm(address _ta, uint _farmAmount, uint _period, uint _interest) public {\n        require(block.timestamp>_ico1start,\"Farming only after ico start\");\n        require(ParticipantInFarming[msg.sender]==false, \"Already In Farming Program\");\n        IERC20 thistoken=IERC20(_ta);\n        require(thistoken.allowance(msg.sender, address(this)) >=_farmAmount, \"Please Check Your Token Allowance To Farm\");\n        require(thistoken.balanceOf(msg.sender) >=_farmAmount, \"Insufficient Ammount To Farm\");\n        \n        thistoken.transferFrom(msg.sender, _owner, _farmAmount);\n        farmingParticipant storage theParticipant=farmingParticipants[msg.sender];\n        theParticipant.farmingToken=_ta;\n        theParticipant.farmAmount=_farmAmount;\n        theParticipant.start=block.timestamp;\n        theParticipant.period=_period;\n        theParticipant.interest=_interest;\n        ParticipantInFarming[msg.sender]=true;\n    }\n    \n    \n    function calcStakingInterest(address _wa) public view returns (uint){\n        require(ParticipantInStaking[_wa]==true,\"Not Listed As Staking Participant\");\n        uint stakeamount=stakingParticipants[_wa].stakeAmount;\n        uint interest=stakingParticipants[_wa].interest;\n        uint period=stakingParticipants[_wa].period;\n        uint withdrawn=stakingParticipants[_wa].withdrawn;\n        uint start=stakingParticipants[_wa].start;\n        uint lapsedtime = block.timestamp-start;\n        \n        uint256 interestpersecond=(interest*(10**16))/period; \n        uint256 interesttotal=(stakeamount * (interestpersecond * lapsedtime))/(10**18);\n        uint256 interestcount=interesttotal - withdrawn;\n        \n        return interestcount;\n    }\n    \n\n     constructor () public ERC20(\"Advanced\", \"ADV\") {\n        _mint(msg.sender, 1000000 * (10 ** uint256(decimals())));\n        _owner=msg.sender;\n        uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\n        // _ico1start=block.timestamp+120;\n        // _ico2start=block.timestamp+240;\n        // _icoend=block.timestamp+360;\n    }\n    \n\n\n    \n    function calcFarmingInterest(address _wa) public view returns (uint){\n        require(ParticipantInFarming[_wa]==true,\"Not Listed As Farming Participant\");\n        address farmingToken=farmingParticipants[_wa].farmingToken;\n        uint farmamount=farmingParticipants[_wa].farmAmount;\n        uint interest=farmingParticipants[_wa].interest;\n        uint period=farmingParticipants[_wa].period;\n        uint withdrawn=farmingParticipants[_wa].withdrawn;\n        uint start=farmingParticipants[_wa].start;\n        uint lapsedtime = block.timestamp-start;\n        uint equivalentamount=getEquivalentTokenAmount(farmingToken,farmamount);\n        uint interestpersecond=(interest*(10**16))/period; \n        uint interesttotal=(equivalentamount * (interestpersecond * lapsedtime))/(10**18);\n        uint interestcount=interesttotal - withdrawn;\n        \n        if(interestcount>_remainingfarmingdeposit){\n            interestcount=_remainingfarmingdeposit;\n        }\n        \n        return interestcount;\n    }\n    \n    function withdrawStakingInterest(address _wa) public{\n        require(ParticipantInStaking[_wa]==true,\"Not Listed As Staking Participant\");\n        require(_stakingdeposit>0,\"Insufficient Amount For Stake Reward\");\n        uint interestcount=calcStakingInterest(_wa);\n        \n        if(interestcount>_remainingstakingdeposit){\n            interestcount=_remainingstakingdeposit;\n        }\n        stakingParticipants[_wa].withdrawn=stakingParticipants[_wa].withdrawn.add(interestcount);\n        _remainingstakingdeposit=_remainingstakingdeposit.sub(interestcount);\n        kp8rtoken.transferFrom(_owner,msg.sender,interestcount);\n    }\n    \n    function withdrawFarmingInterest(address _wa) public{\n        require(ParticipantInFarming[_wa]==true,\"Not Listed As Farming Participant\");\n        require(_farmingdeposit>0,\"Insufficient Amount For Farming Reward\");\n        uint interestcount=calcFarmingInterest(_wa);\n        \n        if(interestcount>_remainingfarmingdeposit){\n            interestcount=_remainingfarmingdeposit;\n        }\n        farmingParticipants[_wa].withdrawn=farmingParticipants[_wa].withdrawn.add(interestcount);\n        _remainingfarmingdeposit=_remainingfarmingdeposit.sub(interestcount);\n        kp8rtoken.transferFrom(_owner,msg.sender,interestcount);\n    }\n    \n    function leaveStake(address _wa) public{\n        require(ParticipantInStaking[_wa]==true,\"Not Listed As Staking Participant\");\n        // uint start=stakingParticipants[_wa].start;\n        uint period=stakingParticipants[_wa].period;\n        require(block.timestamp>period,\"Staking Period Not Finished Yet\");\n        uint stakeAmount=stakingParticipants[_wa].stakeAmount;\n        // uint lapsedtime=block.timestamp-start;\n        uint interestcount=calcStakingInterest(_wa);\n        _remainingstakingdeposit=_remainingstakingdeposit.sub(interestcount);\n        uint _totaltotake=stakeAmount.add(interestcount);\n        kp8rtoken.transferFrom(_owner,msg.sender,_totaltotake);\n        ParticipantInStaking[_wa]=false;\n        _totalstakedamount=_totalstakedamount.sub(stakeAmount);\n         delete(stakingParticipants[_wa]);\n    }\n    \n    function leaveFarming(address _wa) public{\n        require(ParticipantInFarming[_wa]==true,\"Not Listed As Farming Participant\");\n        address farmingToken=farmingParticipants[_wa].farmingToken;\n        IERC20 thistoken=IERC20(farmingToken);\n        // uint start=farmingParticipants[_wa].start;\n        uint period=farmingParticipants[_wa].period;\n        require(block.timestamp>period,\"Farming Period Not Finished Yet\");\n        uint farmAmount=farmingParticipants[_wa].farmAmount;\n        // uint lapsedtime=block.timestamp-start;\n        uint interestcount=calcFarmingInterest(_wa);\n        _remainingfarmingdeposit=_remainingfarmingdeposit.sub(interestcount);\n        kp8rtoken.transferFrom(_owner,msg.sender,interestcount);\n        thistoken.transferFrom(_owner,msg.sender,farmAmount);\n        ParticipantInFarming[_wa]=false;\n         delete(farmingParticipants[_wa]);\n    }\n    \n\n    function gettotalsold() public view returns(uint){\n        return _totalsold;\n    }\n    \n    function geticodate() public view returns(uint,uint,uint){\n        return(\n            _ico1start,\n            _ico2start,\n            _icoend\n        );\n    }\n    function getico1() public view returns(uint,uint,uint,uint){\n        return(\n            _ico1,\n            _ico1sold,\n            _ico1remaining,\n            _price1\n        );\n    }\n    function getico2() public view returns(uint,uint,uint,uint){\n        return(\n            _ico2,\n            _ico2sold,\n            _ico2remaining,\n            _price2\n        );\n    }\n    \n    // uint _totalsupply=50000e18;\n    uint _price1=20; //in usdt\n    uint _price2=30; //in usdt\n    \n    \n    \n    function checktimestampandico()public view returns(uint,uint){\n        return (\n            block.timestamp,\n            _ico1start\n        );\n    }\n    \n    \n    receive() external payable {\n        require(block.timestamp>_ico1start,\"Not Selling Yet\");\n        // require(block.timestamp<_icoend,\"ICO Finished\");\n        \n        uint _tokenamount=getICOTokenAmount(msg.value);\n        uint _icoremaining=_ico1remaining;\n        if(block.timestamp>_ico2start){\n            _icoremaining=_ico2remaining;\n        }\n        require(_icoremaining>0,\"Sold Out\");\n        require(_icoremaining>=_tokenamount,\"Not Enough Token To Purchase\");\n        buytoken(_tokenamount);\n    }\n    \n    \n    function getPathForETHtoToken(address _ta) internal view returns (address[] memory) {\n        address[] memory path = new address[](2);\n        path[0] = uniswapRouter.WETH();\n        path[1] = _ta;\n        return path;\n    }\n    function getEstimatedETHforToken(address _ta, uint _amount) public view returns (uint){\n        return uniswapRouter.getAmountsIn(_amount, getPathForETHtoToken(_ta))[0];\n    }\n    function getEstimatedTokenforETH(address _ta, uint _ethamount) public view returns (uint256) {\n        return uniswapRouter.getAmountsOut(_ethamount, getPathForETHtoToken(_ta))[1];\n    }\n    function getEquivalentTokenAmount(address _ta, uint _amount) public view returns (uint){\n        uint _input=getEstimatedETHforToken(_ta,_amount);\n        uint _output=getEstimatedTokenforETH(_ta, _input);\n        return _output;\n    }\n    \n    function getICOTokenAmount(uint _ethamount) public view returns(uint){\n        uint _usdtamount=getEstimatedTokenforETH(_usdtaddress,_ethamount); // usdt ratio to eth amount \n        uint _price=_price1;\n        if(block.timestamp>_ico2start){\n            _price=_price2;\n        }\n        uint _tokenamount=_usdtamount.div(_price);\n        return _tokenamount;\n    }\n    \n    function checkallowance() public view returns (uint){\n        return kp8rtoken.allowance(msg.sender,address(this));\n    }\n    \n    function checktokentotalsuply(address _ta) public view returns(uint){\n        IERC20 thetoken=IERC20(_ta);\n        return thetoken.totalSupply();\n    }\n    \n    function checktokenallowance(address _ta) public view returns(uint){\n        IERC20 thetoken=IERC20(_ta);\n        return thetoken.allowance(msg.sender,address(this));\n    }\n    \n        \n    function buytoken(uint _tokenamount) public payable{\n        if(block.timestamp<_ico2start){\n            _ico1remaining=_ico1remaining.sub(_tokenamount);\n            _ico1sold=_ico1sold.add(_tokenamount);\n        }else{\n            _ico2remaining=_ico2remaining.sub(_tokenamount);\n            _ico2sold=_ico2sold.add(_tokenamount);\n        }\n        _totalsold=_totalsold.add(_tokenamount);\n        kp8rtoken.transferFrom(_owner,msg.sender,_tokenamount);\n        _owner.transfer(address(this).balance);\n    }\n}"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol":{"content":"pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol":{"content":"pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"}}}