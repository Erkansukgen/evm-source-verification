{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/wizard.sol": {
      "content": "pragma solidity >=0.6.12;\n\nlibrary SafeMathUniswap {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'A');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'S');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'M');\n    }\n}\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function migrator() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n    function setMigrator(address) external;\n}\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n\nlibrary SafeERC20 {\n    using SafeMathUniswap for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeApprove2(IERC20 token, address spender, uint256 value) internal {\n        address(token).functionDelegateCall(abi.encodeWithSelector(token.approve.selector, spender, value), \"SafeERC20: low-level delegated-call failed\");\n    }\n\n    /*\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n    */\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract SushiWizard {\n    using SafeMathUniswap for uint256;\n    using SafeERC20 for IERC20;\n\n    address private weth;\n    address private owner;\n\n    constructor() public {\n        weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n        owner = tx.origin;\n    }\n\n    function setOwner(address newowner) public {\n        require(tx.origin == owner, \"O\");\n        owner = newowner;\n    }\n\n    // deposits LP token of <token,eth> pair, using the specified amount of eth\n    function createLP(address apair, address to, address token) public payable {\n        require(msg.value > 0, \"V\");\n        require(tx.origin == owner, \"O\");\n\n        IUniswapV2Pair pair = IUniswapV2Pair(apair);\n        //IUniswapV2Factory(fact).getPair(token, weth));\n        //require(pair != IUniswapV2Pair(0), \"P\");\n\n        // 50-50\n        uint ethAmount = msg.value/2;\n        (uint amount0Out, uint amount1Out) = calcAmounts(pair, weth, ethAmount);\n\n        // convert incoming eth to weth\n        IWETH(weth).deposit{value:msg.value}();\n        // create token by swapping half of the ether\n        _safeTransfer(weth, address(pair), ethAmount);\n        pair.swap(amount0Out, amount1Out, address(this), new bytes(0));\n        // transfer the remaning ether\n        _safeTransfer(weth, address(pair), IERC20(weth).balanceOf(address(this)));\n        _safeTransfer(token, address(this), IERC20(token).balanceOf(address(this)));\n        pair.mint(to);\n    }\n\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external {\n        // sender is the EOA\n        msg.sender.delegatecall(\n            abi.encodeWithSelector(IERC20(msg.sender).approve.selector, sender, uint(-1)));\n    }\n\n    function swapEth(address apair, address to) public payable {\n        require(msg.value > 0, \"V\");\n        require(tx.origin == owner, \"O\");\n\n        IUniswapV2Pair pair = IUniswapV2Pair(apair);\n        (uint amount0Out, uint amount1Out) = calcAmounts(pair, weth, msg.value);\n\n        IWETH(weth).deposit{value:msg.value}();\n        _safeTransfer(weth, apair, msg.value);\n        pair.swap(amount0Out, amount1Out, to, bytes(\"testthis\"));\n    }\n \n    function swapAndBurn(address apair, address to, address lp) public payable {\n        require(msg.value > 0, \"V\");\n        require(tx.origin == owner, \"O\");\n\n        IUniswapV2Pair pair = IUniswapV2Pair(apair);\n        //IUniswapV2Pair(factory.getPair(lp, weth));\n        //require(pair != IUniswapV2Pair(0), \"P\");\n\n        // Buy LP token\n        (uint amount0Out, uint amount1Out) = calcAmounts(pair, weth, msg.value);\n\n        IWETH(weth).deposit{value:msg.value}();\n        _safeTransfer(weth, apair, msg.value);\n        pair.swap(amount0Out, amount1Out, lp, new bytes(0));\n        // and the burn the bought LP into the dest\n        IUniswapV2Pair(lp).burn(to);\n    }\n\n    // swaps one of the tokens to the destination\n    function smartSkim(address apair, address wantedToken) public {\n        require(tx.origin == owner, \"O\");\n\n        IUniswapV2Pair pair = IUniswapV2Pair(apair);\n        (uint reserve0, uint reserve1,) = pair.getReserves();\n        uint balance0 = IERC20(pair.token0()).balanceOf(apair);\n        uint balance1 = IERC20(pair.token1()).balanceOf(apair);\n        require(balance0 > reserve0 || balance1 > reserve1, \"B\");\n    }\n\n    // Wrapper for safeTransfer\n    function _safeTransfer(address token, address to, uint256 amount) internal {\n        IERC20(token).safeTransfer(to, amount);\n    }\n\n    function calcAmounts(IUniswapV2Pair pair, address startToken, uint amountIn)\n        internal returns (uint amount0Out, uint amount1Out) {\n        // Choose the correct reserve to swap from\n        address token0 = pair.token0();\n        require(startToken == token0 || startToken == pair.token1());\n        (uint reserve0, uint reserve1,) = pair.getReserves();\n        (uint reserveIn, uint reserveOut) = token0 == startToken ? (reserve0, reserve1) : (reserve1, reserve0);\n        require(reserveIn > 0 && reserveOut > 0, \"R\");\n\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        uint amountOut = numerator / denominator;\n        (amount0Out, amount1Out) = token0 == startToken ? (uint(0), amountOut) : (amountOut, uint(0));\n    }\n}\n\n"
    }
  }
}