{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"UnclaimedIndex.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2;\n\ncontract UnchainedIndex {\n    constructor() {\n        owner = msg.sender;\n        publishHash(\"QmP4i6ihnVrj8Tx7cTFw4aY6ungpaPYxDJEZ7Vg1RSNSdm\"); // empty file\n        emit OwnerChanged(address(0), owner);\n    }\n\n    function publishHash(string memory hash) public {\n        require(msg.sender == owner, \"msg.sender must be owner\");\n        lastUpdate = block.timestamp;\n        string memory prevHash = manifestHash;\n        manifestHash = hash;\n        emit HashPublished(prevHash, manifestHash);\n    }\n\n    function changeOwner(address newOwner) public returns (address oldOwner) {\n        require(msg.sender == owner, \"msg.sender must be owner\");\n        address prevOwner = owner;\n        owner = newOwner;\n        emit OwnerChanged(prevOwner, newOwner);\n        return oldOwner;\n    }\n\n    event HashPublished(string prevHash, string newHash);\n    event OwnerChanged(address prevOwner, address newOwner);\n\n    address public owner;\n    string public manifestHash;\n    uint256 public lastUpdate;\n}\n"}}}