{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/OXS.sol":{"content":"\r\npragma solidity ^0.6.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// OXS Token\r\n\r\n// Symbol      : OXS\r\n// Name        : OXsign\r\n// Total supply: 20,000 (20 Thousand)\r\n// Decimals    : 10\r\n// ----------------------------------------------------------------------------\r\n\r\n// \"SPDX-License-Identifier: UNLICENSED \"\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint a, uint m) internal pure returns (uint r) {\r\n    return (a + m - 1) / m * m;\r\n  }\r\n}\r\n\r\n\r\nabstract contract ERC20Interface {\r\n    function totalSupply() public virtual view returns (uint);\r\n    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) public virtual returns (bool success);\r\n    function approve(address spender, uint256 tokens) public virtual returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\ncontract OXSign is ERC20Interface, Owned {\r\n    using SafeMath for uint256;\r\n    string public symbol = \"OXS\";\r\n    string public  name = \"OXSign\";\r\n    uint256 public decimals = 10;\r\n    uint256 private _totalSupply = 210000000000000;\r\n    uint256 private last_visit;\r\n    uint256 private locked_tockens = 0 * 0 ** (decimals);\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        owner = 0x621f096417121214b8A247Fd6B1b99984bd7531e;\r\n        balances[address(owner)] = totalSupply();\r\n        last_visit = now;\r\n        emit Transfer(address(0),address(owner), totalSupply());\r\n    }\r\n\r\n\r\n\r\n    function totalSupply() public override view returns (uint256){\r\n       return _totalSupply;\r\n    }\r\n\r\n\r\n    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    function transfer(address to, uint256 tokens) public override returns (bool success) {\r\n        // prevent transfer to 0x0, use burn instead\r\n        require(address(to) != address(0));\r\n        require(balances[msg.sender] >= tokens );\r\n        require(balances[to] + tokens >= balances[to]);\r\n        if (msg.sender == owner ){\r\n            if (locked_tockens != 0){\r\n                check_time();\r\n            }\r\n            require(balances[msg.sender].sub(tokens) >= locked_tockens, \"Please wait for tokens to be released\");\r\n        }\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function check_time() private {\r\n        if ((now.sub(last_visit)).div(1 weeks) >= 1){\r\n            uint256 weeks_spanned;\r\n            uint256 released;\r\n            uint256 week_allowance = 0 * 0 ** (decimals);\r\n            weeks_spanned = (now.sub(last_visit)).div(1 weeks);\r\n            released = weeks_spanned.mul(week_allowance);\r\n            if (released > locked_tockens){\r\n                released = locked_tockens;\r\n            }\r\n            last_visit = now;\r\n            locked_tockens = locked_tockens.sub(released);\r\n        }\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 tokens) public override returns (bool success){\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender,spender,tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\r\n        require(tokens <= allowed[from][msg.sender]); //check allowance\r\n        require(balances[from] >= tokens);\r\n        if (from == owner){\r\n            if (locked_tockens != 0){\r\n                check_time();\r\n            }\r\n            require(balances[msg.sender].sub(tokens) >= locked_tockens);\r\n        }\r\n        balances[from] = balances[from].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        emit Transfer(from,to,tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n}"}}}