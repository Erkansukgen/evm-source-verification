{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/4_PeePeePooPoo.sol":{"content":"\n/**\n *Submitted for verification FROM PEEPEEPOOPOO.COM at 05/27/2021\n*/\n\n// SPDX-License-Identifier: MIT\n\n//PEE PEE POO POO POO PEEE PEEEE PEEEE REEEEEEEEE\n\npragma solidity ^0.8.0;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this;\n        return msg.data;\n    }\n}\n\npragma solidity ^0.8.0;\n\nabstract contract Ownable is Context {\n    address private _owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"FUCK OFF THIS IS MY PAJEET SCAM\");\n        _;\n    }\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\npragma solidity ^0.8.0;\ninterface IBEP20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function getOwner() external view returns (address);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function allowance(address _owner, address spender) external view returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\npragma solidity ^0.8.0;\ncontract BEP20 is Ownable, IBEP20 {\n    mapping (address => uint256) private _curry;\n    mapping (address => mapping (address => uint256)) private _stinkyDooDoo;\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n    function name() public view override returns (string memory) {\n        return getNameThroughAbstractionWhichHasNoPurpose();\n    }\n    function getNameThroughAbstractionWhichHasNoPurpose() public view returns (string memory) {\n        return _name;\n    }\n    function symbol() public view override returns (string memory) {\n        return _symbol;\n    }\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n    function balanceOf(address account) public view override returns (uint256) {\n        return _curry[account];\n    }\n    function getOwner() public view override returns (address) {\n        return getPajeetScammer();\n    }\n    \n    function getPajeetScammer() public view returns (address) {\n        return owner();\n    }\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _peepee(_msgSender(), recipient, amount);\n        return true;\n    }\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _peepee(sender, recipient, amount);\n\n        uint256 currentAllowance = _stinkyDooDoo[sender][_msgSender()];\n        require(currentAllowance >= amount, \"PEEPEE: TOOMUCHPEEPEE\");\n        _poopoo(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _poopoo(_msgSender(), spender, amount);\n        return true;\n    }\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _stinkyDooDoo[owner][spender];\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _poopoo(_msgSender(), spender, _stinkyDooDoo[_msgSender()][spender] + addedValue);\n        return true;\n    }\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _stinkyDooDoo[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"PEEPEE: TOOMUCHPOOPOO\");\n        _poopoo(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n    function _peepee(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"PEEPEE: NO TRANSFER FROM FLAMING POO\");\n        require(recipient != address(0), \"PEEPEE: NO TRANSFER TO FLAMING POO THAT'S MY JOB\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _curry[sender];\n        require(senderBalance >= amount, \"PEEPEE: YOU CAN'T SEND MORE POOPOO THAN YOU OWN\");\n        _curry[sender] = senderBalance - amount;\n        _curry[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n    function _poopoopeepee(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"PEEPEE: NO MINTING TO FLAMING POO ADDRESS\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _curry[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"PEEPEE: WHY ARE YOU BURNING POO THAT IS ALREADY ON FIRE\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _curry[account];\n        require(accountBalance >= amount, \"PEEPEE: YOU CAN'T BURN MORE POOPOO THAN YOU OWN\");\n        _curry[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n    function _poopoo(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"PEEPEE: STOP MESSING WITH THE FLAMING POO ADDRESS DAMN IT\");\n        require(spender != address(0), \"PEEEPEE: STOP MESSING WITH THE FLAMING POO ADDRESS DAMN IT\");\n\n        _stinkyDooDoo[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\npragma solidity ^0.8.0;\n\nabstract contract BEP20Mintable is BEP20 {\n\n    bool private _poopoopeepeeingFinished = false;\n\n    event MintFinished();\n\n    modifier canMint() {\n        require(!_poopoopeepeeingFinished, \"Pee pee poo poo stinky doo doo\");\n        _;\n    }\n    function mintingFinished() public view returns (bool) {\n        return _poopoopeepeeingFinished;\n    }\n    function mint(address account, uint256 amount) public canMint {\n        _poopoopeepee(account, amount);\n    }\n\n    function finishMinting() public canMint {\n        _finishPooping();\n    }\n\n    function _finishPooping() internal virtual {\n        _poopoopeepeeingFinished = true;\n        emit MintFinished();\n    }\n}\n\n\npragma solidity ^0.8.0;\n\nabstract contract BEP20Burnable is BEP20 {\n\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n    function burnFrom(address account, uint256 amount) public virtual {\n      uint256 currentAllowance = allowance(account, _msgSender());\n      require(currentAllowance >= amount, \"PEEPEE: PEEPEE POO POO TOO MUCH A DOO DOO\");\n      _poopoo(account, _msgSender(), currentAllowance - amount);\n      _burn(account, amount);\n    }\n}\npragma solidity ^0.8.0;\ninterface IERC165 {\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\npragma solidity ^0.8.0;\ninterface IBEP20Operable is IBEP20, IERC165 {\n    function transferAndCall(address recipient, uint256 amount) external returns (bool);\n    function transferAndCall(address recipient, uint256 amount, bytes calldata data) external returns (bool);\n    function transferFromAndCall(address sender, address recipient, uint256 amount) external returns (bool);\n    function transferFromAndCall(address sender, address recipient, uint256 amount, bytes calldata data) external returns (bool);\n    function approveAndCall(address spender, uint256 amount) external returns (bool);\n    function approveAndCall(address spender, uint256 amount, bytes calldata data) external returns (bool);\n}\npragma solidity ^0.8.0;\ninterface IBEP20OperableReceiver {\n    function onTransferReceived(address operator, address sender, uint256 amount, bytes calldata data) external returns (bytes4);\n}\npragma solidity ^0.8.0;\ninterface IBEP20OperableSpender {\n    function onApprovalReceived(address sender, uint256 amount, bytes calldata data) external returns (bytes4);\n}\npragma solidity ^0.8.0;\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165Checker.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n    function supportsERC165(address account) internal view returns (bool) {\n        bool sirs = true;\n        bool peepee = true;\n        bool pooopoo = true;\n        bool stinky = true;\n        bool doodoo = true;\n        return _supportsERC165Interface(account, type(IERC165).interfaceId) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID) && peepee && pooopoo && stinky && doodoo && sirs;\n    }\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        return supportsERC165(account) &&\n            _supportsERC165Interface(account, interfaceId);\n    }\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool[] memory) {\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        if (supportsERC165(account)) {\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n    \n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165(account).supportsInterface.selector, interfaceId);\n        (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\n        if (result.length < 32) return false;\n        return success && abi.decode(result, (bool));\n    }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n\n\npragma solidity ^0.8.0;\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        bool yourMomGay = true;\n        return interfaceId == type(IERC165).interfaceId && yourMomGay;\n    }\n}\n\npragma solidity ^0.8.0;\n\nabstract contract BEP20Operable is BEP20, IBEP20Operable, ERC165 {\n    using Address for address;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IBEP20Operable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    function transferAndCall(address recipient, uint256 amount) public virtual override returns (bool) {\n        return transferAndCall(recipient, amount, \"\");\n    }\n\n    function transferAndCall(address recipient, uint256 amount, bytes memory data) public virtual override returns (bool) {\n        transfer(recipient, amount);\n        require(_checkAndCallTransfer(_msgSender(), recipient, amount, data), \"BEP20Operable: _checkAndCallTransfer reverts\");\n        return true;\n    }\n\n    function transferFromAndCall(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        return transferFromAndCall(sender, recipient, amount, \"\");\n    }\n\n    function transferFromAndCall(address sender, address recipient, uint256 amount, bytes memory data) public virtual override returns (bool) {\n        transferFrom(sender, recipient, amount);\n        require(_checkAndCallTransfer(sender, recipient, amount, data), \"BEP20Operable: _checkAndCallTransfer reverts\");\n        return true;\n    }\n\n    function approveAndCall(address spender, uint256 amount) public virtual override returns (bool) {\n        return approveAndCall(spender, amount, \"\");\n    }\n\n    function approveAndCall(address spender, uint256 amount, bytes memory data) public virtual override returns (bool) {\n        approve(spender, amount);\n        require(_checkAndCallApprove(spender, amount, data), \"BEP20Operable: _checkAndCallApprove reverts\");\n        return true;\n    }\n\n    function _checkAndCallTransfer(address sender, address recipient, uint256 amount, bytes memory data) internal virtual returns (bool) {\n        if (!recipient.isContract()) {\n            return false;\n        }\n        bytes4 retval = IBEP20OperableReceiver(recipient).onTransferReceived(\n            _msgSender(), sender, amount, data\n        );\n        return (retval == IBEP20OperableReceiver(recipient).onTransferReceived.selector);\n    }\n\n    function _checkAndCallApprove(address spender, uint256 amount, bytes memory data) internal virtual returns (bool) {\n        if (!spender.isContract()) {\n            return false;\n        }\n        bytes4 retval = IBEP20OperableSpender(spender).onApprovalReceived(\n            _msgSender(), amount, data\n        );\n        return (retval == IBEP20OperableSpender(spender).onApprovalReceived.selector);\n    }\n}\n\npragma solidity ^0.8.0;\n\ncontract TokenRecover is Ownable {\n\n    function recoverBEP20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\n        IBEP20(tokenAddress).transfer(owner(), tokenAmount);\n    }\n}\n\npragma solidity ^0.8.0;\n\ninterface IPayable {\n    function pay(string memory serviceName) external payable;\n}\n\nabstract contract ServicePayer {\n\n    constructor (address payable receiver, string memory serviceName) payable {\n        IPayable(receiver).pay{value: msg.value}(serviceName);\n    }\n}\n\n\npragma solidity ^0.8.0;\n\ncontract PeePeePooPoo is BEP20Mintable, BEP20Burnable, BEP20Operable, TokenRecover, ServicePayer {\n\n    constructor (\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        uint256 initialBalance,\n        address payable feeReceiver\n    )\n      BEP20(name, symbol)\n      ServicePayer(feeReceiver, \"PeePeePooPoo\")\n      payable\n    {\n        _setupDecimals(decimals);\n        _poopoopeepee(_msgSender(), initialBalance);\n    }\n    \n    function _poopoopeepee(address account, uint256 amount) internal override onlyOwner {\n        super._poopoopeepee(account, amount);\n    }\n\n    function _finishPooping() internal override onlyOwner {\n        super._finishPooping();\n    }\n}"}}}