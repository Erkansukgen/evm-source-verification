{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/dydxFLRead.sol":{"content":"pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\ninterface CTokenInterface {\n    function underlying() external view returns (address);\n}\n\ninterface TokenInterface {\n    function balanceOf(address) external view returns (uint);\n    function decimals() external view returns (uint);\n}\n\ninterface OrcaleComp {\n    function getUnderlyingPrice(address) external view returns (uint);\n}\n\ninterface ComptrollerLensInterface {\n    function markets(address) external view returns (bool, uint, bool);\n}\n\ninterface InstaMapping {\n    function cTokenMapping(address) external view returns (address);\n}\n\ninterface ChainLinkInterface {\n    function latestAnswer() external view returns (int256);\n    function decimals() external view returns (uint256);\n}\n\ninterface AaveInterface {\n    function getReserveConfigurationData(address _reserve)\n    external\n    view\n    returns (\n        uint256 ltv,\n        uint256 liquidationThreshold,\n        uint256 liquidationBonus,\n        address interestRateStrategyAddress,\n        bool usageAsCollateralEnabled,\n        bool borrowingEnabled,\n        bool stableBorrowRateEnabled,\n        bool isActive\n    );\n\n}\n\ninterface AaveProviderInterface {\n    function getLendingPool() external view returns (address);\n    function getLendingPoolCore() external view returns (address);\n    function getPriceOracle() external view returns (address);\n}\n\ninterface AavePriceInterface {\n    function getAssetPrice(address _asset) external view returns (uint256);\n}\n\ninterface AaveCoreInterface {\n    function getReserveCurrentLiquidityRate(address _reserve) external view returns (uint256);\n    function getReserveCurrentVariableBorrowRate(address _reserve) external view returns (uint256);\n}\n\ninterface VatLike {\n    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\n    function dai(address) external view returns (uint);\n    function urns(bytes32, address) external view returns (uint, uint);\n    function gem(bytes32, address) external view returns (uint);\n}\n\ninterface SpotLike {\n    function ilks(bytes32) external view returns (PipLike, uint);\n}\n\ninterface PipLike {\n    function peek() external view returns (bytes32, bool);\n}\n\ninterface InstaMcdAddress {\n    function manager() external view returns (address);\n    function vat() external view returns (address);\n    function jug() external view returns (address);\n    function spot() external view returns (address);\n    function pot() external view returns (address);\n    function getCdps() external view returns (address);\n}\n\n\ncontract DSMath {\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"math-not-safe\");\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n\n}\n\ncontract Helper is DSMath {\n     /**\n     * @dev Return ethereum address\n     */\n    function getEthAddress() internal pure returns (address) {\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\n    }\n\n    /**\n     * @dev Return WTH address\n     */\n    function getWethAddress() internal pure returns (address) {\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // WETH Address mainnet\n        // return 0xd0A1E359811322d97991E03f863a0C30C2cF029C; // WETH Address kovan\n    }\n\n     /**\n     * @dev Return eth price feed address\n     */\n    function getEthPriceFeed() internal pure returns (address) {\n        return 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419; // mainnet\n        // return 0x9326BFA02ADD2366b30bacB125260Af641031331; // kovan\n    }\n}\n\ncontract CompoundHelpers is Helper {\n    /**\n     * @dev get Compound Comptroller\n     */\n    function getComptroller() public pure returns (ComptrollerLensInterface) {\n        return ComptrollerLensInterface(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B); // mainnet\n        // return ComptrollerLensInterface(0x1f5D7F3CaAC149fE41b8bd62A3673FE6eC0AB73b); // kovan\n    }\n\n    /**\n     * @dev get Compound Open Feed Oracle Address\n     */\n    function getOracleAddress() public pure returns (address) {\n        return 0x9B8Eb8b3d6e2e0Db36F41455185FEF7049a35CaE;\n    }\n\n    /**\n     * @dev get ETH Address\n     */\n    function getCETHAddress() public pure returns (address) {\n        return 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\n    }\n\n    /**\n     * @dev Return InstaDApp Mapping Addresses\n     */\n    function getMappingAddr() internal pure returns (address) {\n        return 0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88; // InstaMapping Address\n    }\n\n    struct CompData {\n        uint tokenPriceInEth;\n        uint tokenPriceInUsd;\n    }\n}\n\n\ncontract CompoundResolver is CompoundHelpers {\n\n    function getCompPrice(CTokenInterface cToken) public view returns (uint tokenPrice, uint ethPrice) {\n        uint decimals = getCETHAddress() == address(cToken) ? 18 : TokenInterface(cToken.underlying()).decimals();\n        uint price = OrcaleComp(getOracleAddress()).getUnderlyingPrice(address(cToken));\n        ethPrice = OrcaleComp(getOracleAddress()).getUnderlyingPrice(getCETHAddress());\n        tokenPrice = price / 10 ** (18 - decimals);\n    }\n\n    function getCompound(address token, uint ethAmount) public view returns (uint) {\n        address cTokenAddr = InstaMapping(getMappingAddr()).cTokenMapping(token);\n        if (cTokenAddr == address(0)) return 0;\n        ComptrollerLensInterface comptroller = getComptroller();\n        (, uint cf, ) = comptroller.markets(getCETHAddress());\n        CTokenInterface cToken = CTokenInterface(cTokenAddr);\n        (uint tokenPrice, uint ethPrice) = getCompPrice(cToken);\n        uint ethColl = wmul(ethAmount, ethPrice);\n        ethColl = wmul(ethColl, sub(cf, 10**16));\n        uint debtCanBorrow = wdiv(ethColl, tokenPrice);\n        return debtCanBorrow;\n    }\n}\n\ncontract AaveHelpers is CompoundResolver {\n    /**\n     * @dev get Aave Provider Address\n    */\n    function getAaveProviderAddress() internal pure returns (address) {\n        return 0x24a42fD28C976A61Df5D00D0599C34c4f90748c8; //mainnet\n        // return 0x506B0B2CF20FAA8f38a4E2B524EE43e1f4458Cc5; //kovan\n    }\n\n    struct AaveTokenData {\n        uint ltv;\n        uint threshold;\n        bool usageAsCollEnabled;\n        bool borrowEnabled;\n        bool stableBorrowEnabled;\n        bool isActive;\n    }\n\n    function collateralData(AaveInterface aave, address token) internal view returns(AaveTokenData memory) {\n        AaveTokenData memory aaveTokenData;\n        (\n            aaveTokenData.ltv,\n            aaveTokenData.threshold,\n            ,\n            ,\n            aaveTokenData.usageAsCollEnabled,\n            aaveTokenData.borrowEnabled,\n            aaveTokenData.stableBorrowEnabled,\n            aaveTokenData.isActive\n        ) = aave.getReserveConfigurationData(token);\n        return aaveTokenData;\n    }\n\n    function getAavePrices(AaveProviderInterface AaveProvider, address token) \n    public view returns(uint tokenPrice, uint ethPrice) {\n        uint tokenPriceInETH = AavePriceInterface(AaveProvider.getPriceOracle()).getAssetPrice(token);\n        uint ethPriceDecimals = ChainLinkInterface(getEthPriceFeed()).decimals();\n        ethPrice = uint(ChainLinkInterface(getEthPriceFeed()).latestAnswer());\n        ethPrice = ethPrice * (10 ** (18 - ethPriceDecimals));\n        tokenPrice = wmul(tokenPriceInETH, ethPrice);\n    }\n\n    function getAaveData(address token, uint ethAmount)\n    public view returns (uint) {\n        AaveProviderInterface AaveProvider = AaveProviderInterface(getAaveProviderAddress());\n        AaveInterface aave = AaveInterface(AaveProvider.getLendingPool());\n        AaveTokenData memory aaveToken = collateralData(aave, token);\n        if (!aaveToken.borrowEnabled) return 0;\n        (uint tokenPrice, uint ethPrice) = getAavePrices(AaveProvider, token);\n        uint ethColl = wmul(ethAmount, ethPrice);\n        uint cf = sub(aaveToken.ltv, 1) * (10 ** 16);\n        ethColl = wmul(ethColl, cf);\n        uint debtCanBorrow = wdiv(ethColl, tokenPrice);\n        return debtCanBorrow;\n    }\n}\n\ncontract MakerHelpers is AaveHelpers {\n    /**\n     * @dev get MakerDAO MCD Address contract\n     */\n    function getMcdAddresses() public pure returns (address) {\n        return 0xF23196DF1C440345DE07feFbe556a5eF0dcD29F0;\n    }\n\n     /**\n     * @dev get Dai address\n     */\n    function getDaiAddress() public pure returns (address) {\n        return 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    }\n\n    /**\n     * @dev Convert String to bytes32.\n    */\n    function stringToBytes32(string memory str) internal pure returns (bytes32 result) {\n        require(bytes(str).length != 0, \"String-Empty\");\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            result := mload(add(str, 32))\n        }\n    }\n\n    function getColPrice(bytes32 ilk) internal view returns (uint price) {\n        address spot = InstaMcdAddress(getMcdAddresses()).spot();\n        address vat = InstaMcdAddress(getMcdAddresses()).vat();\n        (, uint mat) = SpotLike(spot).ilks(ilk);\n        (,,uint spotPrice,,) = VatLike(vat).ilks(ilk);\n        price = rmul(mat, spotPrice);\n    }\n\n    function getColRatio(bytes32 ilk) internal view returns (uint ratio) {\n        address spot = InstaMcdAddress(getMcdAddresses()).spot();\n        (, ratio) = SpotLike(spot).ilks(ilk);\n        ratio = rdiv(RAY, ratio);\n    }\n}\n\n\ncontract MakerResolver is MakerHelpers {\n\n    function getMakerData(address token, uint ethAmt) public view returns (uint) {\n        if (token != getDaiAddress()) return 0;\n        bytes32 ilk = stringToBytes32(\"ETH-A\");\n        uint ethPrice = getColPrice(ilk);\n        ethPrice = ethPrice / 10 ** 9;\n        uint cf = getColRatio(ilk) / 10 ** 9;\n        uint ethColl = wmul(ethAmt, ethPrice);\n        ethColl = wmul(ethColl, cf);\n        uint debtCanBorrow = ethColl;\n        return debtCanBorrow;\n    }\n}\n\ncontract DydxFlashloanHelper is MakerResolver {\n    /**\n     * @dev get Dydx Solo Address\n    */\n    function getSoloAddress() public pure returns (address addr) {\n        addr = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n    }\n}\n\ncontract DydxFlashloanResolver is DydxFlashloanHelper {\n    struct RouteData {\n        uint dydx;\n        uint maker;\n        uint compound;\n        uint aave;\n    }\n    \n    function getTokenLimit(address token) public view returns (RouteData memory){\n        RouteData memory routeData;\n        uint ethBalanceSolo = TokenInterface(getWethAddress()).balanceOf(getSoloAddress());\n        routeData.dydx = token == getEthAddress() ? ethBalanceSolo : TokenInterface(token).balanceOf(getSoloAddress());\n        routeData.dydx = wmul(routeData.dydx, 99 * 10 ** 16);\n        routeData.maker = getMakerData(token, ethBalanceSolo);\n        routeData.compound = getCompound(token, ethBalanceSolo);\n        routeData.aave = getAaveData(token, ethBalanceSolo);\n    }\n\n    function getTokensLimit(address[] memory tokens) public view returns (RouteData[] memory){\n        uint _len = tokens.length;\n        RouteData[] memory routeData = new RouteData[](_len);\n        for (uint i = 0; i < _len; i++) {\n            routeData[i] = getTokenLimit(tokens[i]);\n        }\n        return routeData;\n    }\n}\n\ncontract InstaDydxFlashloanResolver is DydxFlashloanResolver {\n    string public constant name = \"Dydx-flashloan-Resolver-v1\";\n}"}}}