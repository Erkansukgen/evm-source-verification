{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/DracoContract.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.7.4;\n\ninterface UniswapV2Factory {\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n\ninterface UniswapV2Pair {\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function token0() external view returns (address);\n}\n\ninterface UniswapV2Router02 {\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] memory path) external view returns (uint[] memory amounts);\n}\n\ncontract DracoContract {\n\n    address owner;\n    \n    modifier onlyOwner {\n        require(msg.sender == owner, \"Must be Owner\");\n        _;\n    }\n    \n    constructor() {\n        owner = msg.sender;\n    }\n    \n    function getOwner() external view onlyOwner returns(address) {\n        return owner;\n    }\n    \n    function changeOwner(address _new_owner) external onlyOwner {\n        owner = _new_owner;\n    }\n    \n    function getTokenData(address _factory, address _router, address _weth, address _token, uint _input, uint _output, address[] memory _path) external view onlyOwner returns(uint112, uint112, uint[] memory) {\n        uint[] memory amounts;\n        address pair = UniswapV2Factory(_factory).getPair(_token,_weth);\n        (uint112 reserve0, uint112 reserve1, ) = UniswapV2Pair(pair).getReserves();\n        if (UniswapV2Pair(pair).token0() != _weth) {\n            (reserve0, reserve1) = (reserve1, reserve0);\n        }\n        if (_input != 0) {\n            amounts = UniswapV2Router02(_router).getAmountsOut(_input, _path);\n        }\n        else if (_output != 0) {\n            amounts = UniswapV2Router02(_router).getAmountsIn(_output, _path);\n        }\n        return (reserve0, reserve1, amounts);\n    }\n    \n}"}}}