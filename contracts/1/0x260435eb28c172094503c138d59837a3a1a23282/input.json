{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/punkarb.sol": {
      "content": "pragma solidity =0.6.6;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\ninterface IWETH {\r\n    function withdraw(uint) external;\r\n    //function deposit() external payable;\r\n}\r\n\r\n\r\n/*\r\ninterface IERC20 {\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint value) external returns (bool);\r\n}\r\n*/\r\n\r\n\r\n\r\ninterface v2pool{\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}\r\n\r\ninterface punkmarket{\r\n    function buyPunk(uint punkIndex) payable external;\r\n    function offerPunkForSaleToAddress(uint punkIndex, uint minSalePriceInWei, address toAddress) external;\r\n}\r\n\r\ninterface nftxvault{\r\n    function mint(\r\n        uint256[] calldata tokenIds,\r\n        uint256[] calldata amounts \r\n    ) external returns (uint256);\r\n}\r\n\r\n\r\ncontract punknftxarb {\r\n\r\n    \r\n    address payable public owner;\r\n    \r\n\r\n    // main net\r\n    \r\n    // address wethaddr = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n\r\n    }\r\n    \r\n    \r\n    modifier onlyowner{\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n\r\n    receive() external payable {}\r\n\r\n\r\n    function deposit() payable external{\r\n    }\r\n\r\n\r\n    function _safeTransfer(address token, address to, uint value) private {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(bytes4(keccak256(bytes('transfer(address,uint256)'))), to, value));\r\n    }\r\n    \r\n    function withdrawtoken(address tokenaddr, uint amount) external onlyowner{\r\n        _safeTransfer(tokenaddr, owner, amount);\r\n    }\r\n    \r\n\r\n\r\n    function withdrawethamount(uint amount) external onlyowner {\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function uniswapV2Call(address _sender, uint _amount0, uint _amount1, bytes calldata _data) external {\r\n    \r\n        (uint256 amount, uint256 punkindex, uint256 punkprice)  = abi.decode(_data, (uint256, uint256, uint256));\r\n\r\n        // withdraw weth\r\n        IWETH(address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2)).withdraw(amount);\r\n\r\n        // buy the target punk\r\n        punkmarket(address(0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB)).buyPunk{value: punkprice}(punkindex);\r\n\r\n        // offer the punk to the vault\r\n        punkmarket(address(0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB)).offerPunkForSaleToAddress(punkindex, 0, address(0x269616D549D7e8Eaa82DFb17028d0B212D11232A));\r\n\r\n        // mint the utoken\r\n        uint256[] memory tokenIds = new uint256[](1);\r\n        tokenIds[0] = punkindex;\r\n        uint256[] memory amounts;\r\n        nftxvault(address(0x269616D549D7e8Eaa82DFb17028d0B212D11232A)).mint(tokenIds, amounts);\r\n\r\n        // transfer back the PUNK erc20\r\n        _safeTransfer(address(0x269616D549D7e8Eaa82DFb17028d0B212D11232A), msg.sender, 1e18);\r\n\r\n\r\n    }\r\n\r\n\r\n    function arb(uint256 amount, uint256 punkprice, uint256 punkindex, uint256 percent) public {\r\n\r\n        bytes memory data = abi.encode(amount, punkindex, punkprice);\r\n\r\n        v2pool(address(0x0463a06fBc8bF28b3F120cd1BfC59483F099d332)).swap(0, amount, address(this), data);\r\n\r\n        // pay the tips\r\n        block.coinbase.call{value: address(this).balance * percent / 100}(new bytes(0));\r\n\r\n        payable(owner).transfer(address(this).balance);\r\n\r\n    }\r\n\r\n\r\n}"
    }
  }
}