{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract Token {\r\n    string public name = \"Wrapped ETHO\";\r\n    string public symbol = \"ETHO\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 0;\r\n\r\n    address owner;\r\n    modifier restricted {\r\n        require(msg.sender == owner, \"This function is restricted to owner\");\r\n        _;\r\n    }\r\n    modifier issuerOnly {\r\n        require(isIssuer[msg.sender], \"You do not have issuer rights\");\r\n        _;\r\n    }\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    mapping(address => bool) isIssuer;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event IssuerRights(address indexed issuer, bool value);\r\n    event TransferOwnership(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    function mint(address _to, uint256 _amount)\r\n        public\r\n        issuerOnly\r\n        returns (bool success)\r\n    {\r\n        totalSupply += _amount;\r\n        balanceOf[_to] += _amount;\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _amount) public issuerOnly returns (bool success) {\r\n        totalSupply -= _amount;\r\n        balanceOf[msg.sender] -= _amount;\r\n        emit Transfer(msg.sender, address(0), _amount);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _amount)\r\n        public\r\n        issuerOnly\r\n        returns (bool success)\r\n    {\r\n        allowance[_from][msg.sender] -= _amount;\r\n        balanceOf[_from] -= _amount;\r\n        totalSupply -= _amount;\r\n        emit Transfer(_from, address(0), _amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        allowance[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        balanceOf[msg.sender] -= _amount;\r\n        balanceOf[_to] += _amount;\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) public returns (bool success) {\r\n        allowance[_from][msg.sender] -= _amount;\r\n        balanceOf[_from] -= _amount;\r\n        balanceOf[_to] += _amount;\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public restricted {\r\n        require(_newOwner != address(0), \"Invalid address: should not be 0x0\");\r\n        emit TransferOwnership(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function setIssuerRights(address _issuer, bool _value) public restricted {\r\n        isIssuer[_issuer] = _value;\r\n        emit IssuerRights(_issuer, _value);\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit TransferOwnership(address(0), msg.sender);\r\n    }\r\n}\r\n"
    }
  }
}