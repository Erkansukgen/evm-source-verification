{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Draken/EthWithdraw.sol": {
      "content": "pragma solidity 0.6.0;\r\n\r\ncontract EthWithdraw {\r\n    modifier onlyEthAutoHotWallet(\r\n        address _address\r\n    )\r\n    {\r\n        require(\r\n            ethAutoHotWallet == _address,\r\n            \"is not ethAutoHotWallet!\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    modifier onlyEthManualHotWallet(\r\n        address _address\r\n    )\r\n    {\r\n        require(\r\n            ethManualHotWallet == _address,\r\n            \"is not ethManualHotWallet!\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Auto\r\n    address public ethAutoHotWallet = 0xa8b7c3ee3ed9b2e201ff30B1BDA982d0c958CD77;\r\n    // Manual\r\n    address public ethManualHotWallet = 0xb25E62E56cF0d0aC6AB5CE74E182261Cab15a779;\r\n\r\n    mapping(bytes32 => bool) public _txExist;\r\n    \r\n    function withdraw(\r\n        bytes32 _drkTxHash,\r\n        address payable _receiver\r\n    )\r\n        public\r\n        payable\r\n        onlyEthAutoHotWallet(msg.sender)\r\n    {\r\n        require(!_txExist[_drkTxHash], \"already withdrawn!\");\r\n        _txExist[_drkTxHash] = true;\r\n        _receiver.transfer(msg.value);\r\n    }\r\n    \r\n    function manualWithdraw(\r\n        bytes32 _drkTxHash,\r\n        address payable _receiver\r\n    )\r\n        public\r\n        payable\r\n        onlyEthManualHotWallet(msg.sender)\r\n    {\r\n        require(!_txExist[_drkTxHash], \"already withdrawn!\");\r\n        _txExist[_drkTxHash] = true;\r\n        _receiver.transfer(msg.value);\r\n    }\r\n}"
    }
  }
}