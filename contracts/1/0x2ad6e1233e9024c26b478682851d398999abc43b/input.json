{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":99999},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"DexMexPricePrediction.sol":{"content":"// Dependency file: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n// SPDX-License-Identifier: MIT\n\n// pragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n\n\n// Dependency file: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\n\n\n// pragma solidity ^0.8.0;\n// import \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n\n\n// Dependency file: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\n\n\n// pragma solidity ^0.8.0;\n\n// import \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\n// import \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n\n\n// Dependency file: @openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\n\n\n// pragma solidity ^0.8.0;\n\n// import \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\n// import \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n\n\n// Dependency file: @openzeppelin/contracts/utils/math/SafeMath.sol\n\n\n// pragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\n\n// Dependency file: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\n\n// pragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description()\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n\n\n// Root file: contracts/DexMexPricePrediction.sol\n\n\npragma solidity ^0.8.0;\n\n// import \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n// import \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n// import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n// import \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ncontract DexMexPricePrediction is OwnableUpgradeable, PausableUpgradeable {\n    using SafeMath for uint256;\n\n    struct Round {\n        uint256 epoch;\n        uint256 startBlock;\n        uint256 lockBlock;\n        uint256 endBlock;\n        int256 lockPrice;\n        int256 closePrice;\n        uint256 totalAmount;\n        uint256 bullAmount;\n        uint256 bearAmount;\n        uint256 rewardBaseCalAmount;\n        uint256 rewardAmount;\n        bool oracleCalled;\n    }\n\n    enum Position {\n        Bull,\n        Bear\n    }\n\n    struct BetInfo {\n        Position position;\n        uint256 amount;\n        bool claimed; // default false\n    }\n\n    mapping(uint256 => Round) public rounds;\n    mapping(uint256 => mapping(address => BetInfo)) public ledger;\n    mapping(address => uint256[]) public userRounds;\n    uint256 public currentEpoch;\n    uint256 public intervalBlocks;\n    uint256 public bufferBlocks;\n    address public adminAddress;\n    address public operatorAddress;\n    uint256 public treasuryAmount;\n    AggregatorV3Interface internal oracle;\n    uint256 public oracleLatestRoundId;\n\n    uint256 public constant TOTAL_RATE = 100; // 100%\n    uint256 public rewardRate = 90; // 90%\n    uint256 public treasuryRate = 10; // 10%\n    uint256 public minBetAmount;\n    uint256 public oracleUpdateAllowance; // seconds\n\n    bool public genesisStartOnce = false;\n    bool public genesisLockOnce = false;\n\n    event StartRound(uint256 indexed epoch, uint256 blockNumber);\n    event LockRound(uint256 indexed epoch, uint256 blockNumber, int256 price);\n    event EndRound(uint256 indexed epoch, uint256 blockNumber, int256 price);\n    event BetBull(address indexed sender, uint256 indexed currentEpoch, uint256 amount);\n    event BetBear(address indexed sender, uint256 indexed currentEpoch, uint256 amount);\n    event Claim(address indexed sender, uint256 indexed currentEpoch, uint256 amount);\n    event ClaimTreasury(uint256 amount);\n    event RatesUpdated(uint256 indexed epoch, uint256 rewardRate, uint256 treasuryRate);\n    event MinBetAmountUpdated(uint256 indexed epoch, uint256 minBetAmount);\n    event RewardsCalculated(uint256 indexed epoch, uint256 rewardBaseCalAmount, uint256 rewardAmount, uint256 treasuryAmount);\n    event Pause(uint256 epoch);\n    event Unpause(uint256 epoch);\n\n    function initialize(\n        AggregatorV3Interface _oracle,\n        address _adminAddress,\n        address _operatorAddress,\n        uint256 _intervalBlocks,\n        uint256 _bufferBlocks,\n        uint256 _minBetAmount,\n        uint256 _oracleUpdateAllowance\n    ) external initializer {\n        oracle = _oracle;\n        adminAddress = _adminAddress;\n        operatorAddress = _operatorAddress;\n        intervalBlocks = _intervalBlocks;\n        bufferBlocks = _bufferBlocks;\n        minBetAmount = _minBetAmount;\n        oracleUpdateAllowance = _oracleUpdateAllowance;\n\n        OwnableUpgradeable.__Ownable_init();\n        PausableUpgradeable.__Pausable_init();\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == adminAddress, \"admin: wut?\");\n        _;\n    }\n\n    modifier onlyOperator() {\n        require(msg.sender == operatorAddress, \"operator: wut?\");\n        _;\n    }\n\n    modifier onlyAdminOrOperator() {\n        require(msg.sender == adminAddress || msg.sender == operatorAddress, \"admin | operator: wut?\");\n        _;\n    }\n\n    modifier notContract() {\n        require(!_isContract(msg.sender), \"contract not allowed\");\n        require(msg.sender == tx.origin, \"proxy contract not allowed\");\n        _;\n    }\n\n    /**\n     * @notice set admin address\n     * callable by owner\n     */\n    function setAdmin(address _adminAddress) external onlyOwner {\n        require(_adminAddress != address(0), \"Cannot be zero address\");\n        adminAddress = _adminAddress;\n    }\n\n    /**\n     * @notice set operator address\n     * callable by admin\n     */\n    function setOperator(address _operatorAddress) external onlyAdmin {\n        require(_operatorAddress != address(0), \"Cannot be zero address\");\n        operatorAddress = _operatorAddress;\n    }\n\n    /**\n     * @notice set interval blocks\n     * callable by admin\n     */\n    function setIntervalBlocks(uint256 _intervalBlocks) external onlyAdmin {\n        intervalBlocks = _intervalBlocks;\n    }\n\n    /**\n     * @notice set buffer blocks\n     * callable by admin\n     */\n    function setBufferBlocks(uint256 _bufferBlocks) external onlyAdmin {\n        require(_bufferBlocks <= intervalBlocks, \"Cannot be more than intervalBlocks\");\n        bufferBlocks = _bufferBlocks;\n    }\n\n    /**\n     * @notice set Oracle address\n     * callable by admin\n     */\n    function setOracle(address _oracle) external onlyAdmin {\n        require(_oracle != address(0), \"Cannot be zero address\");\n        oracle = AggregatorV3Interface(_oracle);\n    }\n\n    /**\n     * @notice set oracle update allowance\n     * callable by admin\n     */\n    function setOracleUpdateAllowance(uint256 _oracleUpdateAllowance) external onlyAdmin {\n        oracleUpdateAllowance = _oracleUpdateAllowance;\n    }\n\n    /**\n     * @notice set reward rate\n     * callable by admin\n     */\n    function setRewardRate(uint256 _rewardRate) external onlyAdmin {\n        require(_rewardRate <= TOTAL_RATE, \"rewardRate cannot be more than 100%\");\n        rewardRate = _rewardRate;\n        treasuryRate = TOTAL_RATE.sub(_rewardRate);\n\n        emit RatesUpdated(currentEpoch, rewardRate, treasuryRate);\n    }\n\n    /**\n     * @notice set treasury rate\n     * callable by admin\n     */\n    function setTreasuryRate(uint256 _treasuryRate) external onlyAdmin {\n        require(_treasuryRate <= TOTAL_RATE, \"treasuryRate cannot be more than 100%\");\n        rewardRate = TOTAL_RATE.sub(_treasuryRate);\n        treasuryRate = _treasuryRate;\n\n        emit RatesUpdated(currentEpoch, rewardRate, treasuryRate);\n    }\n\n    /**\n     * @notice set minBetAmount\n     * callable by admin\n     */\n    function setMinBetAmount(uint256 _minBetAmount) external onlyAdmin {\n        minBetAmount = _minBetAmount;\n\n        emit MinBetAmountUpdated(currentEpoch, minBetAmount);\n    }\n\n    /**\n     * @notice Start genesis round\n     */\n    function genesisStartRound() external onlyOperator whenNotPaused {\n        require(!genesisStartOnce, \"Can only run genesisStartRound once\");\n\n        currentEpoch = currentEpoch + 1;\n        _startRound(currentEpoch);\n        genesisStartOnce = true;\n    }\n\n    /**\n     * @notice Lock genesis round\n     */\n    function genesisLockRound() external onlyOperator whenNotPaused {\n        require(genesisStartOnce, \"Can only run after genesisStartRound is triggered\");\n        require(!genesisLockOnce, \"Can only run genesisLockRound once\");\n        require(block.number <= rounds[currentEpoch].lockBlock.add(bufferBlocks), \"Can only lock round within bufferBlocks\");\n\n        int256 currentPrice = _getPriceFromOracle();\n        _safeLockRound(currentEpoch, currentPrice);\n\n        currentEpoch = currentEpoch + 1;\n        _startRound(currentEpoch);\n        genesisLockOnce = true;\n    }\n\n    /**\n     * @notice Start the next round n, lock price for round n-1, end round n-2\n     */\n    function executeRound() external onlyOperator whenNotPaused {\n        require(genesisStartOnce && genesisLockOnce, \"Can only run after genesisStartRound and genesisLockRound is triggered\");\n\n        int256 currentPrice = _getPriceFromOracle();\n        // CurrentEpoch refers to previous round (n-1)\n        _safeLockRound(currentEpoch, currentPrice);\n        _safeEndRound(currentEpoch - 1, currentPrice);\n        _calculateRewards(currentEpoch - 1);\n\n        // Increment currentEpoch to current round (n)\n        currentEpoch = currentEpoch + 1;\n        _safeStartRound(currentEpoch);\n    }\n\n    /**\n     * @notice Bet bear position\n     */\n    function betBear() external payable whenNotPaused notContract {\n        require(_bettable(currentEpoch), \"Round not bettable\");\n        require(msg.value >= minBetAmount, \"Bet amount must be greater than minBetAmount\");\n        require(ledger[currentEpoch][msg.sender].amount == 0, \"Can only bet once per round\");\n\n        // Update round data\n        uint256 amount = msg.value;\n        Round storage round = rounds[currentEpoch];\n        round.totalAmount = round.totalAmount.add(amount);\n        round.bearAmount = round.bearAmount.add(amount);\n\n        // Update user data\n        BetInfo storage betInfo = ledger[currentEpoch][msg.sender];\n        betInfo.position = Position.Bear;\n        betInfo.amount = amount;\n        userRounds[msg.sender].push(currentEpoch);\n\n        emit BetBear(msg.sender, currentEpoch, amount);\n    }\n\n    /**\n     * @notice Bet bull position\n     */\n    function betBull() external payable whenNotPaused notContract {\n        require(_bettable(currentEpoch), \"Round not bettable\");\n        require(msg.value >= minBetAmount, \"Bet amount must be greater than minBetAmount\");\n        require(ledger[currentEpoch][msg.sender].amount == 0, \"Can only bet once per round\");\n\n        // Update round data\n        uint256 amount = msg.value;\n        Round storage round = rounds[currentEpoch];\n        round.totalAmount = round.totalAmount.add(amount);\n        round.bullAmount = round.bullAmount.add(amount);\n\n        // Update user data\n        BetInfo storage betInfo = ledger[currentEpoch][msg.sender];\n        betInfo.position = Position.Bull;\n        betInfo.amount = amount;\n        userRounds[msg.sender].push(currentEpoch);\n\n        emit BetBull(msg.sender, currentEpoch, amount);\n    }\n\n    /**\n     * @notice Claim reward\n     */\n    function claim(uint256 epoch) external notContract {\n        require(rounds[epoch].startBlock != 0, \"Round has not started\");\n        require(block.number > rounds[epoch].endBlock, \"Round has not ended\");\n        require(!ledger[epoch][msg.sender].claimed, \"Rewards claimed\");\n\n        uint256 reward;\n        // Round valid, claim rewards\n        if (rounds[epoch].oracleCalled) {\n            require(claimable(epoch, msg.sender), \"Not eligible for claim\");\n            Round memory round = rounds[epoch];\n            reward = ledger[epoch][msg.sender].amount.mul(round.rewardAmount).div(round.rewardBaseCalAmount);\n        }\n        // Round invalid, refund bet amount\n        else {\n            require(refundable(epoch, msg.sender), \"Not eligible for refund\");\n            reward = ledger[epoch][msg.sender].amount;\n        }\n\n        BetInfo storage betInfo = ledger[epoch][msg.sender];\n        betInfo.claimed = true;\n        _safeTransfer(address(msg.sender), reward);\n\n        emit Claim(msg.sender, epoch, reward);\n    }\n\n    /**\n     * @notice Claim all rewards in treasury\n     * callable by admin\n     */\n    function claimTreasury() external onlyOwner {\n        uint256 currentTreasuryAmount = treasuryAmount;\n        treasuryAmount = 0;\n        _safeTransfer(adminAddress, currentTreasuryAmount);\n\n        emit ClaimTreasury(currentTreasuryAmount);\n    }\n\n    /**\n     * @notice Return round epochs that a user has participated\n     */\n    function getUserRounds(\n        address user,\n        uint256 cursor,\n        uint256 size\n    ) external view returns (uint256[] memory, uint256) {\n        uint256 length = size;\n        if (length > userRounds[user].length - cursor) {\n            length = userRounds[user].length - cursor;\n        }\n\n        uint256[] memory values = new uint256[](length);\n        for (uint256 i = 0; i < length; i++) {\n            values[i] = userRounds[user][cursor + i];\n        }\n\n        return (values, cursor + length);\n    }\n\n    /**\n     * @notice called by the admin to pause, triggers stopped state\n     */\n    function pause() public onlyAdminOrOperator whenNotPaused {\n        _pause();\n\n        emit Pause(currentEpoch);\n    }\n\n    /**\n     * @notice called by the admin to unpause, returns to normal state\n     * Reset genesis state. Once paused, the rounds would need to be kickstarted by genesis\n     */\n    function unpause() public onlyAdmin whenPaused {\n        genesisStartOnce = false;\n        genesisLockOnce = false;\n        _unpause();\n\n        emit Unpause(currentEpoch);\n    }\n\n    /**\n     * @notice Get the claimable stats of specific epoch and user account\n     */\n    function claimable(uint256 epoch, address user) public view returns (bool) {\n        BetInfo memory betInfo = ledger[epoch][user];\n        Round memory round = rounds[epoch];\n        if (round.lockPrice == round.closePrice) {\n            return false;\n        }\n        return\n            round.oracleCalled &&\n            ((round.closePrice > round.lockPrice && betInfo.position == Position.Bull) ||\n                (round.closePrice < round.lockPrice && betInfo.position == Position.Bear));\n    }\n\n    /**\n     * @notice Get the refundable stats of specific epoch and user account\n     */\n    function refundable(uint256 epoch, address user) public view returns (bool) {\n        BetInfo memory betInfo = ledger[epoch][user];\n        Round memory round = rounds[epoch];\n        return !round.oracleCalled && block.number > round.endBlock.add(bufferBlocks) && betInfo.amount != 0;\n    }\n\n    /**\n     * @notice Start round\n     * Previous round n-2 must end\n     */\n    function _safeStartRound(uint256 epoch) internal {\n        require(genesisStartOnce, \"Can only run after genesisStartRound is triggered\");\n        require(rounds[epoch - 2].endBlock != 0, \"Can only start round after round n-2 has ended\");\n        require(block.number >= rounds[epoch - 2].endBlock, \"Can only start new round after round n-2 endBlock\");\n        _startRound(epoch);\n    }\n\n    function _startRound(uint256 epoch) internal {\n        Round storage round = rounds[epoch];\n        round.startBlock = block.number;\n        round.lockBlock = block.number.add(intervalBlocks);\n        round.endBlock = block.number.add(intervalBlocks * 2);\n        round.epoch = epoch;\n        round.totalAmount = 0;\n\n        emit StartRound(epoch, block.number);\n    }\n\n    /**\n     * @notice Lock round\n     */\n    function _safeLockRound(uint256 epoch, int256 price) internal {\n        require(rounds[epoch].startBlock != 0, \"Can only lock round after round has started\");\n        require(block.number >= rounds[epoch].lockBlock, \"Can only lock round after lockBlock\");\n        require(block.number <= rounds[epoch].lockBlock.add(bufferBlocks), \"Can only lock round within bufferBlocks\");\n        _lockRound(epoch, price);\n    }\n\n    function _lockRound(uint256 epoch, int256 price) internal {\n        Round storage round = rounds[epoch];\n        round.lockPrice = price;\n\n        emit LockRound(epoch, block.number, round.lockPrice);\n    }\n\n    /**\n     * @notice End round\n     */\n    function _safeEndRound(uint256 epoch, int256 price) internal {\n        require(rounds[epoch].lockBlock != 0, \"Can only end round after round has locked\");\n        require(block.number >= rounds[epoch].endBlock, \"Can only end round after endBlock\");\n        require(block.number <= rounds[epoch].endBlock.add(bufferBlocks), \"Can only end round within bufferBlocks\");\n        _endRound(epoch, price);\n    }\n\n    function _endRound(uint256 epoch, int256 price) internal {\n        Round storage round = rounds[epoch];\n        round.closePrice = price;\n        round.oracleCalled = true;\n\n        emit EndRound(epoch, block.number, round.closePrice);\n    }\n\n    /**\n     * @notice Calculate rewards for round\n     */\n    function _calculateRewards(uint256 epoch) internal {\n        require(rewardRate.add(treasuryRate) == TOTAL_RATE, \"rewardRate and treasuryRate must add up to TOTAL_RATE\");\n        require(rounds[epoch].rewardBaseCalAmount == 0 && rounds[epoch].rewardAmount == 0, \"Rewards calculated\");\n        Round storage round = rounds[epoch];\n        uint256 rewardBaseCalAmount;\n        uint256 rewardAmount;\n        uint256 treasuryAmt;\n        // Bull wins\n        if (round.closePrice > round.lockPrice) {\n            rewardBaseCalAmount = round.bullAmount;\n            rewardAmount = round.totalAmount.mul(rewardRate).div(TOTAL_RATE);\n            treasuryAmt = round.totalAmount.mul(treasuryRate).div(TOTAL_RATE);\n        }\n        // Bear wins\n        else if (round.closePrice < round.lockPrice) {\n            rewardBaseCalAmount = round.bearAmount;\n            rewardAmount = round.totalAmount.mul(rewardRate).div(TOTAL_RATE);\n            treasuryAmt = round.totalAmount.mul(treasuryRate).div(TOTAL_RATE);\n        }\n        // House wins\n        else {\n            rewardBaseCalAmount = 0;\n            rewardAmount = 0;\n            treasuryAmt = round.totalAmount;\n        }\n        round.rewardBaseCalAmount = rewardBaseCalAmount;\n        round.rewardAmount = rewardAmount;\n\n        // Add to treasury\n        treasuryAmount = treasuryAmount.add(treasuryAmt);\n\n        emit RewardsCalculated(epoch, rewardBaseCalAmount, rewardAmount, treasuryAmt);\n    }\n\n    /**\n     * @notice Get latest recorded price from oracle\n     * If it falls below allowed buffer or has not updated, it would be invalid\n     */\n    function _getPriceFromOracle() internal returns (int256) {\n        uint256 leastAllowedTimestamp = block.timestamp.add(oracleUpdateAllowance);\n        (uint80 roundId, int256 price, , uint256 timestamp, ) = oracle.latestRoundData();\n        require(timestamp <= leastAllowedTimestamp, \"Oracle update exceeded max timestamp allowance\");\n        require(roundId > oracleLatestRoundId, \"Oracle update roundId must be larger than oracleLatestRoundId\");\n        oracleLatestRoundId = uint256(roundId);\n        return price;\n    }\n\n    function _safeTransfer(address to, uint256 value) internal {\n        (bool success, ) = to.call{gas: 23000, value: value}(\"\");\n        require(success, \"TransferHelper: _TRANSFER_FAILED\");\n    }\n\n    function _isContract(address addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(addr)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @notice Determine if a round is valid for receiving bets\n     * Round must have started and locked\n     * Current block must be within startBlock and endBlock\n     */\n    function _bettable(uint256 epoch) internal view returns (bool) {\n        return\n            rounds[epoch].startBlock != 0 &&\n            rounds[epoch].lockBlock != 0 &&\n            block.number > rounds[epoch].startBlock &&\n            block.number < rounds[epoch].lockBlock;\n    }\n}\n"}}}