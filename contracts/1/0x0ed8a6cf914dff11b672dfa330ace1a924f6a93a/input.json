{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/SnxSimpleLiq.sol":{"content":"pragma solidity >=0.7.0 <0.9.0;\r\n\r\n// interface ILiquidations {\r\n//     function getLiquidationDeadlineForAccount(address account) external view returns (uint);\r\n// }\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function transfer(address to, uint value) external returns (bool);\r\n}\r\ninterface ISynthetix {\r\n    function liquidateDelinquentAccount(address account, uint susdAmount) external returns (bool);\r\n}\r\n\r\ncontract SnxSimpleLiq {\r\n    \r\n    address owner;\r\n//    ILiquidations mLiquidation;\r\n    ISynthetix mSNX;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n//        mLiquidation = ILiquidations(address(0xAD95C918af576c82Df740878C3E983CBD175daB6));\r\n        mSNX = ISynthetix(address(0x97767D7D04Fd0dB0A1a2478DCd4BA85290556B48));\r\n    }\r\n   \r\n    function executeLiq (address account, uint amount, uint256 deadlineAcc) public {\r\n//        uint256 deadlineAcc = mLiquidation.getLiquidationDeadlineForAccount(account);\r\n        require(_deadlinePassed(deadlineAcc), \"not ppp\");\r\n        mSNX.liquidateDelinquentAccount(account, amount);\r\n    }\r\n\r\n    function _deadlinePassed(uint deadline) internal view returns (bool) {\r\n//        return deadline > 0 && block.timestamp > deadline;\r\n        return block.timestamp > deadline;\r\n    }\r\n\r\n    function withrawTokenAll(address token) public {\r\n        uint balanceToken = IERC20(token).balanceOf(address(this));\r\n        bool success = IERC20(token).transfer(owner, balanceToken);\r\n    }\r\n\r\n    function withdrawETHAll() public {\r\n        uint balanceETH = address(this).balance;\r\n        (bool success, ) = owner.call{value: balanceETH}(new bytes(0));\r\n    }\r\n    \r\n}"}}}