{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/3_Ballot.sol": {
      "content": "\npragma solidity 0.5.16;\n\n\ncontract owned {\n    address payable public owner;\n    address payable internal newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address payable _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n\n    //this flow is to prevent transferring ownership to wrong wallet by mistake\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n\n interface paxInterface\n {\n    function transfer(address _to, uint256 _amount) external returns (bool);\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\n }\n\n\n\n\ncontract tempDist is owned{\n\n    address public paxTokenAddress;\n\n    uint eligibleCount;\n    uint totalDividendAmount;\n\n    function setEligibleCount(uint _eligibleCount) onlyOwner public returns(bool)\n    {\n        eligibleCount = _eligibleCount;\n        return true;\n    }\n\n    function setTotalDividendAmount(uint _totalDividendAmount) onlyOwner public returns(bool)\n    {\n        totalDividendAmount = _totalDividendAmount;\n        return true;\n    }\n\n\n    function changePAXaddress(address newPAXaddress) onlyOwner public returns(string memory){\n        //if owner makes this 0x0 address, then it will halt all the operation of the contract. This also serves as security feature.\n        //so owner can halt it in any problematic situation. Owner can then input correct address to make it all come back to normal.\n        paxTokenAddress = newPAXaddress;\n        return(\"PAX address updated successfully\");\n    }\n\n    function payToUser(address _user) onlyOwner public returns(bool)\n    {\n        uint amount = totalDividendAmount / eligibleCount;\n        require(paxInterface(paxTokenAddress).transfer(_user, amount),\"token transfer failed\");\n    }\n\n\n\n}"
    }
  }
}