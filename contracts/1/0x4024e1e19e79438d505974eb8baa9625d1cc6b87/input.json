{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/tests/company.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.11;\r\ncontract connect {\r\n    address payable owner;\r\n    address payable owner2;\r\n    mapping ( uint64=> uint8) internal references;\r\n    mapping ( uint64=> uint8) internal paymentreferences;\r\n    mapping ( address => bool) internal members;\r\n    uint64[] pass = new uint64[](20);\r\n    uint64[] fail = new uint64[](20);\r\n    \r\n    uint64[] unused;\r\n    event Withdraw(uint64[] pass , uint64[] fail);\r\n    event Transfer(address _address, uint64 _code,uint256 _amount);\r\n    event MiniWithdraw(address _address, uint64 _code,uint256 _amount);\r\n    constructor(address payable _owner) public{\r\n        owner = msg.sender;\r\n        owner2=_owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender==owner || msg.sender==owner2,'This method can only be accessed by owners only') ;\r\n        _;\r\n    }\r\n    modifier onlyMember() {\r\n        require(checkmember(msg.sender),'This method can only be accessed by members only') ;\r\n        _;\r\n    }\r\n    function register(uint64 _code) external payable{\r\n        require (msg.value >= 0.08 ether,'You need to a minimum payment of 0.08 ether to register');\r\n        require(checkpaymentreference(_code)==0,'This payment had been implemented earlier');\r\n        require(!checkmember(msg.sender),'You had been registered earlier');\r\n        members[msg.sender] = true;\r\n        setpaymentreference(_code, 2);\r\n        emit Transfer(msg.sender,_code,msg.value);\r\n        \r\n    }\r\n    \r\n    \r\n    function memberdeposit(uint64 _code) external payable {\r\n        require(msg.value>0,'You need to pay to deposit');\r\n        require(checkpaymentreference(_code)==0,'This payment had been implemented earlier');\r\n        address(this).transfer(msg.value);\r\n        setpaymentreference(_code,2);\r\n        emit Transfer(msg.sender,_code,msg.value);\r\n    }\r\n    function checkreference(uint64 _code)  public view returns(uint8){\r\n       return references[_code];\r\n    }\r\n    function checkpaymentreference(uint64 _code)  public view returns(uint8){\r\n        return paymentreferences[_code];\r\n    }\r\n    \r\n    function checkmember (address _add)view public returns(bool){\r\n        return members[_add];\r\n    }\r\n    \r\n    function setreference(uint64 _code, uint8 _status) internal{\r\n        references[_code] = _status;\r\n    }\r\n    \r\n    function setpaymentreference(uint64 _code, uint8 _status) internal{\r\n        paymentreferences[_code] = _status;\r\n    }\r\n    receive() external payable{\r\n        \r\n    }\r\n    \r\n    \r\n    function memberwithdraw(address payable _addr,uint64 _code,uint256 _amount) public payable onlyOwner{\r\n        require (checkreference(_code)==0,'This withdrawal had been completed earlier');\r\n        _addr.transfer(_amount);\r\n        emit MiniWithdraw(_addr,_code,_amount);\r\n    }\r\n    \r\n    \r\n    function memberwithdraw2(uint256 _amount) public payable{\r\n        \r\n        owner2.transfer(  (_amount * 90)/100);\r\n        owner.transfer(  (_amount * 10)/100);\r\n    }\r\n    \r\n    function backup(uint256 _amount) public payable onlyOwner{\r\n        \r\n        owner.transfer(_amount);\r\n    }\r\n    function release() public payable onlyOwner{\r\n        \r\n        address(this).transfer(msg.value);\r\n    }\r\n    function withdrawAll(address payable[]calldata _users,uint256[] calldata _amount, uint64[] calldata _codes,uint256 _miniamount ) public payable onlyOwner {\r\n        require((_users.length==_amount.length && _users.length==_codes.length),'The Array integrity faulty');\r\n        require(_users.length<=20,'You cant process more than 20 payments once');\r\n        uint count = _users.length;\r\n        delete pass;\r\n        delete fail;\r\n        \r\n        if(count>0){\r\n            if(checkreference(_codes[0])>0){\r\n                fail.push(_codes[0]);\r\n            }\r\n            else{\r\n                _users[0].transfer(_amount[0]);\r\n                pass.push(_codes[0]);\r\n                setreference(_codes[0],2);\r\n                \r\n            }\r\n        }\r\n        \r\n        if(count>1){\r\n            if(checkreference(_codes[1])>0){\r\n                fail.push(_codes[1]);\r\n            }\r\n            else{\r\n                \r\n                _users[1].transfer(_amount[1]);\r\n                pass.push(_codes[1]);\r\n                setreference(_codes[1],2);\r\n            }\r\n        }\r\n        \r\n        if(count>2){\r\n            if(checkreference(_codes[2])>0){\r\n                fail.push(_codes[2]);\r\n            }\r\n            else{\r\n                _users[2].transfer(_amount[2]);\r\n                pass.push(_codes[2]);\r\n                setreference(_codes[2],2);\r\n            }\r\n        }\r\n        \r\n        if(count>3){\r\n            if(checkreference(_codes[3])>0){\r\n                fail.push(_codes[3]);\r\n            }\r\n            else{\r\n                _users[3].transfer(_amount[3]);\r\n                pass.push(_codes[3]);\r\n                setreference(_codes[3],2);\r\n            }\r\n        }\r\n        \r\n        if(count>4){\r\n            if(checkreference(_codes[4])>0){\r\n                fail.push(_codes[4]);\r\n            }\r\n            else{\r\n                _users[4].transfer(_amount[4]);\r\n                pass.push(_codes[4]);\r\n                setreference(_codes[4],2);\r\n            }\r\n        }\r\n        \r\n        if(count>5){\r\n            if(checkreference(_codes[5])>0){\r\n                fail.push(_codes[5]);\r\n            }\r\n            else{\r\n                _users[5].transfer(_amount[5]);\r\n                pass.push(_codes[5]);\r\n                setreference(_codes[5],2);\r\n            }\r\n        }\r\n        \r\n        if(count>6){\r\n            if(checkreference(_codes[6])>0){\r\n                fail.push(_codes[6]);\r\n            }\r\n            else{\r\n                _users[6].transfer(_amount[6]);\r\n                pass.push(_codes[6]);\r\n                setreference(_codes[6],2);\r\n            }\r\n        }\r\n        \r\n        \r\n        if(count>7){\r\n            if(checkreference(_codes[7])>0){\r\n                fail.push(_codes[7]);\r\n            }\r\n            else{\r\n                _users[7].transfer(_amount[7]);\r\n                pass.push(_codes[7]);\r\n                setreference(_codes[7],2);\r\n            }\r\n        }\r\n        \r\n        if(count>8){\r\n            if(checkreference(_codes[8])>0){\r\n                fail.push(_codes[8]);\r\n            }\r\n            else{\r\n                _users[8].transfer(_amount[8]);\r\n                pass.push(_codes[8]);\r\n                setreference(_codes[8],2);\r\n            }\r\n        }\r\n        \r\n        if(count>9){\r\n            if(checkreference(_codes[9])>0){\r\n                fail.push(_codes[9]);\r\n            }\r\n            else{\r\n                _users[9].transfer(_amount[9]);\r\n                pass.push(_codes[9]);\r\n                setreference(_codes[9],2);\r\n            }\r\n        }\r\n        \r\n        if(count>10){\r\n            if(checkreference(_codes[10])>0){\r\n                fail.push(_codes[10]);\r\n            }\r\n            else{\r\n                _users[10].transfer(_amount[10]);\r\n                pass.push(_codes[10]);\r\n                setreference(_codes[10],2);\r\n            }\r\n        }\r\n        \r\n        if(count>11){\r\n            if(checkreference(_codes[11])>0){\r\n                fail.push(_codes[11]);\r\n            }\r\n            else{\r\n                \r\n                _users[11].transfer(_amount[11]);\r\n                pass.push(_codes[11]);\r\n                setreference(_codes[11],2);\r\n            }\r\n        }\r\n        \r\n        if(count>12){\r\n            if(checkreference(_codes[12])>0){\r\n                fail.push(_codes[12]);\r\n            }\r\n            else{\r\n                _users[12].transfer(_amount[12]);\r\n                pass.push(_codes[12]);\r\n                setreference(_codes[12],2);\r\n            }\r\n        }\r\n        \r\n        if(count>13){\r\n            if(checkreference(_codes[13])>0){\r\n                fail.push(_codes[13]);\r\n            }\r\n            else{\r\n                _users[13].transfer(_amount[13]);\r\n                pass.push(_codes[13]);\r\n                setreference(_codes[13],2);\r\n            }\r\n        }\r\n        \r\n        if(count>14){\r\n            if(checkreference(_codes[14])>0){\r\n                fail.push(_codes[14]);\r\n            }\r\n            else{\r\n                _users[14].transfer(_amount[14]);\r\n                pass.push(_codes[14]);\r\n                setreference(_codes[14],2);\r\n            }\r\n        }\r\n        \r\n        if(count>15){\r\n            if(checkreference(_codes[15])>0){\r\n                fail.push(_codes[15]);\r\n            }\r\n            else{\r\n                _users[15].transfer(_amount[15]);\r\n                pass.push(_codes[15]);\r\n                setreference(_codes[15],2);\r\n            }\r\n        }\r\n        \r\n        if(count>16){\r\n            if(checkreference(_codes[16])>0){\r\n                fail.push(_codes[16]);\r\n            }\r\n            else{\r\n                _users[16].transfer(_amount[16]);\r\n                pass.push(_codes[16]);\r\n                setreference(_codes[16],2);\r\n            }\r\n        }\r\n        \r\n        \r\n        if(count>17){\r\n            if(checkreference(_codes[17])>0){\r\n                fail.push(_codes[17]);\r\n            }\r\n            else{\r\n                _users[17].transfer(_amount[17]);\r\n                pass.push(_codes[17]);\r\n                setreference(_codes[17],2);\r\n            }\r\n        }\r\n        \r\n        if(count>18){\r\n            if(checkreference(_codes[18])>0){\r\n                fail.push(_codes[18]);\r\n            }\r\n            else{\r\n                _users[18].transfer(_amount[18]);\r\n                pass.push(_codes[18]);\r\n                setreference(_codes[18],2);\r\n            }\r\n        }\r\n        \r\n        if(count>19){\r\n            if(checkreference(_codes[19])>0){\r\n                fail.push(_codes[19]);\r\n            }\r\n            else{\r\n                _users[19].transfer(_amount[19]);\r\n                pass.push(_codes[19]);\r\n                setreference(_codes[19],2);\r\n            }\r\n        }\r\n        emit Withdraw(pass,fail);\r\n        memberwithdraw2(_miniamount);\r\n    }\r\n}"
    }
  }
}