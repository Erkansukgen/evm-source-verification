{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "AP3.sol": {
      "content": "pragma solidity 0.5.13;\r\n\r\ncontract AP3 {\r\n\r\n\tuint256 constant private TOKEN_PRECISION = 1e18;\r\n\t\r\n\tuint256 constant private initial_supply = 777 * TOKEN_PRECISION;\r\n\r\n\tstring constant public name = \"AP3 M4DN3SS\";\r\n\tstring constant public symbol = \"AP3\";\r\n\tuint8 constant public decimals = 18;\r\n\r\n\tuint8 constant public burn_rate = 7;\r\n\t\r\n\tstruct User {\r\n\t\tuint256 balance;\r\n\t\tmapping(address => uint256) allowance;\r\n\t}\r\n\r\n\tstruct Info {\r\n\t\tuint256 totalSupply;\r\n\t\tmapping(address => User) users;\r\n\t\taddress admin;\r\n\t\tbool maddness;\r\n\t}\r\n\tInfo private info;\r\n\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\r\n\r\n\tconstructor() public {\r\n\t    info.maddness = false;\r\n\t    info.admin = msg.sender;\r\n\t\tinfo.totalSupply = initial_supply;\r\n\t\tinfo.users[msg.sender].balance = initial_supply;\r\n\t\temit Transfer(address(0x0), msg.sender, initial_supply);\r\n\t}\r\n\r\n\r\n    function start_maddness () public {\r\n        require(msg.sender == info.admin);\r\n        require(!info.maddness);\r\n        info.maddness = true;\r\n    }\r\n    \r\n\tfunction transfer(address _to, uint256 _tokens) external returns (bool) {\r\n\t\t_transfer(msg.sender, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction balanceOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].balance;\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _tokens) external returns (bool) {\r\n\t\tinfo.users[msg.sender].allowance[_spender] = _tokens;\r\n\t\temit Approval(msg.sender, _spender, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {\r\n\t\trequire(info.users[_from].allowance[msg.sender] >= _tokens);\r\n\t\tinfo.users[_from].allowance[msg.sender] -= _tokens;\r\n\t\t_transfer(_from, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn info.totalSupply;\r\n\t}\r\n\r\n\tfunction allowance(address _user, address _spender) public view returns (uint256) {\r\n\t\treturn info.users[_user].allowance[_spender];\r\n\t}\r\n\r\n\tfunction _transfer(address _from, address _to, uint256 _tokens) internal returns (uint256) {\r\n\t\trequire(balanceOf(_from) >= _tokens);\r\n\t\t\r\n\t\tinfo.users[_from].balance -= _tokens;\r\n\t\tuint256 _transferred = 0;\r\n\t\t\r\n\t\tif(info.maddness){\r\n\t\t    uint256 _burnedAmount = _tokens * burn_rate / 100;\r\n    \t\t_transferred = _tokens - _burnedAmount;\r\n    \t\tinfo.users[_to].balance += _transferred;\r\n    \t\tinfo.totalSupply -= _burnedAmount;\r\n            emit Transfer(_from, address(0x0), _burnedAmount);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n    \t\t_transferred = _tokens;\r\n    \t\tinfo.users[_to].balance += _transferred;\r\n\t\t}\r\n        \r\n\t\temit Transfer(_from, _to, _transferred);\r\n\r\n\t\treturn _transferred;\r\n\t}\r\n}"
    }
  }
}