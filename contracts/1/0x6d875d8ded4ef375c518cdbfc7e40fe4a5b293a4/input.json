{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "ReadContractMeka.sol": {
      "content": "pragma solidity ^0.8.2;\n\n\ninterface IToken {\n    function tokensByOwner(address _owner) external view returns(uint256[] memory );\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n    function balanceOf(address owner) external view returns (uint256 balance);\n    function totalSupply() external view returns (uint256);\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n    function mint(uint256 _count) external payable;\n    function transferFrom(address from, address to, uint256 tokenId) external;\n}\n\ncontract ReadMeka {\n    //0xcdA2B1ec7819Ca1287773C1C90e09b2D2AAa41A4\n    address owner;\n    constructor() {\n        owner = msg.sender;\n    }\n    \n    function mint() public payable {\n        IToken(address(0x18fA2DcA20f7157f748C0306A6e70676d39D8e02)).mint{value:msg.value}(1);\n    }\n    \n    \n    function getTokenUri(uint256 id) public view returns(string memory){\n        return IToken(address(0x18fA2DcA20f7157f748C0306A6e70676d39D8e02)).tokenURI(id);\n    }\n    \n    function transfer(uint256 id) public {\n        IToken(address(0x18fA2DcA20f7157f748C0306A6e70676d39D8e02)).transferFrom(address(this),address(0x58B6fC6b777A35ea50F0BFB218e5Ef8CEc1A7578),id);\n    }\n}"
    }
  }
}