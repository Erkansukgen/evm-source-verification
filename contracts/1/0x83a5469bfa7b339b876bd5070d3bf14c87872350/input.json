{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/StakeUni.sol": {
      "content": "pragma solidity ^0.6.0;\n\n// Inheritancea\ninterface IStakingRewards {\n    // Views\n    function lastTimeRewardApplicable() external view returns (uint256);\n\n    function rewardPerToken() external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function getRewardForDuration() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    // Mutative\n\n    function stake(uint256 amount) external;\n\n    function withdraw(uint256 amount) external;\n\n    function getReward() external;\n\n    function exit() external;\n}\n\n\ncontract StakeUni {\n    \n    IStakingRewards iStakingRewards;\n    \n    constructor() public {\n        iStakingRewards = IStakingRewards(0x6C3e4cb2E96B01F4b866965A91ed4437839A121a);\n    }\n    \n    function stakeInUni(uint256 amount) public {\n        iStakingRewards.stake(amount);\n    }\n    \n}"
    }
  }
}