{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/FoxInvSplit.sol": {
      "content": "pragma solidity ^0.6.8;\n\n//SPDX-License-Identifier: MIT\n\ncontract Owner {\n\n    address payable owner;\n    \n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"You are not the owner\");\n        _;\n    }\n    \n    constructor() public {\n        owner = msg.sender;\n        emit OwnerSet(address(0), owner);\n    }\n\n    function changeOwner(address payable newOwner) public onlyOwner {\n        emit OwnerSet(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n\ncontract FoxInvSplit is Owner {\n    \n    uint per1;\n    uint per2;\n    address payable inv2;\n    \n    function get() public view returns (address, address, uint, uint) {\n        return (owner, inv2, per1, per2);\n    }\n    \n    function set(address payable investitor2, uint percentual2) public onlyOwner {\n        per1 = 10000 - percentual2;\n        per2 = percentual2;\n        inv2 = investitor2;\n    }\n        \n    function withdrawETH() external onlyOwner {\n        owner.transfer(address(this).balance);\n    }\n    \n    receive() external payable {\n        owner.transfer(msg.value * per1 / 10000);\n        inv2.transfer(msg.value * per2 / 10000);\n    }\n    \n}"
    }
  }
}