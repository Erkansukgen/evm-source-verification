{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/4_BridgeETH.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\ninterface IToken {\r\n  function transferFrom(address from, address to, uint amount) external returns (bool);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract BridgeBase {\r\n  address public admin;\r\n  IToken public token;\r\n  uint public nonce;\r\n  mapping(uint => bool) public processedNonces;\r\n\r\n  enum Step { Burn, Mint }\r\n  event Transfer(\r\n    address from,\r\n    address to,\r\n    uint amount,\r\n    uint date,\r\n    uint nonce,\r\n    Step indexed step\r\n  );\r\n\r\n  constructor(address _token) {\r\n    admin = msg.sender;\r\n    token = IToken(_token);\r\n  }\r\n\r\n  function burn(address to, uint amount) external {\r\n    require(token.transferFrom(msg.sender, address(this), amount), 'failed to lock token');\r\n    emit Transfer(\r\n      msg.sender,\r\n      to,\r\n      amount,\r\n      block.timestamp,\r\n      nonce,\r\n      Step.Burn\r\n    );\r\n    nonce++;\r\n  }\r\n\r\n  function mint(address to, uint amount, uint otherChainNonce) external {\r\n    require(msg.sender == admin, 'only admin');\r\n    require(processedNonces[otherChainNonce] == false, 'transfer already processed');\r\n    processedNonces[otherChainNonce] = true;\r\n    token.transfer(to, amount);\r\n    emit Transfer(\r\n      msg.sender,\r\n      to,\r\n      amount,\r\n      block.timestamp,\r\n      otherChainNonce,\r\n      Step.Mint\r\n    );\r\n  }\r\n}\r\n\r\ncontract BridgeEth is BridgeBase {\r\n  constructor(address token) BridgeBase(token) {}\r\n}\r\n"
    }
  }
}