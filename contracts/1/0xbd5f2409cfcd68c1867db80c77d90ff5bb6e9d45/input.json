{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "LiquidQueue/Reward.sol": {
      "content": "// File: contracts/openzeppelin/Ownable.sol\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\n\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), msg.sender);\n    }\n\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/openzeppelin/IERC20.sol\n\n// : MIT\npragma solidity ^0.7.6;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function decimals() external returns (uint8);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n// File: contracts/phase1/Reward.sol\n\n// : MIT\npragma solidity ^0.7.6;\n\n\n\nabstract contract IronCrownLike {\n    function settlePayments() public virtual;\n}\n\ncontract Reward is Ownable {\n    struct RewardTokenAddresses {\n        address EYE;\n        address SCX;\n    }\n    IronCrownLike public ironCrown;\n    RewardTokenAddresses rewardTokens;\n    address mintingModule;\n    address liquidQueue;\n    bool public enabled;\n\n    constructor() {\n        enabled = true;\n    }\n\n    receive() external payable {}\n\n    function seed(\n        address _mintingModule,\n        address _liquidQueue,\n        address _ironCrown,\n        address eye,\n        address scx\n    ) public onlyOwner {\n        rewardTokens.EYE = eye;\n        rewardTokens.SCX = scx;\n        mintingModule = _mintingModule;\n        liquidQueue = _liquidQueue;\n        ironCrown = IronCrownLike(_ironCrown);\n    }\n\n    modifier onlyValidTokens(address token) {\n        require(\n            token == rewardTokens.SCX || token == rewardTokens.EYE,\n            \"LIQUID QUEUE: invalid token\"\n        );\n        _;\n    }\n\n    modifier isEnabled(bool e) {\n        require(enabled == e, \"LIQUID QUEUE: Reward enabled status wrong\");\n        _;\n    }\n\n    function canReward(address token, uint256 amount)\n        public\n        view\n        onlyValidTokens(token)\n        returns (bool)\n    {\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        return (balance >= amount);\n    }\n\n    function requestReward(address token, uint256 value)\n        public\n        onlyValidTokens(token)\n        isEnabled(true)\n    {\n        ironCrown.settlePayments();\n        require(\n            msg.sender == mintingModule,\n            \"LIQUID QUEUE: only minting module\"\n        );\n        require(\n            canReward(token, value),\n            \"LIQUID QUEUE: insufficient reward token balance\"\n        );\n        IERC20(token).transfer(mintingModule, value);\n    }\n\n    function requestSlowQueueReward(address token, uint256 value)\n        public\n        onlyValidTokens(token)\n        isEnabled(true)\n        returns (bool)\n    {\n        ironCrown.settlePayments();\n        require(msg.sender == liquidQueue, \"LIQUID QUEUE: only Liquid Queue\");\n        if (canReward(token, value)) {\n            IERC20(token).transfer(liquidQueue, value);\n            return true;\n        }\n        return false;\n    }\n\n    function withdraw(address token) public onlyOwner isEnabled(false) {\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        IERC20(token).transfer(msg.sender, balance);\n    }\n\n    function toggle(bool e) public onlyOwner {\n        enabled = e;\n    }\n}\n"
    }
  }
}