{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/CWTSwap.sol": {
      "content": "\r\n// File: @openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\Address.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\ReentrancyGuard.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts\\lib\\Admin.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.2;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        // emit OwnershipTransferred(owner, newOwner);\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public virtual {\r\n        require(msg.sender == pendingOwner, \"AcceptOwnership: only new owner do this.\");\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0x0);\r\n    }\r\n}\r\n\r\ncontract Admin is Ownable {\r\n    mapping(address => bool) public isAdmin;\r\n\r\n    function addAdmin(address newAdmin) external onlyOwner {\r\n        isAdmin[newAdmin] = true;\r\n    }\r\n\r\n    function removeAdmin(address admin) external onlyOwner {\r\n        isAdmin[admin] = false;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == owner || isAdmin[msg.sender]);\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts\\Swap.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Swap is Admin, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    mapping(address => uint256) public asset;\r\n    mapping(address => uint256) public reserveToToken;\r\n    uint256 public fee;\r\n\r\n    address public reserve;\r\n\r\n    event UpdateReserve(address newReserve, address oldReserve);\r\n    event TokenPurchase(address indexed buyer, address indexed token, uint256 reserve_sold, uint256 tokens_bought);\r\n    event ReservePurchase(address indexed buyer, address indexed token, uint256 tokens_sold, uint256 reserve_bought);\r\n    event AddLiquidity(address indexed provider, address indexed token, uint256 reserve_amount, uint256 token_amount);\r\n    event RemoveLiquidity(address indexed provider, address indexed token, uint256 reserve_amount, uint256 token_amount);\r\n\r\n    function updateReserve(address token) public onlyAdmin {\r\n        require(token != address(0), \"Swap: new reserve is the zero address\");\r\n        emit UpdateReserve(token, reserve);\r\n        reserve = token;\r\n    }\r\n\r\n    function setFee(uint256 new_fee) external onlyAdmin {\r\n        require(new_fee <= 1e18); //fee must be smaller than 100%\r\n        fee = new_fee;\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit reserve && Tokens at current ratio to mint liquidity tokens.\r\n     * @dev min_liquidity does nothing when total liquidity supply is 0.\r\n     * @param token Address of Tokens reserved\r\n     * @param reserve_added Amount of reserve reserved\r\n     * @param min_liquidity Minium number of liquidity sender will mint if total liquidity supply is greater than 0.\r\n     * @param max_tokens Maxium number of tokens deposited. Deposits max amount if total liquidity supply is 0.\r\n     * @param deadline Time after which this transaction can no longer be executed.\r\n     * @return Amount of Liquidity minted\r\n     */\r\n    function addLiquidity(address token, uint256 reserve_added, uint256 min_liquidity, uint256 max_tokens, uint256 deadline) public onlyAdmin returns (uint256) {\r\n        require(deadline >= block.timestamp && max_tokens > 0 && reserve_added > 0);\r\n        uint256 total_liquidity = asset[token];\r\n\r\n        if (total_liquidity > 0) {\r\n            require(min_liquidity > 0);\r\n            uint256 token_reserve = IERC20(token).balanceOf(address(this));\r\n            uint256 token_amount = (reserve_added.mul(token_reserve) / reserveToToken[token]).add(1);\r\n            uint256 liquidity_minted = reserve_added.mul(total_liquidity) / reserveToToken[token];\r\n            require(max_tokens >= token_amount && liquidity_minted >= min_liquidity);\r\n            // balances[uint256(token)][msg.sender] = balances[uint256(token)][msg.sender].add(liquidity_minted);\r\n            asset[token] = total_liquidity.add(liquidity_minted);\r\n            reserveToToken[token] = reserveToToken[token].add(reserve_added);\r\n\r\n            // require(doTransferIn(token, msg.sender, token_amount));\r\n            // require(doTransferIn(reserve, msg.sender, reserve_added));\r\n\r\n            IERC20(token).safeTransferFrom(msg.sender, address(this), token_amount);\r\n            IERC20(reserve).safeTransferFrom(msg.sender, address(this), reserve_added);\r\n\r\n            emit AddLiquidity(msg.sender, token, reserve_added, token_amount);\r\n            // emit TransferSingle(msg.sender, address(0), msg.sender, uint256(token), liquidity_minted);\r\n            return liquidity_minted;\r\n\r\n        } else {\r\n            require(reserve_added >= 1000000000);\r\n            uint256 token_amount = max_tokens;\r\n            uint256 initial_liquidity = reserve_added;\r\n\r\n            asset[token] = initial_liquidity;\r\n            // balances[uint256(token)][msg.sender] = initial_liquidity;\r\n            reserveToToken[token] = reserveToToken[token].add(reserve_added);\r\n\r\n            // require(doTransferIn(token, msg.sender, token_amount));\r\n            // require(doTransferIn(reserve, msg.sender, reserve_added));\r\n\r\n            IERC20(token).safeTransferFrom(msg.sender, address(this), token_amount);\r\n            IERC20(reserve).safeTransferFrom(msg.sender, address(this), reserve_added);\r\n\r\n            emit AddLiquidity(msg.sender, token, reserve_added, token_amount);\r\n            // emit TransferSingle(msg.sender, address(0), msg.sender, uint256(token), initial_liquidity);\r\n            return initial_liquidity;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw reserve && Tokens at current ratio to burn liquidity tokens.\r\n     * @dev Burn liquidity tokens to withdraw reserve && Tokens at current ratio.\r\n     * @param token Address of Tokens withdrawn.\r\n     * @param amount Amount of liquidity burned.\r\n     * @param min_reserve Minium reserve withdrawn.\r\n     * @param min_tokens Minium Tokens withdrawn.\r\n     * @param deadline Time after which this transaction can no longer be executed.\r\n     * @return The amount of reserve && Tokens withdrawn.\r\n     */\r\n    function removeLiquidity(address token, uint256 amount, uint256 min_reserve, uint256 min_tokens, uint256 deadline) public onlyAdmin returns (uint256, uint256) {\r\n        require(amount > 0 && deadline >= block.timestamp && min_reserve > 0 && min_tokens > 0);\r\n        uint256 total_liquidity = asset[token];\r\n        require(total_liquidity > 0);\r\n        uint256 token_reserve = IERC20(token).balanceOf(address(this));\r\n        uint256 reserve_amount = amount.mul(reserveToToken[token]) / total_liquidity;\r\n        uint256 token_amount = amount.mul(token_reserve) / total_liquidity;\r\n        require(reserve_amount >= min_reserve && token_amount >= min_tokens);\r\n\r\n        // balances[uint256(token)][msg.sender] = balances[uint256(token)][msg.sender].sub(amount);\r\n        asset[token] = total_liquidity.sub(amount);\r\n        reserveToToken[token] = reserveToToken[token].sub(reserve_amount);\r\n\r\n        // require(doTransferOut(token, msg.sender, token_amount));\r\n        // require(doTransferOut(reserve, msg.sender, reserve_amount));\r\n\r\n        IERC20(token).safeTransfer(msg.sender, token_amount);\r\n        IERC20(reserve).safeTransfer(msg.sender, reserve_amount);\r\n\r\n        emit RemoveLiquidity(msg.sender, token, reserve_amount, token_amount);\r\n        // emit TransferSingle(msg.sender, msg.sender, address(0), uint256(token), amount);\r\n        return (reserve_amount, token_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Pricing function for converting between tokens.\r\n     * @param input_amount Amount of Tokens being sold.\r\n     * @param input_reserve Amount of Tokens in exchange reserves.\r\n     * @param output_reserve Amount of Tokens in exchange reserves.\r\n     * @return Amount of Tokens bought.\r\n     */\r\n    function getInputPrice(uint256 input_amount, uint256 input_reserve, uint256 output_reserve, uint256 feeRate) internal pure returns (uint256) {\r\n        require(input_reserve > 0 && output_reserve > 0);\r\n        uint256 input_amount_with_fee = input_amount.mul(1e18 - feeRate);\r\n        // uint256 numerator = input_amount_with_fee.mul(output_reserve);\r\n        // uint256 denominator = input_reserve.mul(1e18).add(input_amount_with_fee);\r\n        // return numerator / denominator;\r\n        return input_amount_with_fee.mul(output_reserve) / input_reserve.mul(1e18).add(input_amount_with_fee);\r\n    }\r\n\r\n    /**\r\n     * @dev Pricing function for converting between Tokens.\r\n     * @param output_amount Amount of Tokens being bought.\r\n     * @param input_reserve Amount of Tokens in exchange reserves.\r\n     * @param output_reserve Amount of Tokens in exchange reserves.\r\n     * @return Amount of Tokens sold.\r\n     */\r\n    function getOutputPrice(uint256 output_amount, uint256 input_reserve, uint256 output_reserve, uint256 feeRate) internal pure returns (uint256) {\r\n        require(input_reserve > 0 && output_reserve > 0);\r\n        // uint256 numerator = input_reserve.mul(output_amount).mul(1e18);\r\n        // uint256 denominator = (output_reserve.sub(output_amount)).mul(1e18 - fee);\r\n        // return (numerator / denominator).add(1);\r\n        return (input_reserve.mul(output_amount).mul(1e18) / (output_reserve.sub(output_amount)).mul(1e18 - feeRate)).add(1);\r\n    }\r\n\r\n\r\n    function reserveToTokenInput(address token, uint256 reserve_sold, uint256 min_tokens, uint256 deadline, address buyer, address recipient) internal returns (uint256) {\r\n        //check if such trading pair exists\r\n        require(asset[token] > 0);\r\n        require(deadline >= block.timestamp && reserve_sold > 0 && min_tokens > 0);\r\n        // uint256 token_reserve = IERC20(token).balanceOf(address(this));\r\n        // uint256 tokens_bought = getInputPrice(reserve_sold, reserveToToken[token], token_reserve);\r\n        uint256 tokens_bought = getInputPrice(reserve_sold, reserveToToken[token], IERC20(token).balanceOf(address(this)), fee);\r\n        reserveToToken[token] = reserveToToken[token].add(reserve_sold);\r\n\r\n        require(tokens_bought >= min_tokens);\r\n        // require(doTransferIn(reserve, buyer, reserve_sold));\r\n        // require(doTransferOut(token, recipient, tokens_bought));\r\n\r\n        IERC20(reserve).safeTransferFrom(buyer, address(this), reserve_sold);\r\n        IERC20(token).safeTransfer(recipient, tokens_bought);\r\n\r\n        emit TokenPurchase(buyer, token, reserve_sold, tokens_bought);\r\n        return tokens_bought;\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n    function reserveToTokenOutput(address token, uint256 tokens_bought, uint256 max_reserve, uint256 deadline, address  buyer, address recipient) internal returns (uint256) {\r\n        //check if such trading pair exists\r\n        require(asset[token] > 0);\r\n        require(deadline >= block.timestamp && tokens_bought > 0 && max_reserve > 0);\r\n        // uint256 token_reserve = IERC20(token).balanceOf(address(this));\r\n        // uint256 reserve_sold = getOutputPrice(tokens_bought, reserveToToken[token], token_reserve);\r\n        uint256 reserve_sold = getOutputPrice(tokens_bought, reserveToToken[token], IERC20(token).balanceOf(address(this)), fee);\r\n        reserveToToken[token] = reserveToToken[token].add(reserve_sold);\r\n\r\n        require(reserve_sold <= max_reserve);\r\n        // require(doTransferIn(reserve, buyer, reserve_sold));\r\n        // require(doTransferOut(token, recipient, tokens_bought));\r\n\r\n        IERC20(reserve).safeTransferFrom(buyer, address(this), reserve_sold);\r\n        IERC20(token).safeTransfer(recipient, tokens_bought);\r\n\r\n        emit TokenPurchase(buyer, token, reserve_sold, tokens_bought);\r\n        return reserve_sold;\r\n    }\r\n\r\n    \r\n\r\n    function tokenToReserveInput(address token, uint256 tokens_sold, uint256 min_reserve, uint256 deadline, address buyer, address recipient) internal returns (uint256) {\r\n        //check if such trading pair exists\r\n        require(asset[token] > 0);\r\n        require(deadline >= block.timestamp && tokens_sold > 0 && min_reserve > 0);\r\n        // uint256 token_reserve = IERC20(token).balanceOf(address(this));\r\n        // uint256 reserve_bought = getInputPrice(tokens_sold, token_reserve, reserveToToken[token]);\r\n        uint256 reserve_bought = getInputPrice(tokens_sold, IERC20(token).balanceOf(address(this)), reserveToToken[token], fee);\r\n        reserveToToken[token] = reserveToToken[token].sub(reserve_bought);\r\n\r\n        require(reserve_bought >= min_reserve);\r\n        // require(doTransferIn(token, buyer, tokens_sold));\r\n        // require(doTransferOut(reserve, recipient, reserve_bought));\r\n\r\n        IERC20(token).safeTransferFrom(buyer, address(this), tokens_sold);\r\n        IERC20(reserve).safeTransfer(recipient, reserve_bought);\r\n\r\n        emit ReservePurchase(buyer, token, tokens_sold, reserve_bought);\r\n        return reserve_bought;\r\n    }\r\n\r\n    \r\n\r\n    function tokenToReserveOutput(address token, uint256 reserve_bought, uint256 max_tokens, uint256 deadline, address buyer, address recipient) internal returns (uint256) {\r\n        //check if such trading pair exists\r\n        require(asset[token] > 0);\r\n        require(deadline >= block.timestamp && reserve_bought > 0);\r\n        // uint256 token_reserve = IERC20(token).balanceOf(address(this));\r\n        // uint256 tokens_sold = getOutputPrice(reserve_bought, token_reserve, reserveToToken[token]);\r\n        uint256 tokens_sold = getOutputPrice(reserve_bought, IERC20(token).balanceOf(address(this)), reserveToToken[token], fee);\r\n        reserveToToken[token] = reserveToToken[token].sub(reserve_bought);\r\n\r\n        require(max_tokens >= tokens_sold);\r\n        // require(doTransferIn(token, buyer, tokens_sold));\r\n        // require(doTransferOut(reserve, recipient, reserve_bought));\r\n\r\n        IERC20(token).safeTransferFrom(buyer, address(this), tokens_sold);\r\n        IERC20(reserve).safeTransfer(recipient, reserve_bought);\r\n\r\n        emit ReservePurchase(buyer, token, tokens_sold, reserve_bought);\r\n        return tokens_sold;\r\n    }\r\n\r\n    \r\n\r\n    function tokenToTokenInput(\r\n        address input_token,\r\n        address output_token,\r\n        uint256 tokens_sold,\r\n        uint256 min_tokens_bought,\r\n        uint256 deadline,\r\n        address buyer,\r\n        address recipient)\r\n        internal returns (uint256)\r\n    {\r\n        //check not self-swapping\r\n        require(input_token != output_token);\r\n        //check if such trading pair exists\r\n        require(asset[input_token] > 0 && asset[output_token] > 0);\r\n        require(deadline >= block.timestamp && tokens_sold > 0 && min_tokens_bought > 0);\r\n        // uint256 input_token_reserve = IERC20(input_token).balanceOf(address(this));\r\n        // uint256 reserve_bought = getInputPrice(tokens_sold, input_token_reserve, reserveToToken[input_token]);\r\n\r\n        // uint256 output_token_reserve = IERC20(output_token).balanceOf(address(this));\r\n        // uint256 token_bought = getInputPrice(reserve_bought, reserveToToken[output_token], output_token_reserve);\r\n\r\n        uint256 reserve_bought = getInputPrice(tokens_sold, IERC20(input_token).balanceOf(address(this)), reserveToToken[input_token], fee);\r\n        uint256 token_bought = getInputPrice(reserve_bought, reserveToToken[output_token], IERC20(output_token).balanceOf(address(this)), 0);\r\n\r\n        // move reserve reserve\r\n        reserveToToken[input_token] = reserveToToken[input_token].sub(reserve_bought);\r\n        reserveToToken[output_token] = reserveToToken[output_token].add(reserve_bought);\r\n\r\n        // do input/output token transfer\r\n        require(min_tokens_bought <= token_bought);\r\n        // require(doTransferIn(input_token, buyer, tokens_sold));\r\n        // require(doTransferOut(output_token, recipient, token_bought));\r\n\r\n        IERC20(input_token).safeTransferFrom(buyer, address(this), tokens_sold);\r\n        IERC20(output_token).safeTransfer(recipient, token_bought);\r\n\r\n        emit ReservePurchase(buyer, input_token, tokens_sold, reserve_bought);\r\n        emit TokenPurchase(buyer, output_token, reserve_bought, token_bought);\r\n        return token_bought;\r\n    }\r\n\r\n    \r\n\r\n    function tokenToTokenOutput(\r\n        address input_token,\r\n        address output_token,\r\n        uint256 tokens_bought,\r\n        uint256 max_tokens_sold,\r\n        uint256 deadline,\r\n        address buyer,\r\n        address recipient)\r\n        internal returns (uint256)\r\n    {\r\n        //check not self-swapping\r\n        require(input_token != output_token);\r\n        //check if such trading pair exists\r\n        require(asset[input_token] > 0 && asset[output_token] > 0);\r\n        require(deadline >= block.timestamp && tokens_bought > 0);\r\n        // uint256 output_token_reserve = IERC20(output_token).balanceOf(address(this));\r\n        // uint256 reserve_bought = getOutputPrice(tokens_bought, reserveToToken[output_token], output_token_reserve, fee);\r\n\r\n        // uint256 tokens_sold;\r\n        // tokens_sold = tokenToTokenOutputHelper(input_token,reserve_bought);\r\n\r\n        uint256 reserve_bought = getOutputPrice(tokens_bought, reserveToToken[output_token], IERC20(output_token).balanceOf(address(this)), fee);\r\n        uint256 tokens_sold = getOutputPrice(reserve_bought, IERC20(input_token).balanceOf(address(this)), reserveToToken[input_token], 0);\r\n\r\n\r\n        // move reserve reserve\r\n        reserveToToken[input_token] = reserveToToken[input_token].sub(reserve_bought);\r\n        reserveToToken[output_token] = reserveToToken[output_token].add(reserve_bought);\r\n\r\n        require(max_tokens_sold >= tokens_sold);\r\n        // require(doTransferIn(input_token, buyer, tokens_sold));\r\n        // require(doTransferOut(output_token, recipient, tokens_bought));\r\n\r\n        IERC20(input_token).safeTransferFrom(buyer, address(this), tokens_sold);\r\n        IERC20(output_token).safeTransfer(recipient, tokens_bought);\r\n\r\n        emit ReservePurchase(buyer, input_token, tokens_sold, reserve_bought);\r\n        emit TokenPurchase(buyer, output_token, reserve_bought, tokens_bought);\r\n        return tokens_sold;\r\n    }\r\n\r\n    // function tokenToTokenOutputHelper(address input_token, uint256 reserve_bought) internal view returns(uint256) {\r\n    //     uint256 input_token_reserve = IERC20(input_token).balanceOf(address(this));\r\n    //     uint256 tokens_sold = getOutputPrice(reserve_bought, input_token_reserve, reserveToToken[input_token], 0);\r\n    //     return  tokens_sold;\r\n    // }\r\n}\r\n\r\ncontract CWTSwap is Swap {\r\n\r\n    /***********************************|\r\n    |        Exchange Functions         |\r\n    |__________________________________*/\r\n\r\n\r\n    bool initialized;\r\n    \r\n    constructor (address token) public {\r\n        initialize(token);\r\n    }\r\n\r\n    function initialize(address token) public {\r\n        require(!initialized, \"initialize: Already initialized!\");\r\n        owner = msg.sender;\r\n        updateReserve(token);\r\n        initialized = true;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Convert reserve to tokens.\r\n     * @dev User specifies exact reserve input && minium output.\r\n     * @param token Address of Tokens bought.\r\n     * @param reserve_sold Amount of reserve user wants to pay.\r\n     * @param min_tokens Minium Tokens bought.\r\n     * @param deadline Time after which this transaction can no longer be executed.\r\n     * @return Amount of Tokens bought.\r\n     */\r\n    function reserveToTokenSwapInput(address token, uint256 reserve_sold,  uint256 min_tokens, uint256 deadline) onlyAdmin nonReentrant external returns (uint256) {\r\n        return reserveToTokenInput(token, reserve_sold, min_tokens, deadline, msg.sender, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Convert reserve to Tokens && transfers Tokens to recipient.\r\n     * @dev User specifies exact reserve input && minium output.\r\n     * @param token Address of Tokens bought.\r\n     * @param reserve_sold Amount of reserve user wants to pay.\r\n     * @param min_tokens Minium Tokens bought.\r\n     * @param deadline Time after which this transaction can no longer be executed.\r\n     * @param recipient The addresss that recieves output Tokens.\r\n     * @return Amount of Token bought.\r\n     */\r\n    function reserveToTokenTransferInput(address token, uint256 reserve_sold, uint256 min_tokens, uint256 deadline, address recipient) onlyAdmin nonReentrant external returns(uint256) {\r\n        require(recipient != address(this) && recipient != address(0));\r\n        return reserveToTokenInput(token, reserve_sold, min_tokens, deadline, msg.sender, recipient);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Convert reserve to Tokens.\r\n     * @dev User specifies maxium reserve input && exact output.\r\n     * @param token Address of Tokens bought.\r\n     * @param tokens_bought Amount of token bought.\r\n     * @param max_reserve Maxium amount of reserve sold.\r\n     * @param deadline Time after which this transaction can be no longer be executed.\r\n     * @return Amount of reserve sold.\r\n     */\r\n    function reserveToTokenSwapOutput(address token, uint256 tokens_bought, uint256 max_reserve, uint256 deadline) onlyAdmin nonReentrant external returns(uint256) {\r\n        return reserveToTokenOutput(token, tokens_bought, max_reserve, deadline, msg.sender, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Convert reserve to Tokens && transfer Tokens to recipient.\r\n     * @dev User specifies maxium reserve input && exact output.\r\n     * @param token Address of Tokens bought.\r\n     * @param tokens_bought Amount of token bought.\r\n     * @param max_reserve Maxium amount of reserve sold.\r\n     * @param deadline Time after which this transaction can be no longer be executed.\r\n     * @param recipient The address the receives output Tokens.\r\n     * @return Amount of reserve sold.\r\n     */\r\n    function reserveToTokenTransferOutput(address token, uint256 tokens_bought, uint256 max_reserve, uint256 deadline, address recipient) onlyAdmin nonReentrant external returns (uint256) {\r\n        require(recipient != address(this) && recipient != address(0));\r\n        return reserveToTokenOutput(token, tokens_bought, max_reserve, deadline, msg.sender, recipient);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Convert Tokens to reserve.\r\n     * @dev User specifies exact input && minium output.\r\n     * @param token Address of Tokens sold.\r\n     * @param tokens_sold Amount of Tokens sold.\r\n     * @param min_reserve Minium reserve purchased.\r\n     * @param deadline Time after which this transaction can no longer be executed.\r\n     * @return Amount of reserve bought.\r\n     */\r\n    function tokenToReserveSwapInput(address token, uint256 tokens_sold, uint256 min_reserve, uint256 deadline) onlyAdmin nonReentrant external returns (uint256) {\r\n        return tokenToReserveInput(token, tokens_sold, min_reserve, deadline, msg.sender, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Convert Tokens to reserve && transfer reserve to recipient.\r\n     * @dev User specifies exact input && minium output.\r\n     * @param token The address of Tokens sold.\r\n     * @param tokens_sold Amount of Tokens sold.\r\n     * @param min_reserve Minium reserve purchased.\r\n     * @param deadline Time after which this transaction can no longer be executed.\r\n     * @param recipient The address that receives output reserve.\r\n     * @return Amount of reserve bought.\r\n     */\r\n    function tokenToReserveTransferInput(address token, uint256 tokens_sold, uint256 min_reserve, uint256 deadline, address recipient) onlyAdmin nonReentrant external returns (uint256) {\r\n        require(recipient != address(this) && recipient != address(0));\r\n        return tokenToReserveInput(token, tokens_sold, min_reserve, deadline, msg.sender, recipient);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @notice Convert Tokens to reserve.\r\n     * @dev User specifies maxium input && exact output.\r\n     * @param token Address of Tokens sold.\r\n     * @param reserve_bought Amount of reserve bought.\r\n     * @param max_tokens Maxium Tokens sold.\r\n     * @param deadline Time after which this transaction can no longer be executed.\r\n     * @return Amount of Tokens sold.\r\n     */\r\n    function tokenToReserveSwapOutput(address token, uint256 reserve_bought, uint256 max_tokens, uint256 deadline) onlyAdmin nonReentrant external returns (uint256) {\r\n        return tokenToReserveOutput(token, reserve_bought, max_tokens, deadline, msg.sender, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Convert Tokens to reserve && transfers reserve to recipient.\r\n     * @dev User specifies maxium input && exact output.\r\n     * @param token Address of Tokens sold.\r\n     * @param reserve_bought Amount of reserve bought.\r\n     * @param max_tokens Maxium Tokens sold.\r\n     * @param deadline Time after which this transaction can no longer be executed.\r\n     * @param recipient The address that receives output reserve.\r\n     * @return Amount of Tokens sold.\r\n     */\r\n    function tokenToReserveTransferOutput(address token, uint256 reserve_bought, uint256 max_tokens, uint256 deadline, address  recipient) nonReentrant external onlyAdmin returns (uint256) {\r\n        require(recipient != address(this) && recipient != address(0));\r\n        return tokenToReserveOutput(token, reserve_bought, max_tokens, deadline, msg.sender, recipient);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Convert Tokens to Tokens.\r\n     * @dev User specifies exact input && minium output.\r\n     * @param input_token Address of Tokens sold.\r\n     * @param output_token Address of Tokens bought.\r\n     * @param tokens_sold Amount of Tokens sold.\r\n     * @param min_tokens_bought Minium amount of Tokens bought.\r\n     * @param deadline Time after which this transaction can no longer be executed.\r\n     * @return Amount of Tokens bought.\r\n     */\r\n    function tokenToTokenSwapInput(\r\n        address input_token,\r\n        address output_token,\r\n        uint256 tokens_sold,\r\n        uint256 min_tokens_bought,\r\n        uint256 deadline)\r\n        onlyAdmin\r\n        nonReentrant \r\n        external returns (uint256)\r\n    {\r\n        return tokenToTokenInput(input_token, output_token, tokens_sold,  min_tokens_bought, deadline, msg.sender, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Convert Tokens to Tokens && transfers Tokens to recipient.\r\n     * @dev User specifies exact input && minium output.\r\n     * @param input_token Address of Tokens sold.\r\n     * @param output_token Address of Tokens bought.\r\n     * @param tokens_sold Amount of Tokens sold.\r\n     * @param min_tokens_bought Minium amount of Tokens bought.\r\n     * @param deadline Time after which this transaction can no longer be executed.\r\n     * @param recipient The address that recieves output token.\r\n     * @return Amount of Tokens bought.\r\n     */\r\n    function tokenToTokenTransferInput(\r\n        address input_token,\r\n        address output_token,\r\n        uint256 tokens_sold,\r\n        uint256 min_tokens_bought,\r\n        uint256 deadline,\r\n        address recipient)\r\n        onlyAdmin\r\n        nonReentrant \r\n        external returns (uint256)\r\n    {\r\n        return tokenToTokenInput(input_token, output_token, tokens_sold,  min_tokens_bought, deadline, msg.sender, recipient);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Convert Tokens to Tokens.\r\n     * @dev User specifies maxium input && exact output.\r\n     * @param input_token Address of Tokens sold.\r\n     * @param output_token Address of Tokens bought.\r\n     * @param tokens_bought Amount of Tokens bought.\r\n     * @param max_tokens_sold Maxium amount of Tokens sold.\r\n     * @param deadline Time after which this transaction can no longer be executed.\r\n     * @return Amount of Tokens sold.\r\n     */\r\n    function tokenToTokenSwapOutput(\r\n        address input_token,\r\n        address output_token,\r\n        uint256 tokens_bought,\r\n        uint256 max_tokens_sold,\r\n        uint256 deadline)\r\n        onlyAdmin\r\n        nonReentrant \r\n        external returns (uint256)\r\n    {\r\n        return tokenToTokenOutput(input_token, output_token, tokens_bought, max_tokens_sold, deadline, msg.sender, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Convert Tokens to Tokens && transfers Tokens to recipient.\r\n     * @dev User specifies maxium input && exact output.\r\n     * @param input_token Address of Tokens sold.\r\n     * @param output_token Address of Tokens bought.\r\n     * @param tokens_bought Amount of Tokens bought.\r\n     * @param max_tokens_sold Maxium amount of Tokens sold.\r\n     * @param deadline Time after which this transaction can no longer be executed.\r\n     * @param recipient The address that receives output Tokens.\r\n     * @return Amount of Tokens sold.\r\n     */\r\n    function tokenToTokenTransferOutput(\r\n        address input_token,\r\n        address output_token,\r\n        uint256 tokens_bought,\r\n        uint256 max_tokens_sold,\r\n        uint256 deadline,\r\n        address recipient)\r\n        onlyAdmin\r\n        nonReentrant \r\n        external returns (uint256)\r\n    {\r\n\r\n        return tokenToTokenOutput(input_token, output_token, tokens_bought, max_tokens_sold, deadline, msg.sender, recipient);\r\n    }\r\n\r\n    \r\n\r\n\r\n    /**\r\n     * @notice Public price function for reserve to Token trades with an exact input.\r\n     * @param token address of token bought.\r\n     * @param reserve_sold Amount of reserve sold.\r\n     * @return Amount of Tokens that can be bought with input reserve.\r\n     */\r\n    function getReserveToTokenInputPrice(address token, uint256 reserve_sold) public view returns (uint256) {\r\n        require(reserve_sold > 0);\r\n        uint256 token_reserve = IERC20(token).balanceOf(address(this));\r\n        return getInputPrice(reserve_sold, reserveToToken[token], token_reserve, fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Public price function for reserve to Token trades with an exact output.\r\n     * @param token address of token to buy.\r\n     * @param tokens_bought Amount of Tokens bought.\r\n     * @return Amount of reserve needed to buy output Tokens.\r\n     */\r\n    function getReserveToTokenOutputPrice(address token, uint256 tokens_bought) public view returns (uint256) {\r\n        require(tokens_bought > 0);\r\n        uint256 token_reserve = IERC20(token).balanceOf(address(this));\r\n        return getOutputPrice(tokens_bought, reserveToToken[token], token_reserve, fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Public price function for Token to reserve trades with an exact input.\r\n     * @param token address of token sold.\r\n     * @param tokens_sold Amount of Tokens sold.\r\n     * @return Amount of reserve that can be bought with input Tokens.\r\n     */\r\n    function getTokenToReserveInputPrice(address token, uint256 tokens_sold) public view returns (uint256) {\r\n        require(tokens_sold > 0);\r\n        uint256 token_reserve = IERC20(token).balanceOf(address(this));\r\n        return getInputPrice(tokens_sold, token_reserve, reserveToToken[token], fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Public price function for Token to reserve trades with an exact output.\r\n     * @param token address of token sold.\r\n     * @param reserve_bought Amount of output reserve.\r\n     * @return Amount of Tokens needed to buy output reserve.\r\n     */\r\n    function getTokenToReserveOutputPrice(address token, uint256 reserve_bought) public view returns (uint256) {\r\n        require(reserve_bought > 0);\r\n        uint256 token_reserve = IERC20(token).balanceOf(address(this));\r\n        return getOutputPrice(reserve_bought, token_reserve, reserveToToken[token], fee);\r\n    }\r\n\r\n\r\n\r\n    function getTokenToTokenInputPrice(\r\n        address input_token,\r\n        address output_token,\r\n        uint256 tokens_sold)\r\n        public view returns (uint256)\r\n    {\r\n        uint256 reserve_bought = getInputPrice(tokens_sold, IERC20(input_token).balanceOf(address(this)), reserveToToken[input_token], fee);\r\n        return getInputPrice(reserve_bought, reserveToToken[output_token], IERC20(output_token).balanceOf(address(this)), 0);\r\n    }\r\n\r\n    function getTokenToTokenOutputPrice(\r\n        address input_token,\r\n        address output_token,\r\n        uint256 tokens_bought)\r\n        public view returns (uint256)\r\n    {\r\n        uint256 reserve_bought = getOutputPrice(tokens_bought, reserveToToken[output_token], IERC20(output_token).balanceOf(address(this)), fee);\r\n        return getOutputPrice(reserve_bought, IERC20(input_token).balanceOf(address(this)), reserveToToken[input_token], 0);\r\n    }\r\n}\r\n"
    }
  }
}