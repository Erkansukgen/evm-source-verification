{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/obfuscation_sushi_xor_chi.sol": {
      "content": "pragma solidity ^0.6.6;\n\nimport \"https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/TransferHelper.sol\";\n\ninterface Flashloan\n{\n    function flashloan(address underlying, uint repay_amnt, bytes32 borrower, bytes32 cTokenBorrowed, bytes32 cTokenCollateral, uint swap1, uint swap2) external;\n}\n\ninterface ChiToken\n{\n    function freeFromUpTo(address from, uint256 value) external returns (uint256);\n}\n\ninterface comptroller\n{\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\n}\n\ncontract obfuscation \n{\n    constructor () public {}\n    \n    receive () external payable {}\n    \n    function toAddress(bytes32 a) pure internal returns (address)\n    {\n        return address(uint160(uint(a)));\n    }\n    \n    function decode(bytes32 account) internal pure returns (address)\n    {\n        bytes32 encoding_address = 0x0000000000000000000000005f4c5662675e7acef362e76ec2fd34480173eca7;\n        return toAddress(encoding_address ^ account);\n    }\n    \n    function isAuthorized(address _a) pure internal returns (bool)\n    {\n        if (_a == 0xe2B32824733d350845c056CedD73c491FC4C1585) {\n            return true;\n        } else if (_a == 0xd939Fb3d761daEc4ad40CFD801B8de620449EeD7) {\n            return true;\n        } else if (_a == 0x5F4c5662675E7acEF362E76Ec2fd34480173ECa7) {\n            return true;\n        } else if (_a == 0x55989DC8aE8B496A7067ccF50237De9304CC0511) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    function sendRequestToFlashloan(\n        address flashloan_contract, \n        bytes32 borrower, \n        uint repay_amnt, \n        uint n_cToken_borrowed, \n        uint n_cToken_received, \n        uint swap1, \n        uint swap2\n        ) external\n    {\n        uint256 gasStart = gasleft();\n        comptroller comp = comptroller(0x3d5BC3c8d13dcB8bF317092d84783c2697AE9258);\n        uint[] memory result = new uint[](3);\n        (result[0], result[1], result[2]) = comp.getAccountLiquidity(decode(borrower));\n        require(result[2] > 0, \"nu\");\n        require(isAuthorized(tx.origin));\n        bytes32[] memory cTokens = new bytes32[](33);\n        cTokens[0] = 0x0000000000000000000000008f2971b782344e5bd648b5e28b7a3473705b8c49;\n        cTokens[1] = 0x0000000000000000000000001bb7bdb092281dc49f511192c9fd9ec456205f85;\n        cTokens[2] = 0x00000000000000000000000094e25ce193a7e8a764aad4fb8706baab2faf87d1;\n        cTokens[3] = 0x0000000000000000000000009103bfd6dfa11b5a6ead0c10c141abe4a4eec214;\n        cTokens[4] = 0x000000000000000000000000469d300d33633821e4948959abb99662eb6962e1;\n        cTokens[5] = 0x000000000000000000000000c4e3dc30518a300ae3a2ff01216c4c9daba35720;\n        cTokens[6] = 0x0000000000000000000000002636fd7e809e6479d4c97f69a047bcaf124ecdf0;\n        cTokens[7] = 0x000000000000000000000000d66742507d11b166f50b495e7ff1edd27fbc8667;\n        cTokens[8] = 0x000000000000000000000000363e00a8c492d518d8d434c4de8162397919b37e;\n        cTokens[9] = 0x000000000000000000000000d4cab63be148d21a029f49e59b186bfdbd403c71;\n        cTokens[10] = 0x00000000000000000000000098b1dbac8337062006c01a28ca5a892295b49827;\n        cTokens[11] = 0x000000000000000000000000485c2922b0513ebe216e549ffa5d6682e9983819;\n        cTokens[12] = 0x00000000000000000000000040b49bd77547d24d78300ea4026645ad90cf7529;\n        cTokens[13] = 0x000000000000000000000000696f6e15145f775ce7d3eb3bdf934b8b74a0f3ff;\n        cTokens[14] = 0x00000000000000000000000011ad0926a1aea21fe00e64811015d0e477fab861;\n        cTokens[15] = 0x0000000000000000000000004fb1eb7c2fb05517c008af43b69c0ce61895a57c;\n        cTokens[16] = 0x0000000000000000000000005e9620bcc2c979997322e64d95452bb66372b08a;\n        cTokens[17] = 0x0000000000000000000000006cced0a2db56625f57df44f2b49a9a5d0a863ea1;\n        cTokens[18] = 0x000000000000000000000000b014e4b7c6e6a90315196dde962168cb1fe82c82;\n        cTokens[19] = 0x000000000000000000000000b7d63b676ea48dfe4e129c96aa2496ef45d08f60;\n        cTokens[20] = 0x000000000000000000000000b0bc6fa1a688123afbb27ab974cd3c2a2b04bf8b;\n        cTokens[21] = 0x0000000000000000000000007dfe15db03cbbf89aaef772c74047f49c358c239;\n        cTokens[22] = 0x000000000000000000000000d473a78f2868b80c4d05bd95d1310eedd6456902;\n        cTokens[23] = 0x000000000000000000000000751f29cb98f0d20f577fdb45aa54ff31145adaca;\n        cTokens[24] = 0x00000000000000000000000021e5905c46332fab30f6ed45ffe83a11c3e39114;\n        cTokens[25] = 0x000000000000000000000000751f29cb98f0d20f577fdb45aa54ff31145adaca;\n        cTokens[26] = 0x000000000000000000000000cf7936d3abb87bb7bf3aa8364b709ce0b6fa10fa;\n        cTokens[27] = 0x000000000000000000000000aa17e86032a98e29fc01641135d76337bca80583;\n        cTokens[28] = 0x0000000000000000000000008a5c6c9eb7ed8048aaf50847463b530ac468c62c;\n        cTokens[29] = 0x0000000000000000000000005a0728b193096e1dfa7c65c414b721c0dd337a4a;\n        cTokens[30] = 0x000000000000000000000000a22ccc61d4cd8b6f3ca829b47dfbb8e508dac845;\n        cTokens[31] = 0x00000000000000000000000089defa5022e5f8ff6953e1e3a97926316f9bb18b;\n        cTokens[32] = 0x000000000000000000000000cdfb317a38edca817b7cdda6274d52620309f138;\n        Flashloan f_contract = Flashloan(flashloan_contract);\n        f_contract.flashloan(address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE), repay_amnt, borrower, cTokens[n_cToken_borrowed % 33], cTokens[n_cToken_received % 33], swap1 % 2, swap2 % 2);\n        TransferHelper.safeTransferETH(address(tx.origin), address(this).balance);\n        ChiToken chi = ChiToken(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n        chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41947);\n    }\n    \n    function withdraw() external\n    {\n        require(isAuthorized(tx.origin));\n        TransferHelper.safeTransferETH(address(tx.origin), address(this).balance);\n    }\n    \n}"
    },
    "https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}\n"
    }
  }
}