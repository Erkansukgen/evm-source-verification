{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"PirateCoin.sol":{"content":"pragma solidity ^0.8.5;\n// SPDX-License-Identifier: MIT\n\ninterface IERC20 {\n\n    /**  \n     * @dev Returns the total tokens supply  \n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\n \n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data; // msg.data is used to handle array, bytes, string \n    }\n}\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    uint256 private _lockTime;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n     /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    \n    function getUnlockTime() public view returns (uint256) {\n        return _lockTime;\n    }\n\n    //Locks the contract for owner for the amount of time provided\n    function lock(uint256 time) public virtual onlyOwner {\n        _previousOwner = _owner;\n        _owner = address(0);\n        _lockTime = block.timestamp + time;\n        emit OwnershipTransferred(_owner, address(0));\n    }\n    \n    //Unlocks the contract for owner when _lockTime is exceeds\n    function unlock() public virtual {\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\n        require(block.timestamp > _lockTime , \"Contract is locked until 7 days\");\n        emit OwnershipTransferred(_owner, _previousOwner);\n        _owner = _previousOwner;\n        _previousOwner = address(0);\n    }\n}\n\n// pragma solidity >=0.5.0;\n\ninterface IUniswapFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\n\n// pragma solidity >=0.5.0;\n\ninterface IUniswapPair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n}\n\n// pragma solidity >=0.6.2;\n\ninterface IUniswapRouter01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\n\n\n// pragma solidity >=0.6.2;\n\ninterface IUniswapRouter02 is IUniswapRouter01 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n\ncontract PirateCoin is Context, IERC20, Ownable { // change contract name\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _tOwned; // total Owned tokens\n    mapping (address => mapping (address => uint256)) private _allowances; // allowed allowance for spender\n\n    mapping (address => bool) public _isExcludedFromFee; // excluded address from all fee\n    mapping (address => uint256) private _transactionCheckpoint;\n    mapping (address => bool) public _isBlacklisted; // blocks an address from buy and selling\n    mapping(address => bool) public _isExcludedFromTransactionlock; // Address to be excluded from transaction cooldown\n\n    address payable public _charityAddress = payable(0x1c061E64238F8e490Fbea3c9162b32b79140b57E); // charity Address\n\n    string private _name = \"PirateCoin\"; // token name\n    string private _symbol = \"PirateCoin\"; // token symbol\n    uint8 private _decimals = 18; // 1 token can be divided into 1e_decimals parts\n\n    uint256 private constant MAX = ~uint256(0); // maximum possible number uint256 decimal value\n    uint256 private _tTotal = 1000000 * 10**6 * 10**_decimals;\n    uint256 private _tFeeTotal; // total fee collected including tax fee and liquidity fee\n    \n    // All fees are with one decimal value. so if you want 0.5 set value to 5, for 10 set 100. so on...\n    \n    uint256 public _charityFee = 30; // charity fee 3%\n    uint256 private _previousCharityFee = _charityFee; // charity fee\n    \n    uint256 public _liquidityFee = 40; // actual liquidity fee 4%\n    uint256 private _previousLiquidityFee = _liquidityFee; // restore actual liquidity fee\n\n    uint256 private _totalDeductableFee = _charityFee.add(_liquidityFee); // liquidity + charity fee on each transaction\n    uint256 private _previousDeductableFee = _totalDeductableFee; // restore old liquidity fee\n\n\tuint256 private _transactionLockTime = 0; //Cool down time between each transaction per address\n\n    IUniswapRouter02 public uniswapRouter; // uniswap router assiged using address\n    address public uniswapPair; // for creating WETH pair with our token\n    \n    bool inSwapAndLiquify; // after each successfull swapandliquify disable the swapandliquify\n    bool public swapAndLiquifyEnabled = true; // set auto swap to ETH and liquify collected liquidity fee\n    \n    uint256 public _maxTxAmount = 5000 * 10**6 * 10**_decimals; // max allowed tokens tranfer per transaction\n    uint256 public _minTokensSwapToAndTransferTo = 500 * 10**6 * 10**_decimals; // min token liquidity fee collected before swapandLiquify\n\n    \n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap); //event fire min token liquidity fee collected before swapandLiquify \n    event SwapAndLiquifyEnabledUpdated(bool enabled); // event fire set auto swap to ETH and liquify collected liquidity fee\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiqiudity\n    ); // fire event how many tokens were swapedandLiquified\n    \n    modifier lockTheSwap {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    } // modifier to after each successfull swapandliquify disable the swapandliquify\n    \n    constructor () {\n        _tOwned[_msgSender()] = _tTotal; // assigning the max token to owner's address  \n        \n        IUniswapRouter02 _uniswapRouter = IUniswapRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n         // Create a uniswap pair for this new token\n        uniswapPair = IUniswapFactory(_uniswapRouter.factory())\n            .createPair(address(this), _uniswapRouter.WETH());    \n\n        // set the rest of the contract variables\n        uniswapRouter = _uniswapRouter;\n        \n        //exclude owner and this contract from fee\n        _isExcludedFromFee[owner()]             = true;\n        _isExcludedFromFee[address(this)]       = true;\n        _isExcludedFromFee[_charityAddress]     = true;\n\n        //exclude below addresses from transaction cooldown\n        _isExcludedFromTransactionlock[owner()]                 = true;\n        _isExcludedFromTransactionlock[address(this)]           = true;\n        _isExcludedFromTransactionlock[uniswapPair]             = true;\n        _isExcludedFromTransactionlock[_charityAddress]         = true;\n        _isExcludedFromTransactionlock[address(_uniswapRouter)] = true;\n        \n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _tOwned[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n    \n    /**  \n     * @dev approves allowance of a spender\n     */\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n    \n    /**  \n     * @dev transfers from a sender to receipent with subtracting spenders allowance with each successfull transfer\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n         return true;\n    }\n\n    /**  \n     * @dev approves allowance of a spender should set it to zero first than increase\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**  \n     * @dev decrease allowance of spender that it can spend on behalf of owner\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**  \n     * @dev Total collected Tax fee\n     */\n    function totalFeesCollected() public view returns (uint256) {\n        return _tFeeTotal;\n    }\n\n    /**  \n     * @dev exclude an address from fee\n     */\n    function excludeFromFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n    \n    /**  \n     * @dev include an address for fee\n     */\n    function includeInFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n\n    /**  \n     * @dev set's charity fee percentage\n     */\n    function setCharityFeePercent(uint256 Fee) external onlyOwner {\n        _charityFee = Fee;\n        _totalDeductableFee = _liquidityFee.add(_charityFee);\n    }\n    \n    /**  \n     * @dev set's liquidity fee percentage\n     */\n    function setLiquidityFeePercent(uint256 Fee) external onlyOwner {\n        _liquidityFee = Fee;\n        _totalDeductableFee = _liquidityFee.add(_charityFee);\n    }\n   \n    /**  \n     * @dev set's max amount of tokens percentage \n     * that can be transfered in each transaction from an address\n     */\n    function setMaxTxnTokens(uint256 maxTxTokens) external onlyOwner {\n        _maxTxAmount = maxTxTokens.mul( 10**_decimals );\n    }\n\n    /**  \n     * @dev set's minimmun amount of tokens required \n     * before swaped and ETH send to  wallet\n     * same value will be used for auto swapandliquifiy threshold\n     */\n    function setMinTokensSwapAndTransfer(uint256 minAmount) public onlyOwner\n    {\n        _minTokensSwapToAndTransferTo = minAmount.mul( 10 ** _decimals);\n    }\n\n    /**  \n     * @dev set's  address\n     */\n    function setCharityAddress(address payable charityAddress) external onlyOwner {\n        _charityAddress = charityAddress;\n    }\n\n    /**\n\t* @dev Sets transactions on time periods or cooldowns. Buzz Buzz Bots.\n\t* Can only be set by owner set in seconds.\n\t*/\n\tfunction setTransactionCooldownTime(uint256 transactiontime) public onlyOwner {\n\t\t_transactionLockTime = transactiontime;\n\t}\n\n    /**  \n     * @dev set's auto SwapandLiquify when contract's token balance threshold is reached\n     */\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\n        swapAndLiquifyEnabled = _enabled;\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\n    }\n\n    /**\n\t * @dev Exclude's an address from transactions from cooldowns.\n\t * Can only be set by owner.\n\t */\n\tfunction excludedFromTransactionCooldown(address account) public onlyOwner {\n\t\t_isExcludedFromTransactionlock[account] = true;\n\t}\n\n     /**\n\t * @dev Include's an address in transactions from cooldowns.\n\t * Can only be set by owner.\n\t */\n\tfunction includeInTransactionCooldown(address account) public onlyOwner {\n\t\t_isExcludedFromTransactionlock[account] = false;\n\t}\n    \n     //to recieve ETH from uniswapRouter when swaping\n    receive() external payable {}\n\n    /**  \n     * @dev get/calculates taxfee, liquidity fee\n     * without reward amount\n     */\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256) {\n        uint256 tTotalDeductable = calculateTotalDeductableFee(tAmount);\n        uint256 tTransferAmount = tAmount.sub(tTotalDeductable);\n        return (tTransferAmount, tTotalDeductable);\n    }\n    \n    /**  \n     * @dev take's liquidity fee tokens from tansaction and saves in contract\n     */\n    function _takeTotalDeductable(address sender, uint256 tTotalDeductable) private {\n        _tOwned[address(this)] = _tOwned[address(this)].add(tTotalDeductable);\n        emit Transfer(sender, address(this), tTotalDeductable);\n    }\n\n    /**  \n     * @dev calculates liquidity fee tokens to be deducted\n     */\n    function calculateTotalDeductableFee(uint256 _amount) private view returns (uint256) {\n        return _amount.mul(_totalDeductableFee).div(\n            10**3\n        );\n    }\n    \n    /**  \n     * @dev removes all fee from transaction if takefee is set to false\n     */\n    function removeAllFee() private {\n        if(_totalDeductableFee == 0 && _charityFee == 0\n           && _liquidityFee == 0) return;\n        \n        _previousLiquidityFee = _liquidityFee; \n        _previousCharityFee = _charityFee;\n        _previousDeductableFee = _totalDeductableFee;\n        \n        _charityFee = 0;\n        _liquidityFee = 0;\n        _totalDeductableFee = 0;\n    }\n    \n    /**  \n     * @dev restores all fee after exclude fee transaction completes\n     */\n    function restoreAllFee() private {\n        _liquidityFee = _previousLiquidityFee;\n        _charityFee = _previousCharityFee;\n        _totalDeductableFee = _previousDeductableFee;\n    }\n\n    /**  \n     * @dev approves amount of token spender can spend on behalf of an owner\n     */\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**  \n     * @dev transfers token from sender to recipient also auto \n     * swapsandliquify if contract's token balance threshold is reached\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(_isBlacklisted[from] == false, \"You are banned\");\n        require(_isBlacklisted[to] == false, \"The recipient is banned\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(_isExcludedFromTransactionlock[from] || block.timestamp >= _transactionCheckpoint[from] + _transactionLockTime,\n        \"Wait for transaction cooldown time to end before making a tansaction\");\n        require(_isExcludedFromTransactionlock[to] || block.timestamp >= _transactionCheckpoint[to] + _transactionLockTime,\n        \"Wait for transaction cooldown time to end before making a tansaction\");\n        if(from != owner() && to != owner())\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\n\n        _transactionCheckpoint[from] = block.timestamp;\n        _transactionCheckpoint[to] = block.timestamp;\n        // is the token balance of this contract address over the min number of\n        // tokens that we need to initiate a swap + liquidity lock?\n        // also, don't get caught in a circular liquidity event.\n        // also, don't swap & liquify if sender is uniswap pair.\n        uint256 contractTokenBalance = balanceOf(address(this));\n        \n        if(contractTokenBalance >= _maxTxAmount)\n        {\n            contractTokenBalance = _maxTxAmount;\n        }\n        \n        bool overMinTokenBalance = contractTokenBalance >=_minTokensSwapToAndTransferTo;\n        if (\n            overMinTokenBalance &&\n            !inSwapAndLiquify &&\n            from != uniswapPair &&\n            swapAndLiquifyEnabled\n        ) {\n            contractTokenBalance =_minTokensSwapToAndTransferTo;\n            //add liquidity\n            swapAndLiquify(contractTokenBalance);\n        }\n        \n        //indicates if fee should be deducted from transfer\n        bool takeFee = true;\n        \n        //if any account belongs to _isExcludedFromFee account then remove the fee\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\n            takeFee = false;\n        }\n        \n        //transfer amount, it will take tax, burn, liquidity fee\n        _tokenTransfer(from,to,amount,takeFee);\n    }\n\n    /**  \n     * @dev swapsAndLiquify tokens to uniswap if swapandliquify is enabled\n     */\n    function swapAndLiquify(uint256 tokenBalance) private lockTheSwap {\n        // first split contract into  fee and liquidity fee\n        uint256 swapPercent = _charityFee.add(_liquidityFee/2);\n        uint256 swapTokens = tokenBalance.mul(swapPercent).div(_totalDeductableFee);\n        uint256 liquidityTokens = tokenBalance.sub(swapTokens);\n\n        uint256 initialBalance = address(this).balance;\n\n        swapTokensForEth(swapTokens);\n\n        uint256 swappedAmount = address(this).balance.sub(initialBalance);\n\n        if(_charityFee > 0)\n        {\n            _charityAddress.transfer(swappedAmount.mul(_charityFee).div(swapPercent));\n        }\n        \n        if(_liquidityFee > 0)\n        {\n            uint256 liquidityETH = swappedAmount.mul(_liquidityFee/2).div(swapPercent);\n            // add liquidity to uniswap\n            addLiquidity(owner(), liquidityTokens, liquidityETH);\n            \n            emit SwapAndLiquify(liquidityTokens, liquidityETH, liquidityTokens);\n        }\n    }\n\n    /**  \n     * @dev swap's exact amount of tokens for ETH if swapandliquify is enabled\n     */\n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapRouter.WETH();\n\n        _approve(address(this), address(uniswapRouter), tokenAmount);\n\n        // make the swap\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    /**  \n     * @dev add's liquidy to uniswap if swapandliquify is enabled\n     */\n    function addLiquidity(address recipient, uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(uniswapRouter), tokenAmount);\n\n        // add the liquidity\n        uniswapRouter.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            recipient,\n            block.timestamp\n        );\n    }\n\n    //this method is responsible for taking all fee, if takeFee is true\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\n        if(!takeFee)\n            removeAllFee();\n\n        _transferStandard(sender, recipient, amount);\n\n        if(!takeFee)\n            restoreAllFee();\n    }\n\n    /**  \n     * @dev deducteds balance from sender and \n     * add to recipient with reward for both addresses\n     */\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n        (uint256 tTransferAmount, uint256 tTotalDeductable) = _getValues(tAmount);\n\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n\n        _takeTotalDeductable(sender, tTotalDeductable);\n\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    /**  \n     * @dev Blacklist a singel wallet from buying and selling\n     */\n    function blacklistSingleWallet(address account) public onlyOwner{\n        if(_isBlacklisted[account] == true) return;\n        _isBlacklisted[account] = true;\n    }\n\n    /**  \n     * @dev Blacklist multiple wallets from buying and selling\n     */\n    function blacklistMultipleWallets(address[] calldata accounts) public onlyOwner{\n        require(accounts.length < 800, \"Can not blacklist more then 800 address in one transaction\");\n        for (uint256 i; i < accounts.length; ++i) {\n            _isBlacklisted[accounts[i]] = true;\n        }\n    }\n    \n    /**  \n     * @dev un blacklist a singel wallet from buying and selling\n     */\n    function unBlacklistSingleWallet(address account) external onlyOwner{\n         if(_isBlacklisted[account] == false) return;\n        _isBlacklisted[account] = false;\n    }\n\n    /**  \n     * @dev un blacklist multiple wallets from buying and selling\n     */\n    function unBlacklistMultipleWallets(address[] calldata accounts) public onlyOwner{\n        require(accounts.length < 800, \"Can not Unblacklist more then 800 address in one transaction\");\n        for (uint256 i; i < accounts.length; ++i) {\n            _isBlacklisted[accounts[i]] = false;\n        }\n    }\n\n    /**  \n     * @dev recovers any tokens stuck in Contract's balance\n     * NOTE! if ownership is renounced then it will not work\n     * NOTE! Contract's Address and Owner's address MUST NOT\n     */\n    function recoverTokens() public onlyOwner\n    {\n        address recipient = _msgSender();\n        uint256 tokensToRecover = balanceOf(address(this));\n\n        _tOwned[address(this)] = _tOwned[address(this)].sub(tokensToRecover);\n        _tOwned[recipient] = _tOwned[recipient].add(tokensToRecover);\n\n        emit Transfer(address(this), recipient, tokensToRecover);\n    }\n    \n    /**  \n     * @dev recovers any ETH stuck in Contract's balance\n     * NOTE! if ownership is renounced then it will not work\n     */\n    function recoverETH() public onlyOwner\n    {\n        address payable recipient = _msgSender();\n        if(address(this).balance > 0)\n            recipient.transfer(address(this).balance);\n    }\n    \n    //New uniswap router version?\n    //No problem, just change it!\n    function setRouterAddress(address newRouter) public onlyOwner {\n        IUniswapRouter02 _newUniswapRouter = IUniswapRouter02(newRouter);\n        uniswapPair = IUniswapFactory(_newUniswapRouter.factory()).createPair(address(this), _newUniswapRouter.WETH());\n        uniswapRouter = _newUniswapRouter;\n    }\n\n}"}}}