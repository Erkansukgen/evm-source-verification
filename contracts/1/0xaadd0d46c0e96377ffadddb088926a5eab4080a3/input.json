{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"AYCToken.sol":{"content":"pragma solidity ^ 0.5.0;\r\n\r\n/**\r\n * @dev 检测数学运算错误\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\n//设置合约拥有者及转让\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n  \r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n  \r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n    emit OwnershipTransferred(owner, newOwner);\r\n  }\r\n  }\r\n}\r\n\r\n//使用并扩展ERC20接口\r\ncontract ERC20Interface {\r\n  function totalSupply() public view returns(uint);\r\n  function balanceOf(address tokenOwner) public view returns(uint balance);\r\n  function allowance(address tokenOwner, address spender) public view returns(uint remaining);\r\n  function transfer(address to, uint tokens) public returns(bool success);\r\n  function approve(address spender, uint tokens) public returns(bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns(bool success);\r\n  uint public basisPointsRate = 0;\r\n  uint public maximumFee = 0;\r\n  uint public MAX_UINT = 2**256 - 1;\r\n  modifier onlyPayloadSize(uint size) {\r\n        require(!(msg.data.length < size + 4));\r\n        _;\r\n    }\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n//支付服务\r\ncontract ApproveAndCallFallBack {\r\n  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\n\r\n//合约暂停服务功能\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev 使方法仅在合约未暂停时可用\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev 使方法仅在合约暂停时可用\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev 仅合约拥有者可使用：暂停功能\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev 仅合约拥有者可使用：开放功能\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n  //黑名单功能\r\ncontract UserLock is Ownable {\r\n  mapping(address => bool) blacklist;\r\n  modifier permissionCheck {\r\n    require(!blacklist[msg.sender]);\r\n    _;\r\n  }\r\n  \r\n  //锁定帐户\r\n  function lockUser(address who) public onlyOwner {\r\n    blacklist[who] = true;\r\n    emit LockUser(who);\r\n  }\r\n  //解锁帐户\r\n  function unlockUser(address LockUser) public onlyOwner {\r\n    blacklist[LockUser] = false;\r\n    emit UnlockUser(LockUser);\r\n  }\r\n  \r\n  \r\n  //黑名单公告\r\n  event LockUser(address indexed who);\r\n  event UnlockUser(address indexed who);\r\n}\r\n\r\n //合约发布\r\ncontract AYCToken is Pausable, ERC20Interface, UserLock {\r\n    using SafeMath for uint;\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint _totalSupply;\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n    constructor() public {\r\n    name = \"Activate Your Chain\";//代币全称\r\n    symbol = \"AYC\";//代币代号\r\n    decimals = 6;//小数位数\r\n    _totalSupply = 180000000000000;//发行总量1亿\r\n    address order = 0xe938B46165B215962d85D27c02bBe5Ae0Ee61bee;\r\n    balances[order] = _totalSupply;\r\n    emit Transfer(address(0), order, _totalSupply);\r\n    }\r\n\r\n    //查询帐号余额\r\n    function balanceOf(address who) public view returns (uint) {\r\n        return balances[who];\r\n    }\r\n\r\n    //普通转帐交易\r\n    function transfer(address _to, uint _value) public whenNotPaused onlyPayloadSize(2 * 32) returns(bool success){\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    //担保交易\r\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) returns(bool success){\r\n        /*allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;  */\r\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    // 代理交易\r\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused returns(bool success){\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n\r\n    }\r\n    \r\n    // 显示所有代币总值\r\n    function totalSupply() public view returns (uint) {\r\n       return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n\r\n  \r\n    //销毁指定黑名单用户代币并从总量减去\r\n    function redeemBLT (address LockUser) public onlyOwner {\r\n        require(blacklist[LockUser]);\r\n        uint dirtyFunds = balanceOf(LockUser);\r\n        balances[LockUser] = 0;\r\n        _totalSupply -= dirtyFunds;\r\n        emit RedeemBLT(LockUser, dirtyFunds);\r\n    }\r\n    \r\n    //错误转帐回调\r\n    function () external payable {\r\n    revert();\r\n    }\r\n  \r\n  //owner地址支持接受其他ERC20代币\r\n  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns(bool success) {\r\n    return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    /* 公告合约行为 如新增、销毁、更新等 */\r\n    event Issue(uint amount);\r\n\r\n    event Redeem(uint amount);\r\n\r\n    event Params(uint feeBasisPoints, uint maxFee);\r\n    \r\n    event RedeemBLT(address LockUser, uint dirtyFunds);\r\n}"}}}