{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Untitled.sol":{"content":"pragma solidity ^0.7.5;\n\ninterface erc20 {\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    function decimals() external view returns(uint digits);    \n}\n\ninterface erc20Validation {\n    function balanceOf(address _address, address _tokenAddress) external view returns (uint balance);\n    function ValidateSetForSale(address _seller, address _tokenAddress) external;\n    function ValidateBuy(address _seller, address _buyer, address tokenAddress) external;\n}\n\ninterface minereum {\n  function Payment (  ) payable external;  \n}\n\ncontract TestBZS\n{\t\n\nerc20 public _erc20;\n\naddress public _owner;\n\nminereum public mne;\n\nuint public fee;\nuint public feeDecimals;\n\nmodifier onlyOwner(){\n    require(msg.sender == _owner);\n     _;\n}\n\t\nconstructor() {\n\t_owner = msg.sender;\n\tmne = minereum(0x426CA1eA2406c07d75Db9585F22781c096e3d0E0);\n}\n\nevent AddTokenEvent(address indexed _tokenAddress);\nevent SetForSaleEvent(address indexed _seller, address indexed _tokenAddress, uint _balance, uint _weiPriceUnitToken, bool update);\nevent RemovedFromSaleEvent(address indexed _seller, address indexed _tokenAddress);\nevent SoldEvent(address indexed _seller, address indexed _buyer, address indexed _tokenAddress, uint256 _balance, uint _weiPriceUnitToken, uint _totalPrice);\n\nmapping (address => address) public SecondaryValidation;\nmapping (address => mapping (address => uint)) public weiPriceUnitTokenList;\nmapping (address => mapping (address => uint)) public balanceList;\n\nfunction getBalanceForSale(address seller, address tokenAddress) public view returns(uint)\n{\n\treturn balanceList[seller][tokenAddress];\n}\n\nfunction getWeiPriceUnitTokenList(address seller, address tokenAddress) public view returns(uint) \n{\n\treturn weiPriceUnitTokenList[seller][tokenAddress];\n}\n\nfunction setSecondaryValidation(address tokenAddress, address validationContractAddress) public onlyOwner\n{\n\tSecondaryValidation[tokenAddress] = validationContractAddress;\n}\n\nfunction reloadMinereum(address _address) public onlyOwner\n{\n\tmne = minereum(_address);\n}\n\nfunction setFee(uint _fee) public onlyOwner\n{\n\tfee = _fee;\n}\n\nfunction setFeeDecimals(uint _feeDecimals) public onlyOwner\n{\n\tfeeDecimals = _feeDecimals;\n}\n\nfunction SetForSale(address tokenAddress, uint weiPriceUnitToken) public\n{\t\n\tweiPriceUnitTokenList[msg.sender][tokenAddress] = weiPriceUnitToken;\n\t\n\tif (SecondaryValidation[tokenAddress] != 0x0000000000000000000000000000000000000000)\t\n\t{\n\t\terc20Validation validationContract = erc20Validation(SecondaryValidation[tokenAddress]);\n\t\tvalidationContract.ValidateSetForSale(msg.sender, tokenAddress);\t\t\t\n\t\t\n\t\tif (balanceList[msg.sender][tokenAddress] > 0 || weiPriceUnitTokenList[msg.sender][tokenAddress] > 0)\n\t\t\temit SetForSaleEvent(msg.sender, tokenAddress, validationContract.balanceOf(msg.sender, tokenAddress), weiPriceUnitToken, true);\t\n\t\telse\n\t\t{\n\t\t\temit AddTokenEvent(tokenAddress);\n\t\t\temit SetForSaleEvent(msg.sender, tokenAddress, validationContract.balanceOf(msg.sender, tokenAddress), weiPriceUnitToken, false);\t\n\t\t}\n\t\t\n\t\tbalanceList[msg.sender][tokenAddress] = validationContract.balanceOf(msg.sender, tokenAddress);\n\t}\n\telse\n\t{\n\t\terc20 token = erc20(tokenAddress);\n\t\t\n\t\tif (balanceList[msg.sender][tokenAddress] > 0 || weiPriceUnitTokenList[msg.sender][tokenAddress] > 0)\n\t\t\temit SetForSaleEvent(msg.sender, tokenAddress, token.balanceOf(msg.sender), weiPriceUnitToken, true);\n\t\telse\n\t\t{\n\t\t\temit AddTokenEvent(tokenAddress);\n\t\t\temit SetForSaleEvent(msg.sender, tokenAddress, token.balanceOf(msg.sender), weiPriceUnitToken, false);\n\t\t}\n\t\t\n\t\tbalanceList[msg.sender][tokenAddress] = token.balanceOf(msg.sender);\t\t\t\t\n\t}\t\t\n}\n\nfunction Buy(address seller, address tokenAddress) public payable\n{\t\n\tif (seller == msg.sender) revert('buyer and seller cannot be the same');\n\n\tif (SecondaryValidation[tokenAddress] != 0x0000000000000000000000000000000000000000)\t\n\t{\n\t\terc20Validation validationContract = erc20Validation(SecondaryValidation[tokenAddress]);\n\t\tvalidationContract.ValidateBuy(seller, msg.sender, tokenAddress);\n\t}\n\t\n\terc20 token = erc20(tokenAddress);\n\t\t\n\tif (msg.value == ((weiPriceUnitTokenList[seller][tokenAddress] * balanceList[seller][tokenAddress] / token.decimals()) + ((fee / feeDecimals) * (weiPriceUnitTokenList[seller][tokenAddress] * balanceList[seller][tokenAddress] / token.decimals()))))\n\t{\n\t\ttoken.transferFrom(seller, msg.sender, balanceList[seller][tokenAddress]);\n\t\tif(!payable(seller).send((weiPriceUnitTokenList[seller][tokenAddress] * balanceList[seller][tokenAddress] / token.decimals()))) revert('Error while sending payment to seller');\t\n\t\tif (fee > 0)\n\t\t{\n\t\t\tmne.Payment{value:((fee / feeDecimals) * (weiPriceUnitTokenList[seller][tokenAddress] * balanceList[seller][tokenAddress] / token.decimals()))}();\t\t\t\n\t\t}\n\t}\n\telse\n\t{\n\t\trevert('Price sent by buyer not correct');\n\t}\t\t\n\t\n\temit SoldEvent(seller, msg.sender, tokenAddress, balanceList[seller][tokenAddress], weiPriceUnitTokenList[seller][tokenAddress], \t((weiPriceUnitTokenList[seller][tokenAddress] * balanceList[seller][tokenAddress] / token.decimals()) + ((fee / feeDecimals) * (weiPriceUnitTokenList[seller][tokenAddress] * balanceList[seller][tokenAddress] / token.decimals()))));\n\t\n\tweiPriceUnitTokenList[seller][tokenAddress] = 0;\n\tbalanceList[seller][tokenAddress] = 0;\n}\n\nfunction RemoveFromSale(address tokenAddress) public\n{\n\tweiPriceUnitTokenList[msg.sender][tokenAddress] = 0;\n\tbalanceList[msg.sender][tokenAddress] = 0;\n\temit RemovedFromSaleEvent(msg.sender, tokenAddress);\n}\n}"}}}