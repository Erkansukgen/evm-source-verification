{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "3_deploy-tubechief/PoolUpdater.sol": {
      "content": "pragma solidity 0.6.12;\r\n\r\ncontract PoolUpdater {\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function batchUpdate(\r\n        address chief_address,\r\n        uint[] memory poolId, \r\n        uint[] memory rewardPerBlock, \r\n        uint[] memory multiplier, \r\n        bool[] memory locked\r\n    ) public onlyOwner {\r\n        for(uint i = 0; i < poolId.length; i++) {\r\n            IChief(chief_address).updatePool(\r\n                poolId[i],\r\n                rewardPerBlock[i],\r\n                multiplier[i],\r\n                locked[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function transferOwner(address new_owner) public onlyOwner {\r\n        owner = new_owner;\r\n    }\r\n\r\n    function emergencyTransferToken(address token, uint amount) public onlyOwner {\r\n        TransferHelper.safeTransfer(token, owner, amount);\r\n    }\r\n\r\n    fallback() external {\r\n        revert(\"not accept any deposit\");\r\n    } \r\n}\r\n\r\ninterface IChief {\r\n    function updatePool(uint poolId, uint _rewardPerBlock, uint _multiplier, bool _locked) external;\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeApprove: approve failed'\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeTransfer: transfer failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::transferFrom: transferFrom failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\r\n    }\r\n}\r\n"
    }
  }
}