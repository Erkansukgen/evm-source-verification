{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"pizzafinance.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.1;\n\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\ncontract PizzaFinance {\n  string  public constant name = \"PizzaFinance\";\n  string  public constant symbol = \"PIZZA\";\n  uint8   public constant decimals = 9;\n  uint256 public constant totalSupply_ = 1000000000000000000000;\n  using SafeMath for uint256;\n\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n  event Transfer(address indexed from, address indexed to, uint tokens);\n\n  mapping(address => uint256) balances;\n  mapping(address => mapping (address => uint256)) allowed;\n\n  constructor() public {  \n\t  balances[msg.sender] = totalSupply_;\n  }\n\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  function balanceOf(address tokenOwner) public view returns (uint) {\n    return balances[tokenOwner];\n  }\n\n  function allowance(address owner, address spender) public view returns (uint) {\n    return allowed[owner][spender];\n  }\n\n  function transfer(address receiver, uint tokens) public returns (bool) {\n    require(tokens <= balances[msg.sender]);\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\n    balances[receiver] = balances[receiver].add(tokens);\n    emit Transfer(msg.sender, receiver, tokens);\n    return true;\n  }\n\n  function approve(address spender, uint tokens) virtual public returns (bool) {\n    allowed[msg.sender][spender] = tokens;\n    emit Approval(msg.sender, spender, tokens);\n    return true;\n  }\n\n  function transferFrom(address from, address to, uint tokens) virtual public returns (bool) {\n    require(tokens <= balances[from]);\n    require(tokens <= allowed[from][msg.sender]);\n\n    balances[from] = balances[from].sub(tokens);\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n    balances[to] = balances[to].add(tokens);\n    emit Transfer(from, to, tokens);\n    return true;\n  }\n}\n\nlibrary SafeMath {\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}"}}}