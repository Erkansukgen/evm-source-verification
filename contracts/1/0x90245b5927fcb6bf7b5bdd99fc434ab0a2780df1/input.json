{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contractbot.sol":{"content":"pragma solidity =0.6.6;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n\ninterface IPancakeRouter {\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function swapExactETHForTokens(\n        uint amountOutMin, \n        address[] calldata path, \n        address to, \n        uint deadline)\n        external payable returns (uint[] memory amounts);\n}\n\ncontract Swap {\n    //address of the PCS V2 router\n    address private constant PANCAKE_V2_ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n\n    address private constant WETH = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n\n    function swap(address _tokenIn, address _tokenOut, uint _amountOutMin, address _to,uint _split) external payable{\n\n        address[] memory path;\n        path = new address[](2);\n        path[0] = _tokenIn;\n        path[1] = _tokenOut;\n\n        uint splittedPayment = msg.value/_split;\n\n        for(uint i =0;i<_split;i++){\n            IPancakeRouter(PANCAKE_V2_ROUTER).swapExactETHForTokens{value:splittedPayment}(_amountOutMin, path, _to, block.timestamp);\n\n        }\n\n    }\n\n}"}}}