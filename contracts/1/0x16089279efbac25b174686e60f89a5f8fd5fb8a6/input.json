{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/FoldingOnAnchor.sol":{"content":"// Sources flattened with hardhat v2.0.11 https://hardhat.org\n\n// File contracts/Libs/Ownable.sol\n\n// Taken from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\n// But modified to be impossible to renounceOwnership\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable {\n  address private _owner;\n\n  /**\n   * @dev Initializes the contract setting the deployer as the initial owner.\n   */\n  constructor () internal {\n    _owner = msg.sender;\n  }\n\n  /**\n   * @dev Returns the address of the current owner.\n   */\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   * Can only be called by the current owner.\n   */\n  function transferOwnership(address newOwner) public virtual onlyOwner {\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n    _owner = newOwner;\n  }\n}\n\n\n// File contracts/Libs/IERC20.sol\n\n// Taken from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\n// .........-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function decimals() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// File contracts/Libs/SafeMath.sol\n\n// Taken from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol\n// ............-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n// File contracts/Libs/Address.sol\n\n// Taken from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\n// ............-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n// File contracts/Libs/SafeERC20.sol\n\n// Taken from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/SafeERC20.sol\n// ............-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n\n// File contracts/Folding/Restricted.sol\n\n// ...............-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\ncontract Restricted is Ownable {\n  // Mapping to hold addresses that are allowed to decrease our position.\n  mapping(address => bool) public restrictedUsers;\n\n  function addRestrictedUser(address user) external onlyOwner {\n    restrictedUsers[user] = true;\n  }\n\n  function removeRestrictedUser(address user) external onlyOwner {\n    restrictedUsers[user] = false;\n  }\n\n  modifier restricted() {\n    require(owner() == msg.sender || restrictedUsers[address(msg.sender)], \"Restricted: caller not allowed\");\n    _;\n  }\n}\n\n\n// File contracts/Folding/FlashLoaner/AbstractFlashLoaner.sol\n\n// ............-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\n// A flash loaner initiates a flash loan and\n// MUST CALL proxiedUseFlashLoan(token, amount, repayAmount, data) on its caller\nabstract contract AbstractFlashLoaner {\n  // Function that gets a flash loan\n  function getFlashLoan(\n    address receiver,\n    address tokenToLoan,\n    uint256 amount,\n    bytes memory dataToExecuteOn\n  ) external virtual;\n\n  function getPlatform() external view virtual returns (address);\n}\n\n\n// File contracts/Folding/FlashLoaner/FlashLoanerProxy.sol\n\n// ............-License-Identifier: UNLICENSED\n\n\n\n\npragma solidity 0.6.12;\n\nabstract contract FlashLoanerProxy is Ownable {\n  // Store temporary value for the adapter of the flash loaning platform.\n  address private targetFlashLoaner = address(0);\n\n  // Owner must approve a flash loaner before it can be used.\n  mapping(address => bool) internal approvedFlashLoaners;\n  mapping(address => bool) internal approvedPlatforms;\n\n  function approveFlashLoaner(address flashLoaner) external onlyOwner {\n    approvedFlashLoaners[flashLoaner] = true;\n    approvedPlatforms[AbstractFlashLoaner(flashLoaner).getPlatform()] = true;\n  }\n\n  function removeFlashLoaner(address flashLoaner) external onlyOwner {\n    approvedPlatforms[AbstractFlashLoaner(flashLoaner).getPlatform()] = false;\n    approvedFlashLoaners[flashLoaner] = false;\n  }\n\n  // Gets a flash loan from flashLoaner passing dataToExecuteOn. This data will be used\n  // inside the call to proxyUseFlashLoan (below)\n  function getFlashLoan(\n    address flashLoaner,\n    address tokenToLoan,\n    uint256 flashLoanAmount,\n    bytes memory dataToExecuteOn\n  ) internal {\n    require(flashLoanAmount > 0, \"PFL: amount is 0\");\n\n    require(approvedFlashLoaners[flashLoaner], \"PFL: FlashLoaner not approved\");\n\n    // Set the flashLoaner we want to use for this flash loan request\n    targetFlashLoaner = flashLoaner;\n\n    (bool success, bytes memory returnData) = flashLoaner.delegatecall(abi.encodeWithSignature(\n      \"getFlashLoan(address,address,uint256,bytes)\",\n      address(this), tokenToLoan, flashLoanAmount,  dataToExecuteOn\n    ));\n    assembly {\n      if eq(success, 0) {\n        revert(add(returnData, 0x20), returndatasize())\n      }\n    }\n  }\n\n  // The platform where we flash loan from will call some function on this SC,\n  // but the function is only implemented in the flash loaner we proxy. This\n  // fallback will catch it and delegate it there.\n  fallback() external {\n    // Ensure this operation happens only in response to a flash loan request!\n    require(targetFlashLoaner != address(0), \"PFL: FL not requested\");\n\n    require(approvedPlatforms[msg.sender], \"PFL-callback: Invalid caller\");\n\n    address flashLoaner = targetFlashLoaner;\n\n    // Proxy the call and bubble errors\n    assembly {\n      calldatacopy(0, 0, calldatasize())\n      let result := delegatecall(gas(), flashLoaner, 0, calldatasize(), 0, 0)\n      returndatacopy(0, 0, returndatasize())\n      switch result\n        case 0 {\n          revert(0, returndatasize())\n        }\n        default {\n          return(0, returndatasize())\n        }\n    }\n  }\n\n  // This is called by the proxied flash loaner\n  function proxiedUseFlashLoan(\n    address loanedToken,\n    uint256 flashLoanAmount,\n    uint256 repayAmount,\n    bytes memory dataToExecuteOn\n  ) external {\n    // Ensure this operation happens only in response to a flash loan request!\n    require(targetFlashLoaner != address(0), \"PFL: FL not requested\");\n    // Remove the targetFlashLoaner to block invalid requests such as griefing attacks\n    targetFlashLoaner = address(0);\n\n    useFlashLoan(loanedToken, flashLoanAmount, repayAmount, dataToExecuteOn);\n  }\n\n  function useFlashLoan(\n    address loanedToken,\n    uint256 flashLoanAmount,\n    uint256 repayAmount,\n    bytes memory dataToExecuteOn\n  ) internal virtual;\n}\n\n\n// File contracts/Folding/Exchanger/ExchangerProxy.sol\n\n// ............-License-Identifier: UNLICENSED\n\n\n\npragma solidity 0.6.12;\n\ncontract ExchangerProxy is Ownable {\n  using SafeMath for uint256;\n\n  // The actual exchanger implementation is initially set to 0\n  address public exchangerImplementation = address(0);\n\n  // The owner should be allowed to change the exchanger implementation\n  function setExchangerImplementation(\n    address implementation,\n    bytes memory initData\n  ) public onlyOwner {\n    exchangerImplementation = implementation;\n\n    (bool success, bytes memory returnData) = exchangerImplementation.delegatecall(abi.encodeWithSignature(\n      \"initExchanger(bytes)\",\n      initData\n    ));\n\n    assembly {\n      if eq(success, 0) {\n        revert(add(returnData, 0x20), returndatasize())\n      }\n    }\n\n    require(abi.decode(returnData, (bool)), \"Exchanger: Init impl\");\n  }\n\n  // Exchange fromAmount of fromToken to toToken by delegating to an exchanger\n  // implementation. Returns the amount of toToken that was obtained.\n  // When allowPartial is false it checks that all the fromAmount was spent\n  function exchange(\n    address fromToken,\n    address toToken,\n    uint256 fromAmount,\n    uint256 minToAmount,\n    bool allowPartial,\n    bytes memory instructions\n  ) internal returns (uint256) {\n    // If no need to exchange then don't\n    if (fromToken == toToken || fromAmount == 0) {\n      return fromAmount;\n    }\n    // Initial balance values to compute state differences after exchange\n    uint256 fromBalBefore = IERC20(fromToken).balanceOf(address(this));\n    uint256 toBalBefore = IERC20(toToken).balanceOf(address(this));\n\n    (bool success, bytes memory returnData) = exchangerImplementation.delegatecall(abi.encodeWithSignature(\n      \"exchange(address,address,uint256,bytes)\",\n      fromToken,\n      toToken,\n      fromAmount,\n      instructions\n    ));\n    assembly {\n      if eq(success, 0) {\n        revert(add(returnData, 0x20), returndatasize())\n      }\n    }\n\n    uint256 fromBalAfter = IERC20(fromToken).balanceOf(address(this));\n\n    // Either allow partial exchange of fromAmount or ensure it was all spent\n    require(allowPartial || fromBalBefore.sub(fromBalAfter) == fromAmount, \"Exchanger: Incomplete exchange\");\n\n    // Compute amount of toToken obtained after exchange\n    uint256 toBalAfter = IERC20(toToken).balanceOf(address(this));\n    uint256 toAmount = toBalAfter.sub(toBalBefore);\n\n    // Enforce the minimum wanted amount\n    require(toAmount >= minToAmount, \"Exchanger: Not enough toAmount\");\n\n    return toAmount;\n  }\n}\n\n\n// File contracts/Folding/LenderBorrower/Compound/ICToken.sol\n\n// Taken from: https://github.com/studydefi/money-legos/blob/abae7f0c2be3bb32a820ca182433872570037042/src/compound/contracts/ICToken.sol\n\n// ............-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\ninterface ICToken {\n    function mint(uint mintAmount) external returns (uint);\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function borrow(uint borrowAmount) external returns (uint);\n    function repayBorrow(uint repayAmount) external returns (uint);\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\n    function exchangeRateCurrent() external returns (uint);\n    function borrowBalanceCurrent(address account) external returns (uint);\n    function borrowBalanceStored(address account) external view returns (uint256);\n    function balanceOfUnderlying(address account) external returns (uint);\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\n\n    function underlying() external view returns (address);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address owner) external view returns (uint256 balance);\n    function allowance(address, address) external view returns (uint);\n    function approve(address, uint) external returns (bool);\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n}\n\n\n// File contracts/Folding/LenderBorrower/Compound/IComptroller.sol\n\n// Taken from: https://github.com/studydefi/money-legos/blob/abae7f0c2be3bb32a820ca182433872570037042/src/compound/contracts/IComptroller.sol\n\n// ............-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\ninterface IComptroller {\n  /**\n   * @notice Marker function used for light validation when updating the comptroller of a market\n   * @dev Implementations should simply return true.\n   * @return true\n   */\n  function isComptroller() external view returns (bool);\n\n  /*** Assets You Are In ***/\n\n  function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\n\n  function exitMarket(address cToken) external returns (uint);\n\n  function markets(address cTokenAddress) external view returns (bool, uint, bool);\n\n  /*** Policy Hooks ***/\n\n  function getAccountLiquidity(address account) external view returns (uint, uint, uint);\n\n  function getAssetsIn(address account) external view returns (address[] memory);\n\n  function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\n\n  function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\n\n  function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\n\n  function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\n\n  function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\n\n  function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\n\n  function repayBorrowAllowed(\n    address cToken,\n    address payer,\n    address borrower,\n    uint repayAmount) external returns (uint);\n\n  function repayBorrowVerify(\n    address cToken,\n    address payer,\n    address borrower,\n    uint repayAmount,\n    uint borrowerIndex) external;\n\n  function liquidateBorrowAllowed(\n    address cTokenBorrowed,\n    address cTokenCollateral,\n    address liquidator,\n    address borrower,\n    uint repayAmount) external returns (uint);\n\n  function liquidateBorrowVerify(\n    address cTokenBorrowed,\n    address cTokenCollateral,\n    address liquidator,\n    address borrower,\n    uint repayAmount,\n    uint seizeTokens) external;\n\n  function seizeAllowed(\n    address cTokenCollateral,\n    address cTokenBorrowed,\n    address liquidator,\n    address borrower,\n    uint seizeTokens) external returns (uint);\n\n  function seizeVerify(\n    address cTokenCollateral,\n    address cTokenBorrowed,\n    address liquidator,\n    address borrower,\n    uint seizeTokens) external;\n\n  function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\n\n  function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\n\n  /*** Liquidity/Liquidation Calculations ***/\n\n  function liquidateCalculateSeizeTokens(\n    address cTokenBorrowed,\n    address cTokenCollateral,\n    uint repayAmount) external view returns (uint, uint);\n\n  /*** Rewards ***/\n\n  function claimComp(address holder) external;\n\n  // /*** Admin ***/\n  //\n  // function _setCollateralFactor(\n  //   ICToken cToken,\n  //   uint newCollateralFactorMantissa\n  // ) external returns (uint256);\n  //\n  // function admin() public view returns(address);\n}\n\n\n// File contracts/Folding/LenderBorrower/Compound/ICEther.sol\n\n// Taken from: https://github.com/studydefi/money-legos/blob/abae7f0c2be3bb32a820ca182433872570037042/src/compound/contracts/ICToken.sol\n\n// ............-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\ninterface ICEther{\n    function mint() external payable;\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function borrow(uint borrowAmount) external returns (uint);\n    function repayBorrow() external payable;\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\n    function exchangeRateCurrent() external returns (uint);\n    function borrowBalanceCurrent(address account) external returns (uint);\n    function borrowBalanceStored(address account) external view returns (uint256);\n    function balanceOfUnderlying(address account) external returns (uint);\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\n\n    function underlying() external view returns (address);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address owner) external view returns (uint256 balance);\n    function allowance(address, address) external view returns (uint);\n    function approve(address, uint) external returns (bool);\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n}\n\n\n// File contracts/Folding/LenderBorrower/Compound/ICompoundPriceOracle.sol\n\n// Taken from: https://github.com/studydefi/money-legos/blob/abae7f0c2be3bb32a820ca182433872570037042/src/compound/contracts/ICompoundPriceOracle.sol\n\n// ............-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface ICompoundPriceOracle {\n  function getUnderlyingPrice(address cToken) external view returns (uint);\n}\n\n\n// File contracts/Folding/LenderBorrower/AbstractLenderBorrower.sol\n\n// ............-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\nabstract contract AbstractLenderBorrower {\n\n    function getAccountHealth(\n    ) public view virtual returns (uint256);\n\n    function supply(\n      address token,\n      uint256 amount\n    ) internal virtual;\n\n    function borrow(\n      address token,\n      uint256 amount\n    ) internal virtual;\n\n    function redeemSupply (\n      address token,\n      uint256 amount\n    ) internal virtual;\n\n    function repayBorrow(\n      address token,\n      uint256 amount\n    ) internal virtual;\n\n    // Amount of token you have to pay back\n    function borrowBalance(\n      address token\n    ) public virtual returns (uint256);\n\n    // Amount of token you have locked\n    function supplyBalance(\n      address token\n    ) public virtual returns (uint256);\n}\n\n\n// File contracts/Libs/IWETH.sol\n\n// Tken from: https://github.com/aave/protocol-v2/blob/master/contracts/misc/interfaces/IWETH.sol\n\n// ............-License-Identifier: agpl-3.0\npragma solidity 0.6.12;\n\ninterface IWETH {\n  function deposit() external payable;\n\n  function withdraw(uint256) external;\n\n  function approve(address guy, uint256 wad) external returns (bool);\n\n  function transferFrom(\n    address src,\n    address dst,\n    uint256 wad\n  ) external returns (bool);\n}\n\n\n// File contracts/Folding/LenderBorrower/Compound/AnchorLenderBorrower.sol\n\n// ............-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\n\n\n\n\n\n\n\n\n\n\n// import \"hardhat/console.sol\";\n\ncontract AnchorLenderBorrower is AbstractLenderBorrower, Ownable {\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n\n  // Anchor comptroller\n  address constant private TROLL = 0x4dCf7407AE5C07f8681e1659f626E114A7667339;\n  address constant private PRICE_FEED = 0xE8929AFd47064EfD36A7fB51dA3F8C5eb40c4cb4;\n\n  IWETH constant private WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n  address constant private COMP = 0x41D5D79431A913C4aE7d69a668ecdfE5fF9DFB68;\n\n  // minHealth is a percentage score with mantissa 1e18.\n  // It should always be above 1. Initially we set it at 105% = 1.05\n  uint256 public minHealth = 1.05e18;\n\n  // The owner should  be able to change the min health factor\n  function setMinHealth(uint256 newMinHealth) public onlyOwner {\n    require(newMinHealth >= 1e18, \"minHealth cannot be subunitary\");\n    minHealth = newMinHealth;\n  }\n\n  // Computes an Aave style health factor with mantissa 1e18.\n  // The health factor is computed over all the assets we are in:\n  // hf = sum (supplyBalance[i] * collateralFactor[i]) / sum (borrowBalance[i])\n  function getAccountHealth() public view override returns (uint256) {\n    uint256 sumCollateral = 0;\n    uint256 sumBorrows = 0;\n\n    // For each asset the account is in\n    address[] memory assets = IComptroller(TROLL).getAssetsIn(address(this));\n    for (uint256 i = 0; i < assets.length; i++) {\n      address asset = assets[i];\n\n      // Read the balances and exchange rate from the cToken\n      (uint256 oErr, uint256 cTokenBalance, uint256 borrowBalance, uint256 exchangeRate)\n        = ICToken(asset).getAccountSnapshot(address(this));\n      require(oErr == 0, \"Anchor: Health - Snapshot\");\n\n      // Get collateral factor for this asset\n      (, uint256 collateralFactor,) = IComptroller(TROLL).markets(asset);\n\n      // Get the normalized price of the asset\n      uint256 oraclePrice = ICompoundPriceOracle(PRICE_FEED).getUnderlyingPrice(asset);\n      require(oraclePrice > 0, \"Anchor: Health - Price\");\n\n      // The borrowing power of a single cToken\n      uint256 tokensToDenom = oraclePrice.mul(collateralFactor.mul(exchangeRate) / 1e18) / 1e18;\n\n      sumCollateral = sumCollateral.add(tokensToDenom.mul(cTokenBalance) / 1e18);\n      sumBorrows = sumBorrows.add(oraclePrice.mul(borrowBalance) / 1e18);\n    }\n    if (sumBorrows > 0)\n      return sumCollateral.mul(1e18) / sumBorrows;\n    return uint256(-1);\n  }\n\n    // Maps a token to its corresponding cToken\n    function getCToken(address token) internal pure returns (address) {\n      // anWETH\n      if (token == address(WETH))\n        return 0x697b4acAa24430F254224eB794d2a85ba1Fa1FB8;\n      // anDOLA\n      if (token == 0x865377367054516e17014CcdED1e7d814EDC9ce4)\n        return 0x7Fcb7DAC61eE35b3D4a51117A7c58D53f0a8a670;\n      revert(\"Token is not on Anchor\");\n    }\n\n  // Supply assets as collateral to Anchor\n  // No need to check minHealth because we only increase the collateral\n  function supply(address token, uint256 amount) internal override {\n    address cToken = getCToken(token);\n\n    address[] memory markets = new address[](1);\n    markets[0] = cToken;\n    IComptroller(TROLL).enterMarkets(markets);\n\n    if (token == address(WETH)) {\n      WETH.withdraw(amount);\n      ICEther(cToken).mint{value: amount}();\n    } else {\n      IERC20(token).safeIncreaseAllowance(cToken, amount);\n      require(ICToken(cToken).mint(amount) == 0, \"Anchor: Supply\");\n    }\n  }\n\n  // Borrow against collateral on anchor\n  // Need to check minHealth to ensure account is healthy\n  function borrow(address token, uint256 amount) internal override {\n    address cToken = getCToken(token);\n\n    address[] memory markets = new address[](1);\n    markets[0] = cToken;\n    IComptroller(TROLL).enterMarkets(markets);\n\n    require(ICToken(cToken).borrow(amount) == 0, \"Anchor: Borrow\");\n    require(getAccountHealth() > minHealth, \"Anchor: Account is unhealthy!\");\n\n    if (token == address(WETH)) {\n      WETH.deposit{value: amount}();\n    }\n  }\n\n  // Redeem amount of collateral from Anchor\n  // Need to check minHealth to ensure account is healthy\n  function redeemSupply(address token, uint256 amount) internal override {\n    address cToken = address(getCToken(token));\n\n    require(ICToken(cToken).redeemUnderlying(amount) == 0, \"Anchor: Redeem\");\n    require(getAccountHealth() > minHealth, \"Anchor: Account is unhealthy!\");\n\n    if (token == address(WETH)) {\n      WETH.deposit{value: amount}();\n    }\n  }\n\n  // Repay amount of debt to Anchor\n  // No need to check minHealth because we are only improving it\n  function repayBorrow(address token, uint256 amount) internal override {\n    address cToken = address(getCToken(token));\n\n    if (token == address(WETH)) {\n      WETH.withdraw(amount);\n      ICEther(cToken).repayBorrow{value: amount}();\n    } else {\n      IERC20(token).safeIncreaseAllowance(cToken, amount);\n      require(ICToken(cToken).repayBorrow(amount) == 0, \"Anchor: Repay\");\n    }\n  }\n\n  // Get the current value of our debt in token (including interest)\n  function borrowBalance(address token) public override returns (uint256) {\n    address cToken = address(getCToken(token));\n    return ICToken(cToken).borrowBalanceCurrent(address(this));\n  }\n\n  // Get the current amount of collateral we have in token (including interest)\n  function supplyBalance(address token) public override returns (uint256) {\n    address cToken = address(getCToken(token));\n    uint256 balance = ICToken(cToken).balanceOfUnderlying(address(this));\n    return balance;\n  }\n\n  function claimRewards() public onlyOwner returns (uint256) {\n    IComptroller(TROLL).claimComp(address(this));\n    uint256 compAmount = IERC20(COMP).balanceOf(address(this));\n    IERC20(COMP).safeTransfer(owner(), compAmount);\n  }\n\n  receive() external payable {}\n}\n\n\n// File contracts/Folding/FoldingOnAnchor.sol\n\n// .........-License-Identifier: UNLICENSED\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n\n\n\n\n\n\n// import \"hardhat/console.sol\";\n\ncontract FoldingOnAnchor is Ownable, Restricted, ExchangerProxy, FlashLoanerProxy, AnchorLenderBorrower {\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n\n  // Data that encodes the logic we have to perform inside the flash loan\n  struct MyCustomData {\n    address supplyToken;\n    uint256 supplyAmount;\n    address borrowToken;\n    uint256 borrowAmount;\n    bool increasePosition;\n    bytes exchangeDataBeforePosition;\n    bytes exchangeDataAfterPosition;\n  }\n\n  constructor(\n    address exchanger_,\n    bytes memory exchangerInitData_,\n    uint256 minHealth_\n  ) public\n  Ownable()\n  {\n    setMinHealth(minHealth_);\n    setExchangerImplementation(exchanger_, exchangerInitData_);\n  }\n\n  // Increases the collateral or debt we have on the platform using a flash loan.\n  // Assumes owner has approved this SC to spend flashLoanToken.\n  // Only the owner should be able to increase a position.\n  function increasePositionWithFlashLoan(\n    address flashLoaner, address flashLoanToken, uint256 flashLoanAmount,\n    address supplyToken, uint256 supplyAmount,\n    address borrowToken, uint256 borrowAmount,\n    bytes memory exchangeDataBeforePosition,\n    bytes memory exchangeDataAfterPosition\n  ) external onlyOwner {\n    // Take a flash loan and pass all the info for executing the logic\n    getFlashLoan(flashLoaner, flashLoanToken, flashLoanAmount, abi.encode(MyCustomData({\n      supplyToken : supplyToken,\n      supplyAmount : supplyAmount,\n      borrowToken : borrowToken,\n      borrowAmount : borrowAmount,\n      increasePosition : true,\n      exchangeDataBeforePosition : exchangeDataBeforePosition,\n      exchangeDataAfterPosition : exchangeDataAfterPosition\n    })));\n  }\n\n  // Decreases the collateral or debt we have on the platform using a flash loan.\n  // This function shall not spend any tokens from the owner.\n  // The owner or any allowed restricted users can call this method. This is to\n  // allow bots that don't have funds to reduce our position to avoid liquidation\n  // or to keep us profitable in case interest rates change.\n  // Amounts of uint256(-1) represent full repayment or redeemal.\n  function decreasePositionWithFlashLoan(\n    address flashLoaner, address flashLoanToken, uint256 flashLoanAmount,\n    address redeemToken, uint256 redeemAmount,\n    address repayToken, uint256 repayAmount,\n    bytes memory exchangeDataBeforePosition,\n    bytes memory exchangeDataAfterPosition\n  ) external restricted {\n    getFlashLoan(flashLoaner, flashLoanToken, flashLoanAmount, abi.encode(MyCustomData({\n      supplyToken : redeemToken,\n      supplyAmount : redeemAmount,\n      borrowToken : repayToken,\n      borrowAmount : repayAmount,\n      increasePosition : false,\n      exchangeDataBeforePosition : exchangeDataBeforePosition,\n      exchangeDataAfterPosition : exchangeDataAfterPosition\n    })));\n  }\n\n  // Makes use of the flash loan.\n  function useFlashLoan(\n    address loanedToken,\n    uint256 loanAmount,\n    uint256 repayFlashAmount,\n    bytes memory passedData\n  ) internal override {\n    MyCustomData memory mcd = abi.decode(passedData, (MyCustomData));\n    // If we have to increase the position\n    if (mcd.increasePosition) {\n      // Exchange all the flash loan into supplyToken and expect the minimum the user specified\n      uint256 actualSupplyAmount = exchange({\n        fromToken : loanedToken,\n        toToken : mcd.supplyToken,\n        fromAmount : loanAmount,\n        minToAmount : mcd.supplyAmount,\n        allowPartial : false, // we don't want to leave dust\n        instructions : mcd.exchangeDataBeforePosition\n      });\n\n      // Supply the whole exchanged amount to avoid leaving dust\n      supply(mcd.supplyToken, actualSupplyAmount);\n\n      // Borrow as much as the user specified\n      borrow(mcd.borrowToken, mcd.borrowAmount);\n\n      // Exchange all the borrowed funds back to the flash loaned token.\n      // Indeed there is no explicit slippage check here...\n      // However, the exchange instructions will have the slippage constraint in it.\n      // Moreover, if the owner did not approve enough flash loaned token then\n      // the flash loan cannot be repaid and tx reverts.\n      uint256 actualFlashTokenAmount = exchange({\n        fromToken : mcd.borrowToken,\n        toToken : loanedToken,\n        fromAmount : mcd.borrowAmount,\n        minToAmount : 0, // no slippage check\n        allowPartial : false, // we don't want to leave dust\n        instructions : mcd.exchangeDataAfterPosition\n      });\n\n      // To repay the flash loan, we will need more funds from the owner\n      if (actualFlashTokenAmount < repayFlashAmount) {\n        IERC20(loanedToken).safeTransferFrom(owner(), address(this), repayFlashAmount - actualFlashTokenAmount);\n      }\n    } else { // If we have to decrease the position\n      // Get full debt\n      uint256 debt = borrowBalance(mcd.borrowToken);\n      // Compute and check the debt repay amount\n      if (mcd.borrowAmount == uint256(-1))  {\n        mcd.borrowAmount = debt;\n      } else if (mcd.borrowAmount > debt) {\n        revert(\"repayAmount > debt\");\n      }\n\n      // Exchange all the flash loan into borrowToken and ensure we got enough\n      // to repay the debt specified by the user\n      uint256 actualBorrowAmount = exchange({\n        fromToken : loanedToken,\n        toToken : mcd.borrowToken,\n        fromAmount : loanAmount,\n        minToAmount : mcd.borrowAmount,\n        allowPartial : false, // we don't want to leave dust\n        instructions : mcd.exchangeDataBeforePosition\n      });\n\n      // Repay as much as possible of the debt and send the remaining to the owner\n      if (actualBorrowAmount <= debt) {\n        repayBorrow(mcd.borrowToken, actualBorrowAmount);\n      } else {\n        repayBorrow(mcd.borrowToken, debt);\n\n        IERC20(mcd.borrowToken).safeTransfer(owner(), actualBorrowAmount - debt);\n      }\n\n      // Get full deposit\n      uint256 deposit = supplyBalance(mcd.supplyToken);\n      // Compute and check redeem amount\n      if (mcd.supplyAmount == uint256(-1))  {\n        mcd.supplyAmount = deposit;\n      } else if (mcd.supplyAmount > deposit) {\n        revert(\"redeemAmount > deposit\");\n      }\n\n      // Redeem supply tokens\n      redeemSupply(mcd.supplyToken, mcd.supplyAmount);\n\n      // Exchange redeemed tokens to flash loaned token\n      // The exchange data comes from offchain so we might have redeemed more\n      // supplyTokens than we expected... so we have to allow partial exchange\n      uint256 actualFlashTokenAmount = exchange({\n        fromToken : mcd.supplyToken,\n        toToken : loanedToken,\n        fromAmount : mcd.supplyAmount,\n        minToAmount : repayFlashAmount,\n        allowPartial : true,\n        instructions : mcd.exchangeDataAfterPosition\n      });\n\n      if (mcd.supplyToken != loanedToken) {\n        // Given this was a partial exchange there might be some supplyToken left\n        // so we send it back to owner\n        uint256 extraBalance = IERC20(mcd.supplyToken).balanceOf(address(this));\n        if (extraBalance > 0) {\n          IERC20(mcd.supplyToken).safeTransfer(owner(), extraBalance);\n        }\n      }\n\n      // Send the unused flash loan tokens to the owner\n      if (actualFlashTokenAmount > repayFlashAmount) {\n        IERC20(loanedToken).safeTransfer(owner(), actualFlashTokenAmount - repayFlashAmount);\n      }\n    }\n  }\n\n  // Increases the collateral or debt we have on the platform using our own funds.\n  // Assumes owner has approved this SC to spend supplyToken.\n  // Only the owner should be able to increase a position.\n  function increasePositionWithOwnFunds (\n    address supplyToken, uint256 supplyAmount,\n    address borrowToken, uint256 borrowAmount\n  ) external onlyOwner {\n    // If we want to supply tokens\n    if (supplyAmount > 0) {\n      // Transfer from owner to this SC\n      IERC20(supplyToken).safeTransferFrom(owner(), address(this), supplyAmount);\n\n      // Supply them to platform\n      supply(supplyToken, supplyAmount);\n    }\n    // If we want to borrow tokens\n    if (borrowAmount > 0) {\n      // Borrow them from platform\n      borrow(borrowToken, borrowAmount);\n\n      // Transfer them to owner\n      IERC20(borrowToken).safeTransfer(owner(), borrowAmount);\n    }\n  }\n\n  // Decreases the collateral or debt we have on the platform using our own funds.\n  // Assumes owner has approved this SC to spend repayTokens.\n  // Only the owner should be able to decrease a position in this way as it spends his tokens.\n  // Amounts of uint256(-1) represent full repayment or redeemal.\n  function decreasePositionWithOwnFunds(\n    address redeemToken, uint256 redeemAmount,\n    address repayToken, uint256 repayAmount\n  ) external onlyOwner {\n    // If we want to repay a debt\n    if (repayAmount > 0) {\n      uint256 debt = borrowBalance(repayToken);\n\n      // Compute and check repayment amount\n      if (repayAmount == uint256(-1))  {\n        repayAmount = debt;\n      } else if (repayAmount > debt) {\n        revert(\"repayAmount > debt\");\n      }\n\n      // Transfer tokens from owner to this SC\n      IERC20(repayToken).safeTransferFrom(owner(), address(this), repayAmount);\n\n      // Repay them to platform\n      repayBorrow(repayToken, repayAmount);\n    }\n    // If we want to redeem tokens\n    if (redeemAmount > 0) {\n      uint256 deposit = supplyBalance(redeemToken);\n\n      // Compute and check redeem amount\n      if (redeemAmount == uint256(-1))  {\n        redeemAmount = deposit;\n      } else if (redeemAmount > deposit) {\n        revert(\"redeemAmount > deposit\");\n      }\n      // Redeem them from platform\n      redeemSupply(redeemToken, redeemAmount);\n\n      // Transfer them to owner\n      IERC20(redeemToken).safeTransfer(owner(), redeemAmount);\n    }\n  }\n\n  // In case we left tokens on this SC we need this to take them out.\n  // Also used when we want to take comp rewards out.\n  function approve(address account, address token, uint256 amount) external onlyOwner {\n    IERC20(token).safeIncreaseAllowance(account, amount);\n  }\n}\n"}}}