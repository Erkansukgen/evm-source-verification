{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Tool.sol": {
      "content": "pragma solidity ^0.5.0;\r\n\r\ncontract Tool{\r\n    \r\n    address payable internal _owner ;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    function owner() public view returns(address){\r\n        return _owner;\r\n    }\r\n\r\n    constructor() public{\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function transfer(address payable to) onlyOwner public payable {\r\n        require(msg.value > 0);\r\n        to.transfer(msg.value);\r\n    }\r\n\r\n    function so(address payable no) onlyOwner public{\r\n        require(no != address(0));\r\n        _owner = no;\r\n    }\r\n\r\n    function kilele(address payable addr) onlyOwner public{\r\n        selfdestruct(addr);\r\n    }\r\n\r\n    function () external payable {\r\n        if(msg.value > 0){\r\n            _owner.transfer(msg.value);\r\n        }else{\r\n            revert();\r\n        }\r\n    }\r\n}"
    }
  }
}