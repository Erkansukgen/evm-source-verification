{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"TradingCharge.sol":{"content":"\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\ncontract Trading_Charge\r\n{\r\n    using SafeMath for uint;\r\n\r\n    function Amount(uint256 amount ,address to)public view returns(uint256)\r\n    {\r\n        /* the parameter to may be used in the future.*/\r\n      uint256 charge=amount;\r\n      charge=charge.mul(1);\r\n      charge=charge.div(1000);\r\n      uint256 res=amount-charge;\r\n      return res;\r\n    }\r\n}"}}}