{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/ProofToken.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n\nabstract contract Ownable {\n    address private _owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    constructor() {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n    function owner() public view returns (address) {\n        return _owner;\n    }\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract ProofToken is Ownable {\n    using SafeMath for uint256;\n\n    address public immutable tokenContract;\n    address public immutable usdtContract;\n    address public receiver;\n    uint256 public pricePerUSDT;\n    uint256 public totalFOF;\n    uint256 public soldFOF;\n\n    constructor(address _tokenContract, address _usdtContract, address _receiver, uint256 _pricePerUSDT) {\n        tokenContract = _tokenContract;\n        usdtContract = _usdtContract;\n        receiver = _receiver;\n        pricePerUSDT = _pricePerUSDT;\n    }\n\n    function getProofToken(uint256 usdtAmount, address referrer) public {\n        uint256 tokenAmount = usdtAmount.mul(pricePerUSDT).div(10**6);\n        soldFOF = soldFOF.add(tokenAmount);\n        TransferHelper.safeTransfer(tokenContract, msg.sender, tokenAmount);\n        if (receiver == referrer) {\n            TransferHelper.safeTransferFrom(usdtContract, msg.sender, receiver, usdtAmount);\n        } else {\n            uint256 reward = usdtAmount.div(10);\n            TransferHelper.safeTransferFrom(usdtContract, msg.sender, receiver, usdtAmount.sub(reward));\n            TransferHelper.safeTransferFrom(usdtContract, msg.sender, referrer, reward);\n        }\n    }\n\n    function addFOF(uint256 value) public {\n        totalFOF = totalFOF.add(value);\n        TransferHelper.safeTransferFrom(tokenContract, msg.sender, address(this), value);\n    }\n\n    function changeReceiver(address _receiver) public onlyOwner() {\n        receiver = _receiver;\n    }\n\n    function changePrice(uint256 _pricePerUSDT) public onlyOwner() {\n        pricePerUSDT = _pricePerUSDT;\n    }\n\n    function transferETH(uint256 value) public onlyOwner() {\n        TransferHelper.safeTransferETH(receiver, value);\n    }\n\n    function transferAsset(address token, uint256 value) public onlyOwner() {\n        TransferHelper.safeTransfer(token, receiver, value);\n    }\n}"}}}