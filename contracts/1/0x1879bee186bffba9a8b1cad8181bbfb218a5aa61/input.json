{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/DSA/InstaPool.sol":{"content":"pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\n\ninterface CTokenInterface {\n    function mint(uint mintAmount) external returns (uint);\n    function redeem(uint redeemTokens) external returns (uint);\n    function repayBorrow(uint repayAmount) external returns (uint);\n\n    function borrowBalanceCurrent(address) external returns (uint);\n    function redeemUnderlying(uint) external returns (uint);\n    function borrow(uint) external returns (uint);\n    function underlying() external view returns (address);\n    function borrowBalanceStored(address) external view returns (uint);\n}\n\ninterface CETHInterface {\n    function mint() external payable;\n    function repayBorrow() external payable;\n}\n\ninterface ComptrollerInterface {\n    function getAssetsIn(address account) external view returns (address[] memory);\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\n    function exitMarket(address cTokenAddress) external returns (uint);\n}\n\ninterface AccountInterface {\t\n    function version() external view returns (uint);\t\n}\n\ninterface ListInterface {\n    function accountID(address) external view returns (uint64);\n}\n\ninterface IndexInterface {\n    function master() external view returns (address);\n    function list() external view returns (address);\n    function isClone(uint, address) external view returns (bool);\n}\n\ninterface TokenInterface {\n    function allowance(address, address) external view returns (uint);\n    function balanceOf(address) external view returns (uint);\n    function approve(address, uint) external;\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n    function decimals() external returns (uint);\n}\n\ncontract DSMath {\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"sub-overflow\");\n    }\n}\n\n\ncontract Helpers is DSMath {\n\n    address constant public instaIndex = 0x2971AdFa57b20E5a416aE5a708A8655A9c74f723;\n    address constant public comptrollerAddr = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\n\n    address constant public ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address constant public cEth = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\n\n    mapping (address => bool) public isTknAllowed;\n    mapping (address => address) public tknToCTkn;\n\n    /**\n     * FOR SECURITY PURPOSE\n     * only Smart DEFI Account can access the liquidity pool contract\n     */\n    modifier isDSA {\n        IndexInterface indexContract = IndexInterface(instaIndex);\n        uint64 id = ListInterface(indexContract.list()).accountID(msg.sender);\n        require(id != 0, \"not-dsa-id\");\n        require(indexContract.isClone(AccountInterface(msg.sender).version(), msg.sender), \"not-dsa-clone\");\n        _;\n    }\n\n    function tokenBal(address token) internal view returns (uint _bal) {\n        _bal = token == ethAddr ? address(this).balance : TokenInterface(token).balanceOf(address(this));\n    }\n\n    function _transfer(address token, uint _amt) internal {\n         token == ethAddr ?\n             msg.sender.transfer(_amt) :\n            require(TokenInterface(token).transfer(msg.sender, _amt), \"token-transfer-failed\");\n    }\n}\n\n\ncontract CompoundResolver is Helpers {\n\n    function borrowAndSend(address[] memory tokens, uint[] memory tknAmt) internal {\n        if (tokens.length > 0) {\n            for (uint i = 0; i < tokens.length; i++) {\n                address token = tokens[i];\n                address cToken = tknToCTkn[token];\n                if (cToken != address(0) && tknAmt[i] > 0) {\n                    require(CTokenInterface(cToken).borrow(tknAmt[i]) == 0, \"borrow-failed\");\n                    _transfer(token, tknAmt[i]);\n                }\n            }\n        }\n    }\n\n    function payback(address[] memory tokens) internal {\n        if (tokens.length > 0) {\n            for (uint i = 0; i < tokens.length; i++) {\n                address token = tokens[i];\n                address cToken = tknToCTkn[token];\n                if (cToken != address(0)) {\n                    CTokenInterface ctknContract = CTokenInterface(cToken);\n                    token != ethAddr ?\n                        require(ctknContract.repayBorrow(uint(-1)) == 0, \"payback-failed\") :\n                        CETHInterface(cToken).repayBorrow.value(ctknContract.borrowBalanceCurrent(address(this)))();\n                }\n            }\n        }\n    }\n}\n\ncontract AccessLiquidity is CompoundResolver {\n    event LogPoolBorrow(address indexed user, address[] tknAddr, uint[] amt);\n    event LogPoolPayback(address indexed user, address[] tknAddr);\n\n    /**\n     * @dev borrow tokens and use them on DSA.\n     * @param tokens Array of tokens.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n     * @param amounts Array of tokens amount.\n    */\n    function accessLiquidity(address[] calldata tokens, uint[] calldata amounts) external isDSA {\n        require(tokens.length == amounts.length, \"length-not-equal\");\n        borrowAndSend(tokens, amounts);\n        emit LogPoolBorrow(\n            msg.sender,\n            tokens,\n            amounts\n        );\n    }\n   \n    /**\n     * @dev Payback borrowed tokens.\n     * @param tokens Array of tokens.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n    */\n    function returnLiquidity(address[] calldata tokens) external payable isDSA {\n        payback(tokens);\n        emit LogPoolPayback(msg.sender, tokens);\n    }\n    \n    /**\n     * @dev Check if no tokens are borrowed.\n    */\n    function isOk() public view returns(bool ok) {\n        ok = true;\n        address[] memory markets = ComptrollerInterface(comptrollerAddr).getAssetsIn(address(this));\n        for (uint i = 0; i < markets.length; i++) {\n            uint tknBorrowed = CTokenInterface(markets[i]).borrowBalanceStored(address(this));\n            if(tknBorrowed > 0){\n                ok = false;\n                break;\n            }\n        }\n    }\n}\n\n\ncontract ProvideLiquidity is  AccessLiquidity {\n    event LogDeposit(address indexed user, address indexed token, uint amount, uint cAmount);\n    event LogWithdraw(address indexed user, address indexed token, uint amount, uint cAmount);\n\n    mapping (address => mapping (address => uint)) public liquidityBalance;\n\n    /**\n     * @dev Deposit Liquidity.\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n     * @param amt token amount.\n    */\n    function deposit(address token, uint amt) external payable returns (uint _amt) {\n        require(isTknAllowed[token], \"token-not-listed\");\n        require(amt > 0 || msg.value > 0, \"amt-not-valid\");\n\n        if (msg.value > 0) require(token == ethAddr, \"not-eth-addr\");\n\n        address cErc20 = tknToCTkn[token];\n        uint initalBal = tokenBal(cErc20);\n        if (token == ethAddr) {\n            _amt = msg.value;\n            CETHInterface(cErc20).mint.value(_amt)();\n        } else {\n            _amt = amt == (uint(-1)) ? TokenInterface(token).balanceOf(msg.sender) : amt;\n            require(TokenInterface(token).transferFrom(msg.sender, address(this), _amt), \"allowance/balance?\");\n            require(CTokenInterface(cErc20).mint(_amt) == 0, \"mint-failed\");\n        }\n        uint finalBal = tokenBal(cErc20);\n        uint ctokenAmt = sub(finalBal, initalBal);\n\n        liquidityBalance[token][msg.sender] += ctokenAmt;\n\n        emit LogDeposit(msg.sender, token, _amt, ctokenAmt);\n    }\n\n    \n    /**\n     * @dev Withdraw Liquidity.\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n     * @param amt token amount.\n    */\n    function withdraw(address token, uint amt) external returns (uint _amt) {\n        uint _userLiq = liquidityBalance[token][msg.sender];\n        require(_userLiq > 0, \"nothing-to-withdraw\");\n\n        uint _cAmt;\n\n        address ctoken = tknToCTkn[token];\n        if (amt == uint(-1)) {\n            uint initknBal = tokenBal(token);\n            require(CTokenInterface(ctoken).redeem(_userLiq) == 0, \"redeem-failed\");\n            uint finTknBal = tokenBal(token);\n            _cAmt = _userLiq;\n            delete liquidityBalance[token][msg.sender];\n            _amt = sub(finTknBal, initknBal);\n        } else {\n            uint iniCtknBal = tokenBal(ctoken);\n            require(CTokenInterface(ctoken).redeemUnderlying(amt) == 0, \"redeemUnderlying-failed\");\n            uint finCtknBal = tokenBal(ctoken);\n            _cAmt = sub(iniCtknBal, finCtknBal);\n            require(_cAmt <= _userLiq, \"not-enough-to-withdraw\");\n            liquidityBalance[token][msg.sender] -= _cAmt;\n            _amt = amt;\n        }\n        \n        _transfer(token, _amt);\n       \n        emit LogWithdraw(msg.sender, token, _amt, _cAmt);\n    }\n\n}\n\n\ncontract Controllers is ProvideLiquidity {\n    event LogEnterMarket(address[] token, address[] ctoken);\n    event LogExitMarket(address indexed token, address indexed ctoken);\n\n    modifier isMaster {\n        require(msg.sender == IndexInterface(instaIndex).master(), \"not-master\");\n        _;\n    }\n\n    function _enterMarket(address[] memory cTknAddrs) internal {\n        ComptrollerInterface(comptrollerAddr).enterMarkets(cTknAddrs);\n        address[] memory tknAddrs = new address[](cTknAddrs.length);\n        for (uint i = 0; i < cTknAddrs.length; i++) {\n            if (cTknAddrs[i] != cEth) {\n                tknAddrs[i] = CTokenInterface(cTknAddrs[i]).underlying();\n                TokenInterface(tknAddrs[i]).approve(cTknAddrs[i], uint(-1));\n            } else {\n                tknAddrs[i] = ethAddr;\n            }\n            tknToCTkn[tknAddrs[i]] = cTknAddrs[i];\n            isTknAllowed[tknAddrs[i]] = true;\n        }\n        emit LogEnterMarket(tknAddrs, cTknAddrs);\n    }\n\n    /**\n     * @dev Enter compound market to enable borrowing.\n     * @param cTknAddrs Array Ctoken addresses.\n    */\n    function enterMarket(address[] calldata cTknAddrs) external isMaster {\n        _enterMarket(cTknAddrs);\n    }\n\n    /**\n     * @dev Exit compound market to disable borrowing.\n     * @param cTkn Ctoken address.\n    */\n    function exitMarket(address cTkn) external isMaster {\n        ComptrollerInterface(comptrollerAddr).exitMarket(cTkn);\n        address tkn;\n        if (cTkn != cEth) {\n            tkn = CTokenInterface(cTkn).underlying();\n            TokenInterface(tkn).approve(cTkn, 0);\n        } else {\n            tkn = ethAddr;\n        }\n        isTknAllowed[tkn] = false;\n        emit LogExitMarket(tkn, cTkn);\n    }\n\n}\n\n\ncontract InstaPool is Controllers {\n    receive() external payable {}\n}"}}}