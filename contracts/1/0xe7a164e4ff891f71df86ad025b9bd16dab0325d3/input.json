{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"BundleExecutor3.0.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.6.12;\n\npragma experimental ABIEncoderV2;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n    function withdraw(uint) external;\n}\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ncontract FlashBotsMultiCall {\n    using SafeMath for uint;\n    address private immutable owner;\n    address private immutable executor;\n    \n    IWETH private constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\n\n    modifier onlyExecutor() {\n        require(msg.sender == executor);\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor(address _executor) public payable {\n        owner = msg.sender;\n        executor = _executor;\n\n        if (msg.value > 0) {\n            WETH.deposit{value: msg.value}();\n        }\n    }\n\n    receive() external payable {\n    }\n\n\n    function swap0(uint256 _ethAmountToCoinbase, address[] memory _targets, bytes[] memory _payloads) external onlyExecutor payable {\n        //require(blockhash(block.number - 1) == expectedParentHash, \"block was uncled\");\n        require (_targets.length == _payloads.length);\n        uint256 _wethBalanceBefore = WETH.balanceOf(address(this));\n\n        for (uint256 i = 0; i < _targets.length; i++) {\n            (bool _success, bytes memory _response) = _targets[i].call(_payloads[i]);\n            require(_success); _response;\n        }\n\n        uint256 _wethBalanceAfter = WETH.balanceOf(address(this));\n        require(_wethBalanceAfter > _wethBalanceBefore + _ethAmountToCoinbase);\n        if (_ethAmountToCoinbase == 0) return;\n\n        uint256 _ethBalance = address(this).balance;\n        if (_ethBalance < _ethAmountToCoinbase) {\n            WETH.withdraw(_ethAmountToCoinbase - _ethBalance);\n        }\n        block.coinbase.transfer(_ethAmountToCoinbase);\n    }\n\n    function call(address payable _to, uint256 _value, bytes calldata _data) external onlyOwner payable returns (bytes memory) {\n        require(_to != address(0));\n        (bool _success, bytes memory _result) = _to.call{value: _value}(_data);\n        require(_success);\n        return _result;\n    }\n\n    function _swap(uint[] memory amounts, address[] memory pathPairs, uint[] memory pathZeroForOne) internal virtual {\n        for (uint i; i < pathPairs.length; i++) {\n            uint amountOut = amounts[i + 1];\n            (uint amount0Out, uint amount1Out) = pathZeroForOne[i] == 0 ? (uint(0), amountOut) : (amountOut, uint(0));\n            address to = i < pathPairs.length - 1 ? pathPairs[i+1] : address(this);\n            IUniswapV2Pair(pathPairs[i]).swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n\n    function _swapSupportingFeeOnTransferTokens(address[] memory pathPairs, uint[] memory pathZeroForOne) internal virtual {      \n        for (uint i; i < pathPairs.length; i++) {\n            (address inputToken, uint reserveInput, uint reserveOutput) = getPairForSwap(pathPairs[i], pathZeroForOne[i]);\n            uint amountInput;\n            uint amountOutput;\n            amountInput = IERC20(inputToken).balanceOf(pathPairs[i]).sub(reserveInput);\n            amountOutput = UniswapV2Library.getAmountOut(amountInput, reserveInput, reserveOutput);\n            (uint amount0Out, uint amount1Out) = pathZeroForOne[i] == 0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\n            address to = i < pathPairs.length - 1 ? pathPairs[i+1] : address(this);\n            IUniswapV2Pair(pathPairs[i]).swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n\n    function swapETFT(\n        uint amountIn,\n        uint amountOutMin,\n        address[] memory pathPairs,\n        uint[] memory pathZeroForOne\n    ) external onlyExecutor {\n        //require(blockhash(block.number - 1) == expectedParentHash, \"block was uncled\");\n        require (pathPairs.length == pathZeroForOne.length);\n        address inputToken = pathZeroForOne[0] == 0 ? IUniswapV2Pair(pathPairs[0]).token0() : IUniswapV2Pair(pathPairs[0]).token1();\n        uint[] memory amounts = UniswapV2Library.getAmountsOut(amountIn, pathPairs, pathZeroForOne);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'INSUFFICIENT_OUTPUT_AMOUNT');\n        TransferHelper.safeTransfer( \n            inputToken, pathPairs[0], amounts[0]\n        );\n        _swap(amounts, pathPairs, pathZeroForOne);\n    }\n\n    function swapETFTFOT(\n        //require(blockhash(block.number - 1) == expectedParentHash, \"block was uncled\");\n        uint amountIn,\n        uint amountOutMin,\n        address[] memory pathPairs,\n        uint[] memory pathZeroForOne\n    ) external onlyExecutor {\n        require (pathPairs.length == pathZeroForOne.length);\n        address inputToken = pathZeroForOne[0] == 0 ? IUniswapV2Pair(pathPairs[0]).token0() : IUniswapV2Pair(pathPairs[0]).token1();\n        address outputToken = pathZeroForOne[pathZeroForOne.length - 1] == 1 ? IUniswapV2Pair(pathPairs[pathPairs.length - 1]).token0() : IUniswapV2Pair(pathPairs[pathPairs.length - 1]).token1();\n        TransferHelper.safeTransfer(\n            inputToken, pathPairs[0], amountIn\n        );\n        uint balanceBefore = IERC20(outputToken).balanceOf(address(this));\n        _swapSupportingFeeOnTransferTokens(pathPairs, pathZeroForOne);\n        require(\n            IERC20(outputToken).balanceOf(address(this)).sub(balanceBefore) >= amountOutMin,\n            'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\n        );\n    }\n\n    function getPairForSwap(address pair, uint zeroForOne) internal view returns(address inputToken, uint reserveInput, uint reserveOutput){\n            inputToken = zeroForOne == 0 ? IUniswapV2Pair(pair).token0() : IUniswapV2Pair(pair).token1();\n            (reserveInput, reserveOutput) = UniswapV2Library.getReserves(pair, zeroForOne);\n    }\n\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut)\n        public\n        pure\n        virtual\n        returns (uint amountOut)\n    {\n        return UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    function getAmountsOut(uint amountIn, address[] memory pathPairs, uint[] memory pathZeroForOne)\n        public\n        view\n        virtual\n        returns (uint[] memory amounts)\n    {\n        return UniswapV2Library.getAmountsOut(amountIn, pathPairs, pathZeroForOne);\n    }\n    \n    function getReserves(address Pairs, uint ZeroForOne )\n        public\n        view\n        virtual\n        returns (uint reserveA, uint reserveB)\n    {\n        return UniswapV2Library.getReserves(Pairs, ZeroForOne);\n    }\n}\n\n\nlibrary UniswapV2Library {\n    using SafeMath for uint;\n    \n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address pair, uint zeroForOne) internal view returns (uint reserveA, uint reserveB) {\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pair).getReserves();\n        (reserveA, reserveB) = zeroForOne == 1 ? (reserve1, reserve0) : (reserve0, reserve1);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(uint amountIn, address[] memory pathPairs, uint[] memory pathZeroForOne) internal view returns (uint[] memory amounts) {\n        require(pathPairs.length >= 1, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](pathPairs.length+1);\n        amounts[0] = amountIn;\n        for (uint i; i < pathPairs.length; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(pathPairs[i], pathZeroForOne[i]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}"}}}