{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"ReferralRewards.sol":{"content":"// File: @openzeppelin/upgrades/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n// File: localhost/contracts/RewardEscrow.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title DoughEscrow interface\r\n */\r\ninterface IDoughEscrow {\r\n    function balanceOf(address account) external view returns (uint);\r\n    function appendVestingEntry(address account, uint quantity) external;\r\n}\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nFILE INFORMATION\r\n-----------------------------------------------------------------\r\n\r\nfile:       RewardEscrow.sol\r\nversion:    1.0\r\nauthor:     Jackson Chan\r\n            Clinton Ennis\r\n\r\ndate:       2019-03-01\r\n\r\n-----------------------------------------------------------------\r\nMODULE DESCRIPTION\r\n-----------------------------------------------------------------\r\nEscrows the DOUGH rewards from the inflationary supply awarded to\r\nusers for staking their DOUGH and maintaining the c-rationn target.\r\n\r\nSNW rewards are escrowed for 1 year from the claim date and users\r\ncan call vest in 12 months time.\r\n-----------------------------------------------------------------\r\n*/\r\n\r\n\r\n/**\r\n * @title A contract to hold escrowed DOUGH and free them at given schedules.\r\n */\r\ncontract RewardEscrow is Ownable {\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public dough;\r\n\r\n    mapping(address => bool) public isRewardContract;\r\n\r\n    /* Lists of (timestamp, quantity) pairs per account, sorted in ascending time order.\r\n     * These are the times at which each given quantity of DOUGH vests. */\r\n    mapping(address => uint[2][]) public vestingSchedules;\r\n\r\n    /* An account's total escrowed dough balance to save recomputing this for fee extraction purposes. */\r\n    mapping(address => uint) public totalEscrowedAccountBalance;\r\n\r\n    /* An account's total vested reward dough. */\r\n    mapping(address => uint) public totalVestedAccountBalance;\r\n\r\n    /* The total remaining escrowed balance, for verifying the actual dough balance of this contract against. */\r\n    uint public totalEscrowedBalance;\r\n\r\n    uint constant TIME_INDEX = 0;\r\n    uint constant QUANTITY_INDEX = 1;\r\n\r\n    /* Limit vesting entries to disallow unbounded iteration over vesting schedules.\r\n    * There are 5 years of the supply scedule */\r\n    uint constant public MAX_VESTING_ENTRIES = 52*5;\r\n\r\n    uint8 public constant decimals = 18;\r\n    string public name;\r\n    string public symbol;\r\n\r\n\r\n    /* ========== Initializer ========== */\r\n\r\n    function initialize (address _dough, string memory _name, string memory _symbol) public initializer\r\n    {\r\n        dough = IERC20(_dough);\r\n        name = _name;\r\n        symbol = _symbol;\r\n        Ownable.initialize(msg.sender);\r\n    }\r\n\r\n\r\n    /* ========== SETTERS ========== */\r\n\r\n    /**\r\n     * @notice set the dough contract address as we need to transfer DOUGH when the user vests\r\n     */\r\n    function setDough(address _dough)\r\n    external\r\n    onlyOwner\r\n    {\r\n        dough = IERC20(_dough);\r\n        emit DoughUpdated(address(_dough));\r\n    }\r\n\r\n    /**\r\n     * @notice Add a whitelisted rewards contract\r\n     */\r\n    function addRewardsContract(address _rewardContract) external onlyOwner {\r\n        isRewardContract[_rewardContract] = true;\r\n        emit RewardContractAdded(_rewardContract);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove a whitelisted rewards contract\r\n    */\r\n    function removeRewardsContract(address _rewardContract) external onlyOwner {\r\n        isRewardContract[_rewardContract] = false;\r\n        emit RewardContractRemoved(_rewardContract);\r\n    }\r\n\r\n    /* ========== VIEW FUNCTIONS ========== */\r\n\r\n    /**\r\n     * @notice A simple alias to totalEscrowedAccountBalance: provides ERC20 balance integration.\r\n     */\r\n    function balanceOf(address account)\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return totalEscrowedAccountBalance[account];\r\n    }\r\n\r\n    /**\r\n     * @notice A simple alias to totalEscrowedBalance: provides ERC20 totalSupply integration.\r\n    */\r\n    function totalSupply() external view returns (uint256) {\r\n        return totalEscrowedBalance;\r\n    }\r\n\r\n    /**\r\n     * @notice The number of vesting dates in an account's schedule.\r\n     */\r\n    function numVestingEntries(address account)\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return vestingSchedules[account].length;\r\n    }\r\n\r\n    /**\r\n     * @notice Get a particular schedule entry for an account.\r\n     * @return A pair of uints: (timestamp, dough quantity).\r\n     */\r\n    function getVestingScheduleEntry(address account, uint index)\r\n    public\r\n    view\r\n    returns (uint[2] memory)\r\n    {\r\n        return vestingSchedules[account][index];\r\n    }\r\n\r\n    /**\r\n     * @notice Get the time at which a given schedule entry will vest.\r\n     */\r\n    function getVestingTime(address account, uint index)\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return getVestingScheduleEntry(account,index)[TIME_INDEX];\r\n    }\r\n\r\n    /**\r\n     * @notice Get the quantity of DOUGH associated with a given schedule entry.\r\n     */\r\n    function getVestingQuantity(address account, uint index)\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return getVestingScheduleEntry(account,index)[QUANTITY_INDEX];\r\n    }\r\n\r\n    /**\r\n     * @notice Obtain the index of the next schedule entry that will vest for a given user.\r\n     */\r\n    function getNextVestingIndex(address account)\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        uint len = numVestingEntries(account);\r\n        for (uint i = 0; i < len; i++) {\r\n            if (getVestingTime(account, i) != 0) {\r\n                return i;\r\n            }\r\n        }\r\n        return len;\r\n    }\r\n\r\n    /**\r\n     * @notice Obtain the next schedule entry that will vest for a given user.\r\n     * @return A pair of uints: (timestamp, DOUGH quantity). */\r\n    function getNextVestingEntry(address account)\r\n    public\r\n    view\r\n    returns (uint[2] memory)\r\n    {\r\n        uint index = getNextVestingIndex(account);\r\n        if (index == numVestingEntries(account)) {\r\n            return [uint(0), 0];\r\n        }\r\n        return getVestingScheduleEntry(account, index);\r\n    }\r\n\r\n    /**\r\n     * @notice Obtain the time at which the next schedule entry will vest for a given user.\r\n     */\r\n    function getNextVestingTime(address account)\r\n    external\r\n    view\r\n    returns (uint)\r\n    {\r\n        return getNextVestingEntry(account)[TIME_INDEX];\r\n    }\r\n\r\n    /**\r\n     * @notice Obtain the quantity which the next schedule entry will vest for a given user.\r\n     */\r\n    function getNextVestingQuantity(address account)\r\n    external\r\n    view\r\n    returns (uint)\r\n    {\r\n        return getNextVestingEntry(account)[QUANTITY_INDEX];\r\n    }\r\n\r\n    /**\r\n     * @notice return the full vesting schedule entries vest for a given user.\r\n     */\r\n    function checkAccountSchedule(address account)\r\n        public\r\n        view\r\n        returns (uint[520] memory)\r\n    {\r\n        uint[520] memory _result;\r\n        uint schedules = numVestingEntries(account);\r\n        for (uint i = 0; i < schedules; i++) {\r\n            uint[2] memory pair = getVestingScheduleEntry(account, i);\r\n            _result[i*2] = pair[0];\r\n            _result[i*2 + 1] = pair[1];\r\n        }\r\n        return _result;\r\n    }\r\n\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    /**\r\n     * @notice Add a new vesting entry at a given time and quantity to an account's schedule.\r\n     * @dev A call to this should accompany a previous successfull call to dough.transfer(rewardEscrow, amount),\r\n     * to ensure that when the funds are withdrawn, there is enough balance.\r\n     * Note; although this function could technically be used to produce unbounded\r\n     * arrays, it's only withinn the 4 year period of the weekly inflation schedule.\r\n     * @param account The account to append a new vesting entry to.\r\n     * @param quantity The quantity of DOUGH that will be escrowed.\r\n     */\r\n    function appendVestingEntry(address account, uint quantity)\r\n    public\r\n    onlyRewardsContract\r\n    {\r\n        /* No empty or already-passed vesting entries allowed. */\r\n        require(quantity != 0, \"Quantity cannot be zero\");\r\n\r\n        /* There must be enough balance in the contract to provide for the vesting entry. */\r\n        totalEscrowedBalance = totalEscrowedBalance.add(quantity);\r\n        require(totalEscrowedBalance <= dough.balanceOf(address(this)), \"Must be enough balance in the contract to provide for the vesting entry\");\r\n\r\n        /* Disallow arbitrarily long vesting schedules in light of the gas limit. */\r\n        uint scheduleLength = vestingSchedules[account].length;\r\n        require(scheduleLength <= MAX_VESTING_ENTRIES, \"Vesting schedule is too long\");\r\n\r\n        /* Escrow the tokens for 1 year. */\r\n        uint time = now + 52 weeks;\r\n\r\n        if (scheduleLength == 0) {\r\n            totalEscrowedAccountBalance[account] = quantity;\r\n        } else {\r\n            /* Disallow adding new vested DOUGH earlier than the last one.\r\n             * Since entries are only appended, this means that no vesting date can be repeated. */\r\n            require(getVestingTime(account, numVestingEntries(account) - 1) < time, \"Cannot add new vested entries earlier than the last one\");\r\n            totalEscrowedAccountBalance[account] = totalEscrowedAccountBalance[account].add(quantity);\r\n        }\r\n\r\n        // If last window is less than a week old add amount to that one.\r\n        if(\r\n            vestingSchedules[account].length != 0 && \r\n            vestingSchedules[account][vestingSchedules[account].length - 1][0] > time - 1 weeks\r\n        ) {\r\n            vestingSchedules[account][vestingSchedules[account].length - 1][1] = vestingSchedules[account][vestingSchedules[account].length - 1][1].add(quantity);\r\n        } else {\r\n            vestingSchedules[account].push([time, quantity]);\r\n        }\r\n        \r\n        emit Transfer(address(0), account, quantity);\r\n        emit VestingEntryCreated(account, now, quantity);\r\n    }\r\n\r\n    /**\r\n     * @notice Allow a user to withdraw any DOUGH in their schedule that have vested.\r\n     */\r\n    function vest()\r\n    external\r\n    {\r\n        uint numEntries = numVestingEntries(msg.sender);\r\n        uint total;\r\n        for (uint i = 0; i < numEntries; i++) {\r\n            uint time = getVestingTime(msg.sender, i);\r\n            /* The list is sorted; when we reach the first future time, bail out. */\r\n            if (time > now) {\r\n                break;\r\n            }\r\n            uint qty = getVestingQuantity(msg.sender, i);\r\n            if (qty == 0) {\r\n                continue;\r\n            }\r\n\r\n            vestingSchedules[msg.sender][i] = [0, 0];\r\n            total = total.add(qty);\r\n        }\r\n\r\n        if (total != 0) {\r\n            totalEscrowedBalance = totalEscrowedBalance.sub(total);\r\n            totalEscrowedAccountBalance[msg.sender] = totalEscrowedAccountBalance[msg.sender].sub(total);\r\n            totalVestedAccountBalance[msg.sender] = totalVestedAccountBalance[msg.sender].add(total);\r\n            dough.safeTransfer(msg.sender, total);\r\n            emit Vested(msg.sender, now, total);\r\n            emit Transfer(msg.sender, address(0), total);\r\n        }\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyRewardsContract() {\r\n        require(isRewardContract[msg.sender], \"Only reward contract can perform this action\");\r\n        _;\r\n    }\r\n\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event DoughUpdated(address newDough);\r\n\r\n    event Vested(address indexed beneficiary, uint time, uint value);\r\n\r\n    event VestingEntryCreated(address indexed beneficiary, uint time, uint value);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event RewardContractAdded(address indexed rewardContract);\r\n\r\n    event RewardContractRemoved(address indexed rewardContract);\r\n\r\n}\r\n\r\n\r\n\r\n// File: localhost/contracts/IRewardDistributionRecipient.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IRewardDistributionRecipient is Ownable {\r\n    address public rewardDistribution;\r\n\r\n    function notifyRewardAmount(uint256 reward) external;\r\n\r\n    modifier onlyRewardDistribution() {\r\n        require(_msgSender() == rewardDistribution, \"Caller is not reward distribution\");\r\n        _;\r\n    }\r\n\r\n    function setRewardDistribution(address _rewardDistribution)\r\n        external\r\n        onlyOwner\r\n    {\r\n        rewardDistribution = _rewardDistribution;\r\n    }\r\n}\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/ReferralRewards.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract LPTokenWrapper {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // TODO setup pool for DeFi+S\r\n    IERC20 public uni;\r\n\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function stake(uint256 amount) public {\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\r\n        uni.safeTransferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) public {\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        uni.safeTransfer(msg.sender, amount);\r\n    }\r\n}\r\n\r\ncontract ReferralRewards is LPTokenWrapper, IRewardDistributionRecipient {\r\n    IERC20 public dough;\r\n    uint256 public constant DURATION = 21 days;\r\n\r\n    uint256 public periodFinish = 0;\r\n    uint256 public rewardRate = 0;\r\n    uint256 public lastUpdateTime;\r\n    uint256 public rewardPerTokenStored;\r\n    mapping(address => uint256) public userRewardPerTokenPaid;\r\n    mapping(address => uint256) public rewards;\r\n\r\n    RewardEscrow public rewardEscrow;\r\n    uint256 public escrowPercentage;\r\n\r\n    mapping(address => address) public referralOf;\r\n    // 1%\r\n    uint256 referralPercentage = 1 * 10 ** 16;\r\n\r\n    uint8 public constant decimals = 18;\r\n    string public name;\r\n    string public symbol;\r\n\r\n    event RewardAdded(uint256 reward);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n    event ReferralSet(address indexed user, address indexed referral);\r\n    event ReferralReward(address indexed user, address indexed referral, uint256 amount);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    modifier updateReward(address account) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n        if (account != address(0)) {\r\n            rewards[account] = earned(account);\r\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\r\n        }\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        address _dough,\r\n        address _uni,\r\n        address _rewardEscrow,\r\n        string memory _name, \r\n        string memory _symbol\r\n    ) public initializer {\r\n        Ownable.initialize(msg.sender);\r\n        dough = IERC20(_dough);\r\n        uni = IERC20 (_uni);\r\n        rewardEscrow = RewardEscrow(_rewardEscrow);\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public view returns (uint256) {\r\n        return Math.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint256) {\r\n        if (totalSupply() == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        return\r\n            rewardPerTokenStored.add(\r\n                lastTimeRewardApplicable()\r\n                    .sub(lastUpdateTime)\r\n                    .mul(rewardRate)\r\n                    .mul(1e18)\r\n                    .div(totalSupply())\r\n            );\r\n    }\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n        return\r\n            balanceOf(account)\r\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\r\n                .div(1e18)\r\n                .add(rewards[account]);\r\n    }\r\n\r\n    // stake visibility is public as overriding LPTokenWrapper's stake() function\r\n    function stake(uint256 amount) public updateReward(msg.sender) {\r\n        require(amount > 0, \"Cannot stake 0\");\r\n        super.stake(amount);\r\n        emit Transfer(address(0), msg.sender, amount);\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    function stake(uint256 amount, address referral) public {\r\n        stake(amount);\r\n        \r\n        // Only set if referral is not set yet\r\n        if(referralOf[msg.sender] == address(0) && referral != msg.sender && referral != address(0)) {\r\n            referralOf[msg.sender] = referral;\r\n            emit ReferralSet(msg.sender, referral);\r\n        }\r\n    }\r\n\r\n    function withdraw(uint256 amount) public updateReward(msg.sender) {\r\n        require(amount > 0, \"Cannot withdraw 0\");\r\n        super.withdraw(amount);\r\n        emit Withdrawn(msg.sender, amount);\r\n        emit Transfer(msg.sender, address(0), amount);\r\n    }\r\n\r\n    function exit() external {\r\n        withdraw(balanceOf(msg.sender));\r\n        getReward();\r\n    }\r\n\r\n    function getReward() public updateReward(msg.sender) {\r\n        uint256 reward = earned(msg.sender);\r\n        if (reward > 0) {\r\n            rewards[msg.sender] = 0;\r\n            uint256 escrowedReward = reward.mul(escrowPercentage).div(10**18);\r\n            if(escrowedReward != 0) {\r\n                dough.safeTransfer(address(rewardEscrow), escrowedReward);\r\n                rewardEscrow.appendVestingEntry(msg.sender, escrowedReward);\r\n            }\r\n\r\n            uint256 nonEscrowedReward = reward.sub(escrowedReward);\r\n\r\n            if(nonEscrowedReward != 0) {\r\n                dough.safeTransfer(msg.sender, reward.sub(escrowedReward));\r\n            }\r\n            emit RewardPaid(msg.sender, reward);\r\n        }\r\n\r\n        if(referralOf[msg.sender] != address(0)) {\r\n            address referral = referralOf[msg.sender];\r\n            uint256 referralReward = reward.mul(referralPercentage).div(10**18);\r\n            rewards[referral] = rewards[referral].add(referralReward);\r\n            emit ReferralReward(msg.sender, referral, referralReward);\r\n        }\r\n    }\r\n\r\n    function notifyRewardAmount(uint256 reward)\r\n        external\r\n        onlyRewardDistribution\r\n        updateReward(address(0))\r\n    {\r\n        if (block.timestamp >= periodFinish) {\r\n            rewardRate = reward.div(DURATION);\r\n        } else {\r\n            uint256 remaining = periodFinish.sub(block.timestamp);\r\n            uint256 leftover = remaining.mul(rewardRate);\r\n            rewardRate = reward.add(leftover).div(DURATION);\r\n        }\r\n        lastUpdateTime = block.timestamp;\r\n        periodFinish = block.timestamp.add(DURATION);\r\n        emit RewardAdded(reward);\r\n    }\r\n\r\n    function setEscrowPercentage(uint256 _percentage) external onlyRewardDistribution {\r\n        require(_percentage <= 10**18, \"100% escrow is the max\");\r\n        escrowPercentage = _percentage;\r\n    }\r\n\r\n    function saveToken(address _token) external {\r\n        require(_token != address(dough) && _token != address(uni), \"INVALID_TOKEN\");\r\n\r\n        IERC20 token = IERC20(_token);\r\n\r\n        token.transfer(address(0x4efD8CEad66bb0fA64C8d53eBE65f31663199C6d), token.balanceOf(address(this)));\r\n    }\r\n}"}}}