{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/GameOver.sol":{"content":"// SPDX-License-Identifier: NOLICENSE\n\n/*\n    Telegram: https://t.me/Bot_GameOver\n*/\n\npragma solidity ^0.8.6;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ninterface IFactory{\n        function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IRouter {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline) external;\n}\n\n\n\ncontract GameOver is Context, IERC20, Ownable {\n\n    mapping (address => uint256) private _rOwned;\n    mapping (address => uint256) private _tOwned;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => bool) private _isExcludedFromFee;\n    mapping (address => bool) private _isExcluded;\n    mapping (address => bool) private _isBot;\n    mapping (address => bool)  _allowedTransfer;\n\n    address[] private _excluded;\n\n    bool public swapEnabled;\n    bool private swapping;\n    bool public tradingEnabled;\n\n    IRouter public router;\n    address public pair;\n\n    uint8 private constant _decimals = 9;\n    uint256 private constant MAX = ~uint256(0);\n\n    uint256 private _tTotal = 100_000_000 * 10**_decimals;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n\n    uint256 public swapTokensAtAmount = 50000 * 10**_decimals;\n    uint256 public maxWalletBalance = 1_000_000 * 10**_decimals;\n\n    string private constant _name = \"GameOver\";\n    string private constant _symbol = \"GameOver\";\n    \n    address public marketingWallet = 0xA6c875b1c859c29e6E79d7e27Bc7bb0525612f62;\n\n    struct feeRatesStruct {\n      uint256 rfi;\n      uint256 marketing;\n    }\n\n    feeRatesStruct public feeRates = feeRatesStruct(\n     {rfi: 2,\n      marketing: 8\n    });\n\n    struct TotFeesPaidStruct{\n        uint256 rfi;\n        uint256 marketing;\n    }\n    TotFeesPaidStruct public totFeesPaid;\n\n    struct valuesFromGetValues{\n      uint256 rAmount;\n      uint256 rTransferAmount;\n      uint256 rRfi;\n      uint256 rMarketing;\n      uint256 tTransferAmount;\n      uint256 tRfi;\n      uint256 tMarketing;\n    }\n\n    event FeesChanged();\n    event UpdatedRouter(address oldRouter, address newRouter);\n    \n    modifier antiSniper(address account){\n        require(tradingEnabled || _allowedTransfer[account], \"Trading not enabled yet\");\n        _;\n    }\n\n\n    modifier lockTheSwap {\n        swapping = true;\n        _;\n        swapping = false;\n    }\n\n    constructor (address routerAddress) {\n        IRouter _router = IRouter(routerAddress);\n        address _pair = IFactory(_router.factory())\n            .createPair(address(this), _router.WETH());\n\n        router = _router;\n        pair = _pair;\n\n        excludeFromReward(pair);\n        \n        _rOwned[owner()] = _rTotal;\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[marketingWallet] = true;\n        \n        _allowedTransfer[owner()] = true;\n        _allowedTransfer[marketingWallet] = true;\n        _allowedTransfer[address(this)] = true;\n\n        emit Transfer(address(0), owner(), _tTotal);\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount) public override antiSniper(msg.sender) returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override antiSniper(msg.sender) returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override antiSniper(sender) returns (bool) {\n        _transfer(sender, recipient, amount);\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual antiSniper(msg.sender) returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender]+addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual antiSniper(msg.sender) returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        return true;\n    }\n\n    function isExcludedFromReward(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function reflectionFromToken(uint256 tAmount, bool deductTransferRfi) public view returns(uint256) {\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\n        if (!deductTransferRfi) {\n            valuesFromGetValues memory s = _getValues(tAmount, true);\n            return s.rAmount;\n        } else {\n            valuesFromGetValues memory s = _getValues(tAmount, true);\n            return s.rTransferAmount;\n        }\n    }\n\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n        uint256 currentRate =  _getRate();\n        return rAmount/currentRate;\n    }\n\n    function excludeFromReward(address account) internal {\n        require(!_isExcluded[account], \"Account is already excluded\");\n        if(_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n    function includeInReward(address account) internal {\n        require(_isExcluded[account], \"Account is not excluded\");\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n\n    function excludeFromFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n\n    function includeInFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n    \n    function setAllowedTransfer(address account, bool value) external onlyOwner{\n        _allowedTransfer[account] = value;\n    }\n    \n    function setTradingEnabled(bool _enabled) external onlyOwner{\n        tradingEnabled = _enabled;\n    }\n\n\n    function isExcludedFromFee(address account) public view returns(bool) {\n        return _isExcludedFromFee[account];\n    }\n\n    function _reflectRfi(uint256 rRfi, uint256 tRfi) private {\n        _rTotal -=rRfi;\n        totFeesPaid.rfi +=tRfi;\n    }\n\n\n    function _takeMarketing(uint256 rMarketing, uint256 tMarketing) private {\n        totFeesPaid.marketing +=tMarketing;\n\n        if(_isExcluded[address(this)])\n        {\n            _tOwned[address(this)]+=tMarketing;\n        }\n        _rOwned[address(this)] +=rMarketing;\n    }\n\n    function _getValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory to_return) {\n        to_return = _getTValues(tAmount, takeFee);\n        (to_return.rAmount, to_return.rTransferAmount, to_return.rRfi, to_return.rMarketing) = _getRValues(to_return, tAmount, takeFee, _getRate());\n        return to_return;\n    }\n\n    function _getTValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory s) {\n\n        if(!takeFee) {\n          s.tTransferAmount = tAmount;\n          return s;\n        }\n        s.tRfi = tAmount*feeRates.rfi/100;\n        s.tMarketing = tAmount*feeRates.marketing/100;\n        s.tTransferAmount = tAmount-s.tRfi-s.tMarketing;\n        return s;\n    }\n\n    function _getRValues(valuesFromGetValues memory s, uint256 tAmount, bool takeFee, uint256 currentRate) private pure returns (uint256 rAmount, uint256 rTransferAmount, uint256 rRfi, uint256 rMarketing) {\n        rAmount = tAmount*currentRate;\n\n        if(!takeFee) {\n          return(rAmount, rAmount, 0,0);\n        }\n\n        rRfi = s.tRfi*currentRate;\n        rMarketing = s.tMarketing*currentRate;\n        rTransferAmount =  rAmount-rRfi-rMarketing;\n        return (rAmount, rTransferAmount, rRfi,rMarketing);\n    }\n\n    function _getRate() private view returns(uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply/tSupply;\n    }\n\n    function _getCurrentSupply() private view returns(uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n            rSupply = rSupply-_rOwned[_excluded[i]];\n            tSupply = tSupply-_tOwned[_excluded[i]];\n        }\n        if (rSupply < _rTotal/_tTotal) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(amount <= balanceOf(from),\"You are trying to transfer more than your balance\");\n        require(!_isBot[from] && !_isBot[to], \"Bots are not allowed\");\n\n        if(!_isExcludedFromFee[from] && !_isExcludedFromFee[to] && to != pair){\n            require(balanceOf(to) + amount <= maxWalletBalance, \"You are exceeding maxWalletBalance\");\n        }\n    \n        uint256 contractTokenBalance = balanceOf(address(this));\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\n        if(!swapping && swapEnabled && canSwap && from != pair){\n            swapAndSendToFee(swapTokensAtAmount);\n        }\n        \n        bool takeFee = true;\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\n            takeFee = false;\n        }\n\n        _tokenTransfer(from, to, amount, takeFee);\n    }\n\n\n    //this method is responsible for taking all fee, if takeFee is true\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool takeFee) private {\n\n        valuesFromGetValues memory s = _getValues(tAmount, takeFee);\n\n        if (_isExcluded[sender] ) {  //from excluded\n                _tOwned[sender] = _tOwned[sender]-tAmount;\n        }\n        if (_isExcluded[recipient]) { //to excluded\n                _tOwned[recipient] = _tOwned[recipient]+s.tTransferAmount;\n        }\n\n        _rOwned[sender] = _rOwned[sender]-s.rAmount;\n        _rOwned[recipient] = _rOwned[recipient]+s.rTransferAmount;\n        _reflectRfi(s.rRfi, s.tRfi);\n        _takeMarketing(s.rMarketing,s.tMarketing);\n        emit Transfer(sender, recipient, s.tTransferAmount);\n        emit Transfer(sender, address(this), s.tMarketing);\n    }\n\n\n    function swapAndSendToFee(uint256 tokens) private lockTheSwap{\n        swapTokensForETH(tokens, marketingWallet);\n    }\n\n    function swapTokensForETH(uint256 tokenAmount, address recipient) private {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = router.WETH();\n\n        _approve(address(this), address(router), tokenAmount);\n\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, \n            path,\n            payable(recipient),\n            block.timestamp\n        );\n\n    }\n    \n    function updateMarketingWallet(address newWallet) external onlyOwner{\n        marketingWallet = newWallet;\n    }\n\n    function updateSwapTokensAtAmount(uint256 amount) external onlyOwner{\n        swapTokensAtAmount = amount * 10**_decimals;\n    }\n\n    function updateSwapEnabled(bool _enabled) external onlyOwner{\n        swapEnabled = _enabled;\n    }\n    \n    function setBot(address _user, bool value) external onlyOwner{\n        _isBot[_user] = value;\n    }\n    \n    function isBot(address _bot) external view returns(bool){\n        return _isBot[_bot];\n    }\n\n\n    receive() external payable{\n    }\n}\n"}}}