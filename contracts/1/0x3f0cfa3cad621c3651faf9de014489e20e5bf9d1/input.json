{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/tests/Untitled.sol":{"content":"// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.6.12;\n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\n */\ninterface IERC20 {\n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n   * allowance mechanism. `amount` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) external returns (bool);\n\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ninterface ILendingPoolAddressesProvider {\n  event LendingPoolUpdated(address indexed newAddress);\n  event LendingPoolCoreUpdated(address indexed newAddress);\n  event LendingPoolParametersProviderUpdated(address indexed newAddress);\n  event LendingPoolManagerUpdated(address indexed newAddress);\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\n  event LendingPoolLiquidationManagerUpdated(address indexed newAddress);\n  event LendingPoolDataProviderUpdated(address indexed newAddress);\n  event EthereumAddressUpdated(address indexed newAddress);\n  event PriceOracleUpdated(address indexed newAddress);\n  event LendingRateOracleUpdated(address indexed newAddress);\n  event FeeProviderUpdated(address indexed newAddress);\n  event TokenDistributorUpdated(address indexed newAddress);\n\n  event ProxyCreated(bytes32 id, address indexed newAddress);\n\n  function getLendingPool() external view returns (address);\n\n  function setLendingPoolImpl(address _pool) external;\n\n  function getLendingPoolCore() external view returns (address payable);\n\n  function setLendingPoolCoreImpl(address _lendingPoolCore) external;\n\n  function getLendingPoolConfigurator() external view returns (address);\n\n  function setLendingPoolConfiguratorImpl(address _configurator) external;\n\n  function getLendingPoolDataProvider() external view returns (address);\n\n  function setLendingPoolDataProviderImpl(address _provider) external;\n\n  function getLendingPoolParametersProvider() external view returns (address);\n\n  function setLendingPoolParametersProviderImpl(address _parametersProvider) external;\n\n  function getTokenDistributor() external view returns (address);\n\n  function setTokenDistributor(address _tokenDistributor) external;\n\n  function getFeeProvider() external view returns (address);\n\n  function setFeeProviderImpl(address _feeProvider) external;\n\n  function getLendingPoolLiquidationManager() external view returns (address);\n\n  function setLendingPoolLiquidationManager(address _manager) external;\n\n  function getLendingPoolManager() external view returns (address);\n\n  function setLendingPoolManager(address _lendingPoolManager) external;\n\n  function getPriceOracle() external view returns (address);\n\n  function setPriceOracle(address _priceOracle) external;\n\n  function getLendingRateOracle() external view returns (address);\n\n  function setLendingRateOracle(address _lendingRateOracle) external;\n}\n\n\ninterface IProposalExecutor {\n    function execute() external;\n}\n\n/**\n * @title AIP3ProposalPayload\n * @notice Proposal payload to be executed by the Aave Governance contract via DELEGATECALL\n * - Updates the LendingPool contract as defined by the AIP-3 \n * @author Aave\n **/\ncontract AIP3ProposalPayload is IProposalExecutor {\n  event ProposalExecuted();\n\n  ILendingPoolAddressesProvider public constant ADDRESSES_PROVIDER = ILendingPoolAddressesProvider(\n    0x24a42fD28C976A61Df5D00D0599C34c4f90748c8\n  );\n\n  address public constant POOL_IMPL =  0x017788DDEd30FDd859d295b90D4e41a19393F423;\n\n  /**\n   * @dev Payload execution function, called once a proposal passed in the Aave governance\n   */\n  function execute() external override {\n\n    ADDRESSES_PROVIDER.setLendingPoolImpl(POOL_IMPL);\n\n    emit ProposalExecuted();\n  }\n}\n"}}}