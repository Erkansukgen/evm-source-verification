{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"UsdcVaultPermitDeposit.sol":{"content":"// SPDX-License-Identifier: AGPLv3\r\npragma solidity =0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface Usdc {\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\ninterface Vault {\r\n    function token() external view returns (address);\r\n\r\n    function deposit(uint256 amount, address recipient)\r\n        external\r\n        returns (uint256);\r\n}\r\n\r\ncontract UsdcVaultPermitDeposit {\r\n    Vault public vault;\r\n    Usdc public usdc;\r\n    address constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n\r\n    struct Permit {\r\n        address owner;\r\n        address spender;\r\n        uint256 value;\r\n        uint256 deadline;\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n    }\r\n\r\n    constructor(address _vault) public {\r\n        vault = Vault(_vault);\r\n        usdc = Usdc(vault.token());\r\n        require(address(usdc) == USDC); // dev: wrong vault\r\n        usdc.approve(address(vault), type(uint256).max);\r\n    }\r\n\r\n    function deposit(uint256 amount, Permit calldata permit)\r\n        public\r\n        returns (uint256)\r\n    {\r\n        usdc.permit(\r\n            permit.owner,\r\n            permit.spender,\r\n            permit.value,\r\n            permit.deadline,\r\n            permit.v,\r\n            permit.r,\r\n            permit.s\r\n        );\r\n        usdc.transferFrom(permit.owner, address(this), amount);\r\n        return vault.deposit(amount, permit.owner);\r\n    }\r\n}"}}}