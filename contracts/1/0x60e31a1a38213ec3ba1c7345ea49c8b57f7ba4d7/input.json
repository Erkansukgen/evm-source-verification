{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/ERC2665ProxiedV1.sol":{"content":"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\npragma solidity 0.6.6;\n\nimport \"./VCProxy.sol\";\nimport \"./ERC2665V1.sol\";\n\n/// @author Guillaume Gonnaud 2020\n/// @title  Cryptograph ERC2665 Mimic Smart Contract\n/// @notice The proxied  ERC2665 Mimic : this is the contract that will be instancied on the blockchain. Cast this as the logic contract to interact with it.\ncontract ERC2665ProxiedV1 is VCProxy, ERC2665HeaderV1, ERC2665StorageInternalV1 {\n\n    constructor(uint256 _version, address _vc)public\n    VCProxy(_version, _vc) //Calls the VC proxy constructor so that we know where our logic code is\n    {\n        //Self intialize (nothing)\n    }\n\n    //No other logic code as it is all proxied\n\n}\n"},"browser/ERC2665V1.sol":{"content":"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\npragma solidity ^0.6.6;\n\n/// @title ERC-2665 NFT Transfer Fee Extension\n/// @dev See https://github.com/ethereum/EIPs/issues/2665\n///  Note: the ERC-165 identifier for this interface is 0x509ffea4.\n///  Note: you must also implement the ERC-165 identifier of ERC-721, which is 0x80ac58cd.\ninterface ERC2665 /* is ERC165, is ERC721 but overide it's Design by contract specifications */ {\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\n    ///  may be created and assigned without emitting Transfer. At the time of\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    /// @dev This emits when the approved address for an NFT is changed or\n    ///  reaffirmed. The zero address indicates there is no approved address.\n    ///  When a Transfer event emits, this also indicates that the approved\n    ///  address for that NFT (if any) is reset to none.\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    ///  The operator can manage all NFTs of the owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /// @notice Count all NFTs assigned to an owner\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\n    ///  function throws for queries about the zero address.\n    /// @param _owner An address for whom to query the balance\n    /// @return The number of NFTs owned by `_owner`, possibly zero\n    function balanceOf(address _owner) external view returns (uint256);\n\n    /// @notice Find the owner of an NFT\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\n    ///  about them do throw.\n    /// @param _tokenId The identifier for an NFT\n    /// @return The address of the owner of the NFT\n    function ownerOf(uint256 _tokenId) external view returns (address);\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `msg.value` < `getTransferFee(_tokenId)`.\n    ///  If the fee is not to be paid in ETH, then token publishers SHOULD provide a way to pay the\n    ///  fee when calling this function or it's overloads, and throwing if said fee is not paid.\n    ///  Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.\n    ///  When transfer is complete, this function checks if `_to` is a smart\n    ///  contract (code size > 0). If so, it calls `onERC2665Received` on `_to`\n    ///  and throws if the return value is not\n    ///  `bytes4(keccak256(\"onERC2665Received(address,address,uint256,bytes)\"))`.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev This works identically to the other function with an extra data parameter,\n    ///  except this function just sets data to \"\".\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    ///  THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT. Throws if `msg.value` < `getTransferFee(_tokenId)`.\n    ///  If the fee is not to be paid in ETH, then token publishers SHOULD provide a way to pay the\n    ///  fee when calling this function and throw if said fee is not paid.\n    ///  Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /// @notice Change or reaffirm the approved address for an NFT\n    /// @dev The zero address indicates there is no approved address.\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\n    ///  operator of the current owner. After a successful call and if\n    ///  `msg.value == getTransferFee(_tokenId)`, then a subsequent atomic call to\n    ///  `getTransferFee(_tokenId)` would eval to 0. If the fee is not to be paid in ETH,\n    ///  then token publishers MUST provide a way to pay the fee when calling this function,\n    ///  and throw if the fee is not paid.\n    /// @param _approved The new approved NFT controller\n    /// @param _tokenId The NFT to approve\n    function approve(address _approved, uint256 _tokenId) external payable;\n\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\n    ///  all of `msg.sender`'s assets\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\n    ///  multiple operators per owner.\n    /// @param _operator Address to add to the set of authorized operators\n    /// @param _approved True if the operator is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    /// @notice Get the approved address for a single NFT\n    /// @dev Throws if `_tokenId` is not a valid NFT.\n    /// @param _tokenId The NFT to find the approved address for\n    /// @return The approved address for this NFT, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view returns (address);\n\n    /// @notice Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the NFTs\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n\n    /// @notice Query what is the transfer fee for a specific token\n    /// @dev If a call would returns 0, then any subsequent calls witht the same argument\n    /// must also return 0 until the Transfer event has been emitted.\n    /// @param _tokenId The NFT to find the Transfer Fee amount for\n    /// @return The amount of Wei that need to be sent along a call to a transfer function\n    function getTransferFee(uint256 _tokenId) external view returns (uint256);\n\n    /// @notice Query what is the transfer fee for a specific token if the fee is to be paid\n    /// @dev If a call would returns 0, then any subsequent calls with the same arguments\n    /// must also return 0 until the Transfer event has been emitted. If _currencySymbol == 'ETH',\n    /// then this function must return the same result as if `getTransferFee(uint256 _tokenId)` was called.\n    /// @param _tokenId The NFT to find the Transfer Fee amount for\n    /// @param _currencySymbol The currency in which the fee is to be paid\n    /// @return The amount of Wei that need to be sent along a call to a transfer function\n    function getTransferFee(uint256 _tokenId, string calldata _currencySymbol) external view returns (uint256);\n\n}\n\n\ninterface ERC165 {\n    /// @notice Query if a contract implements an interface\n    /// @param interfaceID The interface identifier, as specified in ERC-165\n    /// @dev Interface identification is specified in ERC-165. This function\n    ///  uses less than 30,000 gas.\n    /// @return `true` if the contract implements `interfaceID` and\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n\n/// @dev Note: the ERC-165 identifier for this interface is 0xac3cf292.\ninterface ERC2665TokenReceiver {\n    /// @notice Handle the receipt of an NFT\n    /// @dev The ERC2665 smart contract calls this function on the recipient\n    ///  after a `transfer`. This function MAY throw to revert and reject the\n    ///  transfer. Return of other than the magic value MUST result in the\n    ///  transaction being reverted.\n    ///  Note: the contract address is always the message sender.\n    /// @param _operator The address which called `safeTransferFrom` function\n    /// @param _from The address which previously owned the token\n    /// @param _tokenId The NFT identifier which is being transferred\n    /// @param _data Additional data with no specified format\n    /// @return `bytes4(keccak256(\"onERC2665Received(address,address,uint256,bytes)\"))`\n    ///  unless throwing\n    function onERC2665Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\ninterface ERC721Metadata /* is ERC721 */ {\n    /// @notice A descriptive name for a collection of NFTs in this contract\n    function name() external view returns(string memory _name);\n\n    /// @notice An abbreviated name for NFTs in this contract\n    function symbol() external view returns(string memory _symbol);\n\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n    ///  3986. The URI may point to a JSON file that conforms to the \"ERC721\n    ///  Metadata JSON Schema\".\n    function tokenURI(uint256 _tokenId) external view returns(string memory);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n///  Note: the ERC-165 identifier for this interface is 0x780e9d63.\ninterface ERC721Enumerable /* is ERC721 */ {\n    /// @notice Count NFTs tracked by this contract\n    /// @return A count of valid NFTs tracked by this contract, where each one of\n    ///  them has an assigned and queryable owner not equal to the zero address\n    function totalSupply() external view returns (uint256);\n\n    /// @notice Enumerate valid NFTs\n    /// @dev Throws if `_index` >= `totalSupply()`.\n    /// @param _index A counter less than `totalSupply()`\n    /// @return The token identifier for the `_index`th NFT,\n    ///  (sort order not specified)\n    function tokenByIndex(uint256 _index) external view returns (uint256);\n\n    /// @notice Enumerate NFTs assigned to an owner\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\n    ///  `_owner` is the zero address, representing invalid NFTs.\n    /// @param _owner An address where we are interested in NFTs owned by them\n    /// @param _index A counter less than `balanceOf(_owner)`\n    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\n    ///   (sort order not specified)\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\n}\n\ncontract ERC2665HeaderV1 {\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\n    ///  may be created and assigned without emitting Transfer. At the time of\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 indexed _tokenId);\n\n    /// @dev This emits when the approved address for an NFT is changed or\n    ///  reaffirmed. The zero address indicates there is no approved address.\n    ///  When a Transfer event emits, this also indicates that the approved\n    ///  address for that NFT (if any) is reset to none.\n    event Approval(\n        address indexed _owner,\n        address indexed _approved,\n        uint256 indexed _tokenId);\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    ///  The operator can manage all NFTs of the owner.\n    event ApprovalForAll(\n        address indexed _owner,\n        address indexed _operator,\n        bool _approved);\n}\n\ncontract ERC2665StorageInternalV1 {\n    address payable internal auctionHouse;\n    address internal indexCry;\n\n    mapping(address => bool) internal isACryptograph;\n\n    mapping(address => uint256) internal balanceOfVar;\n\n    uint256 internal totalSupplyVar;\n    mapping(uint256 => address) internal index2665ToAddress;\n\n    mapping(address => uint256[]) internal indexedOwnership; //[Owner][index] = cryptographID\n    mapping(uint256 => uint256) internal cryptographPositionInOwnershipArray; // [cryptographID] = index\n    mapping(uint256 => uint256) internal lastSoldFor; //Value last sold on the cryptograph platform\n    mapping(uint256 => uint256) internal transferFees; //Pending transfer fee\n    mapping(uint256 => bool) internal transferFeePrepaid; //Have the next transfer fee be prepaid ?\n    mapping(uint256 => address) public approvedTransferAddress; //Address allowed to Transfer a token\n    mapping(address => mapping(address => bool)) internal approvedOperator; //Approved operators mapping\n\n}\n\ncontract ERC2665StoragePublicV1 {\n    address payable public auctionHouse;\n    address public indexCry;\n\n    mapping(address => bool) public isACryptograph;\n\n    mapping(address => uint256) public balanceOfVar;\n\n    uint256 public totalSupplyVar;\n    mapping(uint256 => address) public index2665ToAddress;\n\n    mapping(address => uint256[]) public indexedOwnership; //[Owner][index] = cryptographID\n    mapping(uint256 => uint256) public cryptographPositionInOwnershipArray; // [cryptographID] = index\n    mapping(uint256 => uint256) public lastSoldFor; // Value last sold on the cryptograph platform\n    mapping(uint256 => uint256) public transferFees; // Pending transfer fee\n    mapping(uint256 => bool) public transferFeePrepaid; //Have the next transfer fee be prepaid ?\n    mapping(uint256 => address) public approvedTransferAddress; //Address allowed to Transfer a token\n    mapping(address => mapping(address => bool)) public approvedOperator; //Approved operators mapping\n}\n"},"browser/VCProxy.sol":{"content":"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\npragma solidity 0.6.6;\n\n/* Based on a variation of https://blog.gnosis.pm/solidity-delegateproxy-contracts-e09957d0f201\nThis generic proxy is gonna ask a version control smart contract for its logic code instead\nof storing the remote address himself\n*/\n\n/*\nSmart contract only containing a public array named the same as VC so that the compiler call the proper\nfunction signature in our generic proxy\n*/\ncontract VersionControlStoragePublic {\n    address[] public code;\n}\n\n\n/*\nStorage stack of a proxy contract. VCproxy inherit this, as well as ALL logic contracts associated to a proxy for storage alignment reasons.\n*/\ncontract VCProxyData {\n    address internal vc; //Version Control Smart Contract Address\n    uint256 internal version; //The index of our logic code in the Version Control array.\n}\n\n\n/*\nLogic of a proxy contract. EVERY proxied contract inherit this\n*/\ncontract VCProxy is VCProxyData {\n    constructor(uint256 _version, address _vc) public {\n        version = _version;\n        vc = _vc;\n    }\n\n    fallback () virtual external payable {\n\n        address addr = VersionControlStoragePublic(vc).code(version);\n        assembly {\n            let freememstart := mload(0x40)\n            calldatacopy(freememstart, 0, calldatasize())\n            let success := delegatecall(not(0), addr, freememstart, calldatasize(), freememstart, 0)\n            returndatacopy(freememstart, 0, returndatasize())\n            switch success\n            case 0 { revert(freememstart, returndatasize()) }\n            default { return(freememstart, returndatasize()) }\n        }\n    }\n\n    \n    /// @notice Generic catch-all function that refuse payments to prevent accidental Eth burn.\n    receive() virtual external payable{\n       require(false, \"Do not send me Eth without a reason\");\n    }\n}"}}}