{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":90},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"contracts/AnonymiceLibrary.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nlibrary AnonymiceLibrary {\r\n    string internal constant TABLE =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length == 0) return \"\";\r\n\r\n        // load the table into memory\r\n        string memory table = TABLE;\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n\r\n        // add some extra buffer at the end required for the writing\r\n        string memory result = new string(encodedLen + 32);\r\n\r\n        assembly {\r\n            // set the actual output length\r\n            mstore(result, encodedLen)\r\n\r\n            // prepare the lookup table\r\n            let tablePtr := add(table, 1)\r\n\r\n            // input ptr\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            // result ptr, jump over length\r\n            let resultPtr := add(result, 32)\r\n\r\n            // run over the input, 3 bytes at a time\r\n            for {\r\n\r\n            } lt(dataPtr, endPtr) {\r\n\r\n            } {\r\n                dataPtr := add(dataPtr, 3)\r\n\r\n                // read 3 bytes\r\n                let input := mload(dataPtr)\r\n\r\n                // write 4 characters\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n            }\r\n\r\n            // padding with '='\r\n            switch mod(mload(data), 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function parseInt(string memory _a)\r\n        internal\r\n        pure\r\n        returns (uint8 _parsedInt)\r\n    {\r\n        bytes memory bresult = bytes(_a);\r\n        uint8 mint = 0;\r\n        for (uint8 i = 0; i < bresult.length; i++) {\r\n            if (\r\n                (uint8(uint8(bresult[i])) >= 48) &&\r\n                (uint8(uint8(bresult[i])) <= 57)\r\n            ) {\r\n                mint *= 10;\r\n                mint += uint8(bresult[i]) - 48;\r\n            }\r\n        }\r\n        return mint;\r\n    }\r\n\r\n    function substring(\r\n        string memory str,\r\n        uint256 startIndex,\r\n        uint256 endIndex\r\n    ) internal pure returns (string memory) {\r\n        bytes memory strBytes = bytes(str);\r\n        bytes memory result = new bytes(endIndex - startIndex);\r\n        for (uint256 i = startIndex; i < endIndex; i++) {\r\n            result[i - startIndex] = strBytes[i];\r\n        }\r\n        return string(result);\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}"},"contracts/Filaments.sol":{"content":"// contracts/Filaments.sol\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./AnonymiceLibrary.sol\";\r\n\r\ncontract Filaments is ERC721Enumerable, Ownable {\r\n    /*\r\n  _   _   _   _   _   _   _   _   _  \r\n / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ \r\n( F | I | L | A | M | E | N | T | S )\r\n \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \r\n\r\ncredit 2 my mouse dev and 0xinuarashi for making amazing on chain project\r\nthat was used as the basis for this contract\r\n*/\r\n    using AnonymiceLibrary for uint8;\r\n\r\n    struct Trait {\r\n        string traitName;\r\n        string traitType;\r\n    }\r\n\r\n\r\n    //Mappings\r\n    mapping(uint256 => Trait[]) public traitTypes;\r\n    mapping(string => bool) hashToMinted;\r\n    mapping(uint256 => string) internal tokenIdToHash;\r\n\r\n    //uint256s\r\n    uint256 MAX_SUPPLY = 500;\r\n    uint256 SEED_NONCE = 0;\r\n    \r\n    //minting flag\r\n    bool public MINTING_LIVE = false;\r\n    uint256 public finalBlock;\r\n\r\n    //uint arrays\r\n    uint16[][10] TIERS;\r\n    \r\n    //whitelist\r\n    mapping (address => bool) public whitelist;\r\n    uint256 public numWhitelisted;\r\n\r\n    //p5js url\r\n    string p5jsUrl;\r\n    string p5jsIntegrity;\r\n    string imageUrl;\r\n    string animationUrl;\r\n\r\n    constructor() ERC721(\"Filaments\", \"FLMTS\") {\r\n        //Declare all the rarity tiers\r\n\r\n        //Palette\r\n        TIERS[0] = [100, 100, 100, 100, 100, 600, 600, 600, 600, 600, 600, 1000, 1000, 1000, 1300, 1600];\r\n        //Border\r\n        TIERS[1] = [2000, 8000];\r\n        //Number of lines\r\n        TIERS[2] = [1000, 1000, 1000, 7000];\r\n        //Thickness of lines\r\n        TIERS[3] = [100, 400, 500, 9000];\r\n        //Pixel size\r\n        TIERS[4] = [100, 9900];\r\n        //Noise scale\r\n        TIERS[5] = [100, 400, 500, 9000];\r\n        //Noise strength\r\n        TIERS[6] = [100, 400, 500, 9000];\r\n        //Left or right\r\n        TIERS[7] = [5000, 5000];\r\n        //Speed\r\n        TIERS[8] = [1000, 9000];\r\n        //Number of pre-iterations\r\n        TIERS[9] = [500, 500, 1000, 1000, 7000];\r\n        \r\n        numWhitelisted = 0;\r\n        \r\n        finalBlock = block.number + 192000;\r\n    }\r\n\r\n    /*\r\n  __  __ _     _   _             ___             _   _             \r\n |  \\/  (_)_ _| |_(_)_ _  __ _  | __|  _ _ _  __| |_(_)___ _ _  ___\r\n | |\\/| | | ' \\  _| | ' \\/ _` | | _| || | ' \\/ _|  _| / _ \\ ' \\(_-<\r\n |_|  |_|_|_||_\\__|_|_||_\\__, | |_| \\_,_|_||_\\__|\\__|_\\___/_||_/__/\r\n                         |___/                                     \r\n   */\r\n\r\n    /**\r\n     * @dev Converts a digit from 0 - 10000 into its corresponding rarity based on the given rarity tier.\r\n     * @param _randinput The input from 0 - 10000 to use for rarity gen.\r\n     * @param _rarityTier The tier to use.\r\n     */\r\n    function rarityGen(uint256 _randinput, uint8 _rarityTier)\r\n        internal\r\n        view\r\n        returns (uint8)\r\n    {\r\n        uint16 currentLowerBound = 0;\r\n        for (uint8 i = 0; i < TIERS[_rarityTier].length; i++) {\r\n            uint16 thisPercentage = TIERS[_rarityTier][i];\r\n            if (\r\n                _randinput >= currentLowerBound &&\r\n                _randinput < currentLowerBound + thisPercentage\r\n            ) return i;\r\n            currentLowerBound = currentLowerBound + thisPercentage;\r\n        }\r\n\r\n        revert();\r\n    }\r\n\r\n    /**\r\n     * @dev Generates a 11 digit hash from a tokenId, address, and random number.\r\n     * @param _t The token id to be used within the hash.\r\n     * @param _a The address to be used within the hash.\r\n     * @param _c The custom nonce to be used within the hash.\r\n     */\r\n    function hash(\r\n        uint256 _t,\r\n        address _a,\r\n        uint256 _c\r\n    ) internal returns (string memory) {\r\n        require(_c < 11);\r\n\r\n        // This will generate a 11 character string.\r\n        // The first 2 digits are the palette.\r\n        string memory currentHash = \"\";\r\n\r\n        for (uint8 i = 0; i < 10; i++) {\r\n            SEED_NONCE++;\r\n            uint16 _randinput = uint16(\r\n                uint256(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            block.timestamp,\r\n                            block.difficulty,\r\n                            _t,\r\n                            _a,\r\n                            _c,\r\n                            SEED_NONCE\r\n                        )\r\n                    )\r\n                ) % 10000\r\n            );\r\n            \r\n            if (i == 0) {\r\n                uint8 rar = rarityGen(_randinput, i);\r\n                if (rar > 9) {\r\n                    currentHash = string(\r\n                        abi.encodePacked(currentHash, rar.toString())\r\n                    );\r\n                } else {\r\n                    currentHash = string(\r\n                        abi.encodePacked(currentHash, \"0\", rar.toString())\r\n                    );\r\n                }\r\n            } else {\r\n                currentHash = string(\r\n                    abi.encodePacked(currentHash, rarityGen(_randinput, i).toString())\r\n                );\r\n            }\r\n        }\r\n\r\n        if (hashToMinted[currentHash]) return hash(_t, _a, _c + 1);\r\n\r\n        return currentHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint internal, this is to avoid code duplication.\r\n     */\r\n    function mintInternal() internal {\r\n        require(MINTING_LIVE == true || msg.sender == owner(), \"Minting is not live.\");\r\n        require(isWhitelisted(msg.sender), \"Must be whitelisted and can only mint 1\");\r\n        uint256 _totalSupply = totalSupply();\r\n        require(_totalSupply < MAX_SUPPLY);\r\n        require(block.number < finalBlock);\r\n        require(!AnonymiceLibrary.isContract(msg.sender));\r\n        \r\n        whitelist[msg.sender] = false;\r\n\r\n        uint256 thisTokenId = _totalSupply;\r\n\r\n        tokenIdToHash[thisTokenId] = hash(thisTokenId, msg.sender, 0);\r\n\r\n        hashToMinted[tokenIdToHash[thisTokenId]] = true;\r\n\r\n        _mint(msg.sender, thisTokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints new tokens.\r\n     */\r\n    function mintFilament() public {\r\n        return mintInternal();\r\n    }\r\n\r\n    /*\r\n ____     ___   ____  ___        _____  __ __  ____     __ ______  ____  ___   ____   _____\r\n|    \\   /  _] /    ||   \\      |     ||  |  ||    \\   /  ]      ||    |/   \\ |    \\ / ___/\r\n|  D  ) /  [_ |  o  ||    \\     |   __||  |  ||  _  | /  /|      | |  ||     ||  _  (   \\_ \r\n|    / |    _]|     ||  D  |    |  |_  |  |  ||  |  |/  / |_|  |_| |  ||  O  ||  |  |\\__  |\r\n|    \\ |   [_ |  _  ||     |    |   _] |  :  ||  |  /   \\_  |  |   |  ||     ||  |  |/  \\ |\r\n|  .  \\|     ||  |  ||     |    |  |   |     ||  |  \\     | |  |   |  ||     ||  |  |\\    |\r\n|__|\\_||_____||__|__||_____|    |__|    \\__,_||__|__|\\____| |__|  |____|\\___/ |__|__| \\___|\r\n                                                                                           \r\n*/\r\n    \r\n    /**\r\n     * @dev Helper function to see if whitelisted\r\n     */\r\n    function isWhitelisted(address _wallet) public view returns (bool) {\r\n        if (_wallet == owner()) {\r\n            return true; // Owner\r\n        }\r\n        \r\n        return whitelist[_wallet];\r\n    }\r\n\r\n    /**\r\n     * @dev Hash to HTML function\r\n     */\r\n    function hashToHTML(string memory _hash, uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        string memory htmlString = string(\r\n            abi.encodePacked(\r\n                'data:text/html,%3Chtml%3E%3Chead%3E%3Cscript%20src%3D%22',\r\n                p5jsUrl,\r\n                '%22%20integrity%3D%22',\r\n                p5jsIntegrity,\r\n                '%22%20crossorigin%3D%22anonymous%22%3E%3C%2Fscript%3E%3C%2Fhead%3E%3Cbody%3E%3Cscript%3Evar%20tokenId%3D',\r\n                AnonymiceLibrary.toString(_tokenId),\r\n                '%3Bvar%20hash%3D%22',\r\n                _hash\r\n            )\r\n        );\r\n\r\n        htmlString = string(\r\n            abi.encodePacked(\r\n                htmlString,\r\n                '%22%3Bfunction%20sdfsd%28t%29%7Breturn%20function%28%29%7Bvar%20e%3Dt%2B%3D1831565813%3Breturn%20e%3DMath.imul%28e%5Ee%3E%3E%3E15%2C1%7Ce%29%2C%28%28%28e%5E%3De%2BMath.imul%28e%5Ee%3E%3E%3E7%2C61%7Ce%29%29%5Ee%3E%3E%3E14%29%3E%3E%3E0%29%2F4294967296%7D%7Dfunction%20wraw%28t%29%7Bvar%20e%2Cr%3D%5B%5D%3Bfor%28e%3D0%3Be%3Ct.length%3Be%2B%2B%29r%5Be%5D%3Dt%5Be%5D.w1%2B%28r%5Be-1%5D%7C%7C0%29%3Bvar%20i%3Drand%28%29%2Ar%5Br.length-1%5D%3Bfor%28e%3D0%3Be%3Cr.length%26%26%21%28r%5Be%5D%3Ei%29%3Be%2B%2B%29%3Breturn%20t%5Be%5D%7Dfunction%20wrnd%28t%29%7Breturn%20wraw%28t%29.a1%7Dfunction%20gRI%28t%29%7Breturn%20Math.floor%28rand%28%29%2At%29%7Dfunction%20traitRaw%28t%2Ce%29%7Breturn%20e%3E%3Dt.length%3Ft%5Bt.length-1%5D%3At%5Be%5D%7Dfunction%20trait%28t%2Ce%29%7Breturn%20traitRaw%28t%2Ce%29.a1%7Dvar%20colors%2Cbgc%2Cc%2CdidStart%2Cimg%2Cwd%2Chei%2Cseed%2Crand%2Ctz0%2Ctz1%2Ctz2%2Ctz3%2Ctz4%2Ctz5%2Ctz6%2Ctz7%2Ctz8%2Ctz9%2Ctz10%2Cborder%2Cnum%2ClnThk%2CpxSz%2CnsScl%2CnsStr%2ClOr%2CnnUniS%2CisSUni%2Cspeed%2Czz%2Cptks%2CrunCount%2Ccanvas%2ColdWd%2ColdHei%3Bfunction%20hashToTraits%28t%29%7Bt%26%26%28tz0%3Dt.charAt%280%29%2Ctz1%3Dt.charAt%281%29%2Ctz2%3Dt.charAt%282%29%2Ctz3%3Dt.charAt%283%29%2Ctz4%3Dt.charAt%284%29%2Ctz5%3Dt.charAt%285%29%2Ctz6%3Dt.charAt%286%29%2Ctz7%3Dt.charAt%287%29%2Ctz8%3Dt.charAt%288%29%2Ctz9%3Dt.charAt%289%29%2Ctz10%3Dt.charAt%2810%29%2Ctz1%3DNumber%28tz0.toString%28%29%2Btz1.toString%28%29%29%29%7Dfunction%20setup%28%29%7Bseed%3DtokenId%2Ctz0%3D0%2Ctz1%3D7%2Ctz2%3D7%2Ctz3%3D7%2Ctz4%3D7%2Ctz5%3D7%2Ctz6%3D7%2Ctz7%3D7%2Ctz8%3D7%2Ctz9%3D7%2Ctz10%3D7%2Ctz1%3DNumber%28tz0.toString%28%29%2Btz1.toString%28%29%29%2ChashToTraits%28hash%29%2Crand%3Dsdfsd%28seed%29%2Cborder%3D0%3D%3Dtz2%3F20%3A0%3Bnum%3Dtrait%28%5B%7Ba1%3A1e3%2Cw1%3A10%7D%2C%7Ba1%3A500%2Cw1%3A10%7D%2C%7Ba1%3A250%2Cw1%3A10%7D%2C%7Ba1%3A100%2Cw1%3A70%7D%5D%2Ctz3%29%3BlnThk%3Dtrait%28%5B%7Ba1%3A40%2Cw1%3A1%7D%2C%7Ba1%3A30%2Cw1%3A4%7D%2C%7Ba1%3A10%2Cw1%3A5%7D%2C%7Ba1%3A20%2Cw1%3A90%7D%5D%2Ctz4%29%2CpxSz%3D0%3D%3Dtz5%3F20%3A10%3BnsScl%3Dtrait%28%5B%7Ba1%3A1e4%2Cw1%3A1%7D%2C%7Ba1%3A250%2Cw1%3A4%7D%2C%7Ba1%3A50%2Cw1%3A5%7D%2C%7Ba1%3A500%2Cw1%3A90%7D%5D%2Ctz6%29%3BnsStr%3Dtrait%28%5B%7Ba1%3A10%2Cw1%3A1%7D%2C%7Ba1%3A5%2Cw1%3A4%7D%2C%7Ba1%3A2%2Cw1%3A5%7D%2C%7Ba1%3A1%2Cw1%3A90%7D%5D%2Ctz7%29%2ClOr%3D0%3D%3Dtz8%3F-1%3A1%2CnnUniS%3Dfunction%28%29%7Breturn%20lOr%2A%283%2BgRI%283%29%29%7D%2Cspeed%3D%28isSUni%3D1%3D%3Dtz9%29%3F10%2AlOr%3AnnUniS%28%29%3Bzz%3Dtrait%28%5B%7Ba1%3A0%2Cw1%3A5%7D%2C%7Ba1%3A250%2Cw1%3A5%7D%2C%7Ba1%3A300%2Cw1%3A10%7D%2C%7Ba1%3A400%2Cw1%3A10%7D%2C%7Ba1%3A500%2Cw1%3A70%7D%5D%2Ctz10%29%2Cptks%3D%5Bnum%5D%2CrunCount%3D0%2Cwd%3DMath.min%28800%2CwindowWidth%29%2Chei%3DMath.min%28960%2CwindowHeight%29%2Cwd%3DMath.ceil%28wd%2FpxSz%29%2ApxSz%2Chei%3DMath.ceil%28hei%2FpxSz%29%2ApxSz%2CdidStart%3D%211%2CnoiseSeed%28seed%29%3Bvar%20t%3DtraitRaw%28%5B%7Ba1%3A%5B%28c%3Dcolor%29%28%22%23ffa4d5%22%29%2Cc%28%22%2383ffc1%22%29%2Cc%28%22%23ffe780%22%29%2Cc%28%22%2399e2ff%22%29%5D%2CbgColor%3Ac%28%22%23ffffff%22%29%2Cw1%3A1%7D%2C%7Ba1%3A%5Bc%28%22%23ffffff%22%29%2Cc%28%22%23000000%22%29%5D%2Cw1%3A1%7D%2C%7Ba1%3A%5Bc%28%22%23305e90%22%29%2Cc%28%22%23db4e54%22%29%2Cc%28%22%234f3c2d%22%29%2Cc%28%22%23ffbb12%22%29%2Cc%28%22%23389894%22%29%2Cc%28%22%23e0d8c5%22%29%2Cc%28%22%23c7e3d4%22%29%5D%2Cw1%3A1%2CbgColor%3Ac%28%22%23ffffff%22%29%7D%2C%7Ba1%3A%5Bc%28%22%230827f5%22%29%2Cc%28%22%233751f7%22%29%2Cc%28%22%238493fa%22%29%5D%2Cw1%3A1%7D%2C%7Ba1%3A%5Bc%28%22%2300c1ff%22%29%2Cc%28%22%230023ff%22%29%2Cc%28%22%237215ff%22%29%2Cc%28%22%23ff03fc%22%29%2Cc%28%22%23ff000a%22%29%2Cc%28%22%23ff8700%22%29%2Cc%28%22%23fff700%22%29%2Cc%28%22%235fff00%22%29%2Cc%28%22%2300ff2e%22%29%5D%2Cw1%3A1%2CbgColor%3Ac%28%22%23ffffff%22%29%7D%2C%7Ba1%3A%5Bc%28%22%2300e000%22%29%2Cc%28%22%23005900%22%29%2Cc%28%22%23000000%22%29%5D%2Cw1%3A5%7D%2C%7Ba1%3A%5Bc%28%22%239d0208%22%29%2Cc%28%22%23d00000%22%29%2Cc%28%22%23e85d04%22%29%2Cc%28%22%23faa307%22%29%5D%2Cw1%3A5%7D%2C%7Ba1%3A%5Bc%28%22%23fff69f%22%29%2Cc%28%22%23fdd870%22%29%2Cc%28%22%23d0902f%22%29%2Cc%28%22%23a15501%22%29%2Cc%28%22%23351409%22%29%5D%2Cw1%3A5%7D%2C%7Ba1%3A%5Bc%28%22%23a0ffe3%22%29%2Cc%28%22%2365dc98%22%29%2Cc%28%22%238d8980%22%29%2Cc%28%22%23575267%22%29%2Cc%28%22%23222035%22%29%5D%2Cw1%3A5%7D%2C%7Ba1%3A%5Bc%28%22%230099ff%22%29%2Cc%28%22%235655dd%22%29%2Cc%28%22%238822ff%22%29%2Cc%28%22%23aa99ff%22%29%5D%2Cw1%3A5%7D%2C%7Ba1%3A%5Bc%28%22%237700a6%22%29%2Cc%28%22%23fe00fe%22%29%2Cc%28%22%23defe47%22%29%2Cc%28%22%2300b3fe%22%29%2Cc%28%22%230016ee%22%29%5D%2Cw1%3A5%7D%2C%7Ba1%3A%5Bc%28%22%23c4ffff%22%29%2Cc%28%22%2308deea%22%29%2Cc%28%22%231261d1%22%29%5D%2Cw1%3A10%7D%2C%7Ba1%3A%5Bc%28%22%23ff124f%22%29%2Cc%28%22%23ff00a0%22%29%2Cc%28%22%23fe75fe%22%29%2Cc%28%22%237a04eb%22%29%2Cc%28%22%23120458%22%29%5D%2Cw1%3A10%7D%2C%7Ba1%3A%5Bc%28%22%23111111%22%29%2Cc%28%22%23222222%22%29%2Cc%28%22%23333333%22%29%2Cc%28%22%23444444%22%29%2Cc%28%22%23666666%22%29%5D%2Cw1%3A10%7D%2C%7Ba1%3A%5Bc%28%22%23f887ff%22%29%2Cc%28%22%23de004e%22%29%2Cc%28%22%23860029%22%29%2Cc%28%22%23321450%22%29%2Cc%28%22%2329132e%22%29%5D%2Cw1%3A15%7D%2C%7Ba1%3A%5Bc%28%22%238386f5%22%29%2Cc%28%22%233d43b4%22%29%2Cc%28%22%23041348%22%29%2Cc%28%22%23083e12%22%29%2Cc%28%22%231afe49%22%29%5D%2Cw1%3A20%7D%5D%2Ctz1%29%3Bcolors%3Dt.a1%2Cbgc%3Dc%28%22%23000000%22%29%2Ct.bgColor%26%26%28bgc%3Dt.bgColor%29%2C%28canvas%3DcreateCanvas%28wd%2Chei%29%29.doubleClicked%28toggleFullscreen%29%2CnoStroke%28%29%3Bfor%28let%20t%3D0%3Bt%3Cnum%3Bt%2B%2B%29%7Bvar%20e%3DcreateVector%28border%2BgRI%281.2%2A%28width-2%2Aborder%29%29%2Cborder%2BgRI%28height-2%2Aborder%29%2C2%29%2Cr%3DcreateVector%28cos%280%29%2Csin%280%29%29%3Bspeed%3DisSUni%3Fspeed%3AnnUniS%28%29%2Cptks%5Bt%5D%3Dnew%20Ptk%28e%2Cr%2Cspeed%29%7DframeRate%2810%29%7Dfunction%20remake%28t%2Ce%29%7Bt%3DMath.ceil%28t%2FpxSz%29%2ApxSz%2Ce%3DMath.ceil%28e%2FpxSz%29%2ApxSz%2Cwd%3Dt%2Chei%3De%2Cwidth%3Dt%2Cheight%3De%2C%28img%3DcreateImage%28Math.floor%28wd%2FpxSz%29%2CMath.floor%28hei%2FpxSz%29%29%29.loadPixels%28%29%2CresizeCanvas%28t%2Ce%29%3Bfor%28let%20t%3D0%3Bt%3Czz%3Bt%2B%2B%29%7Bfor%28let%20t%3D0%3Bt%3Cptks.length%3Bt%2B%2B%29ptks%5Bt%5D.run%28%29%3BrunCount%2B%2B%7D%7Dfunction%20toggleFullscreen%28%29%7Blet%20t%3Ddocument.querySelector%28%22canvas%22%29%3Bdocument.fullscreenElement%3Fdocument.exitFullscreen%28%29%3A%28oldWd%3Dwd%2ColdHei%3Dhei%2Cremake%28800%2C960%29%2Ct.requestFullscreen%28%29.catch%28t%3D%3E%7Balert%28%60Error%3A%20%24%7Bt.message%7D%20%28%24%7Bt.name%7D%29%60%29%7D%29%29%7Dfunction%20keyPressed%28%29%7Breturn%2070%3D%3D%3DkeyCode%3F%28remake%281500%2C500%29%2C%211%29%3A88%3D%3D%3DkeyCode%3F%28remake%28prompt%28%22Enter%20width%20in%20pixels%22%2C%22500%22%29%2Cprompt%28%22Height%3F%22%2C%22500%22%29%29%2C%211%29%3A79%3D%3D%3DkeyCode%3F%28toggleFullscreen%28%29%2C%211%29%3Avoid%200%7Dfunction%20draw%28%29%7Bif%28%21didStart%29%7Bfor%28let%20t%3D0%3Bt%3Czz%3Bt%2B%2B%29%7Bfor%28let%20t%3D0%3Bt%3Cptks.length%3Bt%2B%2B%29ptks%5Bt%5D.run%28%29%3BrunCount%2B%2B%7DdidStart%3D%210%7Dfor%28let%20t%3D0%3Bt%3Cptks.length%3Bt%2B%2B%29ptks%5Bt%5D.run%28%29%3BrunCount%2B%2B%2C%28img%3DcreateImage%28wd%2FpxSz%2Chei%2FpxSz%29%29.loadPixels%28%29%3Bfor%28var%20t%3D0%3Bt%3Cimg.height%3Bt%2B%2B%29for%28var%20e%3D0%3Be%3Cimg.width%3Be%2B%2B%29%7Blet%20r%3Dget%28e%2ApxSz%2Ct%2ApxSz%29%2Ci%3D4%2A%28e%2Bt%2Aimg.width%29%3Bimg.pixels%5Bi%5D%3Dred%28r%29%2Cimg.pixels%5Bi%2B1%5D%3Dgreen%28r%29%2Cimg.pixels%5Bi%2B2%5D%3Dblue%28r%29%2Cimg.pixels%5Bi%2B3%5D%3Dalpha%28r%29%7Dfill%28bgc%29%2Crect%280%2C0%2Cwidth%2Cheight%29%2Cimg.updatePixels%28%29%2CnoSmooth%28%29%2Cimage%28img%2C0%2C0%2Cwidth%2Cheight%29%2Cfill%28bgc%29%2Crect%280%2C0%2Cborder%2Cheight%29%2Crect%280%2C0%2Cwidth%2Cborder%29%2Crect%28width-border%2C0%2Cborder%2Cheight%29%2Crect%280%2Cheight-border%2Cwidth%2Cborder%29%7Dclass%20Ptk%7Bconstructor%28t%2Ce%2Cr%29%7Bthis.loc%3Dt%2Cthis.dir%3De%2Cthis.speed%3Dr%2Cthis.c%3Dcolors%5BgRI%28colors.length%29%5D%2Cthis.lineSize%3DlnThk%7Drun%28%29%7Bthis.move%28%29%2Cthis.checkEdges%28%29%2Cthis.update%28%29%7Dmove%28%29%7Blet%20t%3Dnoise%28this.loc.x%2FnsScl%2Cthis.loc.y%2FnsScl%2CrunCount%2FnsScl%29%2ATWO_PI%2AnsStr%3Bthis.dir.x%3Dcos%28t%29%2Cthis.dir.y%3Dsin%28t%29%3Bvar%20e%3Dthis.dir.copy%28%29%3Be.mult%281%2Athis.speed%29%2Cthis.loc.add%28e%29%7DcheckEdges%28%29%7B%28this.loc.x%3Cborder%7C%7Cthis.loc.x%3Ewidth-border%7C%7Cthis.loc.y%3Cborder%7C%7Cthis.loc.y%3Eheight-border%29%26%26%28this.loc.x%3Dborder%2BgRI%28width-2%2Aborder%29%2Cthis.loc.y%3Dborder%2BgRI%28height-2%2Aborder%29%29%7Dupdate%28%29%7Bfill%28this.c%29%2Cellipse%28this.loc.x%2Cthis.loc.y%2Cthis.lineSize%2Cthis.lineSize%29%7D%7D%3C%2Fscript%3E%3C%2Fbody%3E%3C%2Fhtml%3E'\r\n            )\r\n        );\r\n\r\n        return htmlString;\r\n    }\r\n\r\n    /**\r\n     * @dev Hash to metadata function\r\n     */\r\n    function hashToMetadata(string memory _hash)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        string memory metadataString;\r\n        \r\n        uint8 paletteTraitIndex = AnonymiceLibrary.parseInt(\r\n            AnonymiceLibrary.substring(_hash, 0, 2)\r\n        );\r\n\r\n        metadataString = string(\r\n            abi.encodePacked(\r\n                metadataString,\r\n                '{\"trait_type\":\"',\r\n                traitTypes[0][paletteTraitIndex].traitType,\r\n                '\",\"value\":\"',\r\n                traitTypes[0][paletteTraitIndex].traitName,\r\n                '\"},'\r\n            )\r\n        );\r\n\r\n        for (uint8 i = 2; i < 11; i++) {\r\n            uint8 thisTraitIndex = AnonymiceLibrary.parseInt(\r\n                AnonymiceLibrary.substring(_hash, i, i + 1)\r\n            );\r\n\r\n            metadataString = string(\r\n                abi.encodePacked(\r\n                    metadataString,\r\n                    '{\"trait_type\":\"',\r\n                    traitTypes[i][thisTraitIndex].traitType,\r\n                    '\",\"value\":\"',\r\n                    traitTypes[i][thisTraitIndex].traitName,\r\n                    '\"}'\r\n                )\r\n            );\r\n\r\n            if (i != 10)\r\n                metadataString = string(abi.encodePacked(metadataString, \",\"));\r\n        }\r\n\r\n        return string(abi.encodePacked(\"[\", metadataString, \"]\"));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the SVG and metadata for a token Id\r\n     * @param _tokenId The tokenId to return the SVG and metadata for.\r\n     */\r\n    function tokenURI(uint256 _tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(_tokenId));\r\n\r\n        string memory tokenHash = _tokenIdToHash(_tokenId);\r\n        \r\n        string memory description = '\", \"description\": \"Filaments is a collection of 500 unique pieces of generative pixel art. Metadata and art is mirrored permanently on-chain. Double click to full screen. Press F then right-click and save as a banner.\",';\r\n        \r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    \"data:application/json;base64,\",\r\n                    AnonymiceLibrary.encode(\r\n                        bytes(\r\n                            string(\r\n                                abi.encodePacked(\r\n                                    '{\"name\": \"Filaments #',\r\n                                    AnonymiceLibrary.toString(_tokenId),\r\n                                    description,\r\n                                    '\"animation_url\": \"',\r\n                                    animationUrl,\r\n                                    AnonymiceLibrary.toString(_tokenId),\r\n                                    '\",\"image\":\"',\r\n                                    imageUrl,\r\n                                    AnonymiceLibrary.toString(_tokenId),\r\n                                    '\",\"attributes\":',\r\n                                    hashToMetadata(tokenHash),\r\n                                    \"}\"\r\n                                )\r\n                            )\r\n                        )\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a hash for a given tokenId\r\n     * @param _tokenId The tokenId to return the hash for.\r\n     */\r\n    function _tokenIdToHash(uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        string memory tokenHash = tokenIdToHash[_tokenId];\r\n\r\n        return tokenHash;\r\n    }\r\n\r\n    /*\r\n\r\n  ___   __    __  ____     ___  ____       _____  __ __  ____     __ ______  ____  ___   ____   _____\r\n /   \\ |  |__|  ||    \\   /  _]|    \\     |     ||  |  ||    \\   /  ]      ||    |/   \\ |    \\ / ___/\r\n|     ||  |  |  ||  _  | /  [_ |  D  )    |   __||  |  ||  _  | /  /|      | |  ||     ||  _  (   \\_ \r\n|  O  ||  |  |  ||  |  ||    _]|    /     |  |_  |  |  ||  |  |/  / |_|  |_| |  ||  O  ||  |  |\\__  |\r\n|     ||  `  '  ||  |  ||   [_ |    \\     |   _] |  :  ||  |  /   \\_  |  |   |  ||     ||  |  |/  \\ |\r\n|     | \\      / |  |  ||     ||  .  \\    |  |   |     ||  |  \\     | |  |   |  ||     ||  |  |\\    |\r\n \\___/   \\_/\\_/  |__|__||_____||__|\\_|    |__|    \\__,_||__|__|\\____| |__|  |____|\\___/ |__|__| \\___|\r\n                                                                                                     \r\n\r\n\r\n    */\r\n    \r\n    /**\r\n     * @dev Clears the traits.\r\n     */\r\n    function clearTraits() public onlyOwner {\r\n        for (uint256 i = 0; i < 11; i++) {\r\n            delete traitTypes[i];\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Batch adds addresses to whitelist\r\n     */\r\n    function batchWhitelist(address[] memory _users) public onlyOwner {\r\n        uint size = _users.length;\r\n        \r\n        for (uint256 i=0; i< size; i++){\r\n          address user = _users[i];\r\n          whitelist[user] = true;\r\n        }\r\n        \r\n        numWhitelisted += _users.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a trait type\r\n     * @param _traitTypeIndex The trait type index\r\n     * @param traits Array of traits to add\r\n     */\r\n\r\n    function addTraitType(uint256 _traitTypeIndex, Trait[] memory traits)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < traits.length; i++) {\r\n            traitTypes[_traitTypeIndex].push(\r\n                Trait(\r\n                    traits[i].traitName,\r\n                    traits[i].traitType\r\n                )\r\n            );\r\n        }\r\n\r\n        return;\r\n    }\r\n    \r\n    /**\r\n     * @dev Mint for burn\r\n     */\r\n    function ownerMintForBurn() public onlyOwner {\r\n        uint256 _totalSupply = totalSupply();\r\n        require(_totalSupply < MAX_SUPPLY);\r\n        require(!AnonymiceLibrary.isContract(msg.sender));\r\n\r\n        uint256 thisTokenId = _totalSupply;\r\n\r\n        tokenIdToHash[thisTokenId] = hash(thisTokenId, msg.sender, 0);\r\n\r\n        hashToMinted[tokenIdToHash[thisTokenId]] = true;\r\n\r\n        _mint(0x000000000000000000000000000000000000dEaD, thisTokenId);\r\n    }\r\n    \r\n    function flipMintingSwitch() public onlyOwner {\r\n        MINTING_LIVE = !MINTING_LIVE;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the p5js url\r\n     * @param _p5jsUrl The address of the p5js file hosted on CDN\r\n     */\r\n\r\n    function setJsAddress(string memory _p5jsUrl) public onlyOwner {\r\n        p5jsUrl = _p5jsUrl;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the p5js resource integrity\r\n     * @param _p5jsIntegrity The hash of the p5js file (to protect w subresource integrity)\r\n     */\r\n\r\n    function setJsIntegrity(string memory _p5jsIntegrity) public onlyOwner {\r\n        p5jsIntegrity = _p5jsIntegrity;\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets the base image url\r\n     * @param _imageUrl The base url for image field\r\n     */\r\n\r\n    function setImageUrl(string memory _imageUrl) public onlyOwner {\r\n        imageUrl = _imageUrl;\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets the base animation url\r\n     * @param _animationUrl The base url for animations\r\n     */\r\n\r\n    function setAnimationUrl(string memory _animationUrl) public onlyOwner {\r\n        animationUrl = _animationUrl;\r\n    }\r\n}"}}}