{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/MisoAuction.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.7.3;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\nimport \"./Rescue.sol\";\r\n\r\ninterface IDutchAuction {\r\n  function commitTokens(\r\n    uint256 _amount,\r\n    bool readAndAgreedToMarketParticipationAgreement\r\n  ) external;\r\n\r\n  function calculateCommitment(uint256 _commitment)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function commitTokensFrom(\r\n    address _from,\r\n    uint256 _amount,\r\n    bool readAndAgreedToMarketParticipationAgreement\r\n  ) external;\r\n}\r\n\r\ncontract MisoAuction is RescueBase {\r\n  constructor() {\r\n    _owner = msg.sender;\r\n  }\r\n\r\n  function approve(address _auction, address _token) public onlyOwner {\r\n    IERC20(_token).approve(_auction, uint256(-1));\r\n  }\r\n\r\n  function runWithPay(address _auction, uint256 amount) public payable {\r\n    uint256 commit = IDutchAuction(_auction).calculateCommitment(\r\n      uint256(-1) / 100\r\n    );\r\n    if (amount > commit) {\r\n      amount = commit;\r\n    }\r\n    require(amount > 0);\r\n    IDutchAuction(_auction).commitTokensFrom(_owner, amount, true);\r\n    block.coinbase.call{value: msg.value}(new bytes(0));\r\n  }\r\n\r\n  function run(address _auction, uint256 amount) public {\r\n    uint256 commit = IDutchAuction(_auction).calculateCommitment(\r\n      uint256(-1) / 100\r\n    );\r\n    if (amount > commit) {\r\n      amount = commit;\r\n    }\r\n    require(amount > 0);\r\n    IDutchAuction(_auction).commitTokensFrom(_owner, amount, true);\r\n  }\r\n}"
    },
    "contracts/Rescue.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.7.3;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract RescueBase {\r\n  address public _owner;\r\n\r\n  modifier onlyOwner() {\r\n    require(_owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  // Emergency function: In case any ETH get stuck in the contract unintentionally\r\n  // Only owner can retrieve the asset balance to a recipient address\r\n  function rescueETH(address recipient) external onlyOwner {\r\n    _transferEth(recipient, address(this).balance);\r\n  }\r\n\r\n  // Emergency function: In case any ERC20 tokens get stuck in the contract unintentionally\r\n  // Only owner can retrieve the asset balance to a recipient address\r\n  function rescueERC20(address asset, address recipient) external onlyOwner {\r\n    IERC20(asset).transfer(recipient, IERC20(asset).balanceOf(address(this)));\r\n  }\r\n\r\n  function _transferEth(address _to, uint256 _amount) internal {\r\n    (bool success, ) = _to.call{ value: _amount }(\"\");\r\n    require(success, \"Error: Eth transfer failed\");\r\n  }\r\n}"
    }
  }
}