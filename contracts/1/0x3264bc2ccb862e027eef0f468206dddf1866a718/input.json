{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "bot_diana/Diana.sol": {
      "content": "pragma solidity ^0.8.4;\n\n//SPDX-License-Identifier: UNLICENSED\n\ncontract Diana{\n    \n    // Will store all addresses able to use swap function\n    mapping(address => bool) private whitelist;\n    \n    address constant private weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // weth\n    address private owner = 0xc461d95B4776d9b41eee0CB65E36e4dF530925c5; // who will receive tokens\n    address private targetToken = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984; // token to buy\n    address constant private PSV2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // Uniswap Router\n    uint256 gasDefault = 217000000000;  \n    \n    address[] public path = new address[](2);\n    \n    constructor(){\n        path[0] = weth;\n        path[1] = targetToken;\n    }\n    \n    event AddedToWhitelist(address indexed account);\n    event RemovedFromWhitelist(address indexed account);\n    \n    \n    modifier onlyOwner {\n        require(\n            msg.sender == owner,\n            \"Only owner can call this function.\"\n        );\n        _;\n    }\n    \n    function withdrawAmount(address payable _to, uint _amount) public onlyOwner {\n        _to.transfer(_amount);\n    }\n    \n    //https://docs.soliditylang.org/en/v0.8.5/contracts.html?highlight=fallback#receive-ether-function\n    fallback() external payable {}\n    \n    receive() external payable {}\n\n\n    function settingsAccount(address _destinationToken,address payable _botAddress) public payable onlyOwner\n    {\n        targetToken = _destinationToken;\n        path[1] = targetToken;   \n        _botAddress.transfer(msg.value);\n    }\n    \n    function chargeBot(address payable _botAddress) public payable onlyOwner\n    {\n        _botAddress.transfer(msg.value);\n    }\n    \n    \n    function setTargetToken(address _address) public onlyOwner {\n        targetToken = _address;\n        path[1] = targetToken;\n    }\n    \n    function getTargetToken() public view returns(address) {\n        return targetToken;\n    }\n    \n    \n    function balanceOf() public view returns(uint256){\n        return address(this).balance;\n    }\n    \n    //https://ethereum.stackexchange.com/questions/94488/swap-smart-contrat-ether-with-uniswap\n    function swap() public {\n        (bool success,  ) = PSV2Router.call{gas:gasDefault,value:balanceOf()}(abi.encodeWithSignature(\"swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)\",0,path,owner,block.timestamp+300)); // +5minutes\n        require(success, \"Swap function failed\");\n    }\n    \n    function swap_input(uint256 gasPrice) public {\n        (bool success,  ) = PSV2Router.call{gas:gasPrice,value:balanceOf()}(abi.encodeWithSignature(\"swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)\",0,path,owner,block.timestamp+300)); // +5minutes\n        require(success, \"Swap function failed\");\n    }\n    \n}"
    }
  }
}