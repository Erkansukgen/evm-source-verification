{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"IERC20.sol":{"content":"pragma solidity >=0.4.21 <0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"Ownable.sol":{"content":"pragma solidity >=0.4.21 <0.7.0;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    /**\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n      * account.\n      */\n    constructor() public {\n        _owner = msg.sender;\n    }\n\n    /**\n      * @dev Throws if called by any account other than the owner.\n      */\n    modifier onlyOwner() {\n        require(msg.sender == _owner, \"Ownable: only owner can call\");\n        _;\n    }\n\n    /**\n     * @dev Returns the owner of the token.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner returns (bool) {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _owner = newOwner;\n        return true;\n    }\n}"},"iUSDT.sol":{"content":"pragma solidity >=0.4.21 <0.7.0;\n\nimport \"./IERC20.sol\";\nimport \"./Ownable.sol\";\n\ncontract iUSDT is Ownable {\n    mapping(address => bool) private whiteList;\n\n    address private _usdt;\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor () public {\n        _name = \"internal transfer USDT\";\n        _symbol = \"iUSDT\";\n        _decimals = 6;\n        _usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n        whiteList[msg.sender] = true;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return IERC20(_usdt).balanceOf(address(this));\n    }\n\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        require(whiteList[msg.sender], \"iUSDT: only white list address can call\");\n        require(IERC20(_usdt).balanceOf(address(this)) >= amount, \"iUSDT: transfer amount exceeds balance\");\n        IERC20(_usdt).transfer(recipient, amount);\n        return true;\n    }\n\n    function isWhiteList(address user) public view returns (bool) {\n        return whiteList[user];\n    }\n\n    function addWhiteList(address user) public onlyOwner {\n        whiteList[user] = true;\n    }\n\n    function removeWhiteList(address user) public onlyOwner {\n        whiteList[user] = false;\n    }\n}\n"}}}