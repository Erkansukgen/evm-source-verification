{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":1000},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/OwnixMarket.sol":{"content":"// File: @openzeppelin/contracts/utils/Context.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: @openzeppelin/contracts/security/Pausable.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n\n// File: contracts/OwnixNFT/IOwnixERC1155.sol\n\n\n\npragma solidity =0.8.7;\n\n\n\n/**\n * @title Interface for contracts conforming to Ownix ERC155\n */\ninterface IOwnixERC1155 is IERC1155 {\n  function getFirstTimeOwner(uint256 _tokenId) external view returns (address);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/OwnixToken/IOwnixERC20.sol\n\n\n\npragma solidity =0.8.7;\n\n\n/**\n * @title Interface for contracts conforming to Ownix ERC-20\n */\ninterface IOwnixERC20 is IERC20 {\n  function mint(address account, uint256 amount) external;\n}\n\n// File: contracts/OwnixMarket/IOwnixMarket.sol\n\n\n\npragma solidity =0.8.7;\n\n\n\n\ninterface IOwnixMarket {\n  struct Auction {\n    // nft owner address\n    address nftOwner;\n    // ERC1155 address\n    IOwnixERC1155 nft;\n    // ERC1155 token id\n    uint256 tokenId;\n    // Amount\n    uint256 amount;\n    // NFT Index\n    uint32 index;\n    // Reserve price for the list in wei\n    uint256 reservePrice;\n    // List duration\n    uint32 duration;\n    // Time when this list expires at\n    uint256 expiresAt;\n    // Bidder address\n    address bidder;\n    // Price for the bid in wei\n    uint256 bidPrice;\n    // Time when this bid create at\n    uint256 bidCreatedAt;\n  }\n\n  // EVENTS\n  event NFTListed(\n    address indexed _owner,\n    IOwnixERC1155 indexed _nft,\n    uint256 indexed _tokenId,\n    uint256 _amount,\n    uint256 _index,\n    uint256 _reservePrice,\n    uint256 _expiresAt\n  );\n\n  event NFTUnlisted(\n    address indexed _owner,\n    IOwnixERC1155 indexed _nft,\n    uint256 indexed _tokenId,\n    uint256 _amount,\n    uint256 _index\n  );\n\n  event ReservePriceChanged(\n    address indexed _owner,\n    IOwnixERC1155 indexed _nft,\n    uint256 indexed _tokenId,\n    uint256 _amount,\n    uint32 _index,\n    uint256 _reservePrice\n  );\n\n  event BidCreated(\n    IOwnixERC1155 indexed _nft,\n    uint256 indexed _tokenId,\n    uint256 _amount,\n    uint32 _index,\n    address indexed _bidder,\n    uint256 _price,\n    uint256 bidCreatedAt\n  );\n\n  event AuctionExtended(\n    address indexed _owner,\n    IOwnixERC1155 indexed _nft,\n    uint256 indexed _tokenId,\n    uint256 _amount,\n    uint32 _index,\n    uint256 _reservePrice,\n    uint256 _expiresAt\n  );\n\n  event AuctionStarted(\n    address _owner,\n    IOwnixERC1155 _nft,\n    uint256 _tokenId,\n    uint256 _amount,\n    uint32 _index,\n    uint256 _reservePrice,\n    uint256 _expiresAt\n  );\n\n  event BidAccepted(\n    IOwnixERC1155 indexed _nft,\n    uint256 indexed _tokenId,\n    uint256 _amount,\n    uint256 _index,\n    address _bidder,\n    address indexed _seller,\n    uint256 _price\n  );\n\n  event InflationPerMillionChanged(uint256 _inflationFeePerMillion);\n  event BidFeePerMillionChanged(uint256 _bidFeePerMillion);\n  event OwnerSharePerMillionChanged(uint256 _ownerSharePerMillion);\n  event BidMinimumRaisePerMillionChanged(uint256 _bidMinimumRaisePerMillion);\n  event BidMinimumRaiseAmountChanged(uint256 _bidMinimumRaiseAmount);\n  event RoyaltiesPerMillionChanged(uint256 _royaltiesPerMillion);\n  event MinimumAuctionDurationChanged(uint256 _minimumAuctionDuration);\n  event FeeCollectorChanged(address _feeCollector);\n  event InflationCollectorChanged(address _inflationCollector);\n\n  /**\n   * @dev List NFT\n   * @param _tokenId - The token id\n   * @param _amount The amount of tokens being transferred\n   * @param _reservePrice The reserve price\n   * @param _duration The auction duration in seconds\n   */\n  function listNFT(uint256 _tokenId, uint256 _amount, uint256 _reservePrice, uint32 _duration) external;\n\n  /**\n   * @dev Unlist NFT\n   * @param _tokenId - The token id\n   * @param _index The index of tokens being transferred\n   */\n  function unlistNFT(uint256 _tokenId, uint32 _index) external;\n\n   /**\n   * @dev Change reserve price\n   * @param _tokenId - The token id\n   * @param _index - The index of tokens being transferred\n   * @param _reservePrice - The new reserve price\n   */\n  function changeReservePrice(uint256 _tokenId, uint32 _index, uint256 _reservePrice) external;\n\n  /**\n   * @dev Place a bid for an ERC1155 token.\n   * @notice Tokens can have multiple bids by different users.\n   * Users can have only one bid per token.\n   * If the user places a bid and has an active bid for that token,\n   * the older one will be replaced with the new one.\n   * @param _tokenId - The  token id\n   * @param _index - The index of tokens being transferred\n   * @param _price - The price for the bid\n   */\n  function placeBid(uint256 _tokenId, uint32 _index, uint256 _price) external;\n\n  /**\n   * @dev Place a bid for an ERC1155 token.\n   * @notice Tokens can have multiple bids by different users.\n   * Users can have only one bid per token.\n   * If the user places a bid and has an active bid for that token,\n   * the older one will be replaced with the new one.\n   * @param _bidder - The bidder address \n   * @param _tokenId - The token id\n   * @param _index - The index of tokens being transferred\n   * @param _price - The price for the bid\n   * @param _deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n   * @param _v - Must produce valid secp256k1 signature from the holder along with `r` and `s`\n   * @param _r - Must produce valid secp256k1 signature from the holder along with `v` and `s`\n   * @param _s - Must produce valid secp256k1 signature from the holder along with `r` and `v`\n   */\n  function placeBidWithPermit(address _bidder, uint256 _tokenId, uint32 _index, uint256 _price, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) external;\n  \n /**\n  * @dev Finish auction\n  * @param _tokenId - The token id\n  * @param _index - The index of tokens being transferred\n  */\n  function finishAuction(uint256 _tokenId, uint32 _index) external;\n\n   /**\n   * @dev Sets the inflation that's we mint every transfer\n   * @param _inflationPerMillion - The inflation amount from 0 to 999,999\n   */\n  function setInflationPerMillion(uint256 _inflationPerMillion) external;\n\n   /**\n   * @dev Sets the bid fee that's charged to users to bid\n   * @param _bidFeePerMillion - The fee amount from 0 to 999,999\n   */\n  function setBidFeePerMillion(uint256 _bidFeePerMillion) external;\n\n   /**\n   * @dev Sets the share Share for the owner of the contract that's\n   * charged to the seller on a successful sale\n   * @param _ownerSharePerMillion - The amount, from 0 to 999,999\n   */\n  function setOwnerSharePerMillion(uint256 _ownerSharePerMillion) external;\n\n  /**\n   * @dev Sets bid minimum raise percentage value\n   * @param _bidMinimumRaisePerMillion - amount, from 0 to 999,999\n   */\n  function setBidMinimumRaisePerMillion(uint256 _bidMinimumRaisePerMillion) external;\n\n  /**\n   * @dev Sets bid minimum raise token amount value\n   * @param _bidMinimumRaiseAmount - The raise token amount, bigger then 0\n   */\n  function setBidMinimumRaiseAmount(uint256 _bidMinimumRaiseAmount) external;\n\n  /**\n   * @dev Sets the fee collector address\n   * @param _feeCollector - The fee collector address\n   */\n  function setFeeCollector(address _feeCollector) external;\n\n   /**\n   * @dev Sets the inflation collector address\n   * @param _inflationCollector - The fee collector address\n   */\n  function setInflationCollector(address _inflationCollector) external;\n\n   /**\n   * @dev Sets royalties percentage value\n   * @param _royaltiesPerMillion - The royalties amount, from 0 to 999,999\n   */\n  function setRoyaltiesPerMillion(uint256 _royaltiesPerMillion) external;\n\n  /**\n   * @dev Sets minimum auction duration\n   * @param _minimumAuctionDuration - The minimum auction duration, bigger then 0\n   */\n  function setMinimumAuctionDuration(uint256 _minimumAuctionDuration) external;\n  \n   /**\n   * @dev withdraw the erc20 tokens from the contract\n   * @param _withdrawAddress - The withdraw address\n   * @param _amount - The withdrawal amount\n   */\n  function withdrawERC20(address _withdrawAddress, uint256 _amount) external;\n\n  /**\n   * @dev withdraw the erc1155 tokens from the contract\n   * @param _tokenAddress - The address of the ERC1155 token\n   * @param _tokenId - The token id\n   * @param _withdrawAddress - The withdraw address\n   * @param _amount - The withdrawal amount\n   */\n  function withdrawERC1155(address _tokenAddress, uint256 _tokenId, address _withdrawAddress, uint256 _amount) external;\n\n  /**\n   * @dev Get auction by token id and index\n   * @param _tokenId - The token id\n   * @param _index - token index\n   * @return auction\n   */\n  function getAuction(uint256 _tokenId, uint32 _index) external returns (Auction memory);\n\n  /**\n    * @dev Triggers stopped state.\n    *\n    * Requirements:\n    *\n    * - The contract must not be paused.\n    */\n  function pause() external;\n\n  /**\n    * @dev Returns to normal state.\n    *\n    * Requirements:\n    *\n    * - The contract must be paused.\n    */\n  function unpause() external;\n}\n\n// File: contracts/OwnixMarket/OwnixMarket.sol\n\n\n\npragma solidity =0.8.7;\npragma abicoder v2;\n\n\n\n\n\n\n\n\n\n\ncontract OwnixMarket is ERC1155Holder, Ownable, Pausable, IOwnixMarket, ReentrancyGuard {\n  using Address for address;\n\n  uint256 public constant ONE_MILLION = 1 * 10**6;\n\n   // The ERC20 ownix token\n  IOwnixERC20 immutable public ownixToken;\n\n  // The ERC1155 ownix token\n  IOwnixERC1155 immutable public ownixNFTToken;\n\n   // The fee collector address\n  address public feeCollector;\n  \n  // The inflation collector address\n  address public inflationCollector;\n\n  // Auctions by token token id => index => auction\n  mapping(uint256 => mapping (uint256 => Auction)) private auctions;\n\n  uint256 public inflationPerMillion;\n  uint256 public bidFeePerMillion;\n  uint256 public ownerSharePerMillion;\n  uint256 public bidMinimumRaisePerMillion;\n  uint256 public bidMinimumRaiseAmount;\n  uint256 public royaltiesPerMillion;\n  uint256 public minimumAuctionDuration;\n\n  /**\n   * @dev Constructor of the contract.\n   * @param _ownixToken - address of the Ownix token\n   * @param _ownixNFTToken - address of the Ownix NFT token\n   * @param _owner - address of the owner for the contract\n   * @param _feeCollector - address of the fee collector address\n   * @param _inflationCollector - address of the inflation collector address\n   */\n  constructor(\n    address _ownixToken,\n    address _ownixNFTToken,\n    address _owner,\n    address _feeCollector,\n    address _inflationCollector,\n    uint256 _minimumAuctionDuration\n  ) Ownable() Pausable() {\n    require(_ownixToken != address(0), \"Can't be zero address\");\n    require(_ownixNFTToken != address(0), \"Can't not be zero address\");\n    require(_owner != address(0), \"Can't be zero address\");\n    require(_feeCollector != address(0), \"Can't be zero address\");\n    require(_inflationCollector != address(0), \"Can't be zero address\");\n    require(_minimumAuctionDuration > 0, \"Minimum auction duration can't be zero\");\n\n    ownixToken = IOwnixERC20(_ownixToken);\n    ownixNFTToken = IOwnixERC1155(_ownixNFTToken);\n\n    // Set owner\n    transferOwnership(_owner);\n    // Set fee collector address\n    feeCollector = _feeCollector;\n    // Set inflation fee collector address\n    inflationCollector = _inflationCollector;\n    // Set the minimum auction duration\n    minimumAuctionDuration = _minimumAuctionDuration;\n  }\n\n  function listNFT(uint256 _tokenId, uint256 _amount, uint256 _reservePrice, uint32 _duration) override external nonReentrant() whenNotPaused() {\n    require(_tokenId > 0, \"token id can't be zero\");\n    require(_amount > 0, \"amount can't be zero\");\n    require(_reservePrice > 0, \"reservePrice id can't be zero\");\n    require(_duration >= minimumAuctionDuration, \"duration must be bigger the minimum uction duration\");\n\n    for (uint32 i=0; i < _amount; ++i) {\n      uint32 index = i;\n      require(auctions[_tokenId][index].tokenId == 0, \"auction with the same token id is already exists\");\n      \n      auctions[_tokenId][index] = Auction({\n        nftOwner: msg.sender,\n        nft: ownixNFTToken,\n        tokenId: _tokenId,\n        amount: _amount,\n        index: index,\n        reservePrice: _reservePrice,\n        duration: _duration,\n        expiresAt: 0,\n        bidder: address(0),\n        bidPrice: 0,\n        bidCreatedAt: 0\n      });\n\n      emit NFTListed(\n        msg.sender,\n        ownixNFTToken,\n        _tokenId,\n        _amount,\n        index,\n        _reservePrice,\n        0\n      );\n     }\n     \n\n    ownixNFTToken.safeTransferFrom(\n      msg.sender,\n      address(this),\n      _tokenId,\n      _amount,\n      \"\"\n    );\n  }\n\n  function unlistNFT(uint256 _tokenId, uint32 _index) override external nonReentrant() whenNotPaused() {\n    Auction memory auction = auctions[_tokenId][_index];\n    require(auction.expiresAt == 0, \"Can't unlist NFT after auction started\");\n    require(auction.nftOwner == msg.sender,  \"Must be nft owner unlist NFT\");\n   \n    emit NFTUnlisted(\n     auction.nftOwner,\n     ownixNFTToken, \n     _tokenId, \n     1,\n     _index);\n\n    ownixNFTToken.safeTransferFrom(\n      address(this),\n     auction.nftOwner,\n      _tokenId,\n      1,\n      \"\"\n    );\n\n    delete auctions[_tokenId][_index];\n  }\n\n  function changeReservePrice(uint256 _tokenId, uint32 _index, uint256 _reservePrice) override external whenNotPaused() {\n    Auction memory auction = auctions[_tokenId][_index];\n    require(auction.expiresAt == 0, \"Can't change reserve price after auction started\");\n    require(auction.nftOwner == msg.sender, \"Must be nft owner to change reserve\");\n\n    auction.reservePrice = _reservePrice;\n\n    auctions[_tokenId][_index] = auction;\n\n    emit ReservePriceChanged(\n      msg.sender,\n      ownixNFTToken,\n      _tokenId,\n      1,\n      _index,\n      _reservePrice\n    );\n  }\n\n  function placeBid(uint256 _tokenId, uint32 _index, uint256 _price) override external whenNotPaused() nonReentrant() { \n      _placeBid(msg.sender, _tokenId, _index, _price);\n  }\n\n  function placeBidWithPermit(\n    address _bidder,\n    uint256 _tokenId, \n    uint32 _index, \n    uint256 _price,\n    uint256 _deadline,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s) override external whenNotPaused() nonReentrant() {\n     \n      IERC20Permit(address(ownixToken)).permit(_bidder, address(this), _price, _deadline, _v, _r, _s);\n      _placeBid(_bidder, _tokenId, _index, _price);\n  }\n\n  function finishAuction(uint256 _tokenId, uint32 _index) override external nonReentrant() whenNotPaused() {\n   \n    Auction memory auction = auctions[_tokenId][_index];\n\n    require(auction.bidder != address(0), \"Can't finish Auction without any bids\");\n    require(auction.expiresAt < block.timestamp, \"Can't finish Auction before it been ended\");\n\n    uint256 saleShareAmount;\n    if (ownerSharePerMillion > 0) {\n      // Calculate sale share\n      saleShareAmount = auction.bidPrice * ownerSharePerMillion / ONE_MILLION;\n      // Transfer share amount to the bid contract\n      require(\n        ownixToken.transfer(feeCollector, saleShareAmount),\n        \"Transferring the share failed\"\n      );\n    }\n\n    uint256 royaltiesAmount;\n    if (royaltiesPerMillion > 0) {\n       address firstTimeOwner = ownixNFTToken.getFirstTimeOwner(auction.tokenId);\n       if(firstTimeOwner != auction.nftOwner) {\n        // Calculate royalties\n        royaltiesAmount = auction.bidPrice * royaltiesPerMillion / ONE_MILLION;\n        // Transfer royalties Owner\n        require(\n          ownixToken.transfer(firstTimeOwner, royaltiesAmount),\n          \"Transferring the royalties failed\"\n        );\n      }\n    }\n\n    // Transfer ownixToken from bidder to seller\n    require(\n      ownixToken.transfer(auction.nftOwner, auction.bidPrice - (saleShareAmount + royaltiesAmount)),\n      \"Transferring ownixToken to nft owner failed\"\n    );\n\n    if (inflationPerMillion > 0) {\n      // Calculate mint tokens\n      uint256 mintShareAmount = auction.bidPrice * inflationPerMillion / ONE_MILLION;\n      // Mint the new ownix tokens to the inflationCollector\n      ownixToken.mint(inflationCollector, mintShareAmount);\n    }\n\n    delete auctions[_tokenId][_index];\n    \n    // Transfer token to bidder\n    ownixNFTToken.safeTransferFrom(\n      address(this),\n      auction.bidder,\n      _tokenId,\n      1,\n      \"\");\n\n    emit BidAccepted(\n      ownixNFTToken,\n      _tokenId,\n      1,\n      auction.index,\n      auction.bidder,\n      auction.nftOwner,\n      auction.bidPrice\n    );\n  }\n\n  function setInflationPerMillion(uint256 _inflationPerMillion) override external onlyOwner {\n    require(\n      _inflationPerMillion < ONE_MILLION,\n      \"The inflation should be between 0 and 999,999\"\n    );\n\n    inflationPerMillion = _inflationPerMillion;\n    emit InflationPerMillionChanged(inflationPerMillion);\n  }\n\n  function setBidFeePerMillion(uint256 _bidFeePerMillion) override external onlyOwner {\n    require(\n      _bidFeePerMillion < ONE_MILLION,\n      \"The bid fee should be between 0 and 999,999\"\n    );\n\n    bidFeePerMillion = _bidFeePerMillion;\n    emit BidFeePerMillionChanged(bidFeePerMillion);\n  }\n\n  function setOwnerSharePerMillion(uint256 _ownerSharePerMillion) override external onlyOwner {\n    require(\n      _ownerSharePerMillion < ONE_MILLION,\n      \"The owner share should be between 0 and 999,999\"\n    );\n\n    ownerSharePerMillion = _ownerSharePerMillion;\n    emit OwnerSharePerMillionChanged(ownerSharePerMillion);\n  }\n\n  function setBidMinimumRaisePerMillion(uint256 _bidMinimumRaisePerMillion) override external onlyOwner {\n    require(\n      _bidMinimumRaisePerMillion < ONE_MILLION,\n      \"bid minimum raise should be between 0 and 999,999\"\n    );\n\n    bidMinimumRaisePerMillion = _bidMinimumRaisePerMillion;\n    emit BidMinimumRaisePerMillionChanged(bidMinimumRaisePerMillion);\n  }\n\n  function setBidMinimumRaiseAmount(uint256 _bidMinimumRaiseAmount) override external onlyOwner {\n    require(\n      _bidMinimumRaiseAmount > 0,\n      \"bid minimum raise should be bigger then 0\"\n    );\n\n    bidMinimumRaiseAmount = _bidMinimumRaiseAmount;\n    emit BidMinimumRaiseAmountChanged(_bidMinimumRaiseAmount);\n  }\n\n  function setFeeCollector(address _feeCollector) override external onlyOwner {\n    require(_feeCollector != address(0), \"address can't be the zero address\");\n\n    feeCollector = _feeCollector;\n    emit FeeCollectorChanged(_feeCollector);\n  }\n\n  function setInflationCollector(address _inflationCollector) override external onlyOwner {\n    require(\n      _inflationCollector != address(0),\n      \"address can't be the zero address\"\n    );\n\n    inflationCollector = _inflationCollector;\n    emit InflationCollectorChanged(_inflationCollector);\n  }\n\n  function setRoyaltiesPerMillion(uint256 _royaltiesPerMillion) override external onlyOwner {\n    require(\n      _royaltiesPerMillion < ONE_MILLION,\n      \"bid minimum raise should be between 0 and 999,999\"\n    );\n\n    royaltiesPerMillion = _royaltiesPerMillion;\n    emit RoyaltiesPerMillionChanged(_royaltiesPerMillion);\n  }\n\n  function setMinimumAuctionDuration(uint256 _minimumAuctionDuration) override external onlyOwner {\n    require(\n      _minimumAuctionDuration > 0,\n      \"Minimum auction duration should be bigger then 0\"\n    );\n\n    minimumAuctionDuration = _minimumAuctionDuration;\n    emit MinimumAuctionDurationChanged(_minimumAuctionDuration);\n  }\n\n  function withdrawERC20(address _withdrawAddress, uint256 _amount) override external onlyOwner {\n    require(\n      _withdrawAddress != address(0),\n      \"address can't be the zero address\"\n    );\n\n    require(\n      ownixToken.transfer(_withdrawAddress, _amount),\n      \"Withdraw failed\"\n    );\n  }\n\n  function withdrawERC1155(\n    address _tokenAddress,\n    uint256 _tokenId,\n    address _withdrawAddress,\n    uint256 _amount) override external onlyOwner {\n    require(\n      _withdrawAddress != address(0),\n      \"address can't be the zero address\"\n    );\n\n    IERC1155(_tokenAddress).safeTransferFrom(\n      address(this),\n      _withdrawAddress,\n      _tokenId,\n      _amount,\n      \"\"\n    );\n  }\n\n  function getAuction(uint256 _tokenId, uint32 _index) override external view returns (Auction memory)  {\n    return auctions[_tokenId][_index];\n  }\n\n  function pause() override external onlyOwner {\n    _pause();\n  }\n\n  function unpause() override external onlyOwner {\n    _unpause();\n  }\n\n\n  /**\n   * @dev Place a bid for an ERC1155 token.\n   * @notice Tokens can have multiple bids by different users.\n   * Users can have only one bid per token.\n   * If the user places a bid and has an active bid for that token,\n   * the older one will be replaced with the new one.\n   * @param _bidder - address the bidder address\n   * @param _tokenId - uint256 of the token id\n   * @param _index The index of tokens being transferred\n   * @param _price - of the price for the bid\n   */\n  function _placeBid(address _bidder, uint256 _tokenId, uint32 _index, uint256 _price) private whenNotPaused() {\n    Auction memory auction = auctions[_tokenId][_index];\n\n    require(auctions[_tokenId][_index].tokenId != 0, \"auction must be listed first\");\n    require(auction.expiresAt == 0 || auction.expiresAt > block.timestamp,\n      \"List has been ended, Can't place bid\"\n    );\n\n    require(\n      (_price >= (auction.bidPrice + bidMinimumRaiseAmount) ||\n        _price >= auction.bidPrice + (auction.bidPrice * bidMinimumRaisePerMillion / ONE_MILLION)) &&\n        _price >= auction.reservePrice,\n      \"Price should be bigger than highest bid and reserve price\"\n    );\n\n    \n    if(auction.bidder == address(0)) {\n      auction.expiresAt = block.timestamp + auction.duration;\n      auctions[_tokenId][_index] = auction;\n\n        emit AuctionStarted(\n          auction.nftOwner,\n          ownixNFTToken,\n          _tokenId,\n          auction.amount,\n          auction.index,\n          auction.reservePrice,\n          auction.expiresAt);\n    } else {\n      require(ownixToken.transfer(auction.bidder, auction.bidPrice), \"Refund failed\");\n    }\n\n    // check if place bid in the last minimum auction duration\n    if (auction.expiresAt - block.timestamp <= minimumAuctionDuration) {\n      auction.expiresAt = block.timestamp + minimumAuctionDuration;\n\n      emit AuctionExtended(\n        auction.nftOwner,\n        ownixNFTToken,\n        _tokenId,\n        auction.amount,\n        _index,\n        auction.reservePrice,\n        auction.expiresAt\n      );\n    }\n\n    // Transfer tokens to the market\n    require(\n      ownixToken.transferFrom(_bidder, address(this), _price),\n      \"Transferring the bid amount to the marketplace failed\"\n    );\n\n    // Check if there's a bid fee and transfer the amount to marketplace owner\n    if (bidFeePerMillion > 0) {\n      // Calculate sale share\n      uint256 feeAmount  = _price * bidFeePerMillion / ONE_MILLION;\n      require(\n        ownixToken.transferFrom(_bidder, feeCollector, feeAmount),\n        \"Transferring the bid fee to the marketplace owner failed\"\n      );\n    }\n\n    uint256 bidCreatedAt = block.timestamp;\n\n    // Save Bid\n    auction.bidder = _bidder;\n    auction.bidPrice = _price;\n    auction.bidCreatedAt = bidCreatedAt;\n\n    auctions[_tokenId][_index] = auction;\n\n    emit BidCreated(\n      ownixNFTToken,\n      _tokenId,\n      1,\n      _index,\n      _bidder,\n      _price,\n      bidCreatedAt\n    );\n  }\n}\n"}}}