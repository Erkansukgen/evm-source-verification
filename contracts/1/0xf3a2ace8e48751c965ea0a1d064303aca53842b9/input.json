{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Address.sol": {
      "content": "pragma solidity 0.6.4;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}"
    },
    "browser/HEX.sol": {
      "content": "\r\npragma solidity 0.6.4;\r\n\r\ninterface HEX {\r\n   /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n   function stakeStart(uint256 newStakedHearts, uint256 newStakedDays) external;\r\n   function stakeEnd(uint256 stakeIndex, uint40 stakeIdParam) external;\r\n   function stakeCount(address stakerAddr) external view returns (uint256);\r\n   function stakeLists(address owner, uint256 stakeIndex) external view returns (uint40, uint72, uint72, uint16, uint16, uint16, bool);\r\n   function currentDay() external view returns (uint256);\r\n   function dailyDataRange(uint256 beginDay, uint256 endDay) external view returns (uint256[] memory);\r\n   function globalInfo() external view returns (uint256[13] memory);\r\n\r\n}\r\n"
    },
    "browser/HEXMONEY.sol": {
      "content": "//HEXMONEY.sol\n//\n//\n\npragma solidity 0.6.4;\n\nimport \"./SafeMath.sol\";\nimport \"./IERC20.sol\";\nimport \"./HEX.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n//Uniswap v2 interface\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ninterface IUniswapV2Pair {\n  event Approval(address indexed owner, address indexed spender, uint value);\n  event Transfer(address indexed from, address indexed to, uint value);\n\n  function name() external pure returns (string memory);\n  function symbol() external pure returns (string memory);\n  function decimals() external pure returns (uint8);\n  function totalSupply() external view returns (uint);\n  function balanceOf(address owner) external view returns (uint);\n  function allowance(address owner, address spender) external view returns (uint);\n\n  function approve(address spender, uint value) external returns (bool);\n  function transfer(address to, uint value) external returns (bool);\n  function transferFrom(address from, address to, uint value) external returns (bool);\n\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\n  function nonces(address owner) external view returns (uint);\n\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n  event Mint(address indexed sender, uint amount0, uint amount1);\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n  event Swap(\n      address indexed sender,\n      uint amount0In,\n      uint amount1In,\n      uint amount0Out,\n      uint amount1Out,\n      address indexed to\n  );\n  event Sync(uint112 reserve0, uint112 reserve1);\n\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\n  function factory() external view returns (address);\n  function token0() external view returns (address);\n  function token1() external view returns (address);\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n  function price0CumulativeLast() external view returns (uint);\n  function price1CumulativeLast() external view returns (uint);\n  function kLast() external view returns (uint);\n\n  function mint(address to) external returns (uint liquidity);\n  function burn(address to) external returns (uint amount0, uint amount1);\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n  function skim(address to) external;\n  function sync() external;\n}\n\n////////////////////////////////////////////////\n////////////////////EVENTS/////////////////////\n//////////////////////////////////////////////\n\ncontract TokenEvents {\n\n    //when a user freezes tokens\n    event TokenFreeze(\n        address indexed user,\n        uint value\n    );\n\n    //when a user unfreezes tokens\n    event TokenUnfreeze(\n        address indexed user,\n        uint value\n    );\n    \n    //when a user freezes freely minted tokens\n    event FreeMintFreeze(\n        address indexed user,\n        uint value,\n        uint indexed dapp //0 for ref, increment per external dapp\n    );\n\n    //when a user unfreezes freely minted tokens\n    event FreeMintUnfreeze(\n        address indexed user,\n        uint value\n    );\n    \n    //when a user transforms HEX to HXY\n    event Transform (\n        uint hexAmt,\n        uint hxyAmt,\n        address indexed transformer\n    );\n\n    //when founder tokens are frozen\n    event FounderLock (\n        uint hxyAmt,\n        uint timestamp\n    );\n\n    //when founder tokens are unfrozen\n    event FounderUnlock (\n        uint hxyAmt,\n        uint timestamp\n    );\n    \n    event LiquidityPush(\n        uint256 amountA,\n        uint256 amountB,\n        uint256 liquidity\n    );\n    \n    event DividendPush(\n        uint256 hexDivs  \n    );\n    \n}\n\n//////////////////////////////////////\n//////////HEXMONEY TOKEN CONTRACT////////\n////////////////////////////////////\ncontract HEXMONEY is IERC20, TokenEvents {\n\n    using SafeMath for uint256;\n    using SafeERC20 for HEXMONEY;\n    \n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    //uniswap setup\n    address public factoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n    address public routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address public uniHEXHXY = address(0);\n    IUniswapV2Pair internal uniPairInterface = IUniswapV2Pair(uniHEXHXY);\n    IUniswapV2Router02 internal uniV2Router = IUniswapV2Router02(routerAddress);\n    \n    //hex contract setup\n    address internal hexAddress = 0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39;\n    HEX internal hexInterface = HEX(hexAddress);\n\n    //transform setup\n    bool public roomActive;\n    uint public totalHeartsTransformed = 0;\n    uint public totalHxyTransformed = 0;\n    uint public totalDividends = 0;\n    uint public totalLiquidityAdded = 0;\n    uint public hexLiquidity = 0;\n    uint public hexDivs = 0;\n\n    //mint / freeze setup\n    uint public unlockLvl = 0;\n    uint public founderLockStartTimestamp = 0;\n    uint public founderLockDayLength = 1825;//5 years (10% released every sixmonths)\n    uint public founderLockedTokens = 0;\n    uint private allFounderLocked = 0;\n\n    bool public mintBlock;//disables any more tokens ever being minted once _totalSupply reaches _maxSupply\n    uint public minFreezeDayLength = 7; // min days to freeze\n    uint internal daySeconds = 86400; // seconds in a day\n    uint public totalFrozen = 0;\n    mapping (address => uint) public tokenFrozenBalances;//balance of HXY frozen mapped by user\n    uint public totalFreeMintFrozen = 0;\n    mapping (address => uint) public freeMintFrozenBalances;//balance of HXY free minted frozen mapped by user\n\n    //tokenomics\n    uint256 public _maxSupply = 6000000000000000;// max supply @ 60M\n    uint256 internal _totalSupply;\n    string public constant name = \"HEX Money\";\n    string public constant symbol = \"HXY\";\n    uint public constant decimals = 8;\n    \n    //airdrop contract\n    address payable public airdropContract = address(0);\n    //multisig\n    address public multisig = address(0);\n    //admin\n    address payable internal _p1 = 0xb9F8e9dad5D985dF35036C61B6Aded2ad08bd53f;\n    address payable internal _p2 = 0xe551072153c02fa33d4903CAb0435Fb86F1a80cb;\n    address payable internal _p3 = 0xc5f517D341c1bcb2cdC004e519AF6C4613A8AB2d;\n    address payable internal _p4 = 0x47705B509A4Fe6a0237c975F81030DAC5898Dc06;\n    address payable internal _p5 = 0x31101541339B4B3864E728BbBFc1b8A0b3BCAa45;\n    \n    bool private sync;\n    bool public multisigSet;\n    bool public transformsActive;\n    \n    //minters\n    address[] public minterAddresses;// future contracts to enable minting of HXY\n\n    mapping(address => bool) admins;\n    mapping(address => bool) minters;\n    mapping (address => Frozen) public frozen;\n    mapping (address => FreeMintFrozen) public freeMintFrozen;\n\n    struct Frozen{\n        uint256 freezeStartTimestamp;\n        uint256 totalEarnedInterest;\n    }\n    \n    struct FreeMintFrozen{\n        uint256 totalHxyMinted;\n    }\n    \n    modifier onlyMultisig(){\n        require(msg.sender == multisig, \"not authorized\");\n        _;\n    }\n\n    modifier onlyAdmins(){\n        require(admins[msg.sender], \"not an admin\");\n        _;\n    }\n\n    modifier onlyMinters(){\n        require(minters[msg.sender], \"not a minter\");\n        _;\n    }\n    \n    modifier onlyOnceMultisig(){\n        require(!multisigSet, \"cannot call twice\");\n        multisigSet = true;\n        _;\n    }\n    \n    modifier onlyOnceTransform(){\n        require(!transformsActive, \"cannot call twice\");\n        transformsActive = true;\n        _;\n    }\n    \n    //protects against potential reentrancy\n    modifier synchronized {\n        require(!sync, \"Sync lock\");\n        sync = true;\n        _;\n        sync = false;\n    }\n\n    constructor(uint256 v2Supply) public {\n        admins[_p1] = true;\n        admins[_p2] = true;\n        admins[_p3] = true;\n        admins[msg.sender] = true;\n        //mint initial tokens\n        mintInitialTokens(v2Supply);\n    }\n\n\n    receive() external payable{\n        donate();\n    }\n\n    \n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply unless mintBLock is true\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        uint256 amt = amount;\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        if(!mintBlock){\n            if(_totalSupply < _maxSupply){\n                if(_totalSupply.add(amt) > _maxSupply){\n                    amt = _maxSupply.sub(_totalSupply);\n                    _totalSupply = _maxSupply;\n                    mintBlock = true;\n                }\n                else{\n                    _totalSupply = _totalSupply.add(amt);\n                }\n                _balances[account] = _balances[account].add(amt);\n                emit Transfer(address(0), account, amt);\n            }\n        }\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    //mint HXY lock (only ever called in constructor)\n    function mintInitialTokens(uint v2Supply)\n        internal\n        synchronized\n    {\n        require(v2Supply <= _maxSupply, \"cannot mint\");\n        uint256 _founderLockedTokens = _maxSupply.div(10);\n        _mint(_p1, v2Supply.sub(_founderLockedTokens));//mint HXY to airdrop on launch\n        _mint(address(this), _founderLockedTokens);//mint HXY to be frozen for 10 years, 10% unfrozen every year\n        founderLock(_founderLockedTokens);\n    }\n\n    function founderLock(uint tokens)\n        internal\n    {\n        founderLockStartTimestamp = now;\n        founderLockedTokens = tokens;\n        allFounderLocked = tokens;\n        emit FounderLock(tokens, founderLockStartTimestamp);\n    }\n\n    //unlock founder tokens\n    function unlock()\n        public\n        onlyAdmins\n        synchronized\n    {\n        uint sixMonths = founderLockDayLength/10;\n        require(unlockLvl < 10, \"token unlock complete\");\n        require(founderLockStartTimestamp.add(sixMonths.mul(daySeconds)) <= now, \"tokens cannot be unfrozen yet\");//must be at least over 6 months\n        uint value = allFounderLocked/10;\n        if(founderLockStartTimestamp.add((sixMonths).mul(daySeconds)) <= now && unlockLvl == 0){\n            unlockLvl++;\n            founderLockedTokens = founderLockedTokens.sub(value);\n            transfer(_p1, value.mul(30).div(100));\n            transfer(_p2, value.mul(30).div(100));\n            transfer(_p3, value.mul(20).div(100));\n            transfer(_p4, value.mul(15).div(100));\n            transfer(_p5, value.mul(5).div(100));\n        }\n        else if(founderLockStartTimestamp.add((sixMonths * 2).mul(daySeconds)) <= now && unlockLvl == 1){\n            unlockLvl++;\n            founderLockedTokens = founderLockedTokens.sub(value);\n            transfer(_p1, value.mul(30).div(100));\n            transfer(_p2, value.mul(30).div(100));\n            transfer(_p3, value.mul(20).div(100));\n            transfer(_p4, value.mul(15).div(100));\n            transfer(_p5, value.mul(5).div(100));\n        }\n        else if(founderLockStartTimestamp.add((sixMonths * 3).mul(daySeconds)) <= now && unlockLvl == 2){\n            unlockLvl++;\n            founderLockedTokens = founderLockedTokens.sub(value);\n            transfer(_p1, value.mul(30).div(100));\n            transfer(_p2, value.mul(30).div(100));\n            transfer(_p3, value.mul(20).div(100));\n            transfer(_p4, value.mul(15).div(100));\n            transfer(_p5, value.mul(5).div(100));\n        }\n        else if(founderLockStartTimestamp.add((sixMonths * 4).mul(daySeconds)) <= now && unlockLvl == 3){\n            unlockLvl++;\n            founderLockedTokens = founderLockedTokens.sub(value);\n            transfer(_p1, value.mul(30).div(100));\n            transfer(_p2, value.mul(30).div(100));\n            transfer(_p3, value.mul(20).div(100));\n            transfer(_p4, value.mul(15).div(100));\n            transfer(_p5, value.mul(5).div(100));\n        }\n        else if(founderLockStartTimestamp.add((sixMonths * 5).mul(daySeconds)) <= now && unlockLvl == 4){\n            unlockLvl++;\n            founderLockedTokens = founderLockedTokens.sub(value);\n            transfer(_p1, value.mul(30).div(100));\n            transfer(_p2, value.mul(30).div(100));\n            transfer(_p3, value.mul(20).div(100));\n            transfer(_p4, value.mul(15).div(100));\n            transfer(_p5, value.mul(5).div(100));\n        }\n        else if(founderLockStartTimestamp.add((sixMonths * 6).mul(daySeconds)) <= now && unlockLvl == 5){\n            unlockLvl++;\n            founderLockedTokens = founderLockedTokens.sub(value);\n            transfer(_p1, value.mul(30).div(100));\n            transfer(_p2, value.mul(30).div(100));\n            transfer(_p3, value.mul(20).div(100));\n            transfer(_p4, value.mul(15).div(100));\n            transfer(_p5, value.mul(5).div(100));\n        }\n        else if(founderLockStartTimestamp.add((sixMonths * 7).mul(daySeconds)) <= now && unlockLvl == 6){\n            unlockLvl++;\n            founderLockedTokens = founderLockedTokens.sub(value);\n            transfer(_p1, value.mul(30).div(100));\n            transfer(_p2, value.mul(30).div(100));\n            transfer(_p3, value.mul(20).div(100));\n            transfer(_p4, value.mul(15).div(100));\n            transfer(_p5, value.mul(5).div(100));\n        }\n        else if(founderLockStartTimestamp.add((sixMonths * 8).mul(daySeconds)) <= now && unlockLvl == 7)\n        {\n            unlockLvl++;     \n            founderLockedTokens = founderLockedTokens.sub(value);      \n            transfer(_p1, value.mul(30).div(100));\n            transfer(_p2, value.mul(30).div(100));\n            transfer(_p3, value.mul(20).div(100));\n            transfer(_p4, value.mul(15).div(100));\n            transfer(_p5, value.mul(5).div(100));\n        }\n        else if(founderLockStartTimestamp.add((sixMonths * 9).mul(daySeconds)) <= now && unlockLvl == 8){\n            unlockLvl++;\n            founderLockedTokens = founderLockedTokens.sub(value);\n            transfer(_p1, value.mul(30).div(100));\n            transfer(_p2, value.mul(30).div(100));\n            transfer(_p3, value.mul(20).div(100));\n            transfer(_p4, value.mul(15).div(100));\n            transfer(_p5, value.mul(5).div(100));\n        }\n        else if(founderLockStartTimestamp.add((sixMonths * 10).mul(daySeconds)) <= now && unlockLvl == 9){\n            unlockLvl++;\n            if(founderLockedTokens >= value){\n                founderLockedTokens = founderLockedTokens.sub(value);\n            }\n            else{\n                value = founderLockedTokens;\n                founderLockedTokens = 0;\n            }\n            transfer(_p1, value.mul(30).div(100));\n            transfer(_p2, value.mul(30).div(100));\n            transfer(_p3, value.mul(20).div(100));\n            transfer(_p4, value.mul(15).div(100));\n            transfer(_p5, value.mul(5).div(100));\n        }\n        else{\n            revert();\n        }\n        emit FounderUnlock(value, now);\n    }\n    ////////////////////////////////////////////////////////\n    /////////////////PUBLIC FACING - HXY CONTROL//////////\n    //////////////////////////////////////////////////////\n\n    //freeze HXY tokens to contract\n    function FreezeTokens(uint amt)\n        public\n    {\n        require(amt > 0, \"zero input\");\n        require(tokenBalance() >= amt, \"Error: insufficient balance\");//ensure user has enough funds\n        if(isFreezeFinished(msg.sender)){\n            UnfreezeTokens();//unfreezes all currently frozen tokens + profit\n        }\n        //update balances\n        tokenFrozenBalances[msg.sender] = tokenFrozenBalances[msg.sender].add(amt);\n        totalFrozen = totalFrozen.add(amt);\n        frozen[msg.sender].freezeStartTimestamp = now;\n        _transfer(msg.sender, address(this), amt);//make transfer\n        emit TokenFreeze(msg.sender, amt);\n    }\n    \n    //unfreeze HXY tokens from contract\n    function UnfreezeTokens()\n        public\n        synchronized\n    {\n        require(tokenFrozenBalances[msg.sender] > 0,\"Error: unsufficient frozen balance\");//ensure user has enough frozen funds\n        require(isFreezeFinished(msg.sender), \"tokens cannot be unfrozen yet. min 7 day freeze\");\n        uint amt = tokenFrozenBalances[msg.sender];\n        uint256 interest = calcFreezingRewards(msg.sender);\n        _mint(msg.sender, interest);//mint HXY - total unfrozen / 1000 * (minFreezeDayLength + days past) @ 36.5% per year\n        frozen[msg.sender].totalEarnedInterest += interest;\n        tokenFrozenBalances[msg.sender] = 0;\n        frozen[msg.sender].freezeStartTimestamp = 0;\n        totalFrozen = totalFrozen.sub(amt);\n        _transfer(address(this), msg.sender, amt);//make transfer\n        emit TokenUnfreeze(msg.sender, amt);\n    }\n\n\n    //returns freezing reward in HXY\n    function calcFreezingRewards(address _user)\n        public\n        view\n        returns(uint)\n    {\n        return (tokenFrozenBalances[_user].div(1000) * (minFreezeDayLength + daysPastMinFreezeTime(_user)));\n    }\n    \n    //returns amount of days frozen past min freeze time of 7 days\n    function daysPastMinFreezeTime(address _user)\n        public\n        view\n        returns(uint)\n    {\n        if(frozen[_user].freezeStartTimestamp == 0){\n            return 0;\n        }\n        uint daysPast = now.sub(frozen[_user].freezeStartTimestamp).div(daySeconds);\n        if(daysPast >= minFreezeDayLength){\n            return daysPast - minFreezeDayLength;// returns 0 if under 1 day passed\n        }\n        else{\n            return 0;\n        }\n    }\n    \n    //freeze HXY tokens to contract for duration (till maxSupply reached)\n    function FreezeFreeMint(uint amt, address user, uint dapp)\n        public\n        onlyMinters\n        synchronized\n    {\n        require(amt > 0, \"zero input\");\n        if(!mintBlock){\n            //mint tokens\n            uint t = totalSupply();\n            freeMintHXY(amt,address(this));//mint HXY to contract and freeze\n            //adjust for max supply breach\n            if(totalSupply().sub(t) < amt){\n                amt = totalSupply().sub(t);\n            }\n            //update balances\n            freeMintFrozenBalances[user] = freeMintFrozenBalances[user].add(amt);\n            totalFrozen = totalFrozen.add(amt);\n            totalFreeMintFrozen = totalFreeMintFrozen.add(amt);\n            freeMintFrozen[user].totalHxyMinted += amt;\n            emit FreeMintFreeze(user, amt, dapp);\n        }\n\n    }\n    \n    //freeze HXY tokens to contract from ref bonus (till maxSupply reached)\n    function FreezeRefFreeMint(uint amt, address ref)\n        internal\n    {\n        require(amt > 0, \"zero input\");\n        if(!mintBlock){\n            //mint tokens\n            uint t = totalSupply();\n            freeMintHXY(amt,address(this));//mint HXY to contract and freeze\n            //adjust for max supply breach\n            if(totalSupply().sub(t) < amt){\n                amt = totalSupply().sub(t);\n            }\n            //update balances\n            freeMintFrozenBalances[ref] = freeMintFrozenBalances[ref].add(amt);\n            totalFrozen = totalFrozen.add(amt);\n            totalFreeMintFrozen = totalFreeMintFrozen.add(amt);\n            freeMintFrozen[ref].totalHxyMinted += amt;\n            emit FreeMintFreeze(ref, amt, 0);\n        }\n\n    }\n    \n    //unfreeze HXY tokens from contract\n    function UnfreezeFreeMint()\n        public\n        synchronized\n    {\n        require(freeMintFrozenBalances[msg.sender] > 0,\"Error: unsufficient frozen balance\");//ensure user has enough frozen funds\n        require(mintBlock, \"tokens cannot be unfrozen yet. max supply not yet reached\");\n        //update values\n        uint amt = freeMintFrozenBalances[msg.sender];\n        freeMintFrozenBalances[msg.sender] = 0;\n        totalFrozen = totalFrozen.sub(amt);\n        totalFreeMintFrozen = totalFreeMintFrozen.sub(amt);\n        //make transfer\n        _transfer(address(this), msg.sender, amt);\n        emit FreeMintUnfreeze(msg.sender, amt);\n    }\n    \n    //mint HXY to address\n    function freeMintHXY(uint value, address minter)\n        internal\n    {\n        uint amt = value;\n        _mint(minter, amt);//mint HXY\n    }\n\n    //transforms HEX to HXY\n    function transformHEX(uint hearts, address ref)//Approval needed\n        public\n        synchronized\n    {\n        require(roomActive, \"transforms not yet active\");\n        require(hearts >= 100, \"value too low\");\n        require(hexInterface.transferFrom(msg.sender, address(this), hearts), \"Transfer failed\");//send hex from user to contract\n        //allocate funds\n        hexDivs += hearts.div(2);//50%\n        hexLiquidity += hearts.div(2);//50%\n        \n        //get HXY price\n        (uint reserve0, uint reserve1,) = uniPairInterface.getReserves();\n        uint hxy = uniV2Router.quote(hearts, reserve0, reserve1);\n        if(ref != address(0))//ref\n        {\n            totalHxyTransformed += hxy.add(hxy.div(10));\n            totalHeartsTransformed += hearts;\n            FreezeRefFreeMint(hxy.div(10), ref);\n        }\n        else{//no ref\n            totalHxyTransformed += hxy;\n            totalHeartsTransformed += hearts;\n        }\n        require(totalHxyTransformed <= 3000000000000000, \"transform threshold breached\");//remaining for interest and free mint\n        _mint(msg.sender, hxy);\n        emit Transform(hearts, hxy, msg.sender);\n    }\n    \n    \n    function pushLiquidity()\n        public\n        synchronized\n    {\n        require(hexLiquidity > 1000, \"nothing to add\");\n        //get price \n        (uint reserve0, uint reserve1,) = uniPairInterface.getReserves();\n        uint hxy = uniV2Router.quote(hexLiquidity, reserve0, reserve1);\n        _mint(address(this), hxy);\n        //approve\n        this.safeApprove(routerAddress, hxy);\n        require(hexInterface.approve(routerAddress, hexLiquidity), \"could not approve\");\n        //add liquidity\n        (uint amountA, uint amountB, uint liquidity) = uniV2Router.addLiquidity(hexAddress, address(this), hexLiquidity, hxy, 0, 0, _p1, now.add(800));\n        totalLiquidityAdded += hexLiquidity;\n        //reset\n        hexLiquidity = 0;\n        emit LiquidityPush(amountA, amountB, liquidity);\n    }\n    \n    \n    function pushDivs()\n        public\n        synchronized\n    {\n        require(hexDivs > 0, \"nothing to distribute\");\n        //send divs\n        totalDividends += hexDivs;\n        hexInterface.transfer(airdropContract, hexDivs);\n        //send any unallocated HEX in contract to dividend contract\n        uint overflow = 0;\n        if(hexInterface.balanceOf(address(this)).sub(hexLiquidity) > 0){\n            overflow = hexInterface.balanceOf(address(this)).sub(hexLiquidity);\n            hexInterface.transfer(airdropContract, overflow);   \n        }\n        emit DividendPush(hexDivs.add(overflow));\n        //reset\n        hexDivs = 0;\n    }\n    \n    ///////////////////////////////\n    ////////ADMIN/MULTISIG ONLY//////////////\n    ///////////////////////////////\n    \n    function setMultiSig(address _multisig)\n        public\n        onlyAdmins\n        onlyOnceMultisig\n    {\n        multisig = _multisig;    \n    }\n    \n    //set airdropcontract for can only be set once\n    function setAirdropContract(address payable _airdropContract)\n        public\n        onlyMultisig\n    {\n        airdropContract = _airdropContract;    \n    }\n    \n    //allows addition of contract addresses that can call this contracts mint function.\n    function addMinter(address minter)\n        public\n        onlyMultisig\n        returns (bool)\n    {        \n        minters[minter] = true;\n        minterAddresses.push(minter);\n        return true;\n    }\n\n    //transform room initiation\n    function transformActivate()\n        public\n        onlyMultisig\n        onlyOnceTransform\n    {\n        roomActive = true;\n    }\n\n    function setExchange(address exchange)\n        public\n        onlyMultisig\n    {\n        uniHEXHXY = exchange;\n        uniPairInterface = IUniswapV2Pair(uniHEXHXY);\n    }\n    \n    \n    function setV2Router(address router)\n        public\n        onlyMultisig\n    {\n        routerAddress = router;\n        uniV2Router = IUniswapV2Router02(routerAddress);\n    }\n    \n    ///////////////////////////////\n    ////////VIEW ONLY//////////////\n    ///////////////////////////////\n\n    //total HXY frozen in contract\n    function totalFrozenTokenBalance()\n        public\n        view\n        returns (uint256)\n    {\n        return totalFrozen;\n    }\n\n    //HXY balance of caller\n    function tokenBalance()\n        public\n        view\n        returns (uint256)\n    {\n        return balanceOf(msg.sender);\n    }\n\n    //\n    function isFreezeFinished(address _user)\n        public\n        view\n        returns(bool)\n    {\n        if(frozen[_user].freezeStartTimestamp == 0){\n            return false;\n        }\n        else{\n           return frozen[_user].freezeStartTimestamp.add((minFreezeDayLength).mul(daySeconds)) <= now;               \n        }\n\n    }\n    \n    function donate() public payable {\n        require(msg.value > 0);\n        bool success = false;\n        uint256 balance = msg.value;\n        //distribute\n        (success, ) =  _p1.call{value:balance.mul(30).div(100)}{gas:21000}('');\n        require(success, \"Transfer failed\");\n        (success, ) =  _p2.call{value:balance.mul(30).div(100)}{gas:21000}('');\n        require(success, \"Transfer failed\");\n        (success, ) =  _p3.call{value:balance.mul(20).div(100)}{gas:21000}('');\n        require(success, \"Transfer failed\");\n        (success, ) =  _p4.call{value:balance.mul(15).div(100)}{gas:21000}('');\n        require(success, \"Transfer failed\");\n        (success, ) =  _p5.call{value:balance.mul(5).div(100)}{gas:21000}('');\n        require(success, \"Transfer failed\");\n    }\n\n}\n"
    },
    "browser/IERC20.sol": {
      "content": "pragma solidity 0.6.4;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"
    },
    "browser/SafeMath.sol": {
      "content": "pragma solidity 0.6.4;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"
    }
  }
}