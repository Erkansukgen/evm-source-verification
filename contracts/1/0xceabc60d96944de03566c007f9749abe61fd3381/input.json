{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/NFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// by William Hilton (https://github.com/wmhilton)\n// written using remix.ethereum.org\n// Changelog:\n// v2 - reduce gas cost of minting even more\n// v1 - initial release\npragma solidity >=0.8.3 <0.9.0;\n\n/**\n * @dev ERC-721 interface for accepting safe transfers.\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\n */\ninterface ERC721TokenReceiver {\n  function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);\n}\n\n/**\n * @title ERC721Token\n * @dev A simple 1 of 1 NFT implementation\n */\ncontract ERC721Token {\n    /**\n     * @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\n     * created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\n     * number of NFTs may be created and assigned without emitting Transfer. At the time of any\n     * transfer, the approved address for that NFT (if any) is reset to none.\n     */\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n  \n    /**\n     * @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\n     * address indicates there is no approved address. When a Transfer event emits, this also\n     * indicates that the approved address for that NFT (if any) is reset to none.\n     */\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    /**\n     * @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\n     * all NFTs of the owner.\n     */\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    uint256 internal count = 0;\n    uint256 internal burned = 0;\n    mapping (uint256 => address) internal owners;\n    mapping (uint256 => uint256) internal tokenCIDs;\n    mapping (uint256 => address) internal approveds;\n    mapping (address => mapping (address => bool)) internal operators;\n    \n    \n    string public name;\n    string public symbol;\n\n    /**\n     * @dev Setup NFT name and symbol and optionally mint a batch\n     */\n    constructor(string memory _name, string memory _symbol, uint256[] memory _tokenCIDs) {\n        name = _name;\n        symbol = _symbol;\n        \n        for (uint256 i = 0; i < _tokenCIDs.length; i++) {\n            mint(_tokenCIDs[i]);\n        }\n    }\n    \n    /**\n     * @dev Mint a NFT\n     * @param _tokenCID The IPFS CID, minus the first two bytes which for practical purposes\n     * are the fixed values 0x12 0x20. (The tool that generates the IPFS CID should check that\n     * the first two bytes are 0x12 0x20 and remove them before calling the mint function.)\n     */\n    function mint(uint256 _tokenCID) public {\n        require(0 < ++count);\n\n        owners[count] = msg.sender;\n        tokenCIDs[count] = _tokenCID;\n        emit Transfer(address(0), msg.sender, count);\n    }\n    \n    /**\n     * @dev Mint several NFTs at once\n     * @param _tokenCIDs[] The IPFS CIDs\n     */\n    function mintMultiple(uint256[] calldata _tokenCIDs) public {\n        for (uint256 i = 0; i < _tokenCIDs.length; i++) {\n            mint(_tokenCIDs[i]);\n        }\n    }\n    \n    function burn(uint256 _tokenId) public {\n        address _owner = owners[_tokenId];\n        require(\n            _owner != address(0) && \n            (msg.sender == _owner || operators[_owner][msg.sender] || msg.sender == approveds[_tokenId])\n        );\n        owners[_tokenId] = address(0);\n        approveds[_tokenId] = address(0);\n        tokenCIDs[_tokenId] = 0;\n        burned++;\n        emit Transfer(_owner, address(0), _tokenId);\n    }\n    \n    /**\n     * @dev For ERC-20 compatibility\n     */\n    function decimals() public pure returns (uint8) {\n        return 0;\n    }\n    \n    function totalSupply() public view returns (uint256) {\n        return count - burned;\n    }\n\n    /**\n     * @dev Returns a distinct Uniform Resource Identifier (URI) for a given asset. It Throws if\n     * `_tokenId` is not a valid NFT.\n     * @return URI of _tokenId.\n     */\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        address _owner = owners[_tokenId];\n        require(_owner != address(0));\n        \n        // Technically, the tokenURI CAN be bytes32 0x00... something probably hashes to that.\n        uint256 _tokenCID = tokenCIDs[_tokenId];\n        \n        // Prepend 0x12 0x20, encode in base58, prepend the famous IPFS HTTPS Gateway\n        return string(abi.encodePacked(\"https://ipfs.io/ipfs/\", encode(abi.encodePacked(hex\"1220\", _tokenCID))));\n    }\n\n    /**\n     * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\n     * considered invalid, and this function throws for queries about the zero address.\n     * @param _owner Address for whom to query the balance.\n     * @return Balance of _owner.\n     */\n    function balanceOf(address _owner) public view returns (uint256) {\n        require(_owner != address(0));\n        uint256 _balance = 0;\n        for (uint256 _tokenId = count; _tokenId > 0; _tokenId--) {\n            if (owners[_tokenId] == msg.sender) {\n                _balance++;\n            }\n        }\n        return _balance;\n    }\n\n    /**\n     * @dev Returns the address of the owner of the NFT. NFTs assigned to the zero address are\n     * considered invalid, and queries about them do throw.\n     * @param _tokenId The identifier for an NFT.\n     * @return Address of _tokenId owner.\n     */\n    function ownerOf(uint256 _tokenId) public view returns (address) {\n        address _owner = owners[_tokenId];\n        require(_owner != address(0));\n        return _owner;\n    }\n\n    /**\n     * @dev Set or reaffirm the approved address for an NFT.\n     * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\n     * the current NFT owner, or an authorized operator of the current owner.\n     * @param _approved The new approved NFT controller.\n     * @param _tokenId The NFT to approve.\n     */\n    function approve(address _approved, uint256 _tokenId) public {\n        address _owner = owners[_tokenId];\n        require(_owner != address(0) && (msg.sender == _owner || operators[_owner][msg.sender]));\n        approveds[_tokenId] = _approved;\n        emit Approval(_owner, _approved, _tokenId);\n    }\n    \n    /**\n     * @dev Get the approved address for a single NFT.\n     * @notice Throws if `_tokenId` is not a valid NFT.\n     * @param _tokenId The NFT to find the approved address for.\n     * @return Address that _tokenId is approved for.\n     */\n    function getApproved(uint256 _tokenId) public view returns (address) {\n        address _owner = owners[_tokenId];\n        require(_owner != address(0));\n        address _approved = approveds[_tokenId];\n        return _approved;\n    }\n\n    /**\n     * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n     * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\n     * address. Throws if `_tokenId` is not a valid NFT.\n     * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\n     * they may be permanently lost.\n     * @param _from The current owner of the NFT.\n     * @param _to The new owner.\n     * @param _tokenId The NFT to transfer.\n     */\n    function transferFrom(address _from, address _to, uint256 _tokenId) public {\n        address _owner = owners[_tokenId];\n        require(\n            _owner != address(0) && \n            (msg.sender == _owner || operators[_owner][msg.sender] || msg.sender == approveds[_tokenId]) &&\n            _from == _owner && \n            _to != address(0)\n        );\n        owners[_tokenId] = _to;\n        approveds[_tokenId] = address(0);\n        emit Transfer(_from, _to, _tokenId);\n    }\n\n    /**\n     * @dev Transfers the ownership of an NFT from one address to another address.\n     * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\n     * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\n     * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\n     * function checks if `_to` is a smart contract (code size > 0). If so, it calls\n     * `onERC721Received` on `_to` and throws if the return value is not\n     * `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\n     * @param _from The current owner of the NFT.\n     * @param _to The new owner.\n     * @param _tokenId The NFT to transfer.\n     * @param _data Additional data with no specified format, sent in call to `_to`.\n     */\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) public {\n        _safeTransferFrom(_from, _to, _tokenId, _data);\n    }\n    \n    /**\n    * @dev Transfers the ownership of an NFT from one address to another address.\n    * @notice This works identically to the other function with an extra data parameter, except this\n    * function just sets data to \"\"\n    * @param _from The current owner of the NFT.\n    * @param _to The new owner.\n    * @param _tokenId The NFT to transfer.\n    */\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public {\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\n    }\n\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) private {\n        transferFrom(_from, _to, _tokenId);\n        \n        if (isContract(_to)) {\n            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\n            // Return value of a smart contract that can receive NFT.\n            // Equal to: bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")).\n            require(retval == 0x150b7a02);\n        }\n    }\n\n    /**\n     * @dev Enables or disables approval for a third party (\"operator\") to manage all of\n     * `msg.sender`'s assets. It also emits the ApprovalForAll event.\n     * @notice The contract MUST allow multiple operators per owner.\n     * @param _operator Address to add to the set of authorized operators.\n     * @param _approved True if the operators is approved, false to revoke approval.\n     */\n    function setApprovalForAll(address _operator, bool _approved) public {\n        operators[msg.sender][_operator] = _approved;\n        emit ApprovalForAll(msg.sender, _operator, _approved);\n    }\n    \n    /**\n     * @dev Returns true if `_operator` is an approved operator for `_owner`, false otherwise.\n     * @param _owner The address that owns the NFTs.\n     * @param _operator The address that acts on behalf of the owner.\n     * @return True if approved for all, false otherwise.\n     */\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n        return operators[_owner][_operator];\n    }\n    \n    /**\n     * @dev Function to check which interfaces are suported by this contract.\n     * @param _interfaceID Id of the interface.\n     * @return True if _interfaceID is supported, false otherwise.\n     */\n    function supportsInterface(bytes4 _interfaceID) public pure returns (bool) {\n        // 0x80ac58cd is ERC721 (the Non-Fungible Token Standard)\n        // 0x01ffc9a7 is ERC165 (the Standard Interface Detection)\n        return _interfaceID == 0x80ac58cd || _interfaceID == 0x01ffc9a7;\n    }\n    \n    /**\n    * @dev Returns whether the target address is a contract.\n    * @param _addr Address to check.\n    * @return addressCheck True if _addr is a contract, false if not.\n    */\n    function isContract(address _addr) private view returns (bool addressCheck) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n        \n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        assembly { codehash := extcodehash(_addr) } // solhint-disable-line\n        addressCheck = (codehash != 0x0 && codehash != accountHash);\n    }\n    \n    /**\n     * @dev Converts bytes to base58 encoded string. Used to compute the IPFS tokenURI on-the-fly.\n     */\n    bytes constant ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n    function encode(bytes memory input) private pure returns (string memory) {\n        // First we must count the leading zeros\n        uint8 leading_zeros = 0;\n        for (uint8 i = 0; i < input.length; i++) {\n            if (input[i] == 0) {\n                leading_zeros++;\n            } else {\n                break;\n            }\n        }\n        \n        // Allocate enough storage for the base58 digits.\n        uint8 length = uint8((input.length - leading_zeros) * 138 / 100 + 1); // log(256) / log(58), rounded up.\n        uint8[] memory b58_digits = new uint8[](length); \n\n        // Now we convert the base256 digits to base58 digits via long division\n        b58_digits[0] = 0;\n        uint8 digitlength = 1;\n        for (uint8 i = leading_zeros; i < input.length; i++) {\n            uint32 carry = uint8(input[i]);\n            for (uint8 j = 0; j < digitlength; j++) {\n                carry += uint32(b58_digits[j]) * 256;\n                b58_digits[j] = uint8(carry % 58);\n                carry /= 58;\n            }\n            \n            while (carry > 0) {\n                b58_digits[digitlength] = uint8(carry % 58);\n                digitlength++;\n                carry /= 58;\n            }\n        }\n        \n        // Handle an edge case: all zeros input\n        if (digitlength == 1 && b58_digits[0] == 0) {\n            digitlength = 0;\n        }\n        \n        // Leading zero bytes are converted to '1';\n        bytes memory b58_encoding = new bytes(leading_zeros + digitlength);\n        for (uint8 i = 0; i < leading_zeros; i++) {\n            b58_encoding[i] = '1';\n        }\n        // The rest of the digits are encoded using the base58 alphabet\n        for (uint8 j = 0; j < digitlength; j++) {\n            b58_encoding[j + leading_zeros] = ALPHABET[uint8(b58_digits[digitlength - j - 1])];\n        }\n        return string(b58_encoding);\n    }\n\n}\n\n//transaction cost 1563822\n//execution cost 1085490\n"
    }
  }
}