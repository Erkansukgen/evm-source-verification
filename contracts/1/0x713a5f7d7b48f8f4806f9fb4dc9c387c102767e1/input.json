{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":999},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Composite_Vaults/CompositeVaultBank.2.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private initializing;\n\n    /**\n     * @dev Modifier to use in the initializer function of a contract.\n     */\n    modifier initializer() {\n        require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n        bool isTopLevelCall = !initializing;\n        if (isTopLevelCall) {\n            initializing = true;\n            initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function isConstructor() private view returns (bool) {\n        // extcodesize checks the size of the code stored in an address, and\n        // address returns the current address. Since the code is still not\n        // deployed when running a constructor, any checks on its code size will\n        // yield zero, making it an effective way to detect if a contract is\n        // under construction or not.\n        address self = address(this);\n        uint256 cs;\n        assembly {cs := extcodesize(self)}\n        return cs == 0;\n    }\n\n    // Reserved storage space to allow for layout changes in the future.\n    uint256[50] private ______gap;\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextUpgradeSafe is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n\n\n    }\n\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n\n    uint256[50] private __gap;\n}\n\ninterface IVaultMaster {\n    function bank(address) view external returns (address);\n    function isVault(address) view external returns (bool);\n    function isController(address) view external returns (bool);\n    function isStrategy(address) view external returns (bool);\n\n    function slippage(address) view external returns (uint);\n    function convertSlippage(address _input, address _output) view external returns (uint);\n\n    function valueToken() view external returns (address);\n    function govVault() view external returns (address);\n    function insuranceFund() view external returns (address);\n    function performanceReward() view external returns (address);\n\n    function govVaultProfitShareFee() view external returns (uint);\n    function gasFee() view external returns (uint);\n    function insuranceFee() view external returns (uint);\n\n    function withdrawalProtectionFee() view external returns (uint);\n}\n\ninterface ICompositeVault {\n    function cap() external view returns (uint);\n    function getConverter() external view returns (address);\n    function getVaultMaster() external view returns (address);\n    function balance() external view returns (uint);\n    function tvl() external view returns (uint); // total dollar value\n    function token() external view returns (address);\n    function available() external view returns (uint);\n    function accept(address _input) external view returns (bool);\n\n    function earn() external;\n    function harvest(address reserve, uint amount) external;\n    function addNewCompound(uint, uint) external;\n\n    function withdraw_fee(uint _shares) external view returns (uint);\n    function calc_token_amount_deposit(address _input, uint _amount) external view returns (uint);\n    function calc_add_liquidity(uint _amount0, uint _amount1) external view returns (uint);\n    function calc_token_amount_withdraw(uint _shares, address _output) external view returns (uint);\n    function calc_remove_liquidity(uint _shares) external view returns (uint _amount0, uint _amount1);\n\n    function getPricePerFullShare() external view returns (uint);\n    function get_virtual_price() external view returns (uint); // average dollar value of vault share token\n\n    function deposit(address _input, uint _amount, uint _min_mint_amount) external returns (uint);\n    function depositFor(address _account, address _to, address _input, uint _amount, uint _min_mint_amount) external returns (uint _mint_amount);\n    function addLiquidity(uint _amount0, uint _amount1, uint _min_mint_amount) external returns (uint);\n    function addLiquidityFor(address _account, address _to, uint _amount0, uint _amount1, uint _min_mint_amount) external returns (uint _mint_amount);\n    function withdraw(uint _shares, address _output, uint _min_output_amount) external returns (uint);\n    function withdrawFor(address _account, uint _shares, address _output, uint _min_output_amount) external returns (uint _output_amount);\n\n    function harvestStrategy(address _strategy) external;\n    function harvestAllStrategies() external;\n}\n\ninterface ILpPairConverter {\n    function lpPair() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n\n    function accept(address _input) external view returns (bool);\n    function get_virtual_price() external view returns (uint);\n\n    function convert_rate(address _input, address _output, uint _inputAmount) external view returns (uint _outputAmount);\n    function calc_add_liquidity(uint _amount0, uint _amount1) external view returns (uint);\n    function calc_remove_liquidity(uint _shares) external view returns (uint _amount0, uint _amount1);\n\n    function convert(address _input, address _output, address _to) external returns (uint _outputAmount);\n    function add_liquidity(address _to) external returns (uint _outputAmount);\n    function remove_liquidity(address _to) external returns (uint _amount0, uint _amount1);\n}\n\ninterface IFreeFromUpTo {\n    function freeFromUpTo(address from, uint value) external returns (uint freed);\n}\n\ncontract CompositeVaultBank is ContextUpgradeSafe {\n    using Address for address;\n    using SafeMath for uint;\n    using SafeERC20 for IERC20;\n\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n\n    modifier discountCHI(uint8 _flag) {\n        if ((_flag & 0x1) == 0) {\n            _;\n        } else {\n            uint gasStart = gasleft();\n            _;\n            uint gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\n        }\n    }\n\n    address public governance;\n    address public strategist; // who can call harvestXXX() and update reward rate\n\n    IVaultMaster public vaultMaster;\n\n    struct UserInfo {\n        uint amount;\n        uint rewardDebt;\n        uint accumulatedEarned; // will accumulate every time user harvest\n        uint lastStakeTime;\n        uint unclaimedReward;\n    }\n\n    struct RewardPoolInfo {\n        IERC20 rewardToken;     // Address of rewardPool token contract.\n        uint lastRewardBlock;   // Last block number that rewardPool distribution occurs.\n        uint endRewardBlock;    // Block number which rewardPool distribution ends.\n        uint rewardPerBlock;    // Reward token amount to distribute per block.\n        uint rewardLockedTime;  // Time to lock reward (in seconds).\n        uint accRewardPerShare; // Accumulated rewardPool per share, times 1e18.\n        uint totalPaidRewards;  // for stat only\n    }\n\n    mapping(address => RewardPoolInfo) public rewardPoolInfo; // vault address => reward info\n    mapping(address => mapping(address => UserInfo)) public userInfo; // vault address => account => userInfo\n\n    bool public acceptContractDepositor = false;\n    mapping(address => bool) public whitelistedContract;\n\n    event Deposit(address indexed vault, address indexed user, uint amount);\n    event Withdraw(address indexed vault, address indexed user, uint amount);\n    event RewardPaid(address indexed vault, address indexed user, uint reward);\n\n    function initialize(IVaultMaster _vaultMaster) public initializer {\n        vaultMaster = _vaultMaster;\n        governance = msg.sender;\n        strategist = msg.sender;\n    }\n\n    modifier onlyGovernance() {\n        require(msg.sender == governance, \"!governance\");\n        _;\n    }\n\n    /**\n     * @dev Throws if called by a not-whitelisted contract while we do not accept contract depositor.\n     */\n    modifier checkContract() {\n        if (!acceptContractDepositor && !whitelistedContract[msg.sender]) {\n            require(!address(msg.sender).isContract() && msg.sender == tx.origin, \"contract not support\");\n        }\n        _;\n    }\n\n    function setAcceptContractDepositor(bool _acceptContractDepositor) external onlyGovernance {\n        acceptContractDepositor = _acceptContractDepositor;\n    }\n\n    function whitelistContract(address _contract) external onlyGovernance {\n        whitelistedContract[_contract] = true;\n    }\n\n    function unwhitelistContract(address _contract) external onlyGovernance {\n        whitelistedContract[_contract] = false;\n    }\n\n    function setGovernance(address _governance) external onlyGovernance {\n        governance = _governance;\n    }\n\n    function setStrategist(address _strategist) external onlyGovernance {\n        strategist = _strategist;\n    }\n\n    function setVaultMaster(IVaultMaster _vaultMaster) external onlyGovernance {\n        vaultMaster = _vaultMaster;\n    }\n\n    function addPool(address _vault, IERC20 _rewardToken, uint _startBlock, uint _endRewardBlock, uint _rewardPerBlock, uint _rewardLockedTime) external onlyGovernance {\n        _startBlock = (block.number > _startBlock) ? block.number : _startBlock;\n        require(_startBlock <= _endRewardBlock, \"sVB>eVB\");\n        rewardPoolInfo[_vault].rewardToken = _rewardToken;\n        rewardPoolInfo[_vault].lastRewardBlock = _startBlock;\n        rewardPoolInfo[_vault].endRewardBlock = _endRewardBlock;\n        rewardPoolInfo[_vault].rewardPerBlock = _rewardPerBlock;\n        rewardPoolInfo[_vault].rewardLockedTime = _rewardLockedTime;\n        rewardPoolInfo[_vault].accRewardPerShare = 0;\n        rewardPoolInfo[_vault].totalPaidRewards = 0;\n    }\n\n    function updatePool(address _vault, uint _endRewardBlock, uint _rewardPerBlock, uint _rewardLockedTime) external {\n        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\n        updateReward(_vault);\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_vault];\n        require(block.number <= rewardPool.endRewardBlock, \"late\");\n        rewardPool.endRewardBlock = _endRewardBlock;\n        rewardPool.rewardPerBlock = _rewardPerBlock;\n        rewardPool.rewardLockedTime = _rewardLockedTime;\n    }\n\n    function updatePoolReward(address[] calldata _vaults, uint[] calldata _rewardPerBlocks) external {\n        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\n        uint leng = _vaults.length;\n        uint currTotalRwd = 0;\n        uint updatedTotalRwd = 0;\n        for (uint i = 0; i < leng; i++) {\n            address _vault = _vaults[i];\n            RewardPoolInfo storage rewardPool = rewardPoolInfo[_vault];\n            if (block.number < rewardPool.endRewardBlock) {\n                updateReward(_vault);\n                currTotalRwd = currTotalRwd.add(rewardPool.rewardPerBlock);\n                updatedTotalRwd = updatedTotalRwd.add(_rewardPerBlocks[i]);\n                rewardPool.rewardPerBlock = _rewardPerBlocks[i];\n            }\n        }\n        require(currTotalRwd <= updatedTotalRwd.mul(4), \"over increased\");\n        require(currTotalRwd.mul(4) >= updatedTotalRwd, \"over decreased\");\n    }\n\n    function updateReward(address _vault) public {\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_vault];\n        uint _endRewardBlockApplicable = block.number > rewardPool.endRewardBlock ? rewardPool.endRewardBlock : block.number;\n        if (_endRewardBlockApplicable > rewardPool.lastRewardBlock) {\n            uint lpSupply = IERC20(address(_vault)).balanceOf(address(this));\n            if (lpSupply > 0) {\n                uint _numBlocks = _endRewardBlockApplicable.sub(rewardPool.lastRewardBlock);\n                uint _incRewardPerShare = _numBlocks.mul(rewardPool.rewardPerBlock).mul(1e18).div(lpSupply);\n                rewardPool.accRewardPerShare = rewardPool.accRewardPerShare.add(_incRewardPerShare);\n            }\n            rewardPool.lastRewardBlock = _endRewardBlockApplicable;\n        }\n    }\n\n    function cap(ICompositeVault _vault) external view returns (uint) {\n        return _vault.cap();\n    }\n\n    function approveForSpender(IERC20 _token, address _spender, uint _amount) external onlyGovernance {\n        require(!vaultMaster.isVault(address(_token)), \"vaultToken\");\n        _token.safeApprove(_spender, _amount);\n    }\n\n    function calculateMultiMinReceive(ICompositeVault[] calldata _vaults, address _input, uint[] calldata _amounts) external view returns (uint[] memory minReceives) {\n        require(_vaults.length == _amounts.length, \"Invalid input length data\");\n        uint leng = _vaults.length;\n        minReceives = new uint[](leng);\n        for (uint i = 0; i < leng; i++) {\n            ICompositeVault vault = _vaults[i];\n            minReceives[i] = ILpPairConverter(vault.getConverter()).convert_rate(_input, vault.token(), _amounts[i]);\n        }\n    }\n\n    function depositMultiVault(ICompositeVault[] calldata _vaults, address _input, uint[] calldata _amounts, uint[] calldata _min_mint_amounts, bool _isStake, uint8 _flag) public discountCHI(_flag) {\n        uint leng = _vaults.length;\n        for (uint i = 0; i < leng; i++) {\n            deposit(_vaults[i], _input, _amounts[i], _min_mint_amounts[i], _isStake, uint8(0));\n        }\n    }\n\n    function deposit(ICompositeVault _vault, address _input, uint _amount, uint _min_mint_amount, bool _isStake, uint8 _flag) public discountCHI(_flag) checkContract {\n        require(_vault.accept(_input), \"vault does not accept this asset\");\n        require(_amount > 0, \"!_amount\");\n\n        IERC20(_input).safeTransferFrom(msg.sender, address(this), _amount);\n        IERC20(_input).safeIncreaseAllowance(address(_vault), _amount);\n\n        address _token = _vault.token();\n        uint _mint_amount;\n        if (_token == _input || (_flag & 0x10) > 0) { // bit #1 is to enable donate dust\n            _mint_amount = _vault.deposit(_input, _amount, _min_mint_amount);\n        } else {\n            ILpPairConverter _cnvrt = ILpPairConverter(_vault.getConverter());\n            IERC20 _token0 = IERC20(_cnvrt.token0());\n            IERC20 _token1 = IERC20(_cnvrt.token1());\n            uint _before0 = _token0.balanceOf(address(this));\n            uint _before1 = _token1.balanceOf(address(this));\n            _mint_amount = _vault.deposit(_input, _amount, _min_mint_amount);\n            uint _after0 = _token0.balanceOf(address(this));\n            uint _after1 = _token1.balanceOf(address(this));\n            if (_after0 > _before0) {\n                _token0.safeTransfer(msg.sender, _after0.sub(_before0));\n            }\n            if (_after1 > _before1) {\n                _token1.safeTransfer(msg.sender, _after1.sub(_before1));\n            }\n        }\n        if (!_isStake) {\n            IERC20(address(_vault)).safeTransfer(msg.sender, _mint_amount);\n        } else {\n            _stakeVaultShares(address(_vault), _mint_amount);\n        }\n    }\n\n    function transferVault(ICompositeVault _srcVault, ICompositeVault _destVault, uint _srcShares, uint _min_mint_amount, bool _isStake, uint8 _flag) public discountCHI(_flag) checkContract {\n        address _srcVaultToken = _srcVault.token();\n        require(_destVault.accept(_srcVaultToken), \"_destVault does not accept _srcVault asset\");\n        require(_srcShares > 0, \"!_srcShares\");\n\n        uint _depositAmt;\n        {\n            uint _wdAmt = _withdraw(address(_srcVault), _srcShares);\n            uint _before = IERC20(_srcVaultToken).balanceOf(address(this));\n            _srcVault.withdraw(_wdAmt, _srcVaultToken, 1);\n            uint _after = IERC20(_srcVaultToken).balanceOf(address(this));\n            _depositAmt = _after.sub(_before);\n        }\n\n        IERC20(_srcVaultToken).safeIncreaseAllowance(address(_destVault), _depositAmt);\n\n        uint _mint_amount;\n        if (_destVault.token() == _srcVaultToken || (_flag & 0x10) > 0) { // bit #1 is to enable donate dust\n            _mint_amount = _destVault.deposit(_srcVaultToken, _depositAmt, _min_mint_amount);\n        } else {\n            IERC20 _token0;\n            IERC20 _token1;\n            {\n                ILpPairConverter _cnvrt = ILpPairConverter(_destVault.getConverter());\n                _token0 = IERC20(_cnvrt.token0());\n                _token1 = IERC20(_cnvrt.token1());\n            }\n            uint _before0 = _token0.balanceOf(address(this));\n            uint _before1 = _token1.balanceOf(address(this));\n            _mint_amount = _destVault.deposit(_srcVaultToken, _depositAmt, _min_mint_amount);\n            uint _after0 = _token0.balanceOf(address(this));\n            uint _after1 = _token1.balanceOf(address(this));\n            if (_after0 > _before0) {\n                _token0.safeTransfer(msg.sender, _after0.sub(_before0));\n            }\n            if (_after1 > _before1) {\n                _token1.safeTransfer(msg.sender, _after1.sub(_before1));\n            }\n        }\n\n        if (!_isStake) {\n            IERC20(address(_destVault)).safeTransfer(msg.sender, _mint_amount);\n        } else {\n            _stakeVaultShares(address(_destVault), _mint_amount);\n        }\n    }\n\n    function stakeVaultShares(address _vault, uint _shares, uint8 _flag) public discountCHI(_flag) {\n        uint _before = IERC20(address(_vault)).balanceOf(address(this));\n        IERC20(address(_vault)).safeTransferFrom(msg.sender, address(this), _shares);\n        uint _after = IERC20(address(_vault)).balanceOf(address(this));\n        _shares = _after.sub(_before); // Additional check for deflationary tokens\n        _stakeVaultShares(_vault, _shares);\n    }\n\n    function _stakeVaultShares(address _vault, uint _shares) internal {\n        UserInfo storage user = userInfo[_vault][msg.sender];\n        user.lastStakeTime = block.timestamp;\n        updateReward(_vault);\n        if (user.amount > 0) {\n            getReward(_vault, msg.sender, uint8(0));\n        }\n        user.amount = user.amount.add(_shares);\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_vault];\n        user.rewardDebt = user.amount.mul(rewardPool.accRewardPerShare).div(1e18);\n        emit Deposit(_vault, msg.sender, _shares);\n    }\n\n    function unfrozenStakeTime(address _vault, address _account) public view returns (uint) {\n        UserInfo storage user = userInfo[_vault][_account];\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_vault];\n        return user.lastStakeTime + rewardPool.rewardLockedTime;\n    }\n\n    function unstake(address _vault, uint _amount, uint8 _flag) public discountCHI(_flag) {\n        UserInfo storage user = userInfo[_vault][msg.sender];\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_vault];\n        updateReward(_vault);\n        if (user.amount > 0) {\n            getReward(_vault, msg.sender, uint8(0));\n            if (user.lastStakeTime + rewardPool.rewardLockedTime > block.timestamp) {\n                user.unclaimedReward = 0;\n            } else if (user.unclaimedReward > 0) {\n                safeTokenTransfer(rewardPool.rewardToken, msg.sender, user.unclaimedReward);\n                user.unclaimedReward = 0;\n            }\n        }\n        if (_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            IERC20(address(_vault)).safeTransfer(msg.sender, _amount);\n        }\n        user.rewardDebt = user.amount.mul(rewardPool.accRewardPerShare).div(1e18);\n        emit Withdraw(_vault, msg.sender, _amount);\n    }\n\n    function claimReward(address _vault, uint8 _flag) public discountCHI(_flag) {\n        UserInfo storage user = userInfo[_vault][msg.sender];\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_vault];\n        require(user.lastStakeTime + rewardPool.rewardLockedTime <= block.timestamp, \"locked rewards\");\n        getReward(_vault, msg.sender, uint8(0));\n        uint _pendingReward = user.unclaimedReward;\n        if (_pendingReward > 0) {\n            safeTokenTransfer(rewardPool.rewardToken, msg.sender, _pendingReward);\n            user.unclaimedReward = 0;\n        }\n    }\n\n    // using PUSH pattern\n    function getReward(address _vault, address _account, uint8 _flag) public discountCHI(_flag) {\n        updateReward(_vault);\n        UserInfo storage user = userInfo[_vault][_account];\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_vault];\n        uint _pendingReward = user.amount.mul(rewardPool.accRewardPerShare).div(1e18).sub(user.rewardDebt);\n        if (_pendingReward > 0) {\n            user.accumulatedEarned = user.accumulatedEarned.add(_pendingReward);\n            rewardPool.totalPaidRewards = rewardPool.totalPaidRewards.add(_pendingReward);\n            // safeTokenTransfer(rewardPool.rewardToken, _account, _pendingReward);\n            user.unclaimedReward = user.unclaimedReward.add(_pendingReward);\n            emit RewardPaid(_vault, _account, _pendingReward);\n            user.rewardDebt = user.amount.mul(rewardPool.accRewardPerShare).div(1e18);\n        }\n    }\n\n    function pendingReward(address _vault, address _account) public view returns (uint _pending) {\n        UserInfo storage user = userInfo[_vault][_account];\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_vault];\n        uint _accRewardPerShare = rewardPool.accRewardPerShare;\n        uint lpSupply = IERC20(_vault).balanceOf(address(this));\n        uint _endRewardBlockApplicable = block.number > rewardPool.endRewardBlock ? rewardPool.endRewardBlock : block.number;\n        if (_endRewardBlockApplicable > rewardPool.lastRewardBlock && lpSupply != 0) {\n            uint _numBlocks = _endRewardBlockApplicable.sub(rewardPool.lastRewardBlock);\n            uint _incRewardPerShare = _numBlocks.mul(rewardPool.rewardPerBlock).mul(1e18).div(lpSupply);\n            _accRewardPerShare = _accRewardPerShare.add(_incRewardPerShare);\n        }\n        _pending = user.amount.mul(_accRewardPerShare).div(1e18).sub(user.rewardDebt);\n        _pending = _pending.add(user.unclaimedReward);\n    }\n\n    function shares_owner(address _vault, address _account) public view returns (uint) {\n        return IERC20(_vault).balanceOf(_account).add(userInfo[_vault][_account].amount);\n    }\n\n    // No rebalance implementation for lower fees and faster swaps\n    function withdraw(address _vault, uint _shares, address _output, uint _min_output_amount, uint8 _flag) public discountCHI(_flag) {\n        uint _wdAmt = _withdraw(_vault, _shares);\n        ICompositeVault(_vault).withdrawFor(msg.sender, _wdAmt, _output, _min_output_amount);\n    }\n\n    function _withdraw(address _vault, uint _shares) internal returns (uint){\n        uint _userBal = IERC20(address(_vault)).balanceOf(msg.sender);\n        if (_shares > _userBal) {\n            uint _need = _shares.sub(_userBal);\n            require(_need <= userInfo[_vault][msg.sender].amount, \"_userBal+staked < _shares\");\n            unstake(_vault, _need, uint8(0));\n        }\n        uint _before = IERC20(address(_vault)).balanceOf(address(this));\n        IERC20(address(_vault)).safeTransferFrom(msg.sender, address(this), _shares);\n        uint _after = IERC20(address(_vault)).balanceOf(address(this));\n        return _after.sub(_before);\n    }\n\n    function exit(address _vault, address _output, uint _min_output_amount, uint8 _flag) external discountCHI(_flag) {\n        unstake(_vault, userInfo[_vault][msg.sender].amount, uint8(0));\n        withdraw(_vault, IERC20(address(_vault)).balanceOf(msg.sender), _output, _min_output_amount, uint8(0));\n    }\n\n    function withdraw_fee(ICompositeVault _vault, uint _shares) external view returns (uint) {\n        return _vault.withdraw_fee(_shares);\n    }\n\n    function calc_token_amount_deposit(ICompositeVault _vault, address _input, uint _amount) external view returns (uint) {\n        return _vault.calc_token_amount_deposit(_input, _amount);\n    }\n\n    function calc_token_amount_withdraw(ICompositeVault _vault, uint _shares, address _output) external view returns (uint) {\n        return _vault.calc_token_amount_withdraw(_shares, _output);\n    }\n\n    function calc_transfer_vault_shares(ICompositeVault _srcVault, ICompositeVault _destVault, uint _srcShares) external view returns (uint) {\n        address _srcVaultToken = _srcVault.token();\n        uint _amount = _srcVault.calc_token_amount_withdraw(_srcShares, _srcVaultToken);\n        return _destVault.calc_token_amount_deposit(_srcVaultToken, _amount);\n    }\n\n    function harvestAllStrategies(ICompositeVault _vault, uint8 _flag) external discountCHI(_flag) {\n        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\n        _vault.harvestAllStrategies();\n    }\n\n    // Safe token transfer function, just in case if rounding error causes vinfo to not have enough token.\n    function safeTokenTransfer(IERC20 _token, address _to, uint _amount) internal {\n        uint bal = _token.balanceOf(address(this));\n        if (_amount > bal) {\n            _token.safeTransfer(_to, bal);\n        } else {\n            _token.safeTransfer(_to, _amount);\n        }\n    }\n\n    /**\n     * This function allows governance to take unsupported tokens out of the contract. This is in an effort to make someone whole, should they seriously mess up.\n     * There is no guarantee governance will vote to return these. It also allows for removal of airdropped tokens.\n     */\n    function governanceRecoverUnsupported(IERC20 _token, uint amount, address to) external {\n        require(msg.sender == governance, \"!governance\");\n        require(!vaultMaster.isVault(address(_token)), \"vaultToken\");\n        _token.safeTransfer(to, amount);\n    }\n}\n"}}}