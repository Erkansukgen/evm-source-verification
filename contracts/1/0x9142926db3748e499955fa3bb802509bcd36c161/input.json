{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":10000},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"/Users/igor/job/dev/defi-sdk/contracts/ERC20.sol":{"content":"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\n\ninterface ERC20 {\n    function approve(address, uint256) external returns (bool);\n    function transfer(address, uint256) external returns (bool);\n    function transferFrom(address, address, uint256) external returns (bool);\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address) external view returns (uint256);\n}\n"},"/Users/igor/job/dev/defi-sdk/contracts/adapters/ProtocolAdapter.sol":{"content":"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/**\n * @title Protocol adapter interface.\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ninterface ProtocolAdapter {\n\n    /**\n     * @dev MUST return \"Asset\" or \"Debt\".\n     * SHOULD be implemented by the public constant state variable.\n     */\n    function adapterType() external pure returns (string memory);\n\n    /**\n     * @dev MUST return token type (default is \"ERC20\").\n     * SHOULD be implemented by the public constant state variable.\n     */\n    function tokenType() external pure returns (string memory);\n\n    /**\n     * @dev MUST return amount of the given token locked on the protocol by the given account.\n     */\n    function getBalance(address token, address account) external view returns (uint256);\n}\n"},"/Users/igor/job/dev/defi-sdk/contracts/adapters/zlot/ZlotStakingAdapter.sol":{"content":"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\nimport { ERC20 } from \"../../ERC20.sol\";\nimport { ProtocolAdapter } from \"../ProtocolAdapter.sol\";\n\n\n/**\n * @dev StakingRewards contract interface.\n * Only the functions required for YearnStakingV1Adapter contract are added.\n * The StakingRewards contract is available here\n * github.com/Synthetixio/synthetix/blob/master/contracts/StakingRewards.sol.\n */\ninterface StakingRewards {\n    function earned(address) external view returns (uint256);\n}\n\n\n/**\n * @title Adapter for zlot.finance protocol.\n * @dev Implementation of ProtocolAdapter interface.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ncontract ZlotStakingAdapter is ProtocolAdapter {\n\n    string public constant override adapterType = \"Asset\";\n\n    string public constant override tokenType = \"ERC20\";\n\n    address internal constant ZLOT = 0xA8e7AD77C60eE6f30BaC54E2E7c0617Bd7B5A03E;\n\n    address internal constant UNI_HEGIC_ZHEGIC = 0x6Ddc12eF2940137F89af63F05196a4c9D4883Ee4;\n    address internal constant UNI_WETH_ZHEGIC = 0x2855d51a6c054e5e879BfcE18e3a028aE5c190F7;\n    address internal constant UNI_HEGIC_DAI = 0x502700F282e6BfC2Bb3b805893fAdFfaCf688e7b;\n    address internal constant UNI_DAI_ZLOT = 0x48598b64d88aB649e49e82f9e328eEeE5011a8ff;\n\n    address internal constant UNI_HEGIC_ZHEGIC_POOL = 0xeA21E881521aAbf9D5063d0c036996C4D26A82e7;\n    address internal constant UNI_WETH_ZHEGIC_POOL = 0x27f405bdd5a0A90856f5Fe408165825fe2f2D26C;\n    address internal constant UNI_HEGIC_DAI_POOL = 0xf2545371545A1c45f1646bAE2AD338cF683B3dA6;\n    address internal constant UNI_DAI_ZLOT_POOL = 0x0fd7379436E2aCBa072913c6c8dDB8D6A2f62Acf;\n\n    /**\n     * @return Amount of staked tokens / rewards earned after staking for a given account.\n     * @dev Implementation of ProtocolAdapter interface function.\n     */\n    function getBalance(address token, address account) external view override returns (uint256) {\n        if (token == ZLOT) {\n            uint256 totalRewards = 0;\n\n            totalRewards += StakingRewards(UNI_HEGIC_ZHEGIC_POOL).earned(account);\n            totalRewards += StakingRewards(UNI_WETH_ZHEGIC_POOL).earned(account);\n            totalRewards += StakingRewards(UNI_HEGIC_DAI_POOL).earned(account);\n            totalRewards += StakingRewards(UNI_DAI_ZLOT_POOL).earned(account);\n\n            return totalRewards;\n        } else if (token == UNI_HEGIC_ZHEGIC) {\n            return ERC20(UNI_HEGIC_ZHEGIC_POOL).balanceOf(account);\n        } else if (token == UNI_WETH_ZHEGIC) {\n            return ERC20(UNI_WETH_ZHEGIC_POOL).balanceOf(account);\n        } else if (token == UNI_HEGIC_DAI) {\n            return ERC20(UNI_HEGIC_DAI_POOL).balanceOf(account);\n        } else if (token == UNI_DAI_ZLOT) {\n            return ERC20(UNI_DAI_ZLOT_POOL).balanceOf(account);\n        } else {\n            return 0;\n        }\n    }\n}\n"}}}