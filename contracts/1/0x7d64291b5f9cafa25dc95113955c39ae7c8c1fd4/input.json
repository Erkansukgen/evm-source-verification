{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/CurveExchangeAdapterBiconomy.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2020-05-18\n*/\n\n/**\n *Submitted for verification at Etherscan.io on 2020-01-23\n*/\n\n// File: github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/Context.sol\n\npragma solidity ^0.6.0;\n\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a); // dev: overflow\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a); // dev: underflow\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b); // dev: overflow\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0); // dev: divide by zero\n        c = a / b;\n    }\n}\n\ncontract EIP712Base {\n\n    struct EIP712Domain {\n        string name;\n        string version;\n        uint256 chainId;\n        address verifyingContract;\n    }\n\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(bytes(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"));\n\n    bytes32 internal domainSeperator;\n\n    constructor(string memory name, string memory version) public {\n        domainSeperator = keccak256(abi.encode(\n\t\t\tEIP712_DOMAIN_TYPEHASH,\n\t\t\tkeccak256(bytes(name)),\n\t\t\tkeccak256(bytes(version)),\n\t\t\tgetChainID(),\n\t\t\taddress(this)\n\t\t));\n    }\n\n    function getChainID() internal pure returns (uint256 id) {\n\t\tassembly {\n\t\t\tid := chainid()\n\t\t}\n\t}\n\n    function getDomainSeperator() private view returns(bytes32) {\n\t\treturn domainSeperator;\n\t}\n\n    /**\n    * Accept message hash and returns hash message in EIP712 compatible form\n    * So that it can be used to recover signer from signature signed using EIP712 formatted data\n    * https://eips.ethereum.org/EIPS/eip-712\n    * \"\\\\x19\" makes the encoding deterministic\n    * \"\\\\x01\" is the version byte to make it compatible to EIP-191\n    */\n    function toTypedMessageHash(bytes32 messageHash) internal view returns(bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", getDomainSeperator(), messageHash));\n    }\n\n}\n\npragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\ncontract EIP712MetaTransaction is EIP712Base {\n    using SafeMath for uint256;\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(bytes(\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\"));\n\n    event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\n    mapping(address => uint256) nonces;\n\n    /*\n     * Meta transaction structure.\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\n     * He should call the desired function directly in that case.\n     */\n    struct MetaTransaction {\n\t\tuint256 nonce;\n\t\taddress from;\n        bytes functionSignature;\n\t}\n\n    constructor(string memory name, string memory version) public EIP712Base(name, version) {}\n\n    function executeMetaTransaction(address userAddress,\n        bytes memory functionSignature, bytes32 sigR, bytes32 sigS, uint8 sigV) public payable returns(bytes memory) {\n\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n        require(verify(userAddress, metaTx, sigR, sigS, sigV), \"Signer and signature do not match\");\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(abi.encodePacked(functionSignature, userAddress));\n\n        require(success, \"Function call not successfull\");\n        nonces[userAddress] = nonces[userAddress].add(1);\n        emit MetaTransactionExecuted(userAddress, msg.sender, functionSignature);\n        return returnData;\n    }\n\n    function hashMetaTransaction(MetaTransaction memory metaTx) internal view returns (bytes32) {\n\t\treturn keccak256(abi.encode(\n            META_TRANSACTION_TYPEHASH,\n            metaTx.nonce,\n            metaTx.from,\n            keccak256(metaTx.functionSignature)\n        ));\n\t}\n\n    function getNonce(address user) public view returns(uint256 nonce) {\n        nonce = nonces[user];\n    }\n\n    function verify(address signer, MetaTransaction memory metaTx, bytes32 sigR, bytes32 sigS, uint8 sigV) internal view returns (bool) {\n\t\treturn signer == ecrecover(toTypedMessageHash(hashMetaTransaction(metaTx)), sigV, sigR, sigS);\n\t}\n\n    function msgSender() internal view returns(address sender) {\n        if(msg.sender == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n            }\n        } else {\n            sender = msg.sender;\n        }\n        return sender;\n    }\n\n\n\n\n    // To recieve ether in contract\n    receive() external payable {}\n    fallback() external payable { }\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\n\n\n// File: browser/dex-adapter-simple.sol\n\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\ninterface IERC20 {\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function approve(address _spender, uint256 _value) external returns (bool);\n    function balanceOf(address _owner) external view returns (uint256 balance);\n}\n\ninterface IGateway {\n    function mint(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes calldata _sig) external returns (uint256);\n    function burn(bytes calldata _to, uint256 _amount) external returns (uint256);\n}\n\ninterface IGatewayRegistry {\n    function getGatewayBySymbol(string calldata _tokenSymbol) external view returns (IGateway);\n    function getGatewayByToken(address  _tokenAddress) external view returns (IGateway);\n    function getTokenBySymbol(string calldata _tokenSymbol) external view returns (IERC20);\n}\n\ninterface ICurveExchange {\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\n\n    function get_dy(int128, int128 j, uint256 dx) external view returns (uint256);\n\n    function calc_token_amount(uint256[2] calldata amounts, bool deposit) external returns (uint256 amount);\n\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\n\n    function remove_liquidity(\n        uint256 _amount,\n        uint256[2] calldata min_amounts\n    ) external;\n\n    function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 max_burn_amount) external;\n\n    function remove_liquidity_one_coin(uint256 _token_amounts, int128 i, uint256 min_amount) external;\n}\n\ninterface IFreeFromUpTo {\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n    function balanceOf(address account) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n}\n\ncontract CurveExchangeAdapter is EIP712MetaTransaction(\"CurveExchangeAdapter\", \"1\") {\n    using SafeMath for uint256;\n\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n\n    modifier discountCHI {\n        uint256 gasStart = gasleft();\n        _;\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 *\n                           msg.data.length;\n        if(chi.balanceOf(address(this)) > 0) {\n            chi.freeFromUpTo(address(this), (gasSpent + 14154) / 41947);\n        }\n        else {\n            chi.freeFromUpTo(msgSender(), (gasSpent + 14154) / 41947);\n        }\n    }\n\n    \n    IERC20 RENBTC;\n    IERC20 WBTC;\n    IERC20 curveToken;\n\n    ICurveExchange public exchange;  \n    IGatewayRegistry public registry;\n\n    event SwapReceived(uint256 mintedAmount, uint256 wbtcAmount);\n    event DepositMintedCurve(uint256 mintedAmount, uint256 curveAmount);\n    event ReceiveRen(uint256 renAmount);\n    event Burn(uint256 burnAmount);\n\n    constructor(ICurveExchange _exchange, IGatewayRegistry _registry, IERC20 _wbtc) public {\n        exchange = _exchange;\n        registry = _registry;\n        RENBTC = registry.getTokenBySymbol(\"BTC\");\n        WBTC = _wbtc;\n        address curveTokenAddress = 0x49849C98ae39Fff122806C06791Fa73784FB3675;\n        curveToken = IERC20(curveTokenAddress);\n        \n        // Approve exchange.\n        require(RENBTC.approve(address(exchange), uint256(-1)));\n        require(WBTC.approve(address(exchange), uint256(-1)));\n        require(chi.approve(address(this), uint256(-1)));\n    }\n\n    function recoverStuck(\n        bytes calldata encoded,\n        uint256 _amount,\n        bytes32 _nHash,\n        bytes calldata _sig\n    ) external {\n        uint256 start = encoded.length - 32;\n        address sender = abi.decode(encoded[start:], (address));\n        require(sender == msgSender());\n        bytes32 pHash = keccak256(encoded);\n        uint256 mintedAmount = registry.getGatewayBySymbol(\"BTC\").mint(pHash, _amount, _nHash, _sig);\n        require(RENBTC.transfer(msgSender(), mintedAmount));\n    }\n    \n    function mintThenSwap(\n        uint256 _minExchangeRate,\n        uint256 _newMinExchangeRate,\n        uint256 _slippage,\n        address payable _wbtcDestination,\n        uint256 _amount,\n        bytes32 _nHash,\n        bytes calldata _sig\n    ) external discountCHI {\n        // Mint renBTC tokens\n        bytes32 pHash = keccak256(abi.encode(_minExchangeRate, _slippage, _wbtcDestination, msgSender()));\n        uint256 mintedAmount = registry.getGatewayBySymbol(\"BTC\").mint(pHash, _amount, _nHash, _sig);\n        \n        // Get price\n        uint256 dy = exchange.get_dy(0, 1, mintedAmount);\n        uint256 rate = dy.mul(1e8).div(mintedAmount);\n        _slippage = uint256(1e4).sub(_slippage);\n        uint256 min_dy = dy.mul(_slippage).div(1e4);\n        \n        // Price is OK\n        if (rate >= _newMinExchangeRate) {\n            uint256 startWbtcBalance = WBTC.balanceOf(address(this));\n            exchange.exchange(0, 1, mintedAmount, min_dy);\n\n            uint256 endWbtcBalance = WBTC.balanceOf(address(this));\n            uint256 wbtcBought = endWbtcBalance.sub(startWbtcBalance);\n        \n            //Send proceeds to the User\n            require(WBTC.transfer(_wbtcDestination, wbtcBought));\n            emit SwapReceived(mintedAmount, wbtcBought);\n        } else {\n            //Send renBTC to the User instead\n            require(RENBTC.transfer(_wbtcDestination, mintedAmount));\n            emit ReceiveRen(mintedAmount);\n        }\n    }\n\n    function mintThenDeposit(\n        address payable _wbtcDestination, \n        uint256 _amount, \n        uint256[2] calldata _amounts, \n        uint256 _min_mint_amount, \n        uint256 _new_min_mint_amount, \n        bytes32 _nHash, \n        bytes calldata _sig\n    ) external discountCHI {\n        // Mint renBTC tokens\n        bytes32 pHash = keccak256(abi.encode(_wbtcDestination, _amounts, _min_mint_amount, msgSender()));\n        //use actual _amount the user sent\n        uint256 mintedAmount = registry.getGatewayBySymbol(\"BTC\").mint(pHash, _amount, _nHash, _sig);\n\n        //set renBTC to actual minted amount in case the user sent less BTC to Ren\n        uint256[2] memory receivedAmounts = _amounts;\n        receivedAmounts[0] = mintedAmount;\n        uint256 calc_token_amount = exchange.calc_token_amount(_amounts, true);\n        if(calc_token_amount >= _new_min_mint_amount) {\n            require(WBTC.transferFrom(msgSender(), address(this), receivedAmounts[1]));\n            uint256 curveBalanceBefore = curveToken.balanceOf(address(this));\n            exchange.add_liquidity(receivedAmounts, 0);\n            uint256 curveBalanceAfter = curveToken.balanceOf(address(this));\n            uint256 curveAmount = curveBalanceAfter.sub(curveBalanceBefore);\n            require(curveAmount >= _new_min_mint_amount);\n            require(curveToken.transfer(msgSender(), curveAmount));\n            emit DepositMintedCurve(mintedAmount, curveAmount);\n        }\n        else {\n            require(RENBTC.transfer(_wbtcDestination, mintedAmount));\n            emit ReceiveRen(mintedAmount);\n        }\n    }\n\n    function mintNoSwap(\n        uint256 _minExchangeRate,\n        uint256 _newMinExchangeRate,\n        uint256 _slippage,\n        address payable _wbtcDestination,\n        uint256 _amount,\n        bytes32 _nHash,\n        bytes calldata _sig\n    ) external discountCHI {\n        bytes32 pHash = keccak256(abi.encode(_minExchangeRate, _slippage, _wbtcDestination, msgSender()));\n        uint256 mintedAmount = registry.getGatewayBySymbol(\"BTC\").mint(pHash, _amount, _nHash, _sig);\n        \n        require(RENBTC.transfer(_wbtcDestination, mintedAmount));\n        emit ReceiveRen(mintedAmount);\n    }\n\n    function mintNoDeposit(\n        address payable _wbtcDestination, \n        uint256 _amount, \n        uint256[2] calldata _amounts, \n        uint256 _min_mint_amount, \n        uint256 _new_min_mint_amount, \n        bytes32 _nHash, \n        bytes calldata _sig\n    ) external discountCHI {\n         // Mint renBTC tokens\n        bytes32 pHash = keccak256(abi.encode(_wbtcDestination, _amounts, _min_mint_amount, msgSender()));\n        //use actual _amount the user sent\n        uint256 mintedAmount = registry.getGatewayBySymbol(\"BTC\").mint(pHash, _amount, _nHash, _sig);\n\n        require(RENBTC.transfer(_wbtcDestination, mintedAmount));\n        emit ReceiveRen(mintedAmount);\n    }\n\n    function removeLiquidityThenBurn(bytes calldata _btcDestination, uint256 amount, uint256[2] calldata min_amounts) external discountCHI {\n        uint256 startRenbtcBalance = RENBTC.balanceOf(address(this));\n        uint256 startWbtcBalance = WBTC.balanceOf(address(this));\n        require(curveToken.transferFrom(msgSender(), address(this), amount));\n        exchange.remove_liquidity(amount, min_amounts);\n        uint256 endRenbtcBalance = RENBTC.balanceOf(address(this));\n        uint256 endWbtcBalance = WBTC.balanceOf(address(this));\n        uint256 wbtcWithdrawn = endWbtcBalance.sub(startWbtcBalance);\n        require(WBTC.transfer(msgSender(), wbtcWithdrawn));\n        uint256 renbtcWithdrawn = endRenbtcBalance.sub(startRenbtcBalance);\n\n        // Burn and send proceeds to the User\n        uint256 burnAmount = registry.getGatewayBySymbol(\"BTC\").burn(_btcDestination, renbtcWithdrawn);\n        emit Burn(burnAmount);\n    }\n\n    function removeLiquidityImbalanceThenBurn(bytes calldata _btcDestination, uint256[2] calldata amounts, uint256 max_burn_amount) external discountCHI {\n        uint256 startRenbtcBalance = RENBTC.balanceOf(address(this));\n        uint256 startWbtcBalance = WBTC.balanceOf(address(this));\n        uint256 _tokens = curveToken.balanceOf(msgSender());\n        if(_tokens > max_burn_amount) { \n            _tokens = max_burn_amount;\n        }\n        require(curveToken.transferFrom(msgSender(), address(this), _tokens));\n        exchange.remove_liquidity_imbalance(amounts, max_burn_amount.mul(101).div(100));\n        _tokens = curveToken.balanceOf(address(this));\n        require(curveToken.transfer(msgSender(), _tokens));\n        uint256 endRenbtcBalance = RENBTC.balanceOf(address(this));\n        uint256 endWbtcBalance = WBTC.balanceOf(address(this));\n        uint256 renbtcWithdrawn = endRenbtcBalance.sub(startRenbtcBalance);\n        uint256 wbtcWithdrawn = endWbtcBalance.sub(startWbtcBalance);\n        require(WBTC.transfer(msgSender(), wbtcWithdrawn));\n\n        // Burn and send proceeds to the User\n        uint256 burnAmount = registry.getGatewayBySymbol(\"BTC\").burn(_btcDestination, renbtcWithdrawn);\n        emit Burn(burnAmount);\n    }\n\n    //always removing in renBTC, else use normal method\n    function removeLiquidityOneCoinThenBurn(bytes calldata _btcDestination, uint256 _token_amounts, uint256 min_amount) external discountCHI {\n        uint256 startRenbtcBalance = RENBTC.balanceOf(address(this));\n        require(curveToken.transferFrom(msgSender(), address(this), _token_amounts));\n        exchange.remove_liquidity_one_coin(_token_amounts, 0, min_amount);\n        uint256 endRenbtcBalance = RENBTC.balanceOf(address(this));\n        uint256 renbtcWithdrawn = endRenbtcBalance.sub(startRenbtcBalance);\n\n        // Burn and send proceeds to the User\n        uint256 burnAmount = registry.getGatewayBySymbol(\"BTC\").burn(_btcDestination, renbtcWithdrawn);\n        emit Burn(burnAmount);\n    }\n    \n    function swapThenBurn(bytes calldata _btcDestination, uint256 _amount, uint256 _minRenbtcAmount) external discountCHI {\n        require(WBTC.transferFrom(msgSender(), address(this), _amount));\n        uint256 startRenbtcBalance = RENBTC.balanceOf(address(this));\n        exchange.exchange(1, 0, _amount, _minRenbtcAmount);\n        uint256 endRenbtcBalance = RENBTC.balanceOf(address(this));\n        uint256 renbtcBought = endRenbtcBalance.sub(startRenbtcBalance);\n        \n        // Burn and send proceeds to the User\n        uint256 burnAmount = registry.getGatewayBySymbol(\"BTC\").burn(_btcDestination, renbtcBought);\n        emit Burn(burnAmount);\n    }\n}"
    }
  }
}