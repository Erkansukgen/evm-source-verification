{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":10000},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"SwapPriceCalculatorInterface.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ISwapPriceCalculator\r\n{\r\n    function calc(uint256 receivedEthAmount,\r\n                  uint256 expectedTokensAmount,\r\n                  uint16  slippage,\r\n                  uint256 ethReserve,\r\n                  uint256 tokensSold,\r\n                  bool \t  excludeFee) external view returns (uint256 actualTokensAmount,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t uint256 ethFeeAdd,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t uint256 actualEthAmount);\r\n}"},"SwapperSimpleBase.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity >=0.6.0 <0.8.0; // use 0.6.12 to compile this file\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"browser/SwapPriceCalculator.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"SwapperSimpleBase.sol\";\r\nimport \"SwapPriceCalculatorInterface.sol\";\r\n\r\ncontract Swapper\r\n{\r\n    using SafeMath for uint256;\r\n    \r\n    address private admin;\r\n    IERC20 private token;\r\n    ISwapPriceCalculator private priceCalculator;\r\n    \r\n    uint256 private ethReserve;\r\n    uint256 private ethReserveTaken;\r\n    uint256 private ethFee;\r\n    uint256 private ethFeeTaken;\r\n    uint256 private tokensSold;\r\n    \r\n    string private constant ERR_MSG_SENDER = \"ERR_MSG_SENDER\";\r\n    string private constant ERR_AMOUNT = \"ERR_AMOUNT\";\r\n    string private constant ERR_ZERO_ETH = \"ERR_ZERO_ETH\";\r\n    \r\n    event Swap(uint256 receivedEth,\r\n               uint256 expectedTokens,\r\n               uint16 slippage,\r\n               uint256 ethFeeAdd,\r\n               uint256 actualTokens,\r\n               uint256 tokensSold);\r\n    \r\n    // constructor:\r\n    //--------------------------------------------------------------------------------------------------------------------------\r\n    constructor(address _admin, address _token, address _priceCalculator) public\r\n    {\r\n        admin = _admin;\r\n        token = IERC20(_token);\r\n        priceCalculator = ISwapPriceCalculator(_priceCalculator);\r\n    }\r\n    \r\n    function getAdmin() external view returns (address)\r\n    {\r\n        return admin;\r\n    }\r\n    \r\n    function getToken() external view returns (address)\r\n    {\r\n        return address(token);\r\n    }\r\n    //--------------------------------------------------------------------------------------------------------------------------\r\n    \r\n    // ETH balance methods:\r\n    //--------------------------------------------------------------------------------------------------------------------------\r\n    function getTotalEthBalance() external view returns (uint256)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function sendEth(address payable _to) external returns (uint256 ethReserveTaken_, uint256 ethFeeTaken_)\r\n    {\r\n        require(msg.sender == admin, ERR_MSG_SENDER);\r\n        \r\n        _to.transfer(address(this).balance);\r\n        \r\n        ethReserveTaken_ = ethReserve - ethReserveTaken;\r\n        ethFeeTaken_ = ethFee - ethFeeTaken;\r\n        \r\n        ethReserveTaken = ethReserve;\r\n        ethFeeTaken = ethFee;\r\n    }\r\n    //--------------------------------------------------------------------------------------------------------------------------\r\n    \r\n    // Tokens balance methods:\r\n    //--------------------------------------------------------------------------------------------------------------------------\r\n    function getTotalTokensBalance() external view returns (uint256)\r\n    {\r\n        return token.balanceOf(address(this));\r\n    }\r\n    \r\n    function sendTokens(address _to, uint256 _amount) external\r\n    {\r\n        require(msg.sender == admin, ERR_MSG_SENDER);\r\n        \r\n        if(_amount == 0)\r\n        {\r\n            token.transfer(_to, token.balanceOf(address(this)));\r\n        }\r\n        else\r\n        {\r\n            token.transfer(_to, _amount);\r\n        }\r\n    }\r\n    //--------------------------------------------------------------------------------------------------------------------------\r\n    \r\n    // Price calculator:\r\n    //--------------------------------------------------------------------------------------------------------------------------\r\n    function getPriceCalculator() external view returns (address)\r\n    {\r\n        return address(priceCalculator);\r\n    }\r\n    \r\n    function setPriceCalculator(address _priceCalculator) external\r\n    {\r\n        require(msg.sender == admin, ERR_MSG_SENDER);\r\n        \r\n        priceCalculator = ISwapPriceCalculator(_priceCalculator);\r\n    }\r\n    \r\n    function calcPrice(uint256 _ethAmount, bool _excludeFee) external view returns (uint256, uint256, uint256)\r\n    {\r\n        require(_ethAmount > 0, ERR_ZERO_ETH);\r\n        \r\n        return priceCalculator.calc(_ethAmount, 0, 0, ethReserve, tokensSold, _excludeFee);\r\n    }\r\n    //--------------------------------------------------------------------------------------------------------------------------\r\n    \r\n    // Current state:\r\n    //--------------------------------------------------------------------------------------------------------------------------\r\n    function getState() external view returns (uint256 ethReserve_,\r\n                                               uint256 ethReserveTaken_,\r\n                                               uint256 ethFee_,\r\n                                               uint256 ethFeeTaken_,\r\n                                               uint256 tokensSold_)\r\n    {\r\n        ethReserve_ = ethReserve;\r\n        ethReserveTaken_ = ethReserveTaken;\r\n        ethFee_ = ethFee;\r\n        ethFeeTaken_ = ethFeeTaken;\r\n        tokensSold_ = tokensSold;\r\n    }\r\n    //--------------------------------------------------------------------------------------------------------------------------\r\n    \r\n    // Swap logic methods:\r\n    //--------------------------------------------------------------------------------------------------------------------------\r\n    function swap(uint256 _expectedTokensAmount, uint16 _slippage, bool _excludeFee) external payable\r\n    {\r\n        require(msg.value > 0, ERR_ZERO_ETH);\r\n        require(_expectedTokensAmount > 0, \"ERR_ZERO_EXP_AMOUNT\");\r\n        require(_slippage <= 500, \"ERR_SLIPPAGE_TOO_BIG\");\r\n        \r\n        (uint256 actualTokensAmount, uint256 ethFeeAdd, uint256 actualEthAmount)\r\n            = priceCalculator.calc(msg.value, _expectedTokensAmount, _slippage, ethReserve, tokensSold, _excludeFee);\r\n            \r\n        require(actualTokensAmount > 0, \"ERR_ZERO_ACTUAL_TOKENS\");\r\n        require(msg.value == actualEthAmount, \"ERR_WRONG_ETH_AMOUNT\");\r\n        \r\n        ethFee = ethFee.add(ethFeeAdd);\r\n        ethReserve = ethReserve.add(msg.value.sub(ethFeeAdd));\r\n        tokensSold = tokensSold.add(actualTokensAmount);\r\n        \r\n        token.transfer(msg.sender, actualTokensAmount);\r\n     \r\n        emit Swap(msg.value, _expectedTokensAmount, _slippage, ethFeeAdd, actualTokensAmount, tokensSold);\r\n    }\r\n    //--------------------------------------------------------------------------------------------------------------------------\r\n}"}}}