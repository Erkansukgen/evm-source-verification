{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "crosschain.sol": {
      "content": "/**\n *Submitted for verification at BscScan.com on 2021-07-10\n*/\n\n// SPDX-License-Identifier: GPLv3\n\npragma solidity ^0.6.12;\n\ninterface ERC20 {\n    function balanceOf(address who) external view returns (uint);\n    function decimals() external view returns (uint);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint);\n}\ninterface ETHUSDT {\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external;\n    function transferFrom(address sender, address recipient, uint256 amount) external;\n    function decimals() external view returns (uint8);\n}\ncontract Ownable {\n    address owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"only owner\");\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"address is null\");\n        owner = newOwner;\n    }\n}\n\ncontract BridgeTransfer is Ownable {\n    struct Transaction{\n        address token_address;\n        address from_address;\n        string  to_address;\n        uint    to_chain;\n        uint    amount;\n        uint    decimals;\n        uint    time;\n    }\n    struct User{\n        Transaction[] trans;\n    }\n    mapping(address => User) users;\n    Transaction[] all_trans;\n\n    // 存入要转账的token\n    // token_address token的合约地址\n    // to_address 收款目标地址的字符串\n    // to_chain 收款目标链的编号\n    // amount 转账的金额\n    function deposit(address token_address, string memory to_address, uint to_chain, uint amount) public returns (bool){\n        require(token_address != address(0), \"token_address is null\");\n        require(amount > 0, \"amount must great than zero\");\n\n        uint decimals;\n        if (isUsdt(token_address)) {\n            ETHUSDT token = ETHUSDT(token_address);\n            token.transferFrom(msg.sender, address(this), amount);\n            decimals = token.decimals();\n        } else {\n            ERC20 token = ERC20(token_address);\n            bool result = token.transferFrom(msg.sender, address(this), amount);\n            require(result == true, \"transferFrom fail\");\n            decimals = token.decimals();\n        }\n        \n        Transaction memory tran = Transaction(token_address, msg.sender, to_address, to_chain, amount, decimals, block.timestamp);\n\n        users[msg.sender].trans.push(tran);\n        all_trans.push(tran);\n\n        return true;\n    }\n    \n    function deposit(string memory to_address, uint to_chain) public payable returns (bool){\n        require(msg.value > 0, \"amount must great than zero\");\n        Transaction memory tran = Transaction(address(0), msg.sender, to_address, to_chain, msg.value, 18, block.timestamp);\n        users[msg.sender].trans.push(tran);\n        all_trans.push(tran);\n        return true;\n    }\n\n    // 查询账户信息\n    // addr 账户的地址\n    function query_account(address addr)public view returns(uint, uint){\n        return (addr.balance,              // 当前账户的BNB或TRX余额\n                users[addr].trans.length); // 当前账户总共有多少次跨链转账\n    }\n\n    // 查询token的余额和授权情况\n    // addr 要查询的地址\n    // token_address token的合约地址\n    function query_token(address addr, address token_address)public view returns(uint, uint){\n        if (isUsdt(token_address)) {\n            ETHUSDT token = ETHUSDT(token_address);\n            return (token.balanceOf(addr),                 // token的余额\n                    token.allowance(addr, address(this))); // token的授权情况\n        } else {\n            ERC20 token = ERC20(token_address);\n            return (token.balanceOf(addr),                 // token的余额\n                    token.allowance(addr, address(this))); // token的授权情况\n        }\n    }\n\n    // 查询用户指定编号的跨链转账详情\n    // addr 查询的用户地址\n    // index 查询转账的索引编号，不能大于等于query_account返回的总共跨链转账次数\n    function query_user_tran(address addr, uint index)public view returns(address, string memory, uint, uint, uint, uint){\n        require(index < users[addr].trans.length, \"index out of bounds\");\n\n        return (users[addr].trans[index].token_address, // token的合约地址\n                users[addr].trans[index].to_address,    // 转账目标地址\n                users[addr].trans[index].to_chain,      // 收款目标链的编号\n                users[addr].trans[index].amount,        // 转账的金额\n                users[addr].trans[index].decimals,      // 转账的金额小数位\n                users[addr].trans[index].time);         // 转账发起时间（秒），unix timestamp\n    }\n\n    // 查询合约总共的跨链转账次数\n    function query_all_trans_length()public view returns(uint) {\n        return all_trans.length;\n    }\n\n    // 查询整个合约指定编号的跨链转账详情\n    // index 查询转账的索引编号，不能大于等于query_all_trans_length返回的总共跨链转账次数\n    function query_tran(uint index)public view returns(address, address, string memory, uint, uint, uint, uint) {\n        require(index < all_trans.length, \"index out of bounds\");\n\n        return (all_trans[index].token_address, // token的合约地址\n                all_trans[index].from_address,  // 转账发起的用户地址\n                all_trans[index].to_address,    // 转账目标地址\n                all_trans[index].to_chain,      // 收款目标链的编号\n                all_trans[index].amount,        // 转账的金额\n                all_trans[index].decimals,      // 转账的金额小数位\n                all_trans[index].time);         // 转账发起时间（秒），unix timestamp\n    }\n\n    function collect(address token_address, address collect_address, uint amount) public onlyOwner returns (bool){\n        require(token_address != address(0), \"token_address is null\");\n        require(collect_address != address(0), \"collect_address is null\");\n        require(amount > 0, \"amount must great than zero\");\n\n        if (isUsdt(token_address)) {\n            ETHUSDT token = ETHUSDT(token_address);\n            token.transfer(collect_address, amount);\n        } else {\n            ERC20 token = ERC20(token_address);\n            token.transfer(collect_address, amount);\n        }\n\n        return true;\n    }\n    \n    function collect(address payable collect_address, uint amount) public onlyOwner returns (bool){\n        require(collect_address != address(0), \"collect_address is null\");\n        require(amount > 0, \"amount must great than zero\");\n        collect_address.transfer(amount);\n        return true;\n    }\n    \n    function isUsdt(address addr) private pure returns (bool) {\n        return addr == address(0xdAC17F958D2ee523a2206206994597C13D831ec7) ? true : false;\n    }\n}"
    }
  }
}