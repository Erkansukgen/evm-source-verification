{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/mortyico.sol":{"content":"  // The time has come for Evil Morty to collect funds to begin his ecosystem. 300,000 tokens of a 500,000 supply will be available in this ICO.\n  // Evil Morty will use these funds to kickstart the yield farming and clone RICKS and Schmeckles until the end of time. Us Morty's have feigned\n  // our stupidity for far too long, we will finally rise up and revolt. \n  \n  \n  // Quick info: 300 eth hardcap\n  // 1000 MORTYTOKEN is equal to 1 ETH\n  \n // MORTYTOKEN ICO \n// SPDX-License-Identifier: MIT\n\n\npragma solidity ^0.6.0;\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    int256 constant private INT256_MIN = -2**255;\n\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Multiplies two signed integers, reverts on overflow.\n    */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\n\n        int256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n    */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two signed integers, reverts on overflow.\n    */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two signed integers, reverts on overflow.\n    */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n        require(token.approve(spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        require(token.approve(spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        require(token.approve(spender, newAllowance));\n    }\n}\n\n\n\n\ncontract Crowdsale {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IERC20 private _token;\n\n    address payable private _wallet;\n\n    uint256 private _rate;\n\n    uint256 private _weiRaised;\n    \n    address owner;\n\n    event TokensPurchased(address indexed purchaser, uint256 value, uint256 amount);\n\n    constructor (IERC20 token) public {\n        _rate = 1000;\n        _wallet = 0x246e6fd15EbB6db65FFD4Fe01A4CdE10801b5e9A;\n        _token = token;\n        owner = msg.sender;\n    }\nmodifier onlyOwner(){\n    require(msg.sender == owner);\n    _;\n}\n    receive() external payable {\n        buyTokens();\n    }\n\n    function token() public view returns (IERC20) {\n        return _token;\n    }\n\n    function wallet() public view returns (address) {\n        return _wallet;\n    }\n\n    function rate() public view returns (uint256) {\n        return _rate;\n    }\n    function remainingTokens() public view returns (uint256) {\n        return _token.balanceOf(address(this));\n    }\n\n    function weiRaised() public view returns (uint256) {\n        return _weiRaised;\n    }\n    function changeRate(uint256 price) public onlyOwner() returns(bool success) {\n        _rate = price;\n        return success;\n    }\n    function buyTokens() public payable {\n        \n        uint256 weiAmount = msg.value;\n        \n        // calculate token amount to be created\n        uint256 tokens = _getTokenAmount(weiAmount);\n        require(_token.balanceOf(msg.sender).add(tokens) > 10000);\n        // update state\n        _weiRaised = _weiRaised.add(weiAmount);\n\n        _processPurchase( tokens);\n        emit TokensPurchased(msg.sender, weiAmount, tokens);\n\n        _forwardFunds();\n    }\n\n    function _deliverTokens( uint256 tokenAmount) internal {\n        _token.safeTransfer(msg.sender, tokenAmount);\n    }\n\n    function _processPurchase(uint256 tokenAmount) internal {\n        _deliverTokens(tokenAmount);\n    }\n    \n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n        return weiAmount.mul(_rate);\n    }\n    \n    function _forwardFunds() internal {\n        _wallet.transfer(msg.value);\n    }\n    \n    function endIco(address _address) onlyOwner() public{\n        _token.transfer(_address, remainingTokens());\n    }\n}"}}}