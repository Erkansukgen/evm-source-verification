{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Spinosa.sol":{"content":"pragma solidity >=0.4.22 <0.7.0;\n\n\ncontract Spinosa {\n    struct MP {\n        string id;\n        string data;\n    }\n\n    struct PF {\n        string id;\n        string data;\n    }\n\n    address private owner;\n    mapping(string => bool) private exist_MP;\n    mapping(string => MP) private list_MP;\n    mapping(string => bool) private exist_PF;\n    mapping(string => PF) private list_PF;\n\n    // event for EVM logging\n    event MPSet(string, string);\n    event PFSet(string, string);\n\n    // modifier to check if caller is owner\n    modifier isOwner() {\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function setMP(string calldata _id, string calldata _data)\n        external\n        isOwner\n    {\n        require(bytes(_id).length > 0, \"ID is empty\");\n        require(exist_MP[_id] == false, \"MP already exist\");\n        require(bytes(_data).length > 0, \"DATA is empty\");\n\n        MP memory tmp;\n        tmp.id = _id;\n        tmp.data = _data;\n\n        list_MP[_id] = tmp;\n        exist_MP[_id] = true;\n\n        emit MPSet(\"New MP was added with ID: \", _id);\n    }\n\n    function setPF(string calldata _id, string calldata _data)\n        external\n        isOwner\n    {\n        require(bytes(_id).length > 0, \"ID is empty\");\n        require(exist_PF[_id] == false, \"PF already exist\");\n        require(bytes(_data).length > 0, \"DATA is empty\");\n\n        PF memory tmp;\n        tmp.id = _id;\n        tmp.data = _data;\n\n        list_PF[_id] = tmp;\n        exist_PF[_id] = true;\n\n        emit MPSet(\"New PF was added with ID: \", _id);\n    }\n\n    function getMP(string memory _id) public view returns (string memory) {\n        require(bytes(_id).length > 0, \"ID is empty\");\n        require(exist_MP[_id] == true, \"MP does not exist\");\n\n        return list_MP[_id].data;\n    }\n\n    function getPF(string memory _id) public view returns (string memory) {\n        require(bytes(_id).length > 0, \"ID is empty\");\n        require(exist_PF[_id] == true, \"PF does not exist\");\n\n        return list_PF[_id].data;\n    }\n}\n"}}}