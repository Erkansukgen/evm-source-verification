{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Euron.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n//------------------------------------------------------------\r\n//------------------------------------------------------------\r\n//      Community           - Euron\r\n//      Powered By          - Mejhe Technology Private Limited (India)\r\n//      Development Date    - 11 May 2021\r\n//      Developer           - Puskar Halder\r\n//------------------------------------------------------------\r\n//------------------------------------------------------------\r\n\r\n//------------------------------------------------------------\r\n//------------------------------------------------------------\r\n//      No Transaction Fees By Euron.\r\n//      Gas fees may be applied by Ethereum.\r\n//      This token create on Ethereum Blockchain.\r\n//      Euron is a type of cryptocurrency which aims to keep cryptocurrency valuations stable.\r\n//      Euron is used by crypto investors who want to avoid the extreme volatility of other cryptocurrencies while keeping value within the crypto market.\r\n//------------------------------------------------------------\r\n//------------------------------------------------------------\r\n\r\n//------------------------------------------------------------\r\n//------------------------------------------------------------\r\n//      Name        - Euron\r\n//      Symbol      - EUD\r\n//      Desimal     - 2\r\n//      Supply      - 1713143000000\r\n//      Quintity    - 17131430000 Tokens\r\n//------------------------------------------------------------\r\n//------------------------------------------------------------\r\n\r\n//------------------------------------------------------------\r\n//------------------------------------------------------------\r\n//      Total supply is the number of tokens of the smallest denomination.\r\n//------------------------------------------------------------\r\n//------------------------------------------------------------\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}\r\n\r\ncontract Euron is IERC20 {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 totalSupply_ ;\r\n    address admin;\r\n\r\n    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _tsupply) public {\r\n    totalSupply_ = _tsupply;\r\n    balances[msg.sender] = totalSupply_;\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n    admin = msg.sender;\r\n    }\r\n    \r\n//------------------------------------------------------------\r\n//------------------------------------------------------------\r\n// Start View Total Supply -\r\n        // Total supply is the number of tokens of the smallest denomination.\r\n\r\n    function totalSupply() public  override view returns (uint256) {\r\n    return totalSupply_;\r\n    }\r\n    \r\n// End View Total Supply -\r\n//------------------------------------------------------------\r\n//------------------------------------------------------------\r\n\r\n//------------------------------------------------------------\r\n//------------------------------------------------------------\r\n// Start View Balance -\r\n\r\n    function balanceOf(address tokenOwner) public override view returns (uint256) {\r\n    return balances[tokenOwner];\r\n    }\r\n\r\n// End View Balance -\r\n//------------------------------------------------------------\r\n//------------------------------------------------------------\r\n\r\n//------------------------------------------------------------\r\n//------------------------------------------------------------\r\n// Start Transfer -\r\n\r\n    function transfer(address receiver, uint256 numTokens) public override returns (bool) {\r\n        require(numTokens <= balances[msg.sender]);\r\n        balances[msg.sender] -= numTokens;\r\n        balances[receiver] += numTokens;\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n    \r\n// End Transfer -\r\n//------------------------------------------------------------\r\n//------------------------------------------------------------\r\n\r\n    modifier onlyAdmin {\r\n        require( msg.sender == admin, \"Only admin can run this function\");\r\n        _;\r\n    }\r\n\r\n//------------------------------------------------------------\r\n//------------------------------------------------------------\r\n// Start Mint -\r\n\r\n    function mint(uint256 _qty) public onlyAdmin returns(uint256) {\r\n        totalSupply_ += _qty;\r\n        balances[msg.sender] += _qty;\r\n\r\n        return totalSupply_;\r\n    }\r\n    \r\n// End Mint -\r\n//------------------------------------------------------------\r\n//------------------------------------------------------------\r\n\r\n//------------------------------------------------------------\r\n//------------------------------------------------------------\r\n// Start Burn -\r\n\r\n    function burn(uint256 _qty) public onlyAdmin returns(uint256) {\r\n        require(balances[msg.sender] >= _qty);\r\n        totalSupply_ -= _qty;\r\n        balances[msg.sender] -= _qty;\r\n\r\n        return totalSupply_;\r\n    }\r\n    \r\n// End Burn -\r\n//------------------------------------------------------------\r\n//------------------------------------------------------------\r\n    \r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _sender, uint256 _value) public returns (bool sucess) {\r\n        allowed[msg.sender][_sender] = _value;\r\n        emit Approval(msg.sender, _sender, _value); //\r\n        return true;\r\n    }\r\n\r\n//------------------------------------------------------------\r\n//------------------------------------------------------------    \r\n// Start Transfer from -\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool sucess) {\r\n    uint256 allowance1 = allowed[_from][msg.sender];\r\n    require(balances[_from] >= _value && allowance1 >= _value);\r\n    balances[_to] += _value;\r\n    balances[_from] -= _value;\r\n    allowed[_from][msg.sender] -= _value;\r\n\r\n    emit Transfer(_from, _to, _value); //\r\n    return true;\r\n}\r\n\r\n// End Transfer from -\r\n//------------------------------------------------------------\r\n//------------------------------------------------------------\r\n\r\n}"}}}