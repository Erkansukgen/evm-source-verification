{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"AshToken.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\ncontract AshToken {\r\n\r\n    string public constant name = \"Ash Token\";\r\n    string public constant symbol = \"ASH\";\r\n    uint8 public constant decimals = 9;\r\n    uint256 supply;\r\n    uint256 public scale; \r\n    \r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    \r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    constructor() {\r\n        supply = 0;\r\n        scale = block.basefee;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return supply;\r\n    }\r\n    \r\n    function balanceOf(address tokenOwner) public view returns (uint256) {\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n    function transfer(address receiver, uint256 numTokens) public returns (bool) {\r\n        require(numTokens <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        balances[receiver] = balances[receiver].add(numTokens);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address delegate, uint256 numTokens) public returns (bool) {\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address owner, address delegate) public view returns (uint256) {\r\n        return allowed[owner][delegate];\r\n    }\r\n    \r\n    function transferFrom(address owner, address buyer, uint256 numTokens) public returns (bool) {\r\n        require(numTokens <= balances[owner]);    \r\n        require(numTokens <= allowed[owner][msg.sender]);\r\n        \r\n        balances[owner] = balances[owner].sub(numTokens);\r\n        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\r\n        balances[buyer] = balances[buyer].add(numTokens);\r\n        emit Transfer(owner, buyer, numTokens);\r\n        return true;\r\n    }\r\n    \r\n    function mint() public {\r\n        uint256 minted = calculateMint(block.basefee);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].add(minted);\r\n        supply = supply.add(minted);\r\n        \r\n        scale = calculateNewScale(block.basefee);\r\n    }\r\n    \r\n    function calculateMint(uint256 basefee) public view returns (uint256) {\r\n        if(basefee < scale) {\r\n            return basefee;\r\n        }\r\n\r\n        return basefee.mul(basefee).div(scale);\r\n    }\r\n    \r\n    function calculateNewScale(uint256 basefee) public view returns (uint256) {\r\n        uint256 limit;\r\n        \r\n        if(basefee > scale) {\r\n            limit = scale.mul(105).div(100);\r\n            \r\n            if(basefee > limit) {\r\n                return limit;\r\n            }\r\n        } else {\r\n            limit = scale.mul(95).div(100);\r\n\r\n            if(basefee < limit) {\r\n                return limit;\r\n            }\r\n        }\r\n        \r\n        return basefee;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}"}}}