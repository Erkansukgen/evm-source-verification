{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/lev.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.7.5;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function decimals() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n}\n\ninterface ISushiswapV2Pair {\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function sync() external;\n}\n\ninterface IComptroller {\n    function enterMarkets(address[] memory cTokens) external;\n}\n\ninterface cyToken {\n    function borrow(uint) external;\n    function mint(uint) external;\n    function redeem(uint) external;\n    function repayBorrow(uint) external;\n}\n\ncontract xVault {\n    \n    address owner;\n    \n    IComptroller constant COMPTROLLER = IComptroller(0xAB1c342C7bf5Ec5F02ADEA1c2270670bCa144CbB); \n    address constant cyDAI = address(0x8e595470Ed749b85C6F7669de83EAe304C2ec68F);\n    address constant cyWETH = address(0x41c84c0e2EE0b740Cf0d31F63f3B6F627DC6b393);\n    address constant cyY3CRV = address(0x7589C9E17BCFcE1Ccaa1f921196FDa177F0207Fc);\n    ISushiswapV2Pair constant WETHDAI = ISushiswapV2Pair(0xC3D03e4F041Fd4cD388c549Ee2A29a9E5075882f);\n    address constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n    address constant DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n    \n    constructor() {\n        owner = msg.sender;\n        address[] memory _markets = new address[](3);\n        _markets[0] = cyDAI;\n        _markets[1] = cyWETH;\n        _markets[2] = cyY3CRV;\n        COMPTROLLER.enterMarkets(_markets);\n        IERC20(DAI).approve(cyDAI, uint(-1));\n    }\n    \n    function open(uint dai, uint weth, uint mamt) external {\n        require(owner == msg.sender);\n        IERC20(cyY3CRV).transferFrom(msg.sender, address(this), mamt);\n        WETHDAI.swap(dai, 0, address(this), abi.encode(weth));\n    }\n    \n    function fee(uint amount0) external view returns (uint) {\n        (uint112 daiReserves, uint112 wethReserves,) = WETHDAI.getReserves();\n        uint numerator = wethReserves * amount0 * 1000;\n        uint denominator = (daiReserves - amount0) * 997;\n        uint wethAmount = numerator / denominator + 1;\n        return wethAmount;\n    }\n    \n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external {\n        cyToken(cyDAI).mint(amount0);\n        (uint repay) = abi.decode(data, (uint));\n        cyToken(cyWETH).borrow(repay);\n        IERC20(WETH).transfer(address(WETHDAI), repay);\n    }\n    \n    \n}"}}}