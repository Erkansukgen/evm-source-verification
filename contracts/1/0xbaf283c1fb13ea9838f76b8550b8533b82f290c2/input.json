{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"ECPaymentProcessor.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\n\r\n// chainlink aggregator for price feeds\r\ninterface AggregatorV3Interface {\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\n// custom errors\r\nerror NotOwner(address requestor);\r\nerror UnexpectedData();\r\nerror NotEnoughFunds(address sender, uint deposit, uint priceperday);\r\n\r\n\r\n/**\r\n * @title EqualCheats Payment Processor\r\n * @dev Accept ETH payments and emit events for purchasing packages on equalcheats.\r\n */\r\ncontract ECPaymentProcessor {\r\n    event PaymentRecieved(address sender, uint days_authorized, uint cheatid);\r\n\r\n    address private owner;\r\n    AggregatorV3Interface private priceFeed;\r\n\r\n    // uin128 to save gas on deployment\r\n    uint128 CheatID; \r\n    uint128 Price; //since this is only 8 decimals, and i expect it will never be a large number, we can get away with this\r\n\r\n    modifier onlyOwner() {\r\n        if(msg.sender != owner) {\r\n            revert NotOwner({requestor: msg.sender});\r\n        }\r\n        _;\r\n    }\r\n\r\n    //rinkeby: 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\r\n    //cheatID, 100000000, 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419 (one dollar per day)\r\n    constructor(uint128 cheat, uint128 price, address aggregatorInterface) {\r\n        owner = msg.sender;\r\n        CheatID = cheat;\r\n        Price = price;\r\n        priceFeed = AggregatorV3Interface(aggregatorInterface); // Mainnet ETH / USD feed\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    //eth cost in USD, 8 decimal places. Ex: 394934000000 means $3,949.34\r\n    function getEthPrice() public view returns (int) {\r\n        (\r\n             , \r\n            int price,\r\n             ,\r\n             ,\r\n             \r\n        ) = priceFeed.latestRoundData();\r\n        return price;\r\n    }\r\n    function getPriceInWei() public view returns (uint) {\r\n        return (Price * 10**18) / uint(getEthPrice());\r\n    }\r\n\r\n    receive() external payable {\r\n\r\n        //1. make sure deposit was large enough for at least one day\r\n        uint price_in_wei = getPriceInWei();\r\n        if( msg.value < price_in_wei) {\r\n            revert NotEnoughFunds({sender: msg.sender, deposit: msg.value, priceperday: price_in_wei});\r\n        }\r\n\r\n        //2. determine how many days to authorize\r\n        uint num_days =  msg.value / price_in_wei;\r\n        uint remainder_wei =  msg.value % price_in_wei;\r\n\r\n        //3. emit authorization\r\n        emit PaymentRecieved(msg.sender, num_days, CheatID);\r\n\r\n        //4. refund excess funds\r\n        if(remainder_wei > 0)\r\n        {\r\n            payable(msg.sender).transfer(remainder_wei); //refund any dust \r\n        }\r\n    }\r\n    fallback() external payable {\r\n        //msg.data empty\r\n        revert UnexpectedData();\r\n    }\r\n}"}}}