{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/MoonStake.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.11;\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(new bytes(0));\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IUniswapV2Pair token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IUniswapV2Pair token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IUniswapV2Pair token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IUniswapV2Pair token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IUniswapV2Pair token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IUniswapV2Pair token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IERC20Custom {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function farmMint(address user, uint256 amount) external;\n    function burn(uint256 amount) external;\n}\n\n\ncontract MoonStake {\n  using SafeMath for uint256;\n  using SafeERC20 for IUniswapV2Pair;\n\n  IUniswapV2Pair public lpToken = IUniswapV2Pair(address(0)); //Moonday-Mooncrops LP Token\n  IUniswapV2Pair public moonETHToken = IUniswapV2Pair(address(0)); //Moonday-WETH LP Token\n\n  address weth;\n  address crops;\n  address moonday;\n\n  address owner;\n  address dev1;\n  address dev2;\n  address dev3;\n  address controller;\n\n  modifier onlyDev() {\n        require(msg.sender == controller, \"Not Dev\");\n        _;\n    }\n\n  mapping(address => UserData) public userList;\n\n  mapping(address => mapping(uint256 => StakeData)) public stakeList;\n  mapping(address => uint256) public stakeCount;\n\n  uint256 public burnCount;\n  mapping(uint256 => BurnData) public burnList;\n  bool burnLock;\n\n  struct BurnData{\n    uint256 burnStart;\n    uint256 reserveSnapshot0;\n    uint256 reserveSnapshot1;\n    uint256 percentageSnapshot;\n\n    uint256 finalReserveSnapshot0;\n    uint256 finalReserveSnapshot1;\n    uint256 finalPercentageSnapshot;\n\n    uint256 totalFees;\n    uint256 totalBurn;\n  }\n\n  struct UserData{\n    uint256 moondayEthStaked;\n    uint256 percentage;\n    uint256 reserveConstant;\n    uint256 percentageSnapshot;\n    mapping(uint256 => uint256) burnStake;\n  }\n\n  struct StakeData{\n    uint256 stakeTime;\n    uint256 amount;\n  }\n\n  event Staked(address indexed user, uint256 amount, uint256 stakeIndex);\n  event RewardPaid(address indexed user, uint256 reward);\n\n  constructor(address _weth, address _owner, address _dev1, address _dev2, address _dev3) public {\n    require(_owner != address(0) && _dev1 != address(0) && _dev2 != address(0) && _dev3 != address(0), \"Invalid User Address\");\n    weth = _weth;\n    owner = _owner;\n    dev1 = _dev1;\n    dev2 = _dev2;\n    dev3 = _dev3;\n    controller = msg.sender;\n  }\n\n\n  function getBurnStake(address _user, uint256 _week) public view returns(uint256){\n    return(userList[_user].burnStake[_week]);\n  }\n\n  function setBurnLock() public onlyDev{\n    burnLock = !burnLock;\n  }\n\n  function setLPTokens(address _lpToken, address _moonEthToken, address _crops, address _moonday) public onlyDev{\n    lpToken = IUniswapV2Pair(_lpToken);\n    moonETHToken = IUniswapV2Pair(_moonEthToken);\n    crops = _crops;\n    moonday = _moonday;\n  }\n\n  /// Get current reward for stake\n  /// @dev calculates returnable stake amount\n  /// @param _user the user to query\n  /// @param _index the stake index to query\n  /// @return total stake reward\n  function currentReward(address _user, uint256 _index) public view returns (uint256) {\n    if(stakeList[msg.sender][_index].amount == 0){\n      return 0;\n    }\n\n    uint256 secondsPercent = (20 + userList[msg.sender].percentage).mul(1 ether).div(864000);\n    uint256 secPayout = secondsPercent.mul(block.timestamp - stakeList[msg.sender][_index].stakeTime);\n\n    uint cropReserves;\n    uint moonReserves;\n\n    if(crops > moonday){\n      (moonReserves, cropReserves,) = lpToken.getReserves();\n    }\n    else{\n      (cropReserves, moonReserves,) = lpToken.getReserves();\n    }\n\n    uint256 cropsAmount = stakeList[_user][_index].amount.mul(cropReserves).div(lpToken.totalSupply());\n    if(secPayout > 185 ether){\n      return cropsAmount.mul(185 ether).div(50 ether);\n    }\n    else{\n      return cropsAmount.mul(secPayout).div(50 ether);\n    }\n  }\n\n  /// Stake LP token\n  /// @dev stakes users LP tokens\n  /// @param _amount the amount to stake\n  function stake(uint256 _amount) public {\n      require(_amount >= (1 ether), \"Cannot stake less than 1 LP token\");\n\n      lpToken.safeTransferFrom(msg.sender, address(this), _amount);\n      lpToken.transfer(owner, _amount.mul(23).div(100));\n      lpToken.transfer(dev1, _amount.div(20));\n      lpToken.transfer(dev2, _amount.div(100));\n      lpToken.transfer(dev3, _amount.div(100));\n\n      stakeList[msg.sender][stakeCount[msg.sender]].amount = _amount;\n      stakeList[msg.sender][stakeCount[msg.sender]].stakeTime = block.timestamp;\n      stakeCount[msg.sender]++;\n\n      emit Staked(msg.sender, _amount, stakeCount[msg.sender] - 1);\n  }\n\n  /// Deposit Moonday/ETH LP in exchange for a higher percentage\n  /// @dev stakes users Moonday/ETH LP tokens\n  /// @param _amount the amount to stake\n  function depositMoondayETH(uint256 _amount) public{\n    require(userList[msg.sender].percentage + _amount <= 50, \"You have deposited the maximum amount\");\n\n    uint wethReserves;\n    uint moonReserves;\n\n    if(weth > moonday){\n      (moonReserves, wethReserves,) = moonETHToken.getReserves();\n    }\n    else{\n      (wethReserves, moonReserves,) = moonETHToken.getReserves();\n    }\n\n    uint256 lpRequired = uint256(1 ether).mul(moonETHToken.totalSupply()).div(moonReserves).div(10);\n\n    moonETHToken.safeTransferFrom(msg.sender, address(this), lpRequired.mul(_amount));\n    moonETHToken.transfer(owner, lpRequired.mul(_amount).div(20));\n    moonETHToken.transfer(dev1, lpRequired.mul(_amount).div(20));\n    moonETHToken.transfer(dev2, lpRequired.mul(_amount).div(100));\n    moonETHToken.transfer(dev3, lpRequired.mul(_amount).div(100));\n\n    (uint256 reserveSnapshot0, uint256 reserveSnapshot1,) = moonETHToken.getReserves();\n    uint256 finalPercentageSnapshot = userList[msg.sender].moondayEthStaked.mul(1 ether).div(moonETHToken.totalSupply());\n\n    uint256 constantFirst = userList[msg.sender].reserveConstant.mul(userList[msg.sender].percentageSnapshot);\n    uint256 constantSecond = reserveSnapshot0.mul(reserveSnapshot1).mul(finalPercentageSnapshot);\n\n    uint256 totalFees = 0;\n\n    if(userList[msg.sender].percentage != 0){\n      uint256 deltaPercentage = constantSecond.mul(1 ether).div(constantFirst);\n      if(deltaPercentage.mul(userList[msg.sender].moondayEthStaked).div(1 ether) > userList[msg.sender].moondayEthStaked){\n        totalFees = deltaPercentage.mul(userList[msg.sender].moondayEthStaked).div(1 ether).sub(userList[msg.sender].moondayEthStaked);\n      }\n    }\n\n    userList[msg.sender].moondayEthStaked += lpRequired.mul(_amount).mul(88).div(100);\n    userList[msg.sender].moondayEthStaked = userList[msg.sender].moondayEthStaked.sub(totalFees);\n    userList[msg.sender].percentage += _amount;\n\n    userList[msg.sender].percentageSnapshot = userList[msg.sender].moondayEthStaked.mul(1 ether).div(moonETHToken.totalSupply());\n    userList[msg.sender].reserveConstant = reserveSnapshot0.mul(reserveSnapshot1);\n  }\n\n  /// Withdraws Moonday/ETH LP in exchange for a lower percentage\n  /// @dev withdraws users Moonday/ETH LP tokens\n  /// @param _amount the amount to stake\n  function withdrawMoondayETH(uint256 _amount) public{\n    require(userList[msg.sender].percentage >= _amount, \"You cannot withdraw this amount\");\n\n    uint256 balance = userList[msg.sender].moondayEthStaked.mul(_amount).div(userList[msg.sender].percentage);\n\n    (uint256 finalReserveSnapshot0, uint256 finalReserveSnapshot1,) = moonETHToken.getReserves();\n    uint256 finalPercentageSnapshot = balance.mul(1 ether).div(moonETHToken.totalSupply());\n\n\n    uint256 constantFirst = userList[msg.sender].reserveConstant.mul(userList[msg.sender].percentageSnapshot.mul(_amount).div(userList[msg.sender].percentage));\n    uint256 constantSecond = finalReserveSnapshot0.mul(finalReserveSnapshot1).mul(finalPercentageSnapshot);\n\n    uint256 deltaPercentage = constantSecond.mul(1 ether).div(constantFirst);\n    uint256 totalFees = 0;\n\n    if(deltaPercentage.mul(balance).div(1 ether) > balance){\n      totalFees = deltaPercentage.mul(balance).div(1 ether).sub(balance);\n    }\n\n    uint256 lpReturn = balance.sub(totalFees);\n    burnList[burnCount].totalFees += totalFees;\n    moonETHToken.transfer(msg.sender, lpReturn);\n    userList[msg.sender].moondayEthStaked -= userList[msg.sender].moondayEthStaked.mul(_amount).div(userList[msg.sender].percentage);\n    userList[msg.sender].percentage -= _amount;\n    userList[msg.sender].percentageSnapshot = userList[msg.sender].moondayEthStaked.mul(1 ether).div(moonETHToken.totalSupply());\n    //userList[msg.sender].reserveConstant = finalReserveSnapshot0.mul(finalReserveSnapshot1);\n  }\n\n  /// Give staker their mooncrop reward\n  /// @dev calculates claim and pays user\n  /// @param _index the stake to query\n  /// @return dividend claimed by user\n  function claim(uint256 _index) public returns(uint256){\n      require(stakeList[msg.sender][_index].amount > 0, \"Stake Doesnt Exist\");\n\n      uint256 reward = currentReward(msg.sender, _index);\n      IERC20Custom(crops).farmMint(msg.sender, reward);\n      stakeList[msg.sender][_index].amount = 0;\n      emit RewardPaid(msg.sender, reward);\n      return reward;\n  }\n\n  function burnMining(uint256 _amount) public{\n    require(!burnLock, \"Function Locked\");\n    IERC20Custom(crops).transferFrom(msg.sender, address(this), _amount.mul(1 ether));\n    IERC20Custom(crops).burn(_amount.mul(1 ether));\n    burnList[burnCount].totalBurn += _amount.mul(1 ether);\n    userList[msg.sender].burnStake[burnCount] += _amount.mul(1 ether);\n  }\n\n  function payoutBurns() public onlyDev{\n    uint256 balance = moonETHToken.balanceOf(address(this));\n\n    (burnList[burnCount].finalReserveSnapshot0, burnList[burnCount].finalReserveSnapshot1,) = moonETHToken.getReserves();\n    burnList[burnCount].finalPercentageSnapshot = moonETHToken.balanceOf(address(this)).mul(1 ether).div(moonETHToken.totalSupply());\n\n    uint256 constantFirst = burnList[burnCount].reserveSnapshot0.mul(burnList[burnCount].reserveSnapshot1).mul(burnList[burnCount].percentageSnapshot);\n    uint256 constantSecond = burnList[burnCount].finalReserveSnapshot0.mul(burnList[burnCount].finalReserveSnapshot1).mul(burnList[burnCount].finalPercentageSnapshot);\n\n    if(constantFirst != 0 && constantSecond != 0){\n      uint256 deltaPercentage = constantSecond.mul(1 ether).div(constantFirst);\n      if(deltaPercentage.mul(balance).div(1 ether) > balance){\n        burnList[burnCount].totalFees += deltaPercentage.mul(balance).div(1 ether).sub(balance);\n      }\n    }\n\n    burnCount++;\n    burnList[burnCount].burnStart = block.timestamp;\n    (burnList[burnCount].reserveSnapshot0, burnList[burnCount].reserveSnapshot1,) = moonETHToken.getReserves();\n    burnList[burnCount].percentageSnapshot = moonETHToken.balanceOf(address(this)).mul(1 ether).div(moonETHToken.totalSupply());\n  }\n\n  function claimBurns(uint256 _week) public{\n    require(burnList[_week].finalPercentageSnapshot != 0, \"Burn Not Finished Yet\");\n    require(!burnLock, \"Function Locked\");\n    uint256 divs = userList[msg.sender].burnStake[_week].mul(burnList[_week].totalFees).div(burnList[_week].totalBurn);\n\n    moonETHToken.transfer(msg.sender, divs);\n    userList[msg.sender].burnStake[_week] = 0;\n  }\n\n}"
    }
  }
}