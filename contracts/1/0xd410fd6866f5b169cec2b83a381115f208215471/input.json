{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Mult.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\ninterface IFactory {\r\n    function withdraw(uint256 salt, address token, address receiver) external returns (address wallet);\r\n}\r\n\r\ncontract Mult {\r\n    function withdraw(address factory, uint[] memory salt, address token, address receiver) external {\r\n        uint arrayLength = salt.length;\r\n\r\n        for (uint i=0; i<arrayLength; i++) {\r\n            IFactory(factory).withdraw(salt[i], token, receiver);\r\n        }\r\n    }\r\n}"}}}