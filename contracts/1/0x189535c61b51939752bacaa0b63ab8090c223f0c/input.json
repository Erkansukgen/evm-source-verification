{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 999
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/ADv10.sol": {
      "content": "//   _    _ _   _                __ _                            \r\n//  | |  (_) | | |              / _(_)                           \r\n//  | | ___| |_| |_ ___ _ __   | |_ _ _ __   __ _ _ __   ___ ___ \r\n//  | |/ / | __| __/ _ \\ '_ \\  |  _| | '_ \\ / _` | '_ \\ / __/ _ \\\r\n//  |   <| | |_| ||  __/ | | |_| | | | | | | (_| | | | | (_|  __/\r\n//  |_|\\_\\_|\\__|\\__\\___|_| |_(_)_| |_|_| |_|\\__,_|_| |_|\\___\\___|\r\n//\r\n//  AlphaDex v1.0 contract (AlphaSwap)\r\n//\r\n//  https://www.AlphaSwap.org\r\n//\r\npragma solidity ^0.6.12;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"!addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"!subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"!multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"!division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function mint(address account, uint amount) external;\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ncontract AlphaDexV0 {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    \r\n    struct MARKET_EPOCH {\r\n        uint timestamp;\r\n        uint accuPrice;\r\n        uint32 pairTimestamp;\r\n\r\n        mapping (address => mapping(uint => mapping (address => uint))) stake;\r\n        mapping (address => mapping(uint => uint)) totalStake;\r\n\r\n        mapping (address => mapping(uint => mapping (address => uint))) sssss;\r\n        mapping (address => mapping(uint => uint)) totalSssss;\r\n    }\r\n\r\n    mapping (address => mapping(uint => MARKET_EPOCH)) public market;\r\n    mapping (address => uint) public marketEpoch;\r\n    mapping (address => uint) public marketEpochPeriod;\r\n    \r\n    mapping (address => uint) public marketWhitelist;\r\n    mapping (address => uint) public tokenWhitelist;\r\n\r\n    event STAKE(address indexed user, address indexed market, uint opinion, address indexed token, uint amt);\r\n    event SYNC(address indexed market, uint epoch);\r\n    event PAYOFF(address indexed user, address indexed market, uint opinion, address indexed token, uint amt);\r\n    \r\n    event VAULT_DEPOSIT(address indexed user, address indexed token, uint amt);\r\n    event VAULT_WITHDRAW(address indexed user, address indexed token, uint amt);\r\n    \r\n    event MARKET_PERIOD(address indexed market, uint period);\r\n    event MARKET_WHITELIST(address indexed market, uint status);\r\n    event TOKEN_WHITELIST(address indexed token, uint status);\r\n    event FEE_CHANGE(address indexed market, address indexed token, uint BP);\r\n    \r\n    //====================================================================\r\n    \r\n    address public govAddr;\r\n    address public devAddr;\r\n    \r\n    mapping (address => mapping(address => uint)) public devFeeBP; // in terms of basis points (1 bp = 0.01%)\r\n    \r\n    constructor () public {\r\n        govAddr = msg.sender;\r\n        devAddr = msg.sender;\r\n    }\r\n    \r\n    modifier govOnly() {\r\n    \trequire(msg.sender == govAddr, \"!gov\");\r\n    \t_;\r\n    }\r\n    function govTransferAddr(address newAddr) external govOnly {\r\n    \trequire(newAddr != address(0), \"!addr\");\r\n    \tgovAddr = newAddr;\r\n    }\r\n    function govSetEpochPeriod(address xMarket, uint newPeriod) external govOnly {\r\n        require (newPeriod > 0, \"!period\");\r\n        marketEpochPeriod[xMarket] = newPeriod;\r\n        emit MARKET_PERIOD(xMarket, newPeriod);\r\n    }\r\n    function govMarketWhitelist(address xMarket, uint status) external govOnly {\r\n        require (status <= 1, \"!status\");\r\n        marketWhitelist[xMarket] = status;\r\n        emit MARKET_WHITELIST(xMarket, status);\r\n    }\r\n    function govTokenWhitelist(address xToken, uint status) external govOnly {\r\n        require (status <= 1, \"!status\");\r\n        tokenWhitelist[xToken] = status;\r\n        emit TOKEN_WHITELIST(xToken, status);\r\n    }\r\n    function govSetDevFee(address xMarket, address xToken, uint newBP) external govOnly {\r\n        require (newBP <= 50); // max fee = 50 basis points = 0.5% (and only from profits of winners)\r\n    \tdevFeeBP[xMarket][xToken] = newBP;\r\n    \temit FEE_CHANGE(xMarket, xToken, newBP);\r\n    }\r\n    \r\n    uint public gAAA = 1000;\r\n    uint public gBBB = 200000;\r\n    uint public gTTT = 1000;\r\n\r\n    function govSetExtra(uint newAAA, uint newBBB, uint newTTT) external govOnly {\r\n        require (newAAA < 50000);\r\n        require (newBBB >= 100000);\r\n        require (newBBB <= 500000);\r\n        require (newTTT <= 100000);\r\n    \tgAAA = newAAA;\r\n    \tgBBB = newBBB;\r\n    \tgTTT = newTTT;\r\n    }\r\n    \r\n    //====================================================================\r\n        \r\n    modifier devOnly() {\r\n    \trequire(msg.sender == devAddr, \"!dev\");\r\n    \t_;\r\n    }\r\n    function devTransferAddr(address newAddr) external devOnly {\r\n    \trequire(newAddr != address(0), \"!addr\");\r\n    \tdevAddr = newAddr;\r\n    }\r\n    \r\n    //====================================================================\r\n\r\n    function readStakeAndSssss(address user, address xMarket, uint xEpoch, uint xOpinion, address xToken) external view returns (uint _stake, uint _sssss) {\r\n        _stake = market[xMarket][xEpoch].stake[xToken][xOpinion][user];\r\n        _sssss = market[xMarket][xEpoch].sssss[xToken][xOpinion][user];\r\n    }\r\n    function readTotalStakeAndSssss(address xMarket, uint xEpoch, uint xOpinion, address xToken) external view returns (uint _stake, uint _sssss) {\r\n        _stake = market[xMarket][xEpoch].totalStake[xToken][xOpinion];\r\n        _sssss = market[xMarket][xEpoch].totalSssss[xToken][xOpinion];\r\n    }\r\n    \r\n    //====================================================================\r\n    \r\n    mapping (address => mapping(address => uint)) public vault;\r\n\r\n    function vaultWithdraw(address xToken, uint amt) external \r\n    {\r\n        address payable user = msg.sender;\r\n\r\n        vault[user][xToken] = vault[user][xToken].sub(amt);\r\n        if (xToken == address(0)) {\r\n            user.transfer(amt);\r\n        } else {\r\n            IERC20(xToken).safeTransfer(user, amt);\r\n        }\r\n        emit VAULT_WITHDRAW(user, xToken, amt);\r\n    }\r\n    \r\n    function vaultDeposit(address xToken, uint amt) external payable\r\n    {\r\n        address user = msg.sender;\r\n\r\n        if (xToken == address(0)) {\r\n            vault[user][xToken] = vault[user][xToken].add(msg.value);\r\n        } else {\r\n            IERC20(xToken).safeTransferFrom(user, address(this), amt);\r\n            vault[user][xToken] = vault[user][xToken].add(amt);\r\n        }\r\n        emit VAULT_DEPOSIT(user, xToken, amt);\r\n    }\r\n    \r\n    //====================================================================\r\n    \r\n    function Stake(address xMarket, uint xEpoch, uint xOpinion, address xToken, uint xAmt, uint useVault) public payable\r\n    {\r\n        if ((xToken == address(0)) && (useVault == 0)) {\r\n            xAmt = msg.value;\r\n        }\r\n        require (xAmt > 0, \"!amt\");\r\n        require (xOpinion <= 1, \"!opinion\");\r\n        require (marketWhitelist[xMarket] > 0, \"!market\");\r\n        require (tokenWhitelist[xToken] > 0, \"!token\");\r\n\r\n        uint thisEpoch = marketEpoch[xMarket];\r\n        require (xEpoch == thisEpoch, \"!epoch\");\r\n        MARKET_EPOCH storage m = market[xMarket][thisEpoch];\r\n\r\n        address user = msg.sender;\r\n        \r\n        if (useVault > 0) {\r\n            vault[user][xToken] = vault[user][xToken].sub(xAmt);\r\n        } else if (xToken != address(0)) {\r\n            IERC20(xToken).safeTransferFrom(user, address(this), xAmt);\r\n        }\r\n        \r\n        uint epochPeriod = marketEpochPeriod[xMarket];\r\n        uint factor = (block.timestamp).sub(m.timestamp);\r\n        uint userSssss;\r\n        if (factor >= epochPeriod) {\r\n            userSssss = xAmt;\r\n        } else {\r\n            factor = epochPeriod.sub(factor);\r\n            factor = 100000 + gTTT.mul(factor).div(epochPeriod);\r\n            userSssss = xAmt.mul(factor).div(100000);        \r\n        }\r\n        \r\n        m.stake[xToken][xOpinion][user] = m.stake[xToken][xOpinion][user].add(xAmt);\r\n        m.totalStake[xToken][xOpinion] = m.totalStake[xToken][xOpinion].add(xAmt);\r\n\r\n        m.sssss[xToken][xOpinion][user] = m.sssss[xToken][xOpinion][user].add(userSssss);\r\n        m.totalSssss[xToken][xOpinion] = m.totalSssss[xToken][xOpinion].add(userSssss);\r\n        \r\n        emit STAKE(user, xMarket, xOpinion, xToken, xAmt);\r\n    }\r\n    \r\n    function Sync(address xMarket) external \r\n    {\r\n        IUniswapV2Pair pair = IUniswapV2Pair(xMarket);\r\n        uint112 reserve0;\r\n        uint112 reserve1;\r\n        uint32 pairTimestamp;\r\n        (reserve0, reserve1, pairTimestamp) = pair.getReserves();\r\n        \r\n        uint thisEpoch = marketEpoch[xMarket];\r\n        MARKET_EPOCH memory mmm = market[xMarket][thisEpoch];\r\n        uint newEpoch = 0;\r\n        \r\n        if (mmm.timestamp > 0) {\r\n            uint epochPeriod = marketEpochPeriod[xMarket];\r\n            uint thisPeriod = (block.timestamp).div(epochPeriod);\r\n            uint marketPeriod = (mmm.timestamp).div(epochPeriod);\r\n            \r\n            require (thisPeriod > marketPeriod, \"!thisPeriod\");\r\n            require (pairTimestamp > mmm.pairTimestamp, \"!no-trade\");\r\n\r\n            newEpoch = thisEpoch.add(1);\r\n            marketEpoch[xMarket] = newEpoch;\r\n        }\r\n        \r\n        MARKET_EPOCH storage m = market[xMarket][newEpoch];\r\n\r\n        m.timestamp = block.timestamp;\r\n        m.pairTimestamp = pairTimestamp;\r\n        m.accuPrice = pair.price0CumulativeLast();\r\n        \r\n        emit SYNC(xMarket, newEpoch);\r\n    }\r\n    \r\n    function _getResult(address xMarket, uint xEpoch) internal view returns (uint)\r\n    {\r\n        uint224 p01 = 0;\r\n        uint224 p12 = 0;\r\n\r\n        MARKET_EPOCH memory m0 = market[xMarket][xEpoch.add(1)];\r\n        MARKET_EPOCH memory m1 = market[xMarket][xEpoch.add(2)];\r\n        MARKET_EPOCH memory m2 = market[xMarket][xEpoch.add(3)];\r\n        \r\n        // overflow is desired\r\n        uint32 t01 = m1.pairTimestamp - m0.pairTimestamp;\r\n        if (t01 > 0)\r\n            p01 = uint224((m1.accuPrice - m0.accuPrice) / t01);\r\n        \r\n        uint32 t12 = m2.pairTimestamp - m1.pairTimestamp;\r\n        if (t12 > 0)\r\n            p12 = uint224((m2.accuPrice - m1.accuPrice) / t12);\r\n\r\n        if ((p01 == p12) || (p01 == 0) || (p12 == 0)) {\r\n            return 2;\r\n        }\r\n        \r\n        if (p12 > p01)\r\n            return 1;\r\n            \r\n        return 0;\r\n    }\r\n    \r\n    uint constant UINT_MAX = 2**256 - 1;\r\n    \r\n    function _getPnL(address user, address xMarket, uint xEpoch, uint xOpinion, address xToken) internal view returns (uint _PnL, uint _isProfit)\r\n    {\r\n        MARKET_EPOCH storage mm = market[xMarket][xEpoch];\r\n        \r\n        uint userStake = mm.stake[xToken][xOpinion][user];\r\n        uint sameStake = mm.totalStake[xToken][xOpinion];\r\n        uint diffStake = mm.totalStake[xToken][1-xOpinion];\r\n\r\n        uint userSssss = mm.sssss[xToken][xOpinion][user];\r\n        uint sameSssss = mm.totalSssss[xToken][xOpinion];\r\n\r\n        uint result = _getResult(xMarket, xEpoch);\r\n\r\n        _PnL = 0;\r\n        _isProfit = 0;\r\n        \r\n        if ((result > 1) || (diffStake == 0) || (sameStake == 0) || (userStake == 0) || (userSssss == 0)) {\r\n            // all zero\r\n        }\r\n        else {\r\n            if (diffStake >= sameStake) {\r\n                if (xOpinion == result) {\r\n                    uint delta = 100000 + (diffStake.sub(sameStake)).mul(gAAA).div(sameStake);\r\n                    if (delta > gBBB)\r\n                        delta = gBBB;\r\n                    delta = sameStake.mul(delta).div(100000);\r\n                    \r\n                    _PnL = userSssss.mul(delta).div(sameSssss);\r\n                    _isProfit = 1;\r\n                } else {\r\n                    _PnL = UINT_MAX;\r\n                    _isProfit = 0;\r\n                }\r\n            } \r\n            else {\r\n                if (xOpinion == result) {\r\n                    _PnL = userSssss.mul(diffStake).div(sameSssss);\r\n                    _isProfit = 1;\r\n                }\r\n                else {\r\n                    uint delta = 100000 + (sameStake.sub(diffStake)).mul(gAAA).div(diffStake);\r\n                    if (delta > gBBB)\r\n                        delta = gBBB;\r\n                    delta = diffStake.mul(delta).div(100000);\r\n                    \r\n                    _PnL = userStake.mul(delta).div(sameStake); // use STAKE\r\n                    _isProfit = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function Payoff(address xMarket, uint xEpoch, uint xOpinion, address xToken, uint useVault) public \r\n    {\r\n        require (xOpinion <= 1, \"!opinion\");\r\n        {\r\n            uint thisEpoch = marketEpoch[xMarket];\r\n            require (xEpoch <= thisEpoch.sub(3), \"!epoch\");\r\n        }\r\n\r\n        address payable user = msg.sender;\r\n        \r\n        uint PnL;\r\n        uint isProfit;\r\n        (PnL, isProfit) = _getPnL(user, xMarket, xEpoch, xOpinion, xToken);\r\n        \r\n        MARKET_EPOCH storage mm = market[xMarket][xEpoch];\r\n        uint userStake = mm.stake[xToken][xOpinion][user];\r\n        \r\n        uint amtOut = 0;\r\n        if (isProfit > 0) {\r\n            uint devBP = devFeeBP[xMarket][xToken];\r\n            uint devFee = PnL.mul(devBP).div(10000);\r\n            vault[devAddr][xToken] = vault[devAddr][xToken].add(devFee);\r\n            amtOut = userStake.add(PnL).sub(devFee);            \r\n        } else {\r\n            amtOut = userStake.sub(PnL);\r\n        }\r\n        \r\n        require (amtOut > 0, \"!zeroAmt\");\r\n\r\n        mm.stake[xToken][xOpinion][user] = 0;\r\n        mm.sssss[xToken][xOpinion][user] = 0;\r\n\r\n        if (useVault > 0) {\r\n            vault[user][xToken] = vault[user][xToken].add(amtOut);\r\n        } else {\r\n            if (xToken == address(0)) {\r\n                user.transfer(amtOut);\r\n            } else {\r\n                IERC20(xToken).safeTransfer(user, amtOut);\r\n            }\r\n        }\r\n        \r\n        emit PAYOFF(user, xMarket, xOpinion, xToken, amtOut);\r\n    }\r\n    \r\n    function Switch(address xMarket, uint xEpoch, uint xOpinion, address zToken, uint zAmt, address yMarket, uint yEpoch, uint yOpinion) external\r\n    {\r\n        Payoff(xMarket, xEpoch, xOpinion, zToken, 1);\r\n        Stake(yMarket, yEpoch, yOpinion, zToken, zAmt, 1);\r\n    }\r\n}\r\n"
    }
  }
}