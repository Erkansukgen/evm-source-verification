{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"TokenDistributor.sol":{"content":"pragma solidity 0.4.25;\r\n\r\ninterface Token {\r\n  function transfer(address _to, uint256 _value) external returns (bool);\r\n}\r\n\r\ncontract onlyOwner {\r\n  address public owner;\r\n  /** \r\n  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n  * account.\r\n  */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n  modifier isOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n}\r\n\r\ncontract TokenDistributor is onlyOwner{\r\n\r\n  Token token;\r\n  event TransferredToken(address indexed to, uint256 value);\r\n  address distTokens;\r\n  uint256 decimal;\r\n\r\n  constructor(address _contract, uint256 _tokenDecimal) public{\r\n      distTokens = _contract;\r\n      decimal = _tokenDecimal;\r\n      token = Token(_contract);\r\n  }\r\n  \r\n  function setTokenContract(address _contract, uint256 _tokenDecimal) isOwner public{\r\n      distTokens = _contract;\r\n      decimal = _tokenDecimal;\r\n      token = Token(_contract);\r\n  } \r\n  \r\n  function getTokenContract() public view returns(address){\r\n      return distTokens;\r\n  }\r\n  function sendAmount(address[] _user, uint256 value) isOwner public returns(bool){\r\n\tfor(uint i=0; i< _user.length; i++)\r\n    token.transfer(_user[i], value*10**decimal);\r\n    return true;\r\n  }\r\n \r\n}"}}}