{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/BondDepository.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\nimport \"./libraries/SafeMath.sol\";\nimport \"./libraries/FixedPoint.sol\";\nimport \"./libraries/Address.sol\";\nimport \"./libraries/SafeERC20.sol\";\n\nimport \"./interfaces/ITreasury.sol\";\nimport \"./interfaces/IStaking.sol\";\nimport \"./interfaces/IStakingHelper.sol\";\nimport \"./interfaces/IBondCalculator.sol\";\n\nimport \"./Policy.sol\";\n\ncontract OlympusBondDepository is Policy {\n    using FixedPoint for *;\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n\n    /* ======== EVENTS ======== */\n\n    event BondCreated( uint deposit, uint indexed payout, uint indexed expires, uint indexed priceInUSD );\n    event BondRedeemed( address indexed recipient, uint payout, uint remaining );\n    event BondPriceChanged( uint indexed priceInUSD, uint indexed internalPrice, uint indexed debtRatio );\n    event ControlVariableAdjustment( uint initialBCV, uint newBCV, uint adjustment, bool addition );\n\n    /* ======== STATE VARIABLES ======== */\n\n    address public immutable Trava; // token given as payment for bond\n    address public immutable principle; // token used to create bond\n    address public immutable treasury; // mints Trava when receives principle\n    // address public immutable DAO; // receives profit share from bond\n\n    // bool public immutable isLiquidityBond; // LP and Reserve bonds are treated slightly different\n    // address public immutable bondCalculator; // calculates value of LP tokens\n\n    address public staking; // to auto-stake payout\n    address public stakingHelper; // to stake and claim if no staking warmup\n    bool public useHelper;\n\n    Terms public terms; // stores terms for new bonds\n    Adjust public adjustment; // stores adjustment to BCV data\n\n    mapping( address => Bond ) public bondInfo; // stores bond information for depositors\n\n    uint public totalDebt; // total value of outstanding bonds; used for pricing\n    uint public lastDecay; // reference block for debt decay\n\n    /* ======== STRUCTS ======== */\n\n    // Info for creating new bonds\n    struct Terms {\n        uint controlVariable; // scaling variable for price\n        uint vestingTerm; // in blocks\n        uint minimumPrice; // vs principle value\n        uint maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\n        uint maxDebt; // 9 decimal debt ratio, max % total supply created as debt\n    }\n\n    // Info for bond holder\n    struct Bond {\n        uint payout; // Trava remaining to be paid\n        uint vesting; // Blocks left to vest\n        uint lastBlock; // Last interaction\n        uint pricePaid; // In DAI, for front end viewing\n    }\n\n    // Info for incremental adjustments to control variable \n    struct Adjust {\n        bool add; // addition or subtraction\n        uint rate; // increment\n        uint target; // BCV when adjustment finished\n        uint buffer; // minimum length (in blocks) between adjustments\n        uint lastBlock; // block when last adjustment made\n    }\n\n    /* ======== INITIALIZATION ======== */\n\n    constructor ( \n        address _Trava,\n        address _principle,\n        address _treasury \n        // address _DAO, \n        // address _bondCalculator\n    ) {\n        require( _Trava != address(0) );\n        Trava = _Trava;\n        require( _principle != address(0) );\n        principle = _principle;\n        require( _treasury != address(0) );\n        treasury = _treasury;\n        // require( _DAO != address(0) );\n        // DAO = _DAO;\n        // bondCalculator should be address(0) if not LP bond\n        // bondCalculator = _bondCalculator;\n        // isLiquidityBond = ( _bondCalculator != address(0) );\n    }\n\n    /**\n     *  @notice initializes bond parameters\n     *  @param _controlVariable uint\n     *  @param _vestingTerm uint\n     *  @param _minimumPrice uint\n     *  @param _maxPayout uint\n     *  @param _maxDebt uint\n     *  @param _initialDebt uint\n     */\n    function initializeBondTerms( \n        uint _controlVariable, \n        uint _vestingTerm,\n        uint _minimumPrice,\n        uint _maxPayout,\n        uint _maxDebt,\n        uint _initialDebt\n    ) external onlyPolicy() {\n        require( terms.controlVariable == 0, \"Bonds must be initialized from 0\" );\n        terms = Terms ({\n            controlVariable: _controlVariable,\n            vestingTerm: _vestingTerm,\n            minimumPrice: _minimumPrice,\n            maxPayout: _maxPayout,\n            maxDebt: _maxDebt\n        });\n        totalDebt = _initialDebt;\n        lastDecay = block.number;\n    }\n\n\n\n    \n    /* ======== POLICY FUNCTIONS ======== */\n\n    enum PARAMETER { VESTING, PAYOUT, DEBT}\n    /**\n     *  @notice set parameters for new bonds\n     *  @param _parameter PARAMETER\n     *  @param _input uint\n     */\n    function setBondTerms ( PARAMETER _parameter, uint _input ) external onlyPolicy() {\n        if ( _parameter == PARAMETER.VESTING ) { // 0\n            require( _input >= 10000, \"Vesting must be longer than 36 hours\" );\n            terms.vestingTerm = _input;\n        } else if ( _parameter == PARAMETER.PAYOUT ) { // 1\n            require( _input <= 1000, \"Payout cannot be above 1 percent\" );\n            terms.maxPayout = _input;\n        } else if ( _parameter == PARAMETER.DEBT ) { // 2\n            terms.maxDebt = _input;\n        }\n    }\n\n    /**\n     *  @notice set control variable adjustment\n     *  @param _addition bool\n     *  @param _increment uint\n     *  @param _target uint\n     *  @param _buffer uint\n     */\n    function setAdjustment ( \n        bool _addition,\n        uint _increment, \n        uint _target,\n        uint _buffer \n    ) external onlyPolicy() {\n        require( _increment <= terms.controlVariable.mul( 25 ).div( 1000 ), \"Increment too large\" );\n\n        adjustment = Adjust({\n            add: _addition,\n            rate: _increment,\n            target: _target,\n            buffer: _buffer,\n            lastBlock: block.number\n        });\n    }\n\n    /**\n     *  @notice set contract for auto stake\n     *  @param _staking address\n     *  @param _helper bool\n     */\n    function setStaking( address _staking, bool _helper ) external onlyPolicy() {\n        require( _staking != address(0) );\n        if ( _helper ) {\n            useHelper = true;\n            stakingHelper = _staking;\n        } else {\n            useHelper = false;\n            staking = _staking;\n        }\n    } \n\n    /* ======== USER FUNCTIONS ======== */\n\n    /**\n     *  @notice deposit bond\n     *  @param _amount uint\n     *  @param _maxPrice uint\n     *  @param _depositor address\n     *  @return uint\n     */\n    function deposit( \n        uint _amount, \n        uint _maxPrice,\n        address _depositor\n    ) external returns ( uint ) {\n        require( _depositor != address(0), \"Invalid address\" );\n\n        decayDebt();\n        require( totalDebt <= terms.maxDebt, \"Max capacity reached\" );\n        \n        uint priceInUSD = bondPriceInUSD(); // Stored in bond info\n        uint nativePrice = _bondPrice();\n\n        require( _maxPrice >= nativePrice, \"Slippage limit: more than max price\" ); // slippage protection\n\n        uint value = ITreasury( treasury ).valueOf( principle, _amount );\n        uint payout = payoutFor( value ); // payout to bonder is computed\n\n        require( payout >= 10000000000000000, \"Bond too small\" ); // must be > 0.01 Trava ( underflow protection )\n        require( payout <= maxPayout(), \"Bond too large\"); // size protection because there is no slippage\n\n        // profits are calculated\n        // uint fee = payout.mul( terms.fee ).div( 10000 );\n        // uint profit = value.sub( payout ).sub( fee );\n\n        /**\n            principle is transferred in\n            approved and\n            deposited into the treasury, returning (_amount - profit) Trava\n         */\n        IERC20( principle ).safeTransferFrom( msg.sender, treasury, _amount );\n        ITreasury( treasury ).mintRewards( address(this), payout);\n        \n        // total debt is increased\n        totalDebt = totalDebt.add(value); \n                \n        // depositor info is stored\n        bondInfo[ _depositor ] = Bond({ \n            payout: bondInfo[ _depositor ].payout.add( payout ),\n            vesting: terms.vestingTerm,\n            lastBlock: block.number,\n            pricePaid: priceInUSD\n        });\n\n        // indexed events are emitted\n        emit BondCreated( _amount, payout, block.number.add( terms.vestingTerm ), priceInUSD );\n        emit BondPriceChanged( bondPriceInUSD(), _bondPrice(), debtRatio() );\n\n        adjust(); // control variable is adjusted\n        return payout; \n    }\n\n    /** \n     *  @notice redeem bond for user\n     *  @param _recipient address\n     *  @param _stake bool\n     *  @return uint\n     */ \n    function redeem( address _recipient, bool _stake ) external returns ( uint ) {        \n        if (_stake) {\n            require(staking != address(0), \"STAKING_NOT_SUPPORTED\");\n        }\n        Bond memory info = bondInfo[ _recipient ];\n        uint percentVested = percentVestedFor( _recipient ); // (blocks since last interaction / vesting term remaining)\n\n        if ( percentVested >= 10000 ) { // if fully vested\n            delete bondInfo[ _recipient ]; // delete user info\n            emit BondRedeemed( _recipient, info.payout, 0 ); // emit bond data\n            return stakeOrSend( _recipient, _stake, info.payout ); // pay user everything due\n\n        } else { // if unfinished\n            // calculate payout vested\n            uint payout = info.payout.mul( percentVested ).div( 10000 );\n\n            // store updated deposit info\n            bondInfo[ _recipient ] = Bond({\n                payout: info.payout.sub( payout ),\n                vesting: info.vesting.sub( block.number.sub( info.lastBlock ) ),\n                lastBlock: block.number,\n                pricePaid: info.pricePaid\n            });\n\n            emit BondRedeemed( _recipient, payout, bondInfo[ _recipient ].payout );\n            return stakeOrSend( _recipient, _stake, payout );\n        }\n    }\n\n\n\n    \n    /* ======== INTERNAL HELPER FUNCTIONS ======== */\n\n    /**\n     *  @notice allow user to stake payout automatically\n     *  @param _stake bool\n     *  @param _amount uint\n     *  @return uint\n     */\n    function stakeOrSend( address _recipient, bool _stake, uint _amount ) internal returns ( uint ) {\n        if ( !_stake ) { // if user does not want to stake\n            IERC20( Trava ).transfer( _recipient, _amount ); // send payout\n        } else { // if user wants to stake and stake deployed\n            require(staking != address(0), \"STAKING_NOT_SUPPORTED\");\n            if ( useHelper ) { // use if staking warmup is 0\n                IERC20( Trava ).approve( stakingHelper, _amount );\n                IStakingHelper( stakingHelper ).stake( _amount, _recipient );\n            } else {\n                IERC20( Trava ).approve( staking, _amount );\n                IStaking( staking ).stake( _amount, _recipient );\n            }\n        }\n        // IERC20( Trava ).transfer( _recipient, _amount ); // send payout\n        return _amount;\n    }\n\n    /**\n     *  @notice makes incremental adjustment to control variable\n     */\n    function adjust() internal {\n        uint blockCanAdjust = adjustment.lastBlock.add( adjustment.buffer );\n        if( adjustment.rate != 0 && block.number >= blockCanAdjust ) {\n            uint initial = terms.controlVariable;\n            if ( adjustment.add ) {\n                terms.controlVariable = terms.controlVariable.add( adjustment.rate );\n                if ( terms.controlVariable >= adjustment.target ) {\n                    adjustment.rate = 0;\n                }\n            } else {\n                terms.controlVariable = terms.controlVariable.sub( adjustment.rate );\n                if ( terms.controlVariable <= adjustment.target ) {\n                    adjustment.rate = 0;\n                }\n            }\n            adjustment.lastBlock = block.number;\n            emit ControlVariableAdjustment( initial, terms.controlVariable, adjustment.rate, adjustment.add );\n        }\n    }\n\n    /**\n     *  @notice reduce total debt\n     */\n    function decayDebt() internal {\n        totalDebt = totalDebt.sub( debtDecay() );\n        lastDecay = block.number;\n    }\n\n\n\n\n    /* ======== VIEW FUNCTIONS ======== */\n\n    /**\n     *  @notice determine maximum bond size\n     *  @return uint\n     */\n    function maxPayout() public view returns ( uint ) {\n        return IERC20(Trava).totalSupply().mul( terms.maxPayout ).div( 100000 );\n    }\n\n    /**\n     *  @notice calculate interest due for new bond\n     *  @param _value uint\n     *  @return uint\n     */\n    function payoutFor( uint _value ) public view returns ( uint ) {\n        return FixedPoint.fraction( _value, bondPrice()).decode112with18();\n    }\n\n\n    /**\n     *  @notice calculate current bond premium\n     *  @return price_ uint\n     */\n    function bondPrice() public view returns ( uint price_ ) {        \n        price_ = terms.controlVariable.mul( debtRatio() );\n        if ( price_ < terms.minimumPrice ) {\n            price_ = terms.minimumPrice;\n        }\n        // return travaPrice.mul(uint(100000).sub(terms.discountRatio)).div(100000);\n    }\n\n    /**\n     *  @notice calculate current bond price and remove floor if above\n     *  @return price_ uint\n     */\n    function _bondPrice() internal returns ( uint price_ ) {\n        price_ = terms.controlVariable.mul( debtRatio() );\n        if ( price_ < terms.minimumPrice ) {\n            price_ = terms.minimumPrice;        \n        } else if ( terms.minimumPrice != 0 ) {\n            terms.minimumPrice = 0;\n        }\n    }\n\n    /**\n     *  @notice converts bond price to DAI value\n     *  @return price_ uint\n     */\n    function bondPriceInUSD() public view returns ( uint price_ ) {\n        // if( isLiquidityBond ) {\n        //     price_ = bondPrice().mul( IBondCalculator( bondCalculator ).markdown( principle ) ).div( 100 );\n        // } else {\n        //     price_ = bondPrice().mul( 10 ** IERC20( principle ).decimals() ).div( 100 );\n        // }\n        price_ = bondPrice();\n    }\n\n    /**\n     *  @notice calculate current ratio of debt to Trava supply\n     *  @return debtRatio_ uint\n     */\n    function debtRatio() public view returns ( uint debtRatio_ ) {   \n        uint supply = uint(800000000).mul( 1e18 );\n        debtRatio_ = FixedPoint.fraction( \n            currentDebt().mul( 1e18 ), \n            supply\n        ).decode112with18().div( 1e18 );\n    }\n\n    /**\n     *  @notice debt ratio in same terms for reserve or liquidity bonds\n     *  @return uint\n     */\n    function standardizedDebtRatio() external view returns ( uint ) {\n        // if ( isLiquidityBond ) {\n        //     return debtRatio().mul( IBondCalculator( bondCalculator ).markdown( principle ) ).div( 1e9 );\n        // } else {\n        //     return debtRatio();\n        // }\n        return debtRatio();\n    }\n\n    /**\n     *  @notice calculate debt factoring in decay\n     *  @return uint\n     */\n    function currentDebt() public view returns ( uint ) {\n        return totalDebt.sub( debtDecay() );\n    }\n\n    /**\n     *  @notice amount to decay total debt by\n     *  @return decay_ uint\n     */\n    function debtDecay() public view returns ( uint decay_ ) {\n        uint blocksSinceLast = block.number.sub( lastDecay );\n        decay_ = totalDebt.mul( blocksSinceLast ).div( terms.vestingTerm );\n        if ( decay_ > totalDebt ) {\n            decay_ = totalDebt;\n        }\n    }\n\n\n    /**\n     *  @notice calculate how far into vesting a depositor is\n     *  @param _depositor address\n     *  @return percentVested_ uint\n     */\n    function percentVestedFor( address _depositor ) public view returns ( uint percentVested_ ) {\n        Bond memory bond = bondInfo[ _depositor ];\n        uint blocksSinceLast = block.number.sub( bond.lastBlock );\n        uint vesting = bond.vesting;\n\n        if ( vesting > 0 ) {\n            percentVested_ = blocksSinceLast.mul( 10000 ).div( vesting );\n        } else {\n            percentVested_ = 0;\n        }\n    }\n\n    /**\n     *  @notice calculate amount of Trava available for claim by depositor\n     *  @param _depositor address\n     *  @return pendingPayout_ uint\n     */\n    function pendingPayoutFor( address _depositor ) external view returns ( uint pendingPayout_ ) {\n        uint percentVested = percentVestedFor( _depositor );\n        uint payout = bondInfo[ _depositor ].payout;\n\n        if ( percentVested >= 10000 ) {\n            pendingPayout_ = payout;\n        } else {\n            pendingPayout_ = payout.mul( percentVested ).div( 10000 );\n        }\n    }\n\n    // /* ======= AUXILLIARY ======= */\n\n    // /**\n    //  *  @notice allow anyone to send lost tokens (excluding principle or Trava) to the DAO\n    //  *  @return bool\n    //  */\n    // function recoverLostToken( address _token ) external returns ( bool ) {\n    //     require( _token != Trava );\n    //     require( _token != principle );\n    //     IERC20( _token ).safeTransfer( DAO, IERC20( _token ).balanceOf( address(this) ) );\n    //     return true;\n    // }\n}\n"},"contracts/Policy.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\nimport \"./interfaces/IPolicy.sol\";\n\ncontract Policy is IPolicy {\n    \n    address internal _policy;\n    address internal _newPolicy;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        _policy = msg.sender;\n        emit OwnershipTransferred( address(0), _policy );\n    }\n\n    function policy() public view override returns (address) {\n        return _policy;\n    }\n\n    modifier onlyPolicy() {\n        require( _policy == msg.sender, \"Ownable: caller is not the owner\" );\n        _;\n    }\n\n    function renouncePolicy() public virtual override onlyPolicy() {\n        emit OwnershipTransferred( _policy, address(0) );\n        _policy = address(0);\n    }\n\n    function pushPolicy( address newPolicy_ ) public virtual override onlyPolicy() {\n        require( newPolicy_ != address(0), \"Ownable: new owner is the zero address\");\n        _newPolicy = newPolicy_;\n    }\n\n    function pullPolicy() public virtual override {\n        require( msg.sender == _newPolicy );\n        emit OwnershipTransferred( _policy, _newPolicy );\n        _policy = _newPolicy;\n    }\n}"},"contracts/interfaces/IBondCalculator.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\ninterface IBondCalculator {\n    function valuation( address _LP, uint _amount ) external view returns ( uint );\n    function markdown( address _LP ) external view returns ( uint );\n}"},"contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity >=0.7.5;\n\ninterface IERC20 {\n\n  function decimals() external view returns (uint8);\n  \n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n   * allowance mechanism. `amount` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"contracts/interfaces/IPolicy.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\ninterface IPolicy {\n\n    function policy() external view returns (address);\n\n    function renouncePolicy() external;\n  \n    function pushPolicy( address newPolicy_ ) external;\n\n    function pullPolicy() external;\n}"},"contracts/interfaces/IStaking.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\ninterface IStaking {\n    function stake( uint _amount, address _recipient ) external returns ( bool );\n\n    function claim( address _recipient ) external;\n\n    function forfeit() external returns (uint256);\n\n    function toggleDepositLock() external;\n\n    function unstake( uint _amount, bool _trigger ) external;\n\n    function rebase() external;\n\n    function index() external view returns (uint256);\n\n    function contractBalance() external view returns (uint256);\n\n}"},"contracts/interfaces/IStakingHelper.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\ninterface IStakingHelper {\n    function stake( uint _amount, address _recipient ) external;\n}"},"contracts/interfaces/ITreasury.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity >=0.7.5;\n\ninterface ITreasury {\n    function deposit(\n        uint256 _amount,\n        address _token,\n        uint256 _profit\n    ) external returns (uint256);\n\n    function withdraw(uint256 _amount, address _token) external;\n\n    function valueOf(address _token, uint256 _amount) external view returns (uint256 value_);\n\n    function mintRewards(address _recipient, uint256 _amount) external;\n\n    function manage(address _token, uint256 _amount) external;\n\n    function incurDebt(uint256 amount_, address token_) external;\n\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\n\n    function excessReserves() external view returns (uint256);\n}"},"contracts/libraries/Address.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.7.5;\n\n\n// TODO(zx): replace with OZ implementation.\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    // function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n    //     require(address(this).balance >= value, \"Address: insufficient balance for call\");\n    //     return _functionCallWithValue(target, data, value, errorMessage);\n    // }\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n\n  /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n\n    function addressToString(address _address) internal pure returns(string memory) {\n        bytes32 _bytes = bytes32(uint256(_address));\n        bytes memory HEX = \"0123456789abcdef\";\n        bytes memory _addr = new bytes(42);\n\n        _addr[0] = '0';\n        _addr[1] = 'x';\n\n        for(uint256 i = 0; i < 20; i++) {\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\n        }\n\n        return string(_addr);\n\n    }\n}"},"contracts/libraries/FixedPoint.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\nimport \"./FullMath.sol\";\n\nlibrary FixedPoint {\n\n    struct uq112x112 {\n        uint224 _x;\n    }\n\n    struct uq144x112 {\n        uint256 _x;\n    }\n\n    uint8 private constant RESOLUTION = 112;\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\n\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\n        return uint112(self._x >> RESOLUTION);\n    }\n\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\n\n        return uint(self._x) / 5192296858534827;\n    }\n\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\n        if (numerator == 0) return FixedPoint.uq112x112(0);\n\n        if (numerator <= uint144(-1)) {\n            uint256 result = (numerator << RESOLUTION) / denominator;\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\n            return uq112x112(uint224(result));\n        } else {\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\n            return uq112x112(uint224(result));\n        }\n    }\n}"},"contracts/libraries/FullMath.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.7.5;\n\nlibrary FullMath {\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\n        uint256 mm = mulmod(x, y, uint256(-1));\n        l = x * y;\n        h = mm - l;\n        if (mm < l) h -= 1;\n    }\n\n    function fullDiv(\n        uint256 l,\n        uint256 h,\n        uint256 d\n    ) private pure returns (uint256) {\n        uint256 pow2 = d & -d;\n        d /= pow2;\n        l /= pow2;\n        l += h * ((-pow2) / pow2 + 1);\n        uint256 r = 1;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        return l * r;\n    }\n\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 d\n    ) internal pure returns (uint256) {\n        (uint256 l, uint256 h) = fullMul(x, y);\n\n        uint256 mm = mulmod(x, y, d);\n        if (mm > l) h -= 1;\n        l -= mm;\n\n        if (h == 0) return l / d;\n\n        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\n        return fullDiv(l, h, d);\n    }\n}"},"contracts/libraries/SafeERC20.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.7.5;\n\nimport {IERC20} from \"../interfaces/IERC20.sol\";\n\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\n/// Taken from Solmate\nlibrary SafeERC20 {\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"APPROVE_FAILED\");\n    }\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        (bool success, ) = to.call{value: amount}(new bytes(0));\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n}"},"contracts/libraries/SafeMath.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.7.5;\n\n\n// TODO(zx): Replace all instances of SafeMath with OZ implementation\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    // Only used in the  BondingCalculator.sol\n    function sqrrt(uint256 a) internal pure returns (uint c) {\n        if (a > 3) {\n            c = a;\n            uint b = add( div( a, 2), 1 );\n            while (b < c) {\n                c = b;\n                b = div( add( div( a, b ), b), 2 );\n            }\n        } else if (a != 0) {\n            c = 1;\n        }\n    }\n\n}"}}}