{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/v4.sol":{"content":"pragma solidity >=0.6.6;\r\n\r\n\r\n\r\ncontract AAMY4 {\r\n    address internal constant addr_uniswap_main = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    IUniswapV2Router02 internal uniswapRouter;\r\n    IAAMY3 internal aamy;\r\n    \r\n    constructor ()\r\n        public\r\n        payable\r\n    {\r\n        uniswapRouter = IUniswapV2Router02(addr_uniswap_main);\r\n        aamy = IAAMY3(0x4a68539B894E8e1Fc88e3C0B0CfB8252d2106316);\r\n    }\r\n\r\n\r\n    function check_auth(bool only_admin) view public returns (bool) {\r\n        bool is_authorized = msg.sender == aamy.sender(0);\r\n        if (only_admin) {\r\n            return is_authorized;\r\n        }\r\n        is_authorized = is_authorized || aamy.authorized(msg.sender);\r\n        return is_authorized;\r\n    }\r\n\r\n    function close(string memory confirm) public {\r\n        \r\n        require(check_auth(true), \"Unauthorized\");\r\n        if (keccak256(bytes(confirm)) != keccak256(\"do_close\")){\r\n            revert(\"Please confirm!\");\r\n        }\r\n        \r\n        // send ethereum back\r\n        selfdestruct(payable(aamy.sender(0)));\r\n    }\r\n    \r\n    function transfer_out(uint256 amount) public\r\n    {\r\n       require(check_auth(true), \"Unauthorized\");\r\n       payable(aamy.sender(0)).transfer(amount);\r\n    }\r\n\r\n    function balance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function _dbg_swap() public\r\n    {\r\n        address contract_dai = 0xc7AD46e0b8a400Bb3C915120d284AafbA8fc4735;\r\n        l2_swap_raw_limit(50, 100, contract_dai, aamy.sender(0), 100);\r\n    }\r\n\r\n    mapping(address => uint256) public swap_raw_limit_ex_spent;\r\n    function l2_get_balance(address swap_token_contract, uint256 max_eth_to_spend) public view returns (uint256)\r\n    {\r\n        // ensure we can spend something\r\n        require(max_eth_to_spend > swap_raw_limit_ex_spent[swap_token_contract], \"Spent over the limit (0x)\");\r\n        \r\n        uint256 bal = address(this).balance;\r\n        uint256 bal_limited = max_eth_to_spend - swap_raw_limit_ex_spent[swap_token_contract];\r\n        if (bal_limited < bal) {\r\n           bal = bal_limited;\r\n        }\r\n        return bal;\r\n    }\r\n    \r\n    \r\n    function l2_swap_raw_limit(int percent_of_balance, uint256 millicoins_per_eth, address swap_token_contract,\r\n    address wallet_out, uint256 max_eth_to_spend) public\r\n    {\r\n        require(check_auth(false), \"Unauthorized\");\r\n        \r\n        // get number of eth we can spend, max spending logic\r\n        uint256 bal = l2_get_balance(swap_token_contract, max_eth_to_spend);\r\n        require(bal >= 200 finney, \"Not enouth balance left (0x1 - 0.2 eth)\");\r\n\r\n        // get address path\r\n        (bool success, bytes memory result_weth_addr) = addr_uniswap_main.delegatecall(abi.encodeWithSignature(\"WETH()\"));\r\n        if (!success) {\r\n            revert(\"Can't get WETH address\");\r\n        }\r\n        address[] memory conversion_path = new address[](2);\r\n        conversion_path[0] = abi.decode(result_weth_addr, (address));\r\n        conversion_path[1] = swap_token_contract;\r\n        \r\n        // execute the trade\r\n        bal = (bal*uint256(percent_of_balance)) / 100;\r\n        IERC20 _info_c = IERC20(swap_token_contract);\r\n        int16 out_decimals = _info_c.decimals();\r\n        int16 decimals_diff = 18-out_decimals;\r\n        \r\n        uint256 min_to_get = bal * millicoins_per_eth;\r\n        if (decimals_diff > 0) {\r\n            min_to_get = min_to_get / (10**uint256(decimals_diff));\r\n        }\r\n        if (decimals_diff < 0) {\r\n            min_to_get = min_to_get * (10**uint256(-decimals_diff));\r\n        }\r\n        \r\n        min_to_get = min_to_get / 1000; // <- convert from millicoins to coins\r\n        uniswapRouter.swapExactETHForTokens{value: bal}\r\n            ( min_to_get, conversion_path, wallet_out, now + 600);\r\n        \r\n        // update the amount we spent\r\n        swap_raw_limit_ex_spent[swap_token_contract] = swap_raw_limit_ex_spent[swap_token_contract] + bal;\r\n    }\r\n    \r\n    receive() external payable { }\r\n    fallback() external payable { }\r\n}\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ninterface IAAMY3 {\r\n  function authorized ( address ) external view returns ( bool );\r\n  function sender ( uint256 ) external view returns ( address );\r\n}\r\n\r\n"}}}