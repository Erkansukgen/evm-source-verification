{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"sec/securityPoolV02.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface IMdx is IERC20 {\r\n    function mint(address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface ICzzSwap is IERC20 {\r\n    function mint(address _to, uint256 _amount) external;\r\n    function burn(address _account, uint256 _amount) external;\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract securityPool is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    mapping (address => uint8) private managers;\r\n    mapping (address => uint8) private routerAddrs;\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount;     // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt.\r\n        uint256 pendingAmount; // \r\n        uint256 lossAmount;\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken;           // Address of LP token contract.\r\n        uint256 allocPoint;       // How many allocation points assigned to this pool. MDXs to distribute per block.\r\n        uint256 allocPointDecimals;\r\n        uint256 accMdxPerShare; // Accumulated MDXs per share, times 1e12.\r\n        uint256 totalAmount;    // Total amount of current pool deposit.\r\n        uint256 totalPendingReward ;\r\n        uint256 totalReward;\r\n        uint256 usingAmount;\r\n        uint256 lossAmount;\r\n    }\r\n\r\n    // The MDX Token!\r\n    IMdx public mdx;\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    // Corresponding to the pid of the multLP pool\r\n    mapping(uint256 => uint256) public poolCorrespond;\r\n    // pid corresponding address\r\n    mapping(address => uint256) public LpOfPid;\r\n    // Control mining\r\n    bool public paused = false;\r\n    \r\n    uint256 public allocPointDecimals;\r\n    \r\n    uint256 public allocPoint;\r\n\r\n    uint256 depositMinValue;\r\n    \r\n    /////test\r\n    uint256 internal test  = 0;\r\n\r\n    address internal WETH;\r\n    \r\n \r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n    modifier isManager {\r\n        require(\r\n            msg.sender == owner() || managers[msg.sender] == 1);\r\n        _;\r\n    }\r\n    constructor (\r\n        IMdx _mdx\r\n    ) public {\r\n        mdx = _mdx;\r\n        depositMinValue = 10 ** 13;\r\n    }\r\n\r\n    receive() external payable {\r\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\r\n    }\r\n    \r\n    event MintToken(\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 mid,\r\n        uint256 amountIn\r\n    );\r\n    \r\n    function addManager(address manager) public onlyOwner{\r\n        managers[manager] = 1;\r\n    }\r\n    \r\n    function removeManager(address manager) public onlyOwner{\r\n        managers[manager] = 0;\r\n    }\r\n\r\n    function addRouterAddr(address routerAddr) public isManager{\r\n        routerAddrs[routerAddr] = 1;\r\n    }\r\n    \r\n    function removeRouterAddr(address routerAddr) public isManager{\r\n        routerAddrs[routerAddr] = 0;\r\n    }\r\n\r\n    function poolLength() public view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n    \r\n    function approve(address token, address spender, uint256 _amount) internal virtual returns (bool) {\r\n        require(address(token) != address(0), \"approve token is the zero address\");\r\n        require(address(spender) != address(0), \"approve spender is the zero address\");\r\n        require(_amount != 0, \"approve _amount is the zero \");\r\n        require(routerAddrs[spender] == 1, \"spender is not router address \");        \r\n        IERC20(token).approve(spender,_amount);\r\n        return true;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(uint256 _allocPoint, uint256 _allocPointDecimals, IERC20 _lpToken) public onlyOwner {\r\n        require(address(_lpToken) != address(0), \"_lpToken is the zero address\");\r\n        poolInfo.push(PoolInfo({\r\n        lpToken : _lpToken,\r\n        allocPoint : _allocPoint,\r\n        allocPointDecimals : _allocPointDecimals,\r\n        accMdxPerShare : 0,\r\n        totalAmount : 0,\r\n        totalPendingReward : 0,\r\n        totalReward : 0,\r\n        usingAmount : 0,\r\n        lossAmount : 0\r\n        }));\r\n        allocPoint = _allocPoint;\r\n        allocPointDecimals = _allocPointDecimals;\r\n        LpOfPid[address(_lpToken)] = poolLength() - 1;\r\n    }\r\n\r\n    // Update the given pool's MDX allocation point. Can only be called by the owner.\r\n    function set(uint256 _pid, uint256 _allocPoint, uint256 _allocPointDecimals) public onlyOwner {\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n        poolInfo[_pid].allocPointDecimals = _allocPointDecimals;\r\n        allocPoint = _allocPoint;\r\n        allocPointDecimals = _allocPointDecimals;\r\n    }\r\n\r\n    // The current pool corresponds to the pid of the multLP pool\r\n    function setPoolCorr(uint256 _pid, uint256 _sid) public onlyOwner {\r\n        require(_pid <= poolLength() - 1, \"not find this pool\");\r\n        poolCorrespond[_pid] = _sid;\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint256 lpSupply;\r\n        lpSupply = pool.totalAmount;\r\n        if (lpSupply == 0) {\r\n            return;\r\n        }\r\n        uint256 mdxReward = pool.totalPendingReward;\r\n        if (mdxReward != 0) {\r\n            pool.accMdxPerShare = pool.accMdxPerShare.add(mdxReward.mul(1e12).div(lpSupply));\r\n        }\r\n        pool.totalReward = pool.totalReward.add(pool.totalPendingReward);\r\n        pool.totalPendingReward = 0;\r\n    }\r\n\r\n    // View function to see pending MDXs on frontend.\r\n    function pending(uint256 _pid, address _user) external view returns (uint256, uint256){\r\n        uint256 mdxAmount = pendingMdx(_pid, _user);\r\n        return (mdxAmount, 0);\r\n\r\n    }\r\n\r\n    function pendingMdx(uint256 _pid, address _user) private view returns (uint256){\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accMdxPerShare = pool.accMdxPerShare;\r\n        uint256 lpSupply= pool.totalAmount;\r\n        if (lpSupply == 0) {\r\n            return 0;\r\n        }\r\n        if (user.amount > 0) {\r\n            uint256 mdxReward = pool.totalPendingReward;\r\n            if (mdxReward != 0) {\r\n                accMdxPerShare = accMdxPerShare.add(mdxReward.mul(1e12).div(lpSupply));\r\n                uint256 pendingAmount = user.amount.mul(accMdxPerShare).div(1e12).sub(user.rewardDebt);\r\n                uint256 lossAmount = user.lossAmount.add(pool.lossAmount.mul(user.amount).div(pool.totalAmount));\r\n                if (pendingAmount > 0) {\r\n                    if(lossAmount < pendingAmount){\r\n                        return pendingAmount - lossAmount;\r\n                    }else{\r\n                        return 0;\r\n                    }\r\n                }\r\n                //return user.amount.mul(accMdxPerShare).div(1e12).sub(user.rewardDebt);\r\n            }\r\n            \r\n        }\r\n                \r\n        return 0;\r\n    }\r\n\r\n    // Deposit LP tokens to HecoPool for MDX allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public notPause {\r\n        require(_pid <= poolLength() - 1, \"not find this pool\");\r\n        depositMdx(_pid, _amount, msg.sender);\r\n\r\n    }\r\n\r\n    function depositMdx(uint256 _pid, uint256 _amount, address _user) private {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        updatePool(_pid);\r\n        if (user.amount > 0) {\r\n            uint256 pendingAmount = user.amount.mul(pool.accMdxPerShare).div(1e12).sub(user.rewardDebt);\r\n            if (pendingAmount > 0) {\r\n                safeMdxTransfer(_pid, _user, pendingAmount);\r\n            }\r\n        }\r\n        if (_amount > 0) {\r\n            pool.lpToken.safeTransferFrom(_user, address(this), _amount);\r\n            user.amount = user.amount.add(_amount);\r\n            pool.totalAmount = pool.totalAmount.add(_amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accMdxPerShare).div(1e12);\r\n        emit Deposit(_user, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from HecoPool.\r\n    function withdraw(uint256 _pid, uint256 _amount) public notPause {\r\n        withdrawMdx(_pid, _amount, msg.sender);\r\n    }\r\n\r\n    function withdrawMdx(uint256 _pid, uint256 _amount, address _user) private {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        require(user.amount >= _amount, \"withdrawMdx: not good\");\r\n        updatePool(_pid);\r\n        uint256 pendingAmount = user.amount.mul(pool.accMdxPerShare).div(1e12).sub(user.rewardDebt);\r\n        user.lossAmount = user.lossAmount.add(pool.lossAmount.mul(_amount).div(pool.totalAmount));\r\n        if (pendingAmount > 0) {\r\n            if(user.lossAmount < pendingAmount){\r\n                safeMdxTransfer(_pid, _user, pendingAmount.sub(user.lossAmount));\r\n                pool.lossAmount = pool.lossAmount.sub(user.lossAmount);\r\n                user.lossAmount = 0;\r\n            }else{\r\n                pool.lossAmount = pool.lossAmount.sub(pendingAmount);\r\n                user.lossAmount = user.lossAmount.sub(pendingAmount);\r\n            }\r\n            \r\n        }\r\n        if (_amount > 0) {\r\n            if(user.lossAmount>0){\r\n                uint256 _amount_ = _amount.sub(user.lossAmount);\r\n                user.amount = user.amount.sub(_amount);\r\n                pool.totalAmount = pool.totalAmount.sub(_amount);\r\n                pool.lpToken.safeTransfer(_user, _amount_);\r\n                pool.lossAmount = pool.lossAmount.sub(user.lossAmount);\r\n                user.lossAmount = 0;\r\n            }else{\r\n                user.amount = user.amount.sub(_amount);\r\n                pool.totalAmount = pool.totalAmount.sub(_amount);\r\n                pool.lpToken.safeTransfer(_user, _amount);\r\n            }\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accMdxPerShare).div(1e12);\r\n        emit Withdraw(_user, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public notPause {\r\n        emergencyWithdrawMdx(_pid, msg.sender);\r\n    }\r\n\r\n    function emergencyWithdrawMdx(uint256 _pid, address _user) private {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 amount = user.amount;\r\n        user.lossAmount = user.lossAmount.add(pool.lossAmount.mul(amount).div(pool.totalAmount));\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        if(user.lossAmount > 0){\r\n            pool.lpToken.safeTransfer(_user, amount.sub(user.lossAmount));\r\n        }else{\r\n            pool.lpToken.safeTransfer(_user, amount);\r\n        }\r\n        pool.totalAmount = pool.totalAmount.sub(amount);\r\n        pool.lossAmount = pool.lossAmount.sub(user.lossAmount);\r\n        user.lossAmount = 0;\r\n\r\n        emit EmergencyWithdraw(_user, _pid, amount);\r\n    }\r\n\r\n    // Safe MDX transfer function, just in case if rounding error causes pool to not have enough MDXs.\r\n    function safeMdxTransfer(uint256 _pid, address _to, uint256 _amount) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint256 mdxBal = pool.totalReward;\r\n        if (_amount > mdxBal) {\r\n            mdx.transfer(_to, mdxBal);\r\n            pool.totalReward = pool.totalReward.sub(mdxBal);\r\n        } else {\r\n            mdx.transfer(_to, _amount);\r\n            pool.totalReward = pool.totalReward.sub(_amount);\r\n        }\r\n    }\r\n\r\n    function getMdxBalance() public view returns ( uint256 ) {\r\n        return mdx.balanceOf(address(this));\r\n\r\n    }\r\n\r\n    function getPidForAddr( address addr) public view returns ( uint256 ) {\r\n        return LpOfPid[addr];\r\n\r\n    }\r\n\r\n    modifier notPause() {\r\n        require(paused == false, \"Mining has been suspended\");\r\n        _;\r\n    }\r\n\r\n    function addReward(uint256 _pid, uint256 _Reward) internal isManager{\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        pool.totalPendingReward = pool.totalPendingReward.add(_Reward);\r\n\r\n    }\r\n\r\n\r\n    function securityPoolSwap(\r\n        uint256 _pid,\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] memory path,\r\n        uint256 gas,\r\n        address to,\r\n        address routerAddr,\r\n        uint deadline\r\n        ) public isManager returns (uint[] memory amounts) {\r\n      \r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        //Calculation of reward !!!\r\n        uint _amountIn = 0;\r\n        uint256  _reward = amountIn.mul(allocPoint).div(allocPointDecimals);\r\n        require(_reward > 0, \"amountIn: volumes are too small\");\r\n        _amountIn = amountIn.sub(_reward + gas);\r\n        //Calculation of reward!!\r\n        addReward(_pid,_reward);\r\n        uint256 _amount = IERC20(path[0]).allowance(address(this),routerAddr);\r\n        if(_amount < amountIn) {\r\n            approve(path[0], routerAddr,uint256(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff));\r\n        }\r\n        amounts = IUniswapV2Router02(routerAddr).swapExactTokensForTokens(_amountIn, amountOutMin,path,to,deadline);\r\n        emit MintToken(to, _amountIn-gas, 0,_amountIn);\r\n        pool.usingAmount = pool.usingAmount.add(_amountIn);\r\n        return amounts;\r\n    }\r\n\r\n    function securityPoolSwapEth(\r\n        uint256 _pid,\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] memory path,\r\n        uint256 gas,\r\n        address to, \r\n        address routerAddr,\r\n        uint deadline\r\n        ) public isManager returns (uint[] memory amounts) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        \r\n        //Calculation of reward !!!\r\n        uint _amountIn = 0;\r\n        uint256 _reward= amountIn.mul(allocPoint).div(allocPointDecimals) ;\r\n        require(_reward > 0, \"amountIn: volumes are too small\");\r\n         _amountIn = amountIn.sub(_reward+gas);\r\n        //Calculation of reward!!\r\n        addReward(_pid,_reward);\r\n\r\n        uint256 _amount = IERC20(path[0]).allowance(address(this),routerAddr);\r\n        if(_amount < amountIn) {\r\n            approve(path[0], routerAddr,uint256(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff));\r\n        }\r\n        amounts = IUniswapV2Router02(routerAddr).swapExactTokensForETH(_amountIn, amountOutMin,path,to,deadline);\r\n        emit MintToken(to, _amountIn-gas, 0,_amountIn);\r\n        pool.usingAmount = pool.usingAmount.add(_amountIn);\r\n        return amounts;\r\n    }\r\n\r\n    function securityPoolSwapGetAmount(uint256 amountOut, address[] memory path, address routerAddr) public view returns (uint[] memory amounts){\r\n        require(address(0) != routerAddr); \r\n        ////Calculation of reward!!\r\n        uint256  _reward = amountOut.mul(allocPoint).div(allocPointDecimals);\r\n        return IUniswapV2Router02(routerAddr).getAmountsOut(amountOut.sub(_reward),path);\r\n    }\r\n\r\n    \r\n\r\n    function securityPoolMint(uint256 _pid, uint256 _mintAmount, address _token) public isManager {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        ICzzSwap(_token).mint(address(this), _mintAmount); \r\n        pool.usingAmount = pool.usingAmount.sub(_mintAmount);\r\n    }\r\n\r\n    function securityPoolTransferGas(uint256 _pid, uint256 _amount, address _token, address _to) public isManager {\r\n        bool success = true;\r\n        require(address(mdx) == _token, \"token is pool token address\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n\r\n        (success) = ICzzSwap(_token).transfer(_to, _amount); \r\n\r\n        require(success, 'securityPoolTransfer: TRANSFER_FAILED');\r\n        pool.usingAmount = pool.usingAmount.add(_amount);\r\n    }\r\n    \r\n    function setPoolTonkenAddress(IMdx addr) public isManager {\r\n        mdx = addr;\r\n    }\r\n\r\n    function getPoolTonkenAddress() public view isManager returns(address ){\r\n        return address(mdx);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        {\r\n            require(b <= a, \"sub overflow\");\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        {\r\n            require(b > 0, \"div cannot be zero\");\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        {\r\n            require(b > 0, \"The divisor cannot be zero\");\r\n            return a % b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n"}}}