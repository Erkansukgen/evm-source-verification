{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/DSA/static/maker.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface TokenInterface {\n    function approve(address, uint) external;\n    function transfer(address, uint) external;\n    function transferFrom(address, address, uint) external;\n    function deposit() external payable;\n    function withdraw(uint) external;\n    function balanceOf(address) external view returns (uint);\n}\n\ninterface ManagerLike {\n    function cdpCan(address, uint, address) external view returns (uint);\n    function ilks(uint) external view returns (bytes32);\n    function owns(uint) external view returns (address);\n    function give(uint, address) external;\n    function urns(uint) external view returns (address);\n    function vat() external view returns (address);\n    function frob(uint, int, int) external;\n    function flux(uint, address, uint) external;\n}\n\ninterface VatLike {\n    function can(address, address) external view returns (uint);\n    function dai(address) external view returns (uint);\n    function hope(address) external;\n    function urns(bytes32, address) external view returns (uint, uint);\n}\n\ninterface TokenJoinInterface {\n    function dec() external returns (uint);\n    function gem() external returns (TokenInterface);\n    function join(address, uint) external payable;\n    function exit(address, uint) external;\n}\n\ninterface DaiJoinInterface {\n    function vat() external returns (VatLike);\n    function exit(address, uint) external;\n}\n\ninterface PotLike {\n    function pie(address) external view returns (uint);\n    function drip() external returns (uint);\n    function exit(uint) external;\n}\n\ninterface AccountInterface {\n    function isAuth(address _user) external view returns (bool);\n}\n\ninterface InstaMapping {\n    function gemJoinMapping(bytes32) external view returns (address);\n}\n\ninterface EventInterface {\n    function emitEvent(uint _connectorType, uint _connectorID, bytes32 _eventCode, bytes calldata _eventData) external;\n}\n\ncontract DSMath {\n\n    uint256 constant RAY = 10 ** 27;\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\n    }\n\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n        amt = mul(_amt, 10 ** (18 - _dec));\n    }\n\n    function toInt(uint x) internal pure returns (int y) {\n        y = int(x);\n        require(y >= 0, \"int-overflow\");\n    }\n\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n        amt = (_amt / 10 ** (18 - _dec));\n    }\n}\n\n\ncontract Helpers is DSMath {\n    /**\n     * @dev Return ETH Address.\n     */\n    function getAddressETH() internal pure returns (address) {\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    }\n\n    /**\n     * @dev Return WETH Address.\n     */\n    function getAddressWETH() internal pure returns (address) {\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    }\n\n    /**\n     * @dev Return InstaEvent Address.\n     */\n    function getEventAddr() internal pure returns (address) {\n        return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97;\n    }\n\n    /**\n     * @dev Connector Details\n    */\n    function connectorID() public pure returns(uint _type, uint _id) {\n        (_type, _id) = (2, 2);\n    }\n\n    /**\n     * @dev Return InstaMapping Address.\n     */\n    function getMappingAddr() internal pure returns (address) {\n        return 0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88;\n    }\n}\n\n\ncontract MakerMCDAddresses is Helpers {\n    /**\n     * @dev Return Maker MCD Manager Address.\n    */\n    function getMcdManager() internal pure returns (address) {\n        return 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\n    }\n\n    /**\n     * @dev Return Maker MCD DAI_Join Address.\n    */\n    function getMcdDaiJoin() internal pure returns (address) {\n        return 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\n    }\n\n    /**\n     * @dev Return Maker MCD Pot Address.\n    */\n    function getMcdPot() internal pure returns (address) {\n        return 0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7;\n    }\n}\n\n\ncontract MakerHelpers is MakerMCDAddresses {\n    /**\n     * @dev Get Vault's ilk.\n    */\n    function getVaultData(ManagerLike managerContract, uint vault) internal view returns (bytes32 ilk, address urn) {\n        ilk = managerContract.ilks(vault);\n        urn = managerContract.urns(vault);\n    }\n\n    /**\n     * @dev Gem Join address is ETH type collateral.\n    */\n    function isEth(address tknAddr) internal pure returns (bool) {\n        return tknAddr == getAddressWETH() ? true : false;\n    }\n}\n\n\ncontract BasicResolver is MakerHelpers {\n    event LogWithdraw(uint256 indexed vault, bytes32 indexed ilk, uint256 tokenAmt);\n\n\n    /**\n     * @dev Withdraw ETH/ERC20_Token Collateral.\n     * @param vault Vault ID.\n     * @param amt token amount to withdraw.\n    */\n    function withraw(\n        uint vault,\n        uint amt\n    ) external payable {\n        ManagerLike managerContract = ManagerLike(getMcdManager());\n\n        (bytes32 ilk, address urn) = getVaultData(managerContract, vault);\n\n        address colAddr = InstaMapping(getMappingAddr()).gemJoinMapping(ilk);\n        TokenJoinInterface tokenJoinContract = TokenJoinInterface(colAddr);\n\n        uint _amt = amt;\n        uint _amt18;\n        if (_amt == uint(-1)) {\n            (_amt18,) = VatLike(managerContract.vat()).urns(ilk, urn);\n            _amt = convert18ToDec(tokenJoinContract.dec(), _amt18);\n        } else {\n            _amt18 = convertTo18(tokenJoinContract.dec(), _amt);\n        }\n\n        managerContract.frob(\n            vault,\n            -toInt(_amt18),\n            0\n        );\n\n        managerContract.flux(\n            vault,\n            address(this),\n            _amt18\n        );\n\n        TokenInterface tokenContract = tokenJoinContract.gem();\n\n        if (isEth(address(tokenContract))) {\n            tokenJoinContract.exit(address(this), _amt);\n            tokenContract.withdraw(_amt);\n        } else {\n            tokenJoinContract.exit(address(this), _amt);\n        }\n\n        emit LogWithdraw(vault, ilk, _amt);\n        bytes32 _eventCode = keccak256(\"LogWithdraw(uint256,bytes32,uint256)\");\n        bytes memory _eventParam = abi.encode(vault, ilk, _amt);\n        (uint _type, uint _id) = connectorID();\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\n    }\n\n}\n\n\ncontract DsrResolver is BasicResolver {\n    event LogWithdrawDai(uint256 tokenAmt);\n\n    /**\n     * @dev Withdraw DAI from DSR.\n     * @param amt DAI amount to withdraw.\n    */\n    function withdrawDai(uint amt) external payable {\n        address daiJoin = getMcdDaiJoin();\n\n        DaiJoinInterface daiJoinContract = DaiJoinInterface(daiJoin);\n        VatLike vat = daiJoinContract.vat();\n        PotLike potContract = PotLike(getMcdPot());\n\n        uint chi = potContract.drip();\n        uint pie;\n        uint _amt;\n        if (amt == uint(-1)) {\n            pie = potContract.pie(address(this));\n            _amt = mul(chi, pie) / RAY;\n        } else {\n            pie = mul(amt, RAY) / chi;\n        }\n\n        potContract.exit(pie);\n\n        uint bal = vat.dai(address(this));\n        if (vat.can(address(this), address(daiJoin)) == 0) {\n            vat.hope(daiJoin);\n        }\n        daiJoinContract.exit(\n            address(this),\n            bal >= mul(_amt, RAY) ? _amt : bal / RAY\n        );\n\n        emit LogWithdrawDai(_amt);\n        bytes32 _eventCode = keccak256(\"LogWithdrawDai(uint256)\");\n        bytes memory _eventParam = abi.encode(_amt);\n        (uint _type, uint _id) = connectorID();\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\n    }\n}\n\ncontract StaticConnectMaker is DsrResolver {\n    string public constant name = \"Static-MakerDao-v1\";\n}"
    }
  }
}