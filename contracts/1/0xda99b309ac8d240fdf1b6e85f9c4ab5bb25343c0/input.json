{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/DeathManSwitch.sol":{"content":"pragma solidity >=0.5.0;\nimport './SafeMath.sol';\n\ncontract DeathManSwitch {\n    \n    using SafeMath for uint;\n    \n    address payable public owner;\n    uint256 public checkTime;\n    uint256 public finalTime;\n    \n    constructor() public payable {\n        owner = msg.sender;\n        checkTime = now;\n        uint256 targetTime = uint256(7).mul(uint256(86400));\n        finalTime = now.add(targetTime);\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier allowSteal() {\n        uint256 offsetTime = uint256(3).mul(uint256(86400));\n        uint256 minimumStealTime = checkTime.add(offsetTime);\n        require(now > minimumStealTime);\n        _;\n    }\n    \n    modifier allowRecoverFounds() {\n        require(now >= finalTime);\n        _;\n    }\n    \n    function ping() public onlyOwner {\n        checkTime = now;\n    }\n    \n    function recoverFunds() public payable onlyOwner allowRecoverFounds {\n        owner.transfer(address(this).balance);\n    }\n    \n    function stealFunds() public payable allowSteal {\n        msg.sender.transfer(address(this).balance);\n    }\n}"},"browser/SafeMath.sol":{"content":"pragma solidity  >= 0.4.0 <0.7.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}"}}}