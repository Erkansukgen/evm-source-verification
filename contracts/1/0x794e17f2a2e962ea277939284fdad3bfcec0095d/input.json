{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/HxyFreeze.sol": {
      "content": "\npragma solidity 0.6.4;\n\nimport \"./SafeMath.sol\";\nimport \"./IERC20.sol\";\n\n////////////////////////////////////////////////\n////////////////////EVENTS/////////////////////\n//////////////////////////////////////////////\n\ncontract TokenEvents {\n\n    //when a user freezes tokens\n    event TokenFreeze(\n        address indexed user,\n        uint value,\n        uint length\n    );\n\n    //when a user unfreezes tokens\n    event TokenUnfreeze(\n        address indexed user,\n        uint value,\n        uint length\n    );\n\n}\n\n//////////////////////////////////////\n//////////HXYFREEZE CONTRACT////////\n////////////////////////////////////\ncontract HxyFreeze is TokenEvents {\n\n    using SafeMath for uint256;\n\n    address public hxyAddress = 0xf3A2ace8e48751c965eA0A1D064303AcA53842b9;\n    IERC20 hxyInterface = IERC20(hxyAddress);\n    //freeze setup\n    uint internal daySeconds = 86400; // seconds in a day\n    uint public totalFrozen;\n    uint public total90Frozen;\n    uint public total180Frozen;\n    uint public total270Frozen;\n    uint public total365Frozen;\n    \n    mapping (address => uint) public token90FrozenBalances;//balance of HXY frozen mapped by user\n    mapping (address => uint) public token180FrozenBalances;//balance of HXY frozen mapped by user\n    mapping (address => uint) public token270FrozenBalances;//balance of HXY frozen mapped by user\n    mapping (address => uint) public token365FrozenBalances;//balance of HXY frozen mapped by user\n    \n    bool private sync;\n\n    mapping (address => Frozen) public frozen;\n\n    struct Frozen{\n        uint256 freeze90StartTimestamp;\n        uint256 freeze180StartTimestamp;\n        uint256 freeze270StartTimestamp;\n        uint256 freeze365StartTimestamp;\n    }\n    \n    //protects against potential reentrancy\n    modifier synchronized {\n        require(!sync, \"Sync lock\");\n        sync = true;\n        _;\n        sync = false;\n    }\n\n    constructor() public {\n\n    }\n\n    ////////////////////////////////////////////////////////\n    /////////////////PUBLIC FACING - HXY FREEZE CONTROL//////////\n    //////////////////////////////////////////////////////\n\n    //freeze HXY tokens to contract\n    function FreezeTokens(uint amt, uint dayLength)\n        public\n    {\n        require(amt > 0, \"zero input\");\n        require(hxyInterface.balanceOf(msg.sender) >= amt, \"Error: insufficient balance\");//ensure user has enough funds\n        if(isFreezeFinished(msg.sender, dayLength)){\n            UnfreezeTokens(dayLength);//unfreezes all currently frozen tokens + profit\n        }\n        //update balances\n        if(dayLength == 90){\n            token90FrozenBalances[msg.sender] = token90FrozenBalances[msg.sender].add(amt);\n            total90Frozen = total90Frozen.add(amt);\n            totalFrozen = totalFrozen.add(amt);\n            frozen[msg.sender].freeze90StartTimestamp = now;\n            hxyInterface.transferFrom(msg.sender, address(this), amt);//make transfer\n        }\n        else if(dayLength == 180){\n            token180FrozenBalances[msg.sender] = token180FrozenBalances[msg.sender].add(amt);\n            total180Frozen = total180Frozen.add(amt);\n            totalFrozen = totalFrozen.add(amt);\n            frozen[msg.sender].freeze180StartTimestamp = now;\n            hxyInterface.transferFrom(msg.sender, address(this), amt);//make transfer\n        }\n        else if(dayLength == 270){\n            token270FrozenBalances[msg.sender] = token270FrozenBalances[msg.sender].add(amt);\n            total270Frozen = total270Frozen.add(amt);\n            totalFrozen = totalFrozen.add(amt);\n            frozen[msg.sender].freeze270StartTimestamp = now;\n            hxyInterface.transferFrom(msg.sender, address(this), amt);//make transfer\n        }\n        else if(dayLength == 365){\n            token365FrozenBalances[msg.sender] = token365FrozenBalances[msg.sender].add(amt);\n            total365Frozen = total365Frozen.add(amt);\n            totalFrozen = totalFrozen.add(amt);\n            frozen[msg.sender].freeze365StartTimestamp = now;\n            hxyInterface.transferFrom(msg.sender, address(this), amt);//make transfer\n        }\n        else{\n            revert();\n        }\n        emit TokenFreeze(msg.sender, amt, dayLength);\n    }\n    \n    //unfreeze HXY tokens from contract\n    function UnfreezeTokens(uint dayLength)\n        public\n        synchronized\n    {\n        uint amt = 0;\n        if(dayLength == 90){\n            require(token90FrozenBalances[msg.sender] > 0,\"Error: unsufficient frozen balance\");//ensure user has enough frozen funds\n            require(isFreezeFinished(msg.sender, dayLength), \"tokens cannot be unfrozen yet, min 90 days\");\n            amt = token90FrozenBalances[msg.sender];\n            token90FrozenBalances[msg.sender] = 0;\n            frozen[msg.sender].freeze90StartTimestamp = 0;\n            total90Frozen = total90Frozen.sub(amt);\n            totalFrozen = totalFrozen.sub(amt);\n            hxyInterface.transfer(msg.sender, amt);//make transfer\n        }\n        else if(dayLength == 180){\n            require(token180FrozenBalances[msg.sender] > 0,\"Error: unsufficient frozen balance\");//ensure user has enough frozen funds\n            require(isFreezeFinished(msg.sender, dayLength), \"tokens cannot be unfrozen yet, min 180 days\");\n            amt = token180FrozenBalances[msg.sender];\n            token180FrozenBalances[msg.sender] = 0;\n            frozen[msg.sender].freeze180StartTimestamp = 0;\n            total180Frozen = total180Frozen.sub(amt);\n            totalFrozen = totalFrozen.sub(amt);\n            hxyInterface.transfer(msg.sender, amt);//make transfer\n        }\n        else if(dayLength == 270){\n            require(token270FrozenBalances[msg.sender] > 0,\"Error: unsufficient frozen balance\");//ensure user has enough frozen funds\n            require(isFreezeFinished(msg.sender, dayLength), \"tokens cannot be unfrozen yet, min 270 days\");\n            amt = token270FrozenBalances[msg.sender];\n            token270FrozenBalances[msg.sender] = 0;\n            frozen[msg.sender].freeze270StartTimestamp = 0;\n            total270Frozen = total270Frozen.sub(amt);\n            totalFrozen = totalFrozen.sub(amt);\n            hxyInterface.transfer(msg.sender, amt);//make transfer\n        }\n        else if(dayLength == 365){\n            require(token365FrozenBalances[msg.sender] > 0,\"Error: unsufficient frozen balance\");//ensure user has enough frozen funds\n            require(isFreezeFinished(msg.sender, dayLength), \"tokens cannot be unfrozen yet, min 365 days\");\n            amt = token365FrozenBalances[msg.sender];\n            token365FrozenBalances[msg.sender] = 0;\n            frozen[msg.sender].freeze365StartTimestamp = 0;\n            total365Frozen = total365Frozen.sub(amt);\n            totalFrozen = totalFrozen.sub(amt);\n            hxyInterface.transfer(msg.sender, amt);//make transfer\n        }\n        else{\n            revert();\n        }\n\n        emit TokenUnfreeze(msg.sender, amt, dayLength);\n    }\n    \n    ///////////////////////////////\n    ////////VIEW ONLY//////////////\n    ///////////////////////////////\n\n    function isFreezeFinished(address _user, uint freezeDayLength)\n        public\n        view\n        returns(bool)\n    {\n        if(freezeDayLength == 90){\n            if(frozen[_user].freeze90StartTimestamp == 0){\n                return false;\n            }\n            else{\n               return frozen[_user].freeze90StartTimestamp.add(freezeDayLength.mul(daySeconds)) <= now;               \n            }\n        }\n        else if(freezeDayLength == 180){\n            if(frozen[_user].freeze180StartTimestamp == 0){\n                return false;\n            }\n            else{\n               return frozen[_user].freeze180StartTimestamp.add(freezeDayLength.mul(daySeconds)) <= now;               \n            }\n        }\n        else if(freezeDayLength == 270){\n            if(frozen[_user].freeze270StartTimestamp == 0){\n                return false;\n            }\n            else{\n               return frozen[_user].freeze270StartTimestamp.add(freezeDayLength.mul(daySeconds)) <= now;               \n            }\n        }\n        else if(freezeDayLength == 365){\n            if(frozen[_user].freeze365StartTimestamp == 0){\n                return false;\n            }\n            else{\n               return frozen[_user].freeze365StartTimestamp.add(freezeDayLength.mul(daySeconds)) <= now;               \n            }\n        }\n        else{\n            return false;\n        }\n    }\n}\n"
    },
    "browser/IERC20.sol": {
      "content": "pragma solidity 0.6.4;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"
    },
    "browser/SafeMath.sol": {
      "content": "pragma solidity 0.6.4;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"
    }
  }
}