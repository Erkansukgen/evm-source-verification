{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"BankaiIseda.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\n// Welcome to Bankai Iseda ERC20 Token. This is the First Token designed for Bankai Iseda Universe. And will be constantly updated for further development.\r\n\r\n\r\n \r\n\r\ncontract ERC20Interface {\r\n\r\nfunction totalSupply() public view returns (uint);\r\n\r\nfunction balanceOf(address tokenOwner) public view returns (uint balance);\r\n\r\nfunction allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n\r\nfunction transfer(address to, uint tokens) public returns (bool success);\r\n\r\nfunction approve(address spender, uint tokens) public returns (bool success);\r\n\r\nfunction transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n\r\nevent Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\nevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n}\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// Safe Math Library\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract SafeMath {\r\n\r\nfunction safeAdd(uint a, uint b) public pure returns (uint c) {\r\n\r\nc = a + b;\r\n\r\nrequire(c >= a);\r\n\r\n}\r\n\r\nfunction safeSub(uint a, uint b) public pure returns (uint c) {\r\n\r\nrequire(b <= a); c = a - b; } function safeMul(uint a, uint b) public pure returns (uint c) { c = a * b; require(a == 0 || c / a == b); } function safeDiv(uint a, uint b) public pure returns (uint c) { require(b > 0);\r\n\r\nc = a / b;\r\n\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract BankaiIseda is ERC20Interface, SafeMath {\r\n\r\nstring public name;\r\n\r\nstring public symbol;\r\n\r\nuint8 public decimals; \r\n\r\n\r\n\r\nuint256 public _totalSupply;\r\n\r\n\r\n\r\nmapping(address => uint) balances;\r\n\r\nmapping(address => mapping(address => uint)) allowed;\r\n\r\n\r\n\r\n/**\r\n\r\n* Constrctor function\r\n\r\n*\r\n\r\n* Initializes contract with initial supply tokens to the creator of the contract\r\n\r\n*/\r\n\r\nconstructor() public {\r\n\r\nname = \"BankaiIseda\";\r\n\r\nsymbol = \"BI\";\r\n\r\ndecimals = 18;\r\n\r\n_totalSupply = 100000000000000000000000000000000000;\r\n\r\n\r\n\r\nbalances[msg.sender] = _totalSupply;\r\n\r\nemit Transfer(address(0), msg.sender, _totalSupply);\r\n\r\n}\r\n\r\n\r\n\r\nfunction totalSupply() public view returns (uint) {\r\n\r\nreturn _totalSupply - balances[address(0)];\r\n\r\n}\r\n\r\n\r\n\r\nfunction balanceOf(address tokenOwner) public view returns (uint balance) {\r\n\r\nreturn balances[tokenOwner];\r\n\r\n}\r\n\r\n\r\n\r\nfunction allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n\r\nreturn allowed[tokenOwner][spender];\r\n\r\n}\r\n\r\n\r\n\r\nfunction approve(address spender, uint tokens) public returns (bool success) {\r\n\r\nallowed[msg.sender][spender] = tokens;\r\n\r\nemit Approval(msg.sender, spender, tokens);\r\n\r\nreturn true;\r\n\r\n}\r\n\r\n\r\n\r\nfunction transfer(address to, uint tokens) public returns (bool success) {\r\n\r\nbalances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n\r\nbalances[to] = safeAdd(balances[to], tokens);\r\n\r\nemit Transfer(msg.sender, to, tokens);\r\n\r\nreturn true;\r\n\r\n}\r\n\r\n\r\n\r\nfunction transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n\r\nbalances[from] = safeSub(balances[from], tokens);\r\n\r\nallowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n\r\nbalances[to] = safeAdd(balances[to], tokens);\r\n\r\nemit Transfer(from, to, tokens);\r\n\r\nreturn true;\r\n\r\n}\r\n\r\n\r\n}"}}}