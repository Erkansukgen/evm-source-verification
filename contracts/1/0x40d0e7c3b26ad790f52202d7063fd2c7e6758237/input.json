{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/ACE_DeFi_Flat.sol": {
      "content": "\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/Ownable.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    bool private _notEntered;\n\n    constructor () internal {\n        // Storing an initial non-zero value makes deployment a bit more\n        // expensive, but in exchange the refund on every call to nonReentrant\n        // will be lower in amount. Since refunds are capped to a percetange of\n        // the total transaction's gas, it is best to keep them low in cases\n        // like this one, to increase the likelihood of the full refund coming\n        // into effect.\n        _notEntered = true;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _notEntered = false;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _notEntered = true;\n    }\n}\n\n// File: contracts/AcexDeFi.sol\n\npragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\n\n\n\ncontract TetherToken {\n    function transfer(address _to, uint _value) public {}\n    function transferFrom(address _from, address _to, uint _value) public {}\n}\n\nlibrary Lending {\n    \n    /*\n     * 4 stages:\n     * \n     * Funding Stage: Before \"startTime\"\n     * Lending Stage: Between \"startTime\" and \"startTime + duration\"\n     * Processing Stage: Between \"startTime + duration\" and \"startTime + duration + 3 days\"\n     * Redeem Stage: After \"startTime + duration + 3 days\"\n     *\n     * --- Funding --- | --- Lending --- | --- Processing --- | --- Redeem ---\n     *            startTime\n     *                 |     duration    |       3 days       |\n     *\n     */\n    \n    struct Round {\n        uint256 startTime;\n        uint256 duration;\n        uint256 apr; // in thousands (80 for 8%, 100 for 10%)\n        uint256 softCap; // 5,000 USDT\n        uint256 hardCap; // 1,000,000 USDT\n        uint256 personalCap; // 2,000 USDT\n        \n        uint256 totalLendingAmount;\n        bool withdrawn;\n        bool disabled;\n    }\n    \n    struct PersonalRound {\n        Round round;\n        \n        uint256 lendingAmount;\n        bool redeemed;\n    }\n}\n\ncontract AcexDeFi is\n    Ownable,\n    ReentrancyGuard\n{\n    using SafeMath for uint256;\n    \n    address private _usdtAddress = 0xdAC17F958D2ee523a2206206994597C13D831ec7; // Mainnet USDT\n    TetherToken private _usdtContract = TetherToken(_usdtAddress);\n    uint256 public _minAmount = 0;\n    uint256 public _processPeriod = 3 days;\n    \n    Lending.Round[] private _rounds;\n    mapping (uint256 => mapping (address => uint256)) private _lendingAmounts;\n    mapping (uint256 => mapping (address => bool)) private _redeemed;\n    \n    event Lend (\n        address indexed lender,\n        uint256 amount,\n        uint256 round\n    );\n    \n    event Redeem (\n        address indexed lender,\n        uint256 amount,\n        uint256 round\n    );\n    \n    function addRound (\n        uint256 startTime,\n        uint256 duration,\n        uint256 apr,\n        uint256 softCap,\n        uint256 hardCap,\n        uint256 personalCap\n    )\n        public\n        onlyOwner \n    {\n        _rounds.push(Lending.Round(\n            startTime,\n            duration,\n            apr,\n            softCap,\n            hardCap,\n            personalCap,\n            0,\n            false,\n            false\n        ));\n    }\n    \n    function ownerUpdateMinAmount(uint256 minAmount)\n        public\n        onlyOwner\n    {\n        _minAmount = minAmount;\n    }\n    \n    function ownerUpdateProcessPeriod(uint256 processPeriod)\n        public\n        onlyOwner\n    {\n        _processPeriod = processPeriod;\n    }\n    \n    function ownerWithdrawRound(uint256 index)\n        public\n        onlyOwner\n    {\n        Lending.Round storage round = _rounds[index];\n        \n        // Check round withdrawn\n        require(!round.withdrawn, \"ACEX DeFi: Round already withdrawn\");\n        \n        // Check current time (after startTime)\n        require(now > round.startTime, \"ACEX DeFi: Cannot redeem in funding phase.\");\n        \n        // Check soft cap\n        require(round.totalLendingAmount >= round.softCap, \"ACEX DeFi: Cannot redeem for failed round (lower than SoftCap).\");\n        \n        round.withdrawn = true;\n        _usdtContract.transfer(msg.sender, round.totalLendingAmount);\n    }\n    \n    function ownerDisableRound(uint256 index)\n        public\n        onlyOwner\n    {\n        _rounds[index].disabled = true;\n    }\n    \n    // Safety method in case user sends in ETH\n    function ownerWithdrawAllETH()\n        public\n        onlyOwner\n    {\n        msg.sender.transfer(address(this).balance);\n    }\n    \n    function getRounds()\n        public\n        view\n        returns (Lending.Round[] memory rounds)\n    {\n        return _rounds;\n    }\n    \n    function getPersonalRounds()\n        public\n        view\n        returns (Lending.PersonalRound[] memory rounds)\n    {\n        rounds = new Lending.PersonalRound[](_rounds.length);\n        \n        for(uint i = 0; i < _rounds.length; i++) {\n            rounds[i].round = _rounds[i];\n            rounds[i].lendingAmount = _lendingAmounts[i][msg.sender];\n            rounds[i].redeemed = _redeemed[i][msg.sender];\n        }\n        \n        return rounds;\n    }\n    \n    function lend (\n        uint256 index,\n        uint256 amount\n    )\n        public\n        nonReentrant\n    {\n        Lending.Round storage round = _rounds[index];\n        \n        // Check if round is disabled\n        require(!round.disabled, \"ACEX DeFi: Round is disabled.\");\n        \n        // Check current time (funding phase)\n        require(now < round.startTime, \"ACEX DeFi: Funding phase has passed.\");\n        \n        // Check minimum amount\n        require(amount > _minAmount, \"ACEX DeFi: Amount too low\");\n        \n        // Check personal cap\n        uint256 personalLendingAmount = _lendingAmounts[index][msg.sender].add(amount);\n        require(personalLendingAmount <= round.personalCap, \"ACEX DeFi: Exceeds personal cap.\");\n        \n        // Check hard cap\n        uint256 totalLendingAmount = round.totalLendingAmount.add(amount);\n        require(totalLendingAmount <= round.hardCap, \"ACEX DeFi: Exceeds round hard cap.\");\n        \n        _usdtContract.transferFrom(msg.sender, address(this), amount);\n        _lendingAmounts[index][msg.sender] = personalLendingAmount;\n        round.totalLendingAmount = totalLendingAmount;\n        \n        emit Lend(msg.sender, amount, index);\n    }\n    \n    function redeem (\n        uint256 index\n    )\n        public\n        nonReentrant\n    {\n        Lending.Round storage round = _rounds[index];\n        \n        // Check if round is disabled\n        require(!round.disabled, \"ACEX DeFi: Round is disabled.\");\n        \n        // Check current time (after startTime)\n        require(now > round.startTime, \"ACEX DeFi: Cannot redeem in funding phase.\");\n        \n        // Check if user has redeemed\n        require(!_redeemed[index][msg.sender], \"ACEX DeFi: Already redeemed.\");\n        \n        if (round.totalLendingAmount < round.softCap) {\n            // Did not reach softCap, users can redeem after \"startTime\"\n            \n            // Pay back to user\n            uint256 originalAmount = _lendingAmounts[index][msg.sender];\n            \n            _usdtContract.transfer(msg.sender, originalAmount);\n            _redeemed[index][msg.sender] = true;\n            emit Redeem(msg.sender, originalAmount, index);\n        } else {\n            // Reached softCap, users can redeem \"amount + interest\" after \"startTime + duration + 3 days\"\n            \n            // Check current time (redeem phase)\n            require(now > round.startTime.add(round.duration).add(_processPeriod), \"ACEX DeFi: Not redeem phase yet.\");\n            \n            uint256 originalAmount = _lendingAmounts[index][msg.sender];\n            \n            // Interest = original * (apr * duration / 1 year in seconds)\n            uint256 interestAmount = originalAmount.mul(round.apr).mul(round.duration).div(1000).div(365 days);\n            uint256 totalAmount = originalAmount + interestAmount;\n            \n            _usdtContract.transfer(msg.sender, totalAmount);\n            _redeemed[index][msg.sender] = true;\n            emit Redeem(msg.sender, totalAmount, index);\n        }\n    }\n}\n"
    }
  }
}