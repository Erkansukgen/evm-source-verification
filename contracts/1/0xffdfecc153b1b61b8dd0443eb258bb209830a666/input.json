{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"LiquidityLockup.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\ninterface IERC20Transfer {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract LiquidityLockup is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public unlockTime = 1614384000;  // Saturday, 27-Feb-21 00:00:00 UTC\r\n    \r\n    uint256 public partialAmount;\r\n    uint256 public partialUnlockTime;\r\n    address public partialAddress;\r\n    \r\n    \r\n    constructor () public { }\r\n    \r\n    \r\n    function withdraw(address _contract, address _recipient, uint256 _amount) external onlyOwner {\r\n        require(now > unlockTime);\r\n        require(_recipient != address(0x0));\r\n        IERC20Transfer(_contract).transfer(_recipient, _amount);\r\n    }\r\n    \r\n    \r\n    function withdrawPartial(address _contract) external onlyOwner {\r\n        require(now > partialUnlockTime);\r\n        require(partialAmount > 0);\r\n        \r\n        IERC20Transfer(_contract).transfer(partialAddress, partialAmount);\r\n        partialAmount = 0;\r\n    }\r\n    \r\n    \r\n    function requestPartialWithdraw(address _recipient, uint256 _amount) external onlyOwner {\r\n        require(_recipient != address(0x0));\r\n        partialAmount = _amount;\r\n        partialUnlockTime = unlockTime;\r\n        partialAddress = _recipient;\r\n    }\r\n    \r\n    \r\n    function extendLockTime(uint256 _time) external onlyOwner {\r\n        unlockTime = unlockTime.add(_time);\r\n    }\r\n}"}}}