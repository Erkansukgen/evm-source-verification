{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/RAST.sol": {
      "content": "pragma solidity ^0.7.0;\n\ncontract RAST {\n    string public name;\n    string public symbol;\n    uint8 public  decimals;\n    uint public totalSupply;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\n    constructor() public {\n        totalSupply = 500000000000000000000000000; // 5äº¿\n        name = \"Roll A Snowball Token\";\n        symbol = \"RAST\";\n        decimals = 18;\n        balanceOf[msg.sender] = totalSupply;\n    }\n\n    function transfer(address _to, uint _value) public returns (bool) {\n        require(msg.sender != _to, \"Transfer money to yourself?\");\n        require(_to != address(0), \"Please make sure the address is correct!\");\n        require(_value <= balanceOf[msg.sender], \"Insufficient amount!\");\n        require(balanceOf[_to] + _value >= balanceOf[_to], \"The recipient amount has reached the upper limit!\");\n\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        \n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value)public returns (bool) {\n        require(_from != _to, \"_from and _to use the same address!\");\n        require(_to != address(0), \"Please make sure the address is correct!\");\n        require(_value <= balanceOf[_from], \"Insufficient amount!\");\n        require(_value <= allowed[_from][msg.sender], \"Insufficient amount!transferFrom\");\n        require(balanceOf[_to] + _value >= balanceOf[_to], \"The recipient amount has reached the upper limit!\");\n\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        allowed[_from][msg.sender] -= _value;\n        \n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    function approve(address _spender, uint256 _value)public  returns (bool) {\n        require(_spender != address(0), \"Please make sure the address is correct!\");\n        require(_spender != msg.sender, \"Only other users can be authorized!\");\n\n        allowed[msg.sender][_spender] = _value;\n        \n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender)public  view returns (uint256) {\n        require(_owner != _spender, \"Only other users can be authorized!\");\n        \n        return allowed[_owner][_spender];\n    }\n\n}\n\n"
    }
  }
}