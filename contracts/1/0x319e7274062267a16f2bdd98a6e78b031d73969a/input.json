{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Payment.sol": {
      "content": "// SPDX-License-Identifier: MIT License\r\n\r\npragma solidity 0.7.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract PaymentSplitter {\r\n    \r\n    function payEth (address payable _beneficiary, address payable _admin, uint256 _originalAmount) public payable {\r\n        _beneficiary.transfer(_originalAmount);\r\n        _admin.transfer(msg.value - _originalAmount);\r\n    }\r\n    \r\n    IERC20 public token;\r\n    \r\n    function payToken (address _beneficiary, address _admin, address _token, uint256 _originalAmount, uint256 _totalAmount) public payable {\r\n        \r\n        token = IERC20(_token);\r\n        \r\n        token.transferFrom(msg.sender, _beneficiary, _originalAmount);\r\n        uint fees = _totalAmount - _originalAmount;\r\n        token.transferFrom(msg.sender, _admin, fees);\r\n    }\r\n}"
    }
  }
}