{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/BatchCall.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport {ILendingPool} from './ILendingPool.sol';\n\nimport {IProtocolDataProvider} from './IProtocolDataProvider.sol';\n\nimport {IPriceOracle} from './IPriceOracle.sol';\n\nimport {SafeMath} from './SafeMath.sol';\n\nimport {Ownable} from './Ownable.sol';\n\n\n\ncontract BatchCall is Ownable{\n    \n    using SafeMath for uint256;\n\n    ILendingPool public lp;\n    \n    IProtocolDataProvider public pdp;\n    \n    IPriceOracle public po;\n    \n    uint256 public HEALTHY = 1000000000000000000;\n    \n    constructor\n    (\n        address lPoolAddress,\n        address pdpAddress,\n        address poAddress\n    ) {\n\n        lp = ILendingPool(lPoolAddress);\n        pdp = IProtocolDataProvider(pdpAddress);\n        po = IPriceOracle(poAddress);\n    }\n    \n    struct UserHealthy {\n        address userAddress;\n        uint256 healthFactor;\n    }\n    \n    struct UserBalance {\n        address userAddress;\n        uint256 currentATokenBalance;\n        uint256 debt;\n        bool usageAsCollateralEnabled;\n    }\n    \n    struct Liquidation{\n        uint256 debtAssertAmount;\n        uint256 collateralAssertAmount;\n        uint256 healthy;\n    }\n\n    \n  function healthy(address[] memory users) public view returns( UserHealthy[] memory) {\n       \n      UserHealthy[] memory u = new UserHealthy[](users.length);\n      for (uint i = 0; i < users.length; i++) {\n            uint256 healthFactor;\n            (,,,,,healthFactor) = lp.getUserAccountData(users[i]);\n            UserHealthy memory user = UserHealthy(users[i],healthFactor);\n            u[i] = user;\n      }\n      return u;\n  }\n  \n  function healthyAddressArray(address[] memory users) public view returns( address[] memory) {\n      address[] memory u = new address[](users.length);\n      for (uint i = 0; i < users.length; i++) {\n            uint256 healthFactor;\n            (,,,,,healthFactor) = lp.getUserAccountData(users[i]);\n            if(healthFactor<HEALTHY){\n                u[i] = users[i];\n            }\n      }\n      return u;\n  }\n  \n  function balanceOf(address users,address tokens) public view returns( UserBalance memory u) {\n        (\n            uint256 currentATokenBalance,\n            uint256 currentStableDebt,\n            uint256 currentVariableDebt,\n            ,\n            ,\n            ,\n            ,\n            ,\n            bool usageAsCollateralEnabled\n        ) = pdp.getUserReserveData(tokens,users);\n        u.userAddress = users;\n        u.currentATokenBalance = currentATokenBalance;\n        u.debt = currentStableDebt.add(currentVariableDebt);\n        u.usageAsCollateralEnabled = usageAsCollateralEnabled;\n  }\n  \n  function liquidation(address user,address dtokens,address ctokens,uint256 d_precision,uint256 c_precision) public view returns(Liquidation memory l){\n      (,,,,,uint256 healthFactor) = lp.getUserAccountData(user);\n      UserBalance memory d_ub = balanceOf(user,dtokens);\n      UserBalance memory c_ub = balanceOf(user,ctokens);\n      uint256 c_price = po.getAssetPrice(ctokens);\n      uint256 d_price = po.getAssetPrice(dtokens);\n      uint256 assert_totalPrice = c_ub.currentATokenBalance\n                                                            .mul(c_price)\n                                                            .div(c_precision);\n      uint256 debt_totalPrice = d_ub.debt\n                                        .mul(d_price)\n                                        .div(d_precision);\n      uint256 debtAssertAmount;\n      uint256 collateralAssertAmount;\n      uint256 liquidationBonus = getReserveConfigurationData(ctokens);\n      if(assert_totalPrice.mul(liquidationBonus).div(10000) > (debt_totalPrice/2)){\n          debtAssertAmount = d_ub.debt/2;\n          collateralAssertAmount = debt_totalPrice\n                                            .mul(c_precision);\n          collateralAssertAmount = collateralAssertAmount\n                                            .mul(liquidationBonus);\n          collateralAssertAmount = collateralAssertAmount\n                                            .div(10000);\n          collateralAssertAmount = collateralAssertAmount\n                                                .div(2);\n          collateralAssertAmount = collateralAssertAmount\n                                                .div(c_price);\n      }else{\n          debtAssertAmount = c_ub.currentATokenBalance\n                                        .mul(10000);\n          debtAssertAmount = debtAssertAmount\n                                        .mul(d_precision);\n          debtAssertAmount = debtAssertAmount\n                                        .mul(c_price);\n          debtAssertAmount = debtAssertAmount\n                                        .div(liquidationBonus);\n          debtAssertAmount = debtAssertAmount\n                                        .div(c_precision);\n          debtAssertAmount = debtAssertAmount\n                                        .div(d_price);\n          \n          collateralAssertAmount = c_ub.currentATokenBalance;\n      }\n      l.debtAssertAmount = debtAssertAmount;\n      l.collateralAssertAmount = collateralAssertAmount;\n      l.healthy = healthFactor;\n  }\n  \n  \n    function getReserveConfigurationData(address asset) public view returns(uint256 a){\n        \n        (\n          ,\n          ,\n          ,\n          uint256 liquidationBonus,\n          ,\n          ,\n          ,\n          ,\n          ,\n        ) = pdp.getReserveConfigurationData(asset);\n        return liquidationBonus;\n       \n    }\n    \n    function updateILendingPool(address add) external virtual  onlyOwner{\n        lp = ILendingPool(add);\n    }\n    \n    function updateIProtocolDataProvider(address add) external virtual  onlyOwner{\n        pdp = IProtocolDataProvider(add);\n    }\n    \n    function updateIPriceOracle(address add) external virtual  onlyOwner{\n        po = IPriceOracle(add);\n    }\n    \n    \n}\n"
    },
    "contracts/Context.sol": {
      "content": "pragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/ILendingPool.sol": {
      "content": "pragma solidity ^0.8.0;\n\npragma experimental ABIEncoderV2;\n\ninterface ILendingPool {\n    \n    function getUserAccountData(address user)\n    external\n    view\n    returns (\n        uint256 totalCollateralETH,\n        uint256 totalDebtETH,\n        uint256 availableBorrowsETH,\n        uint256 currentLiquidationThreshold,\n        uint256 ltv,\n        uint256 healthFactor\n    );\n    \n    \n}\n"
    },
    "contracts/IPriceOracle.sol": {
      "content": "pragma solidity ^0.8.0;\n\n/************\n@title IPriceOracle interface\n@notice Interface for the Aave price oracle.*/\ninterface IPriceOracle {\n  /***********\n    @dev returns the asset price in ETH\n     */\n  function getAssetPrice(address asset) external view returns (uint256);\n\n  /***********\n    @dev sets the asset price, in wei\n     */\n  function setAssetPrice(address asset, uint256 price) external;\n}"
    },
    "contracts/IProtocolDataProvider.sol": {
      "content": "pragma solidity ^0.8.0;\n\ninterface IProtocolDataProvider {\n    function getUserReserveData(address asset, address user)\n    external\n    view\n    returns (\n        uint256 currentATokenBalance,\n        uint256 currentStableDebt,\n        uint256 currentVariableDebt,\n        uint256 principalStableDebt,\n        uint256 scaledVariableDebt,\n        uint256 stableBorrowRate,\n        uint256 liquidityRate,\n        uint40 stableRateLastUpdated,\n        bool usageAsCollateralEnabled\n    );\n    \n    function getReserveConfigurationData(address asset)\n    external\n    view\n    returns ( \n      uint256 decimals,\n      uint256 ltv,\n      uint256 liquidationThreshold,\n      uint256 liquidationBonus,\n      uint256 reserveFactor,\n      bool usageAsCollateralEnabled,\n      bool borrowingEnabled,\n      bool stableBorrowRateEnabled,\n      bool isActive,\n      bool isFrozen\n    );\n}\n"
    },
    "contracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport {Context} from \"./Context.sol\";\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    }
  }
}