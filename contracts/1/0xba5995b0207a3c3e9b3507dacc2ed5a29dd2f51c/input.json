{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Bridge.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.7;\r\n\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function burn(address from, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IXDaiBridge {\r\n    function relayTokens(address _receiver, uint256 _amount) external;\r\n}\r\n\r\ninterface IOmniBridge {\r\n    function relayTokens(address token, address _receiver, uint256 _value) external;\r\n}\r\n\r\ninterface IWETH9 {\r\n    \r\n    function deposit() external payable;\r\n}\r\n\r\ncontract EthergyBridge{\r\n    \r\n    // address public xdaiBridge = 0x4aa42145Aa6Ebf72e164C9bBC74fbD3788045016;\r\n    address public xdaiBridge = 0x7E7669bdff02F2eE75b68B91FB81c2B38F9228C2;\r\n    // address public xdaiBridge = 0x89ADeed6d6E0AeF67ad324e4F3424c8Af2F98dC2; // testnet\r\n    \r\n    // address public omniBridge = 0x88ad09518695c6c3712AC10a214bE5109a655671;\r\n    address public omniBridge = 0x7bFF37bda2318125C6B895d4f2B50Bcd9E0cC40e;\r\n    // address public omniBridge = 0xE6c3E33e3053856cF89bD7AA6C2252B3980BfFcC; // testnet\r\n    \r\n    address public dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    // address public dai = 0xED579602eE2D86E99286b8215A1d77000dE3B770; // testnet\r\n    \r\n    address public weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    // address public weth = 0x7a1E49a3BcD92C7047ce1764a86eA1F7e2abB89b; // testnet\r\n    \r\n    address public dao; // target address on xDai net - should be minion address\r\n    \r\n    event BridgeXDai(address target, uint amount);\r\n    event BridgeWETH(address target, uint amount);\r\n    event WrapETH(uint amount);\r\n    event Received(address, uint);\r\n    \r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n    \r\n    constructor(address _dao) public\r\n    {\r\n        dao = _dao;\r\n    }\r\n    \r\n    // function setBridge(address _xdaiBridge, address _omniBridge) external {\r\n    //     xdaiBridge = _xdaiBridge;\r\n    //     omniBridge = _omniBridge;\r\n    // }\r\n\r\n    function bridgeXDai() external {\r\n        uint256 balance = IERC20(dai).balanceOf(address(this));\r\n        require(balance > 0, \"No sufficent DAI on the smart contract\");\r\n        IERC20(dai).approve(xdaiBridge, balance);\r\n        IXDaiBridge(xdaiBridge).relayTokens(dao, balance);\r\n        \r\n        emit BridgeXDai(dao, balance);\r\n    }\r\n    \r\n    function bridgeWETH() external {\r\n        uint256 balance = IERC20(weth).balanceOf(address(this));\r\n        require(balance > 0, \"No sufficent WETH on the smart contract\");\r\n        IERC20(weth).approve(omniBridge, balance);\r\n        IOmniBridge(omniBridge).relayTokens(weth, dao, balance);\r\n        \r\n        emit BridgeWETH(dao, balance);\r\n    }\r\n    \r\n    function wrapEth() external {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"No sufficent ETH on the smart contract\");\r\n        IWETH9(weth).deposit{value: balance}();\r\n        \r\n        emit WrapETH(balance);\r\n    }\r\n}\r\n"}}}