{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "TokenSender.sol": {
      "content": "/**\r\n *Submitted for verification at Etherscan.io on 2021-01-08\r\n*/\r\n\r\npragma solidity ^0.5.17;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n\taddress public owner;\r\n\taddress public newOwner;\r\n\r\n\tevent OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t\tnewOwner = address(0);\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner, \"msg.sender == owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction transferOwnership(address _newOwner) public onlyOwner {\r\n\t\trequire(address(0) != _newOwner, \"address(0) != _newOwner\");\r\n\t\tnewOwner = _newOwner;\r\n\t}\r\n\r\n\tfunction acceptOwnership() public {\r\n\t\trequire(msg.sender == newOwner, \"msg.sender == newOwner\");\r\n\t\temit OwnershipTransferred(owner, msg.sender);\r\n\t\towner = msg.sender;\r\n\t\tnewOwner = address(0);\r\n\t}\r\n}\r\n\r\ncontract Authorizable is Ownable {\r\n    mapping(address => bool) public authorized;\r\n  \r\n    event AuthorizationSet(address indexed addressAuthorized, bool indexed authorization);\r\n\r\n    constructor() public {\r\n        authorized[msg.sender] = true;\r\n    }\r\n\r\n    modifier onlyAuthorized() {\r\n        require(authorized[msg.sender], \"authorized[msg.sender]\");\r\n        _;\r\n    }\r\n\r\n    function setAuthorized(address addressAuthorized, bool authorization) onlyOwner public {\r\n        emit AuthorizationSet(addressAuthorized, authorization);\r\n        authorized[addressAuthorized] = authorization;\r\n    }\r\n  \r\n}\r\n \r\ncontract tokenInterface {\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract TokenSender is Authorizable {\r\n\ttokenInterface public tokenContract;\r\n\tmapping( uint256 => bool) public txDone;\r\n\t\r\n\tconstructor(address _tokenAddress) public {\r\n\t    tokenContract = tokenInterface(_tokenAddress);\r\n\t}\r\n\t\r\n\tfunction updateTokenContract(address _tokenAddress) public onlyAuthorized {\r\n        tokenContract = tokenInterface(_tokenAddress);\r\n    }\r\n\t\r\n    function multiSend(address[] memory _dests, uint256[] memory _values, uint256[] memory _id) public onlyAuthorized {\r\n        require(_dests.length == _values.length, \"_dests.length == _values.length\");\r\n        require(_dests.length == _id.length, \"_dests.length == _id.length\");\r\n        for( uint256 i = 0; i < _dests.length; i += 1 ) {\r\n            if ( txDone[_id[i]] == false ) {\r\n                tokenContract.transfer(_dests[i], _values[i]);\r\n                txDone[_id[i]] = true;\r\n            }\r\n        }\r\n    }\r\n\t\r\n\tfunction withdrawTokens(address to, uint256 value) public onlyAuthorized returns (bool) {\r\n        return tokenContract.transfer(to, value);\r\n    }\r\n    \r\n    function withdrawEther() public onlyAuthorized returns (bool) {\r\n        msg.sender.transfer(address(this).balance);\r\n        return true;\r\n    }\r\n}"
    }
  }
}