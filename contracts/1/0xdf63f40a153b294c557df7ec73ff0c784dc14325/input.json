{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/OVRBE.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.2;\r\ninterface IERC20 {\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external;\r\n    function transferFrom(address sender, address recipient, uint256 amount) external;\r\n}\r\ncontract BridgeAssistE {\r\n    address public owner;\r\n    IERC20 public TKN;\r\n\r\n    modifier restricted {\r\n        require(msg.sender == owner, \"This function is restricted to owner\");\r\n        _;\r\n    }\r\n    \r\n    event Collect(address indexed sender, uint256 amount);\r\n    event Dispense(address indexed sender, uint256 amount);\r\n    event TransferOwnership(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function collect(address _sender, uint256 _amount) public restricted {\r\n        TKN.transferFrom(_sender, address(this), _amount);\r\n        emit Collect(_sender, _amount);\r\n    }\r\n\r\n    function dispense(address _sender, uint256 _amount) public restricted {\r\n        TKN.transfer(_sender, _amount);\r\n        emit Dispense(_sender, _amount);\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public restricted {\r\n        emit TransferOwnership(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    constructor(IERC20 _TKN, address _owner) {\r\n        TKN = _TKN;\r\n        owner = _owner;\r\n    }\r\n}"}}}