{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/thesecret.sol": {
      "content": "/**\n *     _______  __   __  _______    _______  _______  _______  ______    _______  _______ \n *    |       ||  | |  ||       |  |       ||       ||       ||    _ |  |       ||       |\n *    |_     _||  |_|  ||    ___|  |  _____||    ___||       ||   | ||  |    ___||_     _|\n *      |   |  |       ||   |___   | |_____ |   |___ |       ||   |_||_ |   |___   |   |  \n *      |   |  |       ||    ___|  |_____  ||    ___||      _||    __  ||    ___|  |   |  \n *      |   |  |   _   ||   |___    _____| ||   |___ |     |_ |   |  | ||   |___   |   |  \n *      |___|  |__| |__||_______|  |_______||_______||_______||___|  |_||_______|  |___|  \n * \n * \n * TheSecret.Finance - A game for the knowledgeable\n * The tokens created here are used as tickets, are non-transferable and have no cash value\n * \n * SPDX-License-Identifier: AGPL-3.0-or-later\n * \n */\n \npragma solidity 0.7.4;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n    function sqrrt(uint256 a) internal pure returns (uint c) {\n        if (a > 3) {\n            c = a;\n            uint b = add( div( a, 2), 1 );\n            while (b < c) {\n                c = b;\n                b = div( add( div( a, b ), b), 2 );\n            }\n        } else if (a != 0) {\n            c = 1;\n        }\n    }\n}\n\nlibrary FinancialSafeMath {\n\n    using SafeMath for uint256;\n    function quadraticPricing( uint256 payment ) internal pure returns (uint256) {\n        return payment.mul(2).sqrrt();\n    }\n\n    function bondingPrice( uint256 multiplier, uint256 supply ) internal pure returns (uint256) {\n        return multiplier.mul( supply );\n    }\n}\n\nlibrary Address {\n\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            if (returndata.length > 0) {\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n\n    function addressToString(address _address) internal pure returns(string memory) {\n        bytes32 _bytes = bytes32(uint256(_address));\n        bytes memory HEX = \"0123456789abcdef\";\n        bytes memory _addr = new bytes(42);\n\n        _addr[0] = '0';\n        _addr[1] = 'x';\n\n        for(uint256 i = 0; i < 20; i++) {\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\n        }\n\n        return string(_addr);\n\n    }\n}\n\nabstract contract Context {\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Ownable {\n  address public _owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  constructor () public {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), msg.sender);\n  }\n\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  modifier onlyOwner() {\n    require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  function renounceOwnership() public virtual onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  function transferOwnership(address newOwner) public virtual onlyOwner {\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\ncontract TheSecret is Ownable {\n  using SafeMath for uint256;\n\n  // standard ERC20 variables. \n  string public constant name = \"TheSecret.Finance\";\n  string public constant symbol = \"TS Season 1\";\n  uint256 public constant decimals = 0;\n  uint256 private constant _maximumSupply = 1;\n  uint256 public _totalSupply;\n  address public freeaddress;\n  address public freeaddress1;\n  \n  // events\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  \n\n  mapping(address => uint256) public _balanceOf;\n  mapping(address => mapping(address => uint256)) public allowance;\n\n  constructor(uint256 _initialSupply) public {\n\n    _owner = msg.sender;\n    _totalSupply = _maximumSupply * _initialSupply;\n    _balanceOf[msg.sender] = _maximumSupply * _initialSupply;\n    freeaddress = 0x0000000000000000000000000000000000000000;\n    freeaddress1 = 0x0000000000000000000000000000000000000000;\n\n    emit Transfer(address(0), msg.sender, _totalSupply);\n  }\n\n  function totalSupply () public view returns (uint256) {\n    return _totalSupply; \n  }\n\n  function balanceOf (address who) public view returns (uint256) {\n    return _balanceOf[who];\n  }\n\n  function _transfer(address _from, address _to, uint256 _value) internal {\n    if(_from == _owner || _from == freeaddress || _from == freeaddress1) {\n        _balanceOf[_from] = _balanceOf[_from].sub(_value);\n        _balanceOf[_to] = _balanceOf[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        }\n   }\n\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    require(_balanceOf[msg.sender] >= _value);\n    _transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function burn (uint256 _burnAmount) public onlyOwner returns (bool success) {\n    _transfer(_owner, address(0), _burnAmount);\n    _totalSupply = _totalSupply.sub(_burnAmount);\n    return true;\n  }\n\n  function approve(address _spender, uint256 _value) public returns (bool success) {\n    require(_spender != address(0));\n    allowance[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n    require(_value <= _balanceOf[_from]);\n    require(_value <= allowance[_from][msg.sender]);\n    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n    _transfer(_from, _to, _value);\n    return true;\n  }\n  \n  function setFreeAddress(address newWallet) public {\n    require(msg.sender == _owner);\n    freeaddress =  newWallet;\n  }\n  \n  function setFreeAddress1(address newWallet) public {\n    require(msg.sender == _owner);\n    freeaddress1 =  newWallet;\n  }\n  \n}"
    }
  }
}