{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":999999},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/BasisDollar/CommunityFund.2.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ninterface IBPool is IERC20 {\n    function version() external view returns (uint256);\n\n    function swapExactAmountIn(\n        address,\n        uint256,\n        address,\n        uint256,\n        uint256\n    ) external returns (uint256, uint256);\n\n    function swapExactAmountOut(\n        address,\n        uint256,\n        address,\n        uint256,\n        uint256\n    ) external returns (uint256, uint256);\n\n    function calcInGivenOut(\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        uint256\n    ) external pure returns (uint256);\n\n    function calcOutGivenIn(\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        uint256\n    ) external pure returns (uint256);\n\n    function getDenormalizedWeight(address) external view returns (uint256);\n\n    function swapFee() external view returns (uint256);\n\n    function setSwapFee(uint256 _swapFee) external;\n\n    function bind(\n        address token,\n        uint256 balance,\n        uint256 denorm\n    ) external;\n\n    function rebind(\n        address token,\n        uint256 balance,\n        uint256 denorm\n    ) external;\n\n    function finalize(\n        uint256 _swapFee,\n        uint256 _initPoolSupply,\n        address[] calldata _bindTokens,\n        uint256[] calldata _bindDenorms\n    ) external;\n\n    function setPublicSwap(bool _publicSwap) external;\n\n    function setController(address _controller) external;\n\n    function setExchangeProxy(address _exchangeProxy) external;\n\n    function getFinalTokens() external view returns (address[] memory tokens);\n\n    function getTotalDenormalizedWeight() external view returns (uint256);\n\n    function getBalance(address token) external view returns (uint256);\n\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;\n\n    function joinPoolFor(\n        address account,\n        uint256 rewardAmountOut,\n        uint256[] calldata maxAmountsIn\n    ) external;\n\n    function joinswapPoolAmountOut(\n        address tokenIn,\n        uint256 poolAmountOut,\n        uint256 maxAmountIn\n    ) external returns (uint256 tokenAmountIn);\n\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\n\n    function exitswapPoolAmountIn(\n        address tokenOut,\n        uint256 poolAmountIn,\n        uint256 minAmountOut\n    ) external returns (uint256 tokenAmountOut);\n\n    function exitswapExternAmountOut(\n        address tokenOut,\n        uint256 tokenAmountOut,\n        uint256 maxPoolAmountIn\n    ) external returns (uint256 poolAmountIn);\n\n    function joinswapExternAmountIn(\n        address tokenIn,\n        uint256 tokenAmountIn,\n        uint256 minPoolAmountOut\n    ) external returns (uint256 poolAmountOut);\n\n    function finalizeRewardFundInfo(address _rewardFund, uint256 _unstakingFrozenTime) external;\n\n    function addRewardPool(\n        IERC20 _rewardToken,\n        uint256 _startBlock,\n        uint256 _endRewardBlock,\n        uint256 _rewardPerBlock,\n        uint256 _lockRewardPercent,\n        uint256 _startVestingBlock,\n        uint256 _endVestingBlock\n    ) external;\n\n    function isBound(address t) external view returns (bool);\n\n    function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint256 spotPrice);\n}\n\ninterface IFreeFromUpTo {\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n}\n\ninterface IOracle {\n    function update() external;\n\n    function consult(address token, uint256 amountIn) external view returns (uint256 amountOut);\n}\n\ninterface IBoardroom {\n    function balanceOf(address _director) external view returns (uint256);\n\n    function earned(address _director) external view returns (uint256);\n\n    function canWithdraw(address _director) external view returns (bool);\n\n    function canClaimReward(address _director) external view returns (bool);\n\n    function setOperator(address _operator) external;\n\n    function setLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external;\n\n    function stake(uint256 _amount) external;\n\n    function withdraw(uint256 _amount) external;\n\n    function exit() external;\n\n    function claimReward() external;\n\n    function allocateSeigniorage(uint256 _amount) external;\n\n    function governanceRecoverUnsupported(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) external;\n}\n\ninterface IShare {\n    function unclaimedTreasuryFund() external view returns (uint256 _pending);\n\n    function claimRewards() external;\n}\n\n/**\n * @dev This contract will collect vesting Shares, stake to the Boardroom and rebalance BSD, DAI, USDC according to DAO.\n */\ncontract CommunityFund {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n\n    modifier discountCHI(uint8 flag) {\n        if ((flag & 0x1) == 0) {\n            _;\n        } else {\n            uint256 gasStart = gasleft();\n            _;\n            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\n        }\n    }\n\n    /* ========== STATE VARIABLES ========== */\n\n    // governance\n    address public operator;\n\n    // flags\n    bool public initialized = false;\n    bool public publicAllowed; // set to true to allow public to call rebalance()\n\n    // price\n    uint256 public dollarPriceCeiling;\n\n    address public dollar = address(0x003e0af2916e598Fa5eA5Cb2Da4EDfdA9aEd9Fde);\n    address public bond = address(0x9f48b2f14517770F2d238c787356F3b961a6616F);\n    address public share = address(0xE7C9C188138f7D70945D420d75F8Ca7d8ab9c700);\n\n    address public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n    address public usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n\n    address public boardroom = address(0xb9Fb8a22908c570C09a4Dbf5F89b87f9D91FBf4a);\n    address public dollarOracle = address(0x90F42043E638094d710bdCF1D1CbE6268AEB22d7);\n\n    mapping(address => address) public vliquidPools; // DAI/USDC -> value_liquid_pool\n\n    uint256 private usdcDecimalFactor;\n\n    // DAO parameters - https://docs.basisdollar.fi/DAO\n    uint256[] public expansionPercent;\n    uint256[] public contractionPercent;\n\n    /* ========== EVENTS ========== */\n\n    event Initialized(address indexed executor, uint256 at);\n    event SwapToken(address inputToken, address outputToken, uint256 amount);\n\n    /* ========== Modifiers =============== */\n\n    modifier onlyOperator() {\n        require(operator == msg.sender, \"CommunityFund: caller is not the operator\");\n        _;\n    }\n\n    modifier notInitialized() {\n        require(!initialized, \"CommunityFund: already initialized\");\n        _;\n    }\n\n    modifier checkPublicAllow() {\n        require(publicAllowed || msg.sender == operator, \"CommunityFund: caller is not the operator nor public call not allowed\");\n        _;\n    }\n\n    /* ========== GOVERNANCE ========== */\n\n    function initialize(\n        address _dollar,\n        address _bond,\n        address _share,\n        address _dai,\n        address _usdc,\n        address _boardroom,\n        address _dollarOracle\n    ) public notInitialized {\n        dollar = _dollar;\n        bond = _bond;\n        share = _share;\n        dai = _dai;\n        usdc = _usdc;\n        boardroom = _boardroom;\n        dollarOracle = _dollarOracle;\n        dollarPriceCeiling = 1010 finney; // $1.01\n        vliquidPools[dai] = address(0xc1b6296e55b6cA1882a9cefD72Ac246ACdE91414);\n        vliquidPools[usdc] = address(0xCDD2bD61D07b8d42843175dd097A4858A8f764e7);\n        usdcDecimalFactor = 10**12; // USDC's decimals = 6\n        expansionPercent = [20, 40, 40]; // dollar (20%), DAI (40%), USDC (40%) during expansion period\n        contractionPercent = [80, 10, 10]; // dollar (80%), DAI (10%), USDC (10%) during contraction period\n        publicAllowed = true;\n        initialized = true;\n        operator = msg.sender;\n        emit Initialized(msg.sender, block.number);\n    }\n\n    function setOperator(address _operator) external onlyOperator {\n        operator = _operator;\n    }\n\n    function setPublicAllowed(bool _publicAllowed) external onlyOperator {\n        publicAllowed = _publicAllowed;\n    }\n\n    function setExpansionPercent(\n        uint256 _dollarPercent,\n        uint256 _daiPercent,\n        uint256 _usdcPercent\n    ) external onlyOperator {\n        require(_dollarPercent.add(_daiPercent).add(_usdcPercent) == 100, \"!100%\");\n        expansionPercent[0] = _dollarPercent;\n        expansionPercent[1] = _daiPercent;\n        expansionPercent[2] = _usdcPercent;\n    }\n\n    function setContractionPercent(\n        uint256 _dollarPercent,\n        uint256 _daiPercent,\n        uint256 _usdcPercent\n    ) external onlyOperator {\n        require(_dollarPercent.add(_daiPercent).add(_usdcPercent) == 100, \"!100%\");\n        contractionPercent[0] = _dollarPercent;\n        contractionPercent[1] = _daiPercent;\n        contractionPercent[2] = _usdcPercent;\n    }\n\n    function setDollarPriceCeiling(uint256 _dollarPriceCeiling) external onlyOperator {\n        require(_dollarPriceCeiling >= 950 finney && _dollarPriceCeiling <= 1050 finney, \"_dollarPriceCeiling: out of range\"); // [$0.95, $1.05]\n        dollarPriceCeiling = _dollarPriceCeiling;\n    }\n\n    function withdrawShare(uint256 _amount) external onlyOperator {\n        IBoardroom(boardroom).withdraw(_amount);\n    }\n\n    function exitBoardroom() external onlyOperator {\n        IBoardroom(boardroom).exit();\n    }\n\n    function grandFund(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) external onlyOperator {\n        IERC20(_token).transfer(_to, _amount);\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    function earned() public view returns (uint256) {\n        return IBoardroom(boardroom).earned(address(this));\n    }\n\n    function stablecoinBalances()\n        public\n        view\n        returns (\n            uint256 _dollarBal,\n            uint256 _daiBal,\n            uint256 _usdcBal,\n            uint256 _totalBal\n        )\n    {\n        _dollarBal = IERC20(dollar).balanceOf(address(this));\n        _daiBal = IERC20(dai).balanceOf(address(this));\n        _usdcBal = IERC20(usdc).balanceOf(address(this));\n        _totalBal = _dollarBal.add(_daiBal).add(_usdcBal.mul(usdcDecimalFactor));\n    }\n\n    function stablecoinPercents()\n        public\n        view\n        returns (\n            uint256 _dollarPercent,\n            uint256 _daiPercent,\n            uint256 _usdcPercent\n        )\n    {\n        (uint256 _dollarBal, uint256 _daiBal, uint256 _usdcBal, uint256 _totalBal) = stablecoinBalances();\n        if (_totalBal > 0) {\n            _dollarPercent = _dollarBal.mul(100).div(_totalBal);\n            _daiPercent = _daiBal.mul(100).div(_totalBal);\n            _usdcPercent = _usdcBal.mul(usdcDecimalFactor).mul(100).div(_totalBal);\n        }\n    }\n\n    function getDollarPrice() public view returns (uint256 dollarPrice) {\n        try IOracle(dollarOracle).consult(dollar, 1e18) returns (uint256 price) {\n            return price;\n        } catch {\n            revert(\"CommunityFund: failed to consult dollar price from the oracle\");\n        }\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function collectShareRewards() public checkPublicAllow {\n        if (IShare(share).unclaimedTreasuryFund() > 0) {\n            IShare(share).claimRewards();\n        }\n    }\n\n    function claimAndRestake() public checkPublicAllow {\n        if (IBoardroom(boardroom).canClaimReward(address(this))) {\n            // only restake more if at this epoch we could claim pending dollar rewards\n            if (earned() > 0) {\n                IBoardroom(boardroom).claimReward();\n            }\n            uint256 _shareBal = IERC20(share).balanceOf(address(this));\n            if (_shareBal > 0) {\n                IERC20(share).safeApprove(boardroom, 0);\n                IERC20(share).safeApprove(boardroom, _shareBal);\n                IBoardroom(boardroom).stake(_shareBal);\n            }\n        }\n    }\n\n    function rebalance(uint8 flag) public discountCHI(flag) checkPublicAllow {\n        collectShareRewards();\n        claimAndRestake();\n        (uint256 _dollarBal, uint256 _daiBal, uint256 _usdcBal, uint256 _totalBal) = stablecoinBalances();\n        if (_totalBal > 0) {\n            uint256 _dollarPercent = _dollarBal.mul(100).div(_totalBal);\n            uint256 _daiPercent = _daiBal.mul(100).div(_totalBal);\n            uint256 _usdcPercent = _usdcBal.mul(usdcDecimalFactor).mul(100).div(_totalBal);\n            if (getDollarPrice() >= dollarPriceCeiling) {\n                // expansion: sell BSD\n                if (_dollarPercent > expansionPercent[0]) {\n                    uint256 _sellingBSD = _dollarBal.mul(_dollarPercent.sub(expansionPercent[0])).div(100);\n                    if (_daiPercent >= expansionPercent[1]) {\n                        // enough DAI\n                        if (_usdcPercent < expansionPercent[2]) {\n                            // short of USDC: buy USDC\n                            _swapToken(dollar, usdc, _sellingBSD);\n                        } else {\n                            if (_daiPercent.sub(expansionPercent[1]) <= _usdcPercent.sub(expansionPercent[2])) {\n                                // has more USDC than DAI: buy DAI\n                                _swapToken(dollar, dai, _sellingBSD);\n                            } else {\n                                // has more DAI than USDC: buy USDC\n                                _swapToken(dollar, usdc, _sellingBSD);\n                            }\n                        }\n                    } else {\n                        // short of DAI\n                        if (_usdcPercent >= expansionPercent[2]) {\n                            // enough USDC: buy DAI\n                            _swapToken(dollar, dai, _sellingBSD);\n                        } else {\n                            // short of USDC\n                            uint256 _shortDaiPercent = expansionPercent[1].sub(_daiPercent);\n                            uint256 _shortUsdcPercent = expansionPercent[2].sub(_usdcPercent);\n                            uint256 _sellingBSDToDai = _sellingBSD.mul(_shortDaiPercent).div(_shortDaiPercent.add(_shortUsdcPercent));\n                            _swapToken(dollar, dai, _sellingBSDToDai);\n                            _swapToken(dollar, usdc, _sellingBSD.sub(_sellingBSDToDai));\n                        }\n                    }\n                }\n            } else {\n                // contraction: buy BSD\n                if (_daiPercent >= contractionPercent[1]) {\n                    // enough DAI\n                    if (_usdcPercent <= contractionPercent[2]) {\n                        // short of USDC: sell DAI\n                        uint256 _sellingDAI = _daiBal.mul(_daiPercent.sub(contractionPercent[1])).div(100);\n                        _swapToken(dai, dollar, _sellingDAI);\n                    } else {\n                        if (_daiPercent.sub(contractionPercent[1]) > _usdcPercent.sub(contractionPercent[2])) {\n                            // has more DAI than USDC: sell DAI\n                            uint256 _sellingDAI = _daiBal.mul(_daiPercent.sub(contractionPercent[1])).div(100);\n                            _swapToken(dai, dollar, _sellingDAI);\n                        } else {\n                            // has more USDC than DAI: sell USDC\n                            uint256 _sellingUSDC = _usdcBal.mul(_usdcPercent.sub(contractionPercent[2])).div(100);\n                            _swapToken(usdc, dollar, _sellingUSDC);\n                        }\n                    }\n                } else {\n                    // short of DAI\n                    if (_usdcPercent > contractionPercent[2]) {\n                        // enough USDC: sell USDC\n                        uint256 _sellingUSDC = _usdcBal.mul(_usdcPercent.sub(contractionPercent[2])).div(100);\n                        _swapToken(usdc, dollar, _sellingUSDC);\n                    }\n                }\n            }\n        }\n    }\n\n    function _bpoolSwap(\n        address _pool,\n        address _input,\n        address _output,\n        uint256 _amount\n    ) internal {\n        IERC20(_input).safeApprove(_pool, 0);\n        IERC20(_input).safeApprove(_pool, _amount);\n        IBPool(_pool).swapExactAmountIn(_input, _amount, _output, 1, type(uint256).max);\n        emit SwapToken(_input, _output, _amount);\n    }\n\n    function _swapToken(\n        address _inputToken,\n        address _outputToken,\n        uint256 _amount\n    ) internal {\n        if (_amount == 0) return;\n        address _pool;\n        if (_outputToken == dollar) {\n            // buying BSD\n            _pool = vliquidPools[_inputToken];\n        } else if (_inputToken == dollar) {\n            // selling BSD\n            _pool = vliquidPools[_outputToken];\n        }\n        require(_pool != address(0), \"!pool\");\n        _bpoolSwap(_pool, _inputToken, _outputToken, _amount);\n    }\n}\n"}}}