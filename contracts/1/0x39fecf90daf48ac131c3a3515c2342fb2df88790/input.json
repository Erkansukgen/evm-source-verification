{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/OMGL.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.4.25 <0.7.0;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  function name() public view returns(string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n\r\ncontract OMGL is ERC20Detailed {\r\n\r\n  using SafeMath for uint256;\r\n  mapping (address => uint256) public _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n  address[] internal _tokenHolders;\r\n\r\n  string constant tokenName = \"Omega Lion Token - Join @OmegaLions in Telegram - 3.33% reward, 1.11% burn / tx\";\r\n  string constant tokenSymbol = \"OMGL\";\r\n  uint8  constant tokenDecimals = 18;\r\n  uint256 _totalSupply = 11000000000000000000000000000;\r\n  uint256 _minSupply = 369369369000000000000000000;\r\n  uint256 public burnPercent = 1110;\r\n  uint256 public rewardPercent = 3330;\r\n  uint256 private _basePercent = 1000;\r\n\r\n  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\r\n    _mint(msg.sender, _totalSupply);\r\n  }\r\n\r\n  function totalSupply() override public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address owner) override public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  function allowance(address owner, address spender) override public view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  function transfer(address to, uint256 value) override public returns (bool) {\r\n    require(value <= _balances[msg.sender]);\r\n    require(to != address(0));\r\n\r\n    if (_totalSupply <= _minSupply) {\r\n      _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n      _balances[to] = _balances[to].add(value);\r\n\r\n      emit Transfer(msg.sender, to, value);\r\n    } else {\r\n      (uint256 tokensToBurn, uint256 tokensToReward) = burnAndReward(value);\r\n      uint256 tokensToTransfer = value.sub(tokensToBurn);\r\n      tokensToTransfer = tokensToTransfer.sub(tokensToReward);\r\n\r\n      _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n      _balances[to] = _balances[to].add(tokensToTransfer);\r\n\r\n      if (_balances[msg.sender] == 0) {\r\n        _removeTokenHolder(msg.sender);\r\n      }\r\n\r\n      (bool isNewholder, ) = _isTokenHolder(to);\r\n      if (!isNewholder) _tokenHolders.push(to);\r\n\r\n      _totalSupply = _totalSupply.sub(tokensToBurn);\r\n      _totalSupply = _totalSupply.sub(tokensToReward);\r\n\r\n      emit Transfer(msg.sender, to, tokensToTransfer);\r\n      emit Transfer(msg.sender, address(0), tokensToBurn);\r\n\r\n      _distributeReward(msg.sender, to, tokensToReward);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) override public returns (bool) {\r\n    require(value <= _balances[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n\r\n    if (_totalSupply <= _minSupply) {\r\n      _balances[from] = _balances[from].sub(value);\r\n      _balances[to] = _balances[to].add(value);\r\n      _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\r\n      emit Transfer(from, to, value);\r\n    } else {\r\n      (uint256 tokensToBurn, uint256 tokensToReward) = burnAndReward(value);\r\n      uint256 tokensToTransfer = value.sub(tokensToBurn);\r\n      tokensToTransfer = tokensToTransfer.sub(tokensToReward);\r\n\r\n      _balances[from] = _balances[from].sub(value);\r\n      _balances[to] = _balances[to].add(tokensToTransfer);\r\n\r\n      _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\r\n      if (_balances[from] == 0) {\r\n        _removeTokenHolder(from);\r\n      }\r\n\r\n      (bool isNewholder, ) = _isTokenHolder(to);\r\n      if (!isNewholder) _tokenHolders.push(to);\r\n\r\n      _totalSupply = _totalSupply.sub(tokensToBurn);\r\n      _totalSupply = _totalSupply.sub(tokensToReward);\r\n\r\n      emit Transfer(from, to, tokensToTransfer);\r\n      emit Transfer(from, address(0), tokensToBurn);\r\n\r\n      _distributeReward(from, to, tokensToReward);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function approve(address spender, uint256 value) override public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  function upAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  function downAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  function burnAndReward(uint256 value) public view returns (uint256, uint256)  {\r\n    uint256 roundValue = value.ceil(_basePercent);\r\n    uint256 burnValue = roundValue.mul(burnPercent).div(100000);\r\n    uint256 rewardValue = roundValue.mul(rewardPercent).div(100000);\r\n    return (burnValue, rewardValue);\r\n  }\r\n\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    _balances[account] = _balances[account].add(amount);\r\n    _tokenHolders.push(account);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function _removeTokenHolder(address _holder) internal {\r\n    (bool isHolder, uint256 s) = _isTokenHolder(_holder);\r\n    if (isHolder) {\r\n      _tokenHolders[s] = _tokenHolders[_tokenHolders.length - 1];\r\n      _tokenHolders.pop();\r\n    }\r\n  }\r\n\r\n  function _isTokenHolder(address _address) internal view returns(bool, uint256)\r\n  {\r\n      for (uint256 s = 0; s < _tokenHolders.length; s += 1){\r\n          if (_address == _tokenHolders[s]) return (true, s);\r\n      }\r\n      return (false, 0);\r\n  }\r\n\r\n  function _distributeReward(address from, address to, uint256 value) internal {\r\n    uint256 _totalReward = 0;\r\n    uint256 _sumBalance = _totalSupply.sub(_balances[from]);\r\n    _sumBalance = _totalSupply.sub(_balances[to]);\r\n    for (uint256 s = 0; s < _tokenHolders.length; s += 1) {\r\n      address _holder = _tokenHolders[s];\r\n      if (_holder != from && _holder != to) {\r\n        uint256 _reward = _balances[_holder].mul(value);\r\n        _reward = _reward.div(_sumBalance);\r\n        _balances[_holder] = _balances[_holder].add(_reward);\r\n        _totalReward = _totalReward.add(_reward);\r\n\r\n        emit Transfer(address(0), _holder, _reward);\r\n      }\r\n    }\r\n    _totalSupply = _totalSupply.add(_totalReward);\r\n  }\r\n}\r\n"
    }
  }
}