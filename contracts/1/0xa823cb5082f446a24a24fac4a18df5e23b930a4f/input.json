{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Maindapp_degen.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\";\r\nimport \"https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Factory.sol\";\r\nimport \"https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Pair.sol\";\r\nimport \"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\";\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address wallet;\r\n  address payable team_acc = 0x259A9e2F61dd9d52932de5243F587c015009995E;\r\n  uint  FEES;\r\n  State  state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  /**\r\n   * @param _wallet Vault address\r\n   */\r\n  constructor(address _wallet, uint _FEES) public {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n    FEES = _FEES;\r\n    state = State.Active;\r\n  }\r\n\r\n  /**\r\n   * @param investor Investor address\r\n   */\r\n   \r\n   \r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close(address payable __GovContract) onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    emit Closed();\r\n   team_acc.transfer(address(this).balance.mul(FEES).div(100));\r\n   __GovContract.transfer(address(this).balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    emit RefundsEnabled();\r\n  }\r\n\r\n  /**\r\n   * @param investor Investor address\r\n   */\r\n  function refund(address payable investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    emit Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Consts {\r\n    uint  constant TOKEN_DECIMALS = 18;\r\n    uint8  constant TOKEN_DECIMALS_UINT8 = 18;\r\n    uint  constant TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS;\r\n    address  constant platformToken = 0xF063fE1aB7a291c5d06a86e14730b00BF24cB589;  // SALE token valid for mainnet\r\n    bool constant CONTINUE_MINTING = false;\r\n    uint256  constant minPlatTokenReq = 1000 * TOKEN_DECIMAL_MULTIPLIER;\r\n    uint256 constant airdrop_fees_Percentage = 2;\r\n    uint256 constant minTimeThreshold = 600;  // need to change this to 86400 (24 hours)\r\n    uint256 constant minLockTime = 2592000;  // 3 months lock for uniswap listing\r\n\r\n}\r\n\r\n\r\n\r\ncontract RouterInterface is Ownable {\r\n    \r\n        address tokenAddress;\r\n        address payable creatorAddress;\r\n        uint256 locktime;\r\n    \r\n    \r\n    constructor(address _tokenAddress, address _creatorAdress, uint256 _locktime) public{\r\n        \r\n         tokenAddress = _tokenAddress;\r\n        creatorAddress = payable(_creatorAdress);\r\n        locktime = _locktime;\r\n    }\r\n        \r\n        \r\n        \r\n    uint  constant TOKEN_DECIMALS = 18;\r\n    uint  constant TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS;     \r\n    \r\n  address public UNISWAP_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n address public factoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n\r\n    \r\n\r\n \r\n  uint deadline = block.timestamp + 300;\r\n\r\nfunction Approve()public returns (bool){\r\n     uint amountIn = 10000000000000000000000000000000;\r\n     ERC20(tokenAddress).approve(UNISWAP_ADDRESS, amountIn);\r\n  }\r\n    \r\n\r\nfunction getpair(address token) public view returns(address){\r\n    \r\n   return IUniswapV2Factory(factoryAddress).getPair(token,IUniswapV2Router02(UNISWAP_ADDRESS).WETH());\r\n    \r\n}\r\n\r\nfunction AddLiquidity( uint256 amountTokenDesired) public payable{\r\n    // Approve();   \r\n    IUniswapV2Router02(UNISWAP_ADDRESS).addLiquidityETH.value(address(this).balance)(tokenAddress, amountTokenDesired, amountTokenDesired, address(this).balance, address(this), deadline);\r\n    } \r\n    \r\nfunction refundUniLP() public payable{\r\n        \r\n        require(block.timestamp > locktime);\r\n       \r\n        require(msg.sender == address(creatorAddress));\r\n       \r\n      ERC20(payable(getpair(tokenAddress))).transfer(creatorAddress,uniBalance(tokenAddress));\r\n      \r\n    } \r\n    \r\n    \r\n    function uniBalance(address token) public view returns (uint256){\r\n        \r\n        \r\n        return IUniswapV2Pair(getpair(token)).balanceOf(address(this));\r\n        \r\n    }\r\n    \r\n      fallback () external payable {\r\n //  needed to send eth to contract address from presale\r\n  }\r\n}\r\n\r\ncontract infoStorage is Ownable {\r\n    \r\n   struct info {\r\n        \r\n        bool exists;\r\n        string name;\r\n        string symbol;\r\n        string logo;\r\n        string website;\r\n        string github;\r\n        string twitter;\r\n        string reddit;\r\n        string telegram;\r\n        string description;\r\n        string update;\r\n    }\r\n\r\nmapping(address => info) public infoManager; \r\n\r\nconstructor (string[10] memory _tokenInfoInput, address _presaleCreator) public {\r\n    \r\n         if(!infoManager[_presaleCreator].exists){\r\n       \r\n    info memory presaleInfo = info({\r\n                          exists:true,\r\n                          name:_tokenInfoInput[0],\r\n                          symbol:_tokenInfoInput[1],\r\n                          logo:_tokenInfoInput[2],\r\n                          website:_tokenInfoInput[3],\r\n                          github:_tokenInfoInput[4],\r\n                          twitter:_tokenInfoInput[5],\r\n                          reddit: _tokenInfoInput[6],\r\n                          telegram:_tokenInfoInput[7],\r\n                          description:_tokenInfoInput[8],\r\n                          update:_tokenInfoInput[9]\r\n            });\r\n            \r\n    infoManager[_presaleCreator] = presaleInfo;\r\n   }\r\n    \r\n    \r\n    \r\n}    \r\n\r\n  function ChangeInfoDG(string[8] memory ChangeData) public onlyOwner{\r\n    \r\n     infoManager[msg.sender].logo = ChangeData[0];\r\n    infoManager[msg.sender].website = ChangeData[1];\r\n    infoManager[msg.sender].github = ChangeData[2];\r\n    infoManager[msg.sender].twitter = ChangeData[3];\r\n    infoManager[msg.sender].reddit = ChangeData[4];\r\n    infoManager[msg.sender].telegram = ChangeData[5];\r\n    infoManager[msg.sender].update = ChangeData[6];\r\n    infoManager[msg.sender].description = ChangeData[7];\r\n    \r\n    \r\n}\r\n    \r\n   function changeLogo(string memory newLogo) public onlyOwner {\r\n       \r\n       infoManager[msg.sender].logo = newLogo;\r\n       \r\n   } \r\n   \r\n      function changeWebsite(string memory newWebsite) public onlyOwner {\r\n       \r\n       infoManager[msg.sender].website = newWebsite;\r\n       \r\n   } \r\n   \r\n      function changeGit(string memory newGit) public onlyOwner {\r\n       \r\n       infoManager[msg.sender].github = newGit;\r\n       \r\n   } \r\n   \r\n      function changeTwitter(string memory newTwitter) public onlyOwner {\r\n       \r\n       infoManager[msg.sender].twitter = newTwitter;\r\n       \r\n   } \r\n   \r\n         function changeReddit(string memory newReddit) public onlyOwner {\r\n       \r\n       infoManager[msg.sender].reddit = newReddit;\r\n       \r\n   } \r\n   \r\n         function changeTelegram(string memory newTelegram) public onlyOwner {\r\n       \r\n       infoManager[msg.sender].telegram = newTelegram;\r\n       \r\n   } \r\n   \r\n         function changeDescription(string memory newDescription) public onlyOwner {\r\n       \r\n       infoManager[msg.sender].description = newDescription;\r\n       \r\n   } \r\n   \r\n            function changeUpdate(string memory newUpdate) public onlyOwner {\r\n       \r\n       infoManager[msg.sender].update = newUpdate;\r\n       \r\n   } \r\n    \r\n}\r\n\r\ncontract governor is Consts,Ownable {\r\n    \r\nusing SafeMath for uint256;\r\n   \r\nuint256 release;\r\nuint256 block;\r\n//uint256 teamFees;\r\nuint256 totalWeiRaised;\r\n//uint256 totalWeiInGovernance;\r\naddress presaleAddress;\r\naddress payable PresaleOwnerWallet;\r\naddress governTokenAddress;\r\naddress payable platformAddress;\r\n//uint256 governanceAmount;\r\nuint256 governStartTime;\r\nuint256 governEndTime;\r\nuint256  round;\r\n//uint256  totalround;\r\n//uint256  userRefundRound;\r\nuint256 tokenRate;\r\nbool EnableGovernRefund = false;\r\n//address ContributorChecker;\r\nbool VotingResultReleased = false;\r\nstruct Voted {\r\n        \r\n        bool exists;\r\n        bool alreadyVoted;\r\n        uint256 EthRefunded;\r\n        bool refunded;\r\n        uint256 votinground;\r\n        uint8 vote;\r\n    }\r\n\r\nmapping(address => Voted) public Voter;\r\n\r\n\r\nconstructor(address _platformAddress, address  _presaleAddress, address  _governTokenAddress, address __PresaleOwnerWallet, uint256  _totalWeiRaised, uint256  __governStartTime, uint256  __governEndTime) public{\r\n        \r\n      //  platformAddress = address(uint160(_platformAddress));\r\n        platformAddress = payable(_platformAddress);\r\n        presaleAddress = _presaleAddress;\r\n        PresaleOwnerWallet = address (uint160 (__PresaleOwnerWallet));\r\n        governTokenAddress = _governTokenAddress;\r\n        totalWeiRaised = _totalWeiRaised;\r\n        governStartTime = __governStartTime;\r\n        governEndTime = __governEndTime;\r\n        \r\n        (bool checkRate,bytes memory _checkRate) = presaleAddress.call(abi.encodeWithSignature(\"checkRate()\"));\r\n        require(checkRate, \"failed to check token rate\" );\r\n        tokenRate = abi.decode (_checkRate, (uint256));\r\n    }\r\n    \r\n\r\n    \r\n  fallback () external payable {\r\n //  needed to send eth to contract address from presale\r\n  }\r\n\r\n    function Release() public{\r\n  require ((now >= governStartTime) && (now <= governEndTime), \"Its not time for voting\");\r\n  require (!Voter[msg.sender].exists && !Voter[msg.sender].alreadyVoted, \"User has already voted\");\r\n  \r\n     if(!Voter[msg.sender].exists){\r\n       \r\n    Voted memory voteduser = Voted({\r\n    \r\n                          exists:true,\r\n                          alreadyVoted:true,\r\n                          EthRefunded:0,\r\n                          refunded:false,\r\n                          votinground: round++,\r\n                          vote: 1\r\n            });\r\n            \r\n    Voter[msg.sender] = voteduser;\r\n   }\r\n   \r\n  // Check user contribution for voting weight\r\n   (bool checkContributorValidity,bytes memory _checkContributorValidity) = presaleAddress.call(abi.encodeWithSignature(\"checkContributorValidity(address)\",msg.sender));\r\n    require(checkContributorValidity, \"failed to check user contribution\" );\r\n    uint256 userAmount = abi.decode (_checkContributorValidity, (uint256));\r\n\r\n\r\n    require(userAmount > 0);\r\n    require(IERC20(governTokenAddress).balanceOf(msg.sender) >= userAmount.mul(tokenRate), \"User doesnt have the original amount of purchased token\");\r\n   // require(IERC20(platformToken).balanceOf(msg.sender) >= minPlatTokenReq, \"User doesnt have enough platform token to be eligible for Vote\");\r\n    \r\n\r\n \r\n\r\n   release = release.add(userAmount); \r\n    }\r\n    \r\n    \r\n    function Block() public{\r\n  require ((now >= governStartTime) && (now <= governEndTime), \"Its not time for voting\");\r\n  require (!Voter[msg.sender].exists && !Voter[msg.sender].alreadyVoted, \"User has already voted\");\r\n  \r\n  if(!Voter[msg.sender].exists){\r\n       \r\n    Voted memory voteduser = Voted({\r\n    \r\n                          exists:true,\r\n                          alreadyVoted:true,\r\n                          EthRefunded:0,\r\n                          refunded:false,\r\n                          votinground: round++,\r\n                          vote: 0\r\n            });\r\n            \r\n    Voter[msg.sender] = voteduser;\r\n   }\r\n\r\n  // Check user contribution for voting weight\r\n   (bool checkContributorValidity,bytes memory _checkContributorValidity) = presaleAddress.call(abi.encodeWithSignature(\"checkContributorValidity(address)\",msg.sender));\r\n    require(checkContributorValidity, \"failed to check user contribution\" );\r\n    uint256 userAmount = abi.decode (_checkContributorValidity, (uint256));\r\n\r\n\r\n    require(userAmount > 0);\r\n    require(IERC20(governTokenAddress).balanceOf(msg.sender) >= userAmount.mul(tokenRate), \"User doesnt have the original amount of purchased token\");\r\n   // require(IERC20(platformToken).balanceOf(msg.sender) >= minPlatTokenReq, \"User doesnt have enough platform token to be eligible for Vote\");\r\n    \r\n\r\n   \r\n   block = block.add(userAmount); \r\n    \r\n    }  \r\n    \r\n    function voteResultsFinalize() onlyOwner public{\r\n    \r\n    require(!VotingResultReleased,\"Voting Results were already Released\");\r\n    VotingResultReleased = true;\r\n    require (now > governEndTime, \"Voting has not finished yet\");\r\n     if (release >= block){\r\n         \r\n    PresaleOwnerWallet.transfer(address(this).balance);\r\n         \r\n     } \r\n     \r\n     else if (release < block){\r\n         \r\n         EnableGovernRefund = true;\r\n         \r\n         \r\n     }\r\n     \r\n     \r\n\r\n        \r\n    }\r\n    \r\n    \r\n    function SafeGovernRefund() public{\r\n      \r\n    require (now > governEndTime, \"Voting has not finished yet\");    \r\n    require (EnableGovernRefund, \"Voting Not Finalized\");\r\n    require (!Voter[msg.sender].refunded && Voter[msg.sender].EthRefunded == 0, \"User already took the refund\");\r\n    Voter[msg.sender].refunded = true;  \r\n    \r\n    \r\n    \r\n    (bool checkRate,bytes memory _checkRate) = presaleAddress.call(abi.encodeWithSignature(\"checkRate()\"));\r\n    require(checkRate, \"failed to check token rate\" );\r\n    uint256 tokenRate = abi.decode (_checkRate, (uint256));\r\n\r\n\r\n   (bool checkContributorValidity,bytes memory _checkContributorValidity) = presaleAddress.call(abi.encodeWithSignature(\"checkContributorValidity(address)\",msg.sender));\r\n    require(checkContributorValidity, \"failed to check user contribution\" );\r\n    uint256 userAmount = abi.decode (_checkContributorValidity, (uint256));\r\n    \r\n\r\n    uint256 amountToTransfer = userAmount.mul(address(this).balance).div(totalWeiRaised);\r\n       \r\n    require(userAmount > 0 && amountToTransfer > 0);\r\n    Voter[msg.sender].EthRefunded += amountToTransfer;   \r\n\r\n   \r\n    require(IERC20(governTokenAddress).balanceOf(msg.sender) >= userAmount.mul(tokenRate), \"Not enough presale token\");\r\n   // require(IERC20(platformToken).balanceOf(msg.sender) >= minPlatTokenReq, \"Not enough platform token\");\r\n   \r\n\r\n    msg.sender.transfer(amountToTransfer);\r\n\r\n    \r\n    }\r\n    \r\n    \r\n    \r\n    //function ReleaseFundsToPlatform() onlyOwner public{\r\n    \r\n     function ReleaseFundsToPlatform() onlyOwner public{  \r\n         \r\n     platformAddress.transfer(address(this).balance);   \r\n       \r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract MainDeployer is Consts,Ownable  {\r\n    \r\n    uint public minUniPercentage = 50; //minimum 50% has to go for uniswap lock\r\n    address public presaleDappAddr;\r\n    address public tokenDappAddr;\r\n  //  address public uniswapDappAddr;\r\n  //  address[3] public finalizeInput;\r\n    uint256 public tokenFee;\r\n    constructor(address _presaleDappAddr) public{\r\n        \r\n        presaleDappAddr = _presaleDappAddr;\r\n     //   tokenDappAddr = _tokenDappAddr;\r\n    }\r\n\r\nusing SafeMath for uint256;\r\n    struct Presale {\r\n        bool exists;\r\n        uint256 createdOn;\r\n        address presaleInfoAddr;\r\n        address tokenAddress;\r\n        address presaleAddress;\r\n        address governor;\r\n        bool active;\r\n      //  uint256 startTime;\r\n      //  uint256 endTime;\r\n        uint256 govStartTime;\r\n        uint256 govEndTime;\r\n        uint govPercentage;\r\n        address uniswapDep;\r\n        uint uniswapPercentage;\r\n        uint256 uniswapRate;\r\n        uint256 lp_locked;\r\n    }\r\nmapping(address => Presale) public presales;\r\n//address[] public presaleOwners;\r\nmapping (uint256 => address) public presaleOwners;\r\n//governor internal GoverningContract;\r\n\r\n\r\nuint256 OwnerIndex;\r\n\r\n\r\n\r\n\r\n// function CreatePresaleDep(string[3] memory _tokenInfo, uint256[2] memory start_end_time, uint256 rate, uint256[3] memory soft_hard_cap_rate, uint256[2] memory min_max_eth, address[] memory _teamAddresses, uint256[] memory _teamAmounts, uint64[] memory _freezeTime) public{\r\n function CreatePresaleDep(string[10] memory _tokenInfo,address tokenAddr, uint256[4] memory start_end_gov_time, uint256[6] memory soft_hard_cap_rate_min_max_eth_GOV,uint256[3] memory uniswap_info_arr) public{\r\n \r\n     \r\n     require((start_end_gov_time[1].add(minTimeThreshold)) < start_end_gov_time[2], \"Gov start must be after presale end time\");\r\n     require(start_end_gov_time[3] > (start_end_gov_time[2].add(minTimeThreshold)), \"Governance must be atleast 24 hours\");\r\n     require(uniswap_info_arr[0] > (start_end_gov_time[1].add(minLockTime)), \"Lock time must be higher than presale end time\");\r\n     require(soft_hard_cap_rate_min_max_eth_GOV[5] >=0 && soft_hard_cap_rate_min_max_eth_GOV[5] <=100, \"Governance amount is beyond range\");\r\n     require((uniswap_info_arr[2] > minUniPercentage), \"Uniswap percentage is lower than min threshold\");\r\n     require((uniswap_info_arr[2].add(soft_hard_cap_rate_min_max_eth_GOV[5])) <= 100, \"gov plus uni % greater than 100\");\r\n  \r\n  //require (!presales[msg.sender].exists || !presales[msg.sender].active, \"User already has a running presale\");\r\n    require (!presales[msg.sender].exists, \"User already made a presale\");   \r\n     \r\n     require(start_end_gov_time[1].add(minTimeThreshold) < start_end_gov_time[2], \"Gov start must be after presale end time\");\r\n     require(start_end_gov_time[3] > (start_end_gov_time[2].add(minTimeThreshold)), \"Governance must be atleast 24 hours\");\r\n\r\n\r\n    infoStorage PresaleInfo = new infoStorage(_tokenInfo, msg.sender);\r\n    \r\n    PresaleInfo.transferOwnership(msg.sender);\r\n\r\n   Presale memory presale = Presale({exists:true,\r\n                            createdOn: block.timestamp,\r\n                            presaleInfoAddr: address(PresaleInfo),\r\n                            tokenAddress: tokenAddr,\r\n                            presaleAddress: address(0),\r\n                            governor: address(0),\r\n                            active: true,\r\n                         //   startTime: start_end_gov_time[0],\r\n                         //   endTime: start_end_gov_time[1],\r\n                            govStartTime: start_end_gov_time[2],\r\n                            govEndTime: start_end_gov_time[3],\r\n                            govPercentage: soft_hard_cap_rate_min_max_eth_GOV[5],\r\n                            uniswapDep:address(0),\r\n                            uniswapPercentage:uniswap_info_arr[2],\r\n                            uniswapRate:uniswap_info_arr[1],\r\n                            lp_locked: uniswap_info_arr[0]\r\n            });   \r\n            \r\n    presales[msg.sender] = presale;\r\n \r\n \r\n//(bool tokenCreateSuccess,bytes memory tokenAddrReturn) = tokenDappAddr.delegatecall(abi.encodeWithSignature(\"CreateToken(address,string[3])\",address(this),_tokenInfo));\r\n//require(tokenCreateSuccess, \"presale creation failed\");\r\n//address tokenReturn = abi.decode (tokenAddrReturn, (address));\r\n//presales[msg.sender].tokenAddress = tokenReturn;\r\n\r\n\r\naddress[3] memory presaleAddressInput = [address(this),msg.sender,presales[msg.sender].tokenAddress];\r\n\r\n(bool presaleSuccess,bytes memory presaleFetch) = presaleDappAddr.delegatecall(abi.encodeWithSignature(\"CreatePresaleTest(address[3],uint256[4],uint256[6],uint256)\",presaleAddressInput,start_end_gov_time,soft_hard_cap_rate_min_max_eth_GOV,presales[msg.sender].uniswapPercentage));\r\nrequire(presaleSuccess, \"presale creation failed\");\r\naddress presaleReturn = abi.decode (presaleFetch, (address));\r\npresales[msg.sender].presaleAddress = presaleReturn;\r\n \r\n\r\n presaleOwners[OwnerIndex] = msg.sender;\r\n\r\n \r\n   \r\n \r\n OwnerIndex++;\r\n\r\n \r\n// (bool ownershipTransferSuccess,bytes memory tokenOwnershipTransfer) = presales[msg.sender].tokenAddress.call(abi.encodeWithSignature(\"transferOwnership(address)\",presales[msg.sender].presaleAddress));\r\n//require(ownershipTransferSuccess, \"token ownership transfer failed\");\r\n\r\n// (bool _PresaleTokenInit,bytes memory PresaleTokenInitReturn) = presales[msg.sender].presaleAddress.call(abi.encodeWithSignature(\"init(address[],uint256[],uint64[])\", _teamAddresses, _teamAmounts, _freezeTime));\r\n// require(_PresaleTokenInit,\"Initialization failed\");\r\n \r\n\r\n\r\n }\r\n \r\n function CheckBlockTimestamp() public view returns (uint256){\r\n     \r\n     \r\n     return now;\r\n     \r\n     \r\n }\r\n \r\n function changeUniPercentage(uint uniPer) public onlyOwner {\r\n     \r\n     require((uniPer >= 0) && (uniPer <=100), \"uniPer value outside range\");\r\n     \r\n     minUniPercentage = uniPer;\r\n     \r\n    \r\n     \r\n }\r\n \r\n // function callFinalize( uint256 _governStartTime, uint256 _governEndTime) public {\r\n  function callFinalizeDG() public {\r\n // function callFinalize() public {\r\n     \r\n    \r\n      \r\n     require(presales[msg.sender].exists && presales[msg.sender].active, \"User doesnt have a running presale to finalize\");\r\n     \r\n     require(presales[msg.sender].govStartTime > now, \"Governance start time has past\");\r\n \r\n      presales[msg.sender].active = false;    \r\n\r\n    \r\n\r\n    \r\n\r\n    (bool checkEthRaised,bytes memory _totalEthRaised) = presales[msg.sender].presaleAddress.call(abi.encodeWithSignature(\"CheckTotalEthRaised()\"));\r\n    require(checkEthRaised, \"failed to check eth raised\");\r\n    uint256 totalEthRaised = abi.decode (_totalEthRaised, (uint256));\r\n  \r\n    (bool checkSoftCap,bytes memory _SoftCap) = presales[msg.sender].presaleAddress.call(abi.encodeWithSignature(\"CheckSoftCap()\"));\r\n    require(checkSoftCap, \"failed to check soft cap\");\r\n    uint256 SoftCap = abi.decode (_SoftCap, (uint256));\r\n  \r\n\r\n    if (presales[msg.sender].govPercentage != 0 && !(totalEthRaised < (SoftCap * TOKEN_DECIMAL_MULTIPLIER)) && !(totalEthRaised == 0)){\r\n   governor GoverningContract = new governor(owner, presales[msg.sender].presaleAddress,presales[msg.sender].tokenAddress, msg.sender, totalEthRaised, presales[msg.sender].govStartTime, presales[msg.sender].govEndTime);\r\n    presales[msg.sender].governor = address(GoverningContract);\r\n    }\r\n\r\n\r\n  if (!(totalEthRaised < (SoftCap * TOKEN_DECIMAL_MULTIPLIER)) && !(totalEthRaised == 0) && !(presales[msg.sender].uniswapPercentage == 0)){\r\n// CREATE UNISWAP CONTRACT START\r\n   \r\n\r\n       \r\n   RouterInterface UniswapAddLiqContract = new RouterInterface(presales[msg.sender].tokenAddress,msg.sender,presales[msg.sender].lp_locked);\r\n   presales[msg.sender].uniswapDep = address(UniswapAddLiqContract);\r\n   \r\n\r\n    \r\n    uint256 uniswapMintAmount = presales[msg.sender].uniswapRate.mul(totalEthRaised).mul(presales[msg.sender].uniswapPercentage).div(100);\r\n    (bool mintUniswapTokens, bytes memory _mintUniswapTokens) = presales[msg.sender].presaleAddress.call(abi.encodeWithSignature(\"mintForUniswap(address,uint256)\",presales[msg.sender].uniswapDep,uniswapMintAmount));\r\n    require(mintUniswapTokens, \"Failed to mint to uniswap dep\"); \r\n   \r\n   \r\n// CREATE UNISWAP CONTRACT END\r\n\r\n //   (bool _enableTokenTransfer, bytes memory _TokenTransferReturn) = presales[msg.sender].presaleAddress.call(abi.encodeWithSignature(\"enableTokenTransfer()\"));\r\n //   require(_enableTokenTransfer, \"Token transfer enablement failed\"); \r\n   // uint256 TokenTransferReturn = abi.decode (_TokenTransferReturn, (uint256));   // This variables are bnot used anywhere in the code. This is just to make sure unchecked returns are not causing issues\r\n   \r\n   \r\n   // Interact with created uniswap contract start\r\n   \r\n\r\n   \r\n\r\n  \r\n// Interact with created uniswap contract end\r\n   \r\n   \r\n   \r\n    (bool _presaleRateCheck, bytes memory _presaleRate) = presales[msg.sender].presaleAddress.call(abi.encodeWithSignature(\"checkRate()\"));\r\n    require(_presaleRateCheck, \"Failed to check total supply\" ); \r\n    uint256 presaleRate = abi.decode (_presaleRate, (uint256));\r\n    uint256 tokenFeeCalc = totalEthRaised.mul(airdrop_fees_Percentage).div(100);\r\n    uint256 tokenFee = presaleRate.mul(tokenFeeCalc);\r\n    \r\n    (bool _payPlatformFees, bytes memory payPlatformFeesReturn) = presales[msg.sender].presaleAddress.call(abi.encodeWithSignature(\"mintForPlatform(uint256)\",tokenFee));\r\n    require(_payPlatformFees, \"Failed to pay platform\" ); \r\n    \r\n  \r\n  \r\n   address[3] memory finalizeInput = [presales[msg.sender].governor,msg.sender,presales[msg.sender].uniswapDep];\r\n    (bool _finalized, bytes memory _finalizedReturn) = presales[msg.sender].presaleAddress.call(abi.encodeWithSignature(\"finalize(address[3],bool)\",finalizeInput,true));\r\n    require(_finalized, \"Finalization failed\" ); \r\n    // uint256 finalizedReturn = abi.decode (_finalizedReturn, (uint256));  // This variables are bnot used anywhere in the code. This is just to make sure unchecked returns are not causing issues\r\n     \r\n   \r\n\r\n\r\n   UniswapAddLiqContract.Approve();\r\n   UniswapAddLiqContract.AddLiquidity(uniswapMintAmount);\r\n\r\n   \r\n  }\r\n  \r\n  \r\n  else if((totalEthRaised < (SoftCap * TOKEN_DECIMAL_MULTIPLIER)) || (totalEthRaised == 0)) {\r\n      \r\n   address[3] memory finalizeInput = [presales[msg.sender].governor,msg.sender,presales[msg.sender].uniswapDep];\r\n    (bool _finalized, bytes memory _finalizedReturn) = presales[msg.sender].presaleAddress.call(abi.encodeWithSignature(\"finalize(address[3],bool)\",finalizeInput,false));\r\n    require(_finalized, \"Finalization failed\" ); \r\n      \r\n      \r\n  }\r\n\r\n\r\n\r\n\r\n     \r\n }\r\n \r\n \r\n function platformCallsFinalizeRefund(address presaleToRefundFromOwnerAddress) onlyOwner public{\r\n     \r\n     require(now > presales[presaleToRefundFromOwnerAddress].govStartTime, \"governance time not started yet\");\r\n    address[3] memory finalizeInput = [presales[presaleToRefundFromOwnerAddress].governor,presaleToRefundFromOwnerAddress,presales[presaleToRefundFromOwnerAddress].uniswapDep];\r\n    (bool _finalized, bytes memory _finalizedReturn) = presales[presaleToRefundFromOwnerAddress].presaleAddress.call(abi.encodeWithSignature(\"finalize(address[3],bool)\",finalizeInput,false));\r\n    require(_finalized, \"Finalization Refund call failed\" ); \r\n     \r\n }\r\n \r\n \r\n function ReleaseGovernFunds(address GoverningContractAddr) onlyOwner public {   //This function is a last resort safety measure in a case where governance contract gets any un-anticipated errors and eth gets locked\r\n     \r\n     // Releasing governance funds to platform address\r\n     \r\n     governor(uint160(GoverningContractAddr)).ReleaseFundsToPlatform();\r\n\r\n      \r\n }\r\n \r\n \r\n\r\n \r\n \r\n function getNumberOfPresaleOwners() public view returns (uint256){\r\n     \r\n     \r\n     return OwnerIndex;\r\n     \r\n }\r\n \r\n function ReleaseVoteResults() public {\r\n    require(presales[msg.sender].exists && !presales[msg.sender].active, \"User doesnt have a presale governed\");\r\n    \r\n    governor GovernorVoteChecker = governor(address(uint160(presales[msg.sender].governor)));\r\n    \r\n    GovernorVoteChecker.voteResultsFinalize();\r\n     \r\n }\r\n \r\n\r\n \r\n} \r\n    \r\n    \r\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    }
  }
}