{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Cards.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\ncontract Cards {\r\n    address payable public _ace;\r\n    address payable public _spade;\r\n    address payable public _club;\r\n\r\n    constructor (address payable Ace, address payable Spade, address payable Club) {\r\n        _ace = Ace;\r\n        _spade = Spade;\r\n        _club = Club;\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function deal() external {\r\n        require(msg.sender == _ace || msg.sender == _spade || msg.sender == _club, \"Loser!\");\r\n        disperseEth();\r\n    }\r\n    \r\n    function disperseEth() private {\r\n         uint256 BALANCE = address(this).balance;\r\n         uint256 THIRD = BALANCE / 5;\r\n         uint256 TWOOTH = BALANCE / 5 * 2;\r\n         payable(_ace).transfer(TWOOTH);\r\n         payable(_spade).transfer(TWOOTH);\r\n         payable(_club).transfer(THIRD);\r\n         \r\n    }\r\n\r\n    function updateAce(address payable Ace) external {\r\n        require(msg.sender == _ace || msg.sender == _spade, \"Loser!\");\r\n        _ace = Ace;\r\n    }\r\n\r\n    function updateSpade(address payable Spade) external {\r\n        require(msg.sender == _ace || msg.sender == _spade, \"Loser!\");\r\n        _spade = Spade;\r\n    }\r\n\r\n    function updateBB(address payable Club) external {\r\n        require(msg.sender == _ace || msg.sender == _spade, \"Loser!\");\r\n        _club = Club;\r\n    }\r\n}"
    }
  }
}