{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":999},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"LegacySimpleUpgrader.sol":{"content":"pragma solidity ^0.5.4;\r\n\r\ninterface Upgrader {\r\n    function upgrade(address payable _wallet, address[] calldata _toDisable, address[] calldata _toEnable) external;\r\n    function toDisable() external view returns (address[] memory);\r\n    function toEnable() external view returns (address[] memory);\r\n}\r\n\r\ncontract BaseWallet {\r\n    function authoriseModule(address _module, bool _value) external  {}\r\n}\r\n\r\ncontract LegacySimpleUpgrader is Upgrader {\r\n\r\n    address[] private disable;\r\n    address[] private enable;\r\n\r\n    constructor(address[] memory _disable, address[] memory _enable) public {\r\n        disable = _disable;\r\n        enable = _enable;\r\n    }\r\n\r\n    function upgrade(address payable _wallet, address[] calldata _toDisable, address[] calldata _toEnable) external {\r\n        uint256 i = 0;\r\n        //remove old modules\r\n        for(i = 0; i < _toDisable.length; i++) {\r\n            BaseWallet(_wallet).authoriseModule(_toDisable[i], false);\r\n        }\r\n        //add new modules\r\n        for(i = 0; i < _toEnable.length; i++) {\r\n            BaseWallet(_wallet).authoriseModule(_toEnable[i], true);\r\n        }\r\n    }\r\n\r\n    function toDisable() external view returns (address[] memory) {\r\n        return disable;\r\n    }\r\n\r\n    function toEnable() external view returns (address[] memory) {\r\n        return enable;\r\n    }\r\n}"}}}