{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/FaucetPayTokenWallet/FaucetPayTokenWallet.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.7.5;\r\n\r\ncontract FaucetPayTokenWallet {\r\n\r\n    address public ownerAddress;\r\n\r\n    constructor() {\r\n        ownerAddress = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == ownerAddress,\r\n            'WRONG_OWNER'\r\n        );\r\n          _;\r\n    }\r\n\r\n    function changeOwnerAddress(\r\n        address _newOwner\r\n    )\r\n        onlyOwner\r\n        public\r\n    {\r\n        require(\r\n            _newOwner != address(0x0),\r\n            'OWNER_FAILED'\r\n        );\r\n        ownerAddress = _newOwner;\r\n    }\r\n\r\n    function withdraw(\r\n        address _token,\r\n        address _address,\r\n        uint256 _amount\r\n    )\r\n        onlyOwner\r\n        public\r\n        returns (bool)\r\n    {\r\n        safeTransfer(\r\n            _token,\r\n            _address,\r\n            _amount\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function withdrawMass(\r\n        address _token,\r\n        address[] memory _addresses,\r\n        uint256[] memory _amounts\r\n    )\r\n        onlyOwner\r\n        external\r\n        returns(bool)\r\n    {\r\n        for(uint256 i = 0; i < _addresses.length; i++) {\r\n            withdraw(_token, _addresses[i], _amounts[i]);\r\n\t    }\r\n\t    return true;\r\n    }\r\n\r\n    bytes4 private constant TRANSFER = bytes4(\r\n        keccak256(\r\n            bytes(\r\n                'transfer(address,uint256)'\r\n            )\r\n        )\r\n    );\r\n\r\n    function safeTransfer(\r\n        address _token,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        private\r\n    {\r\n        (bool success, bytes memory data) = _token.call(\r\n            abi.encodeWithSelector(\r\n                TRANSFER,\r\n                _to,\r\n                _value\r\n            )\r\n        );\r\n\r\n        require(\r\n            success && (\r\n                data.length == 0 || abi.decode(\r\n                    data, (bool)\r\n                )\r\n            ),\r\n            'TRANSFER_FAILED'\r\n        );\r\n    }\r\n}"}}}