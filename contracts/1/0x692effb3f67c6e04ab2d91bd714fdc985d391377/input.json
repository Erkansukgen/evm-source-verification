{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/arb.sol":{"content":"\r\n//pragma solidity >=0.6.6;\r\npragma solidity >=0.5.16;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Pair2 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\r\n            ))));\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\r\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\r\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint i = path.length - 1; i > 0; i--) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TTransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\ninterface IArbitrageFinder{\r\n    function all_routers(uint n) external view returns (address pair);\r\n    function all_factories(uint n) external view returns (address pair);\r\n    function getRouterAmount() external view returns (uint);\r\n\r\n    function addRouter(address r, address f) external;\r\n    function removeRouter(uint n) external;\r\n}\r\n\r\ncontract ArbitrageGetReserve{\r\n    function getAllPairsData(address factory)  external view returns(address[] memory addrs, uint [] memory reserves ){\r\n        uint pair_lenth = IUniswapV2Factory(factory).allPairsLength();\r\n        addrs = new address[](pair_lenth * 3);\r\n        reserves = new uint[](pair_lenth * 2);\r\n\r\n        for (uint i = 0;i< pair_lenth;i++){\r\n\r\n            address pair = IUniswapV2Factory(factory).allPairs(i);\r\n            addrs[i*3]= pair;\r\n            addrs[i*3 + 1] = IUniswapV2Pair(pair).token0();\r\n            addrs[i*3 + 2] = IUniswapV2Pair(pair).token1();\r\n            (reserves[i*2],reserves[i*2+1],) = IUniswapV2Pair(pair).getReserves();\r\n        }\r\n        return (addrs, reserves);\r\n    }\r\n\r\n    // function getAllReserves(address[] calldata pairs) external view returns (uint[] memory rets){\r\n    //     rets = new uint[](pairs.length*2);\r\n    //     for (uint i = 0;i<pairs.length;i++){\r\n    //         (rets[i*2],rets[i*2+1],) = IUniswapV2Pair(pairs[i]).getReserves();\r\n    //     }\r\n    //     return rets;\r\n    // }\r\n}\r\n\r\n\r\ncontract ArbitrageFinder{\r\n    using SafeMath for uint;\r\n    address[] public all_routers;\r\n    address[] public all_factories;\r\n\r\n    address payable public owner;\r\n    modifier onlyOwner(){\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        // if (copy_from!=0x0000000000000000000000000000000000000000){\r\n        //     uint total = IArbitrageFinder(copy_from).getRouterAmount();\r\n        //     all_routers = new address[](total);\r\n        //     all_factories = new address[](total);\r\n        //     for (uint i = 0;i<total;i++){\r\n        //         all_routers[i] = IArbitrageFinder(copy_from).all_routers(i);\r\n        //         all_factories[i] = IArbitrageFinder(copy_from).all_factories(i);\r\n        //     }\r\n        // }\r\n\r\n        all_routers = [\r\n                        0xb7eA438464C1b176C3684C69193447039bA0ea60,\r\n                        0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F,\r\n                        0x7833f7d66248E4fbD705CD83DcC74288ff98d313,\r\n                        0xd954551853F55deb4Ae31407c423e67B1621424A,\r\n                        0xE85C6ab56A3422E7bAfd71e81Eb7d0f290646078,\r\n                        0x2029F4d96E980aC4f5841Ae38B17e3Feb0D75e66,\r\n                        0x3047799262d8D2EF41eD2a222205968bC9B0d895,\r\n                        0xBf6527834dBB89cdC97A79FCD62E6c08B19F8ec0,\r\n                        0xCDe540d7eAFE93aC5fE6233Bee57E1270D3E330F,\r\n                        0xc946764369623F560a5962D32c1D16D45F1BD6fa,\r\n                        0x65b302EdC264604b335487542559658F79128EA5,\r\n                        0xc3FfcB3D5745BbA5ada6928D0F5238830A358943,\r\n                        0xbd67d157502A23309Db761c41965600c2Ec788b2,\r\n                        0x788B8EcE56F2C0eD41f31D7cd172276addCD7F99,\r\n                        0xDB7ef44D6689B7C74FdA0C2dD468e2FfD5E78bb2,\r\n                        0xC92A405C545b356066A5110FA5ab18AAdc89FA1f,\r\n                        0x9cA9390de3f869c5c16DC4fd2b09106F1af1083b,\r\n                        0xE6903c4D8B1DF3385ecD047908f2A550848c1551];\r\n        all_factories = [\r\n                        0x97a256514a0D1f61356AFD97188cD1dda443E4A0,\r\n                        0xBCfCcbde45cE874adCB698cC183deBcF17952812,\r\n                        0xbcaE2c6cB2477fCcF75d0b0c4e6059Da00c4086a,\r\n                        0xCe8fd65646F2a2a897755A1188C04aCe94D2B8D0,\r\n                        0xB9fA84912FF2383a617d8b433E926Adf0Dd3FEa1,\r\n                        0x60581ae482ca1f787A561Ed73BDCD93A9008c448,\r\n                        0xdd538E4Fd1b69B7863E1F741213276A6Cf1EfB3B,\r\n                        0x8a1E9d3aEbBBd5bA2A64d3355A48dD5E9b511256,\r\n                        0x01bF7C66c6BD861915CdaaE475042d3c4BaE16A7,\r\n                        0xF38D202723a9376C034eD5b8Cecb4EFe8f249836,\r\n                        0x782536Abe989570211419352FbBf98A083380217,\r\n                        0xac59B7Af8A548f4f0beF8C582C1C0A1a3A53D5CE,\r\n                        0x553990F2CBA90272390f62C5BDb1681fFc899675,\r\n                        0x720767Aea828a9730123679f3cE3DE01369b4575,\r\n                        0x2Ce81910A61a15b1360c57267319A3F474521D2a,\r\n                        0x71bCFF5Ce91f062b64e0A23D54Baf15c68042603,\r\n                        0x29EA79d877558b60e3EeeB5FFB6361E75fc4580c,\r\n                        0xEFCef5051dC82d090953b6b500EC046B019fc6E5\r\n                        ];\r\n    }\r\n\r\n    function withdraw(address _token, uint256 amount) onlyOwner public{\r\n        //require(balances[_token] >= qty);\r\n        if (amount==0){\r\n            amount = IERC20(_token).balanceOf(address(this));\r\n        }\r\n        IERC20(_token).transfer(owner, amount);\r\n    }\r\n\r\n    function call3(address target, string  memory func,  uint256 p1, uint256 p2, uint256 p3) onlyOwner public returns ( bytes memory) {\r\n        //call function with two param\r\n        bytes memory callData = abi.encodePacked(bytes4(keccak256(bytes(func))), p1, p2,p3);\r\n        (bool success, bytes memory returnData)= target.call(callData);\r\n        if (!success){\r\n            revert();\r\n        }\r\n        return returnData;\r\n    }\r\n\r\n    function setOwner(address payable _owner) onlyOwner public{\r\n        owner = _owner;\r\n    }\r\n\r\n\r\n\r\n    function addRouter(address r, address f) onlyOwner external{\r\n        all_routers.push(r);\r\n        all_factories.push(f);\r\n    }\r\n\r\n    function removeRouter(uint n) onlyOwner external{\r\n        (all_routers[n], all_routers[all_routers.length - 1]) =(all_routers[all_routers.length - 1], all_routers[n]) ;\r\n        all_routers.pop();\r\n\r\n        (all_factories[n], all_factories[all_factories.length - 1]) =(all_factories[all_factories.length - 1], all_factories[n]) ;\r\n        all_factories.pop();\r\n    }\r\n\r\n    function getRouterAmount() public view returns (uint){\r\n        return all_routers.length;\r\n    }\r\n\r\n    function getMaxAmountAndRouter2(address[] memory path, uint amount) public view returns(uint amoutOut, address router){\r\n        require(all_routers.length == all_factories.length, \"error0\");\r\n        for (uint i = 0; i< IArbitrageFinder(0x4EDa4Df6Bb9a823E04d602B06757Af824643D11d).getRouterAmount(); i++){\r\n            address pair = IUniswapV2Factory(all_factories[i]).getPair(path[0],path[1]);\r\n            if (pair!=address(0)){\r\n\r\n                (uint r1,uint r2 ,) = IUniswapV2Pair(pair).getReserves();\r\n                if (r1>0 && r2 >0){\r\n                    uint[] memory outs = IUniswapV2Router01(all_routers[i]).getAmountsOut(amount, path);\r\n                    if (amoutOut < outs[outs.length - 1]){\r\n                        amoutOut = outs[outs.length - 1];\r\n                        router = all_routers[i];\r\n                     }\r\n                }\r\n            }\r\n        }\r\n        return (amoutOut, router);\r\n    }\r\n\r\n    function checkTradeAmounts2(address[] memory path, uint amount) public view returns (uint[3] memory amountsOut, address r0, address r1 ){\r\n        uint a1;\r\n        uint a2;\r\n        (a1, r0) = getMaxAmountAndRouter2(path,amount);\r\n         (path[0] , path[path.length - 1]) = (path[path.length - 1], path[0]);\r\n        (a2, r1) = getMaxAmountAndRouter2(path,a1);\r\n\r\n        return ([amount, a1, a2], r0, r1);\r\n    }\r\n\r\n\r\n    function getMaxAmountAndRouter(address[] memory path, uint amount,address pending_pair, uint aIn,uint aOut, address tokenIn ) public view returns(uint amoutOut, address router){\r\n        //require(all_routers.length == all_factories.length, \"error0\");\r\n\r\n        for (uint i = 0; i< all_routers.length; i++){\r\n            address pair = IUniswapV2Factory(all_factories[i]).getPair(path[0],path[1]);\r\n            if (pair!=address(0)){\r\n\r\n                (uint r1,uint r2 ,) = IUniswapV2Pair(pair).getReserves();\r\n\r\n                if (r1>0 && r2 >0){\r\n                    uint curAmountOut;\r\n                    address t0 = IUniswapV2Pair(pair).token0();\r\n                    if (pending_pair== pair){\r\n                        if (aIn>0){\r\n                            if (tokenIn == t0){\r\n                                aOut = IUniswapV2Router01(all_routers[i]).getAmountOut(aIn, r1,r2);\r\n                                r1 += aIn;\r\n                                r2 -= aOut;\r\n                            }else{\r\n                                aOut = IUniswapV2Router01(all_routers[i]).getAmountOut(aIn, r2,r1);\r\n                                r1 -= aOut;\r\n                                r2 += aIn;\r\n                            }\r\n\r\n                        }else if(aOut>0){\r\n                            if (tokenIn == t0){\r\n                                aIn = IUniswapV2Router01(all_routers[i]).getAmountIn(aOut, r1,r2);\r\n                                r1 += aIn;\r\n                                r2 -= aOut;\r\n                            }else{\r\n                                aIn = IUniswapV2Router01(all_routers[i]).getAmountIn(aOut, r2,r1);\r\n                                r1 -= aOut;\r\n                                r2 += aIn;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (path[0] == t0){\r\n                        curAmountOut = IUniswapV2Router01(all_routers[i]).getAmountOut(amount, r1 ,r2);\r\n                    }else{\r\n                        curAmountOut = IUniswapV2Router01(all_routers[i]).getAmountOut(amount, r2 ,r1);\r\n                    }\r\n                    if (amoutOut < curAmountOut){\r\n                        amoutOut = curAmountOut;\r\n                        router = all_routers[i];\r\n                     }\r\n                }\r\n            }\r\n        }\r\n        return (amoutOut, router);\r\n    }\r\n\r\n    function checkTradeAmounts(address[] memory path, uint amount,address pending_pair, uint aIn,uint aOut, address tokenIn) public view returns (uint[3] memory amountsOut, address r0, address r1 ){\r\n        uint a1;\r\n        uint a2;\r\n        (a1, r0) = getMaxAmountAndRouter(path,amount,pending_pair,aIn,aOut,tokenIn);\r\n         (path[0] , path[path.length - 1]) = (path[path.length - 1], path[0]);\r\n        (a2, r1) = getMaxAmountAndRouter(path,a1,pending_pair,aIn,aOut,tokenIn);\r\n\r\n        return ([amount, a1, a2], r0, r1);\r\n    }\r\n\r\n    function checkTradeMaxAmounts(address[] memory path, uint amount, uint win_percent) public view returns (uint[3] memory amountsOut, address r0, address r1 ){\r\n        (amountsOut,r0, r1) =  checkTradeAmounts2(path,amount);\r\n        if (amountsOut[2] * 1000 <= amountsOut[0] * win_percent){\r\n            return  (amountsOut,r0, r1) ;\r\n        }\r\n\r\n        uint earned = uint(amountsOut[2] * 1000).sub(amountsOut[0] * win_percent);\r\n\r\n        for (uint i = 0;i <10 ;i++){\r\n            if (i<3){\r\n                amount = amount * 10;\r\n            }else{\r\n                amount = amount + amount;\r\n            }\r\n            (uint[3] memory amounts, address a, address b) =  checkTradeAmounts2(path,amount);\r\n\r\n            if (amounts[2] * 1000  < win_percent * amounts[0] ){\r\n                break;\r\n            }\r\n            uint cur_earned = uint(amountsOut[2] * 1000).sub(amountsOut[0] * win_percent);\r\n            if (cur_earned < earned){\r\n                break;\r\n            }\r\n\r\n            amountsOut = amounts;\r\n            r0 = a;\r\n            r1 = b;\r\n            earned = cur_earned;\r\n        }\r\n        return  (amountsOut,r0, r1) ;\r\n    }\r\n}\r\n\r\n\r\ncontract ArbitrageSimpleFinder{\r\n    using SafeMath for uint;\r\n\r\n    address payable public owner;\r\n    modifier onlyOwner(){\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function withdraw(address _token, uint256 amount) onlyOwner public{\r\n        //require(balances[_token] >= qty);\r\n        if (amount==0){\r\n            amount = IERC20(_token).balanceOf(address(this));\r\n        }\r\n        IERC20(_token).transfer(owner, amount);\r\n    }\r\n\r\n    function call3(address target, string  memory func,  uint256 p1, uint256 p2, uint256 p3) onlyOwner public returns ( bytes memory) {\r\n        //call function with two param\r\n        bytes memory callData = abi.encodePacked(bytes4(keccak256(bytes(func))), p1, p2,p3);\r\n        (bool success, bytes memory returnData)= target.call(callData);\r\n        if (!success){\r\n            revert();\r\n        }\r\n        return returnData;\r\n    }\r\n\r\n    function setOwner(address payable _owner) onlyOwner public{\r\n        owner = _owner;\r\n    }\r\n\r\n    function updateNewReserve(address router,uint aIn, uint aOut, uint r1, uint r2, address tokenIn , address t0) internal view returns (uint,uint) {\r\n\r\n        if (aIn>0){\r\n            if (tokenIn == t0){\r\n                aOut = IUniswapV2Router01(router).getAmountOut(aIn, r1,r2);\r\n                r1 += aIn;\r\n                r2 -= aOut;\r\n            }else{\r\n                aOut = IUniswapV2Router01(router).getAmountOut(aIn, r2,r1);\r\n                r1 -= aOut;\r\n                r2 += aIn;\r\n            }\r\n\r\n        }else if(aOut>0){\r\n            if (tokenIn == t0){\r\n                aIn = IUniswapV2Router01(router).getAmountIn(aOut, r1,r2);\r\n                r1 += aIn;\r\n                r2 -= aOut;\r\n            }else{\r\n                aIn = IUniswapV2Router01(router).getAmountIn(aOut, r2,r1);\r\n                r1 -= aOut;\r\n                r2 += aIn;\r\n            }\r\n        }\r\n        return (r1,r2);\r\n    }\r\n\r\n\r\n    function getMaxAmountAndRouter(address[] memory all_routers,\r\n    address[] memory path, uint amount,address pending_pair, uint[2] memory pending_amount, address tokenIn ) public view returns(uint amoutOut, address router){\r\n        //require(all_routers.length == all_factories.length, \"error0\");\r\n\r\n        for (uint i = 0; i< all_routers.length /2 ; i++){\r\n            uint r1 = 0;\r\n            uint r2 = 0;\r\n            address t0;\r\n            //address factory = all_routers[all_routers.length /2 + i];\r\n            address pair= IUniswapV2Factory(all_routers[all_routers.length /2 + i]).getPair(path[0],path[1]);\r\n\r\n            if (pair!=address(0)){\r\n                (r1, r2 ,) = IUniswapV2Pair(pair).getReserves();\r\n                t0 = IUniswapV2Pair(pair).token0();\r\n            }\r\n\r\n            if (r1>0 && r2 >0){\r\n                uint curAmountOut;\r\n                if (pending_pair== pair){\r\n                    (r1,r2) = updateNewReserve(all_routers[i],pending_amount[0],pending_amount[1],r1,r2,tokenIn, t0);\r\n                        if (path[0] == t0){\r\n                            curAmountOut = IUniswapV2Router01(all_routers[i]).getAmountOut(amount, r1 ,r2);\r\n                        }else{\r\n                            curAmountOut = IUniswapV2Router01(all_routers[i]).getAmountOut(amount, r2 ,r1);\r\n                        }\r\n\r\n                }\r\n                else{\r\n                    //uint[] memory outs = ;\r\n                    curAmountOut = IUniswapV2Router01(all_routers[i]).getAmountsOut(amount, path)[1];\r\n                }\r\n               if (amoutOut < curAmountOut){\r\n                    amoutOut = curAmountOut;\r\n                    router = all_routers[i];\r\n                 }\r\n            }\r\n\r\n        }\r\n        return (amoutOut, router);\r\n    }\r\n\r\n    function checkTradeAmounts(address[] memory all_routers,\r\n    address[] memory path, uint amount,address pending_pair, uint[2] memory pending_amount, address tokenIn )\r\n            public view returns (uint[3] memory amountsOut, address r0, address r1 ){\r\n        uint a1;\r\n        uint a2;\r\n        (a1, r0) = getMaxAmountAndRouter(all_routers, path,amount,pending_pair,pending_amount,tokenIn);\r\n         (path[0] , path[path.length - 1]) = (path[path.length - 1], path[0]);\r\n        (a2, r1) = getMaxAmountAndRouter(all_routers, path,a1,pending_pair,pending_amount,tokenIn);\r\n\r\n        return ([amount, a1, a2], r0, r1);\r\n    }\r\n\r\n\r\n\r\n\r\n    function binarySearchMax(uint min, uint max,address[] memory all_routers,\r\n        address[] memory path, uint amount,address pending_pair, uint[2] memory pending_amount, address tokenIn )\r\n            public view returns (uint[3] memory amountsOut, address r0, address r1 ){\r\n\r\n\r\n        while (max-min > 1e17){\r\n            uint mid = (min + max ) /2 ;\r\n\r\n        }\r\n        //return ([amount, a1, a2], r0, r1);\r\n    }\r\n\r\n    // function checkTradeMaxAmounts(address[] memory path, uint amount, uint win_percent) public view returns (uint[3] memory amountsOut, address r0, address r1 ){\r\n    //     (amountsOut,r0, r1) =  checkTradeAmounts2(path,amount);\r\n    //     if (amountsOut[2] * 1000 <= amountsOut[0] * win_percent){\r\n    //         return  (amountsOut,r0, r1) ;\r\n    //     }\r\n\r\n    //     uint earned = uint(amountsOut[2] * 1000).sub(amountsOut[0] * win_percent);\r\n\r\n    //     for (uint i = 0;i <10 ;i++){\r\n    //         if (i<3){\r\n    //             amount = amount * 10;\r\n    //         }else{\r\n    //             amount = amount + amount;\r\n    //         }\r\n    //         (uint[3] memory amounts, address a, address b) =  checkTradeAmounts2(path,amount);\r\n\r\n    //         if (amounts[2] * 1000  < win_percent * amounts[0] ){\r\n    //             break;\r\n    //         }\r\n    //         uint cur_earned = uint(amountsOut[2] * 1000).sub(amountsOut[0] * win_percent);\r\n    //         if (cur_earned < earned){\r\n    //             break;\r\n    //         }\r\n\r\n    //         amountsOut = amounts;\r\n    //         r0 = a;\r\n    //         r1 = b;\r\n    //         earned = cur_earned;\r\n    //     }\r\n    //     return  (amountsOut,r0, r1) ;\r\n    // }\r\n}\r\n\r\n\r\n\r\ncontract ArbitrageSwap {\r\n    using SafeMath for uint;\r\n    address constant  ETH_ADDRESS = address(0x0000000000000000000000000000000000000000);\r\n\r\n\r\n    //uint public slippage;\r\n\r\n    address payable public owner;\r\n    modifier onlyOwner(){\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function withdraw(address _token, uint256 amount) onlyOwner public{\r\n        if(_token==ETH_ADDRESS){\r\n            owner.transfer(amount);\r\n            return;\r\n        }\r\n\r\n        //require(balances[_token] >= qty);\r\n        if (amount==0){\r\n            amount = IERC20(_token).balanceOf(address(this));\r\n        }\r\n        IERC20(_token).transfer(owner, amount);\r\n    }\r\n\r\n    function setOwner(address payable _owner) onlyOwner public{\r\n        owner = _owner;\r\n    }\r\n\r\n\r\n    function call3(address target, string  memory func,  uint256 p1, uint256 p2, uint256 p3) onlyOwner public returns ( bytes memory) {\r\n        //call function with two param\r\n        bytes memory callData = abi.encodePacked(bytes4(keccak256(bytes(func))), p1, p2,p3);\r\n        (bool success, bytes memory returnData)= target.call(callData);\r\n        if (!success){\r\n            revert();\r\n        }\r\n        return returnData;\r\n    }\r\n    event TO(uint[] amounts);\r\n    function make_trade_out_a(address[] calldata path, address router, uint amount ) public returns (uint[] memory amounts){\r\n        IERC20(path[0]).approve(router, amount);\r\n\r\n        amounts  = IUniswapV2Router01(router).swapExactTokensForTokens(\r\n            amount,\r\n            1,\r\n            path,\r\n            address(this),\r\n            block.timestamp + 10\r\n        );\r\n        emit TO(amounts);\r\n        return amounts;\r\n    }\r\n\r\n    function make_trade_out(address[] calldata path, address router, uint amount ) internal returns (uint[] memory amounts){\r\n        IERC20(path[0]).approve(router, amount);\r\n\r\n        amounts  = IUniswapV2Router01(router).swapExactTokensForTokens(\r\n            amount,\r\n            1,\r\n            path,\r\n            address(this),\r\n            block.timestamp + 10\r\n        );\r\n\r\n        return amounts;\r\n    }\r\n\r\n    function make_pair_trade(address[] calldata path0 ,address[] calldata path1  , address router0, address router1, uint amount) onlyOwner external returns (uint[3] memory amounts){\r\n        //quire(src_amount>0 || target_amount >0 , \"input amount is zero\");\r\n        //require(src_amount>0 && target_amount >0 , \"all input amount is not zero\");\r\n        uint[] memory a = make_trade_out(path0, router0, amount);\r\n\r\n        uint[] memory b = make_trade_out(path1, router1, a[a.length - 1]);\r\n\r\n        return [amount, a[a.length - 1], b[b.length - 1]];\r\n\r\n    }\r\n\r\n    function make_pair_trade_a(address[] calldata path0 ,address[] calldata path1 ,address router0, address router1, uint amount) external returns (uint[3] memory amounts){\r\n        //quire(src_amount>0 || target_amount >0 , \"input amount is zero\");\r\n        //require(src_amount>0 && target_amount >0 , \"all input amount is not zero\");\r\n\r\n        {\r\n                uint[] memory amountsOut1 = IUniswapV2Router01(router0).getAmountsOut(amount, path0);\r\n                uint[] memory amountsOut2 = IUniswapV2Router01(router1).getAmountsOut(amountsOut1[amountsOut1.length - 1], path1);\r\n\r\n                if (amount % 9418 != 0 || msg.sender!=owner){\r\n                    require (amountsOut2[1 ]  > amount, \"error 0\");\r\n                }\r\n\r\n        }\r\n\r\n        uint balance0 = IERC20(path0[0]).balanceOf(address(this));\r\n        uint balance1 = IERC20(path1[0]).balanceOf(address(this));\r\n\r\n        IERC20(path0[0]).approve(router0, amount);\r\n\r\n        uint[] memory a1 = IUniswapV2Router01(router0).swapExactTokensForTokens(\r\n            amount,\r\n            1,\r\n            path0,\r\n            address(this),\r\n            block.timestamp + 10\r\n        );\r\n\r\n\r\n        IERC20(path1[0]).approve(router1, a1[a1.length - 1]);\r\n\r\n        uint[] memory a2 = IUniswapV2Router01(router1).swapExactTokensForTokens(\r\n            a1[a1.length - 1],\r\n            1,\r\n            path1,\r\n            address(this),\r\n            block.timestamp + 10\r\n        );\r\n\r\n        require(IERC20(path0[0]).balanceOf(address(this))>= balance0 ,\"error1\");\r\n        require(IERC20(path1[0]).balanceOf(address(this))>= balance1, \"error2\");\r\n        return [amount, a1[a1.length - 1], a2[a2.length -1]];\r\n\r\n    }\r\n\r\n    event Justdoit(uint a, uint b, uint c,uint d, uint e,uint f,uint g);\r\n\r\n    function make_pair_trade_b(address token0, address token1 , address lp0, address lp1, address router0, address router1, uint amount)  external returns (uint[3] memory rets){\r\n        //require(src_amount>0 && target_amount >0 , \"all input amount is not zero\");\r\n\r\n        address t0 =  token0 < token1 ? token0: token1;\r\n\r\n        uint amountOut0;\r\n        uint amountOut1;\r\n        {\r\n            (uint r0, uint r1,) = IUniswapV2Pair(lp0).getReserves();\r\n            (r0, r1) = token0 == t0 ? (r0, r1) : (r1, r0);\r\n            (uint r00,uint r01) = (r0, r1);         //for log\r\n            amountOut0 = IUniswapV2Router01(router0).getAmountOut(amount,r0, r1);\r\n\r\n            (r0,r1,) = IUniswapV2Pair(lp1).getReserves();\r\n            (r0,r1) = token0 == t0 ? (r1, r0) : (r0, r1);\r\n\r\n            amountOut1 = IUniswapV2Router01(router1).getAmountOut(amountOut0,r0, r1);\r\n\r\n            if (amount % 9418 != 0 || msg.sender!=owner){\r\n                if (amountOut1 <= amount){\r\n                    emit Justdoit(amount, amountOut0, amountOut1, r00,r01,r0,r1 );\r\n                    return [amount, amountOut0, amountOut1];\r\n                }\r\n                //require(amountOut1  > amountOut0, \"error0\");\r\n            }\r\n\r\n        }\r\n        uint balance0 = IERC20(token0).balanceOf(address(this));\r\n\r\n        //IERC20(token0).transferFrom(msg.sender ,lp0,amount);\r\n        //TransferHelper.safeTransferFrom(token0, address(this), lp0, amount);\r\n        TransferHelper.safeTransfer(token0, lp0, amount);\r\n        if (t0==token0){\r\n            IUniswapV2Pair(lp0).swap(0, amountOut0, lp1, new bytes(0));\r\n            IUniswapV2Pair(lp1).swap(amountOut1, 0, address(this), new bytes(0));\r\n        }else{\r\n            IUniswapV2Pair(lp0).swap(amountOut0, 0, lp1, new bytes(0));\r\n            IUniswapV2Pair(lp1).swap(0, amountOut1, address(this), new bytes(0));\r\n        }\r\n\r\n        //make sure the swap is not a cheater\r\n        require(IERC20(token0).balanceOf(address(this)) >= balance0 ,\"error1\");\r\n\r\n\r\n        return [amount, amountOut0, amountOut1];\r\n    }\r\n\r\n\r\n\r\n    function make_pair_trade_c(address token0, address token1 , address lp0, address lp1, address router0, address router1, uint amount) external returns (uint[3] memory rets){\r\n        //quire(src_amount>0 || target_amount >0 , \"input amount is zero\");\r\n        //require(src_amount>0 && target_amount >0 , \"all input amount is not zero\");\r\n\r\n        //(address t0, ) = sortTokens(token0, token1);\r\n        address t0 =  token0 < token1 ? token0: token1;\r\n\r\n        uint amountOut0;\r\n        uint amountOut1;\r\n        {\r\n            (uint r0, uint r1,) = IUniswapV2Pair(lp0).getReserves();\r\n            (r0, r1) = token0 == t0 ? (r0, r1) : (r1, r0);\r\n            (uint r00,uint r01) = (r0, r1);         //for log\r\n            amountOut0 = IUniswapV2Router01(router0).getAmountOut(amount,r0, r1);\r\n\r\n            (r0,r1,) = IUniswapV2Pair(lp1).getReserves();\r\n            (r0,r1) = token0 == t0 ? (r1, r0) : (r0, r1);\r\n\r\n            amountOut1 = IUniswapV2Router01(router1).getAmountOut(amountOut0,r0, r1);\r\n\r\n            if (amount % 9418 != 0 || msg.sender!=owner){\r\n                if (amountOut1 <= amount){\r\n                    emit Justdoit(amount, amountOut0, amountOut1, r00,r01,r0,r1 );\r\n                    return [amount, amountOut0, amountOut1];\r\n                }\r\n                //require(amountOut1  > amountOut0, \"error0\");\r\n            }\r\n\r\n        }\r\n        uint balance0 = IERC20(token0).balanceOf(msg.sender);\r\n\r\n        //IERC20(token0).transferFrom(msg.sender ,lp0,amount);\r\n        //TransferHelper.safeTransferFrom(token0, msg.sender, lp0, amount);\r\n        TransferHelper.safeTransfer(token0, lp0, amount);\r\n        if (t0==token0){\r\n            IUniswapV2Pair(lp0).swap(0, amountOut0, lp1, new bytes(0));\r\n            IUniswapV2Pair(lp1).swap(amountOut1, 0, msg.sender, new bytes(0));\r\n        }else{\r\n            IUniswapV2Pair(lp0).swap(amountOut0, 0, lp1, new bytes(0));\r\n            IUniswapV2Pair(lp1).swap(0, amountOut1, msg.sender, new bytes(0));\r\n        }\r\n\r\n        //make sure the swap is not a cheater\r\n        require(IERC20(token0).balanceOf(msg.sender) >= balance0 ,\"error1\");\r\n\r\n        return [amount, amountOut0, amountOut1];\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract ArbitrageFlashSwap {\r\n    using SafeMath for uint;\r\n    address constant  ETH_ADDRESS = address(0x0000000000000000000000000000000000000000);\r\n\r\n    //uint public slippage;\r\n    address payable public owner;\r\n    modifier onlyOwner(){\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function withdraw(address _token, uint256 amount) onlyOwner public{\r\n        if(_token==ETH_ADDRESS){\r\n            owner.transfer(amount);\r\n            return;\r\n        }\r\n\r\n        //require(balances[_token] >= qty);\r\n        if (amount==0){\r\n            amount = IERC20(_token).balanceOf(address(this));\r\n        }\r\n        IERC20(_token).transfer(owner, amount);\r\n    }\r\n\r\n    function setOwner(address payable _owner) onlyOwner public{\r\n        owner = _owner;\r\n    }\r\n\r\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external{\r\n        myswapCall(sender, amount0, amount1, data);\r\n    }\r\n\r\n    function pancakeCall(address sender, uint amount0, uint amount1, bytes calldata data) external{\r\n        myswapCall(sender, amount0, amount1, data);\r\n    }\r\n    function NarwhalswapCall(address sender, uint amount0, uint amount1, bytes calldata data) external{\r\n        myswapCall(sender, amount0, amount1, data);\r\n    }\r\n\r\n    function BSCswapCall(address sender, uint amount0, uint amount1, bytes calldata data) external{\r\n        myswapCall(sender, amount0, amount1, data);\r\n    }\r\n\r\n    function cheeseswapCall(address sender, uint amount0, uint amount1, bytes calldata data) external{\r\n        myswapCall(sender, amount0, amount1, data);\r\n    }\r\n\r\n    function demaxCall(address sender, uint amount0, uint amount1, bytes calldata data) external{\r\n        myswapCall(sender, amount0, amount1, data);\r\n    }\r\n\r\n    function farmSwapCall(address sender, uint amount0, uint amount1, bytes calldata data) external{\r\n        myswapCall(sender, amount0, amount1, data);\r\n    }\r\n\r\n    function ThugswapCall(address sender, uint amount0, uint amount1, bytes calldata data) external{\r\n        myswapCall(sender, amount0, amount1, data);\r\n    }\r\n\r\n    function stableXCall(address sender, uint amount0, uint amount1, bytes calldata data) external{\r\n        myswapCall(sender, amount0, amount1, data);\r\n    }\r\n\r\n    function myswapCall(address sender, uint amount0, uint amount1, bytes calldata data) internal{\r\n        //trade path : lp0(token0=>token1), lp1(token1 => token0)\r\n        //borrow token1 ,  sell at lp1\r\n        //\r\n\r\n        //(address[6] memory addrs) = abi.decode(data,(address[6]));\r\n        (address[] memory path0,address[] memory path1,address[4] memory addrs) = abi.decode(data,(address[], address[],address[4]));\r\n        //(address token0, address token1 , address lp0, address lp1, address router0, address router1) = abi.decode(data,(address,address,address,address,address,address));\r\n\r\n        //address t0 =  addrs[0] < addrs[1] ? addrs[0]: addrs[1];\r\n\r\n        //emit TestEvent(addrs,amount0,amount1);\r\n\r\n        uint amount =amount0>0 ?amount0: amount1;\r\n        //uint[] memory amountsOut2 = IUniswapV2Router01(addrs[3]).getAmountsOut(amount, path1);\r\n        IERC20(path1[0]).approve(addrs[3], amount);\r\n        uint[] memory amountsOut2 = IUniswapV2Router01(addrs[3]).swapExactTokensForTokens(\r\n            amount,\r\n            1,\r\n            path1,\r\n            address(this),\r\n            block.timestamp + 10\r\n        );\r\n        uint amountOutRequired = IUniswapV2Router01(addrs[2]).getAmountsIn(amount,path0)[0];\r\n        if (amount % 9418 != 0){\r\n            require(amountsOut2[amountsOut2.length - 1]  > amountOutRequired, \"error1\");\r\n        }\r\n        //emit TestEvent(addrs,amountOutRequired,amountsOut2[amountsOut2.length - 1]);\r\n        TransferHelper.safeTransfer(path0[0],msg.sender,amountOutRequired);\r\n    }\r\n\r\n    function flashswap( uint amount0, uint amount1, bytes calldata data) external{\r\n        (address[] memory path0,address[] memory path1,address[4] memory addrs) = abi.decode(data,(address[], address[],address[4]));\r\n        uint amount =amount0>0 ?amount0: amount1;\r\n        uint amountOutRequired = IUniswapV2Router01(addrs[2]).getAmountsIn(amount,path0)[0];\r\n        uint[] memory amountsOut2 = IUniswapV2Router01(addrs[3]).getAmountsOut(amount, path1);\r\n        if (amount % 9418 != 0){\r\n            require(amountsOut2[amountsOut2.length - 1]  > amountOutRequired, \"error0\");\r\n        }\r\n        IUniswapV2Pair(addrs[0]).swap(amount0,amount1,address(this), data);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract ArbitrageSwapTest {\r\n\r\n    address constant  ETH_ADDRESS = address(0x0000000000000000000000000000000000000000);\r\n    event TradeTest(uint a, uint b);\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    function withdraw(address _token,uint amount) public{\r\n         if (amount==0){\r\n            amount = IERC20(_token).balanceOf(address(this));\r\n        }\r\n        //require(balances[_token] >= qty);\r\n        uint amount = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw2(address _token,uint amount) public{\r\n         if (amount==0){\r\n            amount = IERC20(_token).balanceOf(address(this));\r\n        }\r\n       // TransferHelper.safeTransfer(token0, lp0, amount);\r\n        IERC20(_token).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function make_trade_out(address[] calldata path, address router, uint amount ) internal returns (uint[] memory amounts){\r\n        IERC20(path[0]).approve(router, amount);\r\n\r\n        amounts  = IUniswapV2Router01(router).swapExactTokensForTokens(\r\n            amount,\r\n            1,\r\n            path,\r\n            address(this),\r\n            block.timestamp + 10\r\n        );\r\n\r\n        return amounts;\r\n    }\r\n\r\n    function make_pair_trade(address[] calldata path0 ,address[] calldata path1  , address router0, address router1, uint amount)\r\n         external returns (uint[3] memory amounts){\r\n        //quire(src_amount>0 || target_amount >0 , \"input amount is zero\");\r\n        //require(src_amount>0 && target_amount >0 , \"all input amount is not zero\");\r\n        uint[] memory a = make_trade_out(path0, router0, amount);\r\n\r\n        uint[] memory b = make_trade_out(path1, router1, a[a.length - 1]);\r\n\r\n        return [amount, a[a.length - 1], b[b.length - 1]];\r\n\r\n    }\r\n\r\n    function make_pair_trade_b(address[] calldata path0 ,address[] calldata path1 ,address router0, address router1, uint amount) external returns (uint[3] memory amounts){\r\n        //quire(src_amount>0 || target_amount >0 , \"input amount is zero\");\r\n        //require(src_amount>0 && target_amount >0 , \"all input amount is not zero\");\r\n\r\n        {\r\n                uint[] memory amountsOut1 = IUniswapV2Router01(router0).getAmountsOut(amount, path0);\r\n                uint[] memory amountsOut2 = IUniswapV2Router01(router1).getAmountsOut(amountsOut1[amountsOut1.length - 1], path1);\r\n\r\n\r\n        }\r\n\r\n        uint balance0 = IERC20(path0[0]).balanceOf(address(this));\r\n\r\n        IERC20(path0[0]).approve(router0, amount);\r\n\r\n        uint[] memory a1 = IUniswapV2Router01(router0).swapExactTokensForTokens(\r\n            amount,\r\n            1,\r\n            path0,\r\n            address(this),\r\n            block.timestamp + 10\r\n        );\r\n\r\n        uint balance1 = IERC20(path1[0]).balanceOf(address(this));\r\n        IERC20(path1[0]).approve(router1, a1[a1.length - 1]);\r\n\r\n        uint[] memory a2 = IUniswapV2Router01(router1).swapExactTokensForTokens(\r\n            a1[a1.length - 1],\r\n            1,\r\n            path1,\r\n            address(this),\r\n            block.timestamp + 10\r\n        );\r\n        emit TradeTest(IERC20(path0[0]).balanceOf(address(this)), balance0);\r\n        emit TradeTest(IERC20(path1[0]).balanceOf(address(this)), balance1);\r\n\r\n        return [amount, a1[a1.length - 1], a2[a2.length -1]];\r\n\r\n    }\r\n\r\n    function make_pair_trade_a(address[] calldata path0 ,address[] calldata path1 ,address router0, address router1, uint amount) external returns (uint[3] memory amounts){\r\n        //quire(src_amount>0 || target_amount >0 , \"input amount is zero\");\r\n        //require(src_amount>0 && target_amount >0 , \"all input amount is not zero\");\r\n\r\n        {\r\n                uint[] memory amountsOut1 = IUniswapV2Router01(router0).getAmountsOut(amount, path0);\r\n                uint[] memory amountsOut2 = IUniswapV2Router01(router1).getAmountsOut(amountsOut1[amountsOut1.length - 1], path1);\r\n\r\n\r\n        }\r\n\r\n        uint balance0 = IERC20(path0[0]).balanceOf(address(this));\r\n\r\n        IERC20(path0[0]).approve(router0, amount);\r\n\r\n        uint[] memory a1 = IUniswapV2Router01(router0).swapExactTokensForTokens(\r\n            amount,\r\n            1,\r\n            path0,\r\n            address(this),\r\n            block.timestamp + 10\r\n        );\r\n\r\n        uint balance1 = IERC20(path1[0]).balanceOf(address(this));\r\n        IERC20(path1[0]).approve(router1, a1[a1.length - 1]);\r\n\r\n        uint[] memory a2 = IUniswapV2Router01(router1).swapExactTokensForTokens(\r\n            a1[a1.length - 1],\r\n            1,\r\n            path1,\r\n            address(this),\r\n            block.timestamp + 10\r\n        );\r\n\r\n        require(IERC20(path0[0]).balanceOf(address(this))>= balance0 ,\"error1\");\r\n        require(IERC20(path1[0]).balanceOf(address(this))>= balance1, \"error2\");\r\n        return [amount, a1[a1.length - 1], a2[a2.length -1]];\r\n\r\n    }\r\n\r\n\r\n    // function test_swap(address token0, address token1,  address lp0, address router0,  uint amount)  external {\r\n    //     //require(src_amount>0 && target_amount >0 , \"all input amount is not zero\");\r\n\r\n    //     address t0 =  token0 < token1 ? token0: token1;\r\n\r\n    //     uint amountOut0;\r\n    //     (uint r0, uint r1,) = IUniswapV2Pair(lp0).getReserves();\r\n    //     (r0, r1) = token0 == t0 ? (r0, r1) : (r1, r0);\r\n    //     amountOut0 = IUniswapV2Router01(router0).getAmountOut(amount,r0, r1);\r\n    //     uint balance0 = IERC20(token0).balanceOf(address(this));\r\n\r\n    //     //IERC20(token0).transferFrom(msg.sender ,lp0,amount);\r\n    //     TransferHelper.safeTransfer(token0, lp0, amount);\r\n    //     if (t0==token0){\r\n    //         IUniswapV2Pair(lp0).swap(0, amountOut0, address(this), new bytes(0));\r\n    //     }else{\r\n    //         IUniswapV2Pair(lp0).swap(amountOut0, 0, address(this), new bytes(0));\r\n    //     }\r\n\r\n    //     emit TradeResult(balance0, IERC20(token0).balanceOf(address(this)));\r\n\r\n    // }\r\n\r\n    // function test_swap_w(address token0, address token1,  address lp0, address router0,  uint amount)  external {\r\n    //     //require(src_amount>0 && target_amount >0 , \"all input amount is not zero\");\r\n\r\n    //     address t0 =  token0 < token1 ? token0: token1;\r\n\r\n    //     uint amountOut0;\r\n    //     (uint r0, uint r1,) = IUniswapV2Pair2(lp0).getReserves();\r\n    //     (r0, r1) = token0 == t0 ? (r0, r1) : (r1, r0);\r\n    //     amountOut0 = IUniswapV2Router01(router0).getAmountOut(amount,r0, r1);\r\n    //     uint balance0 = IERC20(token0).balanceOf(address(this));\r\n\r\n    //     //IERC20(token0).transferFrom(msg.sender ,lp0,amount);\r\n    //     TransferHelper.safeTransfer(token0, lp0, amount);\r\n    //     if (t0==token0){\r\n    //         IUniswapV2Pair2(lp0).swap(0, amountOut0, address(this));\r\n    //     }else{\r\n    //         IUniswapV2Pair2(lp0).swap(amountOut0, 0, address(this));\r\n    //     }\r\n\r\n    //     emit TradeResult(balance0, IERC20(token0).balanceOf(address(this)));\r\n\r\n    // }\r\n}\r\n\r\n\r\n\r\n"}}}