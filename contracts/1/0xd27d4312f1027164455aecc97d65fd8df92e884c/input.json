{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "efil.sol": {
      "content": "// SPDX-License-Identifier: PRIVATE\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/utils/Context.sol\";\nimport \"github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/token/ERC777/IERC777.sol\";\nimport \"github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/token/ERC777/IERC777Recipient.sol\";\nimport \"github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/token/ERC777/IERC777Sender.sol\";\nimport \"github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/token/ERC20/IERC20.sol\";\nimport \"github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/math/SafeMath.sol\";\nimport \"github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/utils/ReentrancyGuard.sol\";\nimport \"github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/utils/Address.sol\";\nimport \"github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/introspection/IERC1820Registry.sol\";\n\ncontract CFil is Context, IERC777, IERC20, ReentrancyGuard, IERC777Recipient {\n  \n  //////////////////// using\n  using SafeMath for uint256;\n  using Address for address;\n\n  //////////////////// const\n  IERC1820Registry constant internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n  \n  // We inline the result of the following hashes because Solidity doesn't resolve them at compile time.\n  // See https://github.com/ethereum/solidity/issues/4024.\n\n  // keccak256(\"ERC777TokensSender\")\n  bytes32 constant private _TOKENS_SENDER_INTERFACE_HASH =\n    0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\n\n  // keccak256(\"ERC777TokensRecipient\")\n  bytes32 constant private _TOKENS_RECIPIENT_INTERFACE_HASH =\n    0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n\n  IERC777 CRFI;\n\n  uint256 constant calcDecimals = 1e18;\n  \n  //////////////////// for admin\n  address public superAdmin;\n  mapping(address => uint256) public admins;\n\n  // only effect erc20 interface.\n  // when erc777mode equal 0, the erc777 feature is disabled;\n  // when erc777mode equal 1, the erc777 feature is enabled by whitelist.\n  // when erc777 mode equal 2, the erc777 feature is disabled by blacklist.\n  // when erc777 mode equal 3, the erc777 feature is enabled;\n  // in whitelist or black list mode, whether \"from\" or \"to\" address in list, the feature would be effected.\n  enum Erc777ModeType {disabled, whitelist, blacklist, enabled}\n  Erc777ModeType public erc777Mode;\n  mapping(address=>bool) public blacklist;\n  mapping(address=>bool) public whitelist;\n  \n  //////////////////// for coin\n  mapping(address => uint256) private _balances;\n\n  uint256 private _totalSupply;\n\n  string private _name;\n  string private _symbol;\n\n  // ERC20-allowances\n  mapping (address => mapping (address => uint256)) private _allowances;\n\n  mapping(address=>bool) private _freezeAddress;\n\n  //////////////////// for operator  \n  // This isn't ever read from - it's only used to respond to the defaultOperators query.\n  address[] private _defaultOperatorsArray;\n\n  // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\n  mapping(address => bool) private _defaultOperators;\n\n  // For each account, a mapping of its operators and revoked default operators.\n  mapping(address => mapping(address => bool)) private _operators;\n  mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\n\n  //////////////////// for burn\n  uint256 public burnEFilRateCRFI;\n\n  //////////////////// constructor\n  /**\n   * @dev `defaultOperators` may be an empty array.\n   */\n  constructor(address[] memory defaultOperators_,\n              address CRFIAddr\n              )\n      {\n        require(CRFIAddr.isContract(), \"CRFIAddr error\");\n        CRFI = IERC777(CRFIAddr);\n        _name = \"CFIL\";\n        _symbol = \"CFIL\";\n\n        _defaultOperatorsArray = defaultOperators_;\n        for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {\n          _defaultOperators[_defaultOperatorsArray[i]] = true;\n        }\n\n        // register interfaces\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC777Token\"), address(this));\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC20Token\"), address(this));\n\n        superAdmin = msg.sender;\n\n        // init mode\n        ChangeMode(Erc777ModeType.disabled);\n        burnEFilRateCRFI = calcDecimals / 100;\n\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), _TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n      }\n\n  //////////////////// modifier\n  modifier IsAdmin() {\n    require(msg.sender == superAdmin || admins[msg.sender] == 1, \"only admin\");\n    _;\n  }\n\n  modifier IsSuperAdmin() {\n    require(superAdmin == msg.sender, \"only super admin\");\n    _;\n  }\n\n  modifier CheckFreeze(address addr){\n    require(_freezeAddress[addr] == false, \"account is freeze\");\n    _;\n  }\n\n  //////////////////// super admin func\n  function AddAdmin(address adminAddr)\n    public\n    IsSuperAdmin(){\n    require(admins[adminAddr] == 0, \"already add this admin\");\n    admins[adminAddr] = 1;\n  }\n\n  function DelAdmin(address adminAddr)\n    public\n    IsSuperAdmin(){\n    require(admins[adminAddr] == 1, \"this addr is not admin\");\n    admins[adminAddr] = 0;\n  }\n\n  function ChangeSuperAdmin(address suAdminAddr)\n    public\n    IsSuperAdmin(){\n    require(suAdminAddr != address(0x0), \"empty new super admin\");\n\n    superAdmin = suAdminAddr;\n  }\n\n  //////////////////// for admin func\n  function ChangeBurnEFilRateCRFI(uint256 rate)\n    public\n    IsAdmin(){\n\n    require(rate > 0, \"rate is zero\");\n\n    burnEFilRateCRFI = rate;\n  }\n  \n  \n  function AddBlackList(address[] memory addrs)\n    public\n    IsAdmin(){\n\n    for(uint256 i = 0; i < addrs.length; i++){\n      address addr = addrs[i];\n      if(blacklist[addr]){\n        continue;\n      }\n      blacklist[addr] = true;\n    }\n  }\n\n  function DelBlackList(address[] memory addrs)\n    public\n    IsAdmin(){\n\n    for(uint256 i = 0; i < addrs.length; i++){\n      address addr = addrs[i];\n      if(!blacklist[addr]){\n        continue;\n      }\n      blacklist[addr] = false;\n    }\n  }\n\n  function AddWhiteList(address[] memory addrs)\n    public\n    IsAdmin(){\n\n    for(uint256 i = 0; i < addrs.length; i++){\n      address addr = addrs[i];\n      if(whitelist[addr]){\n        continue;\n      }\n      whitelist[addr] = true;\n    }\n  }\n\n  function DelWhiteList(address[] memory addrs)\n    public\n    IsAdmin(){\n\n    for(uint256 i = 0; i < addrs.length; i++){\n      address addr = addrs[i];\n      if(!whitelist[addr] ){\n        continue;\n      }\n      whitelist[addr] = false;\n    }\n  }\n\n  function ChangeMode(Erc777ModeType mode)\n    public\n    IsAdmin(){\n\n    erc777Mode = mode;\n  }\n\n  function FreezeAddr(address[] memory addrs)\n    public\n    IsAdmin(){\n    for(uint256 i = 0; i < addrs.length; i++){\n      address addr = addrs[i];\n      if(_freezeAddress[addr] == true){\n        continue;\n      }\n      _freezeAddress[addr] = true;\n    }\n  }\n\n  function UnfreezeAddr(address[] memory addrs)\n    public\n    IsAdmin(){\n    for(uint256 i = 0; i < addrs.length; i++){\n      address addr = addrs[i];\n      if(_freezeAddress[addr] == false){\n        continue;\n      }\n      _freezeAddress[addr] = false;\n    }\n  }\n\n  //////////////////// event\n  event BurnedCRFIEfil(address indexed account,\n                     uint256 amount,\n                     bytes data);\n\n\n\n  //////////////////// interface implement\n  \n  /**\n   * @dev See {IERC777-name}.\n   */\n  function name() public view virtual override returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev See {IERC777-symbol}.\n   */\n  function symbol() public view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev See {ERC20-decimals}.\n   *\n   * Always returns 18, as per the\n   * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\n   */\n  function decimals() public pure virtual returns (uint8) {\n    return 18;\n  }\n\n  /**\n   * @dev See {IERC777-granularity}.\n   *\n   * This implementation always returns `1`.\n   */\n  function granularity() public view virtual override returns (uint256) {\n    return 1;\n  }\n\n  /**\n   * @dev See {IERC777-totalSupply}.\n   */\n  function totalSupply() public view virtual override(IERC20, IERC777) returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n   * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\n   */\n  function balanceOf(address tokenHolder) public view virtual override(IERC20, IERC777) returns (uint256) {\n    return _balances[tokenHolder];\n  }\n\n  function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData)\n    public\n    override\n    nonReentrant(){\n\n    require(userData.length > 0, \"no user data\");\n    require(msg.sender == address(CRFI), \"only receive CRFI\");\n    require(burnEFilRateCRFI > 0, \"burn efil rate CRFI is zero, should use burn directly\");\n\n\n    uint256 burnEFil = _calcBurnEFil(amount);\n    require(balanceOf(from) >= burnEFil, \"not enough efil\");\n\n    _burn(from, burnEFil, userData, operatorData);\n    CRFI.burn(amount, userData);\n\n    // for ensure call this method;\n    emit BurnedCRFIEfil(from, amount, userData);\n  }\n\n  /**\n   * @dev See {IERC777-send}.\n   *\n   * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\n   */\n  function send(address recipient, uint256 amount, bytes memory data) public virtual override  CheckFreeze(_msgSender()){\n    _send(_msgSender(), recipient, amount, data, \"\", true);\n  }\n\n  /**\n   * @dev See {IERC20-transfer}.\n   *\n   * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\n   * interface if it is a contract.\n   *\n   * Also emits a {Sent} event.\n   */\n  function transfer(address recipient, uint256 amount)\n    public\n    virtual\n    override\n    CheckFreeze(_msgSender())\n    returns (bool) {\n    require(recipient != address(0), \"ERC777: transfer to the zero address\");\n\n    address from = _msgSender();\n\n    bool erc777Enable = _enableERC777(from, recipient);\n\n    if(erc777Enable){\n      _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n    }\n\n    _move(from, from, recipient, amount, \"\", \"\", erc777Enable);\n\n    if(erc777Enable){\n      _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n    }\n\n    return true;\n  }\n\n  /**\n   * @dev See {IERC777-burn}.\n   *\n   * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\n   */\n  function burn(uint256 amount, bytes memory data) public virtual override  CheckFreeze(_msgSender()){\n    _burn(_msgSender(), amount, data, \"\");\n  }\n\n  /**\n   * @dev See {IERC777-isOperatorFor}.\n   */\n  function isOperatorFor(address operator, address tokenHolder) public view virtual override returns (bool) {\n    return operator == tokenHolder ||\n      (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n      _operators[tokenHolder][operator];\n  }\n\n  /**\n   * @dev See {IERC777-authorizeOperator}.\n   */\n  function authorizeOperator(address operator) public virtual override  {\n    require(_msgSender() != operator, \"ERC777: authorizing self as operator\");\n\n    if (_defaultOperators[operator]) {\n      delete _revokedDefaultOperators[_msgSender()][operator];\n    } else {\n      _operators[_msgSender()][operator] = true;\n    }\n\n    emit AuthorizedOperator(operator, _msgSender());\n  }\n\n  /**\n   * @dev See {IERC777-revokeOperator}.\n   */\n  function revokeOperator(address operator) public virtual override  {\n    require(operator != _msgSender(), \"ERC777: revoking self as operator\");\n\n    if (_defaultOperators[operator]) {\n      _revokedDefaultOperators[_msgSender()][operator] = true;\n    } else {\n      delete _operators[_msgSender()][operator];\n    }\n\n    emit RevokedOperator(operator, _msgSender());\n  }\n\n  /**\n   * @dev See {IERC777-defaultOperators}.\n   */\n  function defaultOperators() public view virtual override returns (address[] memory) {\n    return _defaultOperatorsArray;\n  }\n\n  /**\n   * @dev See {IERC777-operatorSend}.\n   *\n   * Emits {Sent} and {IERC20-Transfer} events.\n   */\n  function operatorSend(\n                        address sender,\n                        address recipient,\n                        uint256 amount,\n                        bytes memory data,\n                        bytes memory operatorData\n                        )\n    public\n    virtual\n    override\n    CheckFreeze(sender)\n  {\n    require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\n    _send(sender, recipient, amount, data, operatorData, true);\n  }\n\n  /**\n   * @dev See {IERC777-operatorBurn}.\n   *\n   * Emits {Burned} and {IERC20-Transfer} events.\n   */\n  function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public virtual override CheckFreeze(account){\n    require(isOperatorFor(_msgSender(), account), \"ERC777: caller is not an operator for holder\");\n    _burn(account, amount, data, operatorData);\n  }\n\n  /**\n   * @dev See {IERC20-allowance}.\n   *\n   * Note that operator and allowance concepts are orthogonal: operators may\n   * not have allowance, and accounts with allowance may not be operators\n   * themselves.\n   */\n  function allowance(address holder, address spender) public view virtual override returns (uint256) {\n    return _allowances[holder][spender];\n  }\n\n  /**\n   * @dev See {IERC20-approve}.\n   *\n   * Note that accounts cannot have allowance issued by their operators.\n   */\n  function approve(address spender, uint256 value) public virtual override returns (bool) {\n    address holder = _msgSender();\n    _approve(holder, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev See {IERC20-transferFrom}.\n   *\n   * Note that operator and allowance concepts are orthogonal: operators cannot\n   * call `transferFrom` (unless they have allowance), and accounts with\n   * allowance cannot call `operatorSend` (unless they are operators).\n   *\n   * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\n   */\n  function transferFrom(address holder, address recipient, uint256 amount) public virtual override CheckFreeze(holder) returns (bool) {\n    require(recipient != address(0), \"ERC777: transfer to the zero address\");\n    require(holder != address(0), \"ERC777: transfer from the zero address\");\n\n    address spender = _msgSender();\n\n    bool erc777Enable = _enableERC777(holder, recipient);\n\n    if(erc777Enable){\n      _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n    }\n\n    _move(spender, holder, recipient, amount, \"\", \"\", erc777Enable);\n    _approve(holder, spender, _allowances[holder][spender].sub(amount, \"ERC777: transfer amount exceeds allowance\"));\n\n    if(erc777Enable){\n      _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n    }\n\n    return true;\n  }\n\n  function mint(address account,\n                uint256 amount,\n                bytes memory userData)\n    public\n    IsAdmin(){\n    _mint(account, amount, userData, \"\");\n  }\n  \n  /**\n   * @dev Creates `amount` tokens and assigns them to `account`, increasing\n   * the total supply.\n   *\n   * If a send hook is registered for `account`, the corresponding function\n   * will be called with `operator`, `data` and `operatorData`.\n   *\n   * See {IERC777Sender} and {IERC777Recipient}.\n   *\n   * Emits {Minted} and {IERC20-Transfer} events.\n   *\n   * Requirements\n   *\n   * - `account` cannot be the zero address.\n   * - if `account` is a contract, it must implement the {IERC777Recipient}\n   * interface.\n   */\n  function _mint(\n                 address account,\n                 uint256 amount,\n                 bytes memory userData,\n                 bytes memory operatorData\n                 )\n    internal\n    virtual\n  {\n    require(account != address(0), \"ERC777: mint to the zero address\");\n\n    address operator = _msgSender();\n\n    _beforeTokenTransfer(operator, address(0), account, amount);\n\n    // Update state variables\n    _totalSupply = _totalSupply.add(amount);\n    _balances[account] = _balances[account].add(amount);\n\n    _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n\n    emit Minted(operator, account, amount, userData, operatorData);\n    emit Transfer(address(0), account, amount);\n  }\n\n  /**\n   * @dev Send tokens\n   * @param from address token holder address\n   * @param to address recipient address\n   * @param amount uint256 amount of tokens to transfer\n   * @param userData bytes extra information provided by the token holder (if any)\n   * @param operatorData bytes extra information provided by the operator (if any)\n   * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n   */\n  function _send(\n                 address from,\n                 address to,\n                 uint256 amount,\n                 bytes memory userData,\n                 bytes memory operatorData,\n                 bool requireReceptionAck\n                 )\n    internal\n    virtual\n  {\n    require(from != address(0), \"ERC777: send from the zero address\");\n    require(to != address(0), \"ERC777: send to the zero address\");\n\n    address operator = _msgSender();\n\n    _callTokensToSend(operator, from, to, amount, userData, operatorData);\n\n    _move(operator, from, to, amount, userData, operatorData, true);\n\n    _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n  }\n\n  /**\n   * @dev Burn tokens\n   * @param from address token holder address\n   * @param amount uint256 amount of tokens to burn\n   * @param data bytes extra information provided by the token holder\n   * @param operatorData bytes extra information provided by the operator (if any)\n   */\n  function _burn(\n                 address from,\n                 uint256 amount,\n                 bytes memory data,\n                 bytes memory operatorData\n                 )\n    internal\n    virtual\n  {\n    require(from != address(0), \"ERC777: burn from the zero address\");\n\n    address operator = _msgSender();\n\n    _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n\n    _beforeTokenTransfer(operator, from, address(0), amount);\n\n    // Update state variables\n    _balances[from] = _balances[from].sub(amount, \"ERC777: burn amount exceeds balance\");\n    _totalSupply = _totalSupply.sub(amount);\n\n    emit Burned(operator, from, amount, data, operatorData);\n    emit Transfer(from, address(0), amount);\n    \n    if(burnEFilRateCRFI == 0){\n      require(data.length > 0, \"no user data\");\n      emit BurnedCRFIEfil(from, amount, data);\n    }\n  }\n\n  function _move(\n                 address operator,\n                 address from,\n                 address to,\n                 uint256 amount,\n                 bytes memory userData,\n                 bytes memory operatorData,\n                 bool erc777Enable\n                 )\n    private\n  {\n    if(erc777Enable){\n      _beforeTokenTransfer(operator, from, to, amount);\n    }\n\n    _balances[from] = _balances[from].sub(amount, \"ERC777: transfer amount exceeds balance\");\n    _balances[to] = _balances[to].add(amount);\n\n    emit Sent(operator, from, to, amount, userData, operatorData);\n    emit Transfer(from, to, amount);\n  }\n\n  /**\n   * @dev See {ERC20-_approve}.\n   *\n   * Note that accounts cannot have allowance issued by their operators.\n   */\n  function _approve(address holder, address spender, uint256 value) internal {\n    require(holder != address(0), \"ERC777: approve from the zero address\");\n    require(spender != address(0), \"ERC777: approve to the zero address\");\n\n    _allowances[holder][spender] = value;\n    emit Approval(holder, spender, value);\n  }\n\n  /**\n   * @dev Call from.tokensToSend() if the interface is registered\n   * @param operator address operator requesting the transfer\n   * @param from address token holder address\n   * @param to address recipient address\n   * @param amount uint256 amount of tokens to transfer\n   * @param userData bytes extra information provided by the token holder (if any)\n   * @param operatorData bytes extra information provided by the operator (if any)\n   */\n  function _callTokensToSend(\n                             address operator,\n                             address from,\n                             address to,\n                             uint256 amount,\n                             bytes memory userData,\n                             bytes memory operatorData\n                             )\n    private\n  {\n    address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\n    if (implementer != address(0)) {\n      IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n    }\n  }\n\n  /**\n   * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\n   * tokensReceived() was not registered for the recipient\n   * @param operator address operator requesting the transfer\n   * @param from address token holder address\n   * @param to address recipient address\n   * @param amount uint256 amount of tokens to transfer\n   * @param userData bytes extra information provided by the token holder (if any)\n   * @param operatorData bytes extra information provided by the operator (if any)\n   * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n   */\n  function _callTokensReceived(\n                               address operator,\n                               address from,\n                               address to,\n                               uint256 amount,\n                               bytes memory userData,\n                               bytes memory operatorData,\n                               bool requireReceptionAck\n                               )\n    private\n  {\n    address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\n    if (implementer != address(0)) {\n      IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n    } else if (requireReceptionAck) {\n      require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n    }\n  }\n\n  /**\n   * @dev Hook that is called before any token transfer. This includes\n   * calls to {send}, {transfer}, {operatorSend}, minting and burning.\n   *\n   * Calling conditions:\n   *\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n   * will be to transferred to `to`.\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n   * - `from` and `to` are never both zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _beforeTokenTransfer(address operator, address from, address to, uint256 amount) internal virtual { }\n\n  \n  function _enableERC777(address from, address to)\n    internal\n    view\n    returns(bool){\n\n    if(erc777Mode == Erc777ModeType.disabled){\n      return false;\n    }\n\n    if(erc777Mode == Erc777ModeType.enabled){\n      return true;\n    }\n\n    if(erc777Mode == Erc777ModeType.whitelist){\n      return whitelist[from] || whitelist[to];\n    }\n\n    if(erc777Mode == Erc777ModeType.blacklist){\n      return (!blacklist[from]) && (!blacklist[to]);\n    }\n\n    return false;\n  }\n\n  function _calcBurnEFil(uint256 CRFINum)\n    internal\n    view\n    returns(uint256){\n\n    return CRFINum.mul(calcDecimals) / burnEFilRateCRFI;\n  }\n}\n"
    },
    "github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/introspection/IERC1820Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the global ERC1820 Registry, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n * implementers for interfaces in this registry, as well as query support.\n *\n * Implementers may be shared by multiple accounts, and can also implement more\n * than a single interface for each account. Contracts can implement interfaces\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\n * contract.\n *\n * {IERC165} interfaces can also be queried via the registry.\n *\n * For an in-depth explanation and source code analysis, see the EIP text.\n */\ninterface IERC1820Registry {\n    /**\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\n     * account is able to set interface implementers for it.\n     *\n     * By default, each account is its own manager. Passing a value of `0x0` in\n     * `newManager` will reset the manager to this initial state.\n     *\n     * Emits a {ManagerChanged} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     */\n    function setManager(address account, address newManager) external;\n\n    /**\n     * @dev Returns the manager for `account`.\n     *\n     * See {setManager}.\n     */\n    function getManager(address account) external view returns (address);\n\n    /**\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\n     * `interfaceHash`.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     * The zero address can also be used in `implementer` to remove an old one.\n     *\n     * See {interfaceHash} to learn how these are created.\n     *\n     * Emits an {InterfaceImplementerSet} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n     * end in 28 zeroes).\n     * - `implementer` must implement {IERC1820Implementer} and return true when\n     * queried for support, unless `implementer` is the caller. See\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;\n\n    /**\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n     * implementer is registered, returns the zero address.\n     *\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n     * zeroes), `account` will be queried for support of it.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     */\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\n\n    /**\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n     * corresponding\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n     */\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n\n    /**\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n     *  @param account Address of the contract for which to update the cache.\n     *  @param interfaceId ERC165 interface for which to update the cache.\n     */\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\n     *  If the result is not cached a direct lookup on the contract address is performed.\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n     *  {updateERC165Cache} with the contract address.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n\n    event ManagerChanged(address indexed account, address indexed newManager);\n}\n"
    },
    "github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/token/ERC777/IERC777.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC777Token standard as defined in the EIP.\n *\n * This contract uses the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\n * token holders and recipients react to token movements by using setting implementers\n * for the associated interfaces in said registry. See {IERC1820Registry} and\n * {ERC1820Implementer}.\n */\ninterface IERC777 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     * means all token operations (creation, movement and destruction) must have\n     * amounts that are a multiple of this number.\n     *\n     * For most token contracts, this value will equal 1.\n     */\n    function granularity() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * If send or receive hooks are registered for the caller and `recipient`,\n     * the corresponding functions will be called with `data` and empty\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(address recipient, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external;\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external;\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    event Sent(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData\n    );\n\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n}\n"
    },
    "github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/token/ERC777/IERC777Recipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n *\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\n * contract implement this interface (contract holders can be their own\n * implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
    },
    "github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/token/ERC777/IERC777Sender.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\n *\n * {IERC777} Token holders can be notified of operations performed on their\n * tokens by having a contract implement this interface (contract holders can be\n *  their own implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Sender {\n    /**\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\n     * is conveyed by `to` being the zero address or not.\n     *\n     * This call occurs _before_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
    },
    "github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    }
  }
}