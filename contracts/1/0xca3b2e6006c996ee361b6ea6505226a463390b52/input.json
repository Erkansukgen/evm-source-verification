{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/20200808.sol":{"content":"// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.5.12;\n\n// https://github.com/dapphub/ds-pause\ninterface DSPauseAbstract {\n    function delay() external view returns (uint256);\n    function plot(address, bytes32, bytes calldata, uint256) external;\n    function drop(address, bytes32, bytes calldata, uint256) external;\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n}\n\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\ninterface VatAbstract {\n    function file(bytes32, uint256) external;\n    function file(bytes32, bytes32, uint256) external;\n}\n\n\ncontract SpellAction {\n\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    string constant public description =\n        \"2020-08-08 MakerDAO Precision Fix\";\n\n    // MAINNET ADDRESSES\n    //\n    // The contracts in this list should correspond to MCD core contracts, verify\n    // against the current release list at:\n    //     https://changelog.makerdao.com/releases/mainnet/1.0.9/contracts.json\n\n    address constant public MCD_VAT = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\n\n    uint256 constant public RAD = 10**45;\n    uint256 constant public MILLION = 10**6;\n\n    function execute() external {\n        // Set the WBTC-A debt ceiling\n        //\n        // Existing debt: ~0 (error in last executive)\n        // New debt ceiling: 80 million\n        uint256 WBTC_LINE = 80 * MILLION * RAD;\n        VatAbstract(MCD_VAT).file(\"WBTC-A\", \"line\", WBTC_LINE);\n    }\n}\n\ncontract DssSpell {\n    DSPauseAbstract public pause =\n        DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);\n    address         public action;\n    bytes32         public tag;\n    uint256         public eta;\n    bytes           public sig;\n    uint256         public expiration;\n    bool            public done;\n\n    constructor() public {\n        sig = abi.encodeWithSignature(\"execute()\");\n        action = address(new SpellAction());\n        bytes32 _tag;\n        address _action = action;\n        assembly { _tag := extcodehash(_action) }\n        tag = _tag;\n        expiration = now + 30 days;\n    }\n\n    function description() public view returns (string memory) {\n        return SpellAction(action).description();\n    }\n\n    function schedule() public {\n        require(now <= expiration, \"This contract has expired\");\n        require(eta == 0, \"This spell has already been scheduled\");\n        eta = now + DSPauseAbstract(pause).delay();\n        pause.plot(action, tag, sig, eta);\n    }\n\n    function cast() public {\n        require(!done, \"spell-already-cast\");\n        done = true;\n        pause.exec(action, tag, sig, eta);\n    }\n}\n"}}}