{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/BIOPToken.sol": {
      "content": "pragma solidity ^0.6.6;\n\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/math/SafeMath.sol\";\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/token/ERC20/ERC20.sol\";\n\n\ncontract BIOPToken is ERC20 {\n    using SafeMath for uint256;\n    address public binaryOptions = 0x0000000000000000000000000000000000000000;\n    address public gov;\n    address public owner;\n    uint256 public earlyClaimsAvailable = 450000000000000000000000000000;\n    uint256 public totalClaimsAvailable = 300000000000000000000000000000;\n    bool public earlyClaims = true;\n    bool public binaryOptionsSet = false;\n\n    constructor(string memory name_, string memory symbol_) public ERC20(name_, symbol_) {\n      owner = msg.sender;\n    }\n    \n    modifier onlyBinaryOptions() {\n        require(binaryOptions == msg.sender, \"Ownable: caller is not the Binary Options Contract\");\n        _;\n    }\n    modifier onlyOwner() {\n        require(binaryOptions == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function updateEarlyClaim(uint256 amount) external onlyBinaryOptions {\n        require(totalClaimsAvailable.sub(amount) >= 0, \"insufficent claims available\");\n        require (earlyClaims, \"Launch has closed\");\n        \n        earlyClaimsAvailable = earlyClaimsAvailable.sub(amount);\n        _mint(tx.origin, amount);\n        if (earlyClaimsAvailable <= 0) {\n            earlyClaims = false;\n        }\n    }\n\n     function updateClaim( uint256 amount) external onlyBinaryOptions {\n        require(totalClaimsAvailable.sub(amount) >= 0, \"insufficent claims available\");\n        totalClaimsAvailable.sub(amount);\n        _mint(tx.origin, amount);\n    }\n\n    function setupBinaryOptions(address payable options_) external {\n        require(binaryOptionsSet != true, \"binary options is already set\");\n        binaryOptions = options_;\n    }\n\n    function setupGovernance(address payable gov_) external onlyOwner {\n        _mint(owner, 100000000000000000000000000000);\n        _mint(gov_, 450000000000000000000000000000);\n        owner = 0x0000000000000000000000000000000000000000;\n    }\n}\n"
    },
    "browser/BinaryOptions.sol": {
      "content": "pragma solidity ^0.6.6;\n\n\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/math/SafeMath.sol\";\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/token/ERC20/ERC20.sol\";\n\n\n\ninterface AggregatorV3Interface {\n\n  function decimals() external view returns (uint8);\n  function description() external view returns (string memory);\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n\nimport \"./BIOPToken.sol\";\nimport \"./RateCalc.sol\";\n\n\n\n/**\n * @title Binary Options Eth Pool\n * @author github.com/Shalquiana\n * @dev Pool ETH Tokens and use it for optionss\n * Biop\n */\ncontract BinaryOptions is ERC20 {\n    using SafeMath for uint256;\n    address payable devFund;\n    address payable owner;\n    address public biop;\n    address public rcAddress;//address of current rate calculators\n    mapping(address=>uint256) public nextWithdraw;\n    mapping(address=>bool) public enabledPairs;\n    uint256 public minTime;\n    uint256 public maxTime;\n    address public defaultPair;\n    uint256 public lockedAmount;\n    uint256 public exerciserFee = 50;//in tenth percent\n    uint256 public expirerFee = 50;//in tenth percent\n    uint256 public devFundBetFee = 2;//tenth of percent\n    uint256 public poolLockSeconds = 2 days;\n    uint256 public contractCreated;\n    uint256 public launchEnd;\n    bool public open = true;\n    Option[] public options;\n    \n    //reward amounts\n    uint256 aStakeReward = 120000000000000000000;\n    uint256 bStakeReward = 60000000000000000000;\n    uint256 betReward = 40000000000000000000;\n    uint256 exerciseReward = 2000000000000000000;\n\n\n    modifier onlyOwner() {\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n\n    /* Types */\n    enum OptionType {Put, Call}\n    enum State {Active, Exercised, Expired}\n    struct Option {\n        State state;\n        address payable holder;\n        uint256 strikePrice;\n        uint256 purchaseValue;\n        uint256 lockedValue;//purchaseAmount+possible reward for correct bet\n        uint256 expiration;\n        OptionType optionType;\n        address priceProvider;\n    }\n\n    /* Events */\n     event Create(\n        uint256 indexed id,\n        address payable account,\n        uint256 strikePrice,\n        uint256 lockedValue,\n        OptionType direction\n    );\n    event Payout(uint256 poolLost, address winner);\n    event Exercise(uint256 indexed id);\n    event Expire(uint256 indexed id);\n\n\n    function getMaxAvailable() public view returns(uint256) {\n        uint256 balance = address(this).balance;\n        if (balance > lockedAmount) {\n            return balance.sub(lockedAmount);\n        } else {\n            return 0;\n        }\n    }\n\n    constructor(string memory name_, string memory symbol_, address pp_, address biop_, address rateCalc_) public ERC20(name_, symbol_){\n        devFund = msg.sender;\n        owner = msg.sender;\n        biop = biop_;\n        rcAddress = rateCalc_;\n        lockedAmount = 0;\n        contractCreated = block.timestamp;\n        launchEnd = block.timestamp+28 days;\n        enabledPairs[pp_] = true; //default pair ETH/USD\n        defaultPair = pp_;\n        minTime = 900;//15 minutes\n        maxTime = 60 minutes;\n    }\n\n    /**\n     * @dev the default price provider. This is a convenience method\n     */\n    function defaultPriceProvider() public view returns (address) {\n        return defaultPair;\n    }\n\n\n     /**\n     * @dev add a price provider to the enabledPairs list\n     * @param newRC_ the address of the AggregatorV3Interface price provider contract address to add.\n     */\n    function setRateCalcAddress(address newRC_) external onlyOwner {\n        rcAddress = newRC_; \n    }\n\n    /**\n     * @dev add a price provider to the enabledPairs list\n     * @param newPP_ the address of the AggregatorV3Interface price provider contract address to add.\n     */\n    function addPP(address newPP_) external onlyOwner {\n        enabledPairs[newPP_] = true; \n    }\n\n   \n\n    /**\n     * @dev remove a price provider from the enabledPairs list\n     * @param oldPP_ the address of the AggregatorV3Interface price provider contract address to remove.\n     */\n    function removePP(address oldPP_) external onlyOwner {\n        enabledPairs[oldPP_] = false;\n    }\n\n    /**\n     * @dev update the max time for option bets\n     * @param newMax_ the new maximum time (in seconds) an option may be created for (inclusive).\n     */\n    function setMaxTime(uint256 newMax_) external onlyOwner {\n        maxTime = newMax_;\n    }\n\n    /**\n     * @dev update the max time for option bets\n     * @param newMin_ the new minimum time (in seconds) an option may be created for (inclusive).\n     */\n    function setMinTime(uint256 newMin_) external onlyOwner {\n        minTime = newMin_;\n    }\n\n    /**\n     * @dev address of this contract, convenience method\n     */\n    function thisAddress() public view returns (address){\n        return address(this);\n    }\n\n    /**\n     * @dev set the fee users can recieve for exercising other users options\n     * @param exerciserFee_ the new fee (in tenth percent) for exercising a options itm\n     */\n    function updateExerciserFee(uint256 exerciserFee_) external onlyOwner {\n        require(exerciserFee_ > 1 && exerciserFee_ < 500, \"invalid fee\");\n        exerciserFee = exerciserFee_;\n    }\n\n     /**\n     * @dev set the fee users can recieve for expiring other users options\n     * @param expirerFee_ the new fee (in tenth percent) for expiring a options\n     */\n    function updateExpirerFee(uint256 expirerFee_) external onlyOwner {\n        require(expirerFee_ > 1 && expirerFee_ < 50, \"invalid fee\");\n        expirerFee = expirerFee_;\n    }\n\n    /**\n     * @dev set the fee users pay to buy an option\n     * @param devFundBetFee_ the new fee (in tenth percent) to buy an option\n     */\n    function updateDevFundBetFee(uint256 devFundBetFee_) external onlyOwner {\n        require(devFundBetFee_ >= 0 && devFundBetFee_ < 50, \"invalid fee\");\n        devFundBetFee = devFundBetFee_;\n    }\n\n     /**\n     * @dev update the pool stake lock up time.\n     * @param newLockSeconds_ the new lock time, in seconds\n     */\n    function updatePoolLockSeconds(uint256 newLockSeconds_) external onlyOwner {\n        require(newLockSeconds_ >= 0 && newLockSeconds_ < 14 days, \"invalid fee\");\n        poolLockSeconds = newLockSeconds_;\n    }\n\n    /**\n     * @dev used to transfer ownership\n     * @param newOwner_ the address of governance contract which takes over control\n     */\n    function transferOwner(address payable newOwner_) external onlyOwner {\n        owner = newOwner_;\n    }\n    \n    /**\n     * @dev used to transfer devfund \n     * @param newDevFund the address of governance contract which takes over control\n     */\n    function transferDevFund(address payable newDevFund) external onlyOwner {\n        devFund = newDevFund;\n    }\n\n\n     /**\n     * @dev used to send this pool into EOL mode when a newer one is open\n     */\n    function closeStaking() external onlyOwner {\n        open = false;\n    }\n\n    /**\n     * @dev update the amount of early user governance tokens that have been assigned\n     * @param amount the amount assigned\n     */\n    function updateRewards(uint256 amount) internal {\n        BIOPToken b = BIOPToken(biop);\n        if (b.earlyClaims()) {\n            b.updateEarlyClaim(amount.mul(4));\n        } else if (b.totalClaimsAvailable() > 0){\n            b.updateClaim(amount);\n        }\n    }\n\n\n    /**\n     * @dev send ETH to the pool. Recieve pETH token representing your claim.\n     * If rewards are available recieve BIOP governance tokens as well.\n    */\n    function stake() external payable {\n        require(open == true, \"pool deposits has closed\");\n        require(msg.value >= 100, \"stake to small\");\n        if (block.timestamp < launchEnd) {\n            nextWithdraw[msg.sender] = block.timestamp + 14 days;\n            _mint(msg.sender, msg.value);\n        } else {\n            nextWithdraw[msg.sender] = block.timestamp + poolLockSeconds;\n            _mint(msg.sender, msg.value);\n        }\n\n        if (msg.value >= 2000000000000000000) {\n            updateRewards(aStakeReward);\n        } else {\n            updateRewards(bStakeReward);\n        }\n    }\n\n    /**\n     * @dev recieve ETH from the pool. \n     * If the current time is before your next available withdraw a 1% fee will be applied.\n     * @param amount The amount of pETH to send the pool.\n    */\n    function withdraw(uint256 amount) public {\n       require (balanceOf(msg.sender) >= amount, \"Insufficent Share Balance\");\n\n        uint256 valueToRecieve = amount.mul(address(this).balance).div(totalSupply());\n        _burn(msg.sender, amount);\n        if (block.timestamp <= nextWithdraw[msg.sender]) {\n            //early withdraw fee\n            uint256 penalty = valueToRecieve.div(100);\n            require(devFund.send(penalty), \"transfer failed\");\n            require(msg.sender.send(valueToRecieve.sub(penalty)), \"transfer failed\");\n        } else {\n            require(msg.sender.send(valueToRecieve), \"transfer failed\");\n        }\n    }\n\n     /**\n    @dev Open a new call or put options.\n    @param type_ type of option to buy\n    @param pp_ the address of the price provider to use (must be in the list of enabledPairs)\n    @param time_ the time until your options expiration (must be minTime < time_ > maxTime)\n    */\n    function bet(OptionType type_, address pp_, uint256 time_) external payable {\n        require(\n            type_ == OptionType.Call || type_ == OptionType.Put,\n            \"Wrong option type\"\n        );\n        require(\n            time_ >= minTime && time_ <= maxTime,\n            \"Invalid time\"\n        );\n        require(msg.value >= 100, \"bet to small\");\n        require(enabledPairs[pp_], \"Invalid  price provider\");\n        uint depositValue;\n        if (devFundBetFee > 0) {\n            uint256 fee = msg.value.div(devFundBetFee).div(100);\n            require(devFund.send(fee), \"devFund fee transfer failed\");\n            depositValue = msg.value.sub(fee);\n            \n        } else {\n            depositValue = msg.value;\n        }\n\n        RateCalc rc = RateCalc(rcAddress);\n        uint256 lockValue = getMaxAvailable();\n        lockValue = rc.rate(depositValue, lockValue.sub(depositValue));\n        \n\n\n         \n        AggregatorV3Interface priceProvider = AggregatorV3Interface(pp_);\n        (, int256 latestPrice, , , ) = priceProvider.latestRoundData();\n        uint256 optionID = options.length;\n        uint256 totalLock = lockValue.add(depositValue);\n        Option memory op = Option(\n            State.Active,\n            msg.sender,\n            uint256(latestPrice),\n            depositValue,\n            totalLock,//purchaseAmount+possible reward for correct bet\n            block.timestamp + time_,//all options 1hr to start\n            type_,\n            pp_\n        );\n        lock(totalLock);\n        options.push(op);\n        emit Create(optionID, msg.sender, uint256(latestPrice), totalLock, type_);\n        updateRewards(betReward);\n    }\n\n     /**\n     * @notice exercises a option\n     * @param optionID id of the option to exercise\n     */\n    function exercise(uint256 optionID)\n        external\n    {\n        Option memory option = options[optionID];\n        require(block.timestamp <= option.expiration, \"expiration date margin has passed\");\n        AggregatorV3Interface priceProvider = AggregatorV3Interface(option.priceProvider);\n        (, int256 latestPrice, , , ) = priceProvider.latestRoundData();\n        uint256 uLatestPrice = uint256(latestPrice);\n        if (option.optionType == OptionType.Call) {\n            require(uLatestPrice > option.strikePrice, \"price is to low\");\n        } else {\n            require(uLatestPrice < option.strikePrice, \"price is to high\");\n        }\n\n        //option expires ITM, we pay out\n        payout(option.lockedValue.sub(option.purchaseValue), msg.sender, option.holder);\n        \n        lockedAmount = lockedAmount.sub(option.lockedValue);\n        emit Exercise(optionID);\n        updateRewards(exerciseReward);\n    }\n\n     /**\n     * @notice expires a option\n     * @param optionID id of the option to expire\n     */\n    function expire(uint256 optionID)\n        external\n    {\n        Option memory option = options[optionID];\n        require(block.timestamp > option.expiration, \"expiration date has not passed\");\n        unlock(option.lockedValue.sub(option.purchaseValue), msg.sender, expirerFee);\n        emit Expire(optionID);\n        lockedAmount = lockedAmount.sub(option.lockedValue);\n\n        updateRewards(exerciseReward);\n    }\n\n    /**\n    @dev called by BinaryOptions contract to lock pool value coresponding to new binary options bought. \n    @param amount amount in ETH to lock from the pool total.\n    */\n    function lock(uint256 amount) internal {\n        lockedAmount = lockedAmount.add(amount);\n    }\n\n    /**\n    @dev called by BinaryOptions contract to unlock pool value coresponding to an option expiring otm. \n    @param amount amount in ETH to unlock\n    @param goodSamaritan the user paying to unlock these funds, they recieve a fee\n    */\n    function unlock(uint256 amount, address payable goodSamaritan, uint256 eFee) internal {\n        require(amount <= lockedAmount, \"insufficent locked pool balance to unlock\");\n        uint256 fee = amount.div(eFee).div(100);\n        if (fee > 0) {\n            require(goodSamaritan.send(fee), \"good samaritan transfer failed\");\n        }\n    }\n\n    /**\n    @dev called by BinaryOptions contract to payout pool value coresponding to binary options expiring itm. \n    @param amount amount in BIOP to unlock\n    @param exerciser address calling the exercise/expire function, this may the winner or another user who then earns a fee.\n    @param winner address of the winner.\n    @notice exerciser fees are subject to change see updateFeePercent above.\n    */\n    function payout(uint256 amount, address payable exerciser, address payable winner) internal {\n        require(amount <= lockedAmount, \"insufficent pool balance available to payout\");\n        require(amount <= address(this).balance, \"insufficent balance in pool\");\n        if (exerciser != winner) {\n            //good samaratin fee\n            uint256 fee = amount.div(exerciserFee).div(100);\n            if (fee > 0) {\n                require(exerciser.send(fee), \"exerciser transfer failed\");\n                require(winner.send(amount.sub(fee)), \"winner transfer failed\");\n            }\n        } else {  \n            require(winner.send(amount), \"winner transfer failed\");\n        }\n        emit Payout(amount, winner);\n    }\n\n}"
    },
    "browser/RateCalc.sol": {
      "content": "pragma solidity ^0.6.6;\n\n\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/math/SafeMath.sol\";\ninterface IRC {\n    /**\n     * @notice Returns the rate to pay out for a given amount\n     * @param amount the bet amount to calc a payout for\n     * @param maxAvailable the total pooled ETH unlocked and available to bet\n     * @return profit total possible profit amount\n     */\n    function rate(uint256 amount, uint256 maxAvailable) external view returns (uint256);\n\n}\n\ncontract RateCalc is IRC {\n    using SafeMath for uint256;\n     /**\n     * @notice Calculates maximum option buyer profit\n     * @param amount Option amount\n     * @return profit total possible profit amount\n     */\n    function rate(uint256 amount, uint256 maxAvailable) external view override returns (uint256)  {\n        require(amount <= maxAvailable, \"greater then pool funds available\");\n        uint256 oneTenth = amount.div(10);\n        uint256 halfMax = maxAvailable.div(2);\n        if (amount > halfMax) {\n            return amount.mul(2).add(oneTenth).add(oneTenth);\n        } else {\n            if(oneTenth > 0) {\n                return amount.mul(2).sub(oneTenth);\n            } else {\n                uint256 oneThird = amount.div(4);\n                require(oneThird > 0, \"invalid bet amount\");\n                return amount.mul(2).sub(oneThird);\n            }\n        }\n        \n    }\n}\n\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    }
  }
}