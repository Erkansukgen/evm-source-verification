{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/ProjetBuyListingFinal.sol":{"content":"pragma solidity ^0.7.0;\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\n contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor ()  {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\ninterface IUniswapV2Pair {\n  event Approval(address indexed owner, address indexed spender, uint value);\n  event Transfer(address indexed from, address indexed to, uint value);\n\n  function name() external pure returns (string memory);\n  function symbol() external pure returns (string memory);\n  function decimals() external pure returns (uint8);\n  function totalSupply() external view returns (uint);\n  function balanceOf(address owner) external view returns (uint);\n  function allowance(address owner, address spender) external view returns (uint);\n\n  function approve(address spender, uint value) external returns (bool);\n  function transfer(address to, uint value) external returns (bool);\n  function transferFrom(address from, address to, uint value) external returns (bool);\n\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\n  function nonces(address owner) external view returns (uint);\n\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n  event Mint(address indexed sender, uint amount0, uint amount1);\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n  event Swap(\n      address indexed sender,\n      uint amount0In,\n      uint amount1In,\n      uint amount0Out,\n      uint amount1Out,\n      address indexed to\n  );\n  event Sync(uint112 reserve0, uint112 reserve1);\n\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\n  function factory() external view returns (address);\n  function token0() external view returns (address);\n  function token1() external view returns (address);\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n  function price0CumulativeLast() external view returns (uint);\n  function price1CumulativeLast() external view returns (uint);\n  function kLast() external view returns (uint);\n\n  function mint(address to) external returns (uint liquidity);\n  function burn(address to) external returns (uint amount0, uint amount1);\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n  function skim(address to) external;\n  function sync() external;\n}\n\ninterface IUniswapV2Callee {\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\nlibrary UniswapV2Library {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n            ))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n\n\ninterface IUniswapV2Factory {\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\n  function allPairs(uint) external view returns (address pair);\n  function allPairsLength() external view returns (uint);\n\n  function feeTo() external view returns (address);\n  function feeToSetter() external view returns (address);\n\n  function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    require(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n    return c;\n  }\n\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n}\n\n\ncontract ListingManager is Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n    \n\n   mapping (address => MultiplesBuys) private buys;\n   mapping (address => bool) private admins;\n  \n  IERC20 private token;\n  IUniswapV2Pair internal uniswapPair;\n  IUniswapV2Router02 internal uniswapRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n  IUniswapV2Factory internal uniswapFactory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\n  address private myContract = address(this);\n  address private myAddress = address(0xFf02c8AF03f8931dEB6438540F8e9161C11eE3Bb);\n  address public WETHAddress = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); //0xc778417E063141139Fce010982780140Aa0cD5Ab //0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n  string private buyWithLimitString = \"buyListingLimitAmountMultipleTimes(address,,address,uint256,uint256,address,uint8,uint256)\";\n  \n  //EVENTS\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event ResultCall(bool isSuccess, bytes dataReturned);\n  \n  struct MultiplesBuys{\n      uint256 amountOutTotal;\n      mapping (address => uint[]) amountOutDivided; \n  }\n  \n  modifier isAdmin(){\n      require(admins[msg.sender], 'You are not an admin!');\n      _;\n  }\n  \n  constructor(address[] memory adminAddr){\n      for (uint i = 0; i < adminAddr.length; i++){\n          admins[adminAddr[i]] = true;\n      }\n      admins[msg.sender] = true;\n      admins[address(this)] = true;\n  }\n  \n  receive() payable external {}\n  \n  \n  function setRouter(address _router) external onlyOwner{\n      uniswapRouter = IUniswapV2Router02(_router);\n  }\n  \n  function setFactory(address _factory) external onlyOwner{\n      uniswapFactory = IUniswapV2Factory(_factory);\n  }\n  \n  function setMyAddress(address _myAddress) external onlyOwner{\n      myAddress = address(_myAddress);\n  }\n  \n  function setWETHAddress(address _WETHAddress) external onlyOwner{\n      WETHAddress = address(_WETHAddress);\n  }\n  \n  function setBuyWithLimitString(string memory _buyWithLimitString) external onlyOwner{\n      buyWithLimitString = _buyWithLimitString;\n  }\n  \n  function approveToken(address _tokenAddress, address spender) public isAdmin{\n      token = IERC20(_tokenAddress);\n      token.approve(spender, token.totalSupply());\n  }\n  \n  function setAdmins(address[] memory adminAddr, bool[] memory right) external onlyOwner{\n      for (uint i = 0; i < adminAddr.length; i++){\n          admins[adminAddr[i]] = right[i];\n      }\n  }\n  \n  \n  function buyWithLimitCall(address _tokenAddress, address _tokenAddressB, uint256 _amountReceivedMin, uint256 _amountETHMin, address _tokenReceiver, uint8 slippage, uint256 amountOut) external payable isAdmin{\n      bytes memory data = abi.encodeWithSignature(buyWithLimitString,_tokenAddress,_tokenAddressB,_amountReceivedMin,_amountETHMin,_tokenReceiver,slippage,amountOut);\n      (bool success, bytes memory dataReturned) = address(this).call{value: msg.value, gas: gasleft()}(data);\n      if (!success) msg.sender.transfer(msg.value);\n      emit ResultCall(success, dataReturned);\n  }\n  \n  function functionCallWithValue(address target, bytes memory data) external payable onlyOwner returns (bool success, bytes memory dataReturned){\n      if (msg.value == 0){\n           (success, dataReturned) = target.call{gas: gasleft()}(data);\n      }else {\n          (success, dataReturned) = target.call{value: msg.value, gas: gasleft()}(data);\n          if (!success) msg.sender.transfer(msg.value);\n      }\n      return (success, dataReturned);\n  }\n  \n  function getReserves(address tokenAddress) public view returns (uint256 reserveIn, uint256 reserveOut){\n      return UniswapV2Library.getReserves(address(uniswapFactory), WETHAddress, tokenAddress);\n  }\n  \n  function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) public view returns (uint256 amountOut){\n      return uniswapRouter.getAmountOut(amountIn, reserveIn, reserveOut);\n  }\n  \n  \n  \n  function callUniswapRouterDegen(address _tokenAddress, address _tokenReceiver) external payable isAdmin returns (bool isSuccess){\n      address[] memory path = new address[](2);\n      path[0] = WETHAddress;\n      path[1] = _tokenAddress;\n      bytes memory dataReturned;\n      bytes memory data = abi.encodeWithSignature(\"swapExactETHForTokens(uint256,address[],address,uint256)\",1,path,_tokenReceiver,block.timestamp + 20 minutes);\n      (isSuccess, dataReturned) = address(uniswapRouter).call{value: msg.value, gas: gasleft()}(data);\n      if (!isSuccess){\n          msg.sender.transfer(msg.value);\n      }\n      emit ResultCall(isSuccess, dataReturned);\n      return isSuccess;\n  }\n  \n  \n  \n  function callUniswapRouter(address _tokenAddress, address _tokenAddressB, uint256 _amountReceivedMin, uint256 _amountETHMin, address _tokenReceiver, uint8 slippage) external payable isAdmin returns (bool isSuccess){\n      uint256 amountOut = uniswapRouter.getAmountOut(msg.value, _amountETHMin, _amountReceivedMin);\n      uint256 amountOutMin = (amountOut.div(100)).mul(slippage);\n      //bool isSuccess;\n      bytes memory dataReturned;\n      address[] memory path;\n      if (_tokenAddressB == WETHAddress){\n          path = new address[](2);\n          path[0] = WETHAddress;\n          path[1] = _tokenAddress;\n      }\n      else{\n          path = new address[](3);\n          path[0] = WETHAddress;\n          path[1] = _tokenAddressB;\n          path[2] = _tokenAddress;\n      }\n      bytes memory data = abi.encodeWithSignature(\"swapExactETHForTokens(uint256,address[],address,uint256)\",amountOutMin,path,_tokenReceiver,block.timestamp + 20 minutes);\n      (isSuccess, dataReturned) = address(uniswapRouter).call{value: msg.value, gas: gasleft()}(data);\n      if (!isSuccess)  msg.sender.transfer(msg.value);\n      emit ResultCall(isSuccess, dataReturned);\n      return isSuccess;\n  }\n  \n  \n  \n  function callUniswapRouterInfinite(address _tokenAddress, address _tokenAddressB, uint256 ethAmount, uint256 _amountReceivedMin, uint256 _amountETHMin, address _tokenReceiver, uint8 slippage) external payable isAdmin returns (bool isSuccess){\n      uint256 balanceOf = IERC20(_tokenAddress).balanceOf(_tokenReceiver);\n      if (balanceOf > 0) revert(\"Already bought, lucky bastard\");\n      uint256 amountOut = uniswapRouter.getAmountOut(ethAmount, _amountETHMin, _amountReceivedMin);\n      uint256 amountOutMin = (amountOut.div(100)).mul(slippage);\n      bytes memory dataReturned;\n      address[] memory path;\n      if (_tokenAddressB == WETHAddress){\n          path = new address[](2);\n          path[0] = WETHAddress;\n          path[1] = _tokenAddress;\n      }\n      else{\n          path = new address[](3);\n          path[0] = WETHAddress;\n          path[1] = _tokenAddressB;\n          path[2] = _tokenAddress;\n          uint[] memory amounts = uniswapRouter.getAmountsOut(ethAmount, path);\n          amountOutMin = (amounts[amounts.length - 1].div(100)).mul(slippage);\n      }\n      \n      bytes memory data = abi.encodeWithSignature(\"swapExactETHForTokens(uint256,address[],address,uint256)\",amountOutMin,path,_tokenReceiver,block.timestamp + 20 minutes);\n      (isSuccess, dataReturned) = address(uniswapRouter).call{value: ethAmount, gas: gasleft()}(data);\n      emit ResultCall(isSuccess, dataReturned);\n      return isSuccess;\n  }\n  \n  \n  function buyListingLimitAmountMultipleTimesVersion3(address _tokenAddress, address _tokenAddressB, uint256 _amountReceivedMin, uint256 _amountETHMin, address _tokenReceiver, uint8 slippage, uint256 amountOut) external payable isAdmin returns (bool success){\n      uint amountIn = UniswapV2Library.getAmountIn(amountOut, _amountETHMin, _amountReceivedMin);\n      bytes memory dataReturned;\n      address[] memory path;\n      if (_tokenAddressB == WETHAddress){\n          path = new address[](2);\n          path[0] = WETHAddress;\n          path[1] = _tokenAddress;\n      }\n      else{\n          path = new address[](3);\n          path[0] = WETHAddress;\n          path[1] = _tokenAddressB;\n          path[2] = _tokenAddress;\n      }\n      IWETH(WETHAddress).deposit{value: msg.value}();\n      uint wethAmount = IERC20(WETHAddress).balanceOf(address(this));\n      uint[] memory amounts = UniswapV2Library.getAmountsIn(address(uniswapFactory), amountOut, path);\n      if (amounts[0] >= wethAmount) revert('EXCESSIVE_INPUT_AMOUNT');\n      \n      while(amounts[0] <= wethAmount){\n          if (amounts[0] <= wethAmount){\n              assert(IWETH(WETHAddress).transfer(UniswapV2Library.pairFor(address(uniswapFactory), path[0], path[1]), amounts[0]));\n              wethAmount = wethAmount.sub(amounts[0]);\n              _swapV3(amounts, path, _tokenReceiver);\n          }\n          if (amounts[0] > wethAmount){\n              amounts = UniswapV2Library.getAmountsOut(address(uniswapFactory), wethAmount, path);\n              assert(IWETH(WETHAddress).transfer(UniswapV2Library.pairFor(address(uniswapFactory), path[0], path[1]), amounts[0]));\n              wethAmount = wethAmount.sub(amounts[0]);\n              _swapV3(amounts, path, _tokenReceiver); \n          }\n      }\n      \n      if (wethAmount > 0){\n          IWETH(WETHAddress).withdraw(wethAmount);\n          tx.origin.transfer(address(this).balance);\n      }\n      return true;\n  }\n  \n  function buyListingLimitAmountMultipleTimes(address _tokenAddress, address _tokenAddressB, uint256 _amountReceivedMin, uint256 _amountETHMin, address _tokenReceiver, uint8 slippage, uint256 amountOut) external payable isAdmin returns (bool success){\n      uint amountIn = UniswapV2Library.getAmountIn(amountOut, _amountETHMin, _amountReceivedMin);\n      bytes memory dataReturned;\n      address[] memory path;\n      if (_tokenAddressB == WETHAddress){\n          path = new address[](2);\n          path[0] = WETHAddress;\n          path[1] = _tokenAddress;\n      }\n      else{\n          path = new address[](3);\n          path[0] = WETHAddress;\n          path[1] = _tokenAddressB;\n          path[2] = _tokenAddress;\n      }\n      IWETH(WETHAddress).deposit{value: msg.value}();\n      uint wethAmount = IERC20(WETHAddress).balanceOf(address(this));\n      uint[] memory amounts = UniswapV2Library.getAmountsIn(address(uniswapFactory), amountOut, path);\n      if (amounts[0] >= wethAmount) revert('EXCESSIVE_INPUT_AMOUNT');\n      \n      while(amounts[0] <= wethAmount){\n          if (amounts[0] <= wethAmount){\n              assert(IWETH(WETHAddress).transfer(UniswapV2Library.pairFor(address(uniswapFactory), path[0], path[1]), amounts[0]));\n              wethAmount = wethAmount.sub(amounts[0]);\n              _swap(amounts, path, _tokenReceiver);\n              \n          }\n          if (amounts[0] > wethAmount){\n              amounts = UniswapV2Library.getAmountsOut(address(uniswapFactory), wethAmount, path);\n              assert(IWETH(WETHAddress).transfer(UniswapV2Library.pairFor(address(uniswapFactory), path[0], path[1]), amounts[0]));\n              wethAmount = wethAmount.sub(amounts[0]);\n              _swap(amounts, path, _tokenReceiver); \n          }\n      }\n      \n      if (wethAmount > 0){\n          IWETH(WETHAddress).withdraw(wethAmount);\n          tx.origin.transfer(address(this).balance);\n      }\n      return true;\n  }\n  \n  function sellListingLimitAmountMultipleTimes(address _tokenAddress, address _tokenAddressB, uint256 tokenAmount, address _tokenReceiver, uint8 slippage, uint256 limitSell) external payable isAdmin returns (bool success){\n      bytes memory dataReturned;\n      address[] memory path;\n      if (_tokenAddressB == WETHAddress){\n          path = new address[](2);\n          path[0] = _tokenAddress;\n          path[1] = WETHAddress;\n      }\n      else{\n          path = new address[](3);\n          path[0] = _tokenAddress;\n          path[1] = _tokenAddressB;\n          path[2] = WETHAddress;\n      }\n      \n     \n      uint[] memory amounts = UniswapV2Library.getAmountsOut(address(uniswapFactory), limitSell, path);\n      \n      while(amounts[0] <= tokenAmount){\n          if (amounts[0] <= tokenAmount){\n              assert(IERC20(_tokenAddress).transferFrom(_msgSender(), UniswapV2Library.pairFor(address(uniswapFactory), path[0], path[1]), amounts[0]));\n              tokenAmount = tokenAmount.sub(amounts[0]);\n              _swap(amounts, path, address(this));\n          }\n          if (amounts[0] > tokenAmount){\n              amounts = UniswapV2Library.getAmountsOut(address(uniswapFactory), tokenAmount, path);\n              assert(IERC20(_tokenAddress).transferFrom(_msgSender(), UniswapV2Library.pairFor(address(uniswapFactory), path[0], path[1]), amounts[0]));\n              tokenAmount = tokenAmount.sub(amounts[0]);\n              _swap(amounts, path, address(this)); \n          }\n      }\n      uint wethAmount = IERC20(WETHAddress).balanceOf(address(this));\n      IWETH(WETHAddress).withdraw(wethAmount);\n      tx.origin.transfer(address(this).balance);\n      \n      \n      return true;\n  }\n  \n  /*function buyListingLimitAmountMultipleTimesVersion2(address _tokenAddress, uint256 _amountReceivedMin, uint256 _amountETHMin, address _tokenReceiver, uint8 slippage, uint256 limitBuy) external payable onlyOwner returns (bool success){\n      uint256 amountOut = uniswapRouter.getAmountOut(msg.value, _amountETHMin, _amountReceivedMin);\n      uint256 amountOutMin = (amountOut.div(100)).mul(slippage);\n      bytes memory dataReturned;\n      address[] memory path = new address[](2);\n      path[0] = WETHAddress;\n      path[1] = _tokenAddress;\n      IWETH(WETHAddress).deposit{value: msg.value}();\n      uint wethAmount = IERC20(WETHAddress).balanceOf(address(this));\n      uint[] memory amounts = UniswapV2Library.getAmountsOut(address(uniswapFactory), wethAmount, path);\n      uint amountsOut = amounts[amounts.length - 1];\n      if (amountsOut < amountOutMin) revert('INSUFFICIENT_OUTPUT_AMOUNT');\n      \n      if (amounts[0] <= wethAmount){\n          assert(IWETH(WETHAddress).transfer(UniswapV2Library.pairFor(address(uniswapFactory), path[0], path[1]), amounts[0]));\n          wethAmount = wethAmount.sub(amounts[0]);\n          _swapV2(amounts, path, _tokenReceiver, limitBuy);\n      }\n      \n  }*/\n  \n  function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {\n        for (uint i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0,) = UniswapV2Library.sortTokens(input, output);\n            uint amountOut = amounts[i + 1];\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\n            address to = i < path.length - 2 ? UniswapV2Library.pairFor(address(uniswapFactory), output, path[i + 2]) : _to;\n            IUniswapV2Pair(UniswapV2Library.pairFor(address(uniswapFactory), input, output)).swap(\n                amount0Out, amount1Out, to, new bytes(0)\n            );\n        }\n    }\n    \n  /*function _swapV2(uint[] memory amounts, address[] memory path, address _to, uint256 limitBuy) internal virtual {\n        for (uint i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0,) = UniswapV2Library.sortTokens(input, output);\n            address pair = uniswapFactory.getPair(input, output);\n            uint amountOut = amounts[i + 1];\n\n            while(buys[pair].amountOutTotal < amountOut){\n                uint amountToAdd = amountOut.sub(buys[pair].amountOutTotal) >= limitBuy ? limitBuy : amountOut.sub(buys[pair].amountOutTotal);\n                buys[pair].amountOutTotal = buys[pair].amountOutTotal.add(amountToAdd);\n                buys[pair].amountOutDivided[pair].push(amountToAdd);\n            }\n            bytes memory data = abi.encode(buys[pair].amountOutDivided[pair], pair, _to);\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), buys[pair].amountOutDivided[pair][buys[pair].amountOutDivided[pair].length - 1]) : (buys[pair].amountOutDivided[pair][buys[pair].amountOutDivided[pair].length - 1], uint(0));\n            address to = i < path.length - 2 ? UniswapV2Library.pairFor(address(uniswapFactory), output, path[i + 2]) : _to;\n            IUniswapV2Pair(UniswapV2Library.pairFor(address(uniswapFactory), input, output)).swap(\n                amount0Out, amount1Out, to, data\n            );\n        }\n    }*/\n    \n  function _swapV3(uint[] memory amounts, address[] memory path, address _to) internal virtual {\n        for (uint i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0,) = UniswapV2Library.sortTokens(input, output);\n            uint amountOut = amounts[i + 1];\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\n            address to = i < path.length - 2 ? UniswapV2Library.pairFor(address(uniswapFactory), output, path[i + 2]) : _to;\n            bytes memory data = abi.encodeWithSignature(\"swap(uint,uint,address,bytes)\",amount0Out,amount1Out,to,new bytes(0));\n            (bool success,) = address(UniswapV2Library.pairFor(address(uniswapFactory), input, output)).call{gas: gasleft()}(data);\n            //if (!success) return;\n        }\n    }\n    \n  /*function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external override{\n      (uint[] memory array, address pair, address _to) = abi.decode(data, (uint[], address, address));\n      address token0 = IUniswapV2Pair(msg.sender).token0();\n      address token1 = IUniswapV2Pair(msg.sender).token1();\n      assert(msg.sender == UniswapV2Library.pairFor(address(uniswapFactory), token0, token1)); // ensure that msg.sender is actually a V2 pair\n      assert(amount0 == 0 || amount1 == 0); // this strategy is unidirectional\n      //amountOutDivided[pair] = array;\n      delete buys[pair].amountOutDivided[pair][buys[pair].amountOutDivided[pair].length - 1];\n      if (buys[pair].amountOutDivided[pair][0] != 0){\n         (uint amount0Out, uint amount1Out) = amount0 == 0 ? (uint(0), buys[pair].amountOutDivided[pair][buys[pair].amountOutDivided[pair].length - 1]) : (buys[pair].amountOutDivided[pair][buys[pair].amountOutDivided[pair].length - 1], uint(0));\n         bytes memory newData = abi.encode(buys[pair].amountOutDivided[pair], pair, _to);\n         IUniswapV2Pair(pair).swap(\n                amount0Out, amount1Out, _to, newData\n            ); \n      }\n      else delete buys[pair].amountOutDivided[pair];\n      \n  }*/\n  \n  /*function testFlashLoan(address _tokenAddress, uint amount) external payable onlyOwner{\n      address[] memory path = new address[](2);\n      path[0] = WETHAddress;\n      path[1] = _tokenAddress;\n      (address input, address output) = (path[0], path[1]);\n      (address token0,) = UniswapV2Library.sortTokens(input, output);\n      uint amountOut = amount;\n      (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\n      address to = msg.sender;\n      IUniswapV2Pair(UniswapV2Library.pairFor(address(uniswapFactory), input, output)).swap(\n            amount0Out, amount1Out, to, new bytes(0x01)\n        );\n  }\n  \n  function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external override{\n      address[] memory path = new address[](2);\n      uint amountToken0;\n      uint amountToken1;\n      { // scope for token{0,1}, avoids stack too deep errors\n      address token0 = IUniswapV2Pair(msg.sender).token0();\n      address token1 = IUniswapV2Pair(msg.sender).token1();\n      assert(msg.sender == UniswapV2Library.pairFor(address(uniswapFactory), token0, token1)); // ensure that msg.sender is actually a V2 pair\n      assert(amount0 == 0 || amount1 == 0); // this strategy is unidirectional\n      path[0] = amount0 == 0 ? token0 : token1;\n      path[1] = amount0 == 0 ? token1 : token0;\n      amountToken0 = token0 == address(WETHAddress) ? amount1 : amount0;\n      amountToken1 = token0 == address(WETHAddress) ? amount0 : amount1;\n      }\n      if ((amountToken0 > 0) && (amountToken1 == 0)){\n          uint fee = ((amountToken0 * 3) / 997) + 1;\n          uint amountToRepay = amountToken0 + fee;\n          IERC20(IUniswapV2Pair(msg.sender).token0()).transfer(msg.sender, amountToRepay);\n      }\n      else if ((amountToken1 > 0) && (amountToken0 == 0)) {\n          uint fee = ((amountToken1 * 3) / 997) + 1;\n          uint amountToRepay = amountToken0 + fee;\n          IERC20(IUniswapV2Pair(msg.sender).token1()).transfer(msg.sender, amountToRepay);\n      }\n      \n  }*/\n  \n  /*function buyPresaleOnTimestamp(address crowdsale, uint256 timestamp) external payable onlyOwner{\n      address payable crowdsalePayable = payable(crowdsale);\n      while (block.timestamp < timestamp){\n          if (block.timestamp >= timestamp){\n              crowdsalePayable.call{value: msg.value, gas: gasleft()}(\"\");\n              break;\n          }\n      }\n  }*/\n  \n  \n  function transferTokens(address tokenAddress, address to) public onlyOwner {\n      token = IERC20(tokenAddress);\n      token.transfer(to, token.balanceOf(myContract));\n  }\n  \n  function transferETH(address to) external onlyOwner{\n     payable(to).transfer(address(this).balance);\n  }\n  \n\n  function buyListing(address tokenAddress, address to) external payable onlyOwner returns(uint[] memory) {\n      require (msg.sender == myAddress, 'You have no right to do this');\n      token = IERC20(tokenAddress);\n      address[] memory path = new address[](2);\n      path[0] = WETHAddress;\n      path[1] = tokenAddress;\n      uint256[] memory amountsOut = UniswapV2Library.getAmountsOut(address(uniswapFactory), msg.value, path);\n      uint256 amountOutMin = (amountsOut[amountsOut.length - 1].div(100)).mul(60);\n      uint[] memory amounts = uniswapRouter.swapExactETHForTokens{value: msg.value}(amountOutMin, path, to, block.timestamp + 20 minutes);\n      if (to == address(this)){\n          token.approve(address(uniswapRouter), token.totalSupply());\n      }\n      return amounts;\n  }\n  \n  \n  function sellRemove(address tokenAddress, address to, bool isDeflationnary) external onlyOwner returns(uint[] memory){\n      require (msg.sender == myAddress, 'You have no right to do this');\n      token = IERC20(tokenAddress);\n      uint256 amountIn = token.balanceOf(myContract);\n      uint[] memory amounts;\n      address[] memory path = new address[](2);\n      path[0] = tokenAddress;\n      path[1] = WETHAddress;\n      uint256[] memory amountsOut = UniswapV2Library.getAmountsOut(address(uniswapFactory), amountIn, path);\n      uint256 amountOutMin = (amountsOut[amountsOut.length - 1].div(100)).mul(60);\n      if (isDeflationnary == true){\n          uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, to, block.timestamp + 20 minutes);\n      }\n      else{\n          amounts = uniswapRouter.swapExactTokensForETH(amountIn, amountOutMin, path, myAddress, block.timestamp + 20 minutes);\n      }\n      return amounts;\n  }\n}\n\n  \n"}}}