{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "MincedMeat.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.2;\r\n\r\ncontract MincedMeat{\r\n\r\n    using SafeMath for uint256;\r\n    mapping(address => bool) public owners;        // 管理员\r\n    mapping(address => bool) public allowCallers;  // 允许调用transactionChannel的合约地址\r\n    mapping(address => uint256) public serviceCharges;  // 手续费设置\r\n    string public prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n    ERC20 erc20;\r\n\r\n    constructor() public{\r\n        owners[msg.sender] = true;\r\n    }\r\n\r\n    // 交易管道\r\n    function transactionChannel(address[] memory _from,address[] memory _to,uint256[] memory _value,bytes32[] memory _r,bytes32[] memory _s,uint8[] memory _v,address _contractAddress) public onlyAllowCallers{\r\n        erc20 = ERC20(_contractAddress);\r\n        uint256 serviceCharge = serviceCharges[_contractAddress];\r\n        if(serviceCharges[_contractAddress] == 0){\r\n            for(uint256 i=0; i<_from.length; i++){\r\n                _sendTransaction(_from[i],_to[i],_value[i],_r[i],_s[i],_v[i],_contractAddress);\r\n            }\r\n        }else{\r\n            for(uint256 i=0; i<_from.length; i++){\r\n                if(erc20.balanceOf(_from[i]) >= _value[i] && getVerifySignatureResult(_from[i],_to[i],_value[i],_r[i],_s[i],_v[i],_contractAddress) == _from[i]){\r\n                    erc20.transferFrom(_from[i],tx.origin,serviceCharge);\r\n                    erc20.transferFrom(_from[i],_to[i],_value[i].sub(serviceCharge));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 验证并发送转账交易\r\n    function _sendTransaction(address _from,address _to,uint256 _value,bytes32 _r,bytes32 _s,uint8 _v,address _contractAddress) private{\r\n        if(getVerifySignatureResult(_from,_to,_value, _r, _s, _v,_contractAddress) == _from){\r\n            erc20.transferFrom(_from,_to,_value);\r\n        }\r\n    }\r\n\r\n    // 查看交易签名对应的地址\r\n    function getVerifySignatureResult(address _from,address _to,uint256 _value,bytes32 _r,bytes32 _s,uint8 _v,address _contractAddress) public view returns(address){\r\n        return ecrecover(getSha3Result(_from,_to,_value,_contractAddress), _v, _r, _s);\r\n    }\r\n\r\n    // 查看随机数签名对应的地址\r\n    function getVerifySignatureByRandom(bytes memory _random,bytes32 _r,bytes32 _s,uint8 _v) public view returns(address){\r\n        return ecrecover(keccak256(abi.encodePacked(prefix,keccak256(abi.encodePacked(_random)))),_v,_r,_s);\r\n    }\r\n\r\n    // 获取sha3加密结果\r\n    function getSha3Result(address _from,address _to,uint256 _value,address _contractAddress) public view returns(bytes32){\r\n        return keccak256(abi.encodePacked(prefix,keccak256(abi.encodePacked(_from,_to,_value,_contractAddress))));\r\n    }\r\n\r\n    // 更新合约手续费\r\n    function addServiceCharge(address _contractAddress,uint256 _serviceCharge) public onlyOwner{\r\n        serviceCharges[_contractAddress] = _serviceCharge;\r\n    }\r\n\r\n    // 增加允许调用管道的合约地址\r\n    function addCaller(address _caller) public onlyOwner{\r\n        allowCallers[_caller] = true;\r\n    }\r\n\r\n    // 删除允许调用管道的合约地址\r\n    function removeCaller(address _caller) public onlyOwner{\r\n        allowCallers[_caller] = false;\r\n    }\r\n\r\n    // 增加管理员\r\n    function addOwner(address _owner) public onlyOwner{\r\n        owners[_owner] = true;\r\n    }\r\n\r\n    // 删除管理员\r\n    function removeOwner(address _owner) public onlyOwner{\r\n        owners[_owner] = false;\r\n    }\r\n\r\n    //  仅限管理员操作\r\n    modifier onlyOwner(){\r\n        require(owners[msg.sender], 'No authority');\r\n        _;\r\n    }\r\n\r\n    //  仅允许指定地址调用\r\n    modifier onlyAllowCallers(){\r\n        require(allowCallers[msg.sender],'No call permission');\r\n        _;\r\n    }\r\n}\r\n\r\ninterface ERC20{\r\n    function transferFrom(address _from, address _to, uint256 _value) external;\r\n    function balanceOf(address) external returns(uint256);\r\n}\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a,\"When sub, a must be greater than b\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n}"
    }
  }
}