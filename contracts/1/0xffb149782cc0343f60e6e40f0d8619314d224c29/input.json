{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/BNB_PresaleContract.sol": {
      "content": "\r\n// Deployed by @CryptoSamurai031 - Telegram user\r\n\r\npragma solidity ^0.8.4;\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n   \r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n   \r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n        uint256 c = add(a,m);\r\n        uint256 d = sub(c,1);\r\n        return mul(div(d,m),m);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ncontract ERC20PrivatePresale is ReentrancyGuard, Context, Ownable {\r\n    using SafeMath for uint256;\r\n    address admin;\r\n    \r\n    mapping (address => uint256) public _contributions;\r\n    mapping (address => bool) public _whiteList;\r\n    mapping (uint => address) public _indexAirdrop;\r\n    uint public _totalAddresses = 0;\r\n    uint public _nextAddress = 0;\r\n    \r\n    IERC20 internal _token;\r\n    uint256 private _tokenDecimals;\r\n    address payable internal _wallet;\r\n    uint256 internal _rate;\r\n    uint256 internal _weiRaised;\r\n    uint256 internal endICO;\r\n    uint internal minPurchase;\r\n    uint internal maxPurchase;\r\n    uint internal hardCap;\r\n    uint internal softCap;\r\n\r\n    uint internal tokenForPresale;\r\n    bool internal startRefund = false;\r\n    bool internal startClaim = false;\r\n    bool internal startAirdrop = false;\r\n\r\n    bool internal _isPrivate = false;\r\n    bool internal isAirdrop = false;\r\n\r\n    bool internal inWhitelistPeriod = false; \r\n    bool internal isRunning = false;    \r\n    bool internal isFinalized = false;\r\n\r\n\r\n\r\n    event TokensPurchased(address  purchaser, address  beneficiary, uint256 value, uint256 amount);\r\n    event TokensDelivered(address  purchaser, uint256 amount);\r\n    event Refund(address recipient, uint256 amount);\r\n    event Airdrop(address recipient, uint256 amount);\r\n\r\n    constructor (uint256 rate, address payable wallet, IERC20 token, uint256 tokenDecimals, uint endDate, uint _minPurchase, uint _maxPurchase, uint _softCap, uint _hardCap, bool isPrivate, bool _isAirdrop)  {\r\n        require(rate > 0, \"Pre-Sale: rate is 0\");\r\n        require(wallet != address(0), \"Pre-Sale: wallet is the zero address\");\r\n        require(address(token) != address(0), \"Pre-Sale: token is the zero address\");\r\n        \r\n        _rate = rate;\r\n        _wallet = wallet;\r\n        _token = token;\r\n        _tokenDecimals = tokenDecimals;\r\n\r\n        endICO = endDate; \r\n        minPurchase = _minPurchase;\r\n        maxPurchase = _maxPurchase;\r\n        softCap = _softCap;\r\n        hardCap = _hardCap;\r\n        _isPrivate = isPrivate;\r\n        isAirdrop = _isAirdrop;\r\n    }\r\n\r\n\r\n    receive () external payable {\r\n        if(endICO > 0 && block.timestamp < endICO){\r\n            buyTokens(_msgSender());\r\n        }\r\n        else{\r\n            revert('Pre-Sale is closed');\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n\r\n// Start Pre-Sale\r\n\r\n    //function setICO(uint endDate, uint _minPurchase, uint _maxPurchase, uint _softCap, uint _hardCap, bool isPrivate) external onlyOwner icoNotActive() {       \r\n    //}\r\n\r\n    function startPresale() external onlyOwner {\r\n        require(endICO > block.timestamp, 'duration should be > 0');\r\n        //require(tokenForPresale > 0 && tokenForPresale <= _token.totalSupply(), 'availableTokens should be > 0 and <= totalSupply');\r\n        require(minPurchase > 0, '_minPurchase should > 0');\r\n        isRunning = true;\r\n        //tokenForPresale = _token.balanceOf(address(this));\r\n        _weiRaised = 0;\r\n        inWhitelistPeriod = false; \r\n    }\r\n    \r\n\r\n// Finish Pre-sale\r\n    function finishPresale() external onlyOwner {\r\n        endICO = 0;\r\n        isRunning = false;\r\n        isFinalized = true;\r\n        if (isAirdrop == true) {\r\n            startAirdrop = true;\r\n        }\r\n    }\r\n    \r\n\r\n\r\n    \r\n// Pre-Sale functions\r\n\r\n    function buyTokens(address beneficiary) public nonReentrant icoActive payable {\r\n        uint256 weiAmount = msg.value;\r\n        _preValidatePurchase(beneficiary, weiAmount);\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n        _weiRaised = _weiRaised.add(weiAmount);\r\n        tokenForPresale = tokenForPresale - tokens;\r\n        \r\n        if (_contributions[beneficiary] == 0) {\r\n            _indexAirdrop[_totalAddresses] = beneficiary;\r\n            _totalAddresses += 1;\r\n        }\r\n        _contributions[beneficiary] = _contributions[beneficiary].add(weiAmount);\r\n        emit TokensPurchased(_msgSender(), beneficiary, weiAmount, tokens);\r\n    }\r\n\r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n        if (_isPrivate) {\r\n            require(_whiteList[beneficiary] == true, \"Not whitelisted\");\r\n        }\r\n        require(beneficiary != address(0), \"Crowdsale: beneficiary is the zero address\");\r\n        require(weiAmount != 0, \"Crowdsale: weiAmount is 0\");\r\n        require(weiAmount >= minPurchase, 'have to send at least: minPurchase');\r\n        require(weiAmount <= maxPurchase, 'have to send max: maxPurchase');\r\n        require((_weiRaised+weiAmount) <= hardCap, 'Hard Cap reached');\r\n        require((_contributions[beneficiary]+weiAmount) <= maxPurchase, 'maxPurchase reached');\r\n        this; \r\n    }\r\n\r\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) private {\r\n        _token.transfer(beneficiary, tokenAmount);\r\n    }\r\n\r\n\r\n\r\n\r\n// Withdraw \r\n\r\n    function withdraw() external onlyOwner {\r\n         require(startRefund == false);\r\n         require(address(this).balance > 0, 'Contract has no money');\r\n        _wallet.transfer(address(this).balance);    \r\n    }\r\n    \r\n    function withdrawTokens(IERC20 tokenAddress)  public onlyOwner{\r\n        IERC20 tokenBEP = tokenAddress;\r\n        uint256 tokenAmt = tokenBEP.balanceOf(address(this));\r\n        require(tokenAmt > 0, 'BEP-20 balance is 0');\r\n        tokenBEP.transfer(_wallet, tokenAmt);\r\n    }\r\n    \r\n    \r\n\r\n\r\n//  Refund\r\n\r\n    function refundMe() external icoNotActive {\r\n        require(startRefund == true, 'no refund available');\r\n        uint amount = _contributions[msg.sender];\r\n\t\tif (address(this).balance >= amount) {\r\n\t\t\t_contributions[msg.sender] = 0;\r\n\t\t\tif (amount > 0) {\r\n\t\t\t    address payable recipient = payable(msg.sender);\r\n\t\t\t\trecipient.transfer(amount);\r\n\t\t\t\temit Refund(msg.sender, amount);\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n    \r\n    function refundWallet(address addr) external onlyAdmin {\r\n        uint amount = _contributions[addr];\r\n\t\tif (address(this).balance >= amount) {\r\n\t\t\t_contributions[addr] = 0;\r\n\t\t\tif (amount > 0) {\r\n\t\t\t    address payable recipient = payable(addr);\r\n\t\t\t\trecipient.transfer(amount);\r\n\t\t\t\temit Refund(addr, amount);\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\r\n\r\n\r\n\r\n// Claim\r\n\r\n    function claim() public icoNotActive {\r\n        require(startRefund == false, 'presale did not reach softcap, refund started');\r\n        require(startClaim == true, 'claim is not available yet');\r\n\r\n        if(_contributions[msg.sender] > 0)\r\n        {\r\n            uint tokenAmount = _getTokenAmount(_contributions[msg.sender]);\r\n            _contributions[msg.sender] = 0;\r\n            _deliverTokens(msg.sender, tokenAmount);\r\n            emit TokensDelivered(msg.sender, tokenAmount);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n// Airdrop\r\n\r\n    function autoAirdrop() public onlyOwner\r\n    {\r\n        address user;\r\n        uint amount;\r\n        uint beforeTxGas = gasleft();\r\n        uint afterTxGas;\r\n\r\n        while (_nextAddress < _totalAddresses) {\r\n            user = _indexAirdrop[_nextAddress];\r\n            if(_contributions[user] > 0)\r\n            {\r\n                amount = _getTokenAmount(_contributions[user]);\r\n                _deliverTokens(user, amount);\r\n                _contributions[user] = 0;\r\n                emit Airdrop(user, amount);\r\n            }\r\n\r\n            _nextAddress++;\r\n            afterTxGas = gasleft();\r\n            if (afterTxGas < (beforeTxGas - afterTxGas)*2) {\r\n                return;\r\n            }\r\n            beforeTxGas = gasleft();\r\n        }\r\n    }\r\n\r\n    function sendAirdrop(address[] memory addresses) public onlyOwner\r\n    {\r\n        address aidropAddress;\r\n        for(uint8 i = 0; i < addresses.length; i++)\r\n        {\r\n            aidropAddress = addresses[i];\r\n            if(_contributions[aidropAddress] > 0)\r\n            {\r\n                _deliverTokens(aidropAddress, _getTokenAmount(_contributions[aidropAddress]));\r\n                _contributions[aidropAddress] = 0;\r\n            }\r\n            emit Airdrop(aidropAddress, _getTokenAmount(_contributions[aidropAddress]));\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n// Whitelist\r\n\r\n    function removeFromWhiteList(address[] memory addresses) public onlyAdmin \r\n    {\r\n        for(uint8 i = 0; i < addresses.length; i++)\r\n        {\r\n            setInWhiteList(addresses[i], false);\r\n        }\r\n    }\r\n\r\n    function addToWhiteList(address[] memory addresses) public onlyAdmin\r\n    {\r\n        for(uint8 i = 0; i < addresses.length; i++)\r\n        {\r\n            setInWhiteList(addresses[i], true);\r\n        }\r\n    }\r\n    \r\n    function setInWhiteList(address addressToWhitelist, bool allow) public onlyAdmin \r\n    {\r\n            _whiteList[addressToWhitelist] = allow;\r\n    }\r\n\r\n\r\n    \r\n    \r\n// Modifiers\r\n\r\n    modifier onlyAdmin() {\r\n        require(owner() == _msgSender() || admin == _msgSender(), \"Caller is not the admin\");\r\n        _;\r\n    }\r\n\r\n    modifier icoNotActive() {\r\n        require(endICO < block.timestamp, 'ICO should not be active');\r\n        _;\r\n    }\r\n\r\n    modifier icoActive() {\r\n        require(isRunning == true, \"Presale did not start yet\");\r\n        require(endICO > 0 && block.timestamp < endICO && tokenForPresale > 0, \"ICO must be active\");\r\n        _;\r\n    }\r\n\r\n\r\n\r\n\r\n// Sets\r\n\r\n    function setAdmin(address newAdmin) external onlyOwner {\r\n        admin = newAdmin;\r\n    }\r\n\r\n    function setIsPrivate(bool isPrivate) public onlyOwner \r\n    {\r\n            _isPrivate = isPrivate;\r\n    }\r\n\r\n    function setClaimStarted(bool status) public onlyOwner {\r\n        startClaim = status;\r\n    }\r\n\r\n    function setRefund(bool status) public onlyOwner {\r\n        startRefund = status;\r\n    }\r\n\r\n    function setWalletReceiver(address payable newWallet) external onlyOwner(){\r\n        _wallet = newWallet;\r\n    }\r\n\r\n    function setToken(IERC20 newToken) external onlyOwner(){\r\n        _token = newToken;\r\n    }\r\n    \r\n    function setSoftCap(uint256 value) external onlyOwner{\r\n        softCap = value;\r\n    }\r\n    function setHardCap(uint256 value) external onlyOwner{\r\n        hardCap = value;\r\n    }\r\n    \r\n    function setMinPurchase(uint256 value) external onlyOwner{\r\n        minPurchase = value;\r\n    }\r\n    \r\n    function setMaxPurchase(uint256 value) external onlyOwner{\r\n        maxPurchase = value;\r\n    }\r\n\r\n    function setAvailableTokens(uint amount) public onlyOwner{\r\n        tokenForPresale = amount;\r\n    }\r\n    \r\n    function setRate(uint256 newRate) external onlyOwner {\r\n        _rate = newRate;\r\n    }\r\n\r\n\r\n\r\n\r\n// Gets\r\n\r\n    function getAdmin() public view /*onlyOwner */returns (address) {\r\n        return admin;\r\n    }\r\n\r\n    function getTokenAddress() public view /*onlyOwner */returns (IERC20) {\r\n        return _token;\r\n    }\r\n    \r\n\r\n    function getClaimAvailability() public view returns(bool)\r\n    {\r\n        return startClaim;\r\n    }\r\n\r\n    function getRefundAvailability() public view returns(bool)\r\n    {\r\n        return startRefund;\r\n    }\r\n\r\n    function getAirdropAvailability() public view returns(bool)\r\n    {\r\n        return startAirdrop;\r\n    }\r\n\r\n    function getIsPrivate() public view returns(bool)\r\n    {\r\n        return _isPrivate;\r\n    }\r\n\r\n    function getInWhitelistPeriod() public view returns(bool)\r\n    {\r\n        return inWhitelistPeriod;\r\n    }\r\n\r\n    function getIsRunning() public view returns(bool)\r\n    {\r\n        return isRunning;\r\n    }\r\n\r\n    function getIsFinalized() public view returns(bool)\r\n    {\r\n        return isFinalized;\r\n    }\r\n\r\n    function getIfWhitelisted(address addresses) public view returns(bool)\r\n    {\r\n        return _whiteList[addresses];\r\n    }\r\n\r\n    function getTokenShare(address addr) public view returns (uint256) {\r\n        return _getTokenAmount(_contributions[addr]);\r\n    }\r\n\r\n    function getAmountRaised() public view returns (uint256) {\r\n        return _weiRaised;\r\n    }\r\n\r\n    function getContribution(address addr) public view returns(uint256){\r\n        return _contributions[addr];\r\n    }\r\n\r\n    function getHardcap() public view returns(uint256){\r\n        return hardCap;\r\n    }\r\n\r\n    function getSoftcap() public view returns(uint256){\r\n        return softCap;\r\n    }\r\n\r\n    function getMinPurchase() public view returns(uint256){\r\n        return minPurchase;\r\n    }\r\n\r\n    function getMaxPurchase() public view returns(uint256){\r\n        return maxPurchase;\r\n    }\r\n\r\n    function getTokensToDeposit() public view returns(uint256){\r\n        uint256 totalTokens = _getTokenAmount(hardCap);\r\n        uint256 onePercent = totalTokens.div(100);\r\n        uint256 amountWithTaxes = (totalTokens + onePercent).div(10**_tokenDecimals);\r\n        return amountWithTaxes;\r\n    }\r\n\r\n    function getTokensForPresale() public view returns(uint256){\r\n        return tokenForPresale;\r\n    }\r\n\r\n\r\n\r\n\r\n// Private Gets\r\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\r\n        return weiAmount.mul(_rate).div(10**_tokenDecimals);\r\n    }\r\n\r\n}"
    }
  }
}