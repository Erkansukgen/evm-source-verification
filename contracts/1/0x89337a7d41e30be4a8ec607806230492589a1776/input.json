{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/BondingToken.sol": {
      "content": "pragma solidity 0.6.8;\npragma experimental ABIEncoderV2;\n\n\nlibrary ZoraTypes {\n\n    struct Permit {\n        address owner;\n        address spender;\n        uint256 value;\n        uint256 deadline;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n}\n\ncontract ZoraProxyStorage {\n\n    address public implementation;\n    address public admin;\n\n    modifier onlyAdmin() {\n        require(\n            admin == msg.sender,\n            \"ZoraProxyStorage: only admin\"\n        );\n        _;\n    }\n}\n\ncontract PermittableUpgradeSafe is ZoraProxyStorage {\n\n    /* ============ Variables ============ */\n\n    bytes32 public DOMAIN_SEPARATOR;\n\n    mapping (address => uint256) public permitNonces;\n\n    /* ============ Constants ============ */\n\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n\n    /* ============ Constructor ============ */\n\n    function configure(\n        string memory name,\n        string memory version\n    )\n    public\n    onlyAdmin\n    {\n        DOMAIN_SEPARATOR = initDomainSeparator(name, version);\n    }\n\n    /**\n     * @dev Initializes EIP712 DOMAIN_SEPARATOR based on the current contract and chain ID.\n     */\n    function initDomainSeparator(\n        string memory name,\n        string memory version\n    )\n    internal\n    returns (bytes32)\n    {\n        uint256 chainID;\n        /* solium-disable-next-line */\n        assembly {\n            chainID := chainid()\n        }\n\n        return keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name)),\n                keccak256(bytes(version)),\n                chainID,\n                address(this)\n            )\n        );\n    }\n\n    /**\n    * @dev Approve by signature.\n    *\n    * Adapted from Uniswap's UniswapV2ERC20 and MakerDAO's Dai contracts:\n    * https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol\n    * https://github.com/makerdao/dss/blob/master/src/dai.sol\n    */\n    function _permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    )\n    public\n    virtual\n    {\n\n        require(\n            deadline == 0 || deadline >= block.timestamp,\n            \"Permittable: Permit expired\"\n        );\n\n        require(\n            spender != address(0),\n            \"Permittable: spender cannot be 0x0\"\n        );\n\n        require(\n            value > 0,\n            \"Permittable: approval value must be greater than 0\"\n        );\n\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(\n                    abi.encode(\n                        PERMIT_TYPEHASH,\n                        owner,\n                        spender,\n                        value,\n                        permitNonces[owner]++,\n                        deadline\n                    )\n                )\n            ));\n\n        address recoveredAddress = ecrecover(digest, v, r, s);\n\n        require(\n            recoveredAddress != address(0) && owner == recoveredAddress,\n            \"Permittable: Signature invalid\"\n        );\n\n    }\n\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BaseERC20UpgradeSafe is ZoraProxyStorage, IERC20 {\n    using SafeMath for uint256;\n\n    // ============ Variables ============\n\n    string internal _name;\n    string internal _symbol;\n    uint256 internal _supply;\n    uint8 internal _decimals;\n\n    mapping (address => uint256) private  _balances;\n    mapping (address => mapping(address => uint256)) private _allowances;\n\n    function configure(\n        string memory name,\n        string memory symbol,\n        uint8 decimals\n    )\n        public\n        onlyAdmin\n    {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    // ============ Public Functions ============\n\n    function symbol()\n        public\n        view\n        returns (string memory)\n    {\n        return _symbol;\n    }\n\n    function name()\n        public\n        view\n        returns (string memory)\n    {\n        return _name;\n    }\n\n    function decimals()\n        public\n        virtual\n        view\n        returns (uint8)\n    {\n        return _decimals;\n    }\n\n    function totalSupply()\n        public\n        override\n        view\n        returns (uint256)\n    {\n        return _supply;\n    }\n\n    function balanceOf(\n        address who\n    )\n        public\n        override\n        view returns (uint256)\n    {\n        return _balances[who];\n    }\n\n    function allowance(\n        address owner,\n        address spender\n    )\n        public\n        override\n        view\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    // ============ Internal Functions ============\n\n    function _mint(address to, uint256 value) internal {\n        require(to != address(0), \"Cannot mint to zero address\");\n\n        _balances[to] = _balances[to].add(value);\n        _supply = _supply.add(value);\n\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint256 value) internal {\n        require(from != address(0), \"Cannot burn to zero\");\n\n        _balances[from] = _balances[from].sub(value);\n        _supply = _supply.sub(value);\n\n        emit Transfer(from, address(0), value);\n    }\n\n    // ============ Token Functions ============\n\n    function transfer(\n        address to,\n        uint256 value\n    )\n        public\n        override\n        virtual\n        returns (bool)\n    {\n        if (_balances[msg.sender] >= value) {\n            _balances[msg.sender] = _balances[msg.sender].sub(value);\n            _balances[to] = _balances[to].add(value);\n            emit Transfer(msg.sender, to, value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        public\n        override\n        virtual\n        returns (bool)\n    {\n        if (\n            _balances[from] >= value &&\n            _allowances[from][msg.sender] >= value\n        ) {\n            _balances[to] = _balances[to].add(value);\n            _balances[from] = _balances[from].sub(value);\n            _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(\n                value\n            );\n            emit Transfer(from, to, value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function approve(\n        address spender,\n        uint256 value\n    )\n        public\n        override\n        returns (bool)\n    {\n        return _approve(msg.sender, spender, value);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 value\n    )\n        internal\n        returns (bool)\n    {\n        _allowances[owner][spender] = value;\n\n        emit Approval(\n            owner,\n            spender,\n            value\n        );\n\n        return true;\n    }\n}\n\ncontract ZoraTokenStorageV1 {\n    uint256 public STARTING_SUPPLY;\n}\n\n// SPDX-License-Identifier: MIT\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ncontract OwnableUpgradeSafe is ZoraProxyStorage, Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function configure() public onlyAdmin {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract BondingToken is ZoraProxyStorage, BaseERC20UpgradeSafe, OwnableUpgradeSafe, PermittableUpgradeSafe, ZoraTokenStorageV1 {\n    function configure(\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        string memory version,\n        uint256 supply\n    ) public onlyAdmin {\n\n        // BaseERC20\n        BaseERC20UpgradeSafe.configure(name, symbol, decimals);\n\n        // Ownable\n        OwnableUpgradeSafe.configure();\n\n        // Permittable\n        PermittableUpgradeSafe.configure(name, version);\n\n        // TODO should this be moved out so we don't accidentally mint twice?\n        // Custom\n        _mint(msg.sender, supply);\n        STARTING_SUPPLY = supply;\n    }\n\n    /* ============ View Functions ============ */\n\n    function startingSupply()\n        public\n        view\n        returns (uint256)\n    {\n        return STARTING_SUPPLY;\n    }\n\n    /* ============ Public Fuctions ============ */\n\n    /**\n    * @dev Approve by signature.\n    *\n    * Adapted from Uniswap's UniswapV2ERC20 and MakerDAO's Dai contracts:\n    * https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol\n    * https://github.com/makerdao/dss/blob/master/src/dai.sol\n    */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    )\n        public\n    {\n        _permit(\n            owner,\n            spender,\n            value,\n            deadline,\n            v,\n            r,\n            s\n        );\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev Mint tokens\n     *\n     * @param to The address to mint tokens to\n     * @param value The number of tokens to burn\n     */\n    function mint(\n        address to,\n        uint256 value\n    )\n        public\n        onlyOwner\n    {\n        _mint(to, value);\n    }\n\n    /**\n     * @dev Burn tokens when redemptions occur\n     *\n     * @param from The address to burn tokens from\n     * @param value The number of tokens to burn\n     */\n    function burn(\n        address from,\n        uint256 value\n    )\n        public\n        onlyOwner\n    {\n        _burn(from, value);\n    }\n\n}"
    }
  }
}