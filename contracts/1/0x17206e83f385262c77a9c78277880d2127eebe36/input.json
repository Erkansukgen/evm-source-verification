{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Test08.sol": {
      "content": "// \"SPDX-License-Identifier: UNLICENSED\"\n\n\npragma solidity ^0.6.9;\n\ncontract owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ncontract Test08 is owned{\n\nusing SafeMath for uint256;\n\nstring public constant symbol = \"TST8\";\nstring public constant name = \"Test08 Token\";\nuint8 public constant decimals = 16;\nuint256 _initialSupply = 4000000000 * 10 ** uint256(decimals);\nuint256 _totalSupply;\n\nmapping(address => uint256) balances;\n\nmapping(address => mapping (address => uint256)) allowed;\n\nconstructor() public {\n   owner = msg.sender;\n   _totalSupply = _initialSupply;\n   balances[owner] = _totalSupply;\n}\n\n\nfunction totalSupply() public view returns (uint256) {\n   return _totalSupply;\n}\n\nfunction balanceOf(address _owner) public view returns (uint256 balance) {\n   return balances[_owner];\n}\n\nfunction transfer(address _to, uint256 _amount) public returns (bool success) {\n   if (balances[msg.sender] >= _amount && _amount > 0) {\n       balances[msg.sender] = balances[msg.sender].sub(_amount);\n       balances[_to] = balances[_to].add(_amount);\n       emit Transfer(msg.sender, _to, _amount);\n       return true;\n   } else {\n       return false;\n   }\n}\n\nfunction transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n   if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0) {\n      balances[_from] = balances[_from].sub(_amount);\n      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n      balances[_to] = balances[_to].add(_amount);\n      emit Transfer(_from, _to, _amount);\n      return true;\n   }  else {\n         return false;\n   }\n}\n\nfunction approve(address _spender, uint256 _amount) public returns (bool success) {\n   if(balances[msg.sender]>=_amount && _amount>0) {\n       allowed[msg.sender][_spender] = _amount;\n       emit Approval(msg.sender, _spender, _amount);\n       return true;\n   } else {\n       return false;\n   }\n}\n\nfunction allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n   return allowed[_owner][_spender];\n}\n\nevent Transfer(address indexed _from, address indexed _to, uint _value);\nevent Approval(address indexed _owner, address indexed _spender, uint _value);\n\nfunction getMyBalance() public view returns (uint) {\n  return balances[msg.sender];\n}\n}\n\nlibrary SafeMath {\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n    }\n\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n    }\n\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n    }\n\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n    }\n}"
    }
  }
}