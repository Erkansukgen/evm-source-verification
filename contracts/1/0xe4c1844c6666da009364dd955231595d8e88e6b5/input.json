{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/ea.sol":{"content":"pragma solidity ^0.6.4;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract EARIssue {\r\n    \r\n    // 每次发放的时候，更换一下这个是第几期\r\n    string private _name = \"EARIssue-0624\";\r\n    // 当前bridge地址为0x8ff087140bd7BAEaD2D8177A499a54687a5690E6\r\n    address private _authorizer = 0x8ff087140bd7BAEaD2D8177A499a54687a5690E6;\r\n    address[15] private _leaders = [\r\n    0xDd9fAa35f96519CF53Cef61CBD557239a7bfC66F,\r\n    0xaf2716aBa91D24C89E469E5f762660E496b4b6b4,\r\n    0x769314c67F3cd3dDF2221de3218E55ff8583879F,\r\n    0x6D8d316178dEBBB3C601d62811319F97f68c1bF8,\r\n    0xdB0f6B96b858778B2898c8c7E226F12d1FfFAe91,\r\n    0x985F93af5758Cdb50C40362dD3d8a1D65FE99F82,\r\n    0xfDFeb2E3189115d46AD922CFc256C07c5ED1C12E,\r\n    0x6fac1Fe0049be7d60078C59c244EC8677D5B5156,\r\n    0x6cA01014cbB95880E4b3fAbc12cD2Ce145f64f93,\r\n    0xF27FF02BB2e49ab664f88662C3D77BA91Dc800e6,\r\n    0xB7dB04A9aC6EB9e2b8f6e7dD759437D049eF5bF3,\r\n    0x1cfc1607F53032F22326C888B9496A95c0BB2b6B,\r\n    0xDD4aB515E41f43d90b3453c5c1f0dACDECB35FA0,\r\n    0x244Bbb2B812C259a3491933148719bFbdC3BF10d,\r\n    0x79eFc78267319591d73092437377E5b4a074Cc24\r\n    ];\r\n    \r\n    address private _owner;\r\n    uint[15] private LEADER_AWARD =[\r\n        35,\r\n        20,\r\n        15,\r\n        10,\r\n        5,\r\n        4,\r\n        3,\r\n        1,\r\n        1,\r\n        1,\r\n        1,\r\n        1,\r\n        1,\r\n        1,\r\n        1\r\n    ];\r\n\r\n    \r\n    \r\n    constructor() public {\r\n      // 用这个约束只能是共振合约转账过来，0xfF43a3D55Dcc3c5660E4d8F2E673959a4dB7DeA5，测试需要修改\r\n      _owner = msg.sender;\r\n    }\r\n\r\n    receive() external payable {\r\n      require(msg.sender == _authorizer, \"must auth\");\r\n      _sendLeaderBoard(msg.value);\r\n    }\r\n    \r\n    /// send LeaderBoard\r\n    function _sendLeaderBoard(uint256 amount) private {\r\n        for (uint i = 0; i < LEADER_AWARD.length; i++) {\r\n            if (_leaders[i] != address(0)) {\r\n                address payable to = address(uint160(_leaders[i]));\r\n                uint256 value = amount * LEADER_AWARD[i] / 100;\r\n                to.transfer(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function albert() external {\r\n      require(msg.sender == _owner, \"only owner\");\r\n      uint256 b = address(this).balance;\r\n      address payable to = address(uint160(_owner));\r\n      to.transfer(b);\r\n    }\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n}\r\n"}}}