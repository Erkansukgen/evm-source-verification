{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/VerumCertificate.sol":{"content":"pragma solidity >=0.4.0 <0.8.0;\n\n/**\n * @title VerumCertificate\n * @dev Store certificates information from Verum Digital\n */\ncontract VerumCertificate {\n    struct CertificateStruct {\n        string participantCpf;\n        string participantEmail;\n        string eventName;\n        string eventDate;\n        string expiresAt;\n        string verumParticipantCertificate;\n    }\n\n    mapping(string => CertificateStruct) certificates;\n\n    function newCertificate(\n        string memory participantCpf,\n        string memory participantEmail,\n        string memory eventName,\n        string memory eventDate,\n        string memory expiresAt,\n        string memory verumParticipantCertificate\n    ) public returns (string memory certificateID) {\n        certificateID = verumParticipantCertificate;\n\n        CertificateStruct storage c = certificates[certificateID];\n        c.participantCpf = participantCpf;\n        c.participantEmail = participantEmail;\n        c.eventName = eventName;\n        c.eventDate = eventDate;\n        c.expiresAt = expiresAt;\n        c.verumParticipantCertificate = verumParticipantCertificate;\n    }\n\n    function getCertificate(string memory certificateID)\n        public\n        view\n        returns (\n            string memory,\n            string memory,\n            string memory,\n            string memory,\n            string memory,\n            string memory\n        )\n    {\n        return (\n            certificates[certificateID].participantCpf,\n            certificates[certificateID].participantEmail,\n            certificates[certificateID].eventName,\n            certificates[certificateID].eventDate,\n            certificates[certificateID].expiresAt,\n            certificates[certificateID].verumParticipantCertificate\n        );\n    }\n\n    function removeCertificate(string memory certificateID)\n        public\n        returns (bool)\n    {\n        delete (certificates[certificateID]);\n        return true;\n    }\n}\n"}}}