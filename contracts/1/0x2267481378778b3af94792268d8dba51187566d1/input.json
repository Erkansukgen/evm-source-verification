{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"localhost/championV4/contracts/Champion.sol":{"content":"pragma solidity =0.6.6;\n\nimport './interfaces/IWETH.sol';\nimport './interfaces/IERC20.sol';\nimport './interfaces/IUniswapV2Router02.sol';\nimport './libraries/SafeMath.sol';\nimport './libraries/TransferHelper.sol';\nimport './interfaces/IBPool.sol';\nimport './IChampion.sol';\n\ncontract Champion {\n    using SafeMath for uint;\n    \n    struct INDEX {\n        uint index;\n        bool exists;\n    }\n    \n    address public immutable owner;\n    address public immutable WETH;\n    address public receiver; //接受者\n    address public router; //uniRouter/BPool/0地址时swap可任意指定\n\n    mapping(address => INDEX) public getWorker; //合法调用者列表\n    address[] public allWorkers;\n\n    mapping(address => INDEX) public getToken; //合法代币列表\n    address[] public allTokens; //可以兑换的币种类\n\n    constructor(address _owner, address _WETH) public {\n        require(_owner != address(0), 'Champion: NO_OWNER');\n        require(_WETH != address(0), 'Champion: NO_WETH');\n        owner = _owner;\n        WETH = _WETH;\n        receiver = address(this);\n    }\n\n    //只有所有者有权修改\n    modifier ensure_owner() {\n        //require(deadline >= block.timestamp, 'Champion: EXPIRED');\n        bool allowed = (msg.sender == owner);\n        require(allowed, 'Champion: FORBIDDEN');\n        _;\n    }\n\n    //ensure(uint deadline)\n    modifier ensure_worker() {\n        //require(deadline >= block.timestamp, 'Champion: EXPIRED');\n        bool allowed = (msg.sender == owner) || getWorker[msg.sender].exists;\n        require(allowed, 'Champion: FORBIDDEN');\n        _;\n    }\n\n    //兑换参数检测\n    modifier ensure_xchg(address target, address token0, address token1) {\n        if(router == address(0)) {\n          require(target != address(0), 'Champion: NO_TARGET');\n        }\n        else {\n          require(target == router, 'Champion: E_TARGET');\n        }\n        require(receiver != address(0), 'Champion: NO_RCVR');\n        bool allowed0 = (token0 == WETH) || getToken[token0].exists;\n        require(allowed0, 'Champion: E_TOKEN0');\n        bool allowed1 = (token1 == WETH) || getToken[token1].exists;\n        require(allowed1, 'Champion: E_TOKEN1');\n        _;\n    }\n\n    receive() external payable {\n        //assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n    }\n\n    //使用者个数\n    function allWorkersLength() external view returns(uint) {\n        return allWorkers.length;\n    }\n    //添加使用者\n    function addWorkers(\n        address[] calldata workers\n    ) external ensure_owner() returns(uint count) {\n        require(workers.length > 0, 'Champion: EMPTY1');\n        count = 0;\n        for (uint i; i < workers.length ; i++) {\n            address addr = workers[i];\n            if(!getWorker[addr].exists) {\n                allWorkers.push(addr);\n                getWorker[addr].exists = true;\n                getWorker[addr].index = allWorkers.length - 1;\n                count++;\n            }\n        }\n    }\n    //删除使用者\n    function removeWorkers(\n        address[] calldata workers\n    ) external ensure_owner() returns(uint count) {\n        require(workers.length > 0, 'Champion: EMPTY2');\n        count = 0;\n        for (uint i; i < workers.length ; i++) {\n            address addr = workers[i];\n            if(getWorker[addr].exists) {\n                INDEX memory deletedWorker = getWorker[addr];\n                if (deletedWorker.index != allWorkers.length-1) {\n                    address lastAddress = allWorkers[allWorkers.length-1];\n                    allWorkers[deletedWorker.index] = lastAddress;\n                    getWorker[lastAddress].index = deletedWorker.index;\n                }\n                delete getWorker[addr];\n                allWorkers.pop();\n                count++;\n            }\n        }\n    }\n    //清空使用者\n    function removeAllWorkers() external ensure_owner() returns(uint count) {\n        count = 0;\n        for (uint i; i < allWorkers.length ; i++) {\n            address addr = allWorkers[i];\n            if(getWorker[addr].exists) {\n                delete getWorker[addr];\n                count++;\n            }\n        }\n        delete allWorkers;\n    }\n\n    //代币个数\n    function allTokensLength() external view returns(uint) {\n        return allTokens.length;\n    }\n    //添加代币\n    function addTokens(\n        address[] calldata tokens\n    ) external ensure_owner() returns(uint count) {\n        require(tokens.length > 0, 'Champion: EMPTY1');\n        count = 0;\n        for (uint i; i < tokens.length ; i++) {\n            address addr = tokens[i];\n            if(!getToken[addr].exists) {\n                allTokens.push(addr);\n                getToken[addr].exists = true;\n                getToken[addr].index = allTokens.length - 1;\n                count++;\n            }\n        }\n    }\n    //删除代币\n    function removeTokens(\n        address[] calldata tokens\n    ) external ensure_owner() returns(uint count) {\n        require(tokens.length > 0, 'Champion: EMPTY2');\n        count = 0;\n        for (uint i; i < tokens.length ; i++) {\n            address addr = tokens[i];\n            if(getToken[addr].exists) {\n                INDEX memory deletedToken = getToken[addr];\n                if (deletedToken.index != allTokens.length-1) {\n                    address lastAddress = allTokens[allTokens.length-1];\n                    allTokens[deletedToken.index] = lastAddress;\n                    getToken[lastAddress].index = deletedToken.index;\n                }\n                delete getToken[addr];\n                allTokens.pop();\n                count++;\n            }\n        }\n    }\n    //清空代币\n    function removeAllTokens() external ensure_owner() returns(uint count) {\n        count = 0;\n        for (uint i; i < allTokens.length ; i++) {\n            address addr = allTokens[i];\n            if(getToken[addr].exists) {\n                delete getToken[addr];\n                count++;\n            }\n        }\n        delete allTokens;\n    }\n\n    //划转ETH\n    function transferETH(\n        address to\n    ) external ensure_owner() returns(bool) {\n        TransferHelper.safeTransferETH(to, address(this).balance);\n    }\n    //划转token\n    function transferTokens(\n        address token,\n        address to\n    ) external ensure_owner() returns(bool) {\n        uint amount = IERC20(token).balanceOf(address(this));\n        TransferHelper.safeTransfer(token, to, amount);\n    }\n    //兑换接收地址\n    function setReceiver(\n        address _receiver\n    ) external ensure_owner() {\n        require(_receiver != address(0), 'Champion: NO_RCVR');\n        receiver = _receiver;\n    }\n    //兑换路由/交易池/0地址时无限制\n    function setRouter(\n        address _router\n    ) external ensure_owner() {\n        router = _router;\n    }\n\n    //全体充值gas\n    function transferGasToAllWorkers(\n        uint balance,\n        uint minimum\n    ) external payable ensure_worker() returns(uint count) {\n        require(allWorkers.length > 0, 'Champion: EMPTY');\n        count = 0;\n        for (uint i; i < allWorkers.length ; i++) {\n            address addr = allWorkers[i];\n            if (addr.balance < balance) {\n                uint amount = balance - addr.balance;\n                if (amount < minimum) {\n                    amount = minimum;\n                }\n                TransferHelper.safeTransferETH(addr, amount);\n                count++;\n            }\n        }\n    }\n    //token-to-token\n    function v2_swapTokensForTokens(\n        address v2_router,\n        address tokenIn,\n        uint amountIn,\n        address tokenOut,\n        uint amountOutMin\n    ) external ensure_worker() ensure_xchg(v2_router, tokenIn, tokenOut) {\n        TransferHelper.safeApprove(tokenIn, v2_router, amountIn);\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n        IUniswapV2Router02(v2_router).swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, receiver, block.timestamp);\n    }\n    //BPool\n    function bp_swapExactAmountIn(\n        address bpool,\n        address tokenIn,\n        uint tokenAmountIn,\n        address tokenOut,\n        uint minAmountOut,\n        uint maxPrice\n    ) external ensure_worker() ensure_xchg(bpool, tokenIn, tokenOut)  returns (uint tokenAmountOut, uint spotPriceAfter) {\n        TransferHelper.safeApprove(tokenIn, bpool, tokenAmountIn);\n        (tokenAmountOut, spotPriceAfter) = IBPool(bpool).swapExactAmountIn(tokenIn, tokenAmountIn, tokenOut, minAmountOut, maxPrice);\n        if (receiver != address(this)) {\n          TransferHelper.safeTransfer(tokenOut, receiver, tokenAmountOut);\n        }\n    }\n}\n"},"localhost/championV4/contracts/IChampion.sol":{"content":"pragma solidity >=0.6.2;\n\ninterface IChampion {\n    //调用者个数\n    function allWorkersLength() external view returns(uint);\n    //添加调用者\n    function addWorkers(\n        address[] calldata _workers\n    ) external returns(uint count);\n    //删除调用者\n    function removeWorkers(\n        address[] calldata _workers\n    ) external returns(uint count);\n    //清空调用者\n    function removeAllWorkers() external returns(uint count);\n    //代币个数\n    function allTokensLength() external view returns(uint);\n    //添加代币\n    function addTokens(\n        address[] calldata _tokens\n    ) external returns(uint count);\n    //删除代币\n    function removeTokens(\n        address[] calldata _tokens\n    ) external returns(uint count);\n    //清空代币\n    function removeAllTokens() external returns(uint count);\n    //提币\n    function transferETH(\n        address to\n    ) external returns(bool);\n    function transferTokens(\n        address token,\n        address to\n    ) external returns(bool);\n    //兑换接收地址\n    function setReceiver(\n        address _receiver\n    ) external;\n    function setRouter(\n        address _router\n    ) external;\n\n    //全体充值gas\n    function transferGasToAllWorkers(\n        uint balance,\n        uint minimum\n    ) external payable returns(uint count);\n    //uni兑换\n    function v2_swapTokensForTokens(\n        address v2_router,\n        address tokenIn,\n        uint amountIn,\n        address tokenOut,\n        uint amountOutMin\n    ) external;\n    //BPool\n    function bp_swapExactAmountIn(\n        address bpool,\n        address tokenIn,\n        uint tokenAmountIn,\n        address tokenOut,\n        uint minAmountOut,\n        uint maxPrice\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\n}\n"},"localhost/championV4/contracts/interfaces/IBPool.sol":{"content":"pragma solidity >=0.6.2;\n\ninterface IBPool {\n    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\n    function swapExactAmountOut(address, uint, address, uint, uint) external returns (uint, uint);\n}"},"localhost/championV4/contracts/interfaces/IERC20.sol":{"content":"pragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"},"localhost/championV4/contracts/interfaces/IUniswapV2Router01.sol":{"content":"pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"localhost/championV4/contracts/interfaces/IUniswapV2Router02.sol":{"content":"pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"localhost/championV4/contracts/interfaces/IWETH.sol":{"content":"pragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n"},"localhost/championV4/contracts/libraries/SafeMath.sol":{"content":"pragma solidity =0.6.6;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n"},"localhost/championV4/contracts/libraries/TransferHelper.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}\n"}}}