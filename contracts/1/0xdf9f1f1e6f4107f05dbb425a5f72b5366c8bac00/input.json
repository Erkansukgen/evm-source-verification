{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":1000},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"durdeninu.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256\n    );\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n\nlibrary IterableMapping {\n    // Iterable mapping from address to uint;\n    struct Map {\n        address[] keys;\n        mapping(address => uint256) values;\n        mapping(address => uint256) indexOf;\n        mapping(address => bool) inserted;\n    }\n\n    function get(Map storage map, address key) internal view returns (uint256) {\n        return map.values[key];\n    }\n\n    function getIndexOfKey(Map storage map, address key)\n        internal\n        view\n        returns (int256)\n    {\n        if (!map.inserted[key]) {\n            return -1;\n        }\n        return int256(map.indexOf[key]);\n    }\n\n    function getKeyAtIndex(Map storage map, uint256 index)\n        internal\n        view\n        returns (address)\n    {\n        return map.keys[index];\n    }\n\n    function size(Map storage map) internal view returns (uint256) {\n        return map.keys.length;\n    }\n\n    function set(\n        Map storage map,\n        address key,\n        uint256 val\n    ) internal {\n        if (map.inserted[key]) {\n            map.values[key] = val;\n        } else {\n            map.inserted[key] = true;\n            map.values[key] = val;\n            map.indexOf[key] = map.keys.length;\n            map.keys.push(key);\n        }\n    }\n\n    function remove(Map storage map, address key) internal {\n        if (!map.inserted[key]) {\n            return;\n        }\n\n        delete map.inserted[key];\n        delete map.values[key];\n\n        uint256 index = map.indexOf[key];\n        uint256 lastIndex = map.keys.length - 1;\n        address lastKey = map.keys[lastIndex];\n\n        map.indexOf[lastKey] = index;\n        delete map.indexOf[key];\n\n        map.keys[index] = lastKey;\n        map.keys.pop();\n    }\n}\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(\n                subtractedValue,\n                \"ERC20: decreased allowance below zero\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(\n            amount,\n            \"ERC20: burn amount exceeds balance\"\n        );\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\ninterface DividendPayingTokenOptionalInterface {\n    /// @notice View the amount of dividend in wei that an address can withdraw.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\n    function withdrawableDividendOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\n    function withdrawnDividendOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @notice View the amount of dividend in wei that an address has earned in total.\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\n    function accumulativeDividendOf(address _owner)\n        external\n        view\n        returns (uint256);\n}\n\ninterface DividendPayingTokenInterface {\n    /// @notice View the amount of dividend in wei that an address can withdraw.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\n    function dividendOf(address _owner) external view returns (uint256);\n\n    /// @notice Distributes ether to token holders as dividends.\n    /// @dev SHOULD distribute the paid ether to token holders as dividends.\n    ///  SHOULD NOT directly transfer ether to token holders in this function.\n    ///  MUST emit a `DividendsDistributed` event when the amount of distributed ether is greater than 0.\n    function distributeDividends() external payable;\n\n    /// @notice Withdraws the ether distributed to the sender.\n    /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\n    ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\n    function withdrawDividend() external;\n\n    /// @dev This event MUST emit when ether is distributed to token holders.\n    /// @param from The address which sends ether to this contract.\n    /// @param weiAmount The amount of distributed ether in wei.\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\n\n    /// @dev This event MUST emit when an address withdraws their dividend.\n    /// @param to The address which withdraws ether from this contract.\n    /// @param weiAmount The amount of withdrawn ether in wei.\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary SafeMathInt {\n    int256 private constant MIN_INT256 = int256(1) << 255;\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\n\n    /**\n     * @dev Multiplies two int256 variables and fails on overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a * b;\n\n        // Detect overflow when multiplying MIN_INT256 with -1\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\n        require((b == 0) || (c / b == a));\n        return c;\n    }\n\n    /**\n     * @dev Division of two int256 variables and fails on overflow.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        // Prevent overflow when dividing MIN_INT256 by -1\n        require(b != -1 || a != MIN_INT256);\n\n        // Solidity already throws when dividing by 0.\n        return a / b;\n    }\n\n    /**\n     * @dev Subtracts two int256 variables and fails on overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n        return c;\n    }\n\n    /**\n     * @dev Adds two int256 variables and fails on overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n        return c;\n    }\n\n    /**\n     * @dev Converts to absolute value, and fails on overflow.\n     */\n    function abs(int256 a) internal pure returns (int256) {\n        require(a != MIN_INT256);\n        return a < 0 ? -a : a;\n    }\n\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\n        require(a >= 0);\n        return uint256(a);\n    }\n}\n\nlibrary SafeMathUint {\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\n        int256 b = int256(a);\n        require(b >= 0);\n        return b;\n    }\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\ncontract DividendPayingToken is\n    ERC20,\n    DividendPayingTokenInterface,\n    DividendPayingTokenOptionalInterface\n{\n    using SafeMath for uint256;\n    using SafeMathUint for uint256;\n    using SafeMathInt for int256;\n\n    // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\n    // For more discussion about choosing the value of `magnitude`,\n    //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\n    uint256 internal constant magnitude = 2**128;\n\n    uint256 internal magnifiedDividendPerShare;\n\n    // About dividendCorrection:\n    // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\n    // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\n    //   `dividendOf(_user)` should not be changed,\n    //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\n    // To keep the `dividendOf(_user)` unchanged, we add a correction term:\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\n    //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\n    //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\n    // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\n    mapping(address => int256) internal magnifiedDividendCorrections;\n    mapping(address => uint256) internal withdrawnDividends;\n\n    uint256 public totalDividendsDistributed;\n\n    constructor(string memory _name, string memory _symbol)\n        ERC20(_name, _symbol)\n    {}\n\n    /// @dev Distributes dividends whenever ether is paid to this contract.\n    receive() external payable {\n        distributeDividends();\n    }\n\n    /// @notice Distributes ether to token holders as dividends.\n    /// @dev It reverts if the total supply of tokens is 0.\n    /// It emits the `DividendsDistributed` event if the amount of received ether is greater than 0.\n    /// About undistributed ether:\n    ///   In each distribution, there is a small amount of ether not distributed,\n    ///     the magnified amount of which is\n    ///     `(msg.value * magnitude) % totalSupply()`.\n    ///   With a well-chosen `magnitude`, the amount of undistributed ether\n    ///     (de-magnified) in a distribution can be less than 1 wei.\n    ///   We can actually keep track of the undistributed ether in a distribution\n    ///     and try to distribute it in the next distribution,\n    ///     but keeping track of such data on-chain costs much more than\n    ///     the saved ether, so we don't do that.\n    function distributeDividends() public payable override {\n        require(totalSupply() > 0);\n\n        if (msg.value > 0) {\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\n                (msg.value).mul(magnitude) / totalSupply()\n            );\n            emit DividendsDistributed(msg.sender, msg.value);\n\n            totalDividendsDistributed = totalDividendsDistributed.add(\n                msg.value\n            );\n        }\n    }\n\n    /// @notice Withdraws the ether distributed to the sender.\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\n    function withdrawDividend() public virtual override {\n        _withdrawDividendOfUser(payable(msg.sender));\n    }\n\n    /// @notice Withdraws the ether distributed to the sender.\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\n    function _withdrawDividendOfUser(address payable user)\n        internal\n        virtual\n        returns (uint256)\n    {\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\n        if (_withdrawableDividend > 0) {\n            withdrawnDividends[user] = withdrawnDividends[user].add(\n                _withdrawableDividend\n            );\n            emit DividendWithdrawn(user, _withdrawableDividend);\n            (bool success, ) = user.call{\n                value: _withdrawableDividend,\n                gas: 3000\n            }(\"\");\n\n            if (!success) {\n                withdrawnDividends[user] = withdrawnDividends[user].sub(\n                    _withdrawableDividend\n                );\n                return 0;\n            }\n\n            return _withdrawableDividend;\n        }\n\n        return 0;\n    }\n\n    /// @notice View the amount of dividend in wei that an address can withdraw.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\n    function dividendOf(address _owner) public view override returns (uint256) {\n        return withdrawableDividendOf(_owner);\n    }\n\n    /// @notice View the amount of dividend in wei that an address can withdraw.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\n    function withdrawableDividendOf(address _owner)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\n    }\n\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\n    function withdrawnDividendOf(address _owner)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return withdrawnDividends[_owner];\n    }\n\n    /// @notice View the amount of dividend in wei that an address has earned in total.\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\n    /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\n    /// @param _owner The address of a token holder.\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\n    function accumulativeDividendOf(address _owner)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return\n            magnifiedDividendPerShare\n                .mul(balanceOf(_owner))\n                .toInt256Safe()\n                .add(magnifiedDividendCorrections[_owner])\n                .toUint256Safe() / magnitude;\n    }\n\n    /// @dev Internal function that transfer tokens from one address to another.\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\n    /// @param from The address to transfer from.\n    /// @param to The address to transfer to.\n    /// @param value The amount to be transferred.\n    function _transfer(\n        address from,\n        address to,\n        uint256 value\n    ) internal virtual override {\n        require(false);\n\n        int256 _magCorrection = magnifiedDividendPerShare\n            .mul(value)\n            .toInt256Safe();\n        magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from]\n            .add(_magCorrection);\n        magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(\n            _magCorrection\n        );\n    }\n\n    /// @dev Internal function that mints tokens to an account.\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\n    /// @param account The account that will receive the created tokens.\n    /// @param value The amount that will be created.\n    function _mint(address account, uint256 value) internal override {\n        super._mint(account, value);\n\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\n            account\n        ].sub((magnifiedDividendPerShare.mul(value)).toInt256Safe());\n    }\n\n    /// @dev Internal function that burns an amount of the token of a given account.\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\n    /// @param account The account whose tokens will be burnt.\n    /// @param value The amount that will be burnt.\n    function _burn(address account, uint256 value) internal override {\n        super._burn(account, value);\n\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\n            account\n        ].add((magnifiedDividendPerShare.mul(value)).toInt256Safe());\n    }\n\n    function _setBalance(address account, uint256 newBalance) internal {\n        uint256 currentBalance = balanceOf(account);\n\n        if (newBalance > currentBalance) {\n            uint256 mintAmount = newBalance.sub(currentBalance);\n            _mint(account, mintAmount);\n        } else if (newBalance < currentBalance) {\n            uint256 burnAmount = currentBalance.sub(newBalance);\n            _burn(account, burnAmount);\n        }\n    }\n}\n\ncontract DurdenInu is ERC20, Ownable {\n    using SafeMath for uint256;\n\n    IUniswapV2Router02 public uniswapV2Router;\n\n    address public uniswapV2Pair;\n\n    bool private swapping;\n    bool private stakingEnabled = false;\n    bool public tradingEnabled = false;\n    // Thursday, November 11, 2021 00:00:00 GMT\n    uint public immutable forceStartTradingAt = 1636588800000;\n    uint256 public sellAmount = 0;\n    uint256 public buyAmount = 0;\n    uint256 private totalSellFees;\n    uint256 private totalBuyFees;\n\n    DurdenInuDividendTracker public dividendTracker;\n\n    address public liquidityWallet;\n\n    address payable public operations1Address =\n        payable(0x32230D0303c0d04fEB9d49a099d0dd989F276551);\n    address payable public operations2Address =\n        payable(0x7e66F137B0eC9D83c93a310cFe1417224Dd06A6F);\n\n    uint256 public maxSellTransactionAmount = 0;\n    // Set the level of tokens in the pool to trigger the distribution\n    uint256 public swapTokensAtAmount = 25000000 * (10**9);\n\n    uint256 public operationsFees = 6;\n    uint256 public liquidityFee = 3;\n    uint256 public ETHRewardsBuyFee = 1;\n    uint256 public ETHRewardsSellFee = 1;\n    bool public swapAndLiquifyEnabled = true;\n\n    // use by default 500,000 gas to process auto-claiming dividends\n    uint256 public gasForProcessing = 500000;\n\n    // exlcude from fees and max transaction amount\n    mapping(address => bool) private _isExcludedFromFees;\n\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\n    // could be subject to a maximum transfer amount\n    mapping(address => bool) public automatedMarketMakerPairs;\n\n    mapping(address => uint256) public stakingBonus;\n    mapping(address => uint256) public stakingUntilDate;\n    mapping(uint256 => uint256) public stakingAmounts;\n\n    mapping(address => bool) private canTransferBeforeTradingIsEnabled;\n\n    event EnableAccountStaking(address indexed account, uint256 duration);\n    event UpdateStakingAmounts(uint256 duration, uint256 amount);\n\n    event EnableSwapAndLiquify(bool enabled);\n    event EnableStaking(bool enabled);\n\n    event SetPreSaleWallet(address wallet);\n\n    event UpdateDividendTracker(\n        address indexed newAddress,\n        address indexed oldAddress\n    );\n\n    event UpdateUniswapV2Router(\n        address indexed newAddress,\n        address indexed oldAddress\n    );\n\n    event TradingEnabled();\n\n    event UpdateFees(\n        uint256 operations,\n        uint256 liquidity,\n        uint256 ETHRewardsBuy,\n        uint256 ETHRewardsSell\n    );\n\n    event ExcludeFromFees(address indexed account, bool isExcluded);\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n\n    event LiquidityWalletUpdated(\n        address indexed newLiquidityWallet,\n        address indexed oldLiquidityWallet\n    );\n\n    event GasForProcessingUpdated(\n        uint256 indexed newValue,\n        uint256 indexed oldValue\n    );\n\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiqudity\n    );\n\n    event SendDividends(uint256 amount, uint256 opAmount, bool success);\n\n    event ProcessedDividendTracker(\n        uint256 iterations,\n        uint256 claims,\n        uint256 lastProcessedIndex,\n        bool indexed automatic,\n        uint256 gas,\n        address indexed processor\n    );\n\n    event UpdatePayoutToken(address account, address token);\n    event UpdateAllowTokens(address token, bool allow);\n\n    constructor() ERC20(\"Durden Inu\", \"DURDEN\") {\n        dividendTracker = new DurdenInuDividendTracker(payable(this));\n\n        liquidityWallet = owner();\n\n        uniswapV2Router = IUniswapV2Router02(\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n        );\n\n        // Create a uniswap pair for this new token\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\n                address(this),\n                uniswapV2Router.WETH()\n            );\n\n        _setAutomatedMarketMakerPair(uniswapV2Pair, true);\n\n        // exclude from receiving dividends\n        dividendTracker.excludeFromDividends(address(dividendTracker));\n        dividendTracker.excludeFromDividends(address(this));\n        dividendTracker.excludeFromDividends(\n            0x000000000000000000000000000000000000dEaD\n        );\n        dividendTracker.excludedFromDividends(address(0));\n        dividendTracker.excludeFromDividends(owner());\n        dividendTracker.excludeFromDividends(address(uniswapV2Router));\n\n        // exclude from paying fees or having max transaction amount\n        _isExcludedFromFees[liquidityWallet] = true;\n        _isExcludedFromFees[address(this)] = true;\n        _isExcludedFromFees[owner()] = true;\n        _isExcludedFromFees[address(dividendTracker)] = true;\n        _isExcludedFromFees[operations1Address] = true;\n        _isExcludedFromFees[operations2Address] = true;\n\n        totalSellFees = ETHRewardsSellFee.add(liquidityFee).add(operationsFees);\n        totalBuyFees = ETHRewardsBuyFee.add(liquidityFee).add(operationsFees);\n\n        canTransferBeforeTradingIsEnabled[owner()] = true;\n        /*\n            _mint is an internal function in ERC20.sol that is only called here,\n            and CANNOT be called ever again\n        */\n\n        _mint(owner(), 10000000000 * (10**9));\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 9;\n    }\n\n    receive() external payable {}\n\n    function updateStakingAmounts(uint256 duration, uint256 bonus)\n        public\n        onlyOwner\n    {\n        require(stakingAmounts[duration] != bonus);\n        require(bonus <= 100, \"Staking bonus can't exceed 100%\");\n\n        stakingAmounts[duration] = bonus;\n        emit UpdateStakingAmounts(duration, bonus);\n    }\n\n    function enableTrading() external onlyOwner {\n        require(!tradingEnabled);\n\n        tradingEnabled = true;\n        emit TradingEnabled();\n    }\n\n    function setPresaleWallet(address wallet) external onlyOwner {\n        canTransferBeforeTradingIsEnabled[wallet] = true;\n        _isExcludedFromFees[wallet] = true;\n        dividendTracker.excludeFromDividends(wallet);\n\n        emit SetPreSaleWallet(wallet);\n    }\n\n    function enableStaking(bool enable) public onlyOwner {\n        require(stakingEnabled != enable);\n        stakingEnabled = enable;\n\n        emit EnableStaking(enable);\n    }\n\n    function stake(uint256 duration) public {\n        require(stakingEnabled, \"Staking is not enabled\");\n        require(stakingAmounts[duration] != 0, \"Invalid staking duration\");\n        require(\n            stakingUntilDate[_msgSender()] < block.timestamp.add(duration),\n            \"already staked for a longer duration\"\n        );\n\n        stakingBonus[_msgSender()] = stakingAmounts[duration];\n        stakingUntilDate[_msgSender()] = block.timestamp.add(duration);\n\n        dividendTracker.setBalance(\n            _msgSender(),\n            getStakingBalance(_msgSender())\n        );\n\n        emit EnableAccountStaking(_msgSender(), duration);\n    }\n\n    function updateMaxAmount(uint256 newNum) public onlyOwner {\n        require(maxSellTransactionAmount != newNum);\n        // 0 means disabled\n        require(\n            maxSellTransactionAmount == 0 ||\n                maxSellTransactionAmount >= 10000000 * (10**9),\n            \"max sell amount must either be disabled or greater than 10 million\"\n        );\n        maxSellTransactionAmount = newNum * (10**9);\n    }\n\n    function updateDividendTracker(address newAddress) public onlyOwner {\n        require(newAddress != address(dividendTracker));\n\n        DurdenInuDividendTracker newDividendTracker = DurdenInuDividendTracker(\n            payable(newAddress)\n        );\n\n        require(newDividendTracker.owner() == address(this));\n\n        newDividendTracker.excludeFromDividends(address(newDividendTracker));\n        newDividendTracker.excludeFromDividends(address(this));\n        newDividendTracker.excludeFromDividends(owner());\n        newDividendTracker.excludeFromDividends(address(uniswapV2Router));\n\n        emit UpdateDividendTracker(newAddress, address(dividendTracker));\n\n        dividendTracker = newDividendTracker;\n    }\n\n    function updateOperations1Address(address payable newAddress)\n        public\n        onlyOwner\n    {\n        operations1Address = newAddress;\n    }\n\n    function updateOperations2Address(address payable newAddress)\n        public\n        onlyOwner\n    {\n        operations2Address = newAddress;\n    }\n\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\n        require(newAddress != address(uniswapV2Router));\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\n        uniswapV2Router = IUniswapV2Router02(newAddress);\n        dividendTracker.updateUniswapV2Router(newAddress);\n    }\n\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\n        require(_isExcludedFromFees[account] != excluded);\n        _isExcludedFromFees[account] = excluded;\n\n        emit ExcludeFromFees(account, excluded);\n    }\n\n    function enableSwapAndLiquify(bool enabled) public onlyOwner {\n        require(swapAndLiquifyEnabled != enabled);\n        swapAndLiquifyEnabled = enabled;\n\n        emit EnableSwapAndLiquify(enabled);\n    }\n\n    function setAutomatedMarketMakerPair(address pair, bool value)\n        public\n        onlyOwner\n    {\n        require(pair != uniswapV2Pair);\n\n        _setAutomatedMarketMakerPair(pair, value);\n    }\n\n    function setAllowCustomTokens(bool allow) public onlyOwner {\n        dividendTracker.setAllowCustomTokens(allow);\n    }\n\n    function setAllowAutoReinvest(bool allow) public onlyOwner {\n        dividendTracker.setAllowAutoReinvest(allow);\n    }\n\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\n        automatedMarketMakerPairs[pair] = value;\n\n        if (value) {\n            dividendTracker.excludeFromDividends(pair);\n        }\n\n        emit SetAutomatedMarketMakerPair(pair, value);\n    }\n\n    function updateLiquidityWallet(address newLiquidityWallet)\n        public\n        onlyOwner\n    {\n        excludeFromFees(newLiquidityWallet, true);\n        emit LiquidityWalletUpdated(newLiquidityWallet, liquidityWallet);\n        liquidityWallet = newLiquidityWallet;\n    }\n\n    function updateGasForProcessing(uint256 newValue) public onlyOwner {\n        require(newValue >= 200000 && newValue <= 5000000);\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\n        gasForProcessing = newValue;\n    }\n\n    function updateFees(\n        uint256 operations,\n        uint256 liquidity,\n        uint256 ETHRewardsBuy,\n        uint256 ETHRewardsSell\n    ) public onlyOwner {\n        require(operations <= 6, \"operation fees can't exceed 6%\");\n        require(liquidity <= 4, \"liquidity fees can't exceed 4%\");\n        require(\n            ETHRewardsBuy >= 1 && ETHRewardsBuy <= 3,\n            \"ETH reward fees must be between 1% and 3%\"\n        );\n        require(\n            ETHRewardsSell >= 1 && ETHRewardsSell <= 3,\n            \"ETH reward fees must be between 1% and 3%\"\n        );\n\n        operationsFees = operations;\n        liquidityFee = liquidity;\n        ETHRewardsBuyFee = ETHRewardsBuy;\n        ETHRewardsSellFee = ETHRewardsSell;\n\n        totalSellFees = ETHRewardsSellFee.add(liquidityFee).add(operationsFees);\n        totalBuyFees = ETHRewardsBuyFee.add(liquidityFee).add(operationsFees);\n\n        emit UpdateFees(operations, liquidity, ETHRewardsBuy, ETHRewardsSell);\n    }\n\n    function getStakingInfo(address account)\n        external\n        view\n        returns (uint256, uint256)\n    {\n        return (stakingUntilDate[account], stakingBonus[account]);\n    }\n\n    function getTotalDividendsDistributed() external view returns (uint256) {\n        return dividendTracker.totalDividendsDistributed();\n    }\n\n    function isExcludedFromFees(address account) public view returns (bool) {\n        return _isExcludedFromFees[account];\n    }\n\n    function withdrawableDividendOf(address account)\n        public\n        view\n        returns (uint256)\n    {\n        return dividendTracker.withdrawableDividendOf(account);\n    }\n\n    function dividendTokenBalanceOf(address account)\n        public\n        view\n        returns (uint256)\n    {\n        return dividendTracker.balanceOf(account);\n    }\n\n    function getAccountDividendsInfo(address account)\n        external\n        view\n        returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return dividendTracker.getAccount(account);\n    }\n\n    function getAccountDividendsInfoAtIndex(uint256 index)\n        external\n        view\n        returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return dividendTracker.getAccountAtIndex(index);\n    }\n\n    function processDividendTracker(uint256 gas) external {\n        (\n            uint256 iterations,\n            uint256 claims,\n            uint256 lastProcessedIndex\n        ) = dividendTracker.process(gas);\n        emit ProcessedDividendTracker(\n            iterations,\n            claims,\n            lastProcessedIndex,\n            false,\n            gas,\n            tx.origin\n        );\n    }\n\n    function claim() external {\n        dividendTracker.processAccount(payable(msg.sender), false);\n    }\n\n    function getLastProcessedIndex() external view returns (uint256) {\n        return dividendTracker.getLastProcessedIndex();\n    }\n\n    function getNumberOfDividendTokenHolders() external view returns (uint256) {\n        return dividendTracker.getNumberOfTokenHolders();\n    }\n\n    function setAutoClaim(bool value) external {\n        dividendTracker.setAutoClaim(msg.sender, value);\n    }\n\n    function setReinvest(bool value) external {\n        dividendTracker.setReinvest(msg.sender, value);\n    }\n\n    function setDividendsPaused(bool value) external onlyOwner {\n        dividendTracker.setDividendsPaused(value);\n    }\n\n    function isExcludedFromAutoClaim(address account)\n        external\n        view\n        returns (bool)\n    {\n        return dividendTracker.isExcludedFromAutoClaim(account);\n    }\n\n    function isReinvest(address account) external view returns (bool) {\n        return dividendTracker.isReinvest(account);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(\n            tradingEnabled || canTransferBeforeTradingIsEnabled[from] || block.timestamp >= forceStartTradingAt,\n            \"Trading has not yet been enabled\"\n        );\n\n        if (amount == 0) {\n            super._transfer(from, to, 0);\n            return;\n        } else if (\n            !swapping && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]\n        ) {\n            bool isSelling = automatedMarketMakerPairs[to];\n\n            if (!automatedMarketMakerPairs[from] && stakingEnabled) {\n                require(\n                    stakingUntilDate[from] <= block.timestamp,\n                    \"Tokens are staked and locked!\"\n                );\n                if (stakingUntilDate[from] != 0) {\n                    stakingUntilDate[from] = 0;\n                    stakingBonus[from] = 0;\n                }\n            }\n\n            uint256 ETHRewardsFee;\n\n            if (isSelling) {\n                ETHRewardsFee = ETHRewardsSellFee;\n            } else {\n                ETHRewardsFee = ETHRewardsBuyFee;\n            }\n\n            uint256 totalFees = ETHRewardsFee.add(liquidityFee).add(operationsFees);\n\n            if (\n                maxSellTransactionAmount != 0 &&\n                isSelling && // sells only by detecting transfer to automated market maker pair\n                from != address(uniswapV2Router) //router -> pair is removing liquidity which shouldn't have max\n            ) {\n                require(\n                    amount <= maxSellTransactionAmount,\n                    \"maxSellTransactionAmount.\"\n                );\n            }\n\n            uint256 contractTokenBalance = balanceOf(address(this));\n\n            bool canSwap = contractTokenBalance >= swapTokensAtAmount;\n\n            if (canSwap && !automatedMarketMakerPairs[from]) {\n                swapping = true;\n\n                if (swapAndLiquifyEnabled) {\n                    uint256 totalBuySell = buyAmount.add(sellAmount);\n                    uint256 swapAmountBought = contractTokenBalance\n                        .mul(buyAmount)\n                        .div(totalBuySell);\n                    uint256 swapAmountSold = contractTokenBalance\n                        .mul(sellAmount)\n                        .div(totalBuySell);\n\n                    uint256 swapBuyTokens = swapAmountBought\n                        .mul(liquidityFee)\n                        .div(totalBuyFees);\n\n                    uint256 swapSellTokens = swapAmountSold\n                        .mul(liquidityFee)\n                        .div(totalSellFees);\n\n                    uint256 swapTokens = swapSellTokens.add(swapBuyTokens);\n\n                    swapAndLiquify(swapTokens);\n                }\n\n                uint256 remainingBalance = balanceOf(address(this));\n\n                swapAndSendDividends(remainingBalance);\n\n                buyAmount = 0;\n                sellAmount = 0;\n\n                swapping = false;\n            }\n\n            uint256 fees = amount.mul(totalFees).div(100);\n\n            amount = amount.sub(fees);\n\n            if (isSelling) {\n                sellAmount = sellAmount.add(fees);\n            } else {\n                buyAmount = buyAmount.add(fees);\n            }\n\n            super._transfer(from, address(this), fees);\n\n            uint256 gas = gasForProcessing;\n\n            try dividendTracker.process(gas) returns (\n                uint256 iterations,\n                uint256 claims,\n                uint256 lastProcessedIndex\n            ) {\n                emit ProcessedDividendTracker(\n                    iterations,\n                    claims,\n                    lastProcessedIndex,\n                    true,\n                    gas,\n                    tx.origin\n                );\n            } catch {}\n        }\n\n        super._transfer(from, to, amount);\n\n        dividendTracker.setBalance(from, getStakingBalance(from));\n        dividendTracker.setBalance(to, getStakingBalance(to));\n    }\n\n    function getStakingBalance(address account) private view returns (uint256) {\n        return\n            stakingEnabled\n                ? balanceOf(account).mul(stakingBonus[account].add(100)).div(\n                    100\n                )\n                : balanceOf(account);\n    }\n\n    function swapAndLiquify(uint256 tokens) private {\n        // split the contract balance into halves\n        uint256 half = tokens.div(2);\n        uint256 otherHalf = tokens.sub(half);\n\n        // capture the contract's current ETH balance.\n        // this is so that we can capture exactly the amount of ETH that the\n        // swap creates, and not make the liquidity event include any ETH that\n        // has been manually sent to the contract\n        uint256 initialBalance = address(this).balance;\n\n        // swap tokens for ETH\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\n\n        // how much ETH did we just swap into?\n        uint256 newBalance = address(this).balance.sub(initialBalance);\n\n        // add liquidity to uniswap\n        addLiquidity(otherHalf, newBalance);\n\n        emit SwapAndLiquify(half, newBalance, otherHalf);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function updatePayoutToken(address token) public {\n        require(balanceOf(msg.sender) > 0);\n        require(token != address(this));\n\n        dividendTracker.updatePayoutToken(msg.sender, token);\n        emit UpdatePayoutToken(msg.sender, token);\n    }\n\n    function getPayoutToken(address account) public view returns (address) {\n        return dividendTracker.getPayoutToken(account);\n    }\n\n    function updateAllowTokens(address token, bool allow) public onlyOwner {\n        require(token != address(this));\n\n        dividendTracker.updateAllowTokens(token, allow);\n        emit UpdateAllowTokens(token, allow);\n    }\n\n    function getAllowTokens(address token) public view returns (bool) {\n        return dividendTracker.getAllowTokens(token);\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // add the liquidity\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            liquidityWallet,\n            block.timestamp\n        );\n    }\n\n    function forceSwapAndSendDividends(uint256 tokens) public onlyOwner {\n        uint256 totalAmount = buyAmount.add(sellAmount);\n        uint256 fromBuy = tokens.mul(buyAmount).div(totalAmount);\n        uint256 fromSell = tokens.mul(sellAmount).div(totalAmount);\n\n        swapAndSendDividends(tokens);\n\n        buyAmount = buyAmount.sub(fromBuy);\n        sellAmount = sellAmount.sub(fromSell);\n    }\n\n    function swapAndSendDividends(uint256 tokens) private {\n        swapTokensForEth(tokens);\n        uint256 totalAmount = buyAmount.add(sellAmount);\n\n        uint256 dividendsFromBuy = address(this)\n            .balance\n            .mul(buyAmount)\n            .div(totalAmount)\n            .mul(ETHRewardsBuyFee)\n            .div(ETHRewardsBuyFee.add(operationsFees));\n\n        uint256 dividendsFromSell = address(this)\n            .balance\n            .mul(sellAmount)\n            .div(totalAmount)\n            .mul(ETHRewardsSellFee)\n            .div(ETHRewardsSellFee.add(operationsFees));\n\n        uint256 dividends = dividendsFromBuy.add(dividendsFromSell);\n\n        (bool success, ) = address(dividendTracker).call{value: dividends}(\"\");\n\n        uint256 theRest = address(this).balance;\n        uint256 half = theRest.div(2);\n        uint256 otherHalf = theRest - half;\n        (bool successOp1, ) = address(operations1Address).call{value: half}(\"\");\n\n        (bool successOp2, ) = address(operations2Address).call{\n            value: otherHalf\n        }(\"\");\n\n        emit SendDividends(\n            dividends,\n            theRest,\n            success && successOp1 && successOp2\n        );\n    }\n}\n\ncontract DurdenInuDividendTracker is DividendPayingToken, Ownable {\n    using SafeMath for uint256;\n    using SafeMathInt for int256;\n    using IterableMapping for IterableMapping.Map;\n\n    IterableMapping.Map private tokenHoldersMap;\n    uint256 public lastProcessedIndex;\n\n    mapping(address => bool) public excludedFromDividends;\n    mapping(address => bool) public excludedFromAutoClaim;\n    mapping(address => bool) public autoReinvest;\n    mapping(address => address) public payoutToken;\n    mapping(address => bool) public allowTokens;\n    bool public allowCustomTokens;\n    bool public allowAutoReinvest;\n    bool public dividendsPaused = false;\n\n    IUniswapV2Router02 public uniswapV2Router;\n\n    DurdenInu public durdenInu;\n\n    mapping(address => uint256) public lastClaimTimes;\n\n    uint256 public immutable minimumTokenBalanceForAutoDividends;\n    uint256 public immutable minimumTokenBalanceForDividends;\n\n    event ExcludeFromDividends(address indexed account);\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\n    event DividendReinvested(\n        address indexed acount,\n        uint256 value,\n        bool indexed automatic\n    );\n    event Claim(\n        address indexed account,\n        uint256 amount,\n        bool indexed automatic\n    );\n    event DividendsPaused(bool paused);\n    event SetAllowCustomTokens(bool allow);\n    event SetAllowAutoReinvest(bool allow);\n\n    constructor(address payable mainContract)\n        DividendPayingToken(\n            \"DurdenInu_Dividend_Tracker\",\n            \"DurdenInu_Dividend_Tracker\"\n        )\n    {\n        durdenInu = DurdenInu(mainContract);\n        minimumTokenBalanceForAutoDividends = 1000000 * (10**9);\n        minimumTokenBalanceForDividends = 1000000 * (10**9);\n\n        uniswapV2Router = IUniswapV2Router02(\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D \n        );\n        allowCustomTokens = false;\n        allowAutoReinvest = true;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 9;\n    }\n\n    function _transfer(\n        address,\n        address,\n        uint256\n    ) internal pure override {\n        require(false, \"DurdenInu_Dividend_Tracker: No transfers allowed\");\n    }\n\n    function withdrawDividend() public pure override {\n        require(\n            false,\n            \"DurdenInu_Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main DurdenInu contract.\"\n        );\n    }\n\n    function isExcludedFromAutoClaim(address account)\n        external\n        view\n        onlyOwner\n        returns (bool)\n    {\n        return excludedFromAutoClaim[account];\n    }\n\n    function isReinvest(address account)\n        external\n        view\n        onlyOwner\n        returns (bool)\n    {\n        return autoReinvest[account];\n    }\n\n    function setAllowCustomTokens(bool allow) external onlyOwner {\n        require(allowCustomTokens != allow);\n        allowCustomTokens = allow;\n        emit SetAllowCustomTokens(allow);\n    }\n\n    function setAllowAutoReinvest(bool allow) external onlyOwner {\n        require(allowAutoReinvest != allow);\n        allowAutoReinvest = allow;\n        emit SetAllowAutoReinvest(allow);\n    }\n\n    function excludeFromDividends(address account) external onlyOwner {\n        require(!excludedFromDividends[account]);\n        excludedFromDividends[account] = true;\n\n        _setBalance(account, 0);\n        tokenHoldersMap.remove(account);\n\n        emit ExcludeFromDividends(account);\n    }\n\n    function setAutoClaim(address account, bool value) external onlyOwner {\n        excludedFromAutoClaim[account] = value;\n    }\n\n    function setReinvest(address account, bool value) external onlyOwner {\n        autoReinvest[account] = value;\n    }\n\n    function setDividendsPaused(bool value) external onlyOwner {\n        require(dividendsPaused != value);\n        dividendsPaused = value;\n        emit DividendsPaused(value);\n    }\n\n    function getLastProcessedIndex() external view returns (uint256) {\n        return lastProcessedIndex;\n    }\n\n    function getNumberOfTokenHolders() external view returns (uint256) {\n        return tokenHoldersMap.keys.length;\n    }\n\n    function getAccount(address _account)\n        public\n        view\n        returns (\n            address account,\n            int256 index,\n            int256 iterationsUntilProcessed,\n            uint256 withdrawableDividends,\n            uint256 totalDividends,\n            uint256 lastClaimTime\n        )\n    {\n        account = _account;\n\n        index = tokenHoldersMap.getIndexOfKey(account);\n\n        iterationsUntilProcessed = -1;\n\n        if (index >= 0) {\n            if (uint256(index) > lastProcessedIndex) {\n                iterationsUntilProcessed = index.sub(\n                    int256(lastProcessedIndex)\n                );\n            } else {\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length >\n                    lastProcessedIndex\n                    ? tokenHoldersMap.keys.length.sub(lastProcessedIndex)\n                    : 0;\n\n                iterationsUntilProcessed = index.add(\n                    int256(processesUntilEndOfArray)\n                );\n            }\n        }\n\n        withdrawableDividends = withdrawableDividendOf(account);\n        totalDividends = accumulativeDividendOf(account);\n\n        lastClaimTime = lastClaimTimes[account];\n    }\n\n    function getAccountAtIndex(uint256 index)\n        public\n        view\n        returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        if (index >= tokenHoldersMap.size()) {\n            return (\n                0x0000000000000000000000000000000000000000,\n                -1,\n                -1,\n                0,\n                0,\n                0\n            );\n        }\n\n        address account = tokenHoldersMap.getKeyAtIndex(index);\n\n        return getAccount(account);\n    }\n\n    function setBalance(address account, uint256 newBalance)\n        external\n        onlyOwner\n    {\n        if (excludedFromDividends[account]) {\n            return;\n        }\n\n        if (newBalance < minimumTokenBalanceForDividends) {\n            tokenHoldersMap.remove(account);\n            _setBalance(account, 0);\n\n            return;\n        }\n\n        _setBalance(account, newBalance);\n\n        if (newBalance >= minimumTokenBalanceForAutoDividends) {\n            tokenHoldersMap.set(account, newBalance);\n        } else {\n            tokenHoldersMap.remove(account);\n        }\n    }\n\n    function process(uint256 gas)\n        public\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\n\n        if (numberOfTokenHolders == 0 || dividendsPaused) {\n            return (0, 0, lastProcessedIndex);\n        }\n\n        uint256 _lastProcessedIndex = lastProcessedIndex;\n\n        uint256 gasUsed = 0;\n\n        uint256 gasLeft = gasleft();\n\n        uint256 iterations = 0;\n        uint256 claims = 0;\n\n        while (gasUsed < gas && iterations < numberOfTokenHolders) {\n            _lastProcessedIndex++;\n\n            if (_lastProcessedIndex >= numberOfTokenHolders) {\n                _lastProcessedIndex = 0;\n            }\n\n            address account = tokenHoldersMap.keys[_lastProcessedIndex];\n\n            if (!excludedFromAutoClaim[account]) {\n                if (processAccount(payable(account), true)) {\n                    claims++;\n                }\n            }\n\n            iterations++;\n\n            uint256 newGasLeft = gasleft();\n\n            if (gasLeft > newGasLeft) {\n                gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\n            }\n\n            gasLeft = newGasLeft;\n        }\n\n        lastProcessedIndex = _lastProcessedIndex;\n\n        return (iterations, claims, lastProcessedIndex);\n    }\n\n    function processAccount(address payable account, bool automatic)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        if (dividendsPaused) {\n            return false;\n        }\n\n        bool reinvest = autoReinvest[account];\n\n        if (automatic && reinvest && !allowAutoReinvest) {\n            return false;\n        }\n\n        uint256 amount = reinvest\n            ? _reinvestDividendOfUser(account)\n            : _withdrawDividendOfUser(account);\n\n        if (amount > 0) {\n            lastClaimTimes[account] = block.timestamp;\n            if (reinvest) {\n                emit DividendReinvested(account, amount, automatic);\n            } else {\n                emit Claim(account, amount, automatic);\n            }\n            return true;\n        }\n\n        return false;\n    }\n\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\n        uniswapV2Router = IUniswapV2Router02(newAddress);\n    }\n\n    function updatePayoutToken(address account, address token)\n        public\n        onlyOwner\n    {\n        require(\n            allowTokens[token] || token == address(0),\n            \"Token not in allow list\"\n        );\n        payoutToken[account] = token;\n    }\n\n    function getPayoutToken(address account) public view returns (address) {\n        return payoutToken[account];\n    }\n\n    function updateAllowTokens(address token, bool allow) public onlyOwner {\n        allowTokens[token] = allow;\n    }\n\n    function getAllowTokens(address token) public view returns (bool) {\n        return allowTokens[token];\n    }\n\n    function _reinvestDividendOfUser(address account)\n        private\n        returns (uint256)\n    {\n        uint256 _withdrawableDividend = withdrawableDividendOf(account);\n        if (_withdrawableDividend > 0) {\n            bool success;\n\n            withdrawnDividends[account] = withdrawnDividends[account].add(\n                _withdrawableDividend\n            );\n\n            address[] memory path = new address[](2);\n            path[0] = uniswapV2Router.WETH();\n            path[1] = address(durdenInu);\n\n            uint256 prevBalance = durdenInu.balanceOf(address(this));\n\n            // make the swap\n            try\n                uniswapV2Router\n                    .swapExactETHForTokensSupportingFeeOnTransferTokens{\n                    value: _withdrawableDividend\n                }(\n                    0, // accept any amount of Tokens\n                    path,\n                    address(this),\n                    block.timestamp\n                )\n            {\n                uint256 received = durdenInu.balanceOf(address(this)).sub(\n                    prevBalance\n                );\n                if (received > 0) {\n                    success = true;\n                    durdenInu.transfer(account, received);\n                } else {\n                    success = false;\n                }\n            } catch {\n                success = false;\n            }\n\n            if (!success) {\n                withdrawnDividends[account] = withdrawnDividends[account].sub(\n                    _withdrawableDividend\n                );\n                return 0;\n            }\n\n            return _withdrawableDividend;\n        }\n\n        return 0;\n    }\n\n    function _withdrawDividendOfUser(address payable user)\n        internal\n        override\n        returns (uint256)\n    {\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\n        if (_withdrawableDividend > 0) {\n            withdrawnDividends[user] = withdrawnDividends[user].add(\n                _withdrawableDividend\n            );\n\n            address tokenAddress = payoutToken[user];\n            bool success;\n\n            // if no tokenAddress assume eth payout\n            if (\n                !allowCustomTokens ||\n                tokenAddress == address(0) ||\n                !allowTokens[tokenAddress]\n            ) {\n                (success, ) = user.call{\n                    value: _withdrawableDividend,\n                    gas: 3000\n                }(\"\");\n            } else {\n                //investor wants to be payed out in a custom token\n                address[] memory path = new address[](2);\n                path[0] = uniswapV2Router.WETH();\n                path[1] = tokenAddress;\n\n                try\n                    uniswapV2Router\n                        .swapExactETHForTokensSupportingFeeOnTransferTokens{\n                        value: _withdrawableDividend\n                    }(\n                        0, // accept any amount of Tokens\n                        path,\n                        user,\n                        block.timestamp\n                    )\n                {\n                    success = true;\n                } catch {\n                    success = false;\n                }\n            }\n\n            if (!success) {\n                withdrawnDividends[user] = withdrawnDividends[user].sub(\n                    _withdrawableDividend\n                );\n                return 0;\n            } else {\n                emit DividendWithdrawn(user, _withdrawableDividend);\n            }\n\n            return _withdrawableDividend;\n        }\n\n        return 0;\n    }\n}"}}}