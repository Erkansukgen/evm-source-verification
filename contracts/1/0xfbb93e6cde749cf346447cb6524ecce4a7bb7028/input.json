{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/FlashbotMultiCall.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.7.6;\n\ninterface IUniswapV2Router {\n\n  function getAmountsOut(uint256 amountIn, address[] memory path)\n    external view returns (uint256[] memory amounts);\n\n  function swapExactTokensForTokens(\n    //amount of tokens we are sending in\n    uint256 amountIn,\n    //the minimum amount of tokens we want out of the trade\n    uint256 amountOutMin,\n    //list of token addresses we are going to trade in.  this is necessary to calculate amounts\n    address[] calldata path,\n    //this is the address we are going to send the output tokens to\n    address to,\n    //the last time that the trade is valid for\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n}\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n    function withdraw(uint) external;\n}\n\ncontract FlashbotMultiCall {\n\n    address private constant UNISWAP_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address private constant WETH_TOKEN = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    receive() external payable {\n    }\n\n    //this swapEth function is used to trade from one token to another\n    //the inputs are self explainatory\n    //token out = the token address you want as the output of this trade\n    //amount in = the amount of tokens you are sending in\n    //amount out Min = the minimum amount of tokens you want out of the trade\n    //to = the address you want the tokens to be sent to\n    //fees = the fees you want to be sent to flashboat\n   function swapEth(address _tokenOut, uint256 _amountIn, uint256 _amountOutMin, address _to,uint256 _fees) external {\n\n        IWETH(WETH_TOKEN).approve(UNISWAP_V2_ROUTER, _amountIn);\n\n        address[] memory path;\n        path = new address[](2);\n        path[0] = WETH_TOKEN;\n        path[1] = _tokenOut;\n\n        // then we will call swapExactTokensForTokens\n        // for the deadline we will pass in block.timestamp\n        // the deadline is the latest time the trade is valid for\n        IUniswapV2Router(UNISWAP_V2_ROUTER).swapExactTokensForTokens(_amountIn, _amountOutMin, path, _to, block.timestamp);\n        block.coinbase.transfer(_fees);\n    }\n}"
    }
  }
}