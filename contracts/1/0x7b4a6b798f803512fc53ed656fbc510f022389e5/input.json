{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Interfaces/IUniswapRouterV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.6.11;\n\ninterface IUniswapRouterV2 {\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns (uint[] memory amounts);\n}"
    },
    "Treasury/FarmBossV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/*\n\tThe farmboss contracts allows for a whitelist of contracts and functions a \"farmer\" is allowed to call. Tokens can be whitelisted, and contracts approved for call by DAO governance.\n\tFarmers need to be approved by DAO governance as well, before they are allowed to call any whitelisted contract/function. \n\n\tIf needed, the governance can directly execute any action and bypass the whitelist.\n\n\tThis contract needs to be inherited by another contract that implements _initFirstFarms() which gets called in the constructor. This initializes the first farms that the fund\n\tis allowed to invest into, so a governance proposal isn't needed right away.\n*/\n\npragma solidity ^0.6.11;\npragma experimental ABIEncoderV2;\n\nimport \"../openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../openzeppelin/contracts/token/ERC20/SafeERC20.sol\"; // call ERC20 safely\nimport \"../openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../openzeppelin/contracts/utils/Address.sol\";\n\nimport \"./FarmTreasuryV1.sol\";\nimport \"../Interfaces/IUniswapRouterV2.sol\";\n\nabstract contract FarmBossV1 {\n\tusing SafeERC20 for IERC20;\n\tusing SafeMath for uint256;\n\tusing Address for address;\n\n\tmapping(address => mapping(bytes4 => uint256)) public whitelist; // contracts -> mapping (functionSig -> allowed, msg.value allowed)\n\tmapping(address => bool) public farmers;\n\n\t// constants for the whitelist logic\n\tbytes4 constant internal FALLBACK_FN_SIG = 0xffffffff;\n\t// 0 = not allowed ... 1 = allowed however value must be zero ... 2 = allowed with msg.value either zero or non-zero\n\tuint256 constant internal NOT_ALLOWED = 0;\n\tuint256 constant internal ALLOWED_NO_MSG_VALUE = 1;\n\tuint256 constant internal ALLOWED_W_MSG_VALUE = 2; \n\n\tuint256 internal constant LOOP_LIMIT = 200;\n\tuint256 public constant max = 10000;\n\tuint256 public CRVTokenTake = 1500; // pct of max\n\n\t// for passing to functions more cleanly\n\tstruct WhitelistData {\n\t\taddress account;\n\t\tbytes4 fnSig;\n\t\tbool valueAllowed;\n\t}\n\n\t// for passing to functions more cleanly\n\tstruct Approves {\n\t\taddress token;\n\t\taddress allow;\n\t}\n\n\taddress payable public governance;\n\taddress public daoCouncilMultisig;\n\taddress public treasury;\n\taddress public underlying;\n\n\t// constant - if the addresses change, assume that the functions will be different too and this will need a rewrite\n\taddress public constant UniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\t\n\taddress public constant SushiswapRouter = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\n\taddress public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\taddress public constant CRVToken = 0xD533a949740bb3306d119CC777fa900bA034cd52;\n\n\tevent NewFarmer(address _farmer);\n\tevent RmFarmer(address _farmer);\n\n\tevent NewWhitelist(address _contract, bytes4 _fnSig, uint256 _allowedType);\n\tevent RmWhitelist(address _contract, bytes4 _fnSig);\n\n\tevent NewApproval(address _token, address _contract);\n\tevent RmApproval(address _token, address _contract);\n\n\tevent ExecuteSuccess(bytes _returnData);\n\tevent ExecuteERROR(bytes _returnData);\n\n\tconstructor(address payable _governance, address _daoMultisig, address _treasury, address _underlying) public {\n\t\tgovernance = _governance;\n\t\tdaoCouncilMultisig = _daoMultisig;\n\t\ttreasury = _treasury;\n\t\tunderlying = _underlying;\n\n\t\tfarmers[msg.sender] = true;\n\t\temit NewFarmer(msg.sender);\n\t\t\n\t\t// no need to set to zero first on safeApprove, is brand new contract\n\t\tIERC20(_underlying).safeApprove(_treasury, type(uint256).max); // treasury has full control over underlying in this contract\n\n\t\t_initFirstFarms();\n\t}\n\n\treceive() payable external {}\n\n\t// function stub, this needs to be implemented in a contract which inherits this for a valid deployment\n    // some fixed logic to set up the first farmers, farms, whitelists, approvals, etc. future farms will need to be approved by governance\n\t// called on init only\n    // IMPLEMENT THIS\n\tfunction _initFirstFarms() internal virtual;\n\n\tfunction setGovernance(address payable _new) external {\n\t\trequire(msg.sender == governance, \"FARMBOSSV1: !governance\");\n\n\t\tgovernance = _new;\n\t}\n\n\tfunction setDaoCouncilMultisig(address _new) external {\n\t\trequire(msg.sender == governance || msg.sender == daoCouncilMultisig, \"FARMBOSSV1: !(governance || multisig)\");\n\n\t\tdaoCouncilMultisig = _new;\n\t}\n\n\tfunction setCRVTokenTake(uint256 _new) external {\n\t\trequire(msg.sender == governance || msg.sender == daoCouncilMultisig, \"FARMBOSSV1: !(governance || multisig)\");\n\t\trequire(_new <= max.div(2), \"FARMBOSSV1: >half CRV to take\");\n\n\t\tCRVTokenTake = _new;\n\t}\n\n\tfunction getWhitelist(address _contract, bytes4 _fnSig) external view returns (uint256){\n\t\treturn whitelist[_contract][_fnSig];\n\t}\n\n\tfunction changeFarmers(address[] calldata _newFarmers, address[] calldata _rmFarmers) external {\n\t\trequire(msg.sender == governance, \"FARMBOSSV1: !governance\");\n\t\trequire(_newFarmers.length.add(_rmFarmers.length) <= LOOP_LIMIT, \"FARMBOSSV1: >LOOP_LIMIT\"); // dont allow unbounded loops\n\n\t\t// add the new farmers in\n\t\tfor (uint256 i = 0; i < _newFarmers.length; i++){\n\t\t\tfarmers[_newFarmers[i]] = true;\n\n\t\t\temit NewFarmer(_newFarmers[i]);\n\t\t}\n\t\t// remove farmers\n\t\tfor (uint256 j = 0; j < _rmFarmers.length; j++){\n\t\t\tfarmers[_rmFarmers[j]] = false;\n\n\t\t\temit RmFarmer(_rmFarmers[j]);\n\t\t}\n\t}\n\n\t// callable by the DAO Council multisig, we can instantly remove a group of malicious farmers (no delay needed from DAO voting)\n\tfunction emergencyRemoveFarmers(address[] calldata _rmFarmers) external {\n\t\trequire(msg.sender == daoCouncilMultisig, \"FARMBOSSV1: !multisig\");\n\t\trequire(_rmFarmers.length <= LOOP_LIMIT, \"FARMBOSSV1: >LOOP_LIMIT\"); // dont allow unbounded loops\n\n\t\t// remove farmers\n\t\tfor (uint256 j = 0; j < _rmFarmers.length; j++){\n\t\t\tfarmers[_rmFarmers[j]] = false;\n\n\t\t\temit RmFarmer(_rmFarmers[j]);\n\t\t}\n\t}\n\n\tfunction changeWhitelist(WhitelistData[] calldata _newActions, WhitelistData[] calldata _rmActions, Approves[] calldata _newApprovals, Approves[] calldata _newDepprovals) external {\n\t\trequire(msg.sender == governance, \"FARMBOSSV1: !governance\");\n\t\trequire(_newActions.length.add(_rmActions.length).add(_newApprovals.length).add(_newDepprovals.length) <= LOOP_LIMIT, \"FARMBOSSV1: >LOOP_LIMIT\"); // dont allow unbounded loops\n\n\t\t// add to whitelist, or change a whitelist entry if want to allow/disallow msg.value\n\t\tfor (uint256 i = 0; i < _newActions.length; i++){\n\t\t\t_addWhitelist(_newActions[i].account, _newActions[i].fnSig, _newActions[i].valueAllowed);\n\t\t}\n\t\t// remove from whitelist\n\t\tfor (uint256 j = 0; j < _rmActions.length; j++){\n\t\t\twhitelist[_rmActions[j].account][_rmActions[j].fnSig] = NOT_ALLOWED;\n\n\t\t\temit RmWhitelist(_rmActions[j].account, _rmActions[j].fnSig);\n\t\t}\n\t\t// approve safely, needs to be set to zero, then max.\n\t\tfor (uint256 k = 0; k < _newApprovals.length; k++){\n\t\t\t_approveMax(_newApprovals[k].token, _newApprovals[k].allow);\n\t\t}\n\t\t// de-approve these contracts\n\t\tfor (uint256 l = 0; l < _newDepprovals.length; l++){\n\t\t\tIERC20(_newDepprovals[l].token).safeApprove(_newDepprovals[l].allow, 0);\n\n\t\t\temit RmApproval(_newDepprovals[l].token, _newDepprovals[l].allow);\n\t\t}\n\t}\n\n\tfunction _addWhitelist(address _contract, bytes4 _fnSig, bool _msgValueAllowed) internal {\n\t\tif (_msgValueAllowed){\n\t\t\twhitelist[_contract][_fnSig] = ALLOWED_W_MSG_VALUE;\n\t\t\temit NewWhitelist(_contract, _fnSig, ALLOWED_W_MSG_VALUE);\n\t\t}\n\t\telse {\n\t\t\twhitelist[_contract][_fnSig] = ALLOWED_NO_MSG_VALUE;\n\t\t\temit NewWhitelist(_contract, _fnSig, ALLOWED_NO_MSG_VALUE);\n\t\t}\n\t}\n\n\tfunction _approveMax(address _token, address _account) internal {\n\t\tIERC20(_token).safeApprove(_account, 0);\n\t\tIERC20(_token).safeApprove(_account, type(uint256).max);\n\n\t\temit NewApproval(_token, _account);\n\t}\n\n\t// callable by the DAO Council multisig, we can instantly remove a group of malicious contracts / approvals (no delay needed from DAO voting)\n\tfunction emergencyRemoveWhitelist(WhitelistData[] calldata _rmActions, Approves[] calldata _newDepprovals) external {\n\t\trequire(msg.sender == daoCouncilMultisig, \"FARMBOSSV1: !multisig\");\n\t\trequire(_rmActions.length.add(_newDepprovals.length) <= LOOP_LIMIT, \"FARMBOSSV1: >LOOP_LIMIT\"); // dont allow unbounded loops\n\n\t\t// remove from whitelist\n\t\tfor (uint256 j = 0; j < _rmActions.length; j++){\n\t\t\twhitelist[_rmActions[j].account][_rmActions[j].fnSig] = NOT_ALLOWED;\n\n\t\t\temit RmWhitelist(_rmActions[j].account, _rmActions[j].fnSig);\n\t\t}\n\t\t// de-approve these contracts\n\t\tfor (uint256 l = 0; l < _newDepprovals.length; l++){\n\t\t\tIERC20(_newDepprovals[l].token).safeApprove(_newDepprovals[l].allow, 0);\n\n\t\t\temit RmApproval(_newDepprovals[l].token, _newDepprovals[l].allow);\n\t\t}\n\t}\n\n\tfunction govExecute(address payable _target, uint256 _value, bytes calldata _data) external returns (bool, bytes memory){\n\t\trequire(msg.sender == governance, \"FARMBOSSV1: !governance\");\n\n\t\treturn _execute(_target, _value, _data);\n\t}\n\n\tfunction farmerExecute(address payable _target, uint256 _value, bytes calldata _data) external returns (bool, bytes memory){\n\t\trequire(farmers[msg.sender] || msg.sender == daoCouncilMultisig, \"FARMBOSSV1: !(farmer || multisig)\");\n\t\t\n\t\trequire(_checkContractAndFn(_target, _value, _data), \"FARMBOSSV1: target.fn() not allowed. ask DAO for approval.\");\n\t\treturn _execute(_target, _value, _data);\n\t}\n\n\t// farmer is NOT allowed to call the functions approve, transfer on an ERC20\n\t// this will give the farmer direct control over assets held by the contract\n\t// governance must approve() farmer to interact with contracts & whitelist these contracts\n\t// even if contracts are whitelisted, farmer cannot call transfer/approve (many vault strategies will have ERC20 inheritance)\n\t// these approvals must also be called when setting up a new strategy from governance\n\n\t// if there is a strategy that has additonal functionality for the farmer to take control of assets ie: Uniswap \"add a send\"\n\t// then a \"safe\" wrapper contract must be made, ie: you can call Uniswap but \"add a send is disabled, only msg.sender in this field\"\n\t// strategies must be checked carefully so that farmers cannot take control of assets. trustless farming!\n\tfunction _checkContractAndFn(address _target, uint256 _value, bytes calldata _data) internal view returns (bool) {\n\n\t\tbytes4 _fnSig;\n\t\tif (_data.length < 4){ // we are calling a payable function, or the data is otherwise invalid (need 4 bytes for any fn call)\n\t\t\t_fnSig = FALLBACK_FN_SIG;\n\t\t}\n\t\telse { // we are calling a normal function, get the function signature from the calldata (first 4 bytes of calldata)\n\n\t\t\t//////////////////\n\t\t\t// NOTE: here we must use assembly in order to covert bytes -> bytes4\n\t\t\t// See consensys code for bytes -> bytes32: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\n\t\t\t//////////////////\n\n\t\t\tbytes memory _fnSigBytes = bytes(_data[0:4]);\n\t\t\tassembly {\n\t            _fnSig := mload(add(add(_fnSigBytes, 0x20), 0))\n\t        }\n\t\t\t// _fnSig = abi.decode(bytes(_data[0:4]), (bytes4)); // NOTE: does not work, open solidity issue: https://github.com/ethereum/solidity/issues/9170\n\t\t}\n\n\t\tbytes4 _transferSig = 0xa9059cbb;\n\t\tbytes4 _approveSig = 0x095ea7b3;\n\t\tif (_fnSig == _transferSig || _fnSig == _approveSig || whitelist[_target][_fnSig] == NOT_ALLOWED){\n\t\t\treturn false;\n\t\t}\n\t\t// check if value not allowed & value\n\t\telse if (whitelist[_target][_fnSig] == ALLOWED_NO_MSG_VALUE && _value > 0){\n\t\t\treturn false;\n\t\t}\n\t\t// either ALLOWED_W_MSG_VALUE or ALLOWED_NO_MSG_VALUE with zero value\n\t\treturn true;\n\t}\n\n\t// call arbitrary contract & function, forward all gas, return success? & data\n\tfunction _execute(address payable _target, uint256 _value, bytes memory _data) internal returns (bool, bytes memory){\n\t\tbool _success;\n\t\tbytes memory _returnData;\n\n\t\tif (_data.length == 4 && _data[0] == 0xff && _data[1] == 0xff && _data[2] == 0xff && _data[3] == 0xff){ // check if fallback function is invoked, send w/ no data\n\t\t\t(_success, _returnData) = _target.call{value: _value}(\"\");\n\t\t}\n\t\telse {\n\t\t\t(_success, _returnData) = _target.call{value: _value}(_data);\n\t\t}\n\n\t\tif (_success){\n\t\t\temit ExecuteSuccess(_returnData);\n\t\t}\n\t\telse {\n\t\t\temit ExecuteERROR(_returnData);\n\t\t}\n\n\t\treturn (_success, _returnData);\n\t}\n\n\t// we can call this function on the treasury from farmer/govExecute, but let's make it easy\n\tfunction rebalanceUp(uint256 _amount, address _farmerRewards) external {\n\t\trequire(msg.sender == governance || farmers[msg.sender] || msg.sender == daoCouncilMultisig, \"FARMBOSSV1: !(governance || farmer || multisig)\");\n\n\t\tFarmTreasuryV1(treasury).rebalanceUp(_amount, _farmerRewards);\n\t}\n\n\t// is a Sushi/Uniswap wrapper to sell tokens for extra safety. This way, the swapping routes & destinations are checked & much safer than simply whitelisting the function\n\t// the function takes the calldata directly as an input. this way, calling the function is very similar to a normal farming call\n\tfunction sellExactTokensForUnderlyingToken(bytes calldata _data, bool _isSushi) external returns (uint[] memory amounts){\n\t\trequire(msg.sender == governance || farmers[msg.sender] || msg.sender == daoCouncilMultisig, \"FARMBOSSV1: !(governance || farmer || multisig)\");\n\n\t\t(uint256 amountIn, uint256 amountOutMin, address[] memory path, address to, uint256 deadline) = abi.decode(_data[4:], (uint256, uint256, address[], address, uint256));\n\n\t\t// check the data to make sure it's an allowed sell\n\t\trequire(to == address(this), \"FARMBOSSV1: invalid sell, to != address(this)\");\n\n\t\t// strictly require paths to be [token, WETH, underlying] \n\t\t// note: underlying can be WETH --> [token, WETH]\n\t\tif (underlying == WETH){\n\t\t\trequire(path.length == 2, \"FARMBOSSV1: path.length != 2\");\n\t\t\trequire(path[1] == WETH, \"FARMBOSSV1: WETH invalid sell, output != underlying\");\n\t\t}\n\t\telse {\n\t\t\trequire(path.length == 3, \"FARMBOSSV1: path.length != 3\");\n\t\t\trequire(path[1] == WETH, \"FARMBOSSV1: path[1] != WETH\");\n\t\t\trequire(path[2] == underlying, \"FARMBOSSV1: invalid sell, output != underlying\");\n\t\t}\n\n\t\t// DAO takes some percentage of CRVToken pre-sell as part of a long term strategy \n\t\tif (path[0] == CRVToken && CRVTokenTake > 0){\n\t\t\tuint256 _amtTake = amountIn.mul(CRVTokenTake).div(max); // take some portion, and send to governance\n\n\t\t\t// redo the swap input variables, to account for the amount taken\n\t\t\tamountIn = amountIn.sub(_amtTake);\n\t\t\tamountOutMin = amountOutMin.mul(max.sub(CRVTokenTake)).div(max); // reduce the amountOutMin by the same ratio, therefore target slippage pct is the same\n\n\t\t\tIERC20(CRVToken).safeTransfer(governance, _amtTake);\n\t\t}\n\n\t\tif (_isSushi){ // sell on Sushiswap\n\t\t\treturn IUniswapRouterV2(SushiswapRouter).swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline);\n\t\t}\n\t\telse { // sell on Uniswap\n\t\t\treturn IUniswapRouterV2(UniswapRouter).swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline);\n\t\t}\n\t}\n\n\tfunction rescue(address _token, uint256 _amount) external {\n        require(msg.sender == governance, \"FARMBOSSV1: !governance\");\n\n        if (_token != address(0)){\n            IERC20(_token).safeTransfer(governance, _amount);\n        }\n        else { // if _tokenContract is 0x0, then escape ETH\n            governance.transfer(_amount);\n        }\n    }\n}"
    },
    "Treasury/FarmBossV1_WETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/*\n\n*/\n\npragma solidity ^0.6.11;\npragma experimental ABIEncoderV2;\n\nimport \"../openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../openzeppelin/contracts/token/ERC20/SafeERC20.sol\"; // call ERC20 safely\nimport \"../openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../openzeppelin/contracts/utils/Address.sol\";\n\nimport \"./FarmBossV1.sol\";\n\ncontract FarmBossV1_WETH is FarmBossV1 {\n\tusing SafeERC20 for IERC20;\n\tusing SafeMath for uint256;\n\tusing Address for address;\n\n\tconstructor(address payable _governance, address _daoMultisig, address _treasury, address _underlying) public FarmBossV1(_governance, _daoMultisig, _treasury, _underlying){\n\t}\n\n\tfunction _initFirstFarms() internal override {\n\n\t\t/*\n\t\t\tFor our intro WETH strategies, there are many opportunities. We are going to integrate AlphaHomora v1 & v2 directly, and also integrate Rari Capitals\n\t\t\trotation fund, in order to cover the \"long tail\" of good ETH strategies when they appear.\n\t\t\tWe will also use Curve.fi strategies.\n\n\t\t\tNOTE:\n\t\t\tWe also need to be able to wrap/unwrap ETH, if needed. Funds will come as WETH from the FarmTreasury, and might need to be unwrapped for strategy deposits.\n\t\t\tETH will also need to be wrapped in order to refill hot/allow withdraws\n\t\t*/\n\n\t\t////////////// ALLOW WETH //////////////\n\t\tbytes4 deposit_weth = 0xd0e30db0; // deposit()\n\t\tbytes4 withdraw_weth = 0x2e1a7d4d; // withdraw(uint256)\n\t\t// address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;  -- already in FarmBossV1\n\t\t_addWhitelist(WETH, deposit_weth, true); // ALLOW msg.value;\n\t\t_addWhitelist(WETH, withdraw_weth, false);\n\t\t////////////// END ALLOW WETH //////////////\n\n\t\t////////////// ALLOW ALPHAHOMORAV1 //////////////\n\t\tbytes4 deposit_alpha = 0xd0e30db0; // deposit()\n\t\tbytes4 withdraw_alpha = 0x2e1a7d4d; // withdraw(uint256)\n\t\taddress ALPHA_V1 = 0x67B66C99D3Eb37Fa76Aa3Ed1ff33E8e39F0b9c7A;\n\t\t_addWhitelist(ALPHA_V1, deposit_alpha, true); // ALLOW msg.value\n\t\t_addWhitelist(ALPHA_V1, withdraw_alpha, false);\n\t\t////////////// END ALLOW ALPHAHOMORAV1 //////////////\n\n\t\t////////////// ALLOW ALPHAHOMORAV2 //////////////\n\t\taddress ALPHA_V2 = 0xeEa3311250FE4c3268F8E684f7C87A82fF183Ec1;\n\t\t_addWhitelist(ALPHA_V2, deposit_alpha, true); // ALLOW msg.value\n\t\t_addWhitelist(ALPHA_V2, withdraw_alpha, false);\n\n\t\t// for selling alpha. alpha is distributed 1x/week by a Uniswap Merkle distributor contract\n\t\taddress ALPHA_TOKEN = 0xa1faa113cbE53436Df28FF0aEe54275c13B40975;\n\t\t_approveMax(ALPHA_TOKEN, SushiswapRouter);\n\t\t_approveMax(ALPHA_TOKEN, UniswapRouter);\n\t\t////////////// END ALLOW ALPHAHOMORAV2 //////////////\n\n\t\t////////////// ALLOW RARI CAPITAL AUTO ROTATION //////////////\n\t\tbytes4 deposit_rari = 0xd0e30db0; // deposit() \n\t\tbytes4 withdraw_rari = 0x2e1a7d4d; // withdraw(uint256)\n\t\taddress RARI = 0xD6e194aF3d9674b62D1b30Ec676030C23961275e;\n\t\t_addWhitelist(RARI, deposit_rari, true); // ALLOW msg.value\n\t\t_addWhitelist(RARI, withdraw_rari, false); \n\t\t////////////// END ALLOW RARI CAPITAL AUTO ROTATION //////////////\n\n\t\t////////////// ALLOW CURVE s, stETH pools, mint CRV, LDO rewards //////////////\n\t\t////////////// SETH Pool //////////////\n\t\tbytes4 add_liquidity_2 = 0x0b4c7e4d; // add_liquidity(uint256[2], uint256)\n\t\tbytes4 remove_liquidity_one = 0x1a4d01d2; // remove_liquidity_one_coin(uint256, int128, uint256)\n\t\taddress _crvSETHPool = 0xc5424B857f758E906013F3555Dad202e4bdB4567;\n\t\t_addWhitelist(_crvSETHPool, add_liquidity_2, true); // ALLOW msg.value\n\t\t_addWhitelist(_crvSETHPool, remove_liquidity_one, false);\n\n\t\t////////////// SETH Gauge //////////////\n\t\taddress _crvSETHToken = 0xA3D87FffcE63B53E0d54fAa1cc983B7eB0b74A9c;\n\t\taddress _crvSETHGauge = 0x3C0FFFF15EA30C35d7A85B85c0782D6c94e1d238;\n\t\tbytes4 deposit_gauge = 0xb6b55f25; // deposit(uint256 _value)\n\t\tbytes4 withdraw_gauge = 0x2e1a7d4d; // withdraw(uint256 _value)\n\t\t_approveMax(_crvSETHToken, _crvSETHGauge);\n\t\t_addWhitelist(_crvSETHGauge, deposit_gauge, false);\n\t\t_addWhitelist(_crvSETHGauge, withdraw_gauge, false);\n\t\t\n\t\t////////////// stETH Pool //////////////\n\t\taddress _crvStETHPool = 0xDC24316b9AE028F1497c275EB9192a3Ea0f67022;\n\t\t_addWhitelist(_crvStETHPool, add_liquidity_2, true); // ALLOW msg.value\n\t\t_addWhitelist(_crvStETHPool, remove_liquidity_one, false);\n\n\t\t////////////// stETH Gauge //////////////\n\t\taddress _crvStETHToken = 0x06325440D014e39736583c165C2963BA99fAf14E;\n\t\taddress _crvStETHGauge = 0x182B723a58739a9c974cFDB385ceaDb237453c28;\n\t\t_approveMax(_crvStETHToken, _crvStETHGauge);\n\t\t_addWhitelist(_crvStETHGauge, deposit_gauge, false);\n\t\t_addWhitelist(_crvStETHGauge, withdraw_gauge, false);\n\n\t\t////////////// CRV tokens mint, LDO tokens mint, sell Sushi/Uni //////////////\n\t\taddress _crvMintr = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\n\t\tbytes4 mint = 0x6a627842; // mint(address gauge_addr)\n\t\tbytes4 mint_many = 0xa51e1904; // mint_many(address[8])\n\t\t_addWhitelist(_crvMintr, mint, false);\n\t\t_addWhitelist(_crvMintr, mint_many, false);\n\n\t\tbytes4 claim_rewards = 0x84e9bd7e; // claim_rewards(address _addr) -- LDO token rewards\n\t\t_addWhitelist(_crvStETHGauge, claim_rewards, false);\n\n\t\t// address CRVToken = 0xD533a949740bb3306d119CC777fa900bA034cd52; -- already in FarmBossV1\n\t\taddress LDOToken = 0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32;\n\t\t_approveMax(CRVToken, SushiswapRouter);\n\t\t_approveMax(CRVToken, UniswapRouter);\n\t\t_approveMax(LDOToken, SushiswapRouter);\n\t\t_approveMax(LDOToken, UniswapRouter);\n\t\t////////////// END ALLOW CURVE s, stETH pools //////////////\n\t}\n}"
    },
    "Treasury/FarmTokenV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/*\nThis is a Stacker.vc FarmToken version 1 contract. It deploys a rebase token where it rebases to be equivalent to it's underlying token. 1 stackUSDT = 1 USDT.\nThe underlying assets are used to farm on different smart contract and produce yield via the ever-expanding DeFi ecosystem.\n\nNOTE: \nThis is an abstract contract, and two functions need to be implemented for a valid deployment: \n_verify(address _account, uint256 _amountUnderlyingToSend) --> in order to pass any locks on sending funds/withdrawing\n_getTotalUnderlying() --> to know the total amount of funds under management\n\nTHANKS! \nTo Lido DAO for the inspiration in more ways than one, but especially for a lot of the code here. \nIf you haven't already, stake your ETH for ETH2.0 with Lido.fi!\nAlso thanks for Aragon for hosting our Stacker Ventures DAO, and for more inspiration!\n*/\n\npragma solidity ^0.6.11;\n\nimport \"../openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../openzeppelin/contracts/token/ERC20/SafeERC20.sol\"; // call ERC20 safely\nimport \"../openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../openzeppelin/contracts/utils/Address.sol\";\n\nabstract contract FarmTokenV1 is IERC20 {\n\tusing SafeMath for uint256;\n\tusing Address for address;\n\n\t// shares are how a users balance is generated. For rebase tokens, balances are always generated at runtime, while shares stay constant.\n\t// shares is your proportion of the total pool of invested UnderlyingToken\n\t// shares are like a Compound.finance cToken, while our token balances are like an Aave aToken.\n\tmapping(address => uint256) private shares;\n\tmapping(address => mapping (address => uint256)) private allowances;\n\n\tuint256 public totalShares;\n\n\tstring public name;\n\tstring public symbol;\n\tstring public underlying;\n\taddress public underlyingContract;\n\n\tuint8 public decimals;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor(string memory _name, uint8 _decimals, address _underlyingContract) public {\n    \tname = string(abi.encodePacked(abi.encodePacked(\"Stacker Ventures \", _name), \" v1\"));\n    \tsymbol = string(abi.encodePacked(\"stack\", _name));\n    \tunderlying = _name;\n\n    \tdecimals = _decimals;\n\n    \tunderlyingContract = _underlyingContract;\n    }\n\n    // 1 stackToken = 1 underlying token\n    function totalSupply() external override view returns (uint256){\n    \treturn _getTotalUnderlying();\n    }\n\n    function totalUnderlying() external view returns (uint256){\n    \treturn _getTotalUnderlying();\n    }\n\n    function balanceOf(address _account) public override view returns (uint256){\n    \treturn getUnderlyingForShares(_sharesOf(_account));\n    }\n\n    // transfer tokens, not shares\n    function transfer(address _recipient, uint256 _amount) external override returns (bool){\n    \t_verify(msg.sender, _amount);\n    \t_transfer(msg.sender, _recipient, _amount);\n        return true;\n    }\n\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external override returns (bool){\n    \t_verify(_sender, _amount);\n    \tuint256 _currentAllowance = allowances[_sender][msg.sender];\n        require(_currentAllowance >= _amount, \"FARMTOKENV1: not enough allowance\");\n\n        _transfer(_sender, _recipient, _amount);\n        _approve(_sender, msg.sender, _currentAllowance.sub(_amount));\n        return true;\n    }\n\n    // this checks if a transfer/transferFrom/withdraw is allowed. There are some conditions on withdraws/transfers from new deposits\n    // function stub, this needs to be implemented in a contract which inherits this for a valid deployment\n    // IMPLEMENT THIS\n    function _verify(address _account, uint256 _amountUnderlyingToSend) internal virtual;\n\n    // allow tokens, not shares\n    function allowance(address _owner, address _spender) external override view returns (uint256){\n    \treturn allowances[_owner][_spender];\n    }\n\n    // approve tokens, not shares\n    function approve(address _spender, uint256 _amount) external override returns (bool){\n    \t_approve(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    // shares of _account\n    function sharesOf(address _account) external view returns (uint256) {\n    \treturn _sharesOf(_account);\n    }\n\n    // how many shares for _amount of underlying?\n    // if there are no shares, or no underlying yet, we are initing the contract or suffered a total loss\n    // either way, init this state at 1:1 shares:underlying\n    function getSharesForUnderlying(uint256 _amountUnderlying) public view returns (uint256){\n    \tuint256 _totalUnderlying = _getTotalUnderlying();\n    \tif (_totalUnderlying == 0){\n    \t\treturn _amountUnderlying; // this will init at 1:1 _underlying:_shares\n    \t}\n    \tuint256 _totalShares = totalShares;\n    \tif (_totalShares == 0){\n    \t\treturn _amountUnderlying; // this will init the first shares, expected contract underlying balance == 0, or there will be a bonus (doesn't belong to anyone so ok)\n    \t}\n\n    \treturn _amountUnderlying.mul(_totalShares).div(_totalUnderlying);\n    }\n\n    // how many underlying for _amount of shares?\n    // if there are no shares, or no underlying yet, we are initing the contract or suffered a total loss\n    // either way, init this state at 1:1 shares:underlying\n    function getUnderlyingForShares(uint256 _amountShares) public view returns (uint256){\n    \tuint256 _totalShares = totalShares;\n    \tif (_totalShares == 0){\n    \t\treturn _amountShares; // this will init at 1:1 _shares:_underlying\n    \t}\n    \tuint256 _totalUnderlying = _getTotalUnderlying();\n    \tif (_totalUnderlying == 0){\n    \t\treturn _amountShares; // this will init at 1:1 \n    \t}\n\n    \treturn _amountShares.mul(_totalUnderlying).div(_totalShares);\n\n    }\n\n    function _sharesOf(address _account) internal view returns (uint256){\n    \treturn shares[_account];\n    }\n\n    // function stub, this needs to be implemented in a contract which inherits this for a valid deployment\n    // sum the contract balance + working balance withdrawn from the contract and actively farming\n    // IMPLEMENT THIS\n    function _getTotalUnderlying() internal virtual view returns (uint256);\n\n    // in underlying\n    function _transfer(address _sender, address _recipient, uint256 _amount) internal {\n    \tuint256 _sharesToTransfer = getSharesForUnderlying(_amount);\n    \t_transferShares(_sender, _recipient, _sharesToTransfer);\n    \temit Transfer(_sender, _recipient, _amount);\n    }\n\n    // in underlying\n    function _approve(address _owner, address _spender, uint256 _amount) internal {\n    \trequire(_owner != address(0), \"FARMTOKENV1: from == 0x0\");\n        require(_spender != address(0), \"FARMTOKENV1: to == 0x00\");\n\n        allowances[_owner][_spender] = _amount;\n        emit Approval(_owner, _spender, _amount);\n    }\n\n    function _transferShares(address _sender, address _recipient,  uint256 _amountShares) internal {\n    \trequire(_sender != address(0), \"FARMTOKENV1: from == 0x00\");\n        require(_recipient != address(0), \"FARMTOKENV1: to == 0x00\");\n\n        uint256 _currentSenderShares = shares[_sender];\n        require(_amountShares <= _currentSenderShares, \"FARMTOKENV1: transfer amount exceeds balance\");\n\n        shares[_sender] = _currentSenderShares.sub(_amountShares);\n        shares[_recipient] = shares[_recipient].add(_amountShares);\n    }\n\n    function _mintShares(address _recipient, uint256 _amountShares) internal {\n    \trequire(_recipient != address(0), \"FARMTOKENV1: to == 0x00\");\n\n        totalShares = totalShares.add(_amountShares);\n        shares[_recipient] = shares[_recipient].add(_amountShares);\n\n        // NOTE: we're not emitting a Transfer event from the zero address here\n        // If we mint shares with no underlying, we basically just diluted everyone\n\n        // It's not possible to send events from _everyone_ to reflect each balance dilution (ie: balance going down)\n\n        // Not compliant to ERC20 standard...\n    }\n\n    function _burnShares(address _account, uint256 _amountShares) internal {\n    \trequire(_account != address(0), \"FARMTOKENV1: burn from == 0x00\");\n\n        uint256 _accountShares = shares[_account];\n        require(_amountShares <= _accountShares, \"FARMTOKENV1: burn amount exceeds balance\");\n        totalShares = totalShares.sub(_amountShares);\n\n        shares[_account] = _accountShares.sub(_amountShares);\n\n        // NOTE: we're not emitting a Transfer event to the zero address here \n        // If we burn shares without burning/withdrawing the underlying\n        // then it looks like a system wide credit to everyones balance\n\n        // It's not possible to send events to _everyone_ to reflect each balance credit (ie: balance going up)\n\n        // Not compliant to ERC20 standard...\n    }\n}"
    },
    "Treasury/FarmTreasuryV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/*\nThis is a Stacker.vc FarmTreasury version 1 contract. It deploys a rebase token where it rebases to be equivalent to it's underlying token. 1 stackUSDT = 1 USDT.\nThe underlying assets are used to farm on different smart contract and produce yield via the ever-expanding DeFi ecosystem.\n\nTHANKS! To Lido DAO for the inspiration in more ways than one, but especially for a lot of the code here. \nIf you haven't already, stake your ETH for ETH2.0 with Lido.fi!\n\nAlso thanks for Aragon for hosting our Stacker Ventures DAO, and for more inspiration!\n*/\n\npragma solidity ^0.6.11;\n\nimport \"../openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../openzeppelin/contracts/token/ERC20/SafeERC20.sol\"; // call ERC20 safely\nimport \"../openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../openzeppelin/contracts/utils/Address.sol\";\n\nimport \"../openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\nimport \"./FarmTokenV1.sol\";\n\ncontract FarmTreasuryV1 is ReentrancyGuard, FarmTokenV1 {\n\tusing SafeERC20 for IERC20;\n\tusing SafeMath for uint256;\n\tusing Address for address;\n\n\tmapping(address => DepositInfo) public userDeposits;\n\tmapping(address => bool) public noLockWhitelist;\n\n\tstruct DepositInfo {\n\t\tuint256 amountUnderlyingLocked;\n\t\tuint256 timestampDeposit;\n\t\tuint256 timestampUnlocked;\n\t}\n\n\tuint256 internal constant LOOP_LIMIT = 200;\n\n\taddress payable public governance;\n\taddress payable public farmBoss;\n\n\tbool public paused = false;\n\tbool public pausedDeposits = false;\n\n\t// fee schedule, can be changed by governance, in bips\n\t// performance fee is on any gains, base fee is on AUM/yearly\n\tuint256 public constant max = 10000;\n\tuint256 public performanceToTreasury = 1000;\n\tuint256 public performanceToFarmer = 1000;\n\tuint256 public baseToTreasury = 100;\n\tuint256 public baseToFarmer = 100;\n\n\t// limits on rebalancing from the farmer, trying to negate errant rebalances\n\tuint256 public rebalanceUpLimit = 100; // maximum of a 1% gain per rebalance\n\tuint256 public rebalanceUpWaitTime = 23 hours;\n\tuint256 public lastRebalanceUpTime;\n\n\t// waiting period on withdraws from time of deposit\n\t// locked amount linearly decreases until the time is up, so at waitPeriod/2 after deposit, you can withdraw depositAmt/2 funds.\n\tuint256 public waitPeriod = 1 weeks;\n\n\t// hot wallet holdings for instant withdraw, in bips\n\t// if the hot wallet balance expires, the users will need to wait for the next rebalance period in order to withdraw\n\tuint256 public hotWalletHoldings = 1000; // 10% initially\n\n\tuint256 public ACTIVELY_FARMED;\n\n\tevent RebalanceHot(uint256 amountIn, uint256 amountToFarmer, uint256 timestamp);\n\tevent ProfitDeclared(bool profit, uint256 amount, uint256 timestamp, uint256 totalAmountInPool, uint256 totalSharesInPool, uint256 performanceFeeTotal, uint256 baseFeeTotal);\n\tevent Deposit(address depositor, uint256 amount, address referral);\n\tevent Withdraw(address withdrawer, uint256 amount);\n\n\tconstructor(string memory _nameUnderlying, uint8 _decimalsUnderlying, address _underlying) public FarmTokenV1(_nameUnderlying, _decimalsUnderlying, _underlying) {\n\t\tgovernance = msg.sender;\n\t\tlastRebalanceUpTime = block.timestamp;\n\t}\n\n\tfunction setGovernance(address payable _new) external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\tgovernance = _new;\n\t}\n\n\t// the \"farmBoss\" is a trusted smart contract that functions kind of like an EOA.\n\t// HOWEVER specific contract addresses need to be whitelisted in order for this contract to be allowed to interact w/ them\n\t// the governance has full control over the farmBoss, and other addresses can have partial control for strategy rotation/rebalancing\n\tfunction setFarmBoss(address payable _new) external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\tfarmBoss = _new;\n\t}\n\n\tfunction setNoLockWhitelist(address[] calldata _accounts, bool[] calldata _noLock) external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\trequire(_accounts.length == _noLock.length && _accounts.length <= LOOP_LIMIT, \"FARMTREASURYV1: check array lengths\");\n\n\t\tfor (uint256 i = 0; i < _accounts.length; i++){\n\t\t\tnoLockWhitelist[_accounts[i]] = _noLock[i];\n\t\t}\n\t}\n\n\tfunction pause() external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\tpaused = true;\n\t}\n\n\tfunction unpause() external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\tpaused = false;\n\t}\n\n\tfunction pauseDeposits() external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\tpausedDeposits = true;\n\t}\n\n\tfunction unpauseDeposits() external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\tpausedDeposits = false;\n\t}\n\n\tfunction setFeeDistribution(uint256 _performanceToTreasury, uint256 _performanceToFarmer, uint256 _baseToTreasury, uint256 _baseToFarmer) external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\trequire(_performanceToTreasury.add(_performanceToFarmer) < max, \"FARMTREASURYV1: too high performance\");\n\t\trequire(_baseToTreasury.add(_baseToFarmer) <= 500, \"FARMTREASURYV1: too high base\");\n\t\t\n\t\tperformanceToTreasury = _performanceToTreasury;\n\t\tperformanceToFarmer = _performanceToFarmer;\n\t\tbaseToTreasury = _baseToTreasury;\n\t\tbaseToFarmer = _baseToFarmer;\n\t}\n\n\tfunction setWaitPeriod(uint256 _new) external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\trequire(_new <= 10 weeks, \"FARMTREASURYV1: too long wait\");\n\n\t\twaitPeriod = _new;\n\t}\n\n\tfunction setHotWalletHoldings(uint256 _new) external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\trequire(_new <= max && _new >= 100, \"FARMTREASURYV1: hot wallet values bad\");\n\n\t\thotWalletHoldings = _new;\n\t}\n\n\tfunction setRebalanceUpLimit(uint256 _new) external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\trequire(_new < max, \"FARMTREASURYV1: >= max\");\n\n\t\trebalanceUpLimit = _new;\n\t}\n\n\tfunction setRebalanceUpWaitTime(uint256 _new) external {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\trequire(_new <= 1 weeks, \"FARMTREASURYV1: > 1 week\");\n\n\t\trebalanceUpWaitTime = _new;\n\t}\n\n\tfunction deposit(uint256 _amountUnderlying, address _referral) external nonReentrant {\n\t\trequire(_amountUnderlying > 0, \"FARMTREASURYV1: amount == 0\");\n\t\trequire(!paused && !pausedDeposits, \"FARMTREASURYV1: paused\");\n\n\t\t_deposit(_amountUnderlying, _referral);\n\n\t\tIERC20 _underlying = IERC20(underlyingContract);\n\t\tuint256 _before = _underlying.balanceOf(address(this));\n\t\t_underlying.safeTransferFrom(msg.sender, address(this), _amountUnderlying);\n\t\tuint256 _after = _underlying.balanceOf(address(this));\n\t\tuint256 _total = _after.sub(_before);\n\t\trequire(_total >= _amountUnderlying, \"FARMTREASURYV1: bad transfer\");\n\t}\n\n\tfunction _deposit(uint256 _amountUnderlying, address _referral) internal {\n\t\t// determine how many shares this will be\n\t\tuint256 _sharesToMint = getSharesForUnderlying(_amountUnderlying);\n\n\t\t_mintShares(msg.sender, _sharesToMint);\n\t\t// store some important info for this deposit, that will be checked on withdraw/transfer of tokens\n\t\t_storeDepositInfo(msg.sender, _amountUnderlying);\n\n\t\t// emit deposit w/ referral event... can't refer yourself\n\t\tif (_referral != msg.sender){\n\t\t\temit Deposit(msg.sender, _amountUnderlying, _referral);\n\t\t}\n\t\telse {\n\t\t\temit Deposit(msg.sender, _amountUnderlying, address(0));\n\t\t}\n\n\t\temit Transfer(address(0), msg.sender, _amountUnderlying);\n\t}\n\n\tfunction _storeDepositInfo(address _account, uint256 _amountUnderlying) internal {\n\n\t\tDepositInfo memory _existingInfo = userDeposits[_account];\n\n\t\t// first deposit, make a new entry in the mapping, lock all funds for \"waitPeriod\"\n\t\tif (_existingInfo.timestampDeposit == 0){\n\t\t\tDepositInfo memory _info = DepositInfo(\n\t\t\t\t{\n\t\t\t\t\tamountUnderlyingLocked: _amountUnderlying, \n\t\t\t\t\ttimestampDeposit: block.timestamp, \n\t\t\t\t\ttimestampUnlocked: block.timestamp.add(waitPeriod)\n\t\t\t\t}\n\t\t\t);\n\t\t\tuserDeposits[_account] = _info;\n\t\t}\n\t\t// not the first deposit, if there are still funds locked, then average out the waits (ie: 1 BTC locked 10 days = 2 BTC locked 5 days)\n\t\telse {\n\t\t\tuint256 _lockedAmt = _getLockedAmount(_account, _existingInfo.amountUnderlyingLocked, _existingInfo.timestampDeposit, _existingInfo.timestampUnlocked);\n\t\t\t// if there's no lock, disregard old info and make a new lock\n\n\t\t\tif (_lockedAmt == 0){\n\t\t\t\tDepositInfo memory _info = DepositInfo(\n\t\t\t\t\t{\n\t\t\t\t\t\tamountUnderlyingLocked: _amountUnderlying, \n\t\t\t\t\t\ttimestampDeposit: block.timestamp, \n\t\t\t\t\t\ttimestampUnlocked: block.timestamp.add(waitPeriod)\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tuserDeposits[_account] = _info;\n\t\t\t}\n\t\t\t// funds are still locked from a past deposit, average out the waittime remaining with the waittime for this new deposit\n\t\t\t/*\n\t\t\t\tsolve this equation:\n\n\t\t\t\tnewDepositAmt * waitPeriod + remainingAmt * existingWaitPeriod = (newDepositAmt + remainingAmt) * X waitPeriod\n\n\t\t\t\ttherefore:\n\n\t\t\t\t\t\t\t\t(newDepositAmt * waitPeriod + remainingAmt * existingWaitPeriod)\n\t\t\t\tX waitPeriod =  ----------------------------------------------------------------\n\t\t\t\t\t\t\t\t\t\t\t\t(newDepositAmt + remainingAmt)\n\n\t\t\t\tExample: 7 BTC new deposit, with wait period of 2 weeks\n\t\t\t\t\t\t 1 BTC remaining, with remaining wait period of 1 week\n\t\t\t\t\t\t ...\n\t\t\t\t\t\t (7 BTC * 2 weeks + 1 BTC * 1 week) / 8 BTC = 1.875 weeks\n\t\t\t*/\n\t\t\telse {\n\t\t\t\tuint256 _lockedAmtTime = _lockedAmt.mul(_existingInfo.timestampUnlocked.sub(block.timestamp));\n\t\t\t\tuint256 _newAmtTime = _amountUnderlying.mul(waitPeriod);\n\t\t\t\tuint256 _total = _amountUnderlying.add(_lockedAmt);\n\n\t\t\t\tuint256 _newLockedTime = (_lockedAmtTime.add(_newAmtTime)).div(_total);\n\n\t\t\t\tDepositInfo memory _info = DepositInfo(\n\t\t\t\t\t{\n\t\t\t\t\t\tamountUnderlyingLocked: _total, \n\t\t\t\t\t\ttimestampDeposit: block.timestamp, \n\t\t\t\t\t\ttimestampUnlocked: block.timestamp.add(_newLockedTime)\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tuserDeposits[_account] = _info;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction getLockedAmount(address _account) public view returns (uint256) {\n\t\tDepositInfo memory _existingInfo = userDeposits[_account];\n\t\treturn _getLockedAmount(_account, _existingInfo.amountUnderlyingLocked, _existingInfo.timestampDeposit, _existingInfo.timestampUnlocked);\n\t}\n\n\t// the locked amount linearly decreases until the timestampUnlocked time, then it's zero\n\t// Example: if 5 BTC contributed (2 week lock), then after 1 week there will be 2.5 BTC locked, the rest is free to transfer/withdraw\n\tfunction _getLockedAmount(address _account, uint256 _amountLocked, uint256 _timestampDeposit, uint256 _timestampUnlocked) internal view returns (uint256) {\n\t\tif (_timestampUnlocked <= block.timestamp || noLockWhitelist[_account]){\n\t\t\treturn 0;\n\t\t}\n\t\telse {\n\t\t\tuint256 _remainingTime = _timestampUnlocked.sub(block.timestamp);\n\t\t\tuint256 _totalTime = _timestampUnlocked.sub(_timestampDeposit);\n\n\t\t\treturn _amountLocked.mul(_remainingTime).div(_totalTime);\n\t\t}\n\t}\n\n\tfunction withdraw(uint256 _amountUnderlying) external nonReentrant {\n\t\trequire(_amountUnderlying > 0, \"FARMTREASURYV1: amount == 0\");\n\t\trequire(!paused, \"FARMTREASURYV1: paused\");\n\n\t\t_withdraw(_amountUnderlying);\n\n\t\tIERC20(underlyingContract).safeTransfer(msg.sender, _amountUnderlying);\n\t}\n\n\tfunction _withdraw(uint256 _amountUnderlying) internal {\n\t\t_verify(msg.sender, _amountUnderlying);\n\t\t// try and catch the more obvious error of hot wallet being depleted, otherwise proceed\n\t\tif (IERC20(underlyingContract).balanceOf(address(this)) < _amountUnderlying){\n\t\t\trevert(\"FARMTREASURYV1: Hot wallet balance depleted. Please try smaller withdraw or wait for rebalancing.\");\n\t\t}\n\n\t\tuint256 _sharesToBurn = getSharesForUnderlying(_amountUnderlying);\n\t\t_burnShares(msg.sender, _sharesToBurn); // they must have >= _sharesToBurn, checked here\n\n\t\temit Transfer(msg.sender, address(0), _amountUnderlying);\n\t\temit Withdraw(msg.sender, _amountUnderlying);\n\t}\n\n\t// wait time verification\n\tfunction _verify(address _account, uint256 _amountUnderlyingToSend) internal override {\n\t\tDepositInfo memory _existingInfo = userDeposits[_account];\n\n\t\tuint256 _lockedAmt = _getLockedAmount(_account, _existingInfo.amountUnderlyingLocked, _existingInfo.timestampDeposit, _existingInfo.timestampUnlocked);\n\t\tuint256 _balance = balanceOf(_account);\n\n\t\t// require that any funds locked are not leaving the account in question.\n\t\trequire(_balance.sub(_amountUnderlyingToSend) >= _lockedAmt, \"FARMTREASURYV1: requested funds are temporarily locked\");\n\t}\n\n\t// this means that we made a GAIN, due to standard farming gains\n\t// operaratable by farmBoss, this is standard operating procedure, farmers can only report gains\n\tfunction rebalanceUp(uint256 _amount, address _farmerRewards) external nonReentrant returns (bool, uint256) {\n\t\trequire(msg.sender == farmBoss, \"FARMTREASURYV1: !farmBoss\");\n\t\trequire(!paused, \"FARMTREASURYV1: paused\");\n\n\t\t// fee logic & profit recording\n\t\t// check farmer limits on rebalance wait time for earning reportings. if there is no _amount reported, we don't take any fees and skip these checks\n\t\t// we should always allow pure hot wallet rebalances, however earnings needs some checks and restrictions\n\t\tif (_amount > 0){\n\t\t\trequire(block.timestamp.sub(lastRebalanceUpTime) >= rebalanceUpWaitTime, \"FARMTREASURYV1: <rebalanceUpWaitTime\");\n\t\t\trequire(ACTIVELY_FARMED.mul(rebalanceUpLimit).div(max) >= _amount, \"FARMTREASURYV1 _amount > rebalanceUpLimit\");\n\t\t\t// farmer incurred a gain of _amount, add this to the amount being farmed\n\t\t\tACTIVELY_FARMED = ACTIVELY_FARMED.add(_amount);\n\t\t\tuint256 _totalPerformance = _performanceFee(_amount, _farmerRewards);\n\t\t\tuint256 _totalAnnual = _annualFee(_farmerRewards);\n\n\t\t\t// for farmer controls, and also for the annual fee time\n\t\t\t// only update this if there is a reported gain, otherwise this is just a hot wallet rebalance, and we should always allow these\n\t\t\tlastRebalanceUpTime = block.timestamp; \n\n\t\t\t// for off-chain APY calculations, fees assessed\n\t\t\temit ProfitDeclared(true, _amount, block.timestamp, _getTotalUnderlying(), totalShares, _totalPerformance, _totalAnnual);\n\t\t}\n\t\telse {\n\t\t\t// for off-chain APY calculations, no fees assessed\n\t\t\temit ProfitDeclared(true, _amount, block.timestamp, _getTotalUnderlying(), totalShares, 0, 0);\n\t\t}\n\t\t// end fee logic & profit recording\n\n\t\t// funds are in the contract and gains are accounted for, now determine if we need to further rebalance the hot wallet up, or can take funds in order to farm\n\t\t// start hot wallet and farmBoss rebalance logic\n\t\t(bool _fundsNeeded, uint256 _amountChange) = _calcHotWallet();\n\t\t_rebalanceHot(_fundsNeeded, _amountChange); // if the hot wallet rebalance fails, revert() the entire function\n\t\t// end logic\n\n\t\treturn (_fundsNeeded, _amountChange); // in case we need them, FE simulations and such\n\t}\n\n\t// this means that the system took a loss, and it needs to be reflected in the next rebalance\n\t// only operatable by governance, (large) losses should be extremely rare by good farming practices\n\t// this would look like a farmed smart contract getting exploited/hacked, and us not having the necessary insurance for it\n\t// possible that some more aggressive IL strategies could also need this function called\n\tfunction rebalanceDown(uint256 _amount, bool _rebalanceHotWallet) external nonReentrant returns (bool, uint256) {\n\t\trequire(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\t\t// require(!paused, \"FARMTREASURYV1: paused\"); <-- governance can only call this anyways, leave this commented out\n\n\t\tACTIVELY_FARMED = ACTIVELY_FARMED.sub(_amount);\n\n\t\tif (_rebalanceHotWallet){\n\t\t\t(bool _fundsNeeded, uint256 _amountChange) = _calcHotWallet();\n\t\t\t_rebalanceHot(_fundsNeeded, _amountChange); // if the hot wallet rebalance fails, revert() the entire function\n\n\t\t\treturn (_fundsNeeded, _amountChange); // in case we need them, FE simulations and such\n\t\t}\n\n\t\t// for off-chain APY calculations, no fees assessed\n\t\temit ProfitDeclared(false, _amount, block.timestamp, _getTotalUnderlying(), totalShares, 0, 0);\n\n\t\treturn (false, 0);\n\t}\n\n\tfunction _performanceFee(uint256 _amount, address _farmerRewards) internal returns (uint256){\n\n\t\tuint256 _existingShares = totalShares;\n\t\tuint256 _balance = _getTotalUnderlying();\n\n\t\tuint256 _performanceToFarmerUnderlying = _amount.mul(performanceToFarmer).div(max);\n\t\tuint256 _performanceToTreasuryUnderlying = _amount.mul(performanceToTreasury).div(max);\n\t\tuint256 _performanceTotalUnderlying = _performanceToFarmerUnderlying.add(_performanceToTreasuryUnderlying);\n\n\t\tif (_performanceTotalUnderlying == 0){\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint256 _sharesToMint = _underlyingFeeToShares(_performanceTotalUnderlying, _balance, _existingShares);\n\n\t\tuint256 _sharesToFarmer = _sharesToMint.mul(_performanceToFarmerUnderlying).div(_performanceTotalUnderlying); // by the same ratio\n\t\tuint256 _sharesToTreasury = _sharesToMint.sub(_sharesToFarmer);\n\n\t\t_mintShares(_farmerRewards, _sharesToFarmer);\n\t\t_mintShares(governance, _sharesToTreasury);\n\n\t\tuint256 _underlyingFarmer = getUnderlyingForShares(_sharesToFarmer);\n\t\tuint256 _underlyingTreasury = getUnderlyingForShares(_sharesToTreasury);\n\n\t\t// do two mint events, in underlying, not shares\n\t\temit Transfer(address(0), _farmerRewards, _underlyingFarmer);\n\t\temit Transfer(address(0), governance, _underlyingTreasury);\n\n\t\treturn _underlyingFarmer.add(_underlyingTreasury);\n\t}\n\n\t// we are taking baseToTreasury + baseToFarmer each year, every time this is called, look when we took fee last, and linearize the fee to now();\n\tfunction _annualFee(address _farmerRewards) internal returns (uint256) {\n\t\tuint256 _lastAnnualFeeTime = lastRebalanceUpTime;\n\t\tif (_lastAnnualFeeTime >= block.timestamp){\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint256 _elapsedTime = block.timestamp.sub(_lastAnnualFeeTime);\n\t\tuint256 _existingShares = totalShares;\n\t\tuint256 _balance = _getTotalUnderlying();\n\n\t\tuint256 _annualPossibleUnderlying = _balance.mul(_elapsedTime).div(365 days);\n\t\tuint256 _annualToFarmerUnderlying = _annualPossibleUnderlying.mul(baseToFarmer).div(max);\n\t\tuint256 _annualToTreasuryUnderlying = _annualPossibleUnderlying.mul(baseToFarmer).div(max);\n\t\tuint256 _annualTotalUnderlying = _annualToFarmerUnderlying.add(_annualToTreasuryUnderlying);\n\n\t\tif (_annualTotalUnderlying == 0){\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint256 _sharesToMint = _underlyingFeeToShares(_annualTotalUnderlying, _balance, _existingShares);\n\n\t\tuint256 _sharesToFarmer = _sharesToMint.mul(_annualToFarmerUnderlying).div(_annualTotalUnderlying); // by the same ratio\n\t\tuint256 _sharesToTreasury = _sharesToMint.sub(_sharesToFarmer);\n\n\t\t_mintShares(_farmerRewards, _sharesToFarmer);\n\t\t_mintShares(governance, _sharesToTreasury);\n\n\t\tuint256 _underlyingFarmer = getUnderlyingForShares(_sharesToFarmer);\n\t\tuint256 _underlyingTreasury = getUnderlyingForShares(_sharesToTreasury);\n\n\t\t// do two mint events, in underlying, not shares\n\t\temit Transfer(address(0), _farmerRewards, _underlyingFarmer);\n\t\temit Transfer(address(0), governance, _underlyingTreasury);\n\n\t\treturn _underlyingFarmer.add(_underlyingTreasury);\n\t}\n\n\tfunction _underlyingFeeToShares(uint256 _totalFeeUnderlying, uint256 _balance, uint256 _existingShares) pure internal returns (uint256 _sharesToMint){\n\t\t// to mint the required amount of fee shares, solve:\n\t\t/* \n\t\t\tratio:\n\n\t\t\t    \tcurrentShares \t\t\t  newShares\t\t\n\t\t\t-------------------------- : --------------------, where newShares = (currentShares + mintShares)\n\t\t\t(totalUnderlying - feeAmt) \t\ttotalUnderlying\n\n\t\t\tsolved:\n\t\t\t---> (currentShares / (totalUnderlying - feeAmt) * totalUnderlying) - currentShares = mintShares, where newBalanceLessFee = (totalUnderlying - feeAmt)\n\t\t*/\n\t\treturn _existingShares\n\t\t\t\t.mul(_balance)\n\t\t\t\t.div(_balance.sub(_totalFeeUnderlying))\n\t\t\t\t.sub(_existingShares);\n\t}\n\n\tfunction _calcHotWallet() internal view returns (bool _fundsNeeded, uint256 _amountChange) {\n\t\tuint256 _balanceHere = IERC20(underlyingContract).balanceOf(address(this));\n\t\tuint256 _balanceFarmed = ACTIVELY_FARMED;\n\n\t\tuint256 _totalAmount = _balanceHere.add(_balanceFarmed);\n\t\tuint256 _hotAmount = _totalAmount.mul(hotWalletHoldings).div(max);\n\n\t\t// we have too much in hot wallet, send to farmBoss\n\t\tif (_balanceHere >= _hotAmount){\n\t\t\treturn (false, _balanceHere.sub(_hotAmount));\n\t\t}\n\t\t// we have too little in hot wallet, pull from farmBoss\n\t\tif (_balanceHere < _hotAmount){\n\t\t\treturn (true, _hotAmount.sub(_balanceHere));\n\t\t}\n\t}\n\n\t// usually paired with _calcHotWallet()\n\tfunction _rebalanceHot(bool _fundsNeeded, uint256 _amountChange) internal {\n\t\tif (_fundsNeeded){\n\t\t\tuint256 _before = IERC20(underlyingContract).balanceOf(address(this));\n\t\t\tIERC20(underlyingContract).safeTransferFrom(farmBoss, address(this), _amountChange);\n\t\t\tuint256 _after = IERC20(underlyingContract).balanceOf(address(this));\n\t\t\tuint256 _total = _after.sub(_before);\n\n\t\t\trequire(_total >= _amountChange, \"FARMTREASURYV1: bad rebalance, hot wallet needs funds!\");\n\n\t\t\t// we took funds from the farmBoss to refill the hot wallet, reflect this in ACTIVELY_FARMED\n\t\t\tACTIVELY_FARMED = ACTIVELY_FARMED.sub(_amountChange);\n\n\t\t\temit RebalanceHot(_amountChange, 0, block.timestamp);\n\t\t}\n\t\telse {\n\t\t\trequire(farmBoss != address(0), \"FARMTREASURYV1: !FarmBoss\"); // don't burn funds\n\n\t\t\tIERC20(underlyingContract).safeTransfer(farmBoss, _amountChange); // _calcHotWallet() guarantees we have funds here to send\n\n\t\t\t// we sent more funds for the farmer to farm, reflect this\n\t\t\tACTIVELY_FARMED = ACTIVELY_FARMED.add(_amountChange);\n\n\t\t\temit RebalanceHot(0, _amountChange, block.timestamp);\n\t\t}\n\t}\n\n\tfunction _getTotalUnderlying() internal override view returns (uint256) {\n\t\tuint256 _balanceHere = IERC20(underlyingContract).balanceOf(address(this));\n\t\tuint256 _balanceFarmed = ACTIVELY_FARMED;\n\n\t\treturn _balanceHere.add(_balanceFarmed);\n\t}\n\n\tfunction rescue(address _token, uint256 _amount) external nonReentrant {\n        require(msg.sender == governance, \"FARMTREASURYV1: !governance\");\n\n        if (_token != address(0)){\n            IERC20(_token).safeTransfer(governance, _amount);\n        }\n        else { // if _tokenContract is 0x0, then escape ETH\n            governance.transfer(_amount);\n        }\n    }\n}"
    },
    "openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}"
    },
    "openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}"
    },
    "openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"
    },
    "openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"
    },
    "openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"
    },
    "openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"
    }
  }
}