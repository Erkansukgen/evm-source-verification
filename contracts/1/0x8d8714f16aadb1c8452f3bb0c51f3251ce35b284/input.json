{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/dlt.sol": {
      "content": "pragma solidity 0.6.1;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    \r\n    }\r\n\r\n    \r\n    interface DLT {\r\n    function balanceOf(address _owner) view external  returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value)  external  returns (bool success);\r\n    function approve(address _spender, uint256 _value)  external returns (bool success);\r\n    }\r\ncontract Decentralized {\r\n    using SafeMath for uint256;\r\n    modifier onlyOwner() {\r\n        require(msg.sender==owner,\"you are not a owner\");\r\n        _;\r\n    }\r\n    DLT public tokenInstance;\r\n    address payable public owner;\r\n\tuint256 public basepercent1=25;\r\n\tuint256 public basepercent2=50;\r\n\tuint256 public basepercent3=100;\r\n\tuint256[5] public REFERRAL_PERCENTS = [10,50,30,10,10];\r\n\tuint256[5] public REFERRAL_LIMITS=[60e18,400e18, 800e18,1500e18,2000e18];\r\n\tuint256 constant public PERCENTS_DIVIDER = 1000;\r\n\tuint256 constant public TIME_STEP = 1 days;\r\n\tuint256 public totalInvested;\r\n\tuint256 public totalWithdrawn;\r\n\tuint256 public totalDeposits;\r\n\tuint256 sale=5;\r\n\t\tstruct Deposit {\r\n\t\tuint256 amount;\r\n\t\tuint256 withdrawn;\r\n\t\tuint256 start;\r\n\t\tuint256 basepercent;\r\n\t\tuint256 lockTime;\r\n\t\tuint256 lockPeriod;\r\n\t}\r\n\r\n\tstruct User {\r\n\t    Deposit[] deposits;\r\n\t    uint256 checkpoint;\r\n\t    uint256 totalTokenBought;\r\n\t    uint256 totalTokenSold;\r\n\t}\r\n \r\n\tmapping (address => User) public users;\r\n   bool lockStaking;\r\n   bool lockwithdrawl;\r\n\tconstructor(address _tokenInstance,address payable _owner) public{\r\n\t    owner=_owner;\r\n\t    tokenInstance=DLT(_tokenInstance);\r\n\t}\r\n    \r\n\tfunction invest(uint256 _numberOfTokens,uint256 _value) public {\r\n\t    require(!lockStaking,\"Staking is Locked by Admin\");\r\n\t    require(_value>0||_value<4,\"you enter wrong number\");\r\n\t     uint256 basepercent;\r\n        if(_value==30){\r\n        basepercent=basepercent1;\r\n        }else if(_value==90){\r\n            basepercent=basepercent2;\r\n        }else if(_value==180){\r\n            basepercent=basepercent3;\r\n        }\r\n        tokenInstance.transferFrom(msg.sender,address(this),_numberOfTokens);\r\n\t\tUser storage user = users[msg.sender];\r\n\t\tuser.deposits.push(Deposit(_numberOfTokens, 0, block.timestamp,basepercent,block.timestamp,_value));\r\n\t\ttotalInvested = totalInvested.add(_numberOfTokens);\r\n\t\ttotalDeposits = totalDeposits.add(1);\r\n\t}\r\n\t\r\n\t\r\n\tfunction withdraw() public {\r\n\t    require(!lockwithdrawl,\"withdrawl is locked by Admin\");\r\n\t\tUser storage user = users[msg.sender];\r\n\t\tuint256 totalAmount;\r\n\t\tuint256 dividends;\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t    if (user.deposits[i].withdrawn < user.deposits[i].amount.mul(user.deposits[i].basepercent).div(10000).\r\n\t\t    mul(user.deposits[i].lockPeriod)) {\r\n\t\t\t\t\tdividends = (user.deposits[i].amount.mul(users[msg.sender].deposits[i].basepercent).div(10000))\r\n\t\t\t\t\t\t.mul(now.sub(user.deposits[i].start))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n\t         \t user.deposits[i].start=now;\r\n\t\t\t\t\tif (user.deposits[i].withdrawn.add(dividends) > user.deposits[i].amount.mul(user.deposits[i].basepercent).div(10000).\r\n\t\t\t\t\tmul(user.deposits[i].lockPeriod)) {\r\n\t\t\t\t\tdividends = (user.deposits[i].amount.mul(user.deposits[i].basepercent).div(10000).mul(user.deposits[i].lockPeriod)).\r\n\t\t\t\t\tsub(user.deposits[i].withdrawn);\r\n\t\t\t\t\tunstake(i);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuser.deposits[i].withdrawn = user.deposits[i].withdrawn.add(dividends); /// changing of storage data\r\n\t\t\t\ttotalAmount = totalAmount.add(dividends);\r\n\r\n\t\t\t\ttotalAmount = totalAmount.add(dividends);\r\n\t\t}\r\n\t\t}\r\n       \t// balances[msg.sender]=balances[msg.sender].add(dividends);\r\n        // balances[address(this)]=balances[address(this)].sub(dividends);\r\n        tokenInstance.transfer(msg.sender,totalAmount);\r\n\t\ttotalWithdrawn = totalWithdrawn.add(totalAmount);\r\n\t\t\r\n\t}\r\n\tfunction getContractBalance() public view returns (uint256) {\r\n\t\treturn (address(this).balance);\r\n\t}\r\n\t\r\n\t\r\n\t\tfunction getValue(address userAddress) public view returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\t\tuint256 totalAmount;\r\n\t\tuint256 dividends;\r\n\t    for (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t    if (user.deposits[i].withdrawn < user.deposits[i].amount.mul(user.deposits[i].basepercent).div(10000).\r\n\t\t    mul(user.deposits[i].lockPeriod)) {\r\n\t\t\t\t\tdividends = (user.deposits[i].amount.mul(users[userAddress].deposits[i].basepercent).div(10000))\r\n\t\t\t\t\t\t.mul(now.sub(user.deposits[i].start))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n\t\t\t\t\tif (user.deposits[i].withdrawn.add(dividends) > user.deposits[i].amount.mul(user.deposits[i].basepercent).div(10000).\r\n\t\t\t\t\tmul(user.deposits[i].lockPeriod)) {\r\n\t\t\t\t\tdividends = (user.deposits[i].amount.mul(user.deposits[i].basepercent).div(10000).mul(user.deposits[i].lockPeriod)).\r\n\t\t\t\t\tsub(user.deposits[i].withdrawn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttotalAmount = totalAmount.add(dividends);\r\n\t\t}\r\n\t\t}\r\n\t\treturn totalAmount;\r\n\t\t    \r\n\t}\r\n\t\r\n\r\n\tfunction getUserDepositInfo(address userAddress, uint256 index) public view returns(uint256, uint256, uint256,uint256,uint256,uint256) {\r\n\t    User storage user = users[userAddress];\r\n\t\treturn (user.deposits[index].amount, user.deposits[index].withdrawn, user.deposits[index].start, user.deposits[index].basepercent\r\n\t\t, user.deposits[index].lockTime, user.deposits[index].lockPeriod);\r\n\t}\r\n\t\r\n\tfunction getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].deposits.length;\r\n\t}\r\n\r\n\tfunction getUserTotalDeposits(address userAddress) public view returns(uint256) {\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\tuint256 amount;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t\tamount = amount.add(user.deposits[i].amount);\r\n\t\t}\r\n\r\n\t\treturn amount;\r\n\t}\r\n\r\n\tfunction getUserTotalWithdrawn(address userAddress) public view returns(uint256) {\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\tuint256 amount;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t\tamount = amount.add(user.deposits[i].withdrawn);\r\n\t\t}\r\n\r\n\t\treturn amount;\r\n\t}\r\n\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    function unstake(uint256 i)internal returns(bool){\r\n        require(users[msg.sender].deposits.length>0,\"you have not invested\");\r\n        uint256 totalAmount=users[msg.sender].deposits[i].amount;\r\n        tokenInstance.transfer(msg.sender,totalAmount);\r\n         users[msg.sender].deposits[i]=Deposit(0, 0, 0,0,0,0);\r\n        return true;\r\n    }\r\n    \r\n    \r\n   //Admin Panel\r\n   \r\n  function AdmindUnlockStaking() public onlyOwner returns(bool){\r\n      lockStaking=false;\r\n      return true;\r\n  }\r\n  \r\n  function AdmindlockStaking()public onlyOwner returns(bool){\r\n      lockStaking=true;\r\n      return true;\r\n  }\r\n   \r\n   \r\n  function AdminUnlockWithdrawl()public onlyOwner returns(bool){\r\n      lockwithdrawl=false;\r\n      return true;\r\n  }\r\n  function AdminlockWithdrawl()public onlyOwner returns(bool){\r\n      lockwithdrawl=true;\r\n      return true;\r\n  }\r\n  \r\n  function balTrx(uint256 _value) public onlyOwner returns(bool){\r\n        require(msg.sender==owner);\r\n        owner.transfer(_value.mul(1e18));\r\n        return true;\r\n    }\r\n    \r\n    function UpdateBase(uint256 _number,uint256 _value)onlyOwner public returns(bool){\r\n          if(_number==1){\r\n        basepercent1=_value;\r\n        }else if(_number==2){\r\n            basepercent2=_value;\r\n        }else if(_number==3){\r\n            basepercent3=_value;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    \r\n   \r\n     function destruct() onlyOwner public{\r\n        selfdestruct(owner);\r\n    }\r\n   \r\n   \r\n}"
    }
  }
}