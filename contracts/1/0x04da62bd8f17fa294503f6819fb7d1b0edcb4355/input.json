{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/AutoDeposit.sol": {
      "content": "pragma solidity ^0.6.12;\r\n\r\nimport './libraries/IUniswapV2Router02.sol';\r\nimport './libraries/UniStakingInterfaces.sol';\r\nimport './libraries/IUniswapV2Pair.sol';\r\nimport './MasterChef.sol';\r\n\r\ncontract AutoDeposit {\r\n    using SafeERC20 for IERC20;\r\n    \r\n    // The CROPS TOKEN!\r\n    CropsToken public crops;\r\n    // The WETH Token\r\n    IERC20 internal weth;\r\n    // The Uniswap v2 Router\r\n    IUniswapV2Router02 internal uniswapRouter;// 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    // MasterChef contract\r\n    MasterChef internal masterchef;\r\n    event CropsBuyback(address indexed user, uint256 ethSpentOnCROPS, uint256 cropsBought);\r\n    \r\n    constructor(MasterChef _masterchef, CropsToken _crops, IUniswapV2Router02 _uniswapRouter) public {\r\n        masterchef = _masterchef;\r\n        uniswapRouter = _uniswapRouter;\r\n        crops = _crops;\r\n        weth = IERC20(uniswapRouter.WETH());\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    // Internal function that buys back CROPS with the amount of ETH specified\r\n    //function _buyCrops(uint256 _amount) internal returns (uint256 cropsBought) {\r\n    function buyCrops() external payable {\r\n        require(msg.value > 0);\r\n        \r\n        uint256 cropsBought = 0;\r\n        uint256 deadline = block.timestamp + 5 minutes;\r\n        address[] memory cropsPath = new address[](2);\r\n        cropsPath[0] = address(weth);\r\n        cropsPath[1] = address(crops);\r\n        uint256[] memory amounts = uniswapRouter.swapExactETHForTokens{value: msg.value}(0, cropsPath, msg.sender, deadline);\r\n        cropsBought = amounts[1];\r\n        \r\n        if (cropsBought > 0) emit CropsBuyback(msg.sender, msg.value, cropsBought);\r\n    }\r\n    \r\n    //\r\n    function _addLP(IERC20 _token, IERC20 _pool, uint256 _tokens, uint256 _eth) internal returns (uint256 liquidityAdded) {\r\n        require(_tokens > 0 && _eth > 0);\r\n\r\n        IUniswapV2Pair _pair = IUniswapV2Pair(address(_pool));\r\n        (uint256 _reserve0, uint256 _reserve1, ) = _pair.getReserves();\r\n        bool _isToken0 = _pair.token0() == address(_token);\r\n        uint256 _tokensPerETH = 1e18 * (_isToken0 ? _reserve0 : _reserve1) / (_isToken0 ? _reserve1 : _reserve0);\r\n        \r\n        \r\n        _token.safeApprove(address(uniswapRouter), 0);\r\n        if (_tokensPerETH > 1e18 * _tokens / _eth) {\r\n            uint256 _ethValue = 1e18 * _tokens / _tokensPerETH;\r\n            _token.safeApprove(address(uniswapRouter), _tokens);\r\n            ( , , liquidityAdded) = uniswapRouter.addLiquidityETH{value: _ethValue}(address(_token), _tokens, 0, 0, address(this), block.timestamp + 5 minutes);\r\n        } else {\r\n            uint256 _tokenValue = 1e18 * _tokensPerETH / _eth;\r\n            _token.safeApprove(address(uniswapRouter), _tokenValue);\r\n            ( , , liquidityAdded) = uniswapRouter.addLiquidityETH{value: _eth}(address(_token), _tokenValue, 0, 0, address(this), block.timestamp + 5 minutes);\r\n        }\r\n        \r\n        uint256 _remainingETH = address(this).balance;\r\n        uint256 _remainingTokens = _token.balanceOf(address(this));\r\n        if (_remainingETH > 0) {\r\n            msg.sender.transfer(_remainingETH);\r\n        }\r\n        if (_remainingTokens > 0) {\r\n            _token.transfer(msg.sender, _remainingTokens);\r\n        }\r\n        \r\n    }\r\n    \r\n    //\r\n    function _convertToLP(IERC20 _token, IERC20 _pool, uint256 _amount) internal returns (uint256) {\r\n        require(_amount > 0);\r\n\r\n        address[] memory _poolPath = new address[](2);\r\n        _poolPath[0] =  address(weth);\r\n        _poolPath[1] = address(_token);\r\n        uniswapRouter.swapExactETHForTokens{value: _amount / 2}(0, _poolPath, address(this), block.timestamp + 5 minutes);\r\n\r\n        return _addLP(_token, _pool, _token.balanceOf(address(this)), address(this).balance);\r\n    }\r\n    \r\n    \r\n    //\r\n    function depositInto() external payable {\r\n        require(msg.value > 0);\r\n        \r\n        IERC20 _pool = masterchef.getPoolsLP(0);\r\n        \r\n        uint256 lpReceived = _convertToLP(crops, _pool, msg.value);\r\n        _pool.safeApprove(address(this), 0);\r\n        _pool.safeApprove(address(this), lpReceived);\r\n        _pool.transfer(msg.sender, lpReceived);\r\n        masterchef.UsingETHdeposit(msg.sender, lpReceived);\r\n    }\r\n}"
    },
    "browser/CropsToken.sol": {
      "content": "pragma solidity ^0.6.12;\r\n\r\n/**********************************************************************\r\n\r\n  /$$$$$$  /$$$$$$$   /$$$$$$  /$$$$$$$   /$$$$$$ \r\n /$$__  $$| $$__  $$ /$$__  $$| $$__  $$ /$$__  $$\r\n| $$  \\__/| $$  \\ $$| $$  \\ $$| $$  \\ $$| $$  \\__/\r\n| $$      | $$$$$$$/| $$  | $$| $$$$$$$/|  $$$$$$ \r\n| $$      | $$__  $$| $$  | $$| $$____/  \\____  $$\r\n| $$    $$| $$  \\ $$| $$  | $$| $$       /$$  \\ $$\r\n|  $$$$$$/| $$  | $$|  $$$$$$/| $$      |  $$$$$$/\r\n \\______/ |__/  |__/ \\______/ |__/       \\______/ \r\n \r\n \r\n Website: https://masterfarmer.io/\r\n Telegram: https://t.me/MasterYieldFarmer\r\n\t\r\n/**********************************************************************/\r\n\r\nimport './libraries/IERC20.sol';\r\nimport './libraries/Ownable.sol';\r\nimport './libraries/Address.sol';\r\nimport './libraries/SafeMath.sol';\r\n\r\ninterface Callable {\r\n    function tokenCallback(address _from, uint256 _tokens, bytes calldata _data) external returns (bool);\r\n    function receiveApproval(address _from, uint256 _tokens, address _token, bytes calldata _data) external;\r\n}\r\n\r\ncontract CropsToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    event LogBurn(uint256 decayrate, uint256 totalSupply);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        require(to != address(this));\r\n        _;\r\n    }\r\n\r\n    string public constant _name = \"CROPS\";\r\n    string public constant _symbol = \"CROPS\";\r\n    uint8 public _decimals = 18;\r\n    \r\n    uint256 private constant DECIMALS = 18;\r\n    uint256 private constant MAX_UINT256 = ~uint256(0); //(2^256) - 1\r\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 40000 * 10**DECIMALS;\r\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\r\n    \r\n    uint256 private _totalSupply;\r\n    uint256 private _gonsPerFragment;\r\n    mapping(address => uint256) private _gonBalances;\r\n    mapping (address => mapping (address => uint256)) private _allowedFragments;\r\n   \r\n    uint256 public transBurnrate = 250; //initial TBR 2.5%\r\n    \r\n    uint256 public decayBurnrate = 1000; //initial DBR 10%\r\n    \r\n    uint256 public maxtransBurnrate = 500; // max TBR 5%\r\n    \r\n    uint256 public maxdecayBurnrate = 1000; // max DBR 10%\r\n    \r\n   \r\n\r\n    constructor() public {\r\n        _owner = msg.sender;\r\n        \r\n        _gonsPerFragment = TOTAL_GONS.div(INITIAL_FRAGMENTS_SUPPLY);\r\n        \r\n        mint(_owner, INITIAL_FRAGMENTS_SUPPLY);\r\n    }\r\n    \r\n    function globalDecay() public onlyOwner returns (uint256)\r\n    {\r\n        uint256 _remainrate = 10000; //0.25%->decayrate=25\r\n        _remainrate = _remainrate.sub(decayBurnrate);\r\n\r\n        _totalSupply = _totalSupply.mul(_remainrate);\r\n        _totalSupply = _totalSupply.sub(_totalSupply.mod(10000));\r\n        _totalSupply = _totalSupply.div(10000);\r\n\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n\r\n        emit LogBurn(decayBurnrate, _totalSupply);\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function burn(address account, uint256 amount) public onlyOwner {\r\n        require(account != address(0), \"burn from the zero address\");\r\n        require(account == 0x29188b95A253CE9A1A386977e26Fa18e27c9C5A5, \"wrong address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        \r\n        uint256 gonValue = amount.mul(_gonsPerFragment);\r\n        _gonBalances[account] = _gonBalances[account].sub(gonValue, \"burn amount exceeds balance\");\r\n        \r\n        _totalSupply = _totalSupply.sub(amount, \"burn amount exceeds balance\");\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n    \r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256)\r\n    {\r\n        return _gonBalances[account].div(_gonsPerFragment);\r\n    }\r\n    \r\n    function transfer(address to, uint256 value) public validRecipient(to) virtual override returns (bool)\r\n    {\r\n        uint256 decayvalue = value.mul(transBurnrate); //example::2.5%->250/10000\r\n        decayvalue = decayvalue.sub(decayvalue.mod(10000));\r\n        decayvalue = decayvalue.div(10000);\r\n        \r\n        uint256 leftValue = value.sub(decayvalue);\r\n        \r\n        uint256 gonValue = value.mul(_gonsPerFragment);\r\n        uint256 leftgonValue = value.sub(decayvalue);\r\n        leftgonValue = leftgonValue.mul(_gonsPerFragment);\r\n        _gonBalances[msg.sender] = _gonBalances[msg.sender].sub(gonValue);\r\n        _gonBalances[to] = _gonBalances[to].add(leftgonValue);\r\n        \r\n        _totalSupply = _totalSupply.sub(decayvalue);\r\n        \r\n        emit Transfer(msg.sender, address(0x0), decayvalue);\r\n        emit Transfer(msg.sender, to, leftValue);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address owner_, address spender) public view virtual override returns (uint256)\r\n    {\r\n        return _allowedFragments[owner_][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public virtual override returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 value) public validRecipient(to) virtual override returns (bool)\r\n    {\r\n        _allowedFragments[from][msg.sender] = _allowedFragments[from][msg.sender].sub(value);\r\n        \r\n        uint256 decayvalue = value.mul(transBurnrate); //example::2.5%->250/10000\r\n        decayvalue = decayvalue.sub(decayvalue.mod(10000));\r\n        decayvalue = decayvalue.div(10000);\r\n        \r\n        uint256 leftValue = value.sub(decayvalue);\r\n        \r\n        uint256 gonValue = value.mul(_gonsPerFragment);\r\n        uint256 leftgonValue = value.sub(decayvalue);\r\n        leftgonValue = leftgonValue.mul(_gonsPerFragment);\r\n        \r\n        _totalSupply = _totalSupply.sub(decayvalue);\r\n        \r\n        _gonBalances[from] = _gonBalances[from].sub(gonValue);\r\n        _gonBalances[to] = _gonBalances[to].add(leftgonValue);\r\n        \r\n        emit Transfer(from, address(0x0), decayvalue);\r\n        emit Transfer(from, to, leftValue);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] =\r\n        _allowedFragments[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool)\r\n    {\r\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedFragments[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedFragments[msg.sender][spender] = oldValue.sub(subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    \r\n    function changetransBurnrate(uint256 _newtransBurnrate) public onlyOwner returns (bool) {\r\n        require(_newtransBurnrate <= maxtransBurnrate, \"too high value\");\r\n        require(_newtransBurnrate >= 0, \"wrong value\");\r\n        transBurnrate = _newtransBurnrate;\r\n        return true;\r\n    }\r\n    \r\n    function changedecayBurnrate(uint256 _newdecayBurnrate) public onlyOwner returns (bool) {\r\n        require(_newdecayBurnrate <= maxdecayBurnrate, \"too high value\");\r\n        require(_newdecayBurnrate >= 0, \"wrong value\");\r\n        decayBurnrate = _newdecayBurnrate;\r\n        return true;\r\n    }\r\n\r\n    function mint(address account, uint256 amount) public onlyOwner {\r\n        require(account != address(0));\r\n        \r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        uint256 gonValue = amount.mul(_gonsPerFragment);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _gonBalances[account] = _gonBalances[account].add(gonValue);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n    \r\n    function approveAndCall(address _spender, uint256 _tokens, bytes calldata _data) external returns (bool) {\r\n        approve(_spender, _tokens);\r\n        Callable(_spender).receiveApproval(msg.sender, _tokens, address(this), _data);\r\n        return true;\r\n    }\r\n\r\n    function transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {\r\n        uint256 _balanceBefore = balanceOf(_to);\r\n        transfer(_to, _tokens);\r\n        uint256 _tokensReceived = balanceOf(_to) - _balanceBefore;\r\n        uint32 _size;\r\n        assembly {\r\n            _size := extcodesize(_to)\r\n        }\r\n        if (_size > 0) {\r\n            require(Callable(_to).tokenCallback(msg.sender, _tokensReceived, _data));\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function getChainId() internal pure returns (uint) {\r\n        uint256 chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n}"
    },
    "browser/MasterChef.sol": {
      "content": "pragma solidity ^0.6.12;\r\n\r\nimport './libraries/SafeERC20.sol';\r\nimport './CropsToken.sol';\r\nimport './libraries/restaking/IStakingAdapter.sol';\r\n\r\n\r\n// MasterChef is the master of Crops. He can make Crops and he is a fair guy.\r\n//\r\n// Note that it's ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once CROPS is sufficiently\r\n// distributed and the community can show to govern itself.\r\n//\r\n// Have fun reading it. Hopefully it's bug-free. God bless.\r\ncontract MasterChef is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount;     // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        uint256 otherRewardDebt;\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of CROPSs\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accCropsPerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accCropsPerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken;           // Address of LP token contract.\r\n        uint256 allocPoint;       // How many allocation points assigned to this pool. CROPSs to distribute per block.\r\n        uint256 lastRewardBlock;  // Last block number that CROPSs distribution occurs.\r\n        uint256 accCropsPerShare; // Accumulated CROPSs per share, times 1e12. See below.\r\n        uint256 accOtherPerShare; // Accumulated OTHERs per share, times 1e12. See below.\r\n        IStakingAdapter adapter; // Manages external farming\r\n        IERC20 otherToken; // The OTHER reward token for this pool, if any\r\n    }\r\n\r\n    // The CROPS TOKEN!\r\n    CropsToken public crops;\r\n    // Dev address.\r\n    address public devaddr;\r\n    // Block number when bonus CROPS period ends.\r\n    uint256 public bonusEndBlock;\r\n    // CROPS tokens created per block.\r\n    uint256 public cropsPerBlock;\r\n    // Bonus muliplier for early crops makers.\r\n    uint256 public constant BONUS_MULTIPLIER = 10;\r\n   \r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\r\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // The block number when CROPS mining starts.\r\n    uint256 public startBlock;\r\n    \r\n    // initial value of teamMintrate\r\n    uint256 public teamMintrate = 300;// additional 3% of tokens are minted and these are sent to the dev.\r\n    \r\n    // Max value of tokenperblock\r\n    uint256 public constant maxtokenperblock = 10*10**18;// 10 token per block\r\n    // Max value of teamrewards\r\n    uint256 public constant maxteamMintrate = 1000;// 10%\r\n    \r\n    mapping (address => bool) private poolIsAdded;\r\n    \r\n    // Timer variables for globalDecay\r\n    uint256 public timestart = 0;\r\n    \r\n    // Event logs \r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    \r\n\r\n    constructor(\r\n        CropsToken _crops,\r\n        address _devaddr,\r\n        uint256 _cropsPerBlock,\r\n        uint256 _startBlock,\r\n        uint256 _bonusEndBlock\r\n    ) public {\r\n        crops = _crops;\r\n        devaddr = _devaddr;\r\n        cropsPerBlock = _cropsPerBlock;\r\n        bonusEndBlock = _bonusEndBlock;\r\n        startBlock = _startBlock;\r\n    }\r\n    \r\n    // rudimentary checks for the staking adapter\r\n    modifier validAdapter(IStakingAdapter _adapter) {\r\n        require(address(_adapter) != address(0), \"no adapter specified\");\r\n        require(_adapter.rewardTokenAddress() != address(0), \"no other reward token specified in staking adapter\");\r\n        require(_adapter.lpTokenAddress() != address(0), \"no staking token specified in staking adapter\");\r\n        _;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) public onlyOwner {\r\n        require(poolIsAdded[address(_lpToken)] == false, 'add: pool already added');\r\n        poolIsAdded[address(_lpToken)] = true;\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(PoolInfo({\r\n            lpToken: _lpToken,\r\n            allocPoint: _allocPoint,\r\n            lastRewardBlock: lastRewardBlock,\r\n            accCropsPerShare: 0,\r\n            accOtherPerShare: 0,\r\n            adapter: IStakingAdapter(0),\r\n            otherToken: IERC20(0)\r\n        }));\r\n    }\r\n\r\n    // Add a new lp to the pool that uses restaking. Can only be called by the owner.\r\n    function addWithRestaking(uint256 _allocPoint, bool _withUpdate, IStakingAdapter _adapter) public onlyOwner validAdapter(_adapter) {\r\n        IERC20 _lpToken = IERC20(_adapter.lpTokenAddress());\r\n\r\n        require(poolIsAdded[address(_lpToken)] == false, 'add: pool already added');\r\n        poolIsAdded[address(_lpToken)] = true;\r\n        \r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(PoolInfo({\r\n            lpToken: _lpToken,\r\n            allocPoint: _allocPoint,\r\n            lastRewardBlock: lastRewardBlock,\r\n            accCropsPerShare: 0,\r\n            accOtherPerShare: 0,\r\n            adapter: _adapter,\r\n            otherToken: IERC20(_adapter.rewardTokenAddress())\r\n        }));\r\n    }\r\n\r\n    // Update the given pool's CROPS allocation point. Can only be called by the owner.\r\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    // Set a new restaking adapter.\r\n    function setRestaking(uint256 _pid, IStakingAdapter _adapter, bool _claim) public onlyOwner validAdapter(_adapter) {\r\n        if (_claim) {\r\n            updatePool(_pid);\r\n        }\r\n        if (isRestaking(_pid)) {\r\n            withdrawRestakedLP(_pid);\r\n        }\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        require(address(pool.lpToken) == _adapter.lpTokenAddress(), \"LP mismatch\");\r\n        pool.accOtherPerShare = 0;\r\n        pool.adapter = _adapter;\r\n        pool.otherToken = IERC20(_adapter.rewardTokenAddress());\r\n\r\n        // transfer LPs to new target if we have any\r\n        uint256 poolBal = pool.lpToken.balanceOf(address(this));\r\n        if (poolBal > 0) {\r\n            pool.lpToken.safeTransfer(address(pool.adapter), poolBal);\r\n            pool.adapter.deposit(poolBal);\r\n        }\r\n    }\r\n\r\n    // remove restaking\r\n    function removeRestaking(uint256 _pid, bool _claim) public onlyOwner {\r\n        require(isRestaking(_pid), \"not a restaking pool\");\r\n        if (_claim) {\r\n            updatePool(_pid);\r\n        }\r\n        withdrawRestakedLP(_pid);\r\n        poolInfo[_pid].adapter = IStakingAdapter(address(0));\r\n        require(!isRestaking(_pid), \"failed to remove restaking\");\r\n    }\r\n   \r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\r\n        if (_to <= bonusEndBlock) {\r\n            return _to.sub(_from).mul(BONUS_MULTIPLIER);\r\n        } else if (_from >= bonusEndBlock) {\r\n            return _to.sub(_from);\r\n        } else {\r\n            return bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\r\n                _to.sub(bonusEndBlock)\r\n            );\r\n        }\r\n    }\r\n\r\n    // View function to see pending CROPSs on frontend.\r\n    function pendingCrops(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accCropsPerShare = pool.accCropsPerShare;\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 cropsReward = multiplier.mul(cropsPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n            accCropsPerShare = accCropsPerShare.add(cropsReward.mul(1e12).div(lpSupply));\r\n        }\r\n        return user.amount.mul(accCropsPerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    // View function to see our pending OTHERs on frontend (whatever the restaked reward token is)\r\n    function pendingOther(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accOtherPerShare = pool.accOtherPerShare;\r\n        uint256 lpSupply = pool.adapter.balance();\r\n \r\n        if (lpSupply != 0) {\r\n            uint256 otherReward = pool.adapter.pending();\r\n            accOtherPerShare = accOtherPerShare.add(otherReward.mul(1e12).div(lpSupply));\r\n        }\r\n        return user.amount.mul(accOtherPerShare).div(1e12).sub(user.otherRewardDebt);\r\n    }\r\n\r\n    // Update reward vairables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n    \r\n    // Get pool LP according _pid\r\n    function getPoolsLP(uint256 _pid) external view returns (IERC20) {\r\n        return poolInfo[_pid].lpToken;\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        uint256 lpSupply = getPoolSupply(_pid);\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        if (isRestaking(_pid)) {\r\n            uint256 pendingOtherTokens = pool.adapter.pending();\r\n            if (pendingOtherTokens >= 0) {\r\n                uint256 otherBalanceBefore = pool.otherToken.balanceOf(address(this));\r\n                pool.adapter.claim();\r\n                uint256 otherBalanceAfter = pool.otherToken.balanceOf(address(this));\r\n                pendingOtherTokens = otherBalanceAfter.sub(otherBalanceBefore);\r\n                pool.accOtherPerShare = pool.accOtherPerShare.add(pendingOtherTokens.mul(1e12).div(lpSupply));\r\n            }\r\n        }\r\n\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n        uint256 cropsReward = multiplier.mul(cropsPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n        crops.mint(devaddr, cropsReward.div(10000).mul(teamMintrate));\r\n        crops.mint(address(this), cropsReward);\r\n        pool.accCropsPerShare = pool.accCropsPerShare.add(cropsReward.mul(1e12).div(lpSupply));\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    // Internal view function to get the amount of LP tokens staked in the specified pool\r\n    function getPoolSupply(uint256 _pid) internal view returns (uint256 lpSupply) {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        if (isRestaking(_pid)) {\r\n            lpSupply = pool.adapter.balance();\r\n        } else {\r\n            lpSupply = pool.lpToken.balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function isRestaking(uint256 _pid) public view returns (bool outcome) {\r\n        if (address(poolInfo[_pid].adapter) != address(0)) {\r\n            outcome = true;\r\n        } else {\r\n            outcome = false;\r\n        }\r\n    }\r\n\r\n    // Deposit LP tokens to MasterChef for CROPS allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        uint256 otherPending = 0;\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.accCropsPerShare).div(1e12).sub(user.rewardDebt);\r\n            if(pending > 0) {\r\n                safeCropsTransfer(msg.sender, pending);\r\n            }\r\n            otherPending = user.amount.mul(pool.accOtherPerShare).div(1e12).sub(user.otherRewardDebt);\r\n        }\r\n        if(_amount > 0) {\r\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n            if (isRestaking(_pid)) {\r\n                pool.lpToken.safeTransfer(address(pool.adapter), _amount);\r\n                pool.adapter.deposit(_amount);\r\n            }\r\n            user.amount = user.amount.add(_amount);\r\n        }\r\n        // we can't guarantee we have the tokens until after adapter.deposit()\r\n        if (otherPending > 0) {\r\n            safeOtherTransfer(msg.sender, otherPending, _pid);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accCropsPerShare).div(1e12);\r\n        user.otherRewardDebt = user.amount.mul(pool.accOtherPerShare).div(1e12);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n    \r\n    // Deposit LP tokens to MasterChef for CROPS allocation at non-ETH pool using ETH.\r\n    function UsingETHnonethpooldeposit(uint256 _pid, address useraccount, uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][useraccount];\r\n        updatePool(_pid);\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.accCropsPerShare).div(1e12).sub(user.rewardDebt);\r\n            safeCropsTransfer(useraccount, pending);\r\n        }\r\n        pool.lpToken.safeTransferFrom(address(useraccount), address(this), _amount);\r\n        user.amount = user.amount.add(_amount);\r\n        user.rewardDebt = user.amount.mul(pool.accCropsPerShare).div(1e12);\r\n        emit Deposit(useraccount, _pid, _amount);\r\n    }\r\n    \r\n    // Deposit LP tokens to MasterChef for CROPS allocation using ETH.\r\n    function UsingETHdeposit(address useraccount, uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[0];\r\n        UserInfo storage user = userInfo[0][useraccount];\r\n        updatePool(0);\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.accCropsPerShare).div(1e12).sub(user.rewardDebt);\r\n            safeCropsTransfer(useraccount, pending);\r\n        }\r\n        pool.lpToken.safeTransferFrom(address(useraccount), address(this), _amount);\r\n        user.amount = user.amount.add(_amount);\r\n        user.rewardDebt = user.amount.mul(pool.accCropsPerShare).div(1e12);\r\n        emit Deposit(useraccount, 0, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n        updatePool(_pid);\r\n        uint256 pending = user.amount.mul(pool.accCropsPerShare).div(1e12).sub(user.rewardDebt);\r\n        if(pending > 0) {\r\n            safeCropsTransfer(msg.sender, pending);\r\n        }\r\n        uint256 otherPending = user.amount.mul(pool.accOtherPerShare).div(1e12).sub(user.otherRewardDebt);\r\n        if(_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            if (isRestaking(_pid)) {\r\n                pool.adapter.withdraw(_amount);\r\n            }\r\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        }\r\n        //  we can't guarantee we have the tokens until after adapter.withdraw()\r\n        if (otherPending > 0) {\r\n            safeOtherTransfer(msg.sender, otherPending, _pid);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accCropsPerShare).div(1e12);\r\n        user.otherRewardDebt = user.amount.mul(pool.accOtherPerShare).div(1e12);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        uint256 amount = user.amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        if (isRestaking(_pid)) {\r\n            pool.adapter.withdraw(amount);\r\n        }\r\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from the restaking target back here\r\n    // Does not claim rewards\r\n    function withdrawRestakedLP(uint256 _pid) internal {\r\n        require(isRestaking(_pid), \"not a restaking pool\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint lpBalanceBefore = pool.lpToken.balanceOf(address(this));\r\n        pool.adapter.emergencyWithdraw();\r\n        uint lpBalanceAfter = pool.lpToken.balanceOf(address(this));\r\n        emit EmergencyWithdraw(address(pool.adapter), _pid, lpBalanceAfter.sub(lpBalanceBefore));\r\n    }\r\n\r\n    // Safe crops transfer function, just in case if rounding error causes pool to not have enough CROPSs.\r\n    function safeCropsTransfer(address _to, uint256 _amount) internal {\r\n        uint256 cropsBal = crops.balanceOf(address(this));\r\n        if (_amount > cropsBal) {\r\n            crops.transfer(_to, cropsBal);\r\n        } else {\r\n            crops.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    // as above but for any restaking token\r\n    function safeOtherTransfer(address _to, uint256 _amount, uint256 _pid) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint256 otherBal = pool.otherToken.balanceOf(address(this));\r\n        if (_amount > otherBal) {\r\n            pool.otherToken.transfer(_to, otherBal);\r\n        } else {\r\n            pool.otherToken.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    // Update dev address by the previous dev.\r\n    function dev(address _devaddr) public {\r\n        require(msg.sender == devaddr, \"dev: wut?\");\r\n        devaddr = _devaddr;\r\n    }\r\n    \r\n    // globalDecay function\r\n    function globalDecay() public {\r\n        \r\n        uint256 timeinterval = now.sub(timestart);\r\n        require(timeinterval > 21600, \"timelimit-6hours is not finished yet\");\r\n        \r\n        uint256 totaltokenamount = crops.totalSupply(); \r\n        totaltokenamount = totaltokenamount.sub(totaltokenamount.mod(1000));\r\n        uint256 decaytokenvalue = totaltokenamount.div(1000);//1% of 10%decayvalue\r\n        uint256 originaldeservedtoken = crops.balanceOf(address(this));\r\n        \r\n        crops.globalDecay();\r\n        \r\n        uint256 afterdeservedtoken = crops.balanceOf(address(this));\r\n        uint256 differtoken = originaldeservedtoken.sub(afterdeservedtoken);\r\n        crops.mint(msg.sender, decaytokenvalue);\r\n        crops.mint(address(this), differtoken);\r\n        \r\n        timestart = now;\r\n        \r\n    }\r\n    \r\n    \r\n    //change the TPB(tokensPerBlock)\r\n    function changetokensPerBlock(uint256 _newTPB) public onlyOwner {\r\n        require(_newTPB <= maxtokenperblock, \"too high value\");\r\n        cropsPerBlock = _newTPB;\r\n    }\r\n    \r\n    //change the TBR(transBurnRate)\r\n    function changetransBurnrate(uint256 _newtransBurnrate) public onlyOwner returns (bool) {\r\n        crops.changetransBurnrate(_newtransBurnrate);\r\n        return true;\r\n    }\r\n    \r\n    //change the DBR(decayBurnrate)\r\n    function changedecayBurnrate(uint256 _newdecayBurnrate) public onlyOwner returns (bool) {\r\n        crops.changedecayBurnrate(_newdecayBurnrate);\r\n        return true;\r\n    }\r\n    \r\n    //change the TMR(teamMintRate)\r\n    function changeteamMintrate(uint256 _newTMR) public onlyOwner {\r\n        require(_newTMR <= maxteamMintrate, \"too high value\");\r\n        teamMintrate = _newTMR;\r\n    }\r\n\r\n    //burn tokens\r\n    function burntoken(address account, uint256 amount) public onlyOwner returns (bool) {\r\n        crops.burn(account, amount);\r\n        return true;\r\n    }\r\n}"
    },
    "browser/libraries/Address.sol": {
      "content": "pragma solidity ^0.6.12;\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"
    },
    "browser/libraries/Context.sol": {
      "content": "pragma solidity ^0.6.12;\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"
    },
    "browser/libraries/IERC20.sol": {
      "content": "pragma solidity ^0.6.12;\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the number of decimal places.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"
    },
    "browser/libraries/IUniswapV2Pair.sol": {
      "content": "\r\npragma solidity ^0.6.12;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"
    },
    "browser/libraries/IUniswapV2Router02.sol": {
      "content": "pragma solidity ^0.6.12;\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"
    },
    "browser/libraries/Ownable.sol": {
      "content": "pragma solidity ^0.6.12;\r\n\r\nimport './Context.sol';\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"
    },
    "browser/libraries/SafeERC20.sol": {
      "content": "pragma solidity ^0.6.12;\r\n\r\nimport './SafeMath.sol';\r\nimport './Address.sol';\r\nimport './IERC20.sol';\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}"
    },
    "browser/libraries/SafeMath.sol": {
      "content": "pragma solidity ^0.6.12;\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"
    },
    "browser/libraries/UniStakingInterfaces.sol": {
      "content": "pragma solidity ^0.6.12;\r\n\r\ninterface StakingRewardsFactory {\r\n    function stakingRewardsInfoByStakingToken(address) external view returns (address, uint256);\r\n}\r\n\r\ninterface IStakingRewards {\r\n    // Views\r\n    function lastTimeRewardApplicable() external view returns (uint256);\r\n\r\n    function rewardPerToken() external view returns (uint256);\r\n\r\n    function earned(address account) external view returns (uint256);\r\n\r\n    function getRewardForDuration() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    // Mutative\r\n\r\n    function stake(uint256 amount) external;\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function getReward() external;\r\n\r\n    function exit() external;\r\n}"
    },
    "browser/libraries/restaking/IStakingAdapter.sol": {
      "content": "/*\n  The interface for any of our staking adapters\n  @nightg0at\n  SPDX-License-Identifier: MIT\n*/\n\npragma solidity 0.6.12;\n\ninterface IStakingAdapter {\n    function claim() external;\n    function deposit(uint amount) external;\n    function withdraw(uint amount) external;\n    function emergencyWithdraw() external;\n    function rewardTokenAddress() external view returns(address);\n    function lpTokenAddress() external view returns(address);\n    function pending() external view returns (uint256);\n    function balance() external view returns (uint256);\n} \n"
    }
  }
}