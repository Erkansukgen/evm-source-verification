{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Asset.sol":{"content":"pragma solidity <=0.5.4;\r\n\r\ncontract Ownable {\r\n\r\n    string public contractName;\r\n    address public owner;\r\n    address public manager;\r\n\r\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\r\n    event ManagerChanged(address indexed previousManager, address indexed newManager);\r\n\r\n    constructor() internal {\r\n        owner = msg.sender;\r\n        manager = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager(bytes32 managerName) {\r\n        require(msg.sender == manager, \"Ownable: caller is not the manager\");\r\n        _;\r\n    }\r\n\r\n\r\n    function setOwner(address _owner) public onlyOwner {\r\n        require(_owner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnerChanged(owner, _owner);\r\n        owner = _owner;\r\n    }\r\n\r\n    function setManager(address _manager) public onlyOwner {\r\n        require(_manager != address(0), \"Ownable: new manager is the zero address\");\r\n        emit ManagerChanged(manager, _manager);\r\n        manager = _manager;\r\n    }\r\n\r\n    function setContractName(bytes32 _contractName) internal {\r\n        contractName = string(abi.encodePacked(_contractName));\r\n    }\r\n\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory concatString) internal pure returns (uint256) {\r\n        require(b <= a, concatString);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory concatString) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, concatString);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory concatString) internal pure returns (uint256) {\r\n        require(b != 0, concatString);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function transfer(address recipient, uint value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n}\r\n\r\n\r\ncontract Token is Ownable, IERC20 {\r\n\r\n    using SafeMath for uint;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public constant decimals = 18;\r\n    uint public totalSupply;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    function balanceOf(address account) external view returns (uint) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint amount) external returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint delta = _allowances[sender][msg.sender].sub(amount, \"Token: transfer amount exceeds allowance\");\r\n        _approve(sender, msg.sender, delta);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint amount) internal {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint amount) internal {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Token: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint amount) internal {\r\n        totalSupply = totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint amount) internal {\r\n        _balances[account] = _balances[account].sub(amount, \"Token: burn amount exceeds balance\");\r\n        totalSupply = totalSupply.sub(amount, \"Token: burn amount exceeds totalSupply\");\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n}\r\n\r\ninterface IAsset {\r\n\r\n    function mint(address account, uint amount) external returns (bool);\r\n    function burn(address account, uint amount) external returns (bool);\r\n\r\n}\r\n\r\n\r\ncontract Asset is Token, IAsset {\r\n\r\n    function initialize(string memory _name, string memory _symbol, address _manager) public onlyOwner {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        contractName = _symbol;\r\n        setManager(_manager);\r\n    }\r\n\r\n    function mint(address account, uint amount) external onlyManager(\"ISSUER\") returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n\r\n    function burn(address account, uint amount) external onlyManager(\"ISSUER\") returns (bool) {\r\n        _burn(account, amount);\r\n        return true;\r\n    }\r\n\r\n}"}}}