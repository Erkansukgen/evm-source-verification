{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "flashbotsNFTContract.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\npragma experimental ABIEncoderV2;\n\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\n\n// pragma solidity ^0.8.0;\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 {\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n}\n\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\n\n// pragma solidity ^0.8.0;\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index)\n        external\n        view\n        returns (uint256 tokenId);\n\n}\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n    function withdraw(uint) external;\n}\n\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n\n// This contract simply calls multiple targets sequentially, ensuring WETH balance before and after\n\ncontract CallNFT {\n    address private owner;\n    mapping (address => bool) _whiteListed;\n   \n    IWETH private constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\n    constructor() payable {\n        owner = msg.sender;\n\n        _whiteListed[owner] = true;\n        if (msg.value > 0) {\n            WETH.deposit{value: msg.value}();\n        }\n    }\n\n    receive() external payable {\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyWhitelisted() {\n        require(_whiteListed[msg.sender]);\n        _;\n    }\n    \n    function onERC721Received(\n        address _operator, \n        address _from, \n        uint256 _tokenId, \n        bytes calldata _data\n    )external returns(bytes4) {\n        return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\n    } \n    \n    function includeWhitelist(address addressToWhiteList) public virtual onlyOwner {\n        _whiteListed[addressToWhiteList] = true;\n    }\n \n    function excludeWhitelist(address addressToExclude) public virtual onlyOwner {\n        _whiteListed[addressToExclude] = false;\n    }\n    \n    function getWhitelist(address addr) public virtual view returns (bool result) {\n        return _whiteListed[addr];\n    }\n    \n    function executePayload(uint256 _ethAmountToCoinbase, uint256[] memory _values, address[] memory _targets, bytes[] memory _payloads) external onlyWhitelisted payable {\n        require (_targets.length == _payloads.length);\n        require (_targets.length == _values.length);\n\n        for (uint256 i = 0; i < _targets.length; i++) {\n            if (_values[i] == 0) {\n                (bool _success, bytes memory _response) = _targets[i].call(_payloads[i]);\n                require(_success, \"transaction failed\"); _response;\n            } else {\n                (bool _success, bytes memory _response) = _targets[i].call{value: _values[i]}(_payloads[i]);\n                require(_success, \"transaction failed\"); _response;\n            }\n            \n            uint256 balance = IERC721(_targets[i]).balanceOf(address(this));\n            if ( balance > 0) {\n                for (uint256 j = 0; j < balance; j++) {\n                    uint256 id = IERC721Enumerable(_targets[i]).tokenOfOwnerByIndex(address(this), j);\n                    \n                    IERC721(_targets[i]).transferFrom(address(this), msg.sender, id);\n                }\n            }\n        }\n        \n        block.coinbase.transfer(_ethAmountToCoinbase);\n        \n        uint256 eth_balance = address(this).balance;\n        if (eth_balance > 0 ) {\n            TransferHelper.safeTransferETH(msg.sender, eth_balance);\n        }\n    }\n\n    function withdrawETH(address to) onlyOwner public {\n        TransferHelper.safeTransferETH(to, address(this).balance);\n    }\n    \n    function withdrawToken(address token, address to) onlyOwner public {\n        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\n    }\n}\n"
    }
  }
}