{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"BundleExecutor.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\n\n// The ABI encoder is necessary, but older Solidity versions should work\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n// These definitions are taken from across multiple dydx contracts, and are\n// limited to just the bare minimum necessary to make flash loans work.\nlibrary Types {\n    enum AssetDenomination { Wei, Par }\n    enum AssetReference { Delta, Target }\n    struct AssetAmount {\n        bool sign;\n        AssetDenomination denomination;\n        AssetReference ref;\n        uint256 value;\n    }\n}\n\nlibrary Account {\n    struct Info {\n        address owner;\n        uint256 number;\n    }\n}\n\nlibrary Actions {\n    enum ActionType {\n        Deposit, Withdraw, Transfer, Buy, Sell, Trade, Liquidate, Vaporize, Call\n    }\n    struct ActionArgs {\n        ActionType actionType;\n        uint256 accountId;\n        Types.AssetAmount amount;\n        uint256 primaryMarketId;\n        uint256 secondaryMarketId;\n        address otherAddress;\n        uint256 otherAccountId;\n        bytes data;\n    }\n}\n\ninterface ISoloMargin {\n    function operate(Account.Info[] memory accounts, Actions.ActionArgs[] memory actions) external;\n}\n\n// The interface for a contract to be callable after receiving a flash loan\ninterface ICallee {\n    function callFunction(address sender, Account.Info memory accountInfo, bytes memory data) external;\n}\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n\n// Additional methods available for WETH\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n    function withdraw(uint wad) external;\n}\n\ncontract FlashLoanTemplate is ICallee {\n    address private immutable owner;\n    uint256 private constant LOAN_AMOUNT = 0x3635c9adc5dea00000; // 10**18 * 1000 = 1000 WETH\n    IWETH private constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n    ISoloMargin private constant SOLO_MARGIN = ISoloMargin(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e); // dydx\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n        WETH.approve(address(SOLO_MARGIN), type(uint256).max);\n    }\n\n\n    function withdraw() onlyOwner public {\n        // we always use flashloans so just take it all out at once\n        WETH.withdraw(WETH.balanceOf(address(this)));\n        payable(owner).transfer(address(this).balance);\n    }\n\n    // This is the function we call\n    function flashLoan(uint256 _profitMul1000, address[] memory _targets, bytes[] memory _payloads) public onlyOwner {\n        /*\n        The flash loan functionality in dydx is predicated by their \"operate\" function,\n        which takes a list of operations to execute, and defers validating the state of\n        things until it's done executing them.\n        \n        We thus create three operations, a Withdraw (which loans us the funds), a Call\n        (which invokes the callFunction method on this contract), and a Deposit (which\n        repays the loan, plus the 2 wei fee), and pass them all to \"operate\".\n        \n        Note that the Deposit operation will invoke the transferFrom to pay the loan \n        (or whatever amount it was initialised with) back to itself, there is no need\n        to pay it back explicitly.\n        \n        The loan must be given as an ERC-20 token, so WETH is used instead of ETH. Other\n        currencies (DAI, USDC) are also available, their index can be looked up by\n        calling getMarketTokenAddress on the solo margin contract, and set as the \n        primaryMarketId in the Withdraw and Deposit definitions.\n        */\n\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\n\n        operations[0] = Actions.ActionArgs({\n            actionType: Actions.ActionType.Withdraw,\n            accountId: 0,\n            amount: Types.AssetAmount({\n                sign: false,\n                denomination: Types.AssetDenomination.Wei,\n                ref: Types.AssetReference.Delta,\n                value: LOAN_AMOUNT // Amount to borrow\n            }),\n            primaryMarketId: 0, // WETH\n            secondaryMarketId: 0,\n            otherAddress: address(this),\n            otherAccountId: 0,\n            data: \"\"\n        });\n        \n        operations[1] = Actions.ActionArgs({\n                actionType: Actions.ActionType.Call,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: false,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: 0\n                }),\n                primaryMarketId: 0,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: abi.encode(\n                    _profitMul1000,\n                    _targets,\n                    _payloads\n                )\n            });\n        \n        operations[2] = Actions.ActionArgs({\n            actionType: Actions.ActionType.Deposit,\n            accountId: 0,\n            amount: Types.AssetAmount({\n                sign: true,\n                denomination: Types.AssetDenomination.Wei,\n                ref: Types.AssetReference.Delta,\n                value: LOAN_AMOUNT + 2 // Repayment amount with 2 wei fee\n            }),\n            primaryMarketId: 0, // WETH\n            secondaryMarketId: 0,\n            otherAddress: address(this),\n            otherAccountId: 0,\n            data: \"\"\n        });\n\n        Account.Info[] memory accountInfos = new Account.Info[](1);\n        accountInfos[0] = Account.Info({owner: address(this), number: 1});\n\n        SOLO_MARGIN.operate(accountInfos, operations);\n    }\n    \n    // This is the function called by dydx after giving us the loan\n    function callFunction(address sender, Account.Info memory accountInfo, bytes memory data) external override {\n        // Decode the passed variables from the data object\n        (\n            // This must match the variables defined in the Call object above\n            uint256 _profitMul1000,\n            address[] memory _targets,\n            bytes[] memory _payloads\n        ) = abi.decode(data, (\n            uint256, address[], bytes[]\n        ));\n        \n        require (_targets.length == _payloads.length, \"l\");\n        uint256 _wethBalanceBefore = WETH.balanceOf(address(this));\n\n        // multicall\n        for (uint256 i = 0; i < _targets.length; i++) {\n            (bool _success, bytes memory _response) = _targets[i].call(_payloads[i]);\n            require(_success, string(_response));\n        }\n\n        uint256 _wethBalanceAfter = WETH.balanceOf(address(this));\n        // revert if unprofitable\n        require(_wethBalanceAfter > _wethBalanceBefore, \"b\");\n\n        // this is safe because we have already ensured that the balance after is greater than the balance before\n        // give (_profitMul1000/1000)% of profit to miner\n        uint256 _ethAmountToCoinbase = (_wethBalanceAfter - _wethBalanceBefore) * _profitMul1000 / 1000;\n        WETH.withdraw(_ethAmountToCoinbase);\n        block.coinbase.transfer(_ethAmountToCoinbase);\n    }\n}"}}}