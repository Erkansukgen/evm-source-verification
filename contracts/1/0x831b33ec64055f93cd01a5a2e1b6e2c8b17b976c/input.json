{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "localhost/DMiner/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "localhost/DMiner/Governance.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ncontract Governance {\n\n    address public _governance;\n\n    constructor() public {\n        _governance = tx.origin;\n    }\n\n    event GovernanceTransferred(address indexed previousOwner, address indexed newOwner);\n\n    modifier onlyGovernance {\n        require(msg.sender == _governance, \"not governance\");\n        _;\n    }\n\n    function setGovernance(address governance) public onlyGovernance\n    {\n        require(governance != address(0), \"new governance the zero address\");\n        emit GovernanceTransferred(_governance, governance);\n        _governance = governance;\n    }\n\n}\n"
    },
    "localhost/DMiner/ICloudMiner.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\nimport \"./IERC721.sol\";\r\n\r\ninterface ICloudMiner is IERC721 {\r\n   \r\n\tfunction mint(address owner) external returns(uint256);\r\n\t\r\n\tfunction burn(uint256 tokenId) external;\r\n    \r\n\tfunction tokensOfOwner(address owner) external view returns (uint256[] memory) ;\r\n\t\r\n}\r\n"
    },
    "localhost/DMiner/IDMEXToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ninterface IDMEXToken is IERC20 {\r\n    \r\n    function mint(uint256 _amount) external;\r\n    \r\n    function burn(uint256 _amount) external;\r\n    \r\n}\r\n"
    },
    "localhost/DMiner/IDMexAirdrop.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ninterface IDMexAirdrop {\r\n    \r\n    function recvAirdrop(address user) external returns (uint256, uint256);\r\n\r\n    function getAirdropEndTime() external view returns (uint256);\r\n\r\n    function checkAirdrop(address user) external view returns (bool, bool, uint256);\r\n\r\n}\r\n"
    },
    "localhost/DMiner/IDMexVendor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./IDMexVendorStorage.sol\";\r\n\r\ninterface IDMexVendor is IDMexVendorStorage {\r\n    \r\n    event NewVendor(uint256 vendorid);\r\n    event DisableVendor(uint256 vendorid);\r\n    event NewProduct(uint256 prodid);\r\n    event VendorWithdraw(address indexed user, uint256 amount);\r\n    event UserRedemption(address indexed user, uint256 prodid, uint256 amount);\r\n    \r\n    function getVendor(uint256 _vendorid) external view returns(VendorInfo memory);\r\n    \r\n    function getProduct(uint256 _prodid) external view returns(ProductInfo memory);\r\n    \r\n    function settlementAndTimeLock(uint256 _prodid, address user, uint256 _power, uint256 _amount) external;\r\n    \r\n}\r\n"
    },
    "localhost/DMiner/IDMexVendorStorage.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ninterface IDMexVendorStorage  {\r\n    \r\n    enum VendorState {\r\n        DISABLED,\r\n        NORMAL\r\n    }\r\n    \r\n    enum ProdState {\r\n        STOPPED,\r\n        NORMAL\r\n    }\r\n    \r\n    struct VendorInfo {\r\n        address     admin;              //vendor admin\r\n        address     recvAddr;           //address vendor recv usdt\r\n        bytes32     vendorName;         //vendor name\r\n        uint256     disableTime;\r\n        VendorState state;\r\n    }\r\n    \r\n    struct ProductInfo {\r\n        uint256     vendorid;           //vendor id\r\n        uint256     prodType;           //1.common prod(Available for purchase) 2.airdrop(Not available for purchase)\r\n        uint256     pubPower;           //Project released power capacity\r\n        uint256     soldPower;          //Project sold power capacity\r\n        uint256     power;              //power of each shard(Unit is GB)\r\n        uint256     effectPeriod;       //Total collection time(Unit is day)\r\n        uint256     activePeriod;       //How soon after the collection is purchased(Unit is day)\r\n        uint256     startTime;          //purchase time must after startTime, no limit if value is 0\r\n        uint256     endTime;            //purchase time must before endTime, no limit if value is 0\r\n        uint256     price;              //each power price(USDT)\r\n        ProdState   state;\r\n    }\r\n    \r\n    struct ProdTimeLock {\r\n        uint256                     totalLocks;\r\n        uint256                     totalGains;\r\n        mapping(address => uint256) userPowers;\r\n        address                     owner;\r\n    }\r\n    \r\n}"
    },
    "localhost/DMiner/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"
    },
    "localhost/DMiner/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n"
    },
    "localhost/DMiner/IFilDMiner.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./IFilDMinerStorage.sol\";\r\nimport \"./IDMexVendor.sol\";\r\nimport \"./IDMexAirdrop.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Vistor.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./ICloudMiner.sol\";\r\nimport \"./IDMEXToken.sol\";\r\n\r\ncontract IFilDMiner is IFilDMinerStorage,IDMexVendorStorage,Vistor {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    event DepositBenefit(uint256 indexed prodid, uint256 dayTime, uint256 mineAmount);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n    event Exchange(address indexed user, uint256 amount, string ifilAddr);\r\n    event BuyIFilNFT(address indexed user, uint256 tokenid, uint256 prodid, uint256 payAmount, uint256 power);\r\n    event UserRegister(address indexed user, bytes32 inviteCode);\r\n    event InviteReward(address indexed user, address indexed inviter, uint256 amount);\r\n    event ChangeIFilFunder(address indexed oldAddr, address indexed newAddr);\r\n    event ChangeAirdrop(address indexed _airdrop);\r\n    event RecvAirdrop(address indexed user, uint256 indexed tokenid, uint256 prodid, uint256 power);\r\n    \r\n    IDMexVendor private constant dmexVendor = IDMexVendor(0x135D25A19d8164A5915a0Ac83ed32Af30980Da55);\r\n    ICloudMiner private constant cloudMiner = ICloudMiner(0x1012C998F969a145df6387f2B4B0DD91227a8b72);\r\n    IDMEXToken private constant ifilToken = IDMEXToken(0x02d6b12139F213daDeB2864fBAE6Da7AaD995da6);\r\n    \r\n    bytes4 private constant ERC20_TRANSFERFROM_SELECTOR = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\r\n    address private constant usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    \r\n    address private constant fundAddr = 0x90D564bD31e573316546De09a8E76c5E39C064D0;\r\n    bytes32 private constant OFFICAL_UID = 0x444d455800000000000000000000000000000000000000000000000000000000;\r\n    \r\n    uint256 private constant FEERATE = 5;               //back pay usdt * feeRate / 100 to fundAddr\r\n    uint256 private constant DAYTIME = 86400;\r\n    uint256 private constant fixedRate = 25;            //fixed release rate\r\n    uint256 private constant linearRate = 75;           //linear release\r\n    uint256 private constant linearReleaseDay = 180;     //linear release day\r\n    \r\n    address public airdrop;\r\n    bool public _initialize;\r\n    \r\n    function initialize() public {\r\n        require(_initialize == false, \"already initialized\");\r\n        _initialize = true;\r\n        _governance = msg.sender;\r\n        _users[fundAddr].uid = OFFICAL_UID;\r\n        _uids[OFFICAL_UID] = fundAddr;\r\n    }\r\n    \r\n    function setAirdrop(address _addr) onlyGovernance public {\r\n        airdrop = _addr;\r\n        emit ChangeAirdrop(_addr);\r\n    }\r\n    \r\n    function depositBenefits(uint256 _prodid, uint256 _effectPower, uint256 _mineBenefits) onlyVistor public {\r\n        ifilToken.mint(_mineBenefits);\r\n        \r\n        uint256 _dayTime = block.timestamp.div(DAYTIME).mul(DAYTIME);\r\n        _beftPools[_prodid][_dayTime].fixedMineAmount += _mineBenefits.mul(fixedRate).div(100);\r\n        _beftPools[_prodid][_dayTime].linearMineAmount += _mineBenefits.mul(linearRate).div(100);\r\n        _beftPools[_prodid][_dayTime].effectPower = _effectPower;\r\n        emit DepositBenefit(_prodid, _dayTime, _mineBenefits);\r\n    }\r\n    \r\n    function createNFT(bytes32 _inviterid, uint256 _prodid, uint256 _buyAmount, uint256 _payment) public {\r\n        ProductInfo memory prod = dmexVendor.getProduct(_prodid);\r\n        require(prod.prodType == 1, \"Non-purchasable Product\");\r\n        if (prod.startTime > 0) {\r\n            require(block.timestamp >= prod.startTime, \"It's not time to buy yet\");\r\n        }\r\n        uint256 _recvPower = _buyAmount.mul(prod.power);\r\n        \r\n        if (_users[msg.sender].inviter == address(0)) {\r\n            require(_uids[_inviterid] != address(0) && _uids[_inviterid] != msg.sender, \"error inviter\");\r\n            _users[msg.sender].inviter = _uids[_inviterid];\r\n            \r\n            _users[_uids[_inviterid]].invitees.push(msg.sender);\r\n        }\r\n        \r\n        uint256 needPayAmount = _buyAmount.mul(prod.price);\r\n        require(_payment == needPayAmount, \"price not correct\");\r\n        \r\n        address inviter = _users[msg.sender].inviter;\r\n        uint256 needPayFee = needPayAmount.mul(FEERATE).div(100);\r\n        uint256 inviteRewards = needPayAmount.mul(_getRebateRate(inviter)).div(100);\r\n        \r\n        _safeTransferFrom(msg.sender, fundAddr, needPayFee);\r\n        _safeTransferFrom(msg.sender, inviter, inviteRewards);\r\n        \r\n        uint256 sendAmount = needPayAmount.sub(needPayFee).sub(inviteRewards);\r\n        _safeTransferFrom(msg.sender, address(dmexVendor), sendAmount);\r\n        dmexVendor.settlementAndTimeLock(_prodid, msg.sender, _recvPower, sendAmount);\r\n        \r\n        emit InviteReward(msg.sender, inviter, inviteRewards);\r\n        \r\n        uint256 curDayTime = block.timestamp.div(DAYTIME).mul(DAYTIME);\r\n        uint256 tokenid = cloudMiner.mint(msg.sender);\r\n        _ifilNfts[tokenid].prodid = _prodid;\r\n        _ifilNfts[tokenid].power = _recvPower;\r\n        _ifilNfts[tokenid].createTime = block.timestamp;\r\n        _ifilNfts[tokenid].activeTime = curDayTime.add(prod.activePeriod.mul(DAYTIME));\r\n        _ifilNfts[tokenid].expireTime = _ifilNfts[tokenid].activeTime.add(prod.effectPeriod.mul(DAYTIME));\r\n        _prodNfts[_prodid].push(tokenid);\r\n        \r\n        emit BuyIFilNFT(msg.sender, tokenid, _prodid, needPayAmount, _recvPower);\r\n    }\r\n    \r\n    function userRegister(bytes32 inviteCode) public {\r\n        require(inviteCode != 0x0, \"invalid inviteCode\");\r\n        require(_uids[inviteCode] == address(0), \"The invitation code has been registered\");\r\n        require(_users[msg.sender].uid == 0x0, \"The user has been registered\");\r\n        _users[msg.sender].uid = inviteCode;\r\n        _uids[inviteCode] = msg.sender;\r\n        emit UserRegister(msg.sender, inviteCode);\r\n    }\r\n    \r\n    function recvAirdrop() public {\r\n        (uint256 _prodid, uint256 _power) = IDMexAirdrop(airdrop).recvAirdrop(msg.sender);\r\n        require(dmexVendor.getProduct(_prodid).prodType == 2, \"Non-Airdrop Product\");\r\n        \r\n        uint256 curDayTime = block.timestamp.div(DAYTIME).mul(DAYTIME);\r\n\t\t\r\n        ProductInfo memory prod = dmexVendor.getProduct(_prodid);\r\n        uint256 tokenid = cloudMiner.mint(msg.sender);\r\n        _ifilNfts[tokenid].prodid = _prodid;\r\n        _ifilNfts[tokenid].power = _power;\r\n        _ifilNfts[tokenid].createTime = block.timestamp;\r\n        _ifilNfts[tokenid].activeTime = curDayTime.add(prod.activePeriod.mul(DAYTIME));\r\n        _ifilNfts[tokenid].expireTime = _ifilNfts[tokenid].activeTime.add(prod.effectPeriod.mul(DAYTIME));\r\n        _prodNfts[_prodid].push(tokenid);\r\n        \r\n        emit RecvAirdrop(msg.sender, tokenid, _prodid, _power);\r\n    }\r\n    \r\n    function withdrawBenefits() public {\r\n        uint256[] memory _tokens = cloudMiner.tokensOfOwner(msg.sender);\r\n        if (_tokens.length <= 0) {\r\n            return;\r\n        }\r\n        uint256 totalBenefits = 0;\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            IFilNFT storage ifilNFT = _ifilNfts[_tokens[i]];\r\n            (uint256 nftBenefits, ) = _calcNFTBenefits(_tokens[i]);\r\n            if (nftBenefits > ifilNFT.gainBenefits) {\r\n                totalBenefits += nftBenefits.sub(ifilNFT.gainBenefits);\r\n                ifilNFT.gainBenefits = nftBenefits;\r\n            }\r\n        }\r\n        _users[msg.sender].gainBenefits += totalBenefits;\r\n        ifilToken.transfer(msg.sender, totalBenefits);\r\n        emit Withdraw(msg.sender, totalBenefits);\r\n    }\r\n    \r\n    function withdrawBenefits(uint256[] memory _tokens) public {\r\n        uint256 totalBenefits = 0;\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            require(cloudMiner.ownerOf(_tokens[i]) == msg.sender, \"not owner withdraw\");\r\n            IFilNFT storage ifilNFT = _ifilNfts[_tokens[i]];\r\n            (uint256 nftBenefits, ) = _calcNFTBenefits(_tokens[i]);\r\n            if (nftBenefits > ifilNFT.gainBenefits) {\r\n                totalBenefits += nftBenefits.sub(ifilNFT.gainBenefits);\r\n                ifilNFT.gainBenefits = nftBenefits;\r\n            }\r\n        }\r\n        _users[msg.sender].gainBenefits += totalBenefits;\r\n        ifilToken.transfer(msg.sender, totalBenefits);\r\n        emit Withdraw(msg.sender, totalBenefits);\r\n    }\r\n    \r\n    function withdrawIFil(uint256 _amount, string memory _iflAddr) public {\r\n        ifilToken.transferFrom(msg.sender, address(this), _amount);\r\n        ifilToken.burn(_amount);\r\n        emit Exchange(msg.sender, _amount, _iflAddr);\r\n    }\r\n    \r\n    function getBenefitPool(uint256 _prodid, uint256 _poolid) public view returns(BenefitPool memory) {\r\n        return _beftPools[_prodid][_poolid];\r\n    }\r\n    \r\n    function getAndCheckRecvAirdrop(address owner) public view returns(bool, bool, uint256, uint256) {\r\n        (bool _available, bool _received, uint256 _power) = IDMexAirdrop(airdrop).checkAirdrop(owner);\r\n        return (_available, _received, _power, IDMexAirdrop(airdrop).getAirdropEndTime());\r\n    }\r\n    \r\n    function getUserInfo(address owner) public view returns(BackUser memory) {\r\n        uint256[] memory _tokens = cloudMiner.tokensOfOwner(owner);\r\n        \r\n        uint256 effectPower = 0;\r\n        uint256 _nftTotalBenefits = 0;\r\n        uint256 _nftGainBenefits = 0;\r\n        uint256 _unreleaseBenefits = 0;\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            {\r\n                (uint256 calcTotalBenefits, uint256 calcUnreleaseBenefits) = _calcNFTBenefits(_tokens[i]);\r\n                _nftTotalBenefits += calcTotalBenefits;\r\n                _unreleaseBenefits += calcUnreleaseBenefits;\r\n                _nftGainBenefits += _ifilNfts[_tokens[i]].gainBenefits;\r\n                if (block.timestamp < _ifilNfts[_tokens[i]].expireTime) {\r\n                    effectPower += _ifilNfts[_tokens[i]].power;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return BackUser({\r\n            uid:            _users[owner].uid,\r\n            inviter:        _users[owner].inviter,\r\n            inviteeNum:     _users[owner].invitees.length,\r\n            tokenNum:       _tokens.length,\r\n            ugrade:         _users[owner].ugrade,\r\n            effectPower:    effectPower,\r\n            received:       _users[owner].gainBenefits,\r\n            available:      _nftTotalBenefits.sub(_nftGainBenefits),\r\n            unreleased:     _unreleaseBenefits\r\n        });\r\n    }\r\n    \r\n    function getInviter(bytes32 inviterid) public view returns(address) {\r\n        return _uids[inviterid];\r\n    }\r\n    \r\n    function getNFTInfo(uint256 tokenid) public view returns(IFilNFT memory, uint256, uint256) {\r\n        IFilNFT memory nft = _ifilNfts[tokenid];\r\n        (uint256 calcTotalBenefits, uint256 calcUnreleaseBenefits) = _calcNFTBenefits(tokenid);\r\n        return (nft, calcTotalBenefits, calcUnreleaseBenefits);\r\n    }\r\n    \r\n    function getNFTInfos(uint256[] memory tokenids) public view returns(IFilNFT[] memory) {\r\n        IFilNFT[] memory nfts = new IFilNFT[](tokenids.length);\r\n        for (uint256 i = 0; i< tokenids.length; i++) {\r\n            nfts[i] = _ifilNfts[tokenids[i]];\r\n        }\r\n        return nfts;\r\n    }\r\n    \r\n    function getNFTPeriodBenefits(uint256 _tokenid, uint256 _startTime, uint256 _endTime) public view returns(uint256[] memory, uint256[] memory) {\r\n        _startTime = _startTime.div(DAYTIME).mul(DAYTIME);\r\n        _endTime = _endTime.div(DAYTIME).mul(DAYTIME);\r\n        \r\n        uint256 diffDay = _endTime.sub(_startTime).div(DAYTIME);\r\n        uint256[] memory dayTimeList = new uint256[](diffDay + 1);\r\n        uint256[] memory dayBenefitList = new uint256[](diffDay + 1);\r\n        uint256 index = 0;\r\n        for (uint256 i = _startTime; i <= _endTime; i = i + DAYTIME) {\r\n            dayTimeList[index] = i;\r\n            dayBenefitList[index] = _calcDayBenefits(_tokenid, i);\r\n            index++;\r\n        }\r\n        \r\n        return (dayTimeList, dayBenefitList);\r\n    }\r\n    \r\n    function getNFTDayBenefits(uint256 _tokenid, uint256 _dayTime) public view returns(uint256) {\r\n        _dayTime = _dayTime.div(DAYTIME).mul(DAYTIME);\r\n        return _calcDayBenefits(_tokenid, _dayTime);\r\n    }\r\n    \r\n    function getDayBenefitsByTokens(uint256[] memory _tokens, uint256 _dayTime) public view returns(uint256[] memory) {\r\n        _dayTime = _dayTime.div(DAYTIME).mul(DAYTIME);\r\n        uint256[] memory _totalBenefits = new uint256[](_tokens.length);\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            _totalBenefits[i] = _calcDayBenefits(_tokens[i], _dayTime);\r\n        }\r\n        \r\n        return _totalBenefits;\r\n    }\r\n    \r\n    function getEffectPower(uint256 _prodid) public view returns(uint256) {\r\n        uint256[] memory ifilTokens = _prodNfts[_prodid];\r\n        uint256 effectPower = 0;\r\n        for (uint256 i=0 ; i < ifilTokens.length ; i++) {\r\n            IFilNFT memory ifilNFT = _ifilNfts[ifilTokens[i]];\r\n            if (block.timestamp >= ifilNFT.activeTime && block.timestamp < ifilNFT.expireTime) {\r\n                effectPower += ifilNFT.power;\r\n            }\r\n        }\r\n        return effectPower;\r\n    }\r\n    \r\n    function _getRebateRate(address inviter) private view returns(uint256) {\r\n        if (_users[inviter].invitees.length <= 3) {\r\n            return 4;\r\n        } else if (_users[inviter].invitees.length <= 8) {\r\n            return 5;\r\n        } else {\r\n            return 6;\r\n        }\r\n    }\r\n    \r\n    function _calcNFTBenefits(uint256 tokenid) private view returns(uint256, uint256) {\r\n        IFilNFT memory ifilNFT = _ifilNfts[tokenid];\r\n        \r\n        uint256 curDayTime = block.timestamp.div(DAYTIME).mul(DAYTIME);\r\n        uint256 endDayTime = curDayTime;\r\n        if (endDayTime >= ifilNFT.expireTime) {\r\n            endDayTime = ifilNFT.expireTime.sub(1);\r\n        }\r\n        uint256 _totalBenefits = 0;\r\n        uint256 _unreleaseBenefits = 0;\r\n        for (uint256 i = ifilNFT.activeTime; i <= endDayTime; i = i + DAYTIME) {\r\n            BenefitPool memory benefitPool = _beftPools[ifilNFT.prodid][i];\r\n            if (benefitPool.effectPower > 0) {\r\n                _totalBenefits += benefitPool.fixedMineAmount.mul(ifilNFT.power).div(benefitPool.effectPower);\r\n                \r\n                uint256 diffDay = curDayTime.sub(i).div(DAYTIME);\r\n                if (diffDay > 0 && diffDay > linearReleaseDay) {\r\n                    diffDay = linearReleaseDay;\r\n                }\r\n                _totalBenefits += benefitPool.linearMineAmount.mul(diffDay).mul(ifilNFT.power).div(linearReleaseDay).div(benefitPool.effectPower);\r\n                _unreleaseBenefits += benefitPool.linearMineAmount.mul(linearReleaseDay.sub(diffDay)).mul(ifilNFT.power).div(linearReleaseDay).div(benefitPool.effectPower);\r\n            }\r\n        }\r\n        return (_totalBenefits, _unreleaseBenefits);\r\n    }\r\n    \r\n    function _calcDayBenefits(uint256 tokenid, uint256 _dayTime) private view returns(uint256) {\r\n        IFilNFT memory ifilNFT = _ifilNfts[tokenid];\r\n        if (_dayTime < ifilNFT.activeTime || _dayTime >= ifilNFT.expireTime.add(linearReleaseDay.mul(DAYTIME))) {\r\n            return 0;\r\n        }\r\n        \r\n        uint256 _totalBenefits = 0;\r\n        BenefitPool memory benefitPool = _beftPools[ifilNFT.prodid][_dayTime];\r\n        if (_dayTime >= ifilNFT.activeTime && _dayTime < ifilNFT.expireTime && benefitPool.effectPower > 0) {\r\n            _totalBenefits += benefitPool.fixedMineAmount.mul(ifilNFT.power).div(benefitPool.effectPower);\r\n        }\r\n        \r\n        for (uint256 i = ifilNFT.activeTime; i < ifilNFT.expireTime; i += DAYTIME) {\r\n            if (_dayTime > i && _dayTime <= i.add(linearReleaseDay.mul(DAYTIME)) && benefitPool.effectPower > 0) {\r\n                _totalBenefits += benefitPool.linearMineAmount.mul(ifilNFT.power).div(linearReleaseDay).div(benefitPool.effectPower);\r\n            }\r\n        }\r\n        return _totalBenefits;\r\n    }\r\n    \r\n    function _safeTransferFrom(address _from, address _to, uint256 _amount) private {\r\n        bytes memory returnData = usdt.functionCall(abi.encodeWithSelector(\r\n            ERC20_TRANSFERFROM_SELECTOR,\r\n            _from,\r\n            _to,\r\n            _amount\r\n        ), \"IFilDMiner: ERC20 transfer call failed\");\r\n        \r\n        if (returnData.length > 0) { // Return data is optional\r\n            require(abi.decode(returnData, (bool)), \"IFilDMiner: ERC20 transfer did not succeed\");\r\n        }\r\n    }\r\n}"
    },
    "localhost/DMiner/IFilDMinerStorage.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ncontract IFilDMinerStorage  {\r\n    \r\n    struct IFilNFT {\r\n        uint256     prodid;             //product id\r\n        uint256     power;              //collection power\r\n        uint256     createTime;         //collection buy time\r\n        uint256     activeTime;         //Start calculating earnings time\r\n        uint256     expireTime;         //End calculating earnings time\r\n        uint256     gainBenefits;       //Received income\r\n    }\r\n    \r\n    struct BenefitPool {\r\n        uint256     effectPower;        //effective NFT power\r\n        uint256     fixedMineAmount;    //Fixed release part\r\n        uint256     linearMineAmount;   //Linear release part\r\n    }\r\n    \r\n    struct UserInfo {\r\n        bytes32     uid;\r\n        address     inviter;\r\n        address[]   invitees;\r\n        uint256     ugrade;             //0.common user 1.light node 2.main node\r\n        uint256     gainBenefits;\r\n    }\r\n    \r\n    struct BackUser {\r\n        bytes32     uid;\r\n        address     inviter;\r\n        uint256     inviteeNum;\r\n        uint256     tokenNum;\r\n        uint256     ugrade;\r\n        uint256     effectPower;\r\n        uint256     received;\r\n        uint256     available;\r\n        uint256     unreleased;\r\n    }\r\n    \r\n    mapping(uint256 => IFilNFT) internal _ifilNfts;\r\n    mapping(uint256 => uint256[]) internal _prodNfts;\r\n    mapping(uint256 => mapping(uint256 => BenefitPool)) internal _beftPools;\r\n    mapping(address => UserInfo) internal _users;\r\n    mapping(bytes32 => address) internal _uids;\r\n    \r\n}"
    },
    "localhost/DMiner/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"
    },
    "localhost/DMiner/Vistor.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"./Governance.sol\";\n\ncontract Vistor is Governance {\n\n    mapping(address => bool) private visitors;\n    \n    event UpdateVistor(address indexed visitor, bool allow);\n\n    modifier onlyVistor {\n        require(visitors[msg.sender], \"not allow\");\n        _;\n    }\n\n    function setVistor(address _addr, bool allow) onlyGovernance external {\n        visitors[_addr] = allow;\n        emit UpdateVistor(_addr, allow);\n    }\n    \n    function allow(address _addr) external view returns(bool) {\n        return visitors[_addr];\n    }\n    \n}\n"
    }
  }
}