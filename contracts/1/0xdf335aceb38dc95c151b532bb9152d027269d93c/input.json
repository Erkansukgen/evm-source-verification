{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":999},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Proxy.sol":{"content":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Basic proxy that delegates all calls to a fixed implementing contract.\r\n * The implementing contract cannot be upgraded.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract Proxy {\r\n\r\n    address implementation;\r\n\r\n    event Received(uint indexed value, address indexed sender, bytes data);\r\n\r\n    constructor(address _implementation) public {\r\n        implementation = _implementation;\r\n    }\r\n\r\n    function() external payable {\r\n\r\n        if(msg.data.length == 0 && msg.value > 0) { \r\n            emit Received(msg.value, msg.sender, msg.data); \r\n        }\r\n        else {\r\n            // solium-disable-next-line security/no-inline-assembly\r\n            assembly {\r\n                let target := sload(0)\r\n                calldatacopy(0, 0, calldatasize())\r\n                let result := delegatecall(gas, target, 0, calldatasize(), 0, 0)\r\n                returndatacopy(0, 0, returndatasize())\r\n                switch result \r\n                case 0 {revert(0, returndatasize())} \r\n                default {return (0, returndatasize())}\r\n            }\r\n        }\r\n    }\r\n}"}}}