{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"MNW.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface iERC20 {\n\n\tfunction balanceOf(address who) external view returns (uint256 balance);\n\n\tfunction allowance(address owner, address spender) external view returns (uint256 remaining);\n\n\tfunction transfer(address to, uint256 value) external returns (bool success);\n\n\tfunction approve(address spender, uint256 value) external returns (bool success);\n\n\tfunction transferFrom(address from, address to, uint256 value) external returns (bool success);\n\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract Context {\n\tfunction _msgSender() internal view returns (address) {\n\t\treturn msg.sender;\n\t}\n\n\tfunction _msgData() internal view returns (bytes memory) {\n\t\tthis;\n\t\treturn msg.data;\n\t}\n}\n\nlibrary SafeMath {\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\tc = a - b;\n\t\tassert(b <= a && c <= a);\n\t\treturn c;\n\t}\n\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\tc = a + b;\n\t\tassert(c >= a && c>=b);\n\t\treturn c;\n\t}\n}\n\nlibrary SafeERC20 {\n\tfunction safeTransfer(iERC20 _token, address _to, uint256 _value) internal {\n\t\trequire(_token.transfer(_to, _value));\n\t}\n}\n\ncontract Controllable is Context {\n    mapping (address => bool) public controllers;\n\n\tconstructor () {\n\t\taddress msgSender = _msgSender();\n\t\tcontrollers[msgSender] = true;\n\t}\n\n\tmodifier onlyController() {\n\t\trequire(controllers[_msgSender()], \"Controllable: caller is not a controller\");\n\t\t_;\n\t}\n\n    function addController(address _address) public onlyController {\n        controllers[_address] = true;\n    }\n\n    function removeController(address _address) public onlyController {\n        delete controllers[_address];\n    }\n}\n\ncontract Pausable is Controllable {\n\tevent Pause();\n\tevent Unpause();\n\n\tbool public paused = false;\n\n\tmodifier whenNotPaused() {\n\t\trequire(!paused);\n\t\t_;\n\t}\n\n\tmodifier whenPaused() {\n\t\trequire(paused);\n\t\t_;\n\t}\n\n\tfunction pause() public onlyController whenNotPaused {\n\t\tpaused = true;\n\t\temit Pause();\n\t}\n\n\tfunction unpause() public onlyController whenPaused {\n\t\tpaused = false;\n\t\temit Unpause();\n\t}\n}\n\ncontract MNW is Controllable, Pausable, iERC20 {\n\tusing SafeMath for uint256;\n\tusing SafeERC20 for iERC20;\n\n\tmapping (address => uint256) public balances;\n\tmapping (address => mapping (address => uint256)) public allowed;\n\tmapping (address => bool) public frozenAccount;\n\n\tuint256 public totalSupply;\n\tstring public constant name = \"Morpheus.Network\";\n\tuint8 public constant decimals = 18;\n\tstring public constant symbol = \"MNW\";\n\tuint256 public constant initialSupply = 47897218 * 10 ** uint(decimals);\n\n\tconstructor() {\n\t\ttotalSupply = initialSupply;\n\t\tbalances[msg.sender] = totalSupply;\n    \tcontrollers[msg.sender] = true;\n\t\temit Transfer(address(0),msg.sender,initialSupply);\n\t}\n\n\tfunction receiveEther() public payable {\n\t\trevert();\n\t}\n\n\tfunction transfer(address _to, uint256 _value) external override whenNotPaused returns (bool success) {\n\t\trequire(_to != msg.sender,\"T1- Recipient can not be the same as sender\");\n\t\trequire(_to != address(0),\"T2- Please check the recipient address\");\n\t\trequire(balances[msg.sender] >= _value,\"T3- The balance of sender is too low\");\n\t\trequire(!frozenAccount[msg.sender],\"T4- The wallet of sender is frozen\");\n\t\trequire(!frozenAccount[_to],\"T5- The wallet of recipient is frozen\");\n\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\n\t\temit Transfer(msg.sender, _to, _value);\n\n\t\treturn true;\n\t}\n\n\tfunction transferFrom(address _from, address _to, uint256 _value) external override whenNotPaused returns (bool success) {\n\t\trequire(_to != address(0),\"TF1- Please check the recipient address\");\n\t\trequire(balances[_from] >= _value,\"TF2- The balance of sender is too low\");\n\t\trequire(allowed[_from][msg.sender] >= _value,\"TF3- The allowance of sender is too low\");\n\t\trequire(!frozenAccount[_from],\"TF4- The wallet of sender is frozen\");\n\t\trequire(!frozenAccount[_to],\"TF5- The wallet of recipient is frozen\");\n\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n\t\temit Transfer(_from, _to, _value);\n\n\t\treturn true;\n\t}\n\n\tfunction balanceOf(address _owner) public override view returns (uint256 balance) {\n\t\treturn balances[_owner];\n\t}\n\n\tfunction approve(address _spender, uint256 _value) external override whenNotPaused returns (bool success) {\n\t\trequire((_value == 0) || (allowed[msg.sender][_spender] == 0),\"A1- Reset allowance to 0 first\");\n\n\t\tallowed[msg.sender][_spender] = _value;\n\n\t\temit Approval(msg.sender, _spender, _value);\n\n\t\treturn true;\n\t}\n\n\tfunction increaseApproval(address _spender, uint256 _addedValue) external whenNotPaused returns (bool) {\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n\t\treturn true;\n\t}\n\n\tfunction decreaseApproval(address _spender, uint256 _subtractedValue) external whenNotPaused returns (bool) {\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].sub(_subtractedValue);\n\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n\t\treturn true;\n\t}\n\n\tfunction allowance(address _owner, address _spender) public override view returns (uint256 remaining) {\n\t\treturn allowed[_owner][_spender];\n\t}\n\n\tfunction transferToken(address tokenAddress, uint256 amount) external onlyController {\n\t\tiERC20(tokenAddress).safeTransfer(msg.sender,amount);\n\t}\n\n\tfunction flushToken(address tokenAddress) external onlyController {\n\t\tuint256 amount = iERC20(tokenAddress).balanceOf(address(this));\n\t\tiERC20(tokenAddress).safeTransfer(msg.sender,amount);\n\t}\n\n\tfunction burn(uint256 _value) external onlyController returns (bool) {\n\t\trequire(_value <= balances[msg.sender],\"B1- The balance of burner is too low\");\n\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\ttotalSupply = totalSupply.sub(_value);\n\n\t\temit Burn(msg.sender, _value);\n\n\t\temit Transfer(msg.sender, address(0), _value);\n\n\t\treturn true;\n\t}\n\n\tfunction freeze(address _address, bool _state) external onlyController returns (bool) {\n\t\tfrozenAccount[_address] = _state;\n\n\t\temit Freeze(_address, _state);\n\n\t\treturn true;\n\t}\n\n\tevent Burn(address indexed burner, uint256 value);\n\tevent Freeze(address target, bool frozen);\n}"}}}