{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/prylabs_eth2_testnet_fund_recovery_contract.sol":{"content":"pragma solidity >=0.4.22 <0.7.0;\n\n/**\n ******************************************************************\n *\n *                    ██████████████████\n *                  ██                  ██\n *                ██  ██████████████████  ██\n *              ██  ██████████████████████  ██\n *            ██  ██████████████████████████  ██\n *          ██  ██████████████████████████████  ██\n *        ██  ██████████████████████████████████  ██\n *      ██  ██████████████████████████████████████  ██\n *      ██  ██████    ██      ████  ████    ██████  ██\n *      ██  ████  ████████  ████  ██  ██  ██  ████  ██\n *      ██  ████  ████████  ████  ██  ██  ██  ████  ██\n *      ██  ██████  ██████  ████  ██  ██    ██████  ██\n *      ██  ████████  ████  ████  ██  ██  ████████  ██\n *      ██  ████████  ████  ████  ██  ██  ████████  ██\n *      ██  ████    ██████  ██████  ████  ████████  ██\n *      ██  ██████████████████████████████████████  ██\n *        ██  ██████████████████████████████████  ██\n *          ██  ██████████████████████████████  ██\n *            ██  ██████████████████████████  ██\n *              ██  ██████████████████████  ██\n *                ██  ██████████████████  ██\n *                  ██                  ██\n *                    ██████████████████\n *\n ******************************************************************\n *                   DO NOT SEND ETH HERE!\n ****************************************************************** \n */ \n\n/**\n * @title DoNotSendFundsHere\n * @dev This contract is a stub to recover mainnet funds sent to the Prysmatic Labs testnet address. \n * The testnet contract is deployed on Goerli, not on Ethereum's main network. Do not send funds here!\n * If you sent funds here by mistake, please email contact at prysmaticlabs.com with \n * proof that you are the originator of the lost funds.\n */\ncontract DoNotSendFundsHere {\n    address payable public owner;\n\n    /// @dev Initialize the contract with the contract creator as the owner.\n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    /// @dev Modifier to require the message sender to be the owner.\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"Sender not authorized.\"\n        );\n        _;\n    }\n    \n    /// @dev Change the sole owner of the contract.\n    /// @param _newOwner the address of the new owner of this contract.\n    function changeOwner(address payable _newOwner) public onlyOwner {\n        owner = _newOwner;\n    }\n    \n    /// @dev Send all ETH held by the contract to the contract owner.\n    function recoverETHFunds() public onlyOwner {\n        owner.transfer(address(this).balance);\n    }\n    \n    /// @dev Approve ERC20 spending for a particular ERC20 token.\n    /// @param _token The ERC20 token address.\n    /// @param _spender The spender address to authorize spending on behalf of this contract.\n    /// @param _value The amount authorized for the _spender.\n    function approveERC20Funds(ERC20 _token, address _spender, uint _value) public onlyOwner {\n        _token.approve(_spender, _value);\n    }\n    \n    /// @dev Send all of the ERC20 token owned by this contract to the contract owner.\n    /// @param _token The ERC20 token address.\n    function recoverERC20Funds(ERC20 _token) public onlyOwner {\n        _token.transfer(owner, _token.balanceOf(address(this)));\n    }\n    \n    /// @dev Fallback payable. DO NOT SEND ETH HERE!!! The reason this does not reject any non-zero transaction\n    /// is that users sending directly from centralized exchanges may experience a total loss if their transaction\n    /// is rejected. Do not send ETH here.\n    receive() external payable { }\n}\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint supply);\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    function decimals() external view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}"}}}