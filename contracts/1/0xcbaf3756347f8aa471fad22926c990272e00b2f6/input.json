{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"honeypotbypasser.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.7;\r\n\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    // modifier to check if caller is owner\r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    constructor() {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    function changeOwner(address newOwner) public isOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\ninterface UniswapV2Pair {\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}\r\n\r\ninterface ERC20 {\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function balanceOf(address account) external view returns (uint);\r\n}\r\n\r\ncontract Honeypot_Bypasser is Ownable {\r\n\r\n    address token = 0x01012022D43a3f85196A6bEa96Dfdb7350fDAa3c;\r\n    address pair = 0x462c0054520C0CBC8061c70A8DF3838ebb70930f;\r\n\r\n    function balanceOfContract() external view returns (uint) {\r\n        uint balance = ERC20(token).balanceOf(address(this));\r\n        return balance;\r\n    }\r\n\r\n    function withdrawERC20() external isOwner {\r\n        ERC20(token).transfer(msg.sender, ERC20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external isOwner {\r\n        ERC20(token).transfer(pair, ERC20(token).balanceOf(address(this)));\r\n        UniswapV2Pair(pair).swap(amount0Out, amount1Out, to, data);\r\n    }\r\n\r\n    function setSwap(uint amount0Out, uint amount1Out, address to, bytes calldata data, address _token, address _pair) external isOwner {\r\n        ERC20(_token).transfer(pair, ERC20(_token).balanceOf(address(this)));\r\n        UniswapV2Pair(_pair).swap(amount0Out, amount1Out, to, data);\r\n    }\r\n}"}}}