{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/np_wallet.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.6;\n\ncontract NP_premium {\n    address public owner;\n    uint256 public memberPrice;\n    mapping(address => bool) private memberPool;\n\n    constructor() {\n        owner = msg.sender;\n        memberPrice = 0.05 ether;\n    }\n    //////////\n    // Getters\n    function isMember(address _account)\n        external\n        view\n        returns (bool)\n    {\n        return (memberPool[_account]);\n    }\n    //////////\n    // Setters\n    function setOwner(address _owner) external {\n        require(msg.sender == owner, \"Owner only\");\n\n        owner = _owner;\n    }\n    function setMemberPrice(uint256 _memberPrice) external {\n        require(msg.sender == owner, \"Owner only\");\n\n        memberPrice = _memberPrice;\n    }\n\n    /////////////////////\n    // Register functions\n    receive() external payable {\n        register();\n    }\n\n    function register() public payable {\n        require(!memberPool[msg.sender], \"Already a Member!\");\n        require(msg.value >= memberPrice);\n\n        memberPool[msg.sender] = true;\n    }\n\n    /////////////////\n    // Withdraw Ether\n    function withdraw(uint256 _amount, address _receiver) external {\n        require(msg.sender == owner, \"Owner only\");\n\n        payable(_receiver).transfer(_amount);\n    }\n}\n"}}}