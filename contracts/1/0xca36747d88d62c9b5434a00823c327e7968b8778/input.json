{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/Test6.sol":{"content":"contract Divine {\r\n    function mint(address account, uint256 amount, bytes32[] memory proof) public payable {}\r\n    function totalSupply() external view returns (uint256) {}\r\n}\r\ncontract Controller {\r\n    address private caller;\r\n    address private owner=msg.sender;\r\n    constructor(address x) {\r\n        caller=x;\r\n    }\r\n    function sinwod2(address x) public {\r\n        require(msg.sender==owner);\r\n        caller=x;\r\n    }\r\n    function wndo2() public returns(address) {\r\n        return caller;\r\n    }\r\n}\r\ncontract DivineBot {\r\n    function f() public payable {\r\n        bytes32[] memory m;\r\n        if (address(this).balance>=360000000000000000) {\r\n            Divine(0xc631164B6CB1340B5123c9162f8558c866dE1926).mint{value:360000000000000000}(0x0CA8A146D80287A5dF9bb673E5c85B25A669640F,4,m);\r\n        }\r\n    }\r\n}\r\ncontract MultiBot {\r\n    address private owner=msg.sender;\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n    function nb712ygfbvg() public {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n    function f(uint256 i,uint256 value) public {\r\n        assembly {\r\n            let ab := mload(0x40)\r\n            mstore(ab, 0x630DBE671F600052600060006004601c335AF433FF)\r\n            let addr := create2(value,add(ab,11),21,i)\r\n        }\r\n    }\r\n    function a() public payable {\r\n        payable(Controller(0x0336CFa3993c108BA45BE461B27d3dD8379c4883).wndo2()).delegatecall(abi.encodeWithSignature(\"f()\"));\r\n    }\r\n    function fd2wind(uint256 x, uint256 y,uint256 z) public payable {\r\n        for (uint i=0;i<x;i++) {\r\n            if (gasleft()>z) {f(y+i,address(this).balance);}\r\n            else return;\r\n        }\r\n    }\r\n}\r\ncontract DivineRun {\r\n    address private owner = msg.sender;\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n    function nb712ygfbvg() public {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n    function ie3ifw2fve() public payable {\r\n        uint256 m=address(this).balance/360000000000000000;\r\n        uint256 n=gasleft()/720000;\r\n        if (m>n) m=n;\r\n        require(Divine(0xc631164B6CB1340B5123c9162f8558c866dE1926).totalSupply()+m<10000,\"A\");\r\n        MultiBot(payable(0x0000000000bF1B8f38DF99e91858F06A8E11af65)).fd2wind{value:address(this).balance}(m,1,720000);\r\n    }\r\n}"}}}