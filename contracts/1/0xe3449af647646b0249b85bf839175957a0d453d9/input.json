{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/hash4life.sol":{"content":"pragma solidity ^0.6.6;\r\n\r\ncontract Hash4life {\r\n\r\n    /** VARIABLES **/\r\n    address payable contractOwner;\r\n\r\n    uint hashPrice;\r\n\r\n    struct Hash {\r\n        address owner;\r\n        uint creationDt;\r\n        bool exists;\r\n    }\r\n\r\n    mapping(bytes32 => Hash) private HashInfo;\r\n\r\n    constructor() public {\r\n        contractOwner = msg.sender;\r\n    }\r\n\r\n\r\n    /** FUNCTIONS **/\r\n    receive() external payable {}\r\n\r\n    function setHash(bytes32 _hash) public payable {\r\n        require(HashInfo[_hash].exists != true && msg.value >= hashPrice);\r\n        HashInfo[_hash].owner = msg.sender;\r\n        HashInfo[_hash].creationDt = now;\r\n        HashInfo[_hash].exists = true;\r\n\r\n        emit LogNewHash(_hash, msg.sender, HashInfo[_hash].creationDt);\r\n    }\r\n\r\n    function getHashInfo(bytes32 _hash) public view returns (address, uint, bool) {\r\n       return (\r\n            HashInfo[_hash].owner,\r\n            HashInfo[_hash].creationDt,\r\n            HashInfo[_hash].exists\r\n        );\r\n    }\r\n\r\n    function withdraw() public onlyContractOwner {\r\n        contractOwner.transfer(address(this).balance);\r\n    }\r\n\r\n    function getHashPrice() public view returns (uint) {\r\n        return hashPrice;\r\n    }\r\n\r\n    function setHashPrice(uint _hashPrice) public onlyContractOwner {\r\n        hashPrice = _hashPrice;\r\n    }\r\n\r\n    function getBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n\r\n    /** MODIFIER **/\r\n    modifier onlyContractOwner() {\r\n        require(msg.sender == contractOwner);\r\n        _;\r\n    }\r\n\r\n\r\n    /** EVENTS **/\r\n    event LogNewHash(bytes32 hash, address owner, uint creationDt);\r\n}\r\n"}}}