{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/DSA_READ/chainlink.sol": {
      "content": "pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\ninterface ChainLinkInterface {\n    function latestAnswer() external view returns (int256);\n    function decimals() external view returns (uint256);\n}\n\ninterface ConnectorsInterface {\n  function chief(address) external view returns (bool);\n}\n\ninterface IndexInterface {\n  function master() external view returns (address);\n}\n\ncontract Basic {\n    address public constant connectors = 0xD6A602C01a023B98Ecfb29Df02FBA380d3B21E0c;\n    address public constant instaIndex = 0x2971AdFa57b20E5a416aE5a708A8655A9c74f723;\n    uint public version = 1;\n\n    modifier isChief {\n        require(\n        ConnectorsInterface(connectors).chief(msg.sender) ||\n        IndexInterface(instaIndex).master() == msg.sender, \"not-Chief\");\n        _;\n    }\n\n    event LogAddChainLinkMapping(\n        string tokenSymbol,\n        address chainlinkFeed\n    );\n\n    event LogRemoveChainLinkMapping(\n        string tokenSymbol,\n        address chainlinkFeed\n    );\n\n    mapping (string => address) public chainLinkMapping;\n\n    function _addChainLinkMapping(\n        string memory token,\n        address chainlinkFeed\n    ) internal {\n        require(bytes(token).length > 0, \"token-not-vaild\");\n        require(chainlinkFeed != address(0), \"chainlinkFeed-not-vaild\");\n        require(chainLinkMapping[token] == address(0), \"chainlinkFeed-already-added\");\n\n        chainLinkMapping[token] = chainlinkFeed;\n        emit LogAddChainLinkMapping(token, chainlinkFeed);\n    }\n\n    function _removeChainLinkMapping(string memory token) internal {\n        require(bytes(token).length > 0, \"token-not-vaild\");\n        require(chainLinkMapping[token] != address(0), \"chainlinkFeed-not-added-yet\");\n\n        emit LogRemoveChainLinkMapping(token, chainLinkMapping[token]);\n        delete chainLinkMapping[token];\n    }\n\n    function addChainLinkMapping(\n        string[] memory tokens,\n        address[] memory chainlinkFeeds\n    ) public isChief {\n        require(tokens.length == chainlinkFeeds.length, \"lenght-not-same\");\n        for (uint i = 0; i < tokens.length; i++) {\n            _addChainLinkMapping(tokens[i], chainlinkFeeds[i]);\n        }\n    }\n\n    function removeChainLinkMapping(string[] memory tokens) public isChief {\n        for (uint i = 0; i < tokens.length; i++) {\n            _removeChainLinkMapping(tokens[i]);\n        }\n    }\n}\n\ncontract Resolver is Basic {\n    struct PriceData {\n        uint price;\n        uint decimals;\n    }\n    function getPrice(string[] memory tokens)\n    public\n    view\n    returns (\n        PriceData memory ethPriceInUsd,\n        PriceData memory btcPriceInUsd,\n        PriceData[] memory tokensPriceInETH\n    ) {\n        tokensPriceInETH = new PriceData[](tokens.length);\n        for (uint i = 0; i < tokens.length; i++) {\n            ChainLinkInterface feedContract = ChainLinkInterface(chainLinkMapping[tokens[i]]);\n            tokensPriceInETH[i] = PriceData({\n                price: uint(feedContract.latestAnswer()),\n                decimals: feedContract.decimals()\n            });\n        }\n        ChainLinkInterface ethFeed = ChainLinkInterface(chainLinkMapping[\"ETH\"]);\n        ChainLinkInterface btcFeed = ChainLinkInterface(chainLinkMapping[\"BTC\"]);\n        ethPriceInUsd = PriceData({\n            price: uint(ethFeed.latestAnswer()),\n            decimals: ethFeed.decimals()\n        });\n\n        btcPriceInUsd = PriceData({\n            price: uint(btcFeed.latestAnswer()),\n            decimals: btcFeed.decimals()\n        });\n    }\n\n    function getGasPrice() public view returns (uint gasPrice) {\n        gasPrice = uint(ChainLinkInterface(chainLinkMapping[\"gasFast\"]).latestAnswer());\n    }\n}\n\ncontract InstaChainLinkResolver is Resolver {\n    constructor (string[] memory tokens, address[] memory chainlinkFeeds) public {\n        require(tokens.length == chainlinkFeeds.length, \"Lenght-not-same\");\n        for (uint i = 0; i < tokens.length; i++) {\n            _addChainLinkMapping(tokens[i], chainlinkFeeds[i]);\n        }\n    }\n\n    string public constant name = \"ChainLink-Resolver-v1\";\n}"
    }
  }
}