{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"AggregatorInterface.sol":{"content":"pragma solidity >= 0.6.6;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n  function latestTimestamp() external view returns (uint256);\n  function latestRound() external view returns (uint256);\n  function getAnswer(uint256 roundId) external view returns (int256);\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n  function phaseId() external view returns (uint16);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"ownable.sol":{"content":"pragma solidity ^0.6.0;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ncontract Owned is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"priceAggregator.sol":{"content":"//////////////////////////////////////////////////\n//SYNLEV PRICE AGGREGATOR CONTRACT V 1.1\n//////////////////////////\n\npragma solidity >= 0.6.6;\n\nimport './ownable.sol';\nimport './SafeMath.sol';\nimport './AggregatorInterface.sol';\nimport './vaultInterface.sol';\n\ncontract priceAggregator is Owned {\n  using SafeMath for uint256;\n\n  constructor() public {\n    refVault[0xFf40827Ee1c4Eb6052044101E1C6E28DBe1440e3].ref =\n      AggregatorInterface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\n    refVault[0xA81f8460dE4008577e7e6a17708102392f9aD92D].ref =\n      AggregatorInterface(0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c);\n  }\n\n  struct vaultStruct{\n    AggregatorInterface ref;\n  }\n\n  mapping(address => vaultStruct) public refVault;     //Vault address => vaultStruct\n\n  uint256 public maxUpdates = 10;\n\n  function priceRequest(address vault, uint256 lastUpdated)\n    public\n    view\n    returns(int256[] memory, uint256)\n    {\n      uint256 currentRound = refVault[vault].ref.latestRound();\n      if(currentRound > lastUpdated + 10000) {\n        int256[] memory pricearray = new int256[] (2);\n        pricearray[0] = refVault[vault].ref.getAnswer(lastUpdated);\n        pricearray[1] = refVault[vault].ref.getAnswer(currentRound);\n        return(pricearray, currentRound);\n      }\n      else if(currentRound > lastUpdated) {\n        uint256 pricearrayLength = currentRound.add(1).sub(lastUpdated);\n        pricearrayLength = pricearrayLength > maxUpdates ?\n        maxUpdates : pricearrayLength;\n        int256[] memory pricearray = new int256[] (pricearrayLength);\n        pricearray[0] = refVault[vault].ref.getAnswer(lastUpdated);\n        for(uint i = 1; i < pricearrayLength; i++) {\n          pricearray[pricearrayLength.sub(i)] =\n          refVault[vault].ref.getAnswer(currentRound.add(1).sub(i));\n        }\n        return(pricearray, currentRound);\n      }\n      else {\n        return(new int256[](0), currentRound);\n      }\n    }\n\n\n  /*\n   * @notice Returns false if the price is not updated on vault.\n  */\n\n  function roundIdCheck(address vault) public view returns(bool) {\n    if(vaultInterface(vault).getLatestRoundId()\n    < refVault[vault].ref.latestRound()) {\n      return(false);\n    }\n    else return(true);\n  }\n\n\n  function setMaxUpdates(uint256 amount) public onlyOwner() {\n    require(amount > 1);\n    maxUpdates = amount;\n  }\n\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//\n  //Functions setting and updating vault\n  //to chainlink aggregator contract connections\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//\n\n  //Can only be called by vault proxy, initiates pair\n  function registerVaultAggregator(address aggregator) public {\n    refVault[msg.sender].ref = AggregatorInterface(aggregator);\n  }\n}\n"},"vaultInterface.sol":{"content":"pragma solidity >= 0.6.6;\n\ninterface vaultInterface {\n  function tokenBuy(address token, address account) external;\n  function tokenSell(address token, address payable account) external;\n  function addLiquidity(address account) external;\n  function removeLiquidity(uint256 shares) external;\n  function updatePrice() external;\n\n  function getActive() external view returns(bool);\n  function getMultiplier() external view returns(uint256);\n  function getBullToken() external view returns(address);\n  function getBearToken() external view returns(address);\n  function getLatestRoundId() external view returns(uint256);\n  function getPrice(address token) external view returns(uint256);\n  function getEquity(address token) external view returns(uint256);\n  function getBuyFee() external view returns(uint256);\n  function getSellFee() external view returns(uint256);\n  function getTotalLiqShares() external view returns(uint256);\n  function getLiqFees() external view returns(uint256);\n  function getBalanceEquity() external view returns(uint256);\n  function getLiqTokens(address token) external view returns(uint256);\n  function getLiqEquity(address token) external view returns(uint256);\n  function getUserShares(address account) external view returns(uint256);\n\n  function getTotalEquity() external view returns(uint256);\n  function getTokenEquity(address token) external view returns(uint256);\n  function getTotalLiqEquity() external view returns(uint256);\n  function getDepositEquity() external view returns(uint256);\n}\n"}}}