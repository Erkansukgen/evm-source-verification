{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Arbitrage22.sol":{"content":"pragma solidity ^ 0.6 .6;\r\n\r\nabstract contract ERC20Interface {\r\n    function totalSupply() public view virtual returns(uint);\r\n\r\n    function balanceOf(address tokenOwner) public view virtual returns(uint balance);\r\n\r\n    function allowance(address tokenOwner, address spender) public view virtual returns(uint remaining);\r\n\r\n    function transfer(address to, uint tokens) public virtual returns(bool success);\r\n\r\n    function approve(address spender, uint tokens) public virtual returns(bool success);\r\n\r\n    function transferFrom(address from, address to, uint tokens) public virtual returns(bool success);\r\n\r\n    function decimals() public virtual view returns (uint8);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\nabstract contract Gastoken {\r\n    function mint(uint256 value) public virtual;\r\n\r\n    function free(uint256 value) public virtual returns(bool success);\r\n\r\n    function balanceOf(address tokenOwner) public virtual view returns(uint balance);\r\n\r\n    function freeUpTo(uint256 value) public virtual returns(uint256 freed);\r\n\r\n    function freeFrom(address from, uint256 value) public virtual returns(bool success);\r\n\r\n    function freeFromUpTo(address from, uint256 value) public virtual returns(uint256 freed);\r\n}\r\n\r\n/*contract Whitelist {\r\n    function check(address adr) public returns(bool);\r\n}\r\n*/\r\nabstract contract UniswapFactory {\r\n    function getExchange(address tokenAddress) public virtual returns(address);\r\n}\r\n\r\nabstract contract Uniswap {\r\n    function ethToTokenSwapInput(uint minTokenAmount, uint deadline) public virtual payable;\r\n\r\n    function tokenToEthSwapInput(uint tokenAmount, uint minEthAmount, uint deadline) public virtual;\r\n}\r\n\r\nabstract contract Kyber {\r\n    function swapEtherToToken(address tokenAddress, uint minConversionRate) public virtual payable;\r\n\r\n    function swapTokenToEther(address tokenAddress, uint tokenAmount, uint minConversionRate) public virtual;\r\n}\r\n\r\nabstract contract LendingPoolAddressesProvider {\r\n    function getPriceOracle() public virtual view returns(address);\r\n}\r\n\r\nabstract contract LendingPool {\r\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) virtual public payable;\r\n\r\n    function borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) virtual public;\r\n\r\n    function flashLoan(address _receiver, address _reserve, uint256 _amount, bytes memory _params) virtual public;\r\n\r\n    function repay(address _reserve, uint256 _amount, address payable _onBehalfOf) virtual public;\r\n\r\n    function getUserAccountData(address _user) virtual public view returns(\r\n        uint256 totalLiquidityETH,\r\n        uint256 totalCollateralETH,\r\n        uint256 totalBorrowsETH,\r\n        uint256 totalFeesETH,\r\n        uint256 availableBorrowsETH,\r\n        uint256 currentLiquidationThreshold,\r\n        uint256 ltv,\r\n        uint256 healthFactor\r\n    );\r\n\r\n    function getUserReserveData(address _reserve, address _user) virtual public view returns(\r\n        uint256 currentATokenBalance,\r\n        uint256 currentBorrowBalance,\r\n        uint256 principalBorrowBalance,\r\n        uint256 borrowRateMode,\r\n        uint256 borrowRate,\r\n        uint256 liquidityRate,\r\n        uint256 originationFee,\r\n        uint256 variableBorrowIndex,\r\n        uint256 lastUpdateTimestamp,\r\n        bool usageAsCollateralEnabled\r\n    );\r\n\r\n}\r\n\r\nabstract contract aOracle {\r\n    function getAssetPrice(address _asset) virtual external view returns(uint256);\r\n}\r\n\r\nabstract contract AToken {\r\n    function redeem(uint256 _amount) virtual public;\r\n}\r\n\r\ncontract Arbitrage {\r\n\r\n    using SafeMath\r\n    for uint256;\r\n    mapping(address => bool) public workers;\r\n    address payable public god;\r\n    bool public s;\r\n    uint public dL;\r\n\r\n\r\n    address gasTokenAddress = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\r\n    address uniFactoryAddress = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\r\n    address kyberAddress = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\r\n\r\n    mapping(address => bool) whitelist;\r\n\r\n    LendingPoolAddressesProvider aProvider = LendingPoolAddressesProvider(address(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8)); //mainnet\r\n    LendingPool public lendingPool = LendingPool(0x398eC7346DcD622eDc5ae82352F02bE94C62d119); //mainnet\r\n\r\n    AToken public aETH = AToken(0x3a3A65aAb0dd2A17E3F1947bA16138cd37d08c04); //mainnet\r\n\r\n    constructor() public payable {\r\n        god = 0xe4bA2FBDEcC20E54fc5e2bc9c8Cf0bdAF6aE92e5; //cold\r\n        workers[0xd37dDB7D080bc8d11845Df7AF597fE85971eA475] = true; //buyer\r\n        workers[0xAF182E903C3CD96287C0d7B1036B8a8FDcD9E007] = true; //courier\r\n        workers[0x9A6c409E241D4dd32776138f17d31B74fD3D86b8] = true; //aux\r\n\r\n        whitelist[0xe4bA2FBDEcC20E54fc5e2bc9c8Cf0bdAF6aE92e5] = true; //cold\r\n        whitelist[0x6d0f784b6ca8f2aA662960A3FA3Aa915713F6c99] = true; //binance\r\n\r\n    }\r\n\r\n\r\n    function b() public view returns(uint bal) {\r\n        return address(this).balance;\r\n    }\r\n\r\n\r\n\r\n    modifier security() {\r\n\r\n        require(msg.sender == god || workers[msg.sender]);\r\n\r\n        _;\r\n    }\r\n\r\n    modifier su() {\r\n\r\n        require(msg.sender == god);\r\n\r\n        _;\r\n    }\r\n\r\n/*\r\n\r\n    function setWorker(address payable _worker, bool _status) public su {\r\n        require(msg.sender == god);\r\n        workers[_worker] = _status;\r\n    }\r\n\r\n    function setWhitelist(address adr, bool status) public su {\r\n        whitelist[adr] = status;\r\n    }\r\n\r\n\r\n    function mintGas(uint amount) public security {\r\n        Gastoken(gasTokenAddress).mint(amount);\r\n    }\r\n\r\n    function gasBalance() public view returns(uint) {\r\n        return Gastoken(gasTokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n\r\n\r\n    function exec(uint blockDeadline, uint8 task, address tokenAddress, address payable to, uint amount, uint min) public payable security returns(int delta) {\r\n        require(block.number <= blockDeadline || blockDeadline == 0, '201');\r\n\r\n        uint gasProvided = gasleft();\r\n\r\n\r\n        uint oldEth = address(this).balance;\r\n\r\n\r\n        address(this).call(abi.encodeWithSignature(\"_exec(uint8,address,address,uint,uint)\", task, tokenAddress, to, amount, min));\r\n\r\n\r\n        uint newBalance = address(this).balance;\r\n        delta = int(newBalance - oldEth);\r\n\r\n        burnGasToken(gasProvided.sub(gasleft()));\r\n\r\n\r\n    }\r\n\r\n\r\n    function _exec(uint8 task, address tokenAddress, address payable to, uint amount, uint min) public payable returns(int delta) {\r\n        require(msg.sender == address(this));\r\n        if (task == 1) { //withdraw eth to\r\n            withdrawEth(to, amount);\r\n        }\r\n\r\n        if (task == 2) {\r\n            withdrawToken(tokenAddress, to, amount);\r\n        }\r\n\r\n        if (task == 3) {\r\n            tokenAddress.call(abi.encodeWithSignature(\"approve(address,uint256)\", address(lendingPool), amount));\r\n            lendingPool.repay(tokenAddress, amount, address(this));\r\n            (, uint collateral, uint borrows, , , , , ) = lendingPool.getUserAccountData(address(this));\r\n            uint ableRedeem;\r\n            if (collateral.div(2) > borrows) {\r\n                ableRedeem = collateral.div(2).sub(borrows); //1/2 surplus\r\n            }\r\n\r\n            if(borrows == 0){\r\n                ableRedeem = collateral;\r\n            }\r\n            aETH.redeem(ableRedeem);\r\n        }\r\n\r\n\r\n\r\n        if (task == 31) {\r\n            address uniExchange = UniswapFactory(uniFactoryAddress).getExchange(tokenAddress);\r\n            //uniExchange.call.value(amount)(abi.encodeWithSignature(\"ethToTokenSwapInput(uint256,uint256)\", min, 999999999999999999999));\r\n            Uniswap(uniExchange).ethToTokenSwapInput.value(amount)(min, 999999999999999999999);\r\n            //catch {}\r\n        }\r\n\r\n        if (task == 32) {\r\n            address uniExchange = UniswapFactory(uniFactoryAddress).getExchange(tokenAddress);\r\n            //ERC20Interface(tokenAddress).approve(uniExchange, amount);\r\n            tokenAddress.call(abi.encodeWithSignature(\"approve(address,uint256)\", uniExchange, amount));\r\n\r\n            if (amount > ERC20Interface(tokenAddress).balanceOf(address(this))) {\r\n                uint need = amount - ERC20Interface(tokenAddress).balanceOf(address(this));\r\n                borrowToken(tokenAddress, need);\r\n            }\r\n\r\n            //uniExchange.call(abi.encodeWithSignature(\"tokenToEthSwapInput(uint256,uint256,uint256)\", amount, min, 999999999999999999999));\r\n            Uniswap(uniExchange).tokenToEthSwapInput(amount, min, 999999999999999999999);\r\n            //catch{}\r\n\r\n        }\r\n\r\n        if (task == 41) {\r\n            //kyberAddress.call.value(amount)(abi.encodeWithSignature(\"swapEtherToToken(address,uint256)\", tokenAddress, min));\r\n            Kyber(kyberAddress).swapEtherToToken.value(amount)(tokenAddress, min);\r\n            //catch{}\r\n        }\r\n\r\n        if (task == 42) {\r\n            //ERC20Interface(tokenAddress).approve(kyberAddress, amount);\r\n            tokenAddress.call(abi.encodeWithSignature(\"approve(address,uint256)\", kyberAddress, amount));\r\n\r\n            if (amount > ERC20Interface(tokenAddress).balanceOf(address(this))) {\r\n                uint need = amount - ERC20Interface(tokenAddress).balanceOf(address(this));\r\n                borrowToken(tokenAddress, need);\r\n            }\r\n\r\n            //kyberAddress.call(abi.encodeWithSignature(\"swapTokenToEther(address,uint256,uint256)\", tokenAddress, amount, min));\r\n            Kyber(kyberAddress).swapTokenToEther(tokenAddress, amount, min);\r\n            //catch{}\r\n        }\r\n    }\r\n*/\r\n    function getPossibleBorrow(address tokenAddress, uint collateral) public view returns(uint) {\r\n        return ((collateral / aOracle(aProvider.getPriceOracle()).getAssetPrice(tokenAddress)) / 2) * 10**ERC20Interface(tokenAddress).decimals();\r\n    }\r\n\r\n    function getOptimalCollateral(address tokenAddress, uint amount) public view returns(uint) {\r\n        return aOracle(aProvider.getPriceOracle()).getAssetPrice(tokenAddress) * (amount/10**ERC20Interface(tokenAddress).decimals()) * 2;\r\n    }\r\n\r\n    function borrowToken(address tokenAddress, uint amount) internal {\r\n        uint collateral = getOptimalCollateral(tokenAddress, amount);\r\n        lendingPool.deposit.value(collateral)(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, collateral, 0);\r\n        lendingPool.borrow(tokenAddress, amount, 1, 0);\r\n    }\r\n\r\n    function withdrawEth(address payable to, uint amount) internal {\r\n        require(whitelist[to], '101');\r\n        to.transfer(amount);\r\n    }\r\n\r\n    function withdrawToken(address tokenAddress, address to, uint amount) internal {\r\n        require(whitelist[to], '101');\r\n        tokenAddress.call(abi.encodeWithSignature(\"transfer(address,uint256)\", to, amount));\r\n        //ERC20Interface(tokenAddress).transfer(to, amount);\r\n    }\r\n\r\n    function burnGasToken(uint gasSpent) internal {\r\n\r\n        uint256 tokens = (gasSpent + 14154) / 41130;\r\n        Gastoken(gasTokenAddress).free(tokens);\r\n    }\r\n\r\n\r\n\r\n\r\n    receive() external payable {\r\n        //owner.transfer(msg.value);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}"}}}