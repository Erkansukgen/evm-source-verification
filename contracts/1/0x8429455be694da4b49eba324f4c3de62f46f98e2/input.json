{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/flappy2.sol":{"content":" pragma solidity ^0.7.5;\r\n // SPDX-License-Identifier: UNLICENCED\r\n\r\n// Generic owner and whitelist functionality ---------------------------------------------------------\r\ncontract Managed {\r\n    \r\n    address payable public owner;\r\n    mapping(address => uint) public isWorker;\r\n    \r\n    constructor() {\r\n        owner = msg.sender;\r\n        isWorker[msg.sender] = 1;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyWorker(){\r\n         require(isWorker[msg.sender] == 1 || msg.sender == owner, \"Caller is neither the owner nor a whitelisted worker\");\r\n        _;\r\n    }\r\n\r\n    function addWorker(address w) public onlyOwner {\r\n        isWorker[w] = 1;\r\n    }\r\n    \r\n    function removeWorker(address w) public onlyOwner {\r\n        isWorker[w] = 0;\r\n    }\r\n    \r\n    function transferOwnership(address payable new_owner) public virtual onlyOwner {\r\n        owner = new_owner;\r\n    }\r\n}\r\n\r\n// Interfaces to external contracts -----------------------------------------------\r\ninterface Join {\r\n    function exit(address, uint) external;\r\n}\r\ninterface Jug {\r\n    function drip(bytes32) external returns (uint);\r\n}\r\ninterface Vat {\r\n    function hope(address) external;\r\n    function dai(address) external view returns (uint);\r\n}\r\ninterface Vow {\r\n    function flap() external returns (uint);\r\n}\r\ninterface ERC20 {\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n}\r\ninterface Flapper {\r\n    function tend(uint id, uint lot, uint bid) external;\r\n    function deal(uint id) external;\r\n    function kicks() external returns(uint);\r\n}\r\n\r\n// main contract ---------------------------------------------------------\r\n\r\ncontract MrFlappy is Managed {\r\n\r\n    constructor() {\r\n        ERC20(DAI_ADDRESS).approve(msg.sender, 1e77); // Owner can withdraw MKR and DAI manually if necessary using transferFrom\r\n        ERC20(MKR_ADDRESS).approve(msg.sender, 1e77); \r\n        ERC20(MKR_ADDRESS).approve(FLAP_ADDRESS, 1e77); // Flapper is approved to take MKR from the contract\r\n        ERC20(DAI_ADDRESS).approve(DAI_JOIN, 1e77); // Joiner is approved to take DAI from contract\r\n        Vat(VAT_ADDRESS).hope(DAI_JOIN); // Vat is authorized to take contract's DAI from the joiner. Necessary for join/exit.\r\n    }\r\n    \r\n    // Addresses ---\r\n    address constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address constant MKR_ADDRESS = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\r\n    address constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address constant VOW_ADDRESS = 0xA950524441892A31ebddF91d3cEEFa04Bf454466;\r\n    address constant JUG_ADDRESS = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    address constant FLAP_ADDRESS = 0xC4269cC7acDEdC3794b221aA4D9205F564e27f0d;\r\n    address constant DAI_JOIN = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\r\n    \r\n    //Owner functions for moving DAI around ---------------------------------------------------------\r\n    \r\n    function exitDai() public onlyOwner {\r\n        uint amount = Vat(VAT_ADDRESS).dai(address(this)) / (10**27);\r\n        Join(DAI_JOIN).exit(address(this), amount);\r\n    }\r\n\r\n    function withdrawToken(address token) public onlyOwner {\r\n        uint balance = ERC20(token).balanceOf(address(this));\r\n        ERC20(token).transfer(msg.sender, balance);\r\n    }\r\n\r\n    function exitAndWithdrawDAI() public onlyOwner {\r\n        exitDai();\r\n        withdrawToken(DAI_ADDRESS);\r\n    }\r\n\r\n    //Worker functions ------------------------------------------------------------\r\n\r\n    function dripAll() public onlyWorker {\r\n        Jug(JUG_ADDRESS).drip(bytes32('ETH-A'));\r\n        Jug(JUG_ADDRESS).drip(bytes32('USDC-A'));\r\n        Jug(JUG_ADDRESS).drip(bytes32('WBTC-A'));\r\n        Jug(JUG_ADDRESS).drip(bytes32('TUSD-A'));\r\n        Jug(JUG_ADDRESS).drip(bytes32('PAXUSD-A'));\r\n    }\r\n\r\n    function dripFlapTend(uint id, uint lot, uint bid) public onlyWorker {\r\n        require(id == Flapper(FLAP_ADDRESS).kicks() + 1, \"Invalid auction ID or auction has already been flapped\");\r\n        dripAll();\r\n        Vow(VOW_ADDRESS).flap();\r\n        Flapper(FLAP_ADDRESS).tend(id, lot, bid);\r\n    }\r\n\r\n    function justTend(uint id, uint lot, uint bid) public onlyWorker {\r\n        Flapper(FLAP_ADDRESS).tend(id, lot, bid);\r\n    }\r\n\r\n\r\n    // Contract-specific owner functions ------------------------------------------------------------\r\n    function transferOwnership(address payable new_owner) public override onlyOwner {\r\n        Managed.transferOwnership(new_owner);\r\n        ERC20(DAI_ADDRESS).approve(msg.sender, 0); // Revoke DAI/MKR withdrawal access from old owner\r\n        ERC20(MKR_ADDRESS).approve(msg.sender, 0);\r\n        ERC20(DAI_ADDRESS).approve(new_owner, 1e77); // Give new owner access to the contract's DAI/MKR\r\n        ERC20(MKR_ADDRESS).approve(new_owner, 1e77);\r\n    }\r\n    \r\n}\r\n"}}}