{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"Vesting.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title VestingPeriod\n * @dev The vesting vault contract after the token sale\n * Taken from https://github.com/dandelionlabs-io/polkafantasy-linear-vesting//blob/master/contracts/Vesting.sol\n */\ncontract VestingPeriod is Ownable {\n    using SafeMath for uint256;\n\n    /// @notice Grant definition\n    struct Grant {\n        uint256 amount;             // Total amount to claim\n        uint256 totalClaimed;       // Already claimed\n        uint256 perSecond;          // Reward per second\n    }\n\n    struct Pool {\n        uint256 startTime;          // Starting time of the vesting period in unix timestamp format\n        uint256 endTime;            // Ending time of the vesting period in unix timestamp format\n        uint256 vestingDuration;    // In seconds\n        uint256 amount;             // Total size of pool\n        uint256 totalClaimed;       // Total amount claimed till moment\n        uint256 grants;             // Amount of investors\n    }\n\n    /// @dev Used to translate vesting periods specified in days to seconds\n    uint256 constant internal SECONDS_PER_DAY = 86400;\n\n    /// @notice PolkaFantasy token\n    IERC20 public token;\n\n    /// @notice Mapping of recipient address > token grant\n    mapping (address => Grant) public tokenGrants;\n\n    /// @notice Current vesting period is the same for all grants.\n    /// @dev Each pool has its own contract.\n    Pool public pool;\n\n    /// @notice List of investors who got blacklist tokens.\n    /// @dev Structure of the map: investor => new address\n    mapping(address => address) public blacklist;\n\n    /// @notice Event emitted when a new grant is created\n    event GrantAdded(address indexed recipient, uint256 indexed amount);\n\n    /// @notice Event emitted when tokens are claimed by a recipient from a grant\n    event GrantTokensClaimed(address indexed recipient, uint256 indexed amountClaimed);\n\n    /// @notice Event emitted when the grant investor is changed\n    event ChangeInvestor(address indexed oldOwner, address indexed newOwner);\n\n    /**\n     * @notice Construct a new Vesting contract\n     * @param _token Address of PolkaFantasy token\n     * @param _startTime starting time of the vesting period in timestamp format\n     * @param _vestingDuration duration time of the vesting period in timestamp format\n     */\n    constructor(address _token, uint256 _startTime, uint256 _vestingDuration) {\n        require(_token != address(0), \"VestingPeriod::constructor: _token must be valid token address\");\n        require(_startTime > 0 && _vestingDuration > 0, \"VestingPeriod::constructor: One of the time parameters is 0\");\n        require(_startTime > block.timestamp, \"VestingPeriod::constructor: Starting time shalll be in a future time\");\n        require(_vestingDuration > 0, \"VestingPeriod::constructor: Duration of the period must be > 0\");\n        if (_vestingDuration < SECONDS_PER_DAY) {\n            require(_vestingDuration <= SECONDS_PER_DAY.mul(10).mul(365), \"VestingPeriod::constructor: Duration should be less than 10 years\");\n        }\n        \n        token = IERC20(_token);\n        \n        pool.startTime = _startTime;\n        pool.vestingDuration = _vestingDuration;\n        pool.endTime = _startTime.add(_vestingDuration);\n    }\n\n    /**\n     * @notice In case if the user doesn't want to change the grant.\n     * @param _oldAddress existing address from the investor which we want to change\n     * @param _newAddress new address from the investor which we want to give\n     */\n    function changeInvestor(address _oldAddress, address _newAddress) external onlyOwner {\n        require(blacklist[_oldAddress] == address(0), \"VestingPeriod::changeInvestor: oldaddress already in the blacklist\");\n        require(blacklist[_newAddress] == address(0), \"VestingPeriod::changeInvestor: new address is a blacklisted address\");\n        require(tokenGrants[_newAddress].amount == 0, \"VestingPeriod::changeInvestor: requires a different address than existing granted\");\n        require(tokenGrants[_oldAddress].amount > 0, \"VestingPeriod::changeInvestor: oldAddress has no remaining balance\");\n\n        tokenGrants[_newAddress] = Grant(tokenGrants[_oldAddress].amount, tokenGrants[_oldAddress].totalClaimed, tokenGrants[_oldAddress].perSecond);\n        delete tokenGrants[_oldAddress];\n\n        blacklist[_oldAddress] = _newAddress;\n\n        emit ChangeInvestor(_oldAddress, _newAddress);\n    }\n\n    /**\n     * @notice Add list of grants in batch.\n     * @param _recipients list of addresses of the stakeholders\n     * @param _amounts list of amounts to be assigned to the stakeholders\n     */\n    function addTokenGrants(address[] memory _recipients, uint256[] memory _amounts) external onlyOwner {\n        require(_recipients.length > 0, \"VestingPeriod::addTokenGrants: no recipients\");\n        require(_recipients.length <= 100, \"VestingPeriod::addTokenGrants: too many grants, it will probably fail\");\n        require(_recipients.length == _amounts.length, \"VestingPeriod::addTokenGrants: invalid parameters length (they should be same)\");\n\n        uint256 amountSum = 0;\n        for (uint16 i = 0; i < _recipients.length; i++) {\n            require(_recipients[i] != address(0), \"VestingPeriod:addTokenGrants: there is an address with value 0\");\n            require(tokenGrants[_recipients[i]].amount == 0, \"VestingPeriod::addTokenGrants: a grant already exists for one of the accounts\");\n            require(blacklist[_recipients[i]] == address(0), \"VestingPeriod:addTOkenGrants: Blacklisted address\");\n\n            require(_amounts[i] > 0, \"VestingPeriod::addTokenGrant: amount == 0\");\n            amountSum = amountSum.add(_amounts[i]);\n        }\n\n        // Transfer the grant tokens under the control of the vesting contract\n        require(token.transferFrom(msg.sender, address(this), amountSum), \"VestingPeriod::addTokenGrants: transfer failed\");\n\n        for (uint16 i = 0; i < _recipients.length; i++) {\n \n            Grant memory grant = Grant({\n                amount: _amounts[i],\n                totalClaimed: 0,\n                perSecond: _amounts[i].div(pool.vestingDuration)\n            });\n            tokenGrants[_recipients[i]] = grant;\n            emit GrantAdded(_recipients[i], _amounts[i]);\n        }\n\n        pool.amount = pool.amount.add(amountSum);\n    }\n\n    /**\n     * @notice Get token grant for recipient\n     * @param _recipient The address that has a grant\n     * @return the grant\n     */\n    function getTokenGrant(address _recipient) external view returns (Grant memory) {\n        return tokenGrants[_recipient];\n    }\n\n    /**\n     * @notice Calculate the vested and unclaimed tokens available for `recipient` to claim\n     * @dev Due to rounding errors once grant duration is reached, returns the entire left grant amount\n     * @param _recipient The address that has a grant\n     * @return The amount recipient can claim\n     */\n    function calculateGrantClaim(address _recipient) public view returns (uint256) {\n\n        // For grants created with a future start date, that hasn't been reached, return 0, 0\n        if (block.timestamp < pool.startTime) {\n            return 0;\n        }\n\n        uint256 cap = block.timestamp;\n        if (cap > pool.endTime) {\n            cap = pool.endTime;\n        }\n        uint256 elapsedTime = cap.sub(pool.startTime);\n        \n        // If over vesting duration, all tokens vested\n        if (elapsedTime >= pool.vestingDuration) {\n            uint256 remainingGrant = tokenGrants[_recipient].amount.sub(tokenGrants[_recipient].totalClaimed);\n            return remainingGrant;\n        } else {\n            uint256 amountVested = tokenGrants[_recipient].perSecond.mul(elapsedTime);\n            uint256 claimableAmount = amountVested.sub(tokenGrants[_recipient].totalClaimed);\n            return claimableAmount;\n        }\n    }\n\n    /**\n     * @notice Calculate the vested (claimed + unclaimed) tokens for `recipient`\n     * @param _recipient The address that has a grant\n     * @return Total vested balance (claimed + unclaimed)\n     */\n    function vestedBalance(address _recipient) external view returns (uint256) {\n\n        // For grants created with a future start date, that hasn't been reached, return 0, 0\n        if (block.timestamp < pool.startTime) {\n            return 0;\n        }\n\n        uint256 cap = block.timestamp;\n        if (cap > pool.endTime) {\n            cap = pool.endTime;\n        }\n        \n        // If over vesting duration, all tokens vested\n        if (cap == pool.endTime) {\n            return tokenGrants[_recipient].amount;\n        } else {\n            uint256 elapsedTime = cap.sub(pool.startTime);\n            uint256 amountVested = tokenGrants[_recipient].perSecond.mul(elapsedTime);\n            return amountVested;\n        }\n    }\n\n    /**\n     * @notice The balance claimed by `recipient`\n     * @param _recipient The address that has a grant\n     * @return the number of claimed tokens by `recipient`\n     */\n    function claimedBalance(address _recipient) external view returns (uint256) {\n\n        return tokenGrants[_recipient].totalClaimed;\n    }\n\n    /**\n     * @notice Allows a grant recipient to claim their vested tokens\n     * @dev Errors if no tokens have vested\n     * @dev It is advised recipients check they are entitled to claim via `calculateGrantClaim` before calling this\n     * @param _recipient The address that has a grant\n     */\n    function claimVestedTokens(address _recipient) external {\n        uint256 amountVested = calculateGrantClaim(_recipient);\n        require(amountVested > 0, \"VestingPeriod::claimVestedTokens: amountVested is 0\");\n        require(token.transfer(_recipient, amountVested), \"VestingPeriod::claimVestedTokens: transfer failed\");\n        \n        Grant storage tokenGrant = tokenGrants[_recipient];\n\n        tokenGrant.totalClaimed = uint256(tokenGrant.totalClaimed.add(amountVested));\n        pool.totalClaimed = pool.totalClaimed.add(amountVested);\n\n        emit GrantTokensClaimed(_recipient, amountVested);\n    }\n\n    /**\n     * @notice Calculate the number of tokens that will vest per day for the given recipient\n     * @param _recipient The address that has a grant\n     * @return Number of tokens that will vest per day\n     */\n    function tokensVestedPerDay(address _recipient) external view returns(uint256) {\n        \n        return tokenGrants[_recipient].amount.div(pool.vestingDuration.div(SECONDS_PER_DAY));\n    }\n    \n    /**\n     * @notice Calculate the number of tokens that will vest per day in the given period for an amount\n     * @param _amount the amount to be checked\n     * @return Number of tokens that will vest per day\n     */\n    function tokensVestedPerDay(uint256 _amount) external view returns(uint256) {\n        \n        return _amount.div(pool.vestingDuration.div(SECONDS_PER_DAY));\n    }\n}"}}}