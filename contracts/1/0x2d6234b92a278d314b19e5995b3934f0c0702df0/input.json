{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"TokenERC20.sol":{"content":"pragma solidity ^0.4.16;\r\n\r\ncontract TokenERC20 {\r\n    string public name; // ERC20标准\r\n    string public symbol; // ERC20标准\r\n    uint8 public decimals = 18;  // ERC20标准，decimals 可以有的小数点个数，最小的代币单位。18 是建议的默认值\r\n    uint256 public totalSupply; // ERC20标准 总供应量\r\n\r\n    // 用mapping保存每个地址对应的余额 ERC20标准\r\n    mapping (address => uint256) public balanceOf;\r\n    // 存储对账号的控制 ERC20标准\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // 事件，用来通知客户端交易发生 ERC20标准\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // 事件，用来通知客户端代币被授权消费 ERC20标准\r\n    event Approval(address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * 初始化构造\r\n     */\r\n    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // 供应的份额，份额跟最小的代币单位有关，份额 = 币数 * 10 ** decimals。\r\n        balanceOf[msg.sender] = totalSupply;                // 创建者拥有所有的代币\r\n        name = tokenName;                                   // 代币名称\r\n        symbol = tokenSymbol;                               // 代币符号\r\n    }\r\n\r\n    /**\r\n     * 代币交易转移的内部实现\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // 确保目标地址不为0x0，因为0x0地址代表销毁\r\n        require(_to != 0x0);\r\n        // 检查发送者余额\r\n        require(balanceOf[_from] >= _value);\r\n        // 确保转移为正数个\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n\r\n        // 以下用来检查交易，\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n\r\n        // 用assert来检查代码逻辑。\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     *  代币交易转移\r\n     *  从自己（创建交易者）账号发送`_value`个代币到 `_to`账号\r\n     * ERC20标准\r\n     * @param _to 接收者地址\r\n     * @param _value 转移数额\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 账号之间代币交易转移\r\n     * ERC20标准\r\n     * @param _from 发送者地址\r\n     * @param _to 接收者地址\r\n     * @param _value 转移数额\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 设置某个地址（合约）可以创建交易者名义花费的代币数。\r\n     *\r\n     * 允许发送者`_spender` 花费不多于 `_value` 个代币\r\n     * ERC20标准\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n            allowance[msg.sender][_spender] = _value;\r\n            Approval(_spender,_value);\r\n            return true;\r\n        }\r\n\r\n}"}}}