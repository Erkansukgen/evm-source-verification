{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"GetCdps.sol":{"content":"// hevm: flattened sources of src/GetCdps.sol\npragma solidity =0.5.12 >0.4.13 >0.4.20 >=0.4.23 >=0.5.0 <0.6.0 >=0.5.6 <0.6.0;\n\n////// lib/dss-deploy/lib/dss/src/lib.sol\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.5.12; */\n\ncontract LibNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  usr,\n        bytes32  indexed  arg1,\n        bytes32  indexed  arg2,\n        bytes             data\n    ) anonymous;\n\n    modifier note {\n        _;\n        assembly {\n            // log an 'anonymous' event with a constant 6 words of calldata\n            // and four indexed topics: selector, caller, arg1 and arg2\n            let mark := msize                         // end of memory ensures zero\n            mstore(0x40, add(mark, 288))              // update free memory pointer\n            mstore(mark, 0x20)                        // bytes type data offset\n            mstore(add(mark, 0x20), 224)              // bytes size (padded)\n            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\n            log4(mark, 288,                           // calldata\n                 shl(224, shr(224, calldataload(0))), // msg.sig\n                 caller,                              // msg.sender\n                 calldataload(4),                     // arg1\n                 calldataload(36)                     // arg2\n                )\n        }\n    }\n}\n\n////// src/DssCdpManager.sol\n/* pragma solidity 0.5.12; */\n\n/* import { LibNote } from \"dss/lib.sol\"; */\n\ncontract VatLike {\n    function urns(bytes32, address) public view returns (uint, uint);\n    function hope(address) public;\n    function flux(bytes32, address, address, uint) public;\n    function move(address, address, uint) public;\n    function frob(bytes32, address, address, address, int, int) public;\n    function fork(bytes32, address, address, int, int) public;\n}\n\ncontract UrnHandler {\n    constructor(address vat) public {\n        VatLike(vat).hope(msg.sender);\n    }\n}\n\ncontract DssCdpManager is LibNote {\n    address                   public vat;\n    uint                      public cdpi;      // Auto incremental\n    mapping (uint => address) public urns;      // CDPId => UrnHandler\n    mapping (uint => List)    public list;      // CDPId => Prev & Next CDPIds (double linked list)\n    mapping (uint => address) public owns;      // CDPId => Owner\n    mapping (uint => bytes32) public ilks;      // CDPId => Ilk\n\n    mapping (address => uint) public first;     // Owner => First CDPId\n    mapping (address => uint) public last;      // Owner => Last CDPId\n    mapping (address => uint) public count;     // Owner => Amount of CDPs\n\n    mapping (\n        address => mapping (\n            uint => mapping (\n                address => uint\n            )\n        )\n    ) public cdpCan;                            // Owner => CDPId => Allowed Addr => True/False\n\n    mapping (\n        address => mapping (\n            address => uint\n        )\n    ) public urnCan;                            // Urn => Allowed Addr => True/False\n\n    struct List {\n        uint prev;\n        uint next;\n    }\n\n    event NewCdp(address indexed usr, address indexed own, uint indexed cdp);\n\n    modifier cdpAllowed(\n        uint cdp\n    ) {\n        require(msg.sender == owns[cdp] || cdpCan[owns[cdp]][cdp][msg.sender] == 1, \"cdp-not-allowed\");\n        _;\n    }\n\n    modifier urnAllowed(\n        address urn\n    ) {\n        require(msg.sender == urn || urnCan[urn][msg.sender] == 1, \"urn-not-allowed\");\n        _;\n    }\n\n    constructor(address vat_) public {\n        vat = vat_;\n    }\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n\n    function toInt(uint x) internal pure returns (int y) {\n        y = int(x);\n        require(y >= 0);\n    }\n\n    // Allow/disallow a usr address to manage the cdp.\n    function cdpAllow(\n        uint cdp,\n        address usr,\n        uint ok\n    ) public cdpAllowed(cdp) {\n        cdpCan[owns[cdp]][cdp][usr] = ok;\n    }\n\n    // Allow/disallow a usr address to quit to the the sender urn.\n    function urnAllow(\n        address usr,\n        uint ok\n    ) public {\n        urnCan[msg.sender][usr] = ok;\n    }\n\n    // Open a new cdp for a given usr address.\n    function open(\n        bytes32 ilk,\n        address usr\n    ) public note returns (uint) {\n        require(usr != address(0), \"usr-address-0\");\n\n        cdpi = add(cdpi, 1);\n        urns[cdpi] = address(new UrnHandler(vat));\n        owns[cdpi] = usr;\n        ilks[cdpi] = ilk;\n\n        // Add new CDP to double linked list and pointers\n        if (first[usr] == 0) {\n            first[usr] = cdpi;\n        }\n        if (last[usr] != 0) {\n            list[cdpi].prev = last[usr];\n            list[last[usr]].next = cdpi;\n        }\n        last[usr] = cdpi;\n        count[usr] = add(count[usr], 1);\n\n        emit NewCdp(msg.sender, usr, cdpi);\n        return cdpi;\n    }\n\n    // Give the cdp ownership to a dst address.\n    function give(\n        uint cdp,\n        address dst\n    ) public note cdpAllowed(cdp) {\n        require(dst != address(0), \"dst-address-0\");\n        require(dst != owns[cdp], \"dst-already-owner\");\n\n        // Remove transferred CDP from double linked list of origin user and pointers\n        if (list[cdp].prev != 0) {\n            list[list[cdp].prev].next = list[cdp].next;         // Set the next pointer of the prev cdp (if exists) to the next of the transferred one\n        }\n        if (list[cdp].next != 0) {                              // If wasn't the last one\n            list[list[cdp].next].prev = list[cdp].prev;         // Set the prev pointer of the next cdp to the prev of the transferred one\n        } else {                                                // If was the last one\n            last[owns[cdp]] = list[cdp].prev;                   // Update last pointer of the owner\n        }\n        if (first[owns[cdp]] == cdp) {                          // If was the first one\n            first[owns[cdp]] = list[cdp].next;                  // Update first pointer of the owner\n        }\n        count[owns[cdp]] = sub(count[owns[cdp]], 1);\n\n        // Transfer ownership\n        owns[cdp] = dst;\n\n        // Add transferred CDP to double linked list of destiny user and pointers\n        list[cdp].prev = last[dst];\n        list[cdp].next = 0;\n        if (last[dst] != 0) {\n            list[last[dst]].next = cdp;\n        }\n        if (first[dst] == 0) {\n            first[dst] = cdp;\n        }\n        last[dst] = cdp;\n        count[dst] = add(count[dst], 1);\n    }\n\n    // Frob the cdp keeping the generated DAI or collateral freed in the cdp urn address.\n    function frob(\n        uint cdp,\n        int dink,\n        int dart\n    ) public note cdpAllowed(cdp) {\n        address urn = urns[cdp];\n        VatLike(vat).frob(\n            ilks[cdp],\n            urn,\n            urn,\n            urn,\n            dink,\n            dart\n        );\n    }\n\n    // Transfer wad amount of cdp collateral from the cdp address to a dst address.\n    function flux(\n        uint cdp,\n        address dst,\n        uint wad\n    ) public note cdpAllowed(cdp) {\n        VatLike(vat).flux(ilks[cdp], urns[cdp], dst, wad);\n    }\n\n    // Transfer wad amount of any type of collateral (ilk) from the cdp address to a dst address.\n    // This function has the purpose to take away collateral from the system that doesn't correspond to the cdp but was sent there wrongly.\n    function flux(\n        bytes32 ilk,\n        uint cdp,\n        address dst,\n        uint wad\n    ) public note cdpAllowed(cdp) {\n        VatLike(vat).flux(ilk, urns[cdp], dst, wad);\n    }\n\n    // Transfer wad amount of DAI from the cdp address to a dst address.\n    function move(\n        uint cdp,\n        address dst,\n        uint rad\n    ) public note cdpAllowed(cdp) {\n        VatLike(vat).move(urns[cdp], dst, rad);\n    }\n\n    // Quit the system, migrating the cdp (ink, art) to a different dst urn\n    function quit(\n        uint cdp,\n        address dst\n    ) public note cdpAllowed(cdp) urnAllowed(dst) {\n        (uint ink, uint art) = VatLike(vat).urns(ilks[cdp], urns[cdp]);\n        VatLike(vat).fork(\n            ilks[cdp],\n            urns[cdp],\n            dst,\n            toInt(ink),\n            toInt(art)\n        );\n    }\n\n    // Import a position from src urn to the urn owned by cdp\n    function enter(\n        address src,\n        uint cdp\n    ) public note urnAllowed(src) cdpAllowed(cdp) {\n        (uint ink, uint art) = VatLike(vat).urns(ilks[cdp], src);\n        VatLike(vat).fork(\n            ilks[cdp],\n            src,\n            urns[cdp],\n            toInt(ink),\n            toInt(art)\n        );\n    }\n\n    // Move a position from cdpSrc urn to the cdpDst urn\n    function shift(\n        uint cdpSrc,\n        uint cdpDst\n    ) public note cdpAllowed(cdpSrc) cdpAllowed(cdpDst) {\n        require(ilks[cdpSrc] == ilks[cdpDst], \"non-matching-cdps\");\n        (uint ink, uint art) = VatLike(vat).urns(ilks[cdpSrc], urns[cdpSrc]);\n        VatLike(vat).fork(\n            ilks[cdpSrc],\n            urns[cdpSrc],\n            urns[cdpDst],\n            toInt(ink),\n            toInt(art)\n        );\n    }\n}\n\n////// src/GetCdps.sol\n/* pragma solidity 0.5.12; */\n\n/* import \"./DssCdpManager.sol\"; */\n\ncontract GetCdps {\n    function getCdpsAsc(address manager, address guy) external view returns (uint[] memory ids, address[] memory urns, bytes32[] memory ilks) {\n        uint count = DssCdpManager(manager).count(guy);\n        ids = new uint[](count);\n        urns = new address[](count);\n        ilks = new bytes32[](count);\n        uint i = 0;\n        uint id = DssCdpManager(manager).first(guy);\n\n        while (id > 0) {\n            ids[i] = id;\n            urns[i] = DssCdpManager(manager).urns(id);\n            ilks[i] = DssCdpManager(manager).ilks(id);\n            (,id) = DssCdpManager(manager).list(id);\n            i++;\n        }\n    }\n\n    function getCdpsDesc(address manager, address guy) external view returns (uint[] memory ids, address[] memory urns, bytes32[] memory ilks) {\n        uint count = DssCdpManager(manager).count(guy);\n        ids = new uint[](count);\n        urns = new address[](count);\n        ilks = new bytes32[](count);\n        uint i = 0;\n        uint id = DssCdpManager(manager).last(guy);\n\n        while (id > 0) {\n            ids[i] = id;\n            urns[i] = DssCdpManager(manager).urns(id);\n            ilks[i] = DssCdpManager(manager).ilks(id);\n            (id,) = DssCdpManager(manager).list(id);\n            i++;\n        }\n    }\n}\n"}}}