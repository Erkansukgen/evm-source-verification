{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/ThomasJefferSon.sol":{"content":"pragma solidity ^0.7.0;\n\n// SPDX-License-Identifier: MIT\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n    \n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n}\n\n\n\n\ncontract Thomas_Jefferson_Coin is IERC20 {\n \n    using SafeMath for uint256;\n     \n    mapping (address => uint256) public _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n    \n    \n    uint256 private _totalSupply;\n    address private _owner;\n    string private _name;\n    string private _symbol;\n    uint256 private _decimals;\n\n    constructor ()  {\n        _name = 'Thomas Jefferson Coin';\n        _symbol = 'TJC';\n        _decimals = 18;\n        _owner = 0x05076468bdDE081E8e9c88945b6255Ff1F7b99bB;\n        \n        _totalSupply =  8000000000 * (10**_decimals);\n        \n        //transfer total supply to owner_\n        _balances[address(this)]=_totalSupply - 1200000e18;\n        _balances[_owner] = 1200000e18;\n        \n        //fire an event on transfer of tokens\n        emit Transfer(address(this),_owner,_balances[_owner]);\n        emit Transfer(address(0),address(this),_balances[address(this)]);\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n    \n     function decimals() public view returns (uint256) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n   \n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n \n    function approve(address spender, uint256 amount) public  virtual override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        require(_allowances[sender][msg.sender]>=amount,\"In Sufficient allowance\");\n        _transfer(sender, recipient, amount);\n        _approve(sender,msg.sender, _allowances[sender][msg.sender]-=amount);\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(sender != recipient,\"cannot send money to your Self\");\n        require(_balances[sender]>=amount,\"In Sufficiebt Funds\");\n        \n        _balances[sender] -= amount;\n        _balances[recipient] +=amount;\n        emit Transfer(sender, recipient, amount);\n    }\n     \n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        require(owner != spender,\"cannot send allowances to yourself\");\n        require(_balances[owner]>=amount,\"In Sufficiebt Funds\");\n    \n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    \n     \n  function exchangeToken(uint256 amountTokens)public payable returns (bool)  {\n      \n        require(amountTokens <= _balances[address(this)],\"No more Tokens Supply\");\n        \n        \n        _balances[address(this)]=_balances[address(this)].sub(amountTokens);\n        _balances[msg.sender]=_balances[msg.sender].add(amountTokens);\n        \n        emit Transfer(address(this),msg.sender, amountTokens);\n        \n        payable(_owner).transfer(msg.value);\n            \n        return true; \n    }\n  \n}\n"}}}