{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Precog token.sol": {
      "content": "pragma solidity ^0.8.0;\n\ncontract ERC20  {\n    mapping (address => uint256) public balanceOf;\n\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    uint256 public totalSupply;\n\n    string public name;\n    string public symbol;\n    uint8  public decimals;\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor (string memory name_, string memory symbol_, uint8 decimals_) {\n        name = name_;\n        symbol = symbol_;\n        decimals = decimals_;\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        require(allowance[sender][msg.sender] >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"Error: transfer from the zero address\");\n        require(recipient != address(0), \"Error: transfer to the zero address\");\n        require(balanceOf[sender] >= amount, \"Error: transfer amount exceeds balance\");\n        unchecked {\n            balanceOf[sender] = balanceOf[sender] - amount;\n        }\n        balanceOf[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"Error: mint to the zero address\");\n        totalSupply += amount;\n        balanceOf[account] += amount;\n        \n        emit Transfer(address(0), account, amount);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"Error: approve from the zero address\");\n        require(spender != address(0), \"Error: approve to the zero address\");\n        allowance[owner][spender] = amount;\n        \n        emit Approval(owner, spender, amount);\n    }\n}\n\ncontract PrecogToken is ERC20 {\n    \n    constructor() public ERC20(\"Precog\", \"PCOG\", 18) {\n        address recipient = 0x08e57682c32bc1692b33DFCd1df5667A76cF380C;\n        uint256 amount = 9800000000000000000000; // 9800 PCOG\n        _mint(recipient, amount);\n    }\n}"
    }
  }
}