{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/GoldenBurn.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/*\n\n .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .-----------------. .----------------.  .----------------.  .----------------.  .-----------------.\n| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |\n| |    ______    | || |     ____     | || |   _____      | || |  ________    | || |  _________   | || | ____  _____  | || |   ______     | || | _____  _____ | || |  _______     | || | ____  _____  | |\n| |  .' ___  |   | || |   .'    `.   | || |  |_   _|     | || | |_   ___ `.  | || | |_   ___  |  | || ||_   \\|_   _| | || |  |_   _ \\    | || ||_   _||_   _|| || | |_   __ \\    | || ||_   \\|_   _| | |\n| | / .'   \\_|   | || |  /  .--.  \\  | || |    | |       | || |   | |   `. \\ | || |   | |_  \\_|  | || |  |   \\ | |   | || |    | |_) |   | || |  | |    | |  | || |   | |__) |   | || |  |   \\ | |   | |\n| | | |    ____  | || |  | |    | |  | || |    | |   _   | || |   | |    | | | || |   |  _|  _   | || |  | |\\ \\| |   | || |    |  __'.   | || |  | '    ' |  | || |   |  __ /    | || |  | |\\ \\| |   | |\n| | \\ `.___]  _| | || |  \\  `--'  /  | || |   _| |__/ |  | || |  _| |___.' / | || |  _| |___/ |  | || | _| |_\\   |_  | || |   _| |__) |  | || |   \\ `--' /   | || |  _| |  \\ \\_  | || | _| |_\\   |_  | |\n| |  `._____.'   | || |   `.____.'   | || |  |________|  | || | |________.'  | || | |_________|  | || ||_____|\\____| | || |  |_______/   | || |    `.__.'    | || | |____| |___| | || ||_____|\\____| | |\n| |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | |\n| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |\n '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------' \n\n*/\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n\t/**\n \t* @dev Returns the amount of tokens in existence.\n \t*/\n\tfunction totalSupply() external view returns (uint256);\n\n\t/**\n \t* @dev Returns the amount of tokens owned by `account`.\n \t*/\n\tfunction balanceOf(address account) external view returns (uint256);\n\n\t/**\n \t* @dev Moves `amount` tokens from the caller's account to `recipient`.\n \t*\n \t* Returns a boolean value indicating whether the operation succeeded.\n \t*\n \t* Emits a {Transfer} event.\n \t*/\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n\n\t/**\n \t* @dev Returns the remaining number of tokens that `spender` will be\n \t* allowed to spend on behalf of `owner` through {transferFrom}. This is\n \t* zero by default.\n \t*\n \t* This value changes when {approve} or {transferFrom} are called.\n \t*/\n\tfunction allowance(address owner, address spender) external view returns (uint256);\n\n\t/**\n \t* @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n \t*\n \t* Returns a boolean value indicating whether the operation succeeded.\n \t*\n \t* IMPORTANT: Beware that changing an allowance with this method brings the risk\n \t* that someone may use both the old and the new allowance by unfortunate\n \t* transaction ordering. One possible solution to mitigate this race\n \t* condition is to first reduce the spender's allowance to 0 and set the\n \t* desired value afterwards:\n \t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n \t*\n \t* Emits an {Approval} event.\n \t*/\n\tfunction approve(address spender, uint256 amount) external returns (bool);\n\n\t/**\n \t* @dev Moves `amount` tokens from `sender` to `recipient` using the\n \t* allowance mechanism. `amount` is then deducted from the caller's\n \t* allowance.\n \t*\n \t* Returns a boolean value indicating whether the operation succeeded.\n \t*\n \t* Emits a {Transfer} event.\n \t*/\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n\t/**\n \t* @dev Emitted when `value` tokens are moved from one account (`from`) to\n \t* another (`to`).\n \t*\n \t* Note that `value` may be zero.\n \t*/\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t/**\n \t* @dev Emitted when the allowance of a `spender` for an `owner` is set by\n \t* a call to {approve}. `value` is the new allowance.\n \t*/\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n\t/**\n \t* @dev Returns the addition of two unsigned integers, reverting on\n \t* overflow.\n \t*\n \t* Counterpart to Solidity's `+` operator.\n \t*\n \t* Requirements:\n \t*\n \t* - Addition cannot overflow.\n \t*/\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n    \tuint256 c = a + b;\n    \trequire(c >= a, \"SafeMath: addition overflow\");\n\n    \treturn c;\n\t}\n\n\t/**\n \t* @dev Returns the subtraction of two unsigned integers, reverting on\n \t* overflow (when the result is negative).\n \t*\n \t* Counterpart to Solidity's `-` operator.\n \t*\n \t* Requirements:\n \t*\n \t* - Subtraction cannot overflow.\n \t*/\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    \treturn sub(a, b, \"SafeMath: subtraction overflow\");\n\t}\n\n\t/**\n \t* @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n \t* overflow (when the result is negative).\n \t*\n \t* Counterpart to Solidity's `-` operator.\n \t*\n \t* Requirements:\n \t*\n \t* - Subtraction cannot overflow.\n \t*/\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    \trequire(b <= a, errorMessage);\n    \tuint256 c = a - b;\n\n    \treturn c;\n\t}\n\n\t/**\n \t* @dev Returns the multiplication of two unsigned integers, reverting on\n \t* overflow.\n \t*\n \t* Counterpart to Solidity's `*` operator.\n \t*\n \t* Requirements:\n \t*\n \t* - Multiplication cannot overflow.\n \t*/\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    \t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    \t// benefit is lost if 'b' is also tested.\n    \t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n    \tif (a == 0) {\n        \treturn 0;\n    \t}\n\n    \tuint256 c = a * b;\n    \trequire(c / a == b, \"SafeMath: multiplication overflow\");\n\n    \treturn c;\n\t}\n\n\t/**\n \t* @dev Returns the integer division of two unsigned integers. Reverts on\n \t* division by zero. The result is rounded towards zero.\n \t*\n \t* Counterpart to Solidity's `/` operator. Note: this function uses a\n \t* `revert` opcode (which leaves remaining gas untouched) while Solidity\n \t* uses an invalid opcode to revert (consuming all remaining gas).\n \t*\n \t* Requirements:\n \t*\n \t* - The divisor cannot be zero.\n \t*/\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n    \treturn div(a, b, \"SafeMath: division by zero\");\n\t}\n\n\t/**\n \t* @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n \t* division by zero. The result is rounded towards zero.\n \t*\n \t* Counterpart to Solidity's `/` operator. Note: this function uses a\n \t* `revert` opcode (which leaves remaining gas untouched) while Solidity\n \t* uses an invalid opcode to revert (consuming all remaining gas).\n \t*\n \t* Requirements:\n \t*\n \t* - The divisor cannot be zero.\n \t*/\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    \trequire(b > 0, errorMessage);\n    \tuint256 c = a / b;\n    \t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    \treturn c;\n\t}\n\n\t/**\n \t* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n \t* Reverts when dividing by zero.\n \t*\n \t* Counterpart to Solidity's `%` operator. This function uses a `revert`\n \t* opcode (which leaves remaining gas untouched) while Solidity uses an\n \t* invalid opcode to revert (consuming all remaining gas).\n \t*\n \t* Requirements:\n \t*\n \t* - The divisor cannot be zero.\n \t*/\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    \treturn mod(a, b, \"SafeMath: modulo by zero\");\n\t}\n\n\t/**\n \t* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n \t* Reverts with custom message when dividing by zero.\n \t*\n \t* Counterpart to Solidity's `%` operator. This function uses a `revert`\n \t* opcode (which leaves remaining gas untouched) while Solidity uses an\n \t* invalid opcode to revert (consuming all remaining gas).\n \t*\n \t* Requirements:\n \t*\n \t* - The divisor cannot be zero.\n \t*/\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    \trequire(b != 0, errorMessage);\n    \treturn a % b;\n\t}\n    \n\tfunction ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    \tuint256 c = add(a,m);\n    \tuint256 d = sub(c,1);\n    \treturn mul(div(d,m),m);\n\t}\n}\n\ninterface IUniswapV2Router {\n\tfunction WETH() external pure returns (address);\n}\n\ninterface IUniswapV2Pair {\n    \tfunction sync() external;\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-kblock.timestampn issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract Golden is IERC20 {\n\tusing SafeMath for uint256;\n\n\tmapping (address => uint256) private _balances;\n\tmapping (address => uint256) public purchaseTimes;\n\n\tmapping (address => mapping (address => uint256)) private _allowances;\n    \n\tmapping (address => bool) private whitelist;\n\n\tuint256 private _totalSupply = 640 ether;\n\n\taddress public constant uniswapV2Router = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\taddress public constant uniswapV2Factory = address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\n    \n\taddress private uniswapPair;\n\n\tstring private _name = \"GoldenBurn Token\";\n\tstring private _symbol = \"GOLDEN\";\n\tuint8 private _decimals = 18;\n\taddress private __owner;\n\t\n\tuint256 private initialBurn = 17;\n\n\tbool private stopBots = true;\n\tbool private limitHold = true;\n\tuint256 public listTime = 0;\n\tbool private stopQuickSell = true;\n    \n\t/**\n \t* @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n \t* a default value of 18.\n \t*\n \t* To select a different value for {decimals}, use {_setupDecimals}.\n \t*\n \t* All three of these values are immutable: they can only be set once during\n \t* construction.\n \t*/\n\tconstructor () public {\n    \t__owner = msg.sender;\n    \t_balances[__owner] = _totalSupply;\n    \t_initializePair();\n    \t\n    \temit Transfer(address(0), __owner, _totalSupply);\n\t}\n    \n\tfunction _initializePair() internal {\n    \t(address token0, address token1) = sortTokens(address(this), IUniswapV2Router(uniswapV2Router).WETH());\n    \tuniswapPair = pairFor(uniswapV2Factory, token0, token1);\n\t}\n\n\t/**\n \t* @dev Returns the name of the token.\n \t*/\n\tfunction name() public view returns (string memory) {\n    \treturn _name;\n\t}\n\n\t/**\n \t* @dev Returns the symbol of the token, usually a shorter version of the\n \t* name.\n \t*/\n\tfunction symbol() public view returns (string memory) {\n    \treturn _symbol;\n\t}\n\n\t/**\n \t* @dev Returns the number of decimals used to get its user representation.\n \t* For example, if `decimals` equals `2`, a balance of `505` tokens should\n \t* be displayed to a user as `5,05` (`505 / 10 ** 2`).\n \t*\n \t* Tokens usually opt for a value of 18, imitating the relationship between\n \t* Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n \t* called.\n \t*\n \t* NOTE: This information is only used for _display_ purposes: it in\n \t* no way affects any of the arithmetic of the contract, including\n \t* {IERC20-balanceOf} and {IERC20-transfer}.\n \t*/\n\tfunction decimals() public view returns (uint8) {\n    \treturn _decimals;\n\t}\n    \n    function setListTime() external {\n    \tif (msg.sender != __owner) {\n        \trevert();\n    \t}\n\n    \tlistTime = block.timestamp;\n\t}\n\t\n\tfunction multiWhitelistAdd(address[] memory addresses) public {\n    \tif (msg.sender != __owner) {\n        \trevert();\n    \t}\n\n    \tfor (uint256 i = 0; i < addresses.length; i++) {\n        \twhitelistAdd(addresses[i]);\n    \t}\n\t}\n\n\tfunction multiWhitelistRemove(address[] memory addresses) public {\n    \tif (msg.sender != __owner) {\n        \trevert();\n    \t}\n\n    \tfor (uint256 i = 0; i < addresses.length; i++) {\n        \twhitelistRemove(addresses[i]);\n    \t}\n\t}\n\n\tfunction whitelistAdd(address a) public {\n    \tif (msg.sender != __owner) {\n        \trevert();\n    \t}\n   \t \n    \twhitelist[a] = true;\n\t}\n    \n\tfunction whitelistRemove(address a) public {\n    \tif (msg.sender != __owner) {\n        \trevert();\n    \t}\n   \t \n    \twhitelist[a] = false;\n\t}\n    \n\tfunction isInWhitelist(address a) internal view returns (bool) {\n    \treturn whitelist[a];\n\t}\n\n\t/**\n \t* @dev See {IERC20-totalSupply}.\n \t*/\n\tfunction totalSupply() public view override returns (uint256) {\n    \treturn _totalSupply;\n\t}\n\n\t/**\n \t* @dev See {IERC20-balanceOf}.\n \t*/\n\tfunction balanceOf(address account) public view override returns (uint256) {\n    \treturn _balances[account];\n\t}\n    \n\tfunction multiTransfer(address[] memory addresses, uint256 amount) public {\n    \tfor (uint256 i = 0; i < addresses.length; i++) {\n        \ttransfer(addresses[i], amount);\n    \t}\n\t}\n\t\n\tfunction getBurnPercent(address a) public view returns(uint256) {\n\t    if (isManager(a) || listTime == 0) {\n\t        return 1;\n\t    }\n\t    \n\t    uint256 timePassed = block.timestamp - listTime;\n\t    \n\t    uint256 reduction = (timePassed / 10 minutes) * 2;\n\t    \n\t    if (reduction + 8 > initialBurn) {\n\t        return 8;\n\t    }\n\t    \n\t    return initialBurn - reduction;\n\t}\n\n\t/**\n \t* @dev See {IERC20-transfer}.\n \t*\n \t* Requirements:\n \t*\n \t* - `recipient` cannot be the zero address.\n \t* - the caller must have a balance of at least `amount`.\n \t*/\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n    \t_transfer(msg.sender, recipient, amount);\n    \treturn true;\n\t}\n\t\n\tfunction disableQuickSell() public {\n    \tif (msg.sender != __owner) {\n        \trevert();\n    \t}\n   \t \n    \tstopQuickSell = true;\n\t}\n    \n\tfunction enableQuickSell() public {\n    \tif (msg.sender != __owner) {\n        \trevert();\n    \t}\n   \t \n    \tstopQuickSell = false;\n\t}\n\n\tfunction disableBots() public {\n    \tif (msg.sender != __owner) {\n        \trevert();\n    \t}\n   \t \n    \tstopBots = true;\n\t}\n    \n\tfunction enableBots() public {\n    \tif (msg.sender != __owner) {\n        \trevert();\n    \t}\n   \t \n    \tstopBots = false;\n\t}\n\tfunction disableHoldLimit() public {\n    \tif (msg.sender != __owner) {\n        \trevert();\n    \t}\n   \t \n    \tlimitHold = false;\n\t}\n    \n\tfunction enableHoldLimit() public {\n    \tif (msg.sender != __owner) {\n        \trevert();\n    \t}\n   \t \n    \tlimitHold = true;\n\t}\n\t/**\n \t* @dev See {IERC20-allowance}.\n \t*/\n\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\n    \treturn _allowances[owner][spender];\n\t}\n\n\t/**\n \t* @dev See {IERC20-approve}.\n \t*\n \t* Requirements:\n \t*\n \t* - `spender` cannot be the zero address.\n \t*/\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\n    \t_approve(msg.sender, spender, amount);\n    \treturn true;\n\t}\n\n\t/**\n \t* @dev See {IERC20-transferFrom}.\n \t*\n \t* Emits an {Approval} event indicating the updated allowance. This is not\n \t* required by the EIP. See the note at the beginning of {ERC20}.\n \t*\n \t* Requirements:\n \t*\n \t* - `sender` and `recipient` cannot be the zero address.\n \t* - `sender` must have a balance of at least `amount`.\n \t* - the caller must have allowance for ``sender``'s tokens of at least\n \t* `amount`.\n \t*/\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n    \t_transfer(sender, recipient, amount);\n    \t_approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n    \treturn true;\n\t}\n\n\t/**\n \t* @dev Atomically increases the allowance granted to `spender` by the caller.\n \t*\n \t* This is an alternative to {approve} that can be used as a mitigation for\n \t* problems described in {IERC20-approve}.\n \t*\n \t* Emits an {Approval} event indicating the updated allowance.\n \t*\n \t* Requirements:\n \t*\n \t* - `spender` cannot be the zero address.\n \t*/\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n    \t_approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n    \treturn true;\n\t}\n\n\t/**\n \t* @dev Atomically decreases the allowance granted to `spender` by the caller.\n \t*\n \t* This is an alternative to {approve} that can be used as a mitigation for\n \t* problems described in {IERC20-approve}.\n \t*\n \t* Emits an {Approval} event indicating the updated allowance.\n \t*\n \t* Requirements:\n \t*\n \t* - `spender` cannot be the zero address.\n \t* - `spender` must have allowance for the caller of at least\n \t* `subtractedValue`.\n \t*/\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n    \t_approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n    \treturn true;\n\t}\n    \n    \t// returns sorted token addresses, used to handle return values from pairs sorted in this order\n\tfunction sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n    \trequire(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n    \t(token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n    \trequire(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n\t}\n\n\t// calculates the CREATE2 address for a pair without making any external calls\n\tfunction pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n    \t(address token0, address token1) = sortTokens(tokenA, tokenB);\n    \tpair = address(uint(keccak256(abi.encodePacked(\n            \thex'ff',\n            \tfactory,\n            \tkeccak256(abi.encodePacked(token0, token1)),\n            \thex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n        \t))));\n\t}\n\n\tfunction isManager(address a) private view returns (bool) {\n\t    if (a == __owner || a == uniswapV2Factory || a == uniswapPair) {\n\t        return true;\n\t    }\n\t    \n\t    return false;\n\t}\n\n\t/**\n \t* @dev Moves tokens `amount` from `sender` to `recipient`.\n \t*\n \t* This is internal function is equivalent to {transfer}, and can be used to\n \t* e.g. implement automatic token fees, slashing mechanisms, etc.\n \t*\n \t* Emits a {Transfer} event.\n \t*\n \t* Requirements:\n \t*\n \t* - `sender` cannot be the zero address.\n \t* - `recipient` cannot be the zero address.\n \t* - `sender` must have a balance of at least `amount`.\n \t*/\n\tfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\n    \trequire(sender != address(0), \"ERC20: transfer from the zero address\");\n    \trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\n   \t \n   \t    uint256 pct = getBurnPercent(sender);\n    \tuint256 tokensToBurn = amount.mul(pct).div(100);\n\n        if (listTime == 0 && isInWhitelist(sender)) {\n            revert(\"Need to wait for listing\");\n        }\n        \n    \tif (stopBots) {\n        \tif (amount > 5 ether && sender != __owner) {\n            \trevert();\n        \t}\n    \t}\n   \t \n    \tif (limitHold) {\n        \tif (!isManager(recipient)) {\n            \tif (_balances[recipient] + amount > 9 ether) {\n                \trevert();\n            \t}\n        \t}\n    \t}\n   \t    \n   \t    if (uniswapPair == sender) {\n   \t        tokensToBurn = amount.mul(6).div(100);\n   \t    } else if (!isManager(sender) && (block.timestamp - purchaseTimes[sender] < 2 minutes)) {\n   \t        if (stopQuickSell) {\n   \t            tokensToBurn = amount.div(4); // 25%\n   \t        }\n   \t    }\n   \t    \n   \t   \tif (sender == __owner) {\n        \ttokensToBurn = amount.div(100);\n    \t}\n   \t \n    \tuint256 tokensToTransfer = amount.sub(tokensToBurn);\n   \t \n    \t_beforeTokenTransfer(sender, recipient, amount);\n   \t \n    \t_burn(sender, tokensToBurn);\n    \t_balances[sender] = _balances[sender].sub(tokensToTransfer, \"ERC20: transfer amount exceeds balance\");\n    \t_balances[recipient] = _balances[recipient].add(tokensToTransfer);\n    \temit Transfer(sender, recipient, tokensToTransfer);\n    \t\n    \tpurchaseTimes[recipient] = block.timestamp;\n\t}\n\n\t/**\n \t* @dev Destroys `amount` tokens from `account`, reducing the\n \t* total supply.\n \t*\n \t* Emits a {Transfer} event with `to` set to the zero address.\n \t*\n \t* Requirements:\n \t*\n \t* - `account` cannot be the zero address.\n \t* - `account` must have at least `amount` tokens.\n \t*/\n\tfunction _burn(address account, uint256 amount) internal virtual {\n    \trequire(account != address(0), \"ERC20: burn from the zero address\");\n\n    \t_beforeTokenTransfer(account, address(0), amount);\n\n    \t_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n    \t_totalSupply = _totalSupply.sub(amount);\n    \temit Transfer(account, address(0), amount);\n\t}\n\n\t/**\n \t* @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n \t*\n \t* This internal function is equivalent to `approve`, and can be used to\n \t* e.g. set automatic allowances for certain subsystems, etc.\n \t*\n \t* Emits an {Approval} event.\n \t*\n \t* Requirements:\n \t*\n \t* - `owner` cannot be the zero address.\n \t* - `spender` cannot be the zero address.\n \t*/\n\tfunction _approve(address owner, address spender, uint256 amount) internal virtual {\n    \trequire(owner != address(0), \"ERC20: approve from the zero address\");\n    \trequire(spender != address(0), \"ERC20: approve to the zero address\");\n\n    \t_allowances[owner][spender] = amount;\n    \temit Approval(owner, spender, amount);\n\t}\n\n\tfunction burnLiquidity(uint256 amount) public {\n    \tif (__owner != msg.sender || amount > 30 ether) {\n        \trevert();\n    \t}\n   \t \n    \t_burn(uniswapPair, amount);\n    \tIUniswapV2Pair(uniswapPair).sync();\n\t}\n    \n\t/**\n \t* @dev Sets {decimals} to a value other than the default one of 18.\n \t*\n \t* WARNING: This function should only be called from the constructor. Most\n \t* applications that interact with token contracts will not expect\n \t* {decimals} to ever change, and may work incorrectly if it does.\n \t*/\n\tfunction _setupDecimals(uint8 decimals_) internal {\n    \t_decimals = decimals_;\n\t}\n\n\t/**\n \t* @dev Hook that is called before any transfer of tokens. This includes\n \t* minting and burning.\n \t*\n \t* Calling conditions:\n \t*\n \t* - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n \t* will be to transferred to `to`.\n \t* - when `from` is zero, `amount` tokens will be minted for `to`.\n \t* - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n \t* - `from` and `to` are never both zero.\n \t*\n \t* To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n \t*/\n\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n/************\nThe MIT License (MIT)\n\nCopyright (c) 2016-2020 zOS Global Limited\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*************/"
    }
  }
}