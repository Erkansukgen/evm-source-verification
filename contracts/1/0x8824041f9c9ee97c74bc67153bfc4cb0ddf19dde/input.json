{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/santa-swap.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas-optimized ERC-1155 implementation.\n/// @author Modified from Helios (https://github.com/z0r0z/Helios/blob/main/contracts/ERC1155.sol)\ncontract ERC1155 {\n    /*///////////////////////////////////////////////////////////////\n                            EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 amount);\n\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] amounts);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /*///////////////////////////////////////////////////////////////\n                            ERC1155 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public baseURI;\n\n    string public name = \"Santa Swap Participation Token\";\n\n    mapping(address => mapping(uint256 => uint256)) internal balanceOf;\n\n    mapping(address => mapping(address => bool)) internal operators;\n\n    /*///////////////////////////////////////////////////////////////\n                            ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n    error ArrayParity();\n\n    error InvalidOperator();\n\n    error NullAddress();\n\n    error InvalidReceiver();\n\n    /*///////////////////////////////////////////////////////////////\n                            ERC1155 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /* GETTERS */\n\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory batchBalances) {\n        if (owners.length != ids.length) revert ArrayParity();\n\n        batchBalances = new uint256[](owners.length);\n\n        for (uint256 i = 0; i < owners.length; i++) {\n            batchBalances[i] = balanceOf[owners[i]][ids[i]];\n        }\n    }\n\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool supported) {\n        supported = interfaceId == 0xd9b67a26 || interfaceId == 0x0e89341c;\n    }\n\n    function uri(uint256) external view returns (string memory meta) {\n        meta = baseURI;\n    }\n\n    /* APPROVALS */\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool isOperator) {\n        isOperator = operators[owner][operator];\n    }\n    \n    function setApprovalForAll(address operator, bool approved) external {\n        operators[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    /* TRANSFERS */\n\n    function safeTransferFrom(\n        address from, \n        address to, \n        uint256 id, \n        uint256 amount, \n        bytes memory data\n    ) external {\n        if (msg.sender != from || !isApprovedForAll(from, msg.sender)) revert InvalidOperator();\n\n        if (to == address(0)) revert NullAddress();\n\n        balanceOf[from][id] -= amount;\n\n        balanceOf[to][id] += amount;\n\n        _callonERC1155Received(from, to, id, amount, gasleft(), data);\n\n        emit TransferSingle(msg.sender, from, to, id, amount);\n    }\n\n    function safeBatchTransferFrom(\n        address from, \n        address to, \n        uint256[] memory ids,\n        uint256[] memory amounts, \n        bytes memory data\n    ) external {\n        if (msg.sender != from || !isApprovedForAll(from, msg.sender)) revert InvalidOperator();\n\n        if (to == address(0)) revert NullAddress();\n\n        if (ids.length != amounts.length) revert ArrayParity();\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            balanceOf[from][ids[i]] -= amounts[i];\n\n            balanceOf[to][ids[i]] += amounts[i];\n        }\n\n        _callonERC1155BatchReceived(from, to, ids, amounts, gasleft(), data);\n\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\n    }\n\n    function _callonERC1155Received(\n        address from, \n        address to, \n        uint256 id, \n        uint256 amount, \n        uint256 gasLimit, \n        bytes memory data\n    ) internal view {\n        if (to.code.length != 0) {\n            // selector = `bytes4(keccak256('onERC1155Received(address,address,uint256,uint256,bytes)'))`\n            (, bytes memory returned) = to.staticcall{gas: gasLimit}(abi.encodeWithSelector(0xf23a6e61,\n                msg.sender, from, id, amount, data));\n                \n            bytes4 selector = abi.decode(returned, (bytes4));\n\n            if (selector != 0xf23a6e61) revert InvalidReceiver();\n        }\n    }\n\n    function _callonERC1155BatchReceived(\n        address from, \n        address to, \n        uint256[] memory ids,\n        uint256[] memory amounts, \n        uint256 gasLimit, \n        bytes memory data\n    ) internal view {\n        if (to.code.length != 0) {\n            // selector = `bytes4(keccak256('onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)'))`\n            (, bytes memory returned) = to.staticcall{gas: gasLimit}(abi.encodeWithSelector(0xbc197c81,\n                msg.sender, from, ids, amounts, data));\n                \n            bytes4 selector = abi.decode(returned, (bytes4));\n\n            if (selector != 0xbc197c81) revert InvalidReceiver();\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(\n        address to, \n        uint256 id, \n        uint256 amount, \n        bytes memory data\n    ) internal {\n        balanceOf[to][id] += amount;\n\n        if (to.code.length != 0) _callonERC1155Received(address(0), to, id, amount, gasleft(), data);\n\n        emit TransferSingle(msg.sender, address(0), to, id, amount);\n    }\n\n    function _batchMint(\n        address to, \n        uint256[] memory ids, \n        uint256[] memory amounts, \n        bytes memory data\n    ) internal {\n        if (ids.length != amounts.length) revert ArrayParity();\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            balanceOf[to][ids[i]] += amounts[i];\n        }\n\n        if (to.code.length != 0) _callonERC1155BatchReceived(address(0x0), to, ids, amounts, gasleft(), data);\n\n        emit TransferBatch(msg.sender, address(0), to, ids, amounts);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            URI LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _updateURI(string memory newURI) internal {\n        baseURI = newURI;\n    }\n}\n\n/// @title SantaSwapNFT\n/// @author Anish Agnihotri\n/// @notice Participation tickets for 2021 Santa Swap NFT Gift Exchange\ncontract SantaSwapNFT is ERC1155 {\n\n    /// ============ Immutable storage ============\n\n    /// @notice Maximum number of mintable NFTs (global)\n    uint256 immutable MAX_NFTS = 10_000;\n    /// @notice Maximum number of mintable NFTs (local, by address)\n    uint256 immutable MAX_NFTS_PER_ADDRESS = 10;\n\n    /// ============ Mutable storage ============\n\n    /// @notice Contract owner\n    address public owner;\n    /// @notice Number of NFTs minted\n    uint256 public nftsMinted = 0;\n\n    /// ============ Events ============\n\n    /// @notice Emitted after an NFT is minted\n    /// @param to new NFT owner\n    /// @param handleHash custom hashed Twitter handle of owner\n    /// @param amount number of NFTs minted\n    event NFTMinted(address indexed to, bytes32 handleHash, uint256 amount);\n\n    /// ============ Errors ============\n\n    /// @notice Thrown when not enough ETH provided to pay for NFT mint\n    error InsufficientPayment();\n\n    /// @notice Thrown when attempting to call owner functions as non-owner\n    error NotOwner();\n\n    /// @notice Thrown when max number of NFTs have or would be minted (total or by address)\n    error MaxMinted();\n\n    /// @notice Thrown when error in low-level call\n    error CallError();\n\n    /// ============ Constructor ============\n\n    /// @notice Creates a new SantaSwapNFT contract\n    /// @param baseURI of ERC-1155 compatible metadata \n    constructor(string memory baseURI) {\n        // Update owner to deployer\n        owner = msg.sender;\n        // Update URI\n        _updateURI(baseURI);\n    }\n\n    /// ============ Functions ============\n\n    /// @notice Mints a single NFT\n    /// @param handleHash custom hashed Twitter handle of owner\n    function mintSingle(bytes32 handleHash) external payable {\n        // Revert if not enough payment provided\n        if (msg.value < 0.03 ether) revert InsufficientPayment();\n        // Revert if maximum NFTs minted (address) after minting single\n        if (balanceOf[msg.sender][0] + 1 > MAX_NFTS_PER_ADDRESS) revert MaxMinted();\n        // Revert if maximum NFTs minted (global) after minting single\n        if (nftsMinted + 1 > MAX_NFTS) revert MaxMinted();\n\n        // Mint NFT\n        _mint(msg.sender, 0, 1, \"\");\n        // Increment number of mints\n        nftsMinted++;\n\n        // Emit NFTMinted event\n        emit NFTMinted(msg.sender, handleHash, 1);\n    }\n\n    /// @notice Mints many NFTs\n    /// @param handleHash custom hashed Twitter handle of owner\n    /// @param numToMint number of NFTs to mint in bulk\n    function mintBatch(bytes32 handleHash, uint256 numToMint) external payable {\n        // Revert if not enough payment provided\n        if (msg.value < (numToMint * 0.03 ether)) revert InsufficientPayment();\n        // Revert if maximum NFTs minted (address) after minting bulk\n        if (balanceOf[msg.sender][0] + numToMint > MAX_NFTS_PER_ADDRESS) revert MaxMinted();\n        // Revert if maximum NFTs minted (global) after minting bulk\n        if (nftsMinted + numToMint > MAX_NFTS) revert MaxMinted();\n\n        // Batch mint NFTs\n        uint256[] memory ids = new uint256[](1);\n        ids[0] = 0;\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = numToMint;\n        _batchMint(msg.sender, ids, amounts, \"\");\n        // Increment number of mints\n        nftsMinted += numToMint;\n\n        // Emit NFTMinted event\n        emit NFTMinted(msg.sender, handleHash, numToMint);\n    }\n\n    /// @notice Allows owner to withdraw balance of contract\n    function withdrawBalance() external {\n        // Revert if caller is not owner\n        if (msg.sender != owner) revert NotOwner();\n        // Drain balance\n        (bool sent,) = owner.call{value: address(this).balance}(\"\");\n        if (!sent) revert CallError();\n    }\n\n    /// @notice Allows owner to update owner of contract\n    function updateOwner(address newOwner) external {\n        // Revert if caller is not owner\n        if (msg.sender != owner) revert NotOwner();\n        // Update new owner\n        owner = newOwner;\n    }\n\n    /// @notice Allows owner to update contract URI\n    function updateURI(string memory newURI) external {\n        // Revert if caller is not owner\n        if (msg.sender != owner) revert NotOwner();\n        // Update new URI\n        _updateURI(newURI);\n    }\n\n    /// @notice Returns total supply of NFTs\n    /// @return Total supply\n    function totalSupply() public pure returns (uint256) {\n        return MAX_NFTS;\n    }\n}"}}}