{"language":"Solidity","settings":{"libraries":{"contracts/lev_comp_v3.sol":{"FlashMintLib":"0x8c2cc5ff69bc3760d7ce81812a2848421495972a"}},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/lev_comp_v3.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n// Global Enums and Structs\n\n\n\nstruct StrategyParams {\n    uint256 performanceFee;\n    uint256 activation;\n    uint256 debtRatio;\n    uint256 minDebtPerHarvest;\n    uint256 maxDebtPerHarvest;\n    uint256 lastReport;\n    uint256 totalDebt;\n    uint256 totalGain;\n    uint256 totalLoss;\n}\n\n// Part: IERC3156FlashBorrower\n\ninterface IERC3156FlashBorrower {\n\n    /**\n     * @dev Receive a flash loan.\n     * @param initiator The initiator of the loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param fee The additional amount of tokens to repay.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     * @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\n     */\n    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external returns (bytes32);\n}\n\n// Part: IUniswapAnchoredView\n\ninterface IUniswapAnchoredView {\n    function price(string memory) external returns (uint256);\n}\n\n// Part: IUniswapV2Router01\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n\n// Part: IUniswapV3SwapCallback\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n\n// Part: InterestRateModel\n\ninterface InterestRateModel {\n    /**\n     * @notice Calculates the current borrow interest rate per block\n     * @param cash The total amount of cash the market has\n     * @param borrows The total amount of borrows the market has outstanding\n     * @param reserves The total amount of reserves the market has\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\n     */\n    function getBorrowRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves\n    ) external view returns (uint256, uint256);\n\n    /**\n     * @notice Calculates the current supply interest rate per block\n     * @param cash The total amount of cash the market has\n     * @param borrows The total amount of borrows the market has outstanding\n     * @param reserves The total amount of reserves the market has\n     * @param reserveFactorMantissa The current reserve factor the market has\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\n     */\n    function getSupplyRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves,\n        uint256 reserveFactorMantissa\n    ) external view returns (uint256);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/Address\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/IERC20\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/Math\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/SafeMath\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Part: iearn-finance/yearn-vaults@0.4.3/HealthCheck\n\ninterface HealthCheck {\n    function check(\n        uint256 profit,\n        uint256 loss,\n        uint256 debtPayment,\n        uint256 debtOutstanding,\n        uint256 totalDebt\n    ) external view returns (bool);\n}\n\n// Part: CTokenI\n\ninterface CTokenI {\n    /*** Market Events ***/\n\n    /**\n     * @notice Event emitted when interest is accrued\n     */\n    event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\n\n    /**\n     * @notice Event emitted when tokens are minted\n     */\n    event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\n\n    /**\n     * @notice Event emitted when tokens are redeemed\n     */\n    event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\n\n    /**\n     * @notice Event emitted when underlying is borrowed\n     */\n    event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\n\n    /**\n     * @notice Event emitted when a borrow is repaid\n     */\n    event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows);\n\n    /**\n     * @notice Event emitted when a borrow is liquidated\n     */\n    event LiquidateBorrow(address liquidator, address borrower, uint256 repayAmount, address cTokenCollateral, uint256 seizeTokens);\n\n    /*** Admin Events ***/\n\n    /**\n     * @notice Event emitted when pendingAdmin is changed\n     */\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n    /**\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\n     */\n    event NewAdmin(address oldAdmin, address newAdmin);\n\n    /**\n     * @notice Event emitted when the reserve factor is changed\n     */\n    event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\n\n    /**\n     * @notice Event emitted when the reserves are added\n     */\n    event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\n\n    /**\n     * @notice Event emitted when the reserves are reduced\n     */\n    event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\n\n    /**\n     * @notice EIP20 Transfer event\n     */\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    /**\n     * @notice EIP20 Approval event\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /**\n     * @notice Failure event\n     */\n    event Failure(uint256 error, uint256 info, uint256 detail);\n\n    function transfer(address dst, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amount\n    ) external returns (bool);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function balanceOfUnderlying(address owner) external returns (uint256);\n\n    function getAccountSnapshot(address account)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function borrowRatePerBlock() external view returns (uint256);\n\n    function supplyRatePerBlock() external view returns (uint256);\n\n    function totalBorrowsCurrent() external returns (uint256);\n\n    function borrowBalanceCurrent(address account) external returns (uint256);\n\n    function borrowBalanceStored(address account) external view returns (uint256);\n\n    function exchangeRateCurrent() external returns (uint256);\n\n    function accrualBlockNumber() external view returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    function getCash() external view returns (uint256);\n\n    function accrueInterest() external returns (uint256);\n\n    function interestRateModel() external view returns (InterestRateModel);\n\n    function totalReserves() external view returns (uint256);\n\n    function reserveFactorMantissa() external view returns (uint256);\n\n    function seize(\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external returns (uint256);\n\n    function totalBorrows() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n}\n\n// Part: IERC20Extended\n\ninterface IERC20Extended is IERC20 {\n    function decimals() external view returns (uint8);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n}\n\n// Part: IERC3156FlashLender\n\ninterface IERC3156FlashLender {\n\n    /**\n     * @dev The amount of currency available to be lent.\n     * @param token The loan currency.\n     * @return The amount of `token` that can be borrowed.\n     */\n    function maxFlashLoan(\n        address token\n    ) external view returns (uint256);\n\n    /**\n     * @dev The fee to be charged for a given loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\n     */\n    function flashFee(\n        address token,\n        uint256 amount\n    ) external view returns (uint256);\n\n    /**\n     * @dev Initiate a flash loan.\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     */\n    function flashLoan(\n        IERC3156FlashBorrower receiver,\n        address token,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}\n\n// Part: IUniswapV2Router02\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\n// Part: IUniswapV3Router\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface IUniswapV3Router is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params)\n        external\n        payable\n        returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params)\n        external\n        payable\n        returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\n        external\n        payable\n        returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params)\n        external\n        payable\n        returns (uint256 amountIn);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/SafeERC20\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// Part: iearn-finance/yearn-vaults@0.4.3/VaultAPI\n\ninterface VaultAPI is IERC20 {\n    function name() external view returns (string calldata);\n\n    function symbol() external view returns (string calldata);\n\n    function decimals() external view returns (uint256);\n\n    function apiVersion() external pure returns (string memory);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 expiry,\n        bytes calldata signature\n    ) external returns (bool);\n\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\n    function deposit() external returns (uint256);\n\n    function deposit(uint256 amount) external returns (uint256);\n\n    function deposit(uint256 amount, address recipient) external returns (uint256);\n\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\n    function withdraw() external returns (uint256);\n\n    function withdraw(uint256 maxShares) external returns (uint256);\n\n    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\n\n    function token() external view returns (address);\n\n    function strategies(address _strategy) external view returns (StrategyParams memory);\n\n    function pricePerShare() external view returns (uint256);\n\n    function totalAssets() external view returns (uint256);\n\n    function depositLimit() external view returns (uint256);\n\n    function maxAvailableShares() external view returns (uint256);\n\n    /**\n     * View how much the Vault would increase this Strategy's borrow limit,\n     * based on its present performance (since its last report). Can be used to\n     * determine expectedReturn in your Strategy.\n     */\n    function creditAvailable() external view returns (uint256);\n\n    /**\n     * View how much the Vault would like to pull back from the Strategy,\n     * based on its present performance (since its last report). Can be used to\n     * determine expectedReturn in your Strategy.\n     */\n    function debtOutstanding() external view returns (uint256);\n\n    /**\n     * View how much the Vault expect this Strategy to return at the current\n     * block, based on its present performance (since its last report). Can be\n     * used to determine expectedReturn in your Strategy.\n     */\n    function expectedReturn() external view returns (uint256);\n\n    /**\n     * This is the main contact point where the Strategy interacts with the\n     * Vault. It is critical that this call is handled as intended by the\n     * Strategy. Therefore, this function will be called by BaseStrategy to\n     * make sure the integration is correct.\n     */\n    function report(\n        uint256 _gain,\n        uint256 _loss,\n        uint256 _debtPayment\n    ) external returns (uint256);\n\n    /**\n     * This function should only be used in the scenario where the Strategy is\n     * being retired but no migration of the positions are possible, or in the\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\n     * mode in order for it to exit as quickly as possible. The latter scenario\n     * could be for any reason that is considered \"critical\" that the Strategy\n     * exits its position as fast as possible, such as a sudden change in\n     * market conditions leading to losses, or an imminent failure in an\n     * external dependency.\n     */\n    function revokeStrategy() external;\n\n    /**\n     * View the governance address of the Vault to assert privileged functions\n     * can only be called by governance. The Strategy serves the Vault, so it\n     * is subject to governance defined by the Vault.\n     */\n    function governance() external view returns (address);\n\n    /**\n     * View the management address of the Vault to assert privileged functions\n     * can only be called by management. The Strategy serves the Vault, so it\n     * is subject to management defined by the Vault.\n     */\n    function management() external view returns (address);\n\n    /**\n     * View the guardian address of the Vault to assert privileged functions\n     * can only be called by guardian. The Strategy serves the Vault, so it\n     * is subject to guardian defined by the Vault.\n     */\n    function guardian() external view returns (address);\n}\n\n// Part: CErc20I\n\ninterface CErc20I is CTokenI {\n    function mint(uint256 mintAmount) external returns (uint256);\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function borrow(uint256 borrowAmount) external returns (uint256);\n\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\n\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\n\n    function liquidateBorrow(\n        address borrower,\n        uint256 repayAmount,\n        CTokenI cTokenCollateral\n    ) external returns (uint256);\n\n    function underlying() external view returns (address);\n}\n\n// Part: ComptrollerI\n\ninterface ComptrollerI {\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\n\n    function exitMarket(address cToken) external returns (uint256);\n\n    /*** Policy Hooks ***/\n\n    function mintAllowed(\n        address cToken,\n        address minter,\n        uint256 mintAmount\n    ) external returns (uint256);\n\n    function mintVerify(\n        address cToken,\n        address minter,\n        uint256 mintAmount,\n        uint256 mintTokens\n    ) external;\n\n    function redeemAllowed(\n        address cToken,\n        address redeemer,\n        uint256 redeemTokens\n    ) external returns (uint256);\n\n    function redeemVerify(\n        address cToken,\n        address redeemer,\n        uint256 redeemAmount,\n        uint256 redeemTokens\n    ) external;\n\n    function borrowAllowed(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external returns (uint256);\n\n    function borrowVerify(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external;\n\n    function repayBorrowAllowed(\n        address cToken,\n        address payer,\n        address borrower,\n        uint256 repayAmount\n    ) external returns (uint256);\n\n    function repayBorrowVerify(\n        address cToken,\n        address payer,\n        address borrower,\n        uint256 repayAmount,\n        uint256 borrowerIndex\n    ) external;\n\n    function liquidateBorrowAllowed(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 repayAmount\n    ) external returns (uint256);\n\n    function liquidateBorrowVerify(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 repayAmount,\n        uint256 seizeTokens\n    ) external;\n\n    function seizeAllowed(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external returns (uint256);\n\n    function seizeVerify(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external;\n\n    function transferAllowed(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external returns (uint256);\n\n    function transferVerify(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external;\n\n    /*** Liquidity/Liquidation Calculations ***/\n\n    function liquidateCalculateSeizeTokens(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        uint256 repayAmount\n    ) external view returns (uint256, uint256);\n\n    function getAccountLiquidity(address account)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    /***  Comp claims ****/\n    function claimComp(address holder) external;\n\n    function claimComp(address holder, CTokenI[] memory cTokens) external;\n\n    function markets(address ctoken)\n        external\n        view\n        returns (\n            bool,\n            uint256,\n            bool\n        );\n\n    function compSpeeds(address ctoken) external view returns (uint256); // will be deprecated\n    function compSupplySpeeds(address ctoken) external view returns (uint256);\n    function compBorrowSpeeds(address ctoken) external view returns (uint256);\n\n    function oracle() external view returns (address);\n}\n\n// Part: iearn-finance/yearn-vaults@0.4.3/BaseStrategy\n\n/**\n * @title Yearn Base Strategy\n * @author yearn.finance\n * @notice\n *  BaseStrategy implements all of the required functionality to interoperate\n *  closely with the Vault contract. This contract should be inherited and the\n *  abstract methods implemented to adapt the Strategy to the particular needs\n *  it has to create a return.\n *\n *  Of special interest is the relationship between `harvest()` and\n *  `vault.report()'. `harvest()` may be called simply because enough time has\n *  elapsed since the last report, and not because any funds need to be moved\n *  or positions adjusted. This is critical so that the Vault may maintain an\n *  accurate picture of the Strategy's performance. See  `vault.report()`,\n *  `harvest()`, and `harvestTrigger()` for further details.\n */\n\nabstract contract BaseStrategy {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    string public metadataURI;\n\n    // health checks\n    bool public doHealthCheck;\n    address public healthCheck;\n\n    /**\n     * @notice\n     *  Used to track which version of `StrategyAPI` this Strategy\n     *  implements.\n     * @dev The Strategy's version must match the Vault's `API_VERSION`.\n     * @return A string which holds the current API version of this contract.\n     */\n    function apiVersion() public pure returns (string memory) {\n        return \"0.4.3\";\n    }\n\n    /**\n     * @notice This Strategy's name.\n     * @dev\n     *  You can use this field to manage the \"version\" of this Strategy, e.g.\n     *  `StrategySomethingOrOtherV1`. However, \"API Version\" is managed by\n     *  `apiVersion()` function above.\n     * @return This Strategy's name.\n     */\n    function name() external view virtual returns (string memory);\n\n    /**\n     * @notice\n     *  The amount (priced in want) of the total assets managed by this strategy should not count\n     *  towards Yearn's TVL calculations.\n     * @dev\n     *  You can override this field to set it to a non-zero value if some of the assets of this\n     *  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.\n     *  Note that this value must be strictly less than or equal to the amount provided by\n     *  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.\n     *  Also note that this value is used to determine the total assets under management by this\n     *  strategy, for the purposes of computing the management fee in `Vault`\n     * @return\n     *  The amount of assets this strategy manages that should not be included in Yearn's Total Value\n     *  Locked (TVL) calculation across it's ecosystem.\n     */\n    function delegatedAssets() external view virtual returns (uint256) {\n        return 0;\n    }\n\n    VaultAPI public vault;\n    address public strategist;\n    address public rewards;\n    address public keeper;\n\n    IERC20 public want;\n\n    // So indexers can keep track of this\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\n\n    event UpdatedStrategist(address newStrategist);\n\n    event UpdatedKeeper(address newKeeper);\n\n    event UpdatedRewards(address rewards);\n\n    event UpdatedMinReportDelay(uint256 delay);\n\n    event UpdatedMaxReportDelay(uint256 delay);\n\n    event UpdatedProfitFactor(uint256 profitFactor);\n\n    event UpdatedDebtThreshold(uint256 debtThreshold);\n\n    event EmergencyExitEnabled();\n\n    event UpdatedMetadataURI(string metadataURI);\n\n    // The minimum number of seconds between harvest calls. See\n    // `setMinReportDelay()` for more details.\n    uint256 public minReportDelay;\n\n    // The maximum number of seconds between harvest calls. See\n    // `setMaxReportDelay()` for more details.\n    uint256 public maxReportDelay;\n\n    // The minimum multiple that `callCost` must be above the credit/profit to\n    // be \"justifiable\". See `setProfitFactor()` for more details.\n    uint256 public profitFactor;\n\n    // Use this to adjust the threshold at which running a debt causes a\n    // harvest trigger. See `setDebtThreshold()` for more details.\n    uint256 public debtThreshold;\n\n    // See note on `setEmergencyExit()`.\n    bool public emergencyExit;\n\n    // modifiers\n    modifier onlyAuthorized() {\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\n        _;\n    }\n\n    modifier onlyEmergencyAuthorized() {\n        require(\n            msg.sender == strategist || msg.sender == governance() || msg.sender == vault.guardian() || msg.sender == vault.management(),\n            \"!authorized\"\n        );\n        _;\n    }\n\n    modifier onlyStrategist() {\n        require(msg.sender == strategist, \"!strategist\");\n        _;\n    }\n\n    modifier onlyGovernance() {\n        require(msg.sender == governance(), \"!authorized\");\n        _;\n    }\n\n    modifier onlyKeepers() {\n        require(\n            msg.sender == keeper ||\n                msg.sender == strategist ||\n                msg.sender == governance() ||\n                msg.sender == vault.guardian() ||\n                msg.sender == vault.management(),\n            \"!authorized\"\n        );\n        _;\n    }\n\n    modifier onlyVaultManagers() {\n        require(msg.sender == vault.management() || msg.sender == governance(), \"!authorized\");\n        _;\n    }\n\n    constructor(address _vault) public {\n        _initialize(_vault, msg.sender, msg.sender, msg.sender);\n    }\n\n    /**\n     * @notice\n     *  Initializes the Strategy, this is called only once, when the\n     *  contract is deployed.\n     * @dev `_vault` should implement `VaultAPI`.\n     * @param _vault The address of the Vault responsible for this Strategy.\n     * @param _strategist The address to assign as `strategist`.\n     * The strategist is able to change the reward address\n     * @param _rewards  The address to use for pulling rewards.\n     * @param _keeper The adddress of the _keeper. _keeper\n     * can harvest and tend a strategy.\n     */\n    function _initialize(\n        address _vault,\n        address _strategist,\n        address _rewards,\n        address _keeper\n    ) internal {\n        require(address(want) == address(0), \"Strategy already initialized\");\n\n        vault = VaultAPI(_vault);\n        want = IERC20(vault.token());\n        want.safeApprove(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\n        strategist = _strategist;\n        rewards = _rewards;\n        keeper = _keeper;\n\n        // initialize variables\n        minReportDelay = 0;\n        maxReportDelay = 86400;\n        profitFactor = 100;\n        debtThreshold = 0;\n\n        vault.approve(rewards, uint256(-1)); // Allow rewards to be pulled\n    }\n\n    function setHealthCheck(address _healthCheck) external onlyVaultManagers {\n        healthCheck = _healthCheck;\n    }\n\n    function setDoHealthCheck(bool _doHealthCheck) external onlyVaultManagers {\n        doHealthCheck = _doHealthCheck;\n    }\n\n    /**\n     * @notice\n     *  Used to change `strategist`.\n     *\n     *  This may only be called by governance or the existing strategist.\n     * @param _strategist The new address to assign as `strategist`.\n     */\n    function setStrategist(address _strategist) external onlyAuthorized {\n        require(_strategist != address(0));\n        strategist = _strategist;\n        emit UpdatedStrategist(_strategist);\n    }\n\n    /**\n     * @notice\n     *  Used to change `keeper`.\n     *\n     *  `keeper` is the only address that may call `tend()` or `harvest()`,\n     *  other than `governance()` or `strategist`. However, unlike\n     *  `governance()` or `strategist`, `keeper` may *only* call `tend()`\n     *  and `harvest()`, and no other authorized functions, following the\n     *  principle of least privilege.\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _keeper The new address to assign as `keeper`.\n     */\n    function setKeeper(address _keeper) external onlyAuthorized {\n        require(_keeper != address(0));\n        keeper = _keeper;\n        emit UpdatedKeeper(_keeper);\n    }\n\n    /**\n     * @notice\n     *  Used to change `rewards`. EOA or smart contract which has the permission\n     *  to pull rewards from the vault.\n     *\n     *  This may only be called by the strategist.\n     * @param _rewards The address to use for pulling rewards.\n     */\n    function setRewards(address _rewards) external onlyStrategist {\n        require(_rewards != address(0));\n        vault.approve(rewards, 0);\n        rewards = _rewards;\n        vault.approve(rewards, uint256(-1));\n        emit UpdatedRewards(_rewards);\n    }\n\n    /**\n     * @notice\n     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\n     *  of blocks that should pass for `harvest()` to be called.\n     *\n     *  For external keepers (such as the Keep3r network), this is the minimum\n     *  time between jobs to wait. (see `harvestTrigger()`\n     *  for more details.)\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _delay The minimum number of seconds to wait between harvests.\n     */\n    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\n        minReportDelay = _delay;\n        emit UpdatedMinReportDelay(_delay);\n    }\n\n    /**\n     * @notice\n     *  Used to change `maxReportDelay`. `maxReportDelay` is the maximum number\n     *  of blocks that should pass for `harvest()` to be called.\n     *\n     *  For external keepers (such as the Keep3r network), this is the maximum\n     *  time between jobs to wait. (see `harvestTrigger()`\n     *  for more details.)\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _delay The maximum number of seconds to wait between harvests.\n     */\n    function setMaxReportDelay(uint256 _delay) external onlyAuthorized {\n        maxReportDelay = _delay;\n        emit UpdatedMaxReportDelay(_delay);\n    }\n\n    /**\n     * @notice\n     *  Used to change `profitFactor`. `profitFactor` is used to determine\n     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\n     *  for more details.)\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _profitFactor A ratio to multiply anticipated\n     * `harvest()` gas cost against.\n     */\n    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\n        profitFactor = _profitFactor;\n        emit UpdatedProfitFactor(_profitFactor);\n    }\n\n    /**\n     * @notice\n     *  Sets how far the Strategy can go into loss without a harvest and report\n     *  being required.\n     *\n     *  By default this is 0, meaning any losses would cause a harvest which\n     *  will subsequently report the loss to the Vault for tracking. (See\n     *  `harvestTrigger()` for more details.)\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _debtThreshold How big of a loss this Strategy may carry without\n     * being required to report to the Vault.\n     */\n    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\n        debtThreshold = _debtThreshold;\n        emit UpdatedDebtThreshold(_debtThreshold);\n    }\n\n    /**\n     * @notice\n     *  Used to change `metadataURI`. `metadataURI` is used to store the URI\n     * of the file describing the strategy.\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _metadataURI The URI that describe the strategy.\n     */\n    function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {\n        metadataURI = _metadataURI;\n        emit UpdatedMetadataURI(_metadataURI);\n    }\n\n    /**\n     * Resolve governance address from Vault contract, used to make assertions\n     * on protected functions in the Strategy.\n     */\n    function governance() internal view returns (address) {\n        return vault.governance();\n    }\n\n    /**\n     * @notice\n     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)\n     *  to `want` (using the native decimal characteristics of `want`).\n     * @dev\n     *  Care must be taken when working with decimals to assure that the conversion\n     *  is compatible. As an example:\n     *\n     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),\n     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)\n     *\n     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`\n     * @return The amount in `want` of `_amtInEth` converted to `want`\n     **/\n    function ethToWant(uint256 _amtInWei) public view virtual returns (uint256);\n\n    /**\n     * @notice\n     *  Provide an accurate estimate for the total amount of assets\n     *  (principle + return) that this Strategy is currently managing,\n     *  denominated in terms of `want` tokens.\n     *\n     *  This total should be \"realizable\" e.g. the total value that could\n     *  *actually* be obtained from this Strategy if it were to divest its\n     *  entire position based on current on-chain conditions.\n     * @dev\n     *  Care must be taken in using this function, since it relies on external\n     *  systems, which could be manipulated by the attacker to give an inflated\n     *  (or reduced) value produced by this function, based on current on-chain\n     *  conditions (e.g. this function is possible to influence through\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\n     *  mechanisms).\n     *\n     *  It is up to governance to use this function to correctly order this\n     *  Strategy relative to its peers in the withdrawal queue to minimize\n     *  losses for the Vault based on sudden withdrawals. This value should be\n     *  higher than the total debt of the Strategy and higher than its expected\n     *  value to be \"safe\".\n     * @return The estimated total assets in this Strategy.\n     */\n    function estimatedTotalAssets() public view virtual returns (uint256);\n\n    /*\n     * @notice\n     *  Provide an indication of whether this strategy is currently \"active\"\n     *  in that it is managing an active position, or will manage a position in\n     *  the future. This should correlate to `harvest()` activity, so that Harvest\n     *  events can be tracked externally by indexing agents.\n     * @return True if the strategy is actively managing a position.\n     */\n    function isActive() public view returns (bool) {\n        return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;\n    }\n\n    /**\n     * Perform any Strategy unwinding or other calls necessary to capture the\n     * \"free return\" this Strategy has generated since the last time its core\n     * position(s) were adjusted. Examples include unwrapping extra rewards.\n     * This call is only used during \"normal operation\" of a Strategy, and\n     * should be optimized to minimize losses as much as possible.\n     *\n     * This method returns any realized profits and/or realized losses\n     * incurred, and should return the total amounts of profits/losses/debt\n     * payments (in `want` tokens) for the Vault's accounting (e.g.\n     * `want.balanceOf(this) >= _debtPayment + _profit`).\n     *\n     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\n     * debt limit, otherwise its value will be how far past the debt limit\n     * the Strategy is. The Strategy's debt limit is configured in the Vault.\n     *\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\n     *       It is okay for it to be less than `_debtOutstanding`, as that\n     *       should only used as a guide for how much is left to pay back.\n     *       Payments should be made to minimize loss from slippage, debt,\n     *       withdrawal fees, etc.\n     *\n     * See `vault.debtOutstanding()`.\n     */\n    function prepareReturn(uint256 _debtOutstanding)\n        internal\n        virtual\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _debtPayment\n        );\n\n    /**\n     * Perform any adjustments to the core position(s) of this Strategy given\n     * what change the Vault made in the \"investable capital\" available to the\n     * Strategy. Note that all \"free capital\" in the Strategy after the report\n     * was made is available for reinvestment. Also note that this number\n     * could be 0, and you should handle that scenario accordingly.\n     *\n     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\n     */\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\n\n    /**\n     * Liquidate up to `_amountNeeded` of `want` of this strategy's positions,\n     * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.\n     * This function should return the amount of `want` tokens made available by the\n     * liquidation. If there is a difference between them, `_loss` indicates whether the\n     * difference is due to a realized loss, or if there is some other sitution at play\n     * (e.g. locked funds) where the amount made available is less than what is needed.\n     *\n     * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\n     */\n    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _liquidatedAmount, uint256 _loss);\n\n    /**\n     * Liquidate everything and returns the amount that got freed.\n     * This function is used during emergency exit instead of `prepareReturn()` to\n     * liquidate all of the Strategy's positions back to the Vault.\n     */\n\n    function liquidateAllPositions() internal virtual returns (uint256 _amountFreed);\n\n    /**\n     * @notice\n     *  Provide a signal to the keeper that `tend()` should be called. The\n     *  keeper will provide the estimated gas cost that they would pay to call\n     *  `tend()`, and this function should use that estimate to make a\n     *  determination if calling it is \"worth it\" for the keeper. This is not\n     *  the only consideration into issuing this trigger, for example if the\n     *  position would be negatively affected if `tend()` is not called\n     *  shortly, then this can return `true` even if the keeper might be\n     *  \"at a loss\" (keepers are always reimbursed by Yearn).\n     * @dev\n     *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).\n     *\n     *  This call and `harvestTrigger()` should never return `true` at the same\n     *  time.\n     * @param callCostInWei The keeper's estimated gas cost to call `tend()` (in wei).\n     * @return `true` if `tend()` should be called, `false` otherwise.\n     */\n    function tendTrigger(uint256 callCostInWei) public view virtual returns (bool) {\n        // We usually don't need tend, but if there are positions that need\n        // active maintainence, overriding this function is how you would\n        // signal for that.\n        // If your implementation uses the cost of the call in want, you can\n        // use uint256 callCost = ethToWant(callCostInWei);\n\n        return false;\n    }\n\n    /**\n     * @notice\n     *  Adjust the Strategy's position. The purpose of tending isn't to\n     *  realize gains, but to maximize yield by reinvesting any returns.\n     *\n     *  See comments on `adjustPosition()`.\n     *\n     *  This may only be called by governance, the strategist, or the keeper.\n     */\n    function tend() external onlyKeepers {\n        // Don't take profits with this call, but adjust for better gains\n        adjustPosition(vault.debtOutstanding());\n    }\n\n    /**\n     * @notice\n     *  Provide a signal to the keeper that `harvest()` should be called. The\n     *  keeper will provide the estimated gas cost that they would pay to call\n     *  `harvest()`, and this function should use that estimate to make a\n     *  determination if calling it is \"worth it\" for the keeper. This is not\n     *  the only consideration into issuing this trigger, for example if the\n     *  position would be negatively affected if `harvest()` is not called\n     *  shortly, then this can return `true` even if the keeper might be \"at a\n     *  loss\" (keepers are always reimbursed by Yearn).\n     * @dev\n     *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).\n     *\n     *  This call and `tendTrigger` should never return `true` at the\n     *  same time.\n     *\n     *  See `min/maxReportDelay`, `profitFactor`, `debtThreshold` to adjust the\n     *  strategist-controlled parameters that will influence whether this call\n     *  returns `true` or not. These parameters will be used in conjunction\n     *  with the parameters reported to the Vault (see `params`) to determine\n     *  if calling `harvest()` is merited.\n     *\n     *  It is expected that an external system will check `harvestTrigger()`.\n     *  This could be a script run off a desktop or cloud bot (e.g.\n     *  https://github.com/iearn-finance/yearn-vaults/blob/main/scripts/keep.py),\n     *  or via an integration with the Keep3r network (e.g.\n     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\n     * @param callCostInWei The keeper's estimated gas cost to call `harvest()` (in wei).\n     * @return `true` if `harvest()` should be called, `false` otherwise.\n     */\n    function harvestTrigger(uint256 callCostInWei) public view virtual returns (bool) {\n        uint256 callCost = ethToWant(callCostInWei);\n        StrategyParams memory params = vault.strategies(address(this));\n\n        // Should not trigger if Strategy is not activated\n        if (params.activation == 0) return false;\n\n        // Should not trigger if we haven't waited long enough since previous harvest\n        if (block.timestamp.sub(params.lastReport) < minReportDelay) return false;\n\n        // Should trigger if hasn't been called in a while\n        if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;\n\n        // If some amount is owed, pay it back\n        // NOTE: Since debt is based on deposits, it makes sense to guard against large\n        //       changes to the value from triggering a harvest directly through user\n        //       behavior. This should ensure reasonable resistance to manipulation\n        //       from user-initiated withdrawals as the outstanding debt fluctuates.\n        uint256 outstanding = vault.debtOutstanding();\n        if (outstanding > debtThreshold) return true;\n\n        // Check for profits and losses\n        uint256 total = estimatedTotalAssets();\n        // Trigger if we have a loss to report\n        if (total.add(debtThreshold) < params.totalDebt) return true;\n\n        uint256 profit = 0;\n        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\n\n        // Otherwise, only trigger if it \"makes sense\" economically (gas cost\n        // is <N% of value moved)\n        uint256 credit = vault.creditAvailable();\n        return (profitFactor.mul(callCost) < credit.add(profit));\n    }\n\n    /**\n     * @notice\n     *  Harvests the Strategy, recognizing any profits or losses and adjusting\n     *  the Strategy's position.\n     *\n     *  In the rare case the Strategy is in emergency shutdown, this will exit\n     *  the Strategy's position.\n     *\n     *  This may only be called by governance, the strategist, or the keeper.\n     * @dev\n     *  When `harvest()` is called, the Strategy reports to the Vault (via\n     *  `vault.report()`), so in some cases `harvest()` must be called in order\n     *  to take in profits, to borrow newly available funds from the Vault, or\n     *  otherwise adjust its position. In other cases `harvest()` must be\n     *  called to report to the Vault on the Strategy's position, especially if\n     *  any losses have occurred.\n     */\n    function harvest() external onlyKeepers {\n        uint256 profit = 0;\n        uint256 loss = 0;\n        uint256 debtOutstanding = vault.debtOutstanding();\n        uint256 debtPayment = 0;\n        if (emergencyExit) {\n            // Free up as much capital as possible\n            uint256 amountFreed = liquidateAllPositions();\n            if (amountFreed < debtOutstanding) {\n                loss = debtOutstanding.sub(amountFreed);\n            } else if (amountFreed > debtOutstanding) {\n                profit = amountFreed.sub(debtOutstanding);\n            }\n            debtPayment = debtOutstanding.sub(loss);\n        } else {\n            // Free up returns for Vault to pull\n            (profit, loss, debtPayment) = prepareReturn(debtOutstanding);\n        }\n\n        // Allow Vault to take up to the \"harvested\" balance of this contract,\n        // which is the amount it has earned since the last time it reported to\n        // the Vault.\n        uint256 totalDebt = vault.strategies(address(this)).totalDebt;\n        debtOutstanding = vault.report(profit, loss, debtPayment);\n\n        // Check if free returns are left, and re-invest them\n        adjustPosition(debtOutstanding);\n\n        // call healthCheck contract\n        if (doHealthCheck && healthCheck != address(0)) {\n            require(HealthCheck(healthCheck).check(profit, loss, debtPayment, debtOutstanding, totalDebt), \"!healthcheck\");\n        } else {\n            doHealthCheck = true;\n        }\n\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\n    }\n\n    /**\n     * @notice\n     *  Withdraws `_amountNeeded` to `vault`.\n     *\n     *  This may only be called by the Vault.\n     * @param _amountNeeded How much `want` to withdraw.\n     * @return _loss Any realized losses\n     */\n    function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {\n        require(msg.sender == address(vault), \"!vault\");\n        // Liquidate as much as possible to `want`, up to `_amountNeeded`\n        uint256 amountFreed;\n        (amountFreed, _loss) = liquidatePosition(_amountNeeded);\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\n        want.safeTransfer(msg.sender, amountFreed);\n        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\n    }\n\n    /**\n     * Do anything necessary to prepare this Strategy for migration, such as\n     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\n     * value.\n     */\n    function prepareMigration(address _newStrategy) internal virtual;\n\n    /**\n     * @notice\n     *  Transfers all `want` from this Strategy to `_newStrategy`.\n     *\n     *  This may only be called by the Vault.\n     * @dev\n     * The new Strategy's Vault must be the same as this Strategy's Vault.\n     *  The migration process should be carefully performed to make sure all\n     * the assets are migrated to the new address, which should have never\n     * interacted with the vault before.\n     * @param _newStrategy The Strategy to migrate to.\n     */\n    function migrate(address _newStrategy) external {\n        require(msg.sender == address(vault));\n        require(BaseStrategy(_newStrategy).vault() == vault);\n        prepareMigration(_newStrategy);\n        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice\n     *  Activates emergency exit. Once activated, the Strategy will exit its\n     *  position upon the next harvest, depositing all funds into the Vault as\n     *  quickly as is reasonable given on-chain conditions.\n     *\n     *  This may only be called by governance or the strategist.\n     * @dev\n     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\n     */\n    function setEmergencyExit() external onlyEmergencyAuthorized {\n        emergencyExit = true;\n        vault.revokeStrategy();\n\n        emit EmergencyExitEnabled();\n    }\n\n    /**\n     * Override this to add all tokens/tokenized positions this contract\n     * manages on a *persistent* basis (e.g. not just for swapping back to\n     * want ephemerally).\n     *\n     * NOTE: Do *not* include `want`, already included in `sweep` below.\n     *\n     * Example:\n     * ```\n     *    function protectedTokens() internal override view returns (address[] memory) {\n     *      address[] memory protected = new address[](3);\n     *      protected[0] = tokenA;\n     *      protected[1] = tokenB;\n     *      protected[2] = tokenC;\n     *      return protected;\n     *    }\n     * ```\n     */\n    function protectedTokens() internal view virtual returns (address[] memory);\n\n    /**\n     * @notice\n     *  Removes tokens from this Strategy that are not the type of tokens\n     *  managed by this Strategy. This may be used in case of accidentally\n     *  sending the wrong kind of token to this Strategy.\n     *\n     *  Tokens will be sent to `governance()`.\n     *\n     *  This will fail if an attempt is made to sweep `want`, or any tokens\n     *  that are protected by this Strategy.\n     *\n     *  This may only be called by governance.\n     * @dev\n     *  Implement `protectedTokens()` to specify any additional tokens that\n     *  should be protected from sweeping in addition to `want`.\n     * @param _token The token to transfer out of this vault.\n     */\n    function sweep(address _token) external onlyGovernance {\n        require(_token != address(want), \"!want\");\n        require(_token != address(vault), \"!shares\");\n\n        address[] memory _protectedTokens = protectedTokens();\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \"!protected\");\n\n        IERC20(_token).safeTransfer(governance(), IERC20(_token).balanceOf(address(this)));\n    }\n}\n\n// Part: FlashMintLib\n\nlibrary FlashMintLib {\n    using SafeMath for uint256;\n    event Leverage(uint256 amountRequested, uint256 requiredDAI, bool deficit, address flashLoan);\n\n    uint256 private constant PRICE_DECIMALS = 1e6;\n    uint256 private constant DAI_DECIMALS = 1e18;\n    uint256 private constant COLLAT_DECIMALS = 1e18;\n    address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address public constant CDAI = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address private constant WBTC = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\n    ComptrollerI private constant COMPTROLLER = ComptrollerI(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\n    address public constant LENDER = 0x1EB4CF3A948E7D72A198fe073cCb8C7a948cD853;\n    bytes32 public constant CALLBACK_SUCCESS = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\n    function doFlashMint(\n        bool deficit,\n        uint256 amountDesired,\n        address want,\n        uint256 collatRatioDAI\n    ) public returns (uint256) {\n        if (amountDesired == 0) {\n            return 0;\n        }\n\n        // calculate amount of DAI we need\n        (uint256 requiredDAI, uint256 amountWant) = getFlashLoanParams(want, amountDesired, collatRatioDAI);\n\n        bytes memory data = abi.encode(deficit, amountWant);\n        uint256 _fee = IERC3156FlashLender(LENDER).flashFee(DAI, amountWant);\n        // Check that fees have not been increased without us knowing\n        require(_fee == 0);\n        uint256 _allowance = IERC20(DAI).allowance(address(this), address(LENDER));\n        if (_allowance < requiredDAI) {\n            IERC20(DAI).approve(address(LENDER), 0);\n            IERC20(DAI).approve(address(LENDER), type(uint256).max);\n        }\n        IERC3156FlashLender(LENDER).flashLoan(IERC3156FlashBorrower(address(this)), DAI, requiredDAI, data);\n\n        emit Leverage(amountDesired, requiredDAI, deficit, address(LENDER));\n\n        return amountWant;\n    }\n\n    function maxLiquidity() public view returns (uint256) {\n        return IERC3156FlashLender(LENDER).maxFlashLoan(DAI);\n    }\n\n    function getFlashLoanParams(\n        address want,\n        uint256 amountDesired,\n        uint256 collatRatioDAI\n    ) internal returns (uint256 requiredDAI, uint256 amountWant) {\n        uint256 priceDAIWant;\n        uint256 decimalsDifference;\n        (priceDAIWant, decimalsDifference, requiredDAI) = getPriceDAIWant(want, amountDesired, collatRatioDAI);\n        amountWant = amountDesired;\n\n        // If the cap for flashminting is reduced, we may hit maximum. To avoid reverts in that case we handle the edge case\n        uint256 _maxFlashLoan = maxLiquidity();\n        if (requiredDAI > _maxFlashLoan) {\n            requiredDAI = _maxFlashLoan.mul(9800).div(10_000); // use 98% of total liquidity available\n            if (address(want) == address(DAI)) {\n                amountWant = requiredDAI;\n            } else {\n                amountWant = requiredDAI.mul(collatRatioDAI).mul(PRICE_DECIMALS).div(priceDAIWant).div(COLLAT_DECIMALS).div(decimalsDifference);\n            }\n        }\n    }\n\n    function getPriceDAIWant(\n        address want,\n        uint256 amountDesired,\n        uint256 collatRatioDAI\n    )\n        internal\n        returns (\n            uint256 priceDAIWant,\n            uint256 decimalsDifference,\n            uint256 requiredDAI\n        )\n    {\n        if (want == DAI) {\n            requiredDAI = amountDesired;\n            priceDAIWant = PRICE_DECIMALS; // 1:1\n            decimalsDifference = 1; // 10 ** 0\n        } else {\n            // NOTE: want decimals need to be <= 18. otherwise this will break\n            uint256 wantDecimals = 10**uint256(IERC20Extended(want).decimals());\n            decimalsDifference = DAI_DECIMALS.div(wantDecimals);\n            priceDAIWant = getOraclePrice(DAI).mul(PRICE_DECIMALS).div(getOraclePrice(want));\n            // requiredDAI = desiredWantInDAI / COLLAT_RATIO_DAI\n            // desiredWantInDAI = (desiredWant / priceDAIWant)\n            // NOTE: decimals need adjustment (e.g. BTC: 8 / ETH: 18)\n            requiredDAI = amountDesired.mul(PRICE_DECIMALS).mul(COLLAT_DECIMALS).mul(decimalsDifference).div(priceDAIWant).div(collatRatioDAI);\n        }\n    }\n\n    function getOraclePrice(address token) internal returns (uint256) {\n        string memory symbol;\n        // Symbol for WBTC is BTC in oracle\n        if (token == WBTC) {\n            symbol = \"BTC\";\n        } else if (token == WETH) {\n            symbol = \"ETH\";\n        } else {\n            symbol = IERC20Extended(token).symbol();\n        }\n        IUniswapAnchoredView oracle = IUniswapAnchoredView(COMPTROLLER.oracle());\n        return oracle.price(symbol);\n    }\n\n    function loanLogic(\n        bool deficit,\n        uint256 amountDAI,\n        uint256 amount,\n        CErc20I cToken\n    ) public returns (bytes32) {\n        // if want is not DAI, we provide flashminted DAI to borrow want and be able to lever up/down\n        // if want is DAI, we use it directly to lever up/down\n        bool isDai;\n        // We check if cToken is DAI to save a couple of unnecessary calls\n        if (address(cToken) == address(CDAI)) {\n            isDai = true;\n            require(amountDAI == amount, \"!amounts\");\n        }\n        uint256 daiBal = IERC20(DAI).balanceOf(address(this));\n        if (deficit) {\n            if (!isDai) {\n                require(CErc20I(CDAI).mint(daiBal) == 0, \"!mint_flash\");\n                require(cToken.redeemUnderlying(amount) == 0, \"!redeem_down\");\n            }\n            //if in deficit we repay amount and then withdraw\n            require(cToken.repayBorrow(amount) == 0, \"!repay_down\");\n            require(CErc20I(CDAI).redeemUnderlying(amountDAI) == 0, \"!redeem\");\n        } else {\n            // if levering up borrow and deposit\n            require(CErc20I(CDAI).mint(daiBal) == 0, \"!mint_flash\");\n            require(cToken.borrow(amount) == 0, \"!borrow_up\");\n            if (!isDai) {\n                require(cToken.mint(amount) == 0, \"!mint_up\");\n                require(CErc20I(CDAI).redeemUnderlying(amountDAI) == 0, \"!redeem\");\n            }\n        }\n        return CALLBACK_SUCCESS;\n    }\n}\n\n// Part: Strategy\n\ncontract Strategy is BaseStrategy, IERC3156FlashBorrower {\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint256;\n\n    // @notice emitted when trying to do Flash Loan. flashLoan address is 0x00 when no flash loan used\n    event Leverage(uint256 amountRequested, uint256 amountGiven, bool deficit, address flashLoan);\n\n    // Comptroller address for compound.finance\n    ComptrollerI private constant compound = ComptrollerI(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\n\n    //Only three tokens we use\n    address private constant comp = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\n    address private constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    CErc20I public cToken;\n\n    bool public useUniV3;\n    // fee pool to use in UniV3 in basis points(default: 0.3% = 3000)\n    uint24 public compToWethSwapFee;\n    uint24 public wethToWantSwapFee;\n    IUniswapV2Router02 public currentV2Router;\n    IUniswapV2Router02 private constant UNI_V2_ROUTER = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n    IUniswapV2Router02 private constant SUSHI_V2_ROUTER = IUniswapV2Router02(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\n    IUniswapV3Router private constant UNI_V3_ROUTER = IUniswapV3Router(0xE592427A0AEce92De3Edee1F18E0157C05861564);\n\n    uint256 public collatRatioDAI;\n    uint256 public collateralTarget; // total borrow / total supply ratio we are targeting (100% = 1e18)\n    uint256 private blocksToLiquidationDangerZone; // minimum number of blocks before liquidation\n\n    uint256 public minWant; // minimum amount of want to act on\n\n    // Rewards handling\n    bool public dontClaimComp; // enable/disables COMP claiming\n    uint256 public minCompToSell; // minimum amount of COMP to be sold\n\n    bool public flashMintActive; // To deactivate flash loan provider if needed\n    bool public forceMigrate;\n    bool public fourThreeProtection;\n\n    constructor(address _vault, address _cToken) public BaseStrategy(_vault) {\n        _initializeThis(_cToken);\n    }\n\n    function approveTokenMax(address token, address spender) internal {\n        IERC20(token).safeApprove(spender, type(uint256).max);\n    }\n\n    function name() external view override returns (string memory) {\n        return \"GenLevCompV3\";\n    }\n\n    function initialize(address _vault, address _cToken) external {\n        _initialize(_vault, msg.sender, msg.sender, msg.sender);\n        _initializeThis(_cToken);\n    }\n\n    function _initializeThis(address _cToken) internal {\n        cToken = CErc20I(address(_cToken));\n        require(IERC20Extended(address(want)).decimals() <= 18); // dev: want not supported\n        currentV2Router = SUSHI_V2_ROUTER;\n\n        //pre-set approvals\n        approveTokenMax(comp, address(UNI_V2_ROUTER));\n        approveTokenMax(comp, address(SUSHI_V2_ROUTER));\n        approveTokenMax(comp, address(UNI_V3_ROUTER));\n        approveTokenMax(address(want), address(cToken));\n        approveTokenMax(FlashMintLib.DAI, address(FlashMintLib.LENDER));\n        // Enter Compound's DAI market to take it into account when using flashminted DAI as collateral\n        address[] memory markets;\n        if (address(cToken) != address(FlashMintLib.CDAI)) {\n            markets = new address[](2);\n            markets[0] = address(FlashMintLib.CDAI);\n            markets[1] = address(cToken);\n            // Only approve this if want != DAI, otherwise will fail\n            approveTokenMax(FlashMintLib.DAI, address(FlashMintLib.CDAI));\n        } else {\n            markets = new address[](1);\n            markets[0] = address(FlashMintLib.CDAI);\n        }\n        compound.enterMarkets(markets);\n        //comp speed is amount to borrow or deposit (so half the total distribution for want)\n        compToWethSwapFee = 3000;\n        wethToWantSwapFee = 3000;\n        // You can set these parameters on deployment to whatever you want\n        maxReportDelay = 86400; // once per 24 hours\n        profitFactor = 100; // multiple before triggering harvest\n        debtThreshold = 1e30;\n        // set minWant to 1e-3 want\n        minWant = uint256(uint256(10)**uint256((IERC20Extended(address(want))).decimals())).div(1000);\n        minCompToSell = 0.1 ether;\n        collateralTarget = 0.63 ether;\n        collatRatioDAI = 0.73 ether;\n        blocksToLiquidationDangerZone = 46500;\n        flashMintActive = true;\n    }\n\n    /*\n     * Control Functions\n     */\n\n    function setFourThreeProtection(bool _fourThreeProtection) external management {\n        fourThreeProtection = _fourThreeProtection;\n    }\n\n    function setUniV3PathFees(uint24 _compToWethSwapFee, uint24 _wethToWantSwapFee) external management {\n        compToWethSwapFee = _compToWethSwapFee;\n        wethToWantSwapFee = _wethToWantSwapFee;\n    }\n\n    function setDontClaimComp(bool _dontClaimComp) external management {\n        dontClaimComp = _dontClaimComp;\n    }\n\n    function setUseUniV3(bool _useUniV3) external management {\n        useUniV3 = _useUniV3;\n    }\n\n    function setToggleV2Router() external management {\n        currentV2Router = currentV2Router == SUSHI_V2_ROUTER ? UNI_V2_ROUTER : SUSHI_V2_ROUTER;\n    }\n\n    function setFlashMintActive(bool _flashMintActive) external management {\n        flashMintActive = _flashMintActive;\n    }\n\n    function setForceMigrate(bool _force) external onlyGovernance {\n        forceMigrate = _force;\n    }\n\n    function setMinCompToSell(uint256 _minCompToSell) external management {\n        minCompToSell = _minCompToSell;\n    }\n\n    function setMinWant(uint256 _minWant) external management {\n        minWant = _minWant;\n    }\n\n    function setCollateralTarget(uint256 _collateralTarget) external management {\n        (, uint256 collateralFactorMantissa, ) = compound.markets(address(cToken));\n        require(collateralFactorMantissa > _collateralTarget);\n        collateralTarget = _collateralTarget;\n    }\n\n    function setCollatRatioDAI(uint256 _collatRatioDAI) external management {\n        collatRatioDAI = _collatRatioDAI;\n    }\n\n    /*\n     * Base External Facing Functions\n     */\n    /*\n     * An accurate estimate for the total amount of assets (principle + return)\n     * that this strategy is currently managing, denominated in terms of want tokens.\n     */\n    function estimatedTotalAssets() public view override returns (uint256) {\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\n\n        uint256 _claimableComp = predictCompAccrued();\n        uint256 currentComp = balanceOfToken(comp);\n\n        // Use touch price. it doesnt matter if we are wrong as this is not used for decision making\n        uint256 estimatedWant = priceCheck(comp, address(want), _claimableComp.add(currentComp));\n        uint256 conservativeWant = estimatedWant.mul(9).div(10); //10% pessimist\n\n        return balanceOfToken(address(want)).add(deposits).add(conservativeWant).sub(borrows);\n    }\n\n    function balanceOfToken(address token) internal view returns (uint256) {\n        return IERC20(token).balanceOf(address(this));\n    }\n\n    //predicts our profit at next report\n    function expectedReturn() public view returns (uint256) {\n        uint256 estimateAssets = estimatedTotalAssets();\n\n        uint256 debt = vault.strategies(address(this)).totalDebt;\n        if (debt > estimateAssets) {\n            return 0;\n        } else {\n            return estimateAssets.sub(debt);\n        }\n    }\n\n    /*\n     * Provide a signal to the keeper that `tend()` should be called.\n     * (keepers are always reimbursed by yEarn)\n     *\n     * NOTE: this call and `harvestTrigger` should never return `true` at the same time.\n     * tendTrigger should be called with same gasCost as harvestTrigger\n     */\n    function tendTrigger(uint256 gasCost) public view override returns (bool) {\n        if (harvestTrigger(gasCost)) {\n            //harvest takes priority\n            return false;\n        }\n\n        return getblocksUntilLiquidation() <= blocksToLiquidationDangerZone;\n    }\n\n    //WARNING. manipulatable and simple routing. Only use for safe functions\n    function priceCheck(\n        address start,\n        address end,\n        uint256 _amount\n    ) public view returns (uint256) {\n        if (_amount == 0) {\n            return 0;\n        }\n\n        uint256[] memory amounts = currentV2Router.getAmountsOut(_amount, getTokenOutPathV2(start, end));\n\n        return amounts[amounts.length - 1];\n    }\n\n    /*****************\n     * Public non-base function\n     ******************/\n\n    //Calculate how many blocks until we are in liquidation based on current interest rates\n    //WARNING does not include compounding so the estimate becomes more innacurate the further ahead we look\n    //equation. Compound doesn't include compounding for most blocks\n    //((deposits*colateralThreshold - borrows) / (borrows*borrowrate - deposits*colateralThreshold*interestrate));\n    function getblocksUntilLiquidation() public view returns (uint256) {\n        (, uint256 collateralFactorMantissa, ) = compound.markets(address(cToken));\n\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\n\n        uint256 borrrowRate = cToken.borrowRatePerBlock();\n\n        uint256 supplyRate = cToken.supplyRatePerBlock();\n\n        uint256 collateralisedDeposit1 = deposits.mul(collateralFactorMantissa).div(1e18);\n        uint256 collateralisedDeposit = collateralisedDeposit1;\n\n        uint256 denom1 = borrows.mul(borrrowRate);\n        uint256 denom2 = collateralisedDeposit.mul(supplyRate);\n\n        if (denom2 >= denom1) {\n            return type(uint256).max;\n        } else {\n            uint256 numer = collateralisedDeposit.sub(borrows);\n            uint256 denom = denom1.sub(denom2);\n            //minus 1 for this block\n            return numer.mul(1e18).div(denom);\n        }\n    }\n\n    // This function makes a prediction on how much comp is accrued\n    // It is not 100% accurate as it uses current balances in Compound to predict into the past\n    function predictCompAccrued() public view returns (uint256) {\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\n        if (deposits == 0) {\n            return 0; // should be impossible to have 0 balance and positive comp accrued\n        }\n\n        uint256 distributionPerBlockSupply = compound.compSupplySpeeds(address(cToken));\n        uint256 distributionPerBlockBorrow = compound.compBorrowSpeeds(address(cToken));\n        uint256 totalBorrow = cToken.totalBorrows();\n\n        //total supply needs to be echanged to underlying using exchange rate\n        uint256 totalSupplyCtoken = cToken.totalSupply();\n        uint256 totalSupply = totalSupplyCtoken.mul(cToken.exchangeRateStored()).div(1e18);\n\n        uint256 blockShareSupply = 0;\n        if (totalSupply > 0) {\n            blockShareSupply = deposits.mul(distributionPerBlockSupply).div(totalSupply);\n        }\n\n        uint256 blockShareBorrow = 0;\n        if (totalBorrow > 0) {\n            blockShareBorrow = borrows.mul(distributionPerBlockBorrow).div(totalBorrow);\n        }\n\n        //how much we expect to earn per block\n        uint256 blockShare = blockShareSupply.add(blockShareBorrow);\n\n        //last time we ran harvest\n        uint256 lastReport = vault.strategies(address(this)).lastReport;\n        uint256 blocksSinceLast = (block.timestamp.sub(lastReport)).div(13); //roughly 13 seconds per block\n\n        return blocksSinceLast.mul(blockShare);\n    }\n\n    //Returns the current position\n    //WARNING - this returns just the balance at last time someone touched the cToken token. Does not accrue interst in between\n    //cToken is very active so not normally an issue.\n    function getCurrentPosition() public view returns (uint256 deposits, uint256 borrows) {\n        (, uint256 ctokenBalance, uint256 borrowBalance, uint256 exchangeRate) = cToken.getAccountSnapshot(address(this));\n        borrows = borrowBalance;\n\n        deposits = ctokenBalance.mul(exchangeRate).div(1e18);\n    }\n\n    //statechanging version\n    function getLivePosition() public returns (uint256 deposits, uint256 borrows) {\n        deposits = cToken.balanceOfUnderlying(address(this));\n\n        //we can use non state changing now because we updated state with balanceOfUnderlying call\n        borrows = cToken.borrowBalanceStored(address(this));\n    }\n\n    //Same warning as above\n    function netBalanceLent() public view returns (uint256) {\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\n        return deposits.sub(borrows);\n    }\n\n    /***********\n     * internal core logic\n     *********** */\n    /*\n     * A core method.\n     * Called at beggining of harvest before providing report to owner\n     * 1 - claim accrued comp\n     * 2 - if enough to be worth it we sell\n     * 3 - because we lose money on our loans we need to offset profit from comp.\n     */\n    function prepareReturn(uint256 _debtOutstanding)\n        internal\n        override\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _debtPayment\n        )\n    {\n        _profit = 0;\n        _loss = 0; // for clarity. also reduces bytesize\n\n        if (balanceOfToken(address(cToken)) == 0) {\n            uint256 wantBalance = balanceOfToken(address(want));\n            //no position to harvest\n            //but we may have some debt to return\n            //it is too expensive to free more debt in this method so we do it in adjust position\n            _debtPayment = Math.min(wantBalance, _debtOutstanding);\n            return (_profit, _loss, _debtPayment);\n        }\n\n        (uint256 deposits, uint256 borrows) = getLivePosition();\n\n        //claim comp accrued\n        _claimComp();\n        //sell comp\n        _disposeOfComp();\n\n        uint256 wantBalance = balanceOfToken(address(want));\n\n        uint256 investedBalance = deposits.sub(borrows);\n        uint256 balance = investedBalance.add(wantBalance);\n\n        uint256 debt = vault.strategies(address(this)).totalDebt;\n\n        //Balance - Total Debt is profit\n        if (balance > debt) {\n            _profit = balance.sub(debt);\n            if (wantBalance < _profit) {\n                //all reserve is profit\n                _profit = wantBalance;\n            } else if (wantBalance > _profit.add(_debtOutstanding)) {\n                _debtPayment = _debtOutstanding;\n            } else {\n                _debtPayment = wantBalance.sub(_profit);\n            }\n        } else {\n            //we will lose money until we claim comp then we will make money\n            //this has an unintended side effect of slowly lowering our total debt allowed\n            _loss = debt.sub(balance);\n            _debtPayment = Math.min(wantBalance, _debtOutstanding);\n        }\n    }\n\n    /*\n     * Second core function. Happens after report call.\n     *\n     * Similar to deposit function from V1 strategy\n     */\n\n    function adjustPosition(uint256 _debtOutstanding) internal override {\n        //emergency exit is dealt with in prepareReturn\n        if (emergencyExit) {\n            return;\n        }\n\n        //we are spending all our cash unless we have debt outstanding\n        uint256 _wantBal = balanceOfToken(address(want));\n        if (_wantBal < _debtOutstanding) {\n            //this is graceful withdrawal. dont use backup\n            //we use more than 1 because withdrawunderlying causes problems with 1 token due to different decimals\n            if (balanceOfToken(address(cToken)) > 1) {\n                _withdrawSome(_debtOutstanding.sub(_wantBal));\n            }\n\n            return;\n        }\n\n        (uint256 position, bool deficit) = _calculateDesiredPosition(_wantBal.sub(_debtOutstanding), true);\n\n        //if we are below minimun want change it is not worth doing\n        //need to be careful in case this pushes to liquidation\n        if (position > minWant) {\n            //if flashloan is not active we just try our best with basic leverage\n            if (!flashMintActive) {\n                uint256 i = 0;\n                while (position > 0) {\n                    position = position.sub(_noFlashLoan(position, deficit));\n                    if (i >= 6) {\n                        break;\n                    }\n                    i++;\n                }\n            } else {\n                //if there is huge position to improve we want to do normal leverage. it is quicker\n                if (position > FlashMintLib.maxLiquidity()) {\n                    position = position.sub(_noFlashLoan(position, deficit));\n                }\n\n                //flash loan to position\n                if (position > minWant) {\n                    doFlashMint(deficit, position);\n                }\n            }\n        }\n    }\n\n    /*************\n     * Very important function\n     * Input: amount we want to withdraw and whether we are happy to pay extra for Aave.\n     *       cannot be more than we have\n     * Returns amount we were able to withdraw. notall if user has some balance left\n     *\n     * Deleverage position -> redeem our cTokens\n     ******************** */\n    function _withdrawSome(uint256 _amount) internal returns (bool notAll) {\n        (uint256 position, bool deficit) = _calculateDesiredPosition(_amount, false);\n\n        //If there is no deficit we dont need to adjust position\n        //if the position change is tiny do nothing\n        if (deficit && position > minWant) {\n            //we do a flash loan to give us a big gap. from here on out it is cheaper to use normal deleverage. Use Aave for extremely large loans\n            if (flashMintActive) {\n                position = position.sub(doFlashMint(deficit, position));\n            }\n            uint8 i = 0;\n            //position will equal 0 unless we haven't been able to deleverage enough with flash loan\n            //if we are not in deficit we dont need to do flash loan\n            while (position > minWant.add(100)) {\n                position = position.sub(_noFlashLoan(position, true));\n                i++;\n                //A limit set so we don't run out of gas\n                if (i >= 5) {\n                    notAll = true;\n                    break;\n                }\n            }\n        }\n        //now withdraw\n        //if we want too much we just take max\n\n        //This part makes sure our withdrawal does not force us into liquidation\n        (uint256 depositBalance, uint256 borrowBalance) = getCurrentPosition();\n\n        uint256 tempColla = collateralTarget;\n\n        uint256 reservedAmount = 0;\n        if (tempColla == 0) {\n            tempColla = 1e15; // 0.001 * 1e18. lower we have issues\n        }\n\n        reservedAmount = borrowBalance.mul(1e18).div(tempColla);\n        if (depositBalance >= reservedAmount) {\n            uint256 redeemable = depositBalance.sub(reservedAmount);\n            uint256 balan = cToken.balanceOf(address(this));\n            if (balan > 1) {\n                if (redeemable < _amount) {\n                    cToken.redeemUnderlying(redeemable);\n                } else {\n                    cToken.redeemUnderlying(_amount);\n                }\n            }\n        }\n\n        if (collateralTarget == 0 && balanceOfToken(address(want)) > borrowBalance) {\n            cToken.repayBorrow(borrowBalance);\n        }\n    }\n\n    /***********\n     *  This is the main logic for calculating how to change our lends and borrows\n     *  Input: balance. The net amount we are going to deposit/withdraw.\n     *  Input: dep. Is it a deposit or withdrawal\n     *  Output: position. The amount we want to change our current borrow position.\n     *  Output: deficit. True if we are reducing position size\n     *\n     *  For instance deficit =false, position 100 means increase borrowed balance by 100\n     ****** */\n    function _calculateDesiredPosition(uint256 balance, bool dep) internal returns (uint256 position, bool deficit) {\n        //we want to use statechanging for safety\n        (uint256 deposits, uint256 borrows) = getLivePosition();\n\n        //When we unwind we end up with the difference between borrow and supply\n        uint256 unwoundDeposit = deposits.sub(borrows);\n\n        //we want to see how close to collateral target we are.\n        //So we take our unwound deposits and add or remove the balance we are are adding/removing.\n        //This gives us our desired future undwoundDeposit (desired supply)\n\n        uint256 desiredSupply = 0;\n        if (dep) {\n            desiredSupply = unwoundDeposit.add(balance);\n        } else {\n            if (balance > unwoundDeposit) {\n                balance = unwoundDeposit;\n            }\n            desiredSupply = unwoundDeposit.sub(balance);\n        }\n\n        //(ds *c)/(1-c)\n        uint256 num = desiredSupply.mul(collateralTarget);\n        uint256 den = uint256(1e18).sub(collateralTarget);\n\n        uint256 desiredBorrow = num.div(den);\n        if (desiredBorrow > 1e5) {\n            //stop us going right up to the wire\n            desiredBorrow = desiredBorrow.sub(1e5);\n        }\n\n        //now we see if we want to add or remove balance\n        // if the desired borrow is less than our current borrow we are in deficit. so we want to reduce position\n        if (desiredBorrow < borrows) {\n            deficit = true;\n            position = borrows.sub(desiredBorrow); //safemath check done in if statement\n        } else {\n            //otherwise we want to increase position\n            deficit = false;\n            position = desiredBorrow.sub(borrows);\n        }\n    }\n\n    /*\n     * Liquidate as many assets as possible to `want`, irregardless of slippage,\n     * up to `_amount`. Any excess should be re-invested here as well.\n     */\n    function liquidatePosition(uint256 _amountNeeded) internal override returns (uint256 _amountFreed, uint256 _loss) {\n        uint256 _balance = balanceOfToken(address(want));\n        uint256 assets = netBalanceLent().add(_balance);\n\n        uint256 debtOutstanding = vault.debtOutstanding();\n\n        if (debtOutstanding > assets) {\n            _loss = debtOutstanding.sub(assets);\n        }\n\n        (uint256 deposits, uint256 borrows) = getLivePosition();\n        if (assets < _amountNeeded) {\n            //if we cant afford to withdraw we take all we can\n            //withdraw all we can\n\n            //1 token causes rounding error with withdrawUnderlying\n            if (balanceOfToken(address(cToken)) > 1) {\n                _withdrawSome(deposits.sub(borrows));\n            }\n\n            _amountFreed = Math.min(_amountNeeded, balanceOfToken(address(want)));\n        } else {\n            if (_balance < _amountNeeded) {\n                _withdrawSome(_amountNeeded.sub(_balance));\n\n                //overflow error if we return more than asked for\n                _amountFreed = Math.min(_amountNeeded, balanceOfToken(address(want)));\n            } else {\n                _amountFreed = _amountNeeded;\n            }\n        }\n\n        // To prevent the vault from moving on to the next strategy in the queue\n        // when we return the amountRequested minus dust, take a dust sized loss\n        if (_amountFreed < _amountNeeded) {\n            uint256 diff = _amountNeeded.sub(_amountFreed);\n            if (diff <= minWant) {\n                _loss = diff;\n            }\n        }\n\n        if (fourThreeProtection) {\n            require(_amountNeeded == _amountFreed.add(_loss)); // dev: fourThreeProtection\n        }\n    }\n\n    function _claimComp() internal {\n        if (dontClaimComp) {\n            return;\n        }\n        CTokenI[] memory tokens = new CTokenI[](1);\n        tokens[0] = cToken;\n\n        compound.claimComp(address(this), tokens);\n    }\n\n    //sell comp function\n    function _disposeOfComp() internal {\n        uint256 _comp = balanceOfToken(comp);\n        if (_comp < minCompToSell) {\n            return;\n        }\n\n        if (useUniV3) {\n            UNI_V3_ROUTER.exactInput(IUniswapV3Router.ExactInputParams(getTokenOutPathV3(comp, address(want)), address(this), now, _comp, 0));\n        } else {\n            currentV2Router.swapExactTokensForTokens(_comp, 0, getTokenOutPathV2(comp, address(want)), address(this), now);\n        }\n    }\n\n    function getTokenOutPathV2(address _tokenIn, address _tokenOut) internal pure returns (address[] memory _path) {\n        bool isWeth = _tokenIn == address(weth) || _tokenOut == address(weth);\n        _path = new address[](isWeth ? 2 : 3);\n        _path[0] = _tokenIn;\n\n        if (isWeth) {\n            _path[1] = _tokenOut;\n        } else {\n            _path[1] = address(weth);\n            _path[2] = _tokenOut;\n        }\n    }\n\n    function getTokenOutPathV3(address _tokenIn, address _tokenOut) internal view returns (bytes memory _path) {\n        if (address(want) == weth) {\n            _path = abi.encodePacked(address(_tokenIn), compToWethSwapFee, address(weth));\n        } else {\n            _path = abi.encodePacked(address(_tokenIn), compToWethSwapFee, address(weth), wethToWantSwapFee, address(_tokenOut));\n        }\n    }\n\n    //lets leave\n    //if we can't deleverage in one go set collateralFactor to 0 and call harvest multiple times until delevered\n    function prepareMigration(address _newStrategy) internal override {\n        if (!forceMigrate) {\n            (uint256 deposits, uint256 borrows) = getLivePosition();\n            _withdrawSome(deposits.sub(borrows));\n\n            (, , uint256 borrowBalance, ) = cToken.getAccountSnapshot(address(this));\n\n            require(borrowBalance < 10_000);\n\n            IERC20 _comp = IERC20(comp);\n            uint256 _compB = balanceOfToken(address(_comp));\n            if (_compB > 0) {\n                _comp.safeTransfer(_newStrategy, _compB);\n            }\n        }\n    }\n\n    //Three functions covering normal leverage and deleverage situations\n    // max is the max amount we want to increase our borrowed balance\n    // returns the amount we actually did\n    function _noFlashLoan(uint256 max, bool deficit) internal returns (uint256 amount) {\n        //we can use non-state changing because this function is always called after _calculateDesiredPosition\n        (uint256 lent, uint256 borrowed) = getCurrentPosition();\n\n        //if we have nothing borrowed then we can't deleverage any more\n        if (borrowed == 0 && deficit) {\n            return 0;\n        }\n\n        (, uint256 collateralFactorMantissa, ) = compound.markets(address(cToken));\n\n        if (deficit) {\n            amount = _normalDeleverage(max, lent, borrowed, collateralFactorMantissa);\n        } else {\n            amount = _normalLeverage(max, lent, borrowed, collateralFactorMantissa);\n        }\n\n        emit Leverage(max, amount, deficit, address(0));\n    }\n\n    //maxDeleverage is how much we want to reduce by\n    function _normalDeleverage(\n        uint256 maxDeleverage,\n        uint256 lent,\n        uint256 borrowed,\n        uint256 collatRatio\n    ) internal returns (uint256 deleveragedAmount) {\n        uint256 theoreticalLent = 0;\n\n        //collat ration should never be 0. if it is something is very wrong... but just incase\n        if (collatRatio != 0) {\n            theoreticalLent = borrowed.mul(1e18).div(collatRatio);\n        }\n        deleveragedAmount = lent.sub(theoreticalLent);\n\n        if (deleveragedAmount >= borrowed) {\n            deleveragedAmount = borrowed;\n        }\n        if (deleveragedAmount >= maxDeleverage) {\n            deleveragedAmount = maxDeleverage;\n        }\n        uint256 exchangeRateStored = cToken.exchangeRateStored();\n        //redeemTokens = redeemAmountIn * 1e18 / exchangeRate. must be more than 0\n        //a rounding error means we need another small addition\n        if (deleveragedAmount.mul(1e18) >= exchangeRateStored && deleveragedAmount > 10) {\n            deleveragedAmount = deleveragedAmount.sub(uint256(10));\n            cToken.redeemUnderlying(deleveragedAmount);\n\n            //our borrow has been increased by no more than maxDeleverage\n            cToken.repayBorrow(deleveragedAmount);\n        }\n    }\n\n    //maxDeleverage is how much we want to increase by\n    function _normalLeverage(\n        uint256 maxLeverage,\n        uint256 lent,\n        uint256 borrowed,\n        uint256 collatRatio\n    ) internal returns (uint256 leveragedAmount) {\n        uint256 theoreticalBorrow = lent.mul(collatRatio).div(1e18);\n\n        leveragedAmount = theoreticalBorrow.sub(borrowed);\n\n        if (leveragedAmount >= maxLeverage) {\n            leveragedAmount = maxLeverage;\n        }\n        if (leveragedAmount > 10) {\n            leveragedAmount = leveragedAmount.sub(uint256(10));\n            cToken.borrow(leveragedAmount);\n            cToken.mint(balanceOfToken(address(want)));\n        }\n    }\n\n    //emergency function that we can use to deleverage manually if something is broken\n    function manualDeleverage(uint256 amount) external management {\n        require(cToken.redeemUnderlying(amount) == 0);\n        require(cToken.repayBorrow(amount) == 0);\n    }\n\n    //emergency function that we can use to deleverage manually if something is broken\n    function manualReleaseWant(uint256 amount) external onlyGovernance {\n        require(cToken.redeemUnderlying(amount) == 0);\n    }\n\n    function protectedTokens() internal view override returns (address[] memory) {}\n\n    /******************\n     * Flash mint stuff\n     ****************/\n\n    // Flash loan\n    // amount desired is how much we are willing for position to change\n    function doFlashMint(bool deficit, uint256 amountDesired) internal returns (uint256) {\n        return FlashMintLib.doFlashMint(deficit, amountDesired, address(want), collatRatioDAI);\n    }\n\n    //returns our current collateralisation ratio. Should be compared with collateralTarget\n    function storedCollateralisation() public view returns (uint256 collat) {\n        (uint256 lend, uint256 borrow) = getCurrentPosition();\n        if (lend == 0) {\n            return 0;\n        }\n        collat = uint256(1e18).mul(borrow).div(lend);\n    }\n\n    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external override returns (bytes32) {\n        require(msg.sender == FlashMintLib.LENDER);\n        require(initiator == address(this));\n        (bool deficit, uint256 amountWant) = abi.decode(data, (bool, uint256));\n\n        return FlashMintLib.loanLogic(deficit, amount, amountWant, cToken);\n    }\n\n    // -- Internal Helper functions -- //\n\n    function ethToWant(uint256 _amtInWei) public view override returns (uint256) {\n        return priceCheck(weth, address(want), _amtInWei);\n    }\n\n    function liquidateAllPositions() internal override returns (uint256 _amountFreed) {\n        (_amountFreed, ) = liquidatePosition(vault.debtOutstanding());\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\n\n        uint256 position = deposits.sub(borrows);\n\n        //we want to revert if we can't liquidateall\n        if (!forceMigrate) {\n            require(position < minWant);\n        }\n    }\n\n    function mgtm_check() internal view {\n        require(msg.sender == governance() || msg.sender == vault.management() || msg.sender == strategist, \"!authorized\");\n    }\n\n    modifier management() {\n        mgtm_check();\n        _;\n    }\n}\n\n// File: LevCompFactory.sol\n\ncontract LevCompFactory {\n    address public immutable original;\n\n    event Cloned(address indexed clone);\n    event Deployed(address indexed original);\n\n    constructor(\n        address _vault,\n        address _cToken\n    ) public {\n        Strategy _original = new Strategy(_vault, _cToken);\n        emit Deployed(address(_original));\n\n        original = address(_original);\n        _original.setStrategist(msg.sender);\n    }\n\n    function name() external view returns (string memory) {\n        return string(abi.encodePacked(\"Factory\", Strategy(payable(original)).name(), \"@\", Strategy(payable(original)).apiVersion()));\n    }\n\n    function cloneLevComp(\n        address _vault,\n        address _cToken\n    ) external returns (address payable newStrategy) {\n        // Copied from https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol\n        bytes20 addressBytes = bytes20(original);\n        assembly {\n            // EIP-1167 bytecode\n            let clone_code := mload(0x40)\n            mstore(\n                clone_code,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(clone_code, 0x14), addressBytes)\n            mstore(\n                add(clone_code, 0x28),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n            newStrategy := create(0, clone_code, 0x37)\n        }\n\n        Strategy(newStrategy).initialize(_vault, _cToken);\n        Strategy(newStrategy).setStrategist(msg.sender);\n\n        emit Cloned(newStrategy);\n    }\n}"}}}