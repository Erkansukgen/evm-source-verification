{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "TotalKnockOut.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.10;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner = msg.sender;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  modifier onlyOwner {\r\n    if (msg.sender != owner) revert(\"Sender is not owner\");\r\n    _;\r\n  }\r\n\r\n  function changeOwner(address _newOwner)public\r\n  onlyOwner\r\n  {\r\n    if(_newOwner == address(0x0)) revert(\"new owner address is empty\");\r\n    emit OwnershipTransferred(owner,_newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract TotalKnockOut is IERC20,Ownable {\r\n\r\n    string public constant name = \"TotalKnockOut\";\r\n    string public constant symbol = \"TKO\";\r\n    uint8 public constant decimals = 18;\r\n\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 totalSupply_ = (10**8)*(10**18);\r\n\r\n    using SafeMath for uint256;\r\n\r\n   constructor(address owner) public {\r\n    balances[owner] = totalSupply_;\r\n    changeOwner(owner);\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n    return totalSupply_;\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public override view returns (uint256) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function transfer(address receiver, uint256 numTokens) public override returns (bool) {\r\n        require(numTokens <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        balances[receiver] = balances[receiver].add(numTokens);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address delegate, uint256 numTokens) public override returns (bool) {\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address delegate) public override view returns (uint) {\r\n        return allowed[owner][delegate];\r\n    }\r\n\r\n    function transferFrom(address owner, address buyer, uint256 numTokens) public override returns (bool) {\r\n        require(numTokens <= balances[owner]);\r\n        require(numTokens <= allowed[owner][msg.sender]);\r\n\r\n        balances[owner] = balances[owner].sub(numTokens);\r\n        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\r\n        balances[buyer] = balances[buyer].add(numTokens);\r\n        emit Transfer(owner, buyer, numTokens);\r\n        return true;\r\n    }\r\n    \r\n     function burn(address account,uint amount) public onlyOwner{\r\n            require(account != address(0), \"ERC20: burn from the zero address\");\r\n            require(balances[account] >= amount);\r\n            balances[account] = balances[account].sub(amount);\r\n            totalSupply_ = totalSupply_.sub(amount);\r\n            emit Transfer(account, address(0), amount);\r\n        }\r\n        \r\n}\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n}"
    }
  }
}