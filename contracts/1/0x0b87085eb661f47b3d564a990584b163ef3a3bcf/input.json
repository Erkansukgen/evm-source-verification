{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Lottery/JoysLotteryMeta.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.6.12;\n\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"github/OpenZeppelin/openzeppelin-contracts/contracts/access/Ownable.sol\";\n\n\ncontract JoysLotteryMeta is Ownable {\n\n    // events\n    event LotteryMetaAdd(address indexed to, uint32 level,\n        uint32 strengthMin, uint32 strengthMax,\n        uint32 intelligenceMin, uint32 intelligenceMax,\n        uint32 agilityMin, uint32 agilityMax,\n        uint256 weight);\n\n    event LotteryMetaUpdate(address indexed to, uint32 level,\n        uint32 strengthMin, uint32 strengthMax,\n        uint32 intelligenceMin, uint32 intelligenceMax,\n        uint32 agilityMin, uint32 agilityMax,\n        uint256 weight);\n\n    // hero base info\n    struct MetaInfo {\n        // level\n        uint32 level;\n\n        // strength\n        uint32 sMin;\n        uint32 sMax;\n\n        // intelligence\n        uint32 iMin;\n        uint32 iMax;\n\n        // agility\n        uint32 aMin;\n        uint32 aMax;\n\n        uint256 weight;\n    }\n    MetaInfo[] public metaInfo;\n    mapping(uint32 => bool) public metaLevel;\n\n    /**\n     * @dev addMeta.\n     * Requirements: only owner, when paused.\n     * @notice add new meta info to contract\n     * @param _level The meta level\n     * @param _sMin The min strength value\n     * @param _sMax The max strength value\n     * @param _iMin The min intelligence value\n     * @param _iMax The max intelligence value\n     * @param _aMin The min agility value\n     * @param _aMax The max agility value\n     * @param _weight The meta weight\n     */\n    function addMeta (\n        uint32 _level,\n        uint32 _sMin,\n        uint32 _sMax,\n        uint32 _iMin,\n        uint32 _iMax,\n        uint32 _aMin,\n        uint32 _aMax,\n        uint256 _weight)\n    onlyOwner public {\n        require(_level > 0, \"JoysLotteryMeta: The level starts at 1.\");\n\n        if (metaLevel[_level]) {\n            return;\n        }\n\n        // new level must bigger than old\n        if(metaInfo.length > 0) {\n            require(_level > metaInfo[metaInfo.length - 1].level, \"JoysLotteryMeta: new level must bigger than old\");\n            require(_level == metaInfo[metaInfo.length - 1].level + 1, \"JoysLotteryMeta: new level must bigger.\");\n        }\n\n        metaInfo.push(MetaInfo({\n            level: _level,\n            sMin: _sMin,\n            sMax: _sMax,\n            iMin: _iMin,\n            iMax: _iMax,\n            aMin: _aMin,\n            aMax: _aMax,\n            weight: _weight\n            }));\n        metaLevel[_level] = true;\n\n        emit LotteryMetaAdd(_msgSender(), _level, _sMin, _sMax, _iMin, _iMax, _aMin, _aMax, _weight);\n    }\n\n    /**\n     * @dev updateMeta.\n     * Requirements: only owner, when paused.\n     * @notice update special level meta info\n     * @param _level The meta level\n     * @param _sMin The min strength value\n     * @param _sMax The max strength value\n     * @param _iMin The min intelligence value\n     * @param _iMax The max intelligence value\n     * @param _aMin The min agility value\n     * @param _aMax The max agility value\n     * @param _weight The weight of the meta\n     */\n    function updateMeta (uint32 _level,\n        uint32 _sMin,\n        uint32 _sMax,\n        uint32 _iMin,\n        uint32 _iMax,\n        uint32 _aMin,\n        uint32 _aMax,\n        uint256 _weight)\n    onlyOwner public {\n        require(_level > 0 && _level <= length(), \"JoysLotteryMeta: invalid index.\");\n\n        for (uint32 idx = 0; idx < metaInfo.length; ++idx) {\n            if (metaInfo[idx].level == _level) {\n                metaInfo[idx] = MetaInfo({\n                    level: _level,\n                    sMin: _sMin,\n                    sMax: _sMax,\n                    iMin: _iMin,\n                    iMax: _iMax,\n                    aMin: _aMin,\n                    aMax: _aMax,\n                    weight: _weight\n                    });\n                break;\n            }\n        }\n\n        emit LotteryMetaUpdate(_msgSender(), _level, _sMin, _sMax, _iMin, _iMax, _aMin, _aMax, _weight);\n    }\n\n    function length() public view returns (uint32) {\n        return uint32(metaInfo.length);\n    }\n\n    function meta(uint256 _idx) public view returns (uint32, uint32, uint32, uint32, uint32, uint32, uint32, uint256){\n        require(_idx < length(), \"JoysLotteryMeta: invalid index.\");\n        MetaInfo storage m = metaInfo[_idx];\n        return (m.level, m.sMin, m.sMax, m.iMin, m.iMax, m.aMin, m.aMax, m.weight);\n    }\n}\n\ncontract JoysHeroLotteryMeta is JoysLotteryMeta {\n    constructor() public {\n        addMeta(1, 500, 800, 400, 800, 500, 1000, 10000);\n        addMeta(2, 1500, 1800, 1000, 1400, 1500, 2000, 5000);\n        addMeta(3, 4000, 6000, 4000, 7000, 2500, 3500, 2000);\n        addMeta(4, 7000, 9000, 9000, 10000, 5000, 8000, 500);\n        addMeta(5, 10000, 11000, 10000, 12000, 9000, 13000, 100);\n        addMeta(6, 18000, 20000, 17000, 20000, 15000, 19000, 5);\n    }\n}\n\ncontract JoysWeaponLotteryMeta is JoysLotteryMeta {\n    // init weapon lottery meta\n    constructor() public {\n        addMeta(1, 500, 800, 600, 1000, 600, 1100, 10000);\n        addMeta(2, 1800, 2000, 1600, 1900, 2000, 2400, 4000);\n        addMeta(3, 3000, 4000, 2000, 4000, 2000, 5000, 2000);\n        addMeta(4, 6000, 8000, 8000, 9000, 6000, 9000, 500);\n        addMeta(5, 16000, 18000, 15000, 18000, 18000, 25000, 0);\n        addMeta(6, 19000, 22000, 16000, 18000, 16000, 19000, 0);\n    }\n}"
    },
    "github/OpenZeppelin/openzeppelin-contracts/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "github/OpenZeppelin/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    }
  }
}