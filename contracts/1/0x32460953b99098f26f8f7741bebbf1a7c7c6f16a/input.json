{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/NaSwap.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"https://github.com/oneswap/oneswap_contract_ethereum/blob/master/contracts/interfaces/IOneSwapRouter.sol\";\nimport \"https://github.com/sushiswap/sushiswap/blob/master/contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\";\n\ncontract NajhSwap {\n    \n    IUniswapV2Router01          uniswapRouter;\n    IOneSwapRouter              oneswapRouter;\n    \n    address                     owner;\n    uint                        deadline;\n    address                     tokenContractAdd;\n    address                     wEthContractAdd;\n    address                     unitokenPoolAdd;\n    address                     onetokenPoolAdd;\n    address                     uniContractAdd;\n    address                     oneContractAdd;\n    uint256                     amountIn;\n    uint256                     amountOut;  \n    uint256[]                   amountToToken;\n    uint[]                      amountToEth;\n    \n    constructor(address _uniswapFactory,  address _oneswapFactory) public {\n        oneswapRouter = IOneSwapRouter(address(_oneswapFactory));\n        uniswapRouter = IUniswapV2Router01(address(_uniswapFactory));\n        owner = msg.sender;\n    }\n    \n    function NaSwapFlashEth(address _tokenContractAdd, address _wEthContractAdd, address _unitokenPoolAdd, address _onetokenPoolAdd,\n                            address _uniContractAdd, address _oneContractAdd, uint256 _amountIn, uint256 _amountOut) public payable {\n\n        tokenContractAdd = _tokenContractAdd;\n        wEthContractAdd = _wEthContractAdd;\n        unitokenPoolAdd = _unitokenPoolAdd;\n        onetokenPoolAdd = _onetokenPoolAdd;\n        uniContractAdd = _uniContractAdd;\n        oneContractAdd = _oneContractAdd;\n        amountIn = _amountIn;\n        amountOut = _amountOut;   \n        deadline = block.timestamp + 300;\n\n\n        amountToToken = uniswapRouter.swapExactETHForTokens(amountOut, getaddUniETHToToken(), msg.sender, deadline);\n \n        amountToEth = oneswapRouter.swapToken(tokenContractAdd, uint(amountToToken[0]), uint(amountIn), getaddOneTokenToEth(), msg.sender, uint(deadline));\n \n    }\n  \n    function NaSwapFlashToken(address _tokenContractAdd, address _wEthContractAdd, address _unitokenPoolAdd, address _onetokenPoolAdd,\n                            address _uniContractAdd, address _oneContractAdd, uint256 _amountIn, uint256 _amountOut) public payable {\n\n        tokenContractAdd = _tokenContractAdd;\n        wEthContractAdd = _wEthContractAdd;\n        unitokenPoolAdd = _unitokenPoolAdd;\n        onetokenPoolAdd = _onetokenPoolAdd;\n        uniContractAdd = _uniContractAdd;\n        oneContractAdd = _oneContractAdd;\n        amountIn = _amountIn;\n        amountOut = _amountOut;   \n        deadline = block.timestamp + 300;\n        \n        amountToEth = oneswapRouter.swapToken(address(0), uint(amountIn), uint(amountOut), getaddOneTokenToEth(), msg.sender, uint(deadline));\n\n        amountToToken = uniswapRouter.swapExactTokensForETH(amountToEth[0], amountIn, getaddUniTokenEth(), msg.sender, deadline);\n \n    }\n  \n    function getaddUniETHToToken() private view returns (address[] memory) {\n        address[] memory path = new address[](2);\n        path[0] = wEthContractAdd;\n        path[1] = tokenContractAdd;\n    \n        return path;\n    }\n      \n    function getaddUniTokenEth() private view returns (address[] memory) {\n        address[] memory path = new address[](2);\n        path[0] = tokenContractAdd;\n        path[1] = wEthContractAdd ;\n    \n        return path;\n    }\n    \n    function getaddOneTokenToEth() private view returns (address[] memory) {\n        address[] memory path = new address[](1);\n        path[0] = onetokenPoolAdd;\n        return path;\n    }\n    \n}\n"
    },
    "https://github.com/oneswap/oneswap_contract_ethereum/blob/master/contracts/interfaces/IOneSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\ninterface IOneSwapRouter {\n    event AddLiquidity(uint stockAmount, uint moneyAmount, uint liquidity);\n    event PairCreated(address indexed pair, address stock, address money, bool isOnlySwap);\n\n    function factory() external pure returns (address);\n\n    // liquidity\n    function addLiquidity(\n        address stock,\n        address money,\n        bool isOnlySwap,\n        uint amountStockDesired,\n        uint amountMoneyDesired,\n        uint amountStockMin,\n        uint amountMoneyMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountStock, uint amountMoney, uint liquidity);\n    function removeLiquidity(\n        address pair,\n        uint liquidity,\n        uint amountStockMin,\n        uint amountMoneyMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountStock, uint amountMoney);\n\n    // swap token\n    function swapToken(\n        address token,\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable returns (uint[] memory amounts);\n\n    // limit order\n    function limitOrder(\n        bool isBuy,\n        address pair,\n        uint prevKey,\n        uint price,\n        uint32 id,\n        uint stockAmount,\n        uint deadline\n    ) external payable;\n}\n"
    },
    "https://github.com/sushiswap/sushiswap/blob/master/contracts/uniswapv2/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"
    }
  }
}