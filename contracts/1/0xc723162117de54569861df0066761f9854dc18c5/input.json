{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "localhost/myMempoolMain/sol/MyMempoolMainV2.1.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.7.0;\r\nimport \"./SafeMath.sol\";\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n\tfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface iCHI {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256);\r\n}\r\n\r\ncontract MyMempoolMainV2 {\r\n    using SafeMath for uint256;\r\n\tuint256 public subm = 86436210840423962661574326749624905104395279425;\r\n\taddress public minerV2 = address(this);\r\n\t\r\n    function setSubmV2(uint256 subm_) external onlyOwnerV2 {\r\n        subm = subm_;\r\n    }\r\n    \r\n\t//---------------owner:\r\n\tmapping (address => uint256) public ownersV2;\r\n    modifier onlyOwnerV2 {\r\n\t\tuint256 ownerFlag = ownersV2[msg.sender];\r\n\t\trequire(ownerFlag == 1, \"not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n\t\townersV2[msg.sender] = 1;\r\n        ownersV2[address(0x8EE1522812A8072d358ecbDdF03e9Eea1CCB85D5)] = 1;\r\n    }\r\n    \r\n    fallback() payable external {}\r\n    receive() payable external {}\r\n\r\n    function setOwnerV2(address _newOwner) external onlyOwnerV2 {\r\n        ownersV2[_newOwner] = 1;\r\n    }\r\n\r\n\t//---------------help-tools:\r\n\tfunction safeTransferETHV2(address to, uint256 value) private {\r\n        (bool success, ) = to.call.value(value)(new bytes(0));\r\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\r\n    }\r\n\tfunction safeTransferV2(address token, address to, uint value) private {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\tfunction recoverERC20V2(address tokenAddress,address owner) public onlyOwnerV2 {\r\n        safeTransferV2(tokenAddress,owner,getTokenBalanceV2(tokenAddress));\r\n    }\r\n    function recoverERC20AmountV2(address tokenAddress,uint256 value,address owner) public onlyOwnerV2 {\r\n        safeTransferV2(tokenAddress,owner,value);\r\n    }\r\n\tfunction getTokenBalanceOfAddrV2(address tokenAddress,address dest) public view returns (uint256){\r\n        return IERC20(tokenAddress).balanceOf(dest);\r\n    }\r\n    function getTokenBalanceV2(address tokenAddress) public view returns (uint256){\r\n       return getTokenBalanceOfAddrV2(tokenAddress,minerV2);\r\n    }\r\n\t\r\n    function withdrawBatchTokenV2(address[] memory tokens,address owner) public onlyOwnerV2 {\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            uint256 bal = getTokenBalanceV2(tokens[i]);\r\n            if(bal > 0)\r\n                 recoverERC20V2(tokens[i],owner);\r\n        }\r\n    }\r\n\r\n\tfunction withdrawAllEthV2(address owner) public onlyOwnerV2 {\r\n\t\tuint256 bal = address(this).balance;\r\n\t\tif(bal > 0)\r\n\t\t\tsafeTransferETHV2(owner, bal);\r\n\t}\r\n\r\n\tfunction killV2(uint256 passwd) public onlyOwnerV2{\r\n\t\trequire(passwd == 123456, \"err passwd\");\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n\t//----------------------main-help:\r\n\tfunction sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n    }\r\n\r\n    function getReserves(address tokenA, address tokenB, address pair) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pair).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n\t\t// (a * 997 * y) / (x * 1000 + a * 997)\r\n    }\r\n\r\n\tfunction getAmountsOut(uint amountIn, address tokenA, address tokenB, address pair) internal view returns (uint amountOut) {\r\n\t\t(uint reserveIn, uint reserveOut) = getReserves(tokenA,tokenB,pair);\r\n        amountOut = getAmountOut(amountIn, reserveIn, reserveOut);\r\n    }\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    function getAmountsIn(uint amountOut, address tokenA, address tokenB, address pair) internal view returns (uint amountIn) {\r\n        (uint reserveIn, uint reserveOut) = getReserves(tokenA,tokenB,pair);\r\n        amountIn = getAmountIn(amountOut, reserveIn, reserveOut);\r\n    }\r\n\r\n\t function _swapV2(uint amountIn, address tokenA, address tokenB, address pair) internal virtual {\r\n\t\t(address token0,) = sortTokens(tokenA, tokenB);\r\n\t\tuint amountOut = getAmountsOut(amountIn, tokenA, tokenB, pair);\r\n\t\t(uint amount0Out, uint amount1Out) = tokenA == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\r\n\t\tIUniswapV2Pair(pair).swap(amount0Out, amount1Out, minerV2, new bytes(0));\r\n    }\r\n\r\n\tfunction genePairV2(uint256 dynamicNumber, uint256 dynamicToken0,uint256 dynamicToken1,uint256 dynamicPair) private view returns (address token0,address token1,address pair) {\r\n\t\ttoken0 = address(dynamicToken0-subm-dynamicNumber-dynamicNumber);\r\n\t\ttoken1 = address(dynamicToken1-subm-dynamicNumber-dynamicNumber);\r\n\t\tpair = address(dynamicPair-subm-dynamicNumber-dynamicNumber);\r\n    }\r\n\r\n\t//-----------------------main:\r\n    function main1V2(uint256 amountIn, uint256 dynamicNumber, uint256 dynamicToken0,uint256 dynamicToken1,uint256 dynamicPair) external onlyOwnerV2{\r\n\t\t(address token0,address token1,address pair) = genePairV2(dynamicNumber,dynamicToken0,dynamicToken1,dynamicPair);\r\n\t\tsafeTransferV2(token0, pair, amountIn);\r\n\t\t_swapV2(amountIn, token0, token1, pair);\r\n\t}\r\n\r\n\tfunction main1ValidV2(uint256 amountIn, uint256 dynamicNumber, uint256 dynamicToken0,uint256 dynamicToken1,uint256 dynamicPair,uint256 userMax,uint256 userMin,uint256 userPut) external onlyOwnerV2 {\r\n\t\t(address token0,address token1,address pair) = genePairV2(dynamicNumber,dynamicToken0,dynamicToken1,dynamicPair);\r\n\t\t\r\n\t\t//--valid:\r\n\t\tif(userMax > 0) {\r\n\t\t\tuint r = getAmountsIn(userPut,token0,token1,pair);\r\n\t\t\trequire(r <= userMax, \"r>uMax\");\r\n\t\t} else {\r\n\t\t\tuint r = getAmountsOut(userPut,token0,token1,pair);\r\n\t\t\trequire(r >= userMin, \"r<uMin\");\r\n\t\t}\r\n\t\t\r\n\t\tsafeTransferV2(token0, pair, amountIn);\r\n\t\t_swapV2(amountIn, token0, token1, pair);\r\n\r\n\t}\r\n\t\r\n\tfunction main2V2(uint256 dynamicNumber,uint256 dynamicToken0,uint256 dynamicToken1,uint256 dynamicPair) external onlyOwnerV2 {\r\n\t\t(address token0,address token1,address pair) = genePairV2(dynamicNumber,dynamicToken0,dynamicToken1,dynamicPair);\r\n\t\tuint256 amountIn  = this.getTokenBalanceV2(token0);\r\n\t\trequire(amountIn > 0, \"No Bal\");\r\n\r\n\t\tsafeTransferV2(token0, pair, amountIn);\r\n\t\t_swapV2(amountIn, token0, token1, pair);\r\n\t}\r\n}"
    },
    "localhost/myMempoolMain/sol/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    }
  }
}