{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"stacking.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.3;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n// This contract handles staking PKN to get access to premium features\r\ncontract PKNPremium {\r\n\r\n    uint256 constant LOCK_PERIOD = 365 days;\r\n\r\n    mapping(address => uint256) _pknStakedBy;\r\n    mapping(address => uint256) _unlockTimeOf;\r\n\r\n    IERC20 public immutable PKN;\r\n\r\n    event Deposit(address user, uint256 amount);\r\n    event Withdraw(address user, uint256 amount);\r\n    event Renew(address user, uint256 amount);\r\n\r\n    constructor(IERC20 _PKN) {\r\n        PKN = _PKN;\r\n    }\r\n\r\n    function pknStackedBy(address user) public view returns(uint256) {\r\n        return _pknStakedBy[user];\r\n    }\r\n\r\n    function unlockTimeOf(address user) public view returns(uint256) {\r\n        return _unlockTimeOf[user];\r\n    }\r\n\r\n    function isSubscriptionActive(address user) public view returns(bool) {\r\n        return block.timestamp < unlockTimeOf(user);\r\n    }\r\n\r\n    // Locks PKN for locking period\r\n    function deposit(uint256 _amount) public {\r\n        _unlockTimeOf[msg.sender] = _getUnlockTime(block.timestamp);\r\n        _pknStakedBy[msg.sender] += _amount;\r\n        PKN.transferFrom(msg.sender, address(this), _amount);\r\n\r\n        emit Deposit(msg.sender, _amount);\r\n    }\r\n\r\n    // Withdraw the unlocked PKN\r\n    function withdraw(uint256 _amount) public {\r\n        require(pknStackedBy(msg.sender) >= _amount, \"PKNPremium: Amount too high!\");\r\n        require(!isSubscriptionActive(msg.sender), \"PKNPremium: PKN not unlocked yet!\");\r\n\r\n        _pknStakedBy[msg.sender] -= _amount;\r\n        PKN.transfer(msg.sender, _amount);\r\n\r\n        emit Withdraw(msg.sender, _amount);\r\n    }\r\n\r\n    // renew an existing or expired subscription\r\n    function renew() public {\r\n        require(pknStackedBy(msg.sender) > 0, \"PKNPremium: No PKN stacked!\");\r\n\r\n        _unlockTimeOf[msg.sender] = _getUnlockTime(block.timestamp);\r\n\r\n        emit Renew(msg.sender, _pknStakedBy[msg.sender]);\r\n    }\r\n\r\n    function _getUnlockTime(uint256 startTime) internal pure returns(uint256) {\r\n        return startTime + LOCK_PERIOD;\r\n    }\r\n}"}}}