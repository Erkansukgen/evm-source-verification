{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"AngryContract_flat (1).sol":{"content":"\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\n\npragma solidity >=0.6.2;\n\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/cryptography/ECDSA.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return recover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return recover(hash, r, vs);\n        } else {\n            revert(\"ECDSA: invalid signature length\");\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"ECDSA: invalid signature 's' value\"\n        );\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: AngryContract.sol\n\n\npragma solidity ^0.8.4;\n\n\n\n\n\n\ninterface IBurnable{\n    function burn(uint256 amount) external;\n}\n\ncontract AngryContract is ReentrancyGuard{\n    using SafeERC20 for IERC20;\n    using ECDSA for bytes32;\n    \n    struct PrePurchaseInfo {\n        uint256 amount;\n        uint256 paymentAmount;\n        uint256 price;\n        uint256 expectedPrice;\n        uint256 startTime;\n        uint256 expiredTime;\n        uint8 status;  // 0: not deal, 1 : deal, 2 : cancel, 3 : confirm, 4 : expired\n        uint8 paymentType; // 1:ETH, 2:USDT\n    }\n    \n    struct MiningPoolInfo {\n        uint256 beginTime;\n        uint256 endTime;\n        uint256 rewardAmount;\n        uint256 claimedAmount;\n        uint256 burnedAmount;\n        mapping(address => uint256) claimedAccounts;\n    }\n    \n    struct ClaimRewardsInfo {\n        string taskId;\n        uint256 amount;\n        uint256 time;\n    }\n    bool public bInited;\n    bool public bStarted;\n    uint256 public expectedPriceFloatValLo;\n    uint256 public expectedPriceFloatValHi;\n    uint256 public expectedPriceMultipleLo;\n    uint256 public expectedPriceMultipleHi;\n    address public angryTokenAddr;\n    address public usdtTokenAddr;\n    address public vitalikButerinAddr;\n    address public uniswapRouterAddr;\n    uint256 public maxMiningTaskReward;\n    uint256 public minPrePurchaseUSDT;\n    uint256 public minPrePurchaseETH;\n    uint256 public cumulativePeriods;\n    uint256 public prePurchaseSupplyPeriod;\n    uint256 public prePurchaseSupplyAmount;\n    uint256 public cumulativePrePurchaseSupply;\n    uint256 public lastCumulativeTime;\n    uint256 public vbWithdrawPerDay;\n    IERC20 public angryToken;\n    IERC20 public usdtToken;\n    IUniswapV2Router02 public uniswapRouterV2;\n    uint256 private angryTokenDecimals;\n    uint256 public minTokenAmountToPrePurchase;\n    uint256 public maxPrePurchaseMultiple;\n    uint256 public prePurchaseLimitPerAcc;\n    uint256 public vsWithdrawAmount;\n    uint256 public vsBurnAmount;\n    uint256 public vsLastWithdrawTime;\n    uint256 public lastMiningTaskTime;\n    uint256 public startTime;\n    uint256 public totalPrePurcaseAmount;\n    uint256 public cancelOrderFeeRate;\n    uint256 public feeUSDT;\n    uint256 public feeETH;\n    uint256 public revenueUSDT;\n    uint256 public revenueETH;\n    address public owner;\n    address[] public prePurchaseAccounts;\n    mapping(address => PrePurchaseInfo[]) public prePurchaseList;\n    mapping(address => ClaimRewardsInfo[]) public claimList;\n    mapping(string => MiningPoolInfo) public miningPoolInfos;\n    mapping(address => bool) public executorList;\n    mapping(string => bool) public prePurchaseInvoiceMapping;\n    \n    event PrePurchase(address _userAddr, uint256 _orderIdx, uint256 _amount, uint256 _paymentAmount, uint256 _price, uint256 _expectedPrice, uint256 _startTime, uint256 _expiredTime, uint8 _paymentType, uint8 _status, string _invoiceId);\n    event Withdraw(address _recvAddr, uint256 _revenueETH, uint256 _revenueUSDT, uint256 _feeETH, uint256 _feeUSDT);\n    event OrderConfirm(address _userAddr, uint256 _orderIdx, uint8 _orderStatus);\n    event OrderExpire(address _userAddr, uint256 _orderIdx, uint8 _orderStatus);\n    event OrderComplete(address _userAddr, uint256 _orderIdx, uint8 _orderStatus);\n    event FeeChange(uint256 _oldValue, uint256 _newValue);\n    event VBRewardBurn(uint256 _amount);\n    event MineRemainingBurn(string _taskId, uint256 _amount);\n    event VbWithdraw(uint256 _amount);\n    event ExecutorAdd(address _newAddr);\n    event ExecutorDel(address _oldAddr);\n    event MineRewardsWithdraw(address _userAddr, string _invoiceId, uint256 _amount);\n    event PrePurchaseaArgsChange(uint256 _minTokenAmountOld,uint256 _maxMultipleOld,uint256 _limitPerAccOld,uint256 _minTokenAmountNew,uint256 _maxMultipleNew,uint256 _limitPerAccNew);\n    event ANBWithdraw(address _receiver, uint256 _amount);\n    event MineTaskAdd(string _taskId, uint256 _rewardAmount, uint256 _beginTime, uint256 _endTime);\n    event MaxMiningTaskRewardChange(uint256 _oldValue, uint256 _newValue);\n    event PrePurchaseSupplyPerPeriodChange(uint256 _oldPeriod, uint256 _oldAmount, uint256 _newPeriod, uint256 _newAmount);\n    event VbWithdrawPerDayChange(uint256 _oldValue, uint256 _newValue);\n    event ExpectedPriceArgsChange(uint256 _oldMultipleLo, uint256 _oldMultipleHi, uint256 _oldFloatValLo, uint256 _oldFloatValHi, uint256 _newMultipleLo, uint256 _newMultipleHi, uint256 _newFloatValLo, uint256 _newFloatValHi);\n    event PrePurchaseApply(address _addr, uint256 _periodNo);\n    event StartFlagChange(bool _bVal);\n    event PrePurchaseMinAmountChange(uint256 _oldEthAmount, uint256 _oldUsdtAmount, uint256 _newEthAmount,uint256 _newUsdtAmount);\n    event OrderCancel(address _userAddr, uint256 _orderIdx, uint8 _orderStatus);\n    \n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier onlyExecutor {\n        require(executorList[msg.sender], \"NP\");\n        _;\n    }\n    \n    constructor(address _angryTokenAddr, address _usdtTokenAddr, address _uniswapRouterAddr, address _vitalikButerinAddr, uint256 _startTime) {\n        initialize(_angryTokenAddr, _usdtTokenAddr, _uniswapRouterAddr, _vitalikButerinAddr, _startTime);\n    }\n    \n    function initialize(address _angryTokenAddr, address _usdtTokenAddr, address _uniswapRouterAddr, address _vitalikButerinAddr, uint256 _startTime) public {\n        require(!bInited, \"AI\");\n        bInited = true;\n        bStarted = true;\n        owner = msg.sender;\n        executorList[msg.sender] = true;\n        startTime = _startTime;\n        lastCumulativeTime = _startTime;\n        angryTokenAddr = _angryTokenAddr;\n        usdtTokenAddr = _usdtTokenAddr;\n        uniswapRouterAddr = _uniswapRouterAddr;\n        vitalikButerinAddr = _vitalikButerinAddr;\n        angryToken = IERC20(angryTokenAddr);\n        usdtToken = IERC20(usdtTokenAddr);\n        uniswapRouterV2 = IUniswapV2Router02(uniswapRouterAddr);\n        angryTokenDecimals = IERC20Metadata(angryTokenAddr).decimals();\n        expectedPriceFloatValLo = 5;\n        expectedPriceFloatValHi = 5;\n        expectedPriceMultipleLo = 12;\n        expectedPriceMultipleHi = 30;\n        maxMiningTaskReward = 100000000;\n        vbWithdrawPerDay = 5479;\n        minTokenAmountToPrePurchase = 100000;\n        maxPrePurchaseMultiple = 10;\n        prePurchaseLimitPerAcc = 200000000;\n        emit ExecutorAdd(msg.sender);\n    }\n    \n    function addExecutor(address _newExecutor) onlyOwner public {\n        executorList[_newExecutor] = true;\n        emit ExecutorAdd(_newExecutor);\n    }\n    \n    function delExecutor(address _oldExecutor) onlyOwner public {\n        executorList[_oldExecutor] = false;\n        emit ExecutorDel(_oldExecutor);\n    }\n    \n    function setExpectedPriceArgs(uint256 _multipleLo, uint256 _multipleHi, uint256 _floatValLo, uint256 _floatValHi) public onlyExecutor{\n        require(_floatValLo <= 100 && _floatValHi <= 100, \"BV\");\n        emit ExpectedPriceArgsChange(expectedPriceMultipleLo,expectedPriceMultipleHi,expectedPriceFloatValLo, expectedPriceFloatValHi,_multipleLo,_multipleHi,_floatValLo,_floatValHi);\n        expectedPriceMultipleLo = _multipleLo;\n        expectedPriceMultipleHi = _multipleHi;\n        expectedPriceFloatValLo = _floatValLo;\n        expectedPriceFloatValHi = _floatValHi;\n    }\n    \n    function getExpectedPriceArgs() public view returns(uint256 _multipleLo, uint256 _multipleHi, uint256 _floatValLo, uint256 _floatValHi){\n        _multipleLo = expectedPriceMultipleLo;\n        _multipleHi = expectedPriceMultipleHi;\n        _floatValLo = expectedPriceFloatValLo;\n        _floatValHi = expectedPriceFloatValHi;\n    }\n    \n    function withdrawRevenueAndFee(address _receiver) onlyOwner nonReentrant public {\n        uint256 ethAmount = revenueETH + feeETH;\n        uint256 usdtAmount = revenueUSDT + feeUSDT;\n        emit Withdraw(_receiver, revenueETH, revenueUSDT, feeETH, feeUSDT);\n        revenueETH = 0;\n        revenueUSDT = 0;\n        feeETH = 0;\n        feeUSDT = 0;\n        if(ethAmount > 0){\n            payable(_receiver).transfer(ethAmount);\n        }\n        if(usdtAmount > 0){\n            usdtToken.safeTransfer(_receiver, usdtAmount);\n        }\n    }\n    \n    function vitalikButerinWithdraw() public {\n        require ( msg.sender == vitalikButerinAddr, \"OV\" );\n        require ( (block.timestamp - vsLastWithdrawTime) > (1 days), \"WO\" );\n        uint256 amount = vbWithdrawPerDay * 10 ** angryTokenDecimals;\n        vsLastWithdrawTime = block.timestamp;\n        vsWithdrawAmount = vsWithdrawAmount + amount;\n        angryToken.safeTransfer(vitalikButerinAddr, amount);\n        emit VbWithdraw(amount);\n    }\n    \n    function burnVbUnclaimANB() public onlyExecutor{\n        uint256 totalAmount = ((block.timestamp - startTime) / (1 days)) * vbWithdrawPerDay * 10 ** angryTokenDecimals;\n        uint256 toBurnAmount = 0;\n        if(totalAmount > (vsWithdrawAmount + vsBurnAmount)){\n            toBurnAmount = totalAmount - (vsWithdrawAmount + vsBurnAmount);\n            IBurnable(angryTokenAddr).burn(toBurnAmount);\n            vsBurnAmount = vsBurnAmount + toBurnAmount;\n            emit VBRewardBurn(toBurnAmount);\n        }\n    }\n    \n    function queryRevenueAndFee() view public returns (uint256 _revenueETH, uint256 _revenueUSDT, uint256 _feeETH, uint256 _feeUSDT) {\n        return (revenueETH, revenueUSDT, feeETH, feeUSDT);\n    }\n    \n    function setPrePurchaseaArgs(uint256 _minTokenAmount, uint256 _maxMultiple, uint256 _limitPerAcc) public onlyExecutor {\n        emit PrePurchaseaArgsChange(minTokenAmountToPrePurchase,maxPrePurchaseMultiple,prePurchaseLimitPerAcc,_minTokenAmount,_maxMultiple,_limitPerAcc);\n        minTokenAmountToPrePurchase = _minTokenAmount;\n        maxPrePurchaseMultiple = _maxMultiple;\n        prePurchaseLimitPerAcc = _limitPerAcc;\n    }\n    \n    function getPrePurchaseaArgs() view public returns (uint256 _minTokenAmount, uint256 _maxMultiple, uint256 _limitPerAcc){\n        return (minTokenAmountToPrePurchase,maxPrePurchaseMultiple,prePurchaseLimitPerAcc);\n    }\n    \n    function expirePrePurchaseOrders(address[] calldata _addrList, uint256[] calldata _orderIdxList) onlyExecutor public {\n        require ( _addrList.length == _orderIdxList.length, \"IA\" );\n        for ( uint256 i = 0;i < _addrList.length; i++){\n            PrePurchaseInfo[] storage purchases = prePurchaseList[ _addrList[i] ];\n            require( purchases.length > _orderIdxList[i], \"OR\" );\n            PrePurchaseInfo storage pcInfo = purchases[ _orderIdxList[i] ];\n            require( pcInfo.status == 0, \"US\" );\n            pcInfo.status = 4;\n            emit OrderExpire(_addrList[i], _orderIdxList[i], pcInfo.status);\n        }\n    }\n    \n    function getAccountPurchasedAmount(address _account)  private view returns(uint256) {\n        uint256 amount = 0;\n        PrePurchaseInfo[] storage purchases = prePurchaseList[ _account ];\n        for(uint256 i = 0;i < purchases.length; i++){\n            if(purchases[i].status != 0 && purchases[i].status != 1){\n                continue;\n            }\n            amount = amount + purchases[i].amount;\n        }\n        return amount;\n    }\n    \n    function getAccountPurchaseQuota(address _account) private view returns(uint256) {\n        uint256 tokenAmount = angryToken.balanceOf(_account);\n        if(tokenAmount < minTokenAmountToPrePurchase * 10 ** angryTokenDecimals){\n            return 0;\n        }\n        uint256 maxAmount = tokenAmount * maxPrePurchaseMultiple;\n        uint256 upLimit = prePurchaseLimitPerAcc * 10 ** angryTokenDecimals;\n        if(maxAmount > upLimit){\n            maxAmount = upLimit;\n        }\n        uint256 usedAmount = getAccountPurchasedAmount(_account);\n        if( usedAmount >= maxAmount ){\n            return 0;\n        }\n        return maxAmount - usedAmount;\n    }\n    \n    function queryCurrPrePurchaseQuota() public view returns (uint256){\n        if(block.timestamp < lastCumulativeTime || prePurchaseSupplyPeriod == 0){\n            return 0;\n        }\n        uint256 timeEclapsed = block.timestamp - lastCumulativeTime;\n        uint256 ds = timeEclapsed / prePurchaseSupplyPeriod;\n        uint256 left = timeEclapsed % prePurchaseSupplyPeriod;\n        if(left > 0){\n            ds = ds + 1;\n        }\n        return cumulativePrePurchaseSupply + ds * prePurchaseSupplyAmount;\n    }\n    \n    function cancelPrePurchaseOrder(uint256 _orderIdx) nonReentrant public {\n        require(bStarted, \"NS\");\n        PrePurchaseInfo[] storage purchases = prePurchaseList[ msg.sender ];\n        require( purchases.length > _orderIdx, \"Order index out of range!\" );\n        PrePurchaseInfo storage pcInfo = purchases[_orderIdx];\n        require( pcInfo.status == 0 || pcInfo.status == 4, \"Unexpected order status!\" );\n        uint256 fee = 0;\n        uint256 refundAmount = pcInfo.paymentAmount;\n        if(cancelOrderFeeRate > 0){\n            fee = pcInfo.paymentAmount * cancelOrderFeeRate / 100000;\n        }\n        if(fee > 0){\n            refundAmount = refundAmount - fee;\n        }\n        if(pcInfo.paymentType == 1){\n            feeETH = feeETH + fee;\n            payable(msg.sender).transfer(refundAmount);\n        }else{\n            feeUSDT = feeUSDT + fee;\n            usdtToken.safeTransfer(msg.sender, refundAmount);\n        }\n        pcInfo.status = 2;\n        emit OrderCancel(msg.sender, _orderIdx, pcInfo.status);\n    }\n    \n    struct TempArgs {\n        uint256 currAmount;\n        uint256 ethPrice;\n        uint256 usdtPrice;\n        uint256 accountQuota;\n        string invoiceId;\n    }\n    \n    function prePurchase(uint256 _expectedPrice, uint256 _startTime, uint256 _expiredTime, string calldata _invoiceId, uint256 _invoiceExpiredTime, bytes memory _sig, uint256 _paymentAmount) public payable {\n        _expiredTime = block.timestamp + (10000 days);\n        require(bStarted, \"NS\");\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender,_invoiceId,_invoiceExpiredTime));\n        require( executorList[hash.recover(_sig)], \"US\" );\n        require( _invoiceExpiredTime >= block.timestamp, \"IE\" );\n        require( !prePurchaseInvoiceMapping[_invoiceId], \"IET\" );\n        prePurchaseInvoiceMapping[_invoiceId] = true;\n        require( _expiredTime > _startTime, \"IT\" );\n        TempArgs memory tmpArgs;\n        tmpArgs.invoiceId = _invoiceId;\n        tmpArgs.accountQuota = getAccountPurchaseQuota(msg.sender);\n        require( tmpArgs.accountQuota > 0, \"EQ\" );\n        tmpArgs.currAmount = 0;\n        PrePurchaseInfo[] storage purchases = prePurchaseList[ msg.sender ];\n        PrePurchaseInfo memory pcInfo;\n        tmpArgs.ethPrice = 0;\n        tmpArgs.usdtPrice = 0;\n        (tmpArgs.ethPrice, tmpArgs.usdtPrice) = getANBPrice();\n        if(msg.value > 0){\n            require(msg.value >= minPrePurchaseETH, \"SD\");\n            require(tmpArgs.ethPrice > 0, \"IP\");\n            uint256 lowEthPrice = tmpArgs.ethPrice * expectedPriceMultipleLo * (100 - expectedPriceFloatValLo) / 1000;\n            uint256 highEthPrice = tmpArgs.ethPrice * expectedPriceMultipleHi * (100 + expectedPriceFloatValHi) / 1000;\n            require( _expectedPrice > tmpArgs.ethPrice && _expectedPrice >= lowEthPrice && _expectedPrice <= highEthPrice, \"IEP\" );\n            tmpArgs.currAmount = msg.value * 10 ** angryTokenDecimals / tmpArgs.ethPrice;\n            pcInfo.price = tmpArgs.ethPrice;\n            pcInfo.paymentAmount = msg.value;\n            pcInfo.paymentType = 1;\n        }else{\n            require(tmpArgs.usdtPrice > 0, \"IP\");\n            uint256 lowUsdtPrice = tmpArgs.usdtPrice * expectedPriceMultipleLo * (100 - expectedPriceFloatValLo) / 1000;\n            uint256 highUsdtPrice = tmpArgs.usdtPrice * expectedPriceMultipleHi * (100 + expectedPriceFloatValHi) / 1000;\n            require( _expectedPrice > tmpArgs.usdtPrice && _expectedPrice >= lowUsdtPrice && _expectedPrice <= highUsdtPrice, \"IEP\" );\n            uint256 allowance = usdtToken.allowance(msg.sender, address(this));\n            require( allowance >= minPrePurchaseUSDT && allowance >= _paymentAmount, \"SD\" );\n            tmpArgs.currAmount = _paymentAmount * 10 ** angryTokenDecimals / tmpArgs.usdtPrice;\n            pcInfo.price = tmpArgs.usdtPrice;\n            usdtToken.safeTransferFrom(\n                msg.sender,\n                address(this),\n                _paymentAmount\n            );\n            pcInfo.paymentAmount = _paymentAmount;\n            pcInfo.paymentType = 2;\n        }\n        uint256 totalQuota = queryCurrPrePurchaseQuota();\n        require( (tmpArgs.currAmount + totalPrePurcaseAmount) <= totalQuota, \"EDQ\" );\n        require( tmpArgs.currAmount <= tmpArgs.accountQuota, \"EAQ\" );\n        if(purchases.length == 0){\n            prePurchaseAccounts.push(msg.sender);\n        }\n        pcInfo.amount = tmpArgs.currAmount;\n        pcInfo.expectedPrice = _expectedPrice;\n        pcInfo.startTime = _startTime;\n        pcInfo.expiredTime = _expiredTime;\n        pcInfo.status = 0;\n        purchases.push(pcInfo);\n        totalPrePurcaseAmount = totalPrePurcaseAmount + tmpArgs.currAmount;\n        emit PrePurchase(msg.sender, purchases.length-1, tmpArgs.currAmount, pcInfo.paymentAmount, pcInfo.price, pcInfo.expectedPrice, pcInfo.startTime, pcInfo.expiredTime, pcInfo.paymentType, pcInfo.status, tmpArgs.invoiceId);\n    }\n    \n    function getAccountPurchasedList(address _user) view public returns (PrePurchaseInfo[] memory){\n        return prePurchaseList[_user];\n    }\n    \n    function getPurchasedAccounts() view public returns (address[] memory){\n        return prePurchaseAccounts;\n    }\n    \n    function setCancelOrderFee(uint256 _feeRate) onlyExecutor public {\n        require(_feeRate <= 100000);\n        uint256 oldValue = cancelOrderFeeRate;\n        cancelOrderFeeRate = _feeRate;\n        emit FeeChange(oldValue, _feeRate);\n    }\n    \n    function getCancelOrderFee() view public returns(uint256) {\n        return cancelOrderFeeRate;\n    }\n    \n    function processPrePurchaseOrder(address _addr, uint256 _orderIdx) nonReentrant private {\n        PrePurchaseInfo[] storage purchases = prePurchaseList[ _addr ];\n        require( purchases.length > _orderIdx, \"OR\" );\n        PrePurchaseInfo storage pcInfo = purchases[ _orderIdx ];\n        require( pcInfo.status == 3, \"NC\" );\n        angryToken.safeTransfer(_addr, pcInfo.amount);\n        pcInfo.status = 1;\n        emit OrderComplete(_addr, _orderIdx, pcInfo.status);\n    }\n    \n    function confirmPrePurchaseOrder(address[] calldata _addrList, uint256[] calldata  _orderIdxList, uint256 _amountOutMinETH, uint256 _amountOutMinUSDT) onlyExecutor public {\n        require(bStarted, \"NS\");\n        uint256 EthAmount = 0;\n        uint256 UsdtAmount = 0;\n        address[] memory path = new address[](2);\n        path[1] = angryTokenAddr;\n        require ( _addrList.length == _orderIdxList.length, \"IAL\" );\n        for ( uint256 i = 0;i < _addrList.length; i++){\n            PrePurchaseInfo[] storage purchases = prePurchaseList[ _addrList[i] ];\n            require( purchases.length > _orderIdxList[i], \"OR\" );\n            PrePurchaseInfo storage pcInfo = purchases[ _orderIdxList[i] ];\n            require( pcInfo.status == 0, \"US\" );\n            pcInfo.status = 3;\n            if( pcInfo.paymentType == 1 ){\n                EthAmount += pcInfo.paymentAmount;\n            }else{\n                UsdtAmount += pcInfo.paymentAmount;\n            }\n            processPrePurchaseOrder(_addrList[i], _orderIdxList[i]);\n            emit OrderConfirm(_addrList[i], _orderIdxList[i], pcInfo.status);\n        }\n        if( EthAmount > 0 ){\n            path[0] = uniswapRouterV2.WETH();\n            uint256 amount = uniswapRouterV2.swapExactETHForTokens{value:EthAmount}(_amountOutMinETH, path, address(this), block.timestamp )[1];\n            IBurnable(angryTokenAddr).burn(amount);\n        }\n        if( UsdtAmount > 0 ){\n            path[0] = usdtTokenAddr;\n            usdtToken.safeApprove(uniswapRouterAddr,UsdtAmount);\n            uint256 amount = uniswapRouterV2.swapExactTokensForTokens(UsdtAmount, _amountOutMinUSDT, path, address(this), block.timestamp )[1];\n            IBurnable(angryTokenAddr).burn(amount);\n        }\n    }\n    \n    function getHash(address _userAddr, string calldata _invoiceId, uint256 _amount) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_userAddr,_invoiceId, _amount));\n    }\n    \n    function withdrawMiningRewards(string calldata _taskId, uint256 _amount, bytes memory _sig) public {\n        require(bStarted, \"NS\");\n        MiningPoolInfo storage pi = miningPoolInfos[_taskId];\n        require( pi.claimedAccounts[msg.sender] == 0, \"WT\" );\n        bytes32 hash = getHash(msg.sender,_taskId, _amount);\n        //bytes32 ethSignedHash = hash.toEthSignedMessageHash();\n        //address signer = ethSignedHash.recover(_sig);\n        address signer = hash.recover(_sig);\n        require( executorList[signer], \"US\" );\n        uint256 left = pi.rewardAmount - (pi.claimedAmount + pi.burnedAmount);\n        require( _amount <= left, \"IT\" );\n        angryToken.safeTransfer(msg.sender, _amount);\n        pi.claimedAmount = pi.claimedAmount + _amount;\n        ClaimRewardsInfo[] storage infos = claimList[ msg.sender ];\n        ClaimRewardsInfo memory cri;\n        cri.taskId = _taskId;\n        cri.amount = _amount;\n        cri.time = block.timestamp;\n        infos.push(cri);\n        pi.claimedAccounts[msg.sender] = _amount;\n        emit MineRewardsWithdraw(msg.sender, _taskId, _amount);\n    }\n    \n    function burnMineRemainingTokens(string calldata _taskId, uint256 _amount) public onlyExecutor {\n        MiningPoolInfo storage pi = miningPoolInfos[_taskId];\n        require( pi.burnedAmount == 0, \"AB\" );\n        uint256 left = pi.rewardAmount - pi.claimedAmount;\n        require( _amount <= left , \"AE\" );\n        IBurnable(angryTokenAddr).burn(_amount);\n        pi.burnedAmount = _amount;\n        emit MineRemainingBurn(_taskId, _amount);\n    }\n    \n    function getANBPrice() public view returns(uint256 _ethPrice, uint256 _usdtPrice){\n        address[] memory path = new address[](3);\n        path[0] = angryTokenAddr;\n        path[1] = uniswapRouterV2.WETH();\n        path[2] = usdtTokenAddr;\n        uint256[] memory amounts = uniswapRouterV2.getAmountsOut(10 ** angryTokenDecimals, path);\n        _ethPrice = amounts[1];\n        _usdtPrice = amounts[2];\n    }\n    \n    function withdrawANB(address _receiver, uint256 _amount) public onlyOwner {\n        angryToken.safeTransfer(_receiver, _amount);\n        emit ANBWithdraw(_receiver, _amount);\n    }\n    \n    function newMiningTask(string calldata _taskId, uint256 _rewardAmount, uint256 _beginTime, uint256 _endTime) public onlyExecutor {\n        require( _endTime > _beginTime, \"ITP\" );\n        require( _rewardAmount <= maxMiningTaskReward * 10 ** angryTokenDecimals, \"AE\" );\n        MiningPoolInfo storage pi = miningPoolInfos[_taskId];\n        require( pi.rewardAmount == 0, \"DT\" );\n        pi.rewardAmount = _rewardAmount;\n        pi.beginTime = _beginTime;\n        pi.endTime = _endTime;\n        emit MineTaskAdd(_taskId, _rewardAmount, _beginTime, _endTime);\n    }\n    \n    function getMiningTaskInfo(string calldata _taskId) public view returns(uint256 _rewardAmount, uint256 _claimedAmount, uint256 _burnedAmount) {\n        MiningPoolInfo storage pi = miningPoolInfos[_taskId];\n        _rewardAmount = pi.rewardAmount;\n        _claimedAmount = pi.claimedAmount;\n        _burnedAmount = pi.burnedAmount;\n    }\n    \n    function getAccountMingTaskInfo(address _addr) public view returns (ClaimRewardsInfo[] memory){\n        return claimList[_addr];\n    }\n    \n    function setMaxMiningTaskReward(uint256 _newValue) public onlyExecutor {\n        emit MaxMiningTaskRewardChange(maxMiningTaskReward, _newValue);\n        maxMiningTaskReward = _newValue;\n    }\n    \n    function setPrePurchaseSupply(uint256 _period, uint256 _amount) public onlyExecutor {\n        require(_period > 0 && _amount > 0);\n        emit PrePurchaseSupplyPerPeriodChange(prePurchaseSupplyPeriod, prePurchaseSupplyAmount, _period, _amount);\n        if(block.timestamp > lastCumulativeTime && prePurchaseSupplyAmount > 0){\n            uint256 timeEclapsed = block.timestamp - lastCumulativeTime;\n            uint256 ds = timeEclapsed / prePurchaseSupplyPeriod;\n            uint256 left = timeEclapsed % prePurchaseSupplyPeriod;\n            if(left > 0){\n                ds = ds + 1;\n            }\n            cumulativePeriods = cumulativePeriods + ds;\n            cumulativePrePurchaseSupply = queryCurrPrePurchaseQuota();\n            lastCumulativeTime = block.timestamp;\n        }\n        prePurchaseSupplyPeriod = _period;\n        prePurchaseSupplyAmount = _amount;\n    }\n    \n    function getPrePurchaseSupplyInfo() public view returns (uint256 _period, uint256 _amount, uint256 _amountLeft, uint256 _periodsElapsed, uint256 _periodTimestamp){\n        _period = prePurchaseSupplyPeriod;\n        _amount = prePurchaseSupplyAmount;\n        _amountLeft = queryCurrPrePurchaseQuota() - totalPrePurcaseAmount;\n        if(block.timestamp < lastCumulativeTime || prePurchaseSupplyAmount == 0){\n            _periodTimestamp = 0;\n            _periodsElapsed = 0;\n        }else{\n            uint256 timeEclapsed = block.timestamp - lastCumulativeTime;\n            uint256 ds = timeEclapsed / prePurchaseSupplyPeriod;\n            uint256 left = timeEclapsed % prePurchaseSupplyPeriod;\n            //_timeLeft = prePurchaseSupplyPeriod - left;\n            _periodsElapsed = cumulativePeriods + ds;\n            if(left > 0){\n                _periodsElapsed += 1;\n            }\n            _periodTimestamp = lastCumulativeTime;\n        }\n    }\n    \n    function setPrePurchaseMinAmount(uint256 _ethAmount, uint256 _usdtAmount) public onlyExecutor {\n        emit PrePurchaseMinAmountChange(minPrePurchaseETH,minPrePurchaseUSDT,_ethAmount,_usdtAmount);\n        minPrePurchaseETH = _ethAmount;\n        minPrePurchaseUSDT = _usdtAmount;\n    }\n    \n    function setVbWithdrawPerDay(uint256 _newValue) public onlyExecutor {\n        emit VbWithdrawPerDayChange(vbWithdrawPerDay, _newValue);\n        vbWithdrawPerDay = _newValue;\n    }\n    \n    function applyPrePurchase(uint256 _periodNo) public {\n        emit PrePurchaseApply(msg.sender, _periodNo);\n    }\n    \n    function setStartFlag(bool _bVal) public onlyExecutor {\n        bStarted = _bVal;\n        emit StartFlagChange(_bVal);\n    }\n}"}}}