{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/KyberUtils3.sol": {
      "content": "pragma solidity >=0.6.6;\r\n\r\n\r\ninterface IInternalKyberReserve {\r\n    function kyberNetwork() external view returns (address);\r\n\r\n    function conversionRatesContract() external view returns (address);\r\n}\r\n\r\n\r\ncontract KyberUtils3 {\r\n    function getConversionRateContractForReserveX(IInternalKyberReserve reserve)\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        try reserve.conversionRatesContract() returns (address ratesContract) {\r\n            if (ratesContract != address(0)) return ratesContract;\r\n        } catch {\r\n            return address(0);\r\n        }\r\n\r\n        return address(0);\r\n    }\r\n\r\n    function isKyberReserveX(\r\n        address kyberNetwork,\r\n        IInternalKyberReserve reserve\r\n    ) external view returns (bool) {\r\n        try reserve.kyberNetwork() returns (address otherKyberNetwork) {\r\n            if (otherKyberNetwork == kyberNetwork) return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"
    }
  }
}