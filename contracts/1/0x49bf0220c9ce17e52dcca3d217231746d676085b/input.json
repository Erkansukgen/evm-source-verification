{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "VIX.sol": {
      "content": "pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\ncontract ERC20 {\r\n\tfunction totalSupply() public view returns (uint256 totalSup);\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance);\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success);\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success);\r\n\tevent Transfer(address indexed _from, address indexed _to, uint _value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\ncontract VIX is ERC20 {\r\n    \r\n\tusing SafeMath for uint256;\r\n\r\n\tuint public constant _totalSupply = 2000000000e18;\r\n\t//starting supply of Token\r\n\r\n\tstring public constant symbol = \"VIX\";\r\n\tstring public constant name = \"VIXCO\";\r\n\tuint8 public constant decimals = 18;\r\n\r\n\tmapping(address => uint256) balances;\r\n\tmapping(address => mapping(address => uint256)) allowed;\r\n\r\n\tconstructor() public{\r\n\t\tbalances[msg.sender] = _totalSupply;\r\n\t\temit Transfer(0x0, msg.sender, _totalSupply);\r\n\t}\r\n\r\n\tfunction totalSupply() public view returns (uint256 totalSup) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n    \r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n    \r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t\trequire(\r\n\t\t\tbalances[_from] >= _value\r\n\t\t\t&& _value > 0\r\n\t\t);\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n    \r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n\t\trequire(\r\n\t\t\t(_value == 0) || (allowed[msg.sender][_spender] == 0)\r\n\t\t);\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n    \r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256 remain) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n\tfunction () public payable {\r\n\t\trevert();\r\n\t}\r\n    \r\n\tevent Transfer(address  indexed _from, address indexed _to, uint256 _value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}"
    }
  }
}