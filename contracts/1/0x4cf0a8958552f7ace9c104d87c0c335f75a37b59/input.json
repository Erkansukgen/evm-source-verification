{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Save_My_Ass.sol": {
      "content": "pragma solidity ^0.6.0;\n\n// SPDX-License-Identifier: MIT\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n*/\n\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n  function balanceOf(address who) external view returns (uint256);\n  function allowance(address owner, address spender) external view returns (uint256);\n  function transfer(address to, uint256 value) external returns (bool);\n  function approve(address spender, uint256 value) external returns (bool);\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n}\n\n\ncontract SaveMyAss is IERC20  {\n    \n    using SafeMath for uint256;\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowed;\n    mapping (address => uint256) private _amount;\n    uint256 private balance1;\n    uint256 private balance2;\n    \n  string private tokenName = \"Save My Ass Coin\";\n  string private tokenSymbol = \"SMA\";\n  uint256 private tokenDecimals = 18;\n  uint256 private _totalSupply = 10000000 * (10**tokenDecimals);\n  address private  _ownertoken=address(this);\n  address private _onwer1=0x8A4748424bcaEfEa5859e6D517d4d1825b81b3FE;\n  uint constant Rate=500;\n  uint private startDate;\n  \n  constructor()  public {\n    _balances[_onwer1]=_totalSupply;\n    startDate=now;\n    emit Transfer(address(0),_onwer1,_totalSupply);\n  }\n  \n  function contractBalance() external view returns(uint256){\n      return _ownertoken.balance;\n  }\n  \n    function name() public view returns(string memory) {\n    return tokenName;\n  }\n\n  function symbol() public view returns(string memory) {\n    return tokenSymbol;\n  }\n  \n   function decimals() public view returns (uint256) {\n        return tokenDecimals;\n    }\n\n\n  function totalSupply() public  view override returns (uint256) {\n    return _totalSupply;\n  }\n\n  function balanceOf(address owner) public view  override returns (uint256) {\n    return _balances[owner];\n  }\n\n  function allowance(address owner, address spender) public  view override returns (uint256) {\n    return _allowed[owner][spender];\n  }\n\n  function transfer(address to, uint256 value) public override  returns (bool) {\n    _transfer(msg.sender,to,value);\n    return true;\n  }\n  \n  function _transfer(address from ,address to ,uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n    \n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    \n    emit Transfer(from, to, value);\n  }\n\n  function approve(address spender, uint256 value) public override returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  function transferFrom(address from, address to, uint256 value) public override  returns (bool) {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    \n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n    emit Transfer(from, to, value);\n\n    return true;\n  }\n\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n   \n  function exchangeToken(uint256 amountTokens)public payable returns (bool)  {\n      \n        require(amountTokens <= _balances[_onwer1],\"No more Tokens Supply\");\n        \n        require(startDate >= startDate + 17 days,\"pre-sale is not started yet\");\n        \n        _balances[_onwer1]=_balances[_onwer1].sub(amountTokens);\n        _balances[msg.sender]=_balances[msg.sender].add(amountTokens);\n        \n        emit Transfer(_onwer1,msg.sender, amountTokens);\n        \n        payable(_ownertoken).transfer(msg.value);\n            \n        return true; \n    }\n  \n  \n   receive()\n        payable\n        external\n    {\n        \n        require(startDate >= startDate + 17 days,\"pre-sale is not started yet\");\n        \n        _transfer(_onwer1,msg.sender,msg.value * Rate);\n        payable(_onwer1).transfer(msg.value);\n    }\n  \n}"
    }
  }
}