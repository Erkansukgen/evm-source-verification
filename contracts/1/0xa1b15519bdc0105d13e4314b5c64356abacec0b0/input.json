{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"/Context.sol":{"content":"pragma solidity >=0.6.6;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor ()  public { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"},"/Ownable.sol":{"content":"pragma solidity >=0.6.6;\n\nimport \"/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () public {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"},"browser/UniswapExample.sol":{"content":"pragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\nimport \"/Ownable.sol\";\ninterface UniswapV2 {\n\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\n  \n}\ninterface ERC20 {\n\n    function balanceOf(address _owner) external view returns(uint balance);\n\n    function transfer(address _to, uint _value) external returns(bool success);\n\n    function approve(address _spender, uint _value) external returns(bool success);\n\n    function allowance(address _owner, address _spender) external view returns(uint remaining);\n\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n\n    function withdraw(uint256 wad) external;\n}\ncontract UniswapExample is Ownable() {\n  UniswapV2 public uniswapRouter;\n \n\n  constructor() public Ownable() {\n    uniswapRouter = UniswapV2(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n  }\n\n  function convertEthToToken(uint256 amount, uint256 msgvalue, address[] memory path) public onlyOwner  {\n    uint deadline = block.timestamp + 150; // using 'now' for convenience, for mainnet pass deadline from frontend!\n   uniswapRouter.swapExactETHForTokens{value: msgvalue }(amount, path, address(this), deadline);\n     \n  }\n  \n   function convertTokenToEth( address[] memory path) public onlyOwner  {\n    uint deadline = block.timestamp + 150; // using 'now' for convenience, for mainnet pass deadline from frontend!\n  ERC20 token = ERC20(path[0]);\n  if (token.allowance(address(this), address(uniswapRouter)) == 0){\n\n   token.approve(address(uniswapRouter), 100000000000000000);\n  }\n    uniswapRouter.swapExactTokensForETH(token.balanceOf(address(this)),1, path, address(this), deadline);\n   \n  }\n  \n  function withdraw(address token) public onlyOwner returns(bool) {\n\n\n\n    //for ether withdrawal from smart contract\n        if (address(token) == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n            uint256 amount = address(this).balance;\n\n            msg.sender.transfer(amount);\n\n        }\n        //for ether withdrawal from smart contract. Note on dividing by zero: likely will error.\n        else {\n            ERC20 tokenToken = ERC20(token);\n            uint256 newTokenBalance = tokenToken.balanceOf(address(this));\n            require(tokenToken.transfer(msg.sender, (newTokenBalance)));\n\n        }\n\n        return true;\n    }\n  // important to receive ETH\n  receive() payable external {}\n}"}}}