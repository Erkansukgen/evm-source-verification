{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/Sniper.sol": {
      "content": "pragma solidity ^0.7.2;\r\n//\"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\"\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ninterface IWETH {\r\n    function balanceOf(address) external view returns (uint);\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}\r\n\r\ninterface IRouter{\r\n     function WETH() external view returns (address);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\r\n            ))));\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n    \r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n    \r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nlibrary TransferHelper {\r\n    \r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n    \r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\nabstract contract Whitelist is Owned {\r\n    \r\n    event MemberAdded(address member);\r\n    event MemberRemoved(address member);\r\n\r\n    mapping (address => bool) public members;\r\n    address[] whitelisted;\r\n    \r\n    modifier onlyWhitelisted() \r\n    {\r\n        require(isMember(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isMember(address _member)\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        return members[_member];\r\n    }\r\n    \r\n    function getAllMember()\r\n      external view \r\n      onlyOwner\r\n    returns (address[] memory )\r\n    {\r\n         return whitelisted;\r\n        \r\n    }\r\n\r\n    function addMember(address _member)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            !isMember(_member),\r\n            \"Address is member already.\"\r\n        );\r\n\r\n        members[_member] = true;\r\n        whitelisted.push(_member);\r\n        emit MemberAdded(_member);\r\n    }\r\n\r\n    function removeMember(address _member)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            isMember(_member),\r\n            \"Not member of whitelist.\"\r\n        );\r\n\r\n        for(uint i = 0; i<whitelisted.length; i++){\r\n          if(_member == whitelisted[i]){\r\n             delete whitelisted[i];\r\n             break;\r\n          } \r\n        }\r\n        delete members[_member];\r\n        emit MemberRemoved(_member);\r\n    }\r\n}\r\n\r\ncontract Router is IRouter, Whitelist{\r\n\r\n    address public immutable override WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    \r\n    address factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    \r\n    modifier ensure(uint deadline) {\r\n        require(deadline >= block.timestamp, 'Router: EXPIRED');\r\n        _;\r\n    }\r\n    \r\n    constructor() Owned(msg.sender) {\r\n    }\r\n    \r\n    function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (address input, address output) = (path[i], path[i + 1]);\r\n            (address token0,) = UniswapV2Library.sortTokens(input, output);\r\n            uint amountOut = amounts[i + 1];\r\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\r\n            address to = i < path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2]) : _to;\r\n            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output)).swap(\r\n                amount0Out, amount1Out, to, new bytes(0)\r\n            );\r\n        }\r\n    }\r\n    \r\n    function swapExactETHForTokens(uint amountIn, uint amountOutMin, address[] calldata path, uint deadline)\r\n    external \r\n    ensure(deadline)\r\n    onlyWhitelisted returns (uint[] memory amounts){\r\n        require(path[0] == WETH, 'Router: INVALID_PATH');\r\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\r\n        require(amounts[amounts.length - 1] >= amountOutMin, 'Router: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]));\r\n        _swap(amounts, path, address(this));\r\n        \r\n    }\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, uint deadline)\r\n    external \r\n    ensure(deadline)\r\n    onlyWhitelisted returns (uint[] memory amounts){\r\n        require(path[path.length - 1] == WETH, 'Router: INVALID_PATH');\r\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\r\n        require(amounts[amounts.length - 1] >= amountOutMin, 'Router: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        TransferHelper.safeTransfer(\r\n            path[0], UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\r\n        );\r\n        _swap(amounts, path, address(this));\r\n    }\r\n    \r\n    function swapETsFETH(address[] calldata path, uint deadline)\r\n    external \r\n    ensure(deadline) \r\n    onlyWhitelisted returns (uint[] memory amounts){\r\n        require(path[path.length - 1] == WETH, 'Router: INVALID_PATH');\r\n        uint amountIn = IERC20(path[0]).balanceOf(address(this));\r\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\r\n        require(amounts[amounts.length - 1] > 0, 'Router: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        TransferHelper.safeTransfer(\r\n            path[0], UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\r\n        );\r\n        _swap(amounts, path, address(this));\r\n    }\r\n    \r\n    function calculatePercentage( uint theNumber, uint bp) public pure returns  (uint) {\r\n        return theNumber * bp / 10000;\r\n    }\r\n    \r\n    \r\n    function swapETsFETHConfigurableAmount(address[] calldata path, uint bp, uint deadline)\r\n    external \r\n    ensure(deadline) \r\n    onlyWhitelisted returns (uint[] memory amounts){\r\n        require(path[path.length - 1] == WETH, 'Router: INVALID_PATH');\r\n        uint amountIn = IERC20(path[0]).balanceOf(address(this));\r\n        uint inputAmount = calculatePercentage(amountIn, bp);\r\n        amounts = UniswapV2Library.getAmountsOut(factory, inputAmount, path);\r\n        require(amounts[amounts.length - 1] > 0, 'Router: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        TransferHelper.safeTransfer(\r\n            path[0], UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\r\n        );\r\n        _swap(amounts, path, address(this));\r\n    }\r\n    \r\n    // Deposit WETH to contract\r\n    function depositWETH() external payable{\r\n        IWETH(WETH).deposit{value: msg.value}();\r\n    }\r\n\r\n    // receive() payable external { require(msg.sender == WETH, 'WETH_ONLY'); }\r\n    receive() payable external {}\r\n\r\n     // Withdraw WETH to address.\r\n    function transferWETH(address payable to, uint amountIn) external onlyOwner returns (bool){\r\n        uint wethBalance = IWETH(WETH).balanceOf(address(this));\r\n        require(wethBalance > 0 , 'Router: INSUFFICIENT_BALANCE');\r\n        require(wethBalance >= amountIn, 'Router: INSUFFICIENT_BALANCE');\r\n        if (wethBalance > 0 && wethBalance >= amountIn){\r\n            IWETH(WETH).withdraw(amountIn);\r\n            (bool success,) = to.call{value: amountIn}('');\r\n            require(success, 'WITHDRAW_TO_CALL_FAILED');\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    // Show the contract WETH balance\r\n    function balanceOfWETH() external view onlyOwner returns (uint){\r\n        uint wethBalance = IWETH(WETH).balanceOf(address(this));\r\n        return wethBalance;\r\n    }\r\n\r\n    function checkErc20TokenBalance(address token) external view onlyWhitelisted returns(uint) {\r\n        IERC20 erc20Token = IERC20(token);\r\n        return erc20Token.balanceOf(address(this));\r\n    }\r\n    \r\n    function transferErc20Token(address token, address to) external onlyOwner returns (bool){\r\n        IERC20 erc20Token = IERC20(token);\r\n        uint tokenBalance = erc20Token.balanceOf(address(this));\r\n        require(tokenBalance > 0 , 'Router: INSUFFICIENT_BALANCE');\r\n        if (tokenBalance > 0){\r\n            bool success= erc20Token.transfer(to, tokenBalance);\r\n            require(success, 'WITHDRAW_TO_CALL_FAILED');\r\n        }\r\n        return true;\r\n    }\r\n}\r\n"
    }
  }
}