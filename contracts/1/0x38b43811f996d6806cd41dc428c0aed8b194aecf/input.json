{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/EtherWallet.sol":{"content":"pragma solidity ^0.6.4;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\ncontract EtherWallet is Ownable {\r\n\r\n\r\n    constructor (address payable _owner,address _agent, address _switchWalletAdmin) public {\r\n        owner = _owner;\r\n        contractAgent = _agent;\r\n        switchWalletAdmin = _switchWalletAdmin;\r\n\r\n    }\r\n    \r\n    receive() external payable { \r\n        \r\n      \r\n        \r\n     }\r\n    \r\n    \r\n    function sendEthers(uint amount, address payable receiver) onlyOwner public returns (uint,address){\r\n       uint etherBalance =  address(this).balance;\r\n       require(etherBalance != 0, \"EtherWallet: ether balance cannot be zero\");\r\n       require(etherBalance>=amount,\"EtherWallet: insufficient balance\");\r\n       receiver.transfer(amount);\r\n       return (amount,owner);\r\n    }\r\n    \r\n    function etherBalanceOf() public view  returns (uint amount){\r\n        return address(this).balance;\r\n    }\r\n    \r\n    \r\n     function sendTokens(uint amount,address payable receiver,address tokenAddress)onlyOwner public returns (uint,address,address){\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint tokenBalance = token.balanceOf(address(this));\r\n        require(tokenBalance != 0, \"EtherWallet: token balance cannot be zero\");\r\n        require(tokenBalance>=amount,\"EtherWallet: insufficient balance\");\r\n        token.transfer(receiver, amount);\r\n       return (amount,address(this),receiver);\r\n    }\r\n    \r\n    \r\n    function tokenBalanceOf(address tokenAddress) external view  returns (uint amount){\r\n        IERC20 token = IERC20(tokenAddress);\r\n        return token.balanceOf(address(this));\r\n    }\r\n    \r\n     function tokenDecimals(address tokenAddress) public view  returns (uint8 decimals){\r\n        IERC20 token = IERC20(tokenAddress);\r\n        return token.decimals();\r\n    }\r\n}"},"browser/IERC20.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"browser/IEtherWallet.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the EtherWallet\r\n */\r\ninterface IEtherWallet {\r\n  \r\n    /**\r\n     * @dev Transfers  ethers to address\r\n     */\r\n\r\n    function sendEthers(uint amount, address payable receiver) external returns (uint,address);\r\n\r\n     /**\r\n     * @dev Returns the ether balance for this contract\r\n     */\r\n    function etherBalanceOf() external view returns (uint);\r\n    \r\n    \r\n     /**\r\n     * @dev transfers  tokens to address\r\n     */\r\n\r\n    function sendTokens(uint amount, address payable receiver,address tokenAddress) external returns (uint,address,address);\r\n    \r\n     /**\r\n     * @dev Returns token balnce for this contract\r\n     */\r\n    function tokenBalanceOf(address tokenAddress) external view  returns (uint);\r\n    \r\n    \r\n    /**\r\n     * @dev Returns decimal value for token contract\r\n     */\r\n\r\n    function tokenDecimals(address tokenAddress) external view  returns (uint8 );\r\n    \r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    //event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    //event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"browser/Ownable.sol":{"content":"pragma solidity ^0.6.4;\r\n\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n  address payable public owner;\r\n  address public contractAgent;\r\n  address public switchWalletAdmin;\r\n\r\n\r\n\r\n  modifier onlyOwner() {\r\n      require(msg.sender == owner || msg.sender==contractAgent, \"Unauthorized access to contract\");\r\n\r\n      _;\r\n  }\r\n  \r\n  modifier onlySwitchWalletOrOwner() {\r\n    \r\n     require(msg.sender == owner || msg.sender==contractAgent || msg.sender == switchWalletAdmin, \"Unauthorized access to contract\");\r\n      _;\r\n  }\r\n  \r\n  \r\n\r\n  function transferOwnership( address payable newOwner) public onlySwitchWalletOrOwner {\r\n    if (newOwner != address(0))\r\n    { \r\n        owner = newOwner;\r\n        \r\n        \r\n        \r\n    }\r\n  }\r\n  \r\n  function transferAgent( address payable newAgent) public onlySwitchWalletOrOwner {\r\n    if (newAgent != address(0))\r\n    { \r\n        contractAgent = newAgent;\r\n        \r\n        \r\n        \r\n    }\r\n  }\r\n\r\n}"},"browser/SafeMath.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"},"browser/SwitchWalletMerchant.sol":{"content":"pragma solidity ^0.6.4;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./SwitchWalletMerchantWallet.sol\";\r\n\r\n\r\ncontract SwitchWalletMerchant is Ownable {\r\n\r\n\r\n    //A map of a merchant wallet contract\r\n    mapping(string => address) public merchantWallets;\r\n\r\n    event CreateMerchantWalletEvent ( \r\n        string clientId,\r\n        address merchantAddress,\r\n        address merchantWalletAddress\r\n    );\r\n    \r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        switchWalletAdmin = msg.sender;\r\n    }\r\n    \r\n    \r\n    function createMerchantWallet(string calldata clientId,address payable  merchantAddress) external onlyOwner returns(bool) {\r\n        require( merchantWallets[clientId]==address(0) , \"Switch Wallet Merchant: Merchant Wallet Has Already Been Created\");\r\n        SwitchWalletMerchantWallet merchantWallet = new SwitchWalletMerchantWallet(switchWalletAdmin,merchantAddress);\r\n        merchantWallets[clientId] = address(merchantWallet);\r\n        emit CreateMerchantWalletEvent(clientId,merchantAddress,address(merchantWallet));\r\n        return true;\r\n    }\r\n    \r\n    \r\n    \r\n}"},"browser/SwitchWalletMerchantWallet.sol":{"content":"pragma solidity ^0.6.4;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./Ownable.sol\";\r\n//import \"./IERC20Wallet.sol\";\r\n//import \"./ERC20Wallet.sol\";\r\n\r\nimport \"./IEtherWallet.sol\";\r\nimport \"./EtherWallet.sol\";\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract SwitchWalletMerchantWallet is Ownable {\r\n\r\n    string[] public clients;\r\n\r\n   \r\n    //A map of a user's ether wallets\r\n    mapping(string => address[]) public etherContractWallets;\r\n    mapping(address => string) public contractWalletOwners;\r\n\r\n\r\n    event WalletCreationEvent ( \r\n        address contractWalletAddress,\r\n        address merchantWalletAddress,\r\n        string clientId\r\n    );\r\n    \r\n    \r\n    event TokenSweepEvent (\r\n        uint256 amount,\r\n        address tokenAddress,\r\n        address destinationAddress,\r\n        address merchantWalletAddress,\r\n        address contractWalletAddress,\r\n        string clientId\r\n    );\r\n    \r\n    event EtherSweepEvent ( \r\n        uint256 amount,\r\n        address destinationAddress,\r\n        address merchantWalletAddress,\r\n        address contractWalletAddress,\r\n        string clientId\r\n\r\n    );\r\n    \r\n\r\n    constructor(address _switchWalletAdmin,address payable _owner) public {\r\n        owner = _owner;\r\n        switchWalletAdmin = _switchWalletAdmin;\r\n    }\r\n\r\n    function createEtherWallet(string calldata clientId) onlyOwner external returns (bool) {\r\n        require(etherContractWallets[clientId].length == 0, \"MerchantWallet: Ether wallet exists\");\r\n        createWallet(clientId);\r\n        clients.push(clientId);\r\n        return true;\r\n    }\r\n\r\n    function addNewEtherWallet(string calldata clientId) onlyOwner external returns (bool) {\r\n        createWallet(clientId);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function createWallet(string memory clientId) internal {\r\n        EtherWallet etherWallet = new EtherWallet(owner, address(this), switchWalletAdmin);\r\n        etherContractWallets[clientId].push(address(etherWallet));\r\n        contractWalletOwners[address(etherWallet)] = clientId;\r\n        emit WalletCreationEvent(address(etherWallet),address(this), clientId);\r\n    }\r\n    \r\n    \r\n     \r\n    \r\n    function sweepEthers(address walletContractAddress)onlyOwner external returns(bool){\r\n        string memory clientId = contractWalletOwners[walletContractAddress];\r\n        require( keccak256( bytes(clientId)) != keccak256(bytes(\"\")),\"MerchantWallet: Contract is not a switch wallet ether wallet contract \");\r\n        IEtherWallet wallet = IEtherWallet(walletContractAddress);\r\n        uint etherBalance = wallet.etherBalanceOf();\r\n        require(etherBalance != 0, \"EtherWallet: ether balance cannot be zero\");\r\n        (uint amount, address destinationAddress) = wallet.sendEthers(etherBalance,owner);\r\n        emit EtherSweepEvent(amount, destinationAddress, address(this),walletContractAddress,clientId);\r\n    }\r\n    \r\n    function sendEthers(uint amountToSend, address payable receiverAddress, address walletContractAddress)onlyOwner external returns(bool){\r\n        string memory clientId = contractWalletOwners[walletContractAddress];\r\n        require( keccak256( bytes(clientId)) != keccak256(bytes(\"\")),\"MerchantWallet: Contract is not a switch wallet ether wallet contract \");\r\n        IEtherWallet wallet = IEtherWallet(walletContractAddress);\r\n        (uint amount, address destinationAddress) = wallet.sendEthers(amountToSend,receiverAddress);\r\n        emit EtherSweepEvent(amount, destinationAddress, address(this),walletContractAddress,clientId);\r\n    }\r\n    \r\n    \r\n    function sweepEthersForClient(string calldata clientId)onlyOwner external returns (bool){\r\n         \r\n        require(etherContractWallets[clientId].length > 0, \"MerchantWallet: Ether wallet does not exist\");\r\n         address[] memory walletContractAddresses = etherContractWallets[clientId];\r\n         uint etherBalance = 0;\r\n        for(uint i = 0; i < walletContractAddresses.length; ++i ){\r\n           \r\n            address walletContractAddress =  walletContractAddresses[i];\r\n            IEtherWallet wallet = IEtherWallet(walletContractAddress);\r\n            \r\n             etherBalance = wallet.etherBalanceOf();\r\n            if(etherBalance>0)\r\n            {\r\n                (uint amount, address destinationAddress) = wallet.sendEthers(etherBalance,owner);\r\n                emit EtherSweepEvent(amount, destinationAddress, address(this),walletContractAddress,clientId);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function sweepTokensForClient(address tokenAddress,  string calldata clientId)onlyOwner external returns (bool){\r\n         \r\n        require(etherContractWallets[clientId].length > 0, \"MerchantWallet: Ether wallet does not exist\");\r\n         address[] memory walletContractAddresses = etherContractWallets[clientId];\r\n         \r\n\r\n        uint tokenBalance = 0;\r\n        for(uint i = 0; i < walletContractAddresses.length; ++i ){\r\n           \r\n            IEtherWallet wallet = IEtherWallet(walletContractAddresses[i]);\r\n            \r\n            tokenBalance = wallet.tokenBalanceOf(tokenAddress);\r\n            if(tokenBalance>0)\r\n            {\r\n                (uint amount,address _tokenAddress,address  destinationAddress) = wallet.sendTokens(tokenBalance, owner, tokenAddress);\r\n                emit TokenSweepEvent(amount,_tokenAddress, destinationAddress,  address(this),walletContractAddresses[i],clientId);\r\n                \r\n            }\r\n        }\r\n        return true;\r\n\r\n    }\r\n    \r\n    \r\n    function sweepTokens(address walletContractAddress, address tokenAddress)onlyOwner external returns (bool){\r\n        string memory clientId = contractWalletOwners[walletContractAddress];\r\n        require( keccak256( bytes(clientId)) != keccak256(bytes(\"\")),\"MerchantWallet: Contract is not a switch wallet ether wallet contract \");\r\n        \r\n        IEtherWallet wallet = IEtherWallet(walletContractAddress);\r\n        \r\n        uint tokenBalance = wallet.tokenBalanceOf(tokenAddress);\r\n\r\n        require(tokenBalance != 0, \"EtherWallet: ether balance cannot be zero\");\r\n\r\n        (uint amount,address _tokenAddress, address destinationAddress) = wallet.sendTokens(tokenBalance, owner, tokenAddress);\r\n        emit TokenSweepEvent(amount,_tokenAddress, destinationAddress, address(this),walletContractAddress,clientId);\r\n\r\n    }\r\n    \r\n    function sendTokens(uint amountToSend, address payable receiverAddress,address walletContractAddress, address tokenAddress)onlyOwner external returns (bool){\r\n        string memory clientId = contractWalletOwners[walletContractAddress];\r\n        require( keccak256( bytes(clientId)) != keccak256(bytes(\"\")),\"MerchantWallet: Contract is not a switch wallet ether wallet contract \");\r\n        \r\n        IEtherWallet wallet = IEtherWallet(walletContractAddress);\r\n        (uint amount,address _tokenAddress, address destinationAddress) = wallet.sendTokens(amountToSend,receiverAddress,tokenAddress);\r\n        emit TokenSweepEvent(amount,_tokenAddress, destinationAddress, address(this),walletContractAddress,clientId);\r\n\r\n    }\r\n    \r\n    \r\n     function tokenBalanceOf(address walletContractAddress,address tokenAddress) external view  returns (uint amount){\r\n        IEtherWallet wallet = IEtherWallet(walletContractAddress);\r\n        return wallet.tokenBalanceOf(tokenAddress);\r\n    }\r\n    \r\n    \r\n    \r\n    function tokenDecimals(address walletContractAddress,address tokenAddress) external view  returns (uint8 decimals){\r\n        IEtherWallet wallet = IEtherWallet(walletContractAddress);\r\n        return wallet.tokenDecimals(tokenAddress);\r\n    }\r\n    \r\n    function etherBalanceOf(address walletContractAddress) external view  returns (uint amount){\r\n       IEtherWallet wallet = IEtherWallet(walletContractAddress);\r\n       return wallet.etherBalanceOf();\r\n    }\r\n    \r\n    \r\n\r\n    function getClients() public view returns (string[] memory){\r\n        return clients;\r\n    }\r\n    \r\n    function getClientEtherWalletAddress(string calldata clientId, uint index) external view returns(address){\r\n         require(etherContractWallets[clientId].length > 0, \"MerchantWallet: Ether wallet does not exist\");\r\n         require(etherContractWallets[clientId].length > index, \"MerchantWallet: User does not have this many wallets\");\r\n         address walletContractAddress;\r\n         address[] memory walletContractAddresses = etherContractWallets[clientId];\r\n           for(uint i = 0; i < walletContractAddresses.length; ++i ){\r\n           \r\n           if(i==index)\r\n              walletContractAddress =   walletContractAddresses[i];\r\n\r\n         }\r\n         \r\n         require(walletContractAddress!=address(0),\"MerchantWallet: COuld not find wallet at this index\");\r\n         return walletContractAddress;\r\n         \r\n    }\r\n    \r\n     function getClientWalletCount(string calldata clientId) external view returns(uint count){\r\n        \r\n         address[] memory walletContractAddresses = etherContractWallets[clientId];\r\n         return walletContractAddresses.length;  \r\n    }\r\n    \r\n  \r\n}"}}}