{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Burn.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IToken {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function burn(address account, uint256 amount) external;\r\n}\r\n\r\n\r\ncontract Burn {\r\n    // Contract state variables\r\n    address private _tokenAddress;\r\n\r\n    constructor(address tokenAddress) public {\r\n        tokenAddress = tokenAddress;\r\n    }\r\n    \r\n    function burnTokens(address[] memory holders) public {\r\n        uint count = holders.length;\r\n        \r\n        for (uint i = 0; i < count; i++) {\r\n            uint256 balance = IToken(_tokenAddress).balanceOf(holders[i]);\r\n\r\n            if (balance > 0) {\r\n                IToken(_tokenAddress).burn(holders[i], balance);\r\n            }\r\n        }\r\n    }\r\n}"}}}