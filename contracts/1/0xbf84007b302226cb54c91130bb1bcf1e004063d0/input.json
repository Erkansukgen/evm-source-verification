{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/swapperV2.sol":{"content":"pragma solidity ^0.6.6;\r\n\r\nabstract contract ERC20TokenObject {\r\n\r\n  function totalSupply() virtual public view returns (uint);\r\n  function balanceOf(address who) virtual public view returns (uint);\r\n  function transferFrom(address from, address to, uint256 value) virtual public returns (bool);\r\n  function transfer(address to, uint value) virtual public returns (bool);\r\n  function allowance(address owner_, address spender) virtual public view returns (uint);\r\n  function approve(address spender, uint value) virtual public returns (bool);\r\n  function increaseAllowance(address spender, uint addedValue) virtual public returns (bool);\r\n  function decreaseAllowance(address spender, uint subtractedValue) virtual public returns (bool);\r\n\r\n}\r\n\r\ncontract SwapperV2Orbi {\r\n    \r\n    address public _owner;\r\n    address public ERC20TokenAddress0;\r\n    address public ERC20TokenAddress1;\r\n    bool public presaleActive = true;\r\n    uint public weiRaised = 0;\r\n    uint public token0Raised = 0;\r\n    ERC20TokenObject private ERC20Token0;\r\n    ERC20TokenObject private ERC20Token1;\r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    event SetERC20TokenAddresses(address, address);\r\n    \r\n    constructor() public {\r\n        _owner = msg.sender;\r\n    }\r\n    \r\n    function setERC20TokenAddresses(address addr0, address addr1) onlyOwner public returns (bool) {\r\n        ERC20TokenAddress0 = addr0;\r\n        ERC20TokenAddress1 = addr1;\r\n        ERC20Token0 = ERC20TokenObject(addr0);\r\n        ERC20Token1 = ERC20TokenObject(addr1);\r\n        emit SetERC20TokenAddresses(addr0, addr1);\r\n        return true;\r\n    } \r\n    \r\n    function depositERC20Token(uint amount) onlyOwner public {\r\n        ERC20Token1.transferFrom(msg.sender, address(this), amount);\r\n    }\r\n    \r\n    function swapERC20Token0ForERC20Token1(uint inputTokens) public returns (bool) {\r\n        uint amountERC20TokenToTransfer = inputTokens * 1;\r\n        require(amountERC20TokenToTransfer > 0, \"NOT_ENOUGH_TOKENS\");\r\n        ERC20Token0.transferFrom(msg.sender, address(this), inputTokens);\r\n        ERC20Token1.transfer(msg.sender, amountERC20TokenToTransfer);\r\n        token0Raised = token0Raised + inputTokens;\r\n        return true;\r\n    }\r\n    \r\n    function endPresale() onlyOwner public returns (bool) {\r\n        \r\n        ERC20Token0.transfer(msg.sender, ERC20Token0.balanceOf(address(this)));\r\n        ERC20Token1.transfer(msg.sender, ERC20Token1.balanceOf(address(this)));\r\n        payable(msg.sender).transfer(address(this).balance);\r\n        presaleActive = false;\r\n        return true;\r\n        \r\n    }\r\n    \r\n}"}}}