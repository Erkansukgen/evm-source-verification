{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"TokenERC20.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract TokenERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n    \r\n    address public _owner;\r\n    string private _name = \"Bensonas\";\r\n    string private _symbol = \"BNS\";\r\n    uint8 private _decimals = 8;\r\n    uint256 private _totalSupply = 558000000000000;\r\n\tuint256 private _blockNumberStart = 0;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    constructor () public {\r\n\t\t_owner = msg.sender;\r\n        _balances[msg.sender] = _totalSupply;\r\n        _blockNumberStart = block.number;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function blockNumberStart() public view returns (uint256) {\r\n        return _blockNumberStart;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        _unlockTokens();\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowances[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n\tfunction burn(uint256 value) public {\r\n        require(msg.sender != address(0), \"ERC20: burn from the zero address\");\r\n        require(_owner == msg.sender, \"ERC20: burn only owner address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n        emit Transfer(msg.sender, address(0), value);\r\n    }\r\n    \r\n    function _mint(uint256 value) internal {\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[_owner] = _balances[_owner].add(value);\r\n        emit Transfer(address(0), _owner, value);\r\n    }\r\n    \r\n    bool private _unlockTeam = true;\r\n    bool private _unlockDao = true;\r\n    uint256 private _daoTotal = 900000000000000;\r\n    uint256 private _daoTotalUnloked = 0;\r\n\r\n    function _unlockTokens() internal {\r\n      // Unlocking team tokens after year (2425846 blocks after start, 1 block = 13 sec)\r\n      if(_unlockTeam && block.number >= _blockNumberStart + 2425846){\r\n        _unlockTeam = false;\r\n        _mint(342000000000000);\r\n      }\r\n\r\n      // Unlock DAO, 5% per 6 month (1212923 blocks = 6 month, 1 block = 13 sec)\r\n      if(_unlockDao){\r\n        uint256 _amountToUnlock = 45000000000000;\r\n        uint256 _amountTotalUnlocked = 0;\r\n\r\n        for (uint i=1; i<=20; i++) {\r\n          uint256 _blockNumberToUnlock = _blockNumberStart + (1212923 * i);\r\n          if(block.number >= _blockNumberToUnlock){\r\n            _amountTotalUnlocked = _amountTotalUnlocked.add(_amountToUnlock);\r\n            if(_daoTotalUnloked < _amountTotalUnlocked){\r\n              _daoTotalUnloked = _daoTotalUnloked.add(_amountToUnlock);\r\n              _mint(_amountToUnlock);\r\n            }\r\n          }\r\n        }\r\n\r\n        if(_daoTotal == _daoTotalUnloked){\r\n          _unlockDao = false;\r\n        }\r\n      }\r\n    }\r\n}"}}}