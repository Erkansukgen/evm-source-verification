{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "optionskings_ico.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IBEP20 {\r\n  \r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract ICO {\r\n    IBEP20 public token;\r\n    address payable public owner = payable(msg.sender);\r\n    uint256 public rate = 1*(10**15);\r\n    uint256 public airdrop = 10;\r\n    uint256 public rewards=5; \r\n    address[]  public _airaddress;\r\n    constructor(){\r\n        token = IBEP20(0x7C5A64DcBA6e199ac92464403d426bF528902456);\r\n    }\r\n    \r\n    \r\n    function buyTokens() public payable returns(bool){\r\n        require(checkFundAllowed()>((msg.value*(10**18))/rate), \"ICO: Not Allowed by the Owner\");\r\n        token.transferFrom(owner, msg.sender, (((msg.value*(10**18))/rate)));\r\n        owner.transfer(address(this).balance);\r\n        return true;\r\n    }\r\n    \r\n    function setPrice(uint256 _rate) public returns(bool){\r\n        require(msg.sender==owner, \"Only owner set price.\");\r\n        rate = _rate;\r\n        return true;\r\n    }\r\n     function setDrop(uint256 _airdrop, uint256 _rewards) public returns(bool){\r\n        require(msg.sender==owner, \"ICO: YOU ARE NOT ALLOWED Only Owner's place.\");\r\n        airdrop = _airdrop;\r\n        rewards = _rewards;\r\n        delete _airaddress;\r\n        return true;\r\n    }\r\n    function airdropTokens(address ref_address) public payable returns(bool){\r\n        require(airdrop!=0, \"No Airdrop started yet\");\r\n            bool _isExist = false;\r\n            for (uint256 i=0; i < _airaddress.length; i++) {\r\n                if(_airaddress[i]==msg.sender){\r\n                    _isExist = true;\r\n                }\r\n            }\r\n                require(_isExist==false, \"Already Dropped\");\r\n                    token.transferFrom(owner, msg.sender, airdrop*(10**18));\r\n                    token.transferFrom(owner, ref_address, ((airdrop*(10**18)*rewards)/100));\r\n                    _airaddress.push(msg.sender);\r\n                \r\n    return true;\r\n    }\r\n    \r\n    function checkFundAllowed() public view returns(uint256){\r\n        return token.allowance(owner,address(this));\r\n    }\r\n    \r\n}"
    }
  }
}