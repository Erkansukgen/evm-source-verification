{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/AAAAReward.sol": {
      "content": "// Dependency file: contracts/libraries/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\n// pragma solidity >=0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Dependency file: contracts/libraries/TransferHelper.sol\n\n\n// pragma solidity >=0.6.0;\n\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n\n\n// Dependency file: contracts/modules/BaseRewardField.sol\n\n// pragma solidity >=0.6.6;\n// import 'contracts/libraries/SafeMath.sol';\n// import 'contracts/libraries/TransferHelper.sol';\n\ninterface IERC20 {\n    function balanceOf(address owner) external view returns (uint);\n}\n\ncontract BaseRewardField {\n    using SafeMath for uint;\n    \n    uint public totalProductivity;\n    uint public accAmountPerShare;\n    \n    uint public totalShare;\n    uint public mintedShare;\n    uint public mintCumulation;\n    \n    uint public lastRewardBlock;\n    uint public amountPerBlock;\n    \n    uint private unlocked = 1;\n    address public shareToken;\n    \n    modifier lock() {\n        require(unlocked == 1, 'Locked');\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n    \n    struct UserInfo {\n        uint amount;     // How many tokens the user has provided.\n        uint rewardDebt; // Reward debt. \n        uint rewardEarn; // Reward earn and not minted\n    }\n\n    mapping(address => UserInfo) public users;\n    \n    function _setShareToken(address _shareToken) internal {\n        shareToken = _shareToken;\n    }\n    \n    function _changeAmountPerBlock(uint value) internal returns (bool) {\n        uint old = amountPerBlock;\n        require(value != old, 'AMOUNT_PER_BLOCK_NO_CHANGE');\n        _update();\n        amountPerBlock = value;\n        return true;\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function _update() internal virtual {\n        if (totalProductivity == 0) {\n            lastRewardBlock = block.number;\n            return;\n        }\n        \n        uint256 reward = _currentReward();\n        accAmountPerShare = accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\n        totalShare += reward;\n        lastRewardBlock = block.number;\n    }\n    \n    function _currentReward() internal virtual view returns (uint) {\n        uint256 multiplier = block.number.sub(lastRewardBlock);\n        uint reward =  multiplier.mul(amountPerBlock);\n        if(IERC20(shareToken).balanceOf(address(this)) < reward) {\n            return IERC20(shareToken).balanceOf(address(this));\n        } else {\n            return reward;\n        }\n    }\n    \n    // Audit user's reward to be up-to-date\n    function _audit(address user) internal virtual {\n        UserInfo storage userInfo = users[user];\n        if (userInfo.amount > 0) {\n            uint pending = userInfo.amount.mul(accAmountPerShare).div(1e12).sub(userInfo.rewardDebt);\n            userInfo.rewardEarn = userInfo.rewardEarn.add(pending);\n            mintCumulation = mintCumulation.add(pending);\n            userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\n        }\n    }\n\n    // External function call\n    // This function increase user's productivity and updates the global productivity.\n    // the users' actual share percentage will calculated by:\n    // Formula:     user_productivity / global_productivity\n    function _increaseProductivity(address user, uint value) internal virtual returns (bool) {\n        require(value > 0, 'PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO');\n\n        UserInfo storage userInfo = users[user];\n        _update();\n        _audit(user);\n\n        totalProductivity = totalProductivity.add(value);\n\n        userInfo.amount = userInfo.amount.add(value);\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\n        return true;\n    }\n\n    // External function call \n    // This function will decreases user's productivity by value, and updates the global productivity\n    // it will record which block this is happenning and accumulates the area of (productivity * time)\n    function _decreaseProductivity(address user, uint value) internal virtual returns (bool) {\n        UserInfo storage userInfo = users[user];\n        require(value > 0 && userInfo.amount >= value, 'INSUFFICIENT_PRODUCTIVITY');\n        \n        _update();\n        _audit(user);\n        \n        userInfo.amount = userInfo.amount.sub(value);\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\n        totalProductivity = totalProductivity.sub(value);\n        \n        return true;\n    }\n    \n    function _takeWithAddress(address user) internal view returns (uint) {\n        UserInfo storage userInfo = users[user];\n        uint _accAmountPerShare = accAmountPerShare;\n        // uint256 lpSupply = totalProductivity;\n        if (totalProductivity != 0) {\n            uint reward = _currentReward();\n            _accAmountPerShare = _accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\n        }\n        return userInfo.amount.mul(_accAmountPerShare).div(1e12).add(userInfo.rewardEarn).sub(userInfo.rewardDebt);\n    }\n\n    // External function call\n    // When user calls this function, it will calculate how many token will mint to user from his productivity * time\n    // Also it calculates global token supply from last time the user mint to this time.\n    function _mint(address user) internal virtual lock returns (uint) {\n        _update();\n        _audit(user);\n        require(users[user].rewardEarn > 0, \"NOTHING TO MINT REWARD\");\n        uint amount = users[user].rewardEarn;\n        TransferHelper.safeTransfer(shareToken, msg.sender, amount);\n        users[user].rewardEarn = 0;\n        mintedShare += amount;\n        return amount;\n    }\n\n    // Returns how many productivity a user has and global has.\n    function getProductivity(address user) public virtual view returns (uint, uint) {\n        return (users[user].amount, totalProductivity);\n    }\n\n    // Returns the current gorss product rate.\n    function interestsPerBlock() public virtual view returns (uint) {\n        return accAmountPerShare;\n    }\n}\n\n// Root file: contracts/AAAAReward.sol\n\npragma solidity >=0.5.16;\n// import 'contracts/modules/BaseRewardField.sol';\n\ncontract AAAAReward is BaseRewardField {\n    \n    address public owner;\n    address public stakeToken;\n    \n    event ProductivityIncreased (address indexed user, uint value);\n    event ProductivityDecreased (address indexed user, uint value);\n    event Mint(address indexed user, uint amount);\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    function changeOwner(address _owner) external {\n        require(msg.sender == owner, \"FORBIDDEN\");\n        owner = _owner;\n    }\n    \n    function changeAmountPerBlock(uint value) external {\n        require(msg.sender == owner, \"FORBIDDEN\");\n        _changeAmountPerBlock(value);\n    }\n    \n    function initialize(address _stakeToken, address _shareToken) external {\n        require(msg.sender == owner, \"FORBIDDEN\");\n        stakeToken = _stakeToken;\n        _setShareToken(_shareToken);\n    }\n    \n    function extract(uint _amount) external {\n        require(msg.sender == owner, \"FORBIDDEN\");\n        TransferHelper.safeTransfer(shareToken, msg.sender, _amount);\n    }\n    \n    function stake(uint _amount) external {\n        TransferHelper.safeTransferFrom(stakeToken, msg.sender, address(this), _amount);\n        _increaseProductivity(msg.sender, _amount);\n        emit ProductivityIncreased(msg.sender, _amount);\n    }\n    \n    function withdraw(uint _amount) external {\n        _decreaseProductivity(msg.sender, _amount);\n        TransferHelper.safeTransfer(stakeToken, msg.sender, _amount);\n        emit ProductivityDecreased(msg.sender, _amount);\n    }\n    \n    function queryReward() external view returns (uint){\n        return _takeWithAddress(msg.sender);\n    }\n    \n    function mintReward() external {\n        uint amount = _mint(msg.sender);\n        emit Mint(msg.sender, amount);\n    }\n}"
    }
  }
}