{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/fx99.sol": {
      "content": "pragma solidity ^0.6.2;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, errorMessage);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\ncontract FX99 is ERC20(\"FX99\", \"XCIX\") {\n    address public wallet_99_strong_hand = 0xdCD272B4e7597640f20287a1D6D525f4d0034394;\n    uint256 public initialPrice = 0.001 szabo;\n    uint256 public increment = 0.001 szabo;\n    uint256 public minPurchase = 1 ether;\n    uint256 public reinvestFee = 10;\n    uint256 public transferFee = 10;\n    uint256 public withdrawFee = 10;\n    uint256 public referrerFee = 5;\n    uint256 public buyFee = 10;\n    uint256 public sellFee = 10;\n    uint256 public dividendsPerShare;\n    uint256 public start;\n    uint256 constant internal magnitude = 1 ether;\n    mapping (address => address) public referrer;\n    mapping (address => uint256) public referralEarnings;\n    mapping (address => int256) public dividendsPayouts;\n\n    event Reinvest(address _member, uint256 _ether, uint256 _tokens);\n    event Withdraw(address _member, uint256 _ether);\n    event Buy(address _member, uint256 _ether, uint256 _tokens, address _referrer);\n    event Sell(address _member, uint256 _ether, uint256 _tokens);\n\n    constructor () public {\n        start = now;\n    }\n\n    /**\n     * Calculate Dividends\n     */\n    function getDividends(address _member)\n        public\n        view\n        returns(uint256)\n    {\n        uint256 _balance = balanceOf(_member);\n        uint256 _dividends = (uint256)((int256)(_balance.mul(dividendsPerShare)) - dividendsPayouts[_member])\n        .div(magnitude);\n        uint256 _contractBalance = address(this).balance;\n\n        if (_dividends > _contractBalance) return _contractBalance;\n        return _dividends;\n    }\n\n    /**\n     * Reinvest\n     */\n    function reinvest()\n        public\n        returns(uint256)\n    {\n        uint256 _ether = getDividends(msg.sender);\n\n        dividendsPayouts[msg.sender] = dividendsPayouts[msg.sender] \n            + (int256)(_ether.mul(magnitude));\n\n        _ether = _ether\n        .add(referralEarnings[msg.sender]);\n        referralEarnings[msg.sender] = 0;\n\n        uint256 _fee = _ether.mul(reinvestFee).div(100);\n        uint256 _reinvest = _ether.sub(_fee);\n\n        uint256 _tokens = ethToTokens(_reinvest);\n\n        require (_tokens >= minPurchase, \n            'Token equivalent amount should not be less than 1 token');\n\n        dividendsPayouts[msg.sender] = dividendsPayouts[msg.sender]\n            + (int256)(dividendsPerShare.mul(_tokens));\n\n        emit Reinvest(msg.sender, _ether, _tokens);\n        _mint(msg.sender, _tokens);\n\n        uint256 _supply = totalSupply();\n        if (_supply > 0) {\n            dividendsPerShare = dividendsPerShare\n            .add(_fee.mul(magnitude).div(_supply));\n        } else {\n            dividendsPerShare = 0;\n        }        \n    }\n\n    /**\n     * Withdraw dividends\n     */\n    // function withdrawPart(uint256 _ether)\n    //     public\n    //     returns(bool)\n    // {\n    //     uint256 _dividends = getDividends(msg.sender);\n    //     require(_ether <= _dividends, 'Not enough dividends');\n\n    //     dividendsPayouts[msg.sender] = dividendsPayouts[msg.sender] \n    //         + (int256)(_ether.mul(magnitude));\n\n    //     uint256 _fee = _ether.mul(withdrawFee).div(100);\n    //     uint256 _withdraw = _ether.sub(_fee);\n\n    //     uint256 _tokens = ethToTokens(_withdraw);\n\n    //     require (_tokens >= minPurchase, \n    //         'Token equivalent amount should not be less than 1 token');\n\n    //     emit Withdraw(msg.sender, _ether);\n\n    //     payable(wallet_99_strong_hand).transfer(_fee);\n    //     payable(msg.sender).transfer(_withdraw);\n    //     return true;\n    // }\n\n    /**\n     * Withdraw dividends\n     */\n    function withdraw()\n        public\n        returns(bool)\n    {\n        uint256 _ether = getDividends(msg.sender);\n        dividendsPayouts[msg.sender] = dividendsPayouts[msg.sender] \n            + (int256)(_ether.mul(magnitude));\n\n        _ether = _ether\n        .add(referralEarnings[msg.sender]);\n        referralEarnings[msg.sender] = 0;\n\n        uint256 _fee = _ether.mul(withdrawFee).div(100);\n        uint256 _withdraw = _ether.sub(_fee);\n\n        uint256 _tokens = ethToTokens(_withdraw);\n\n        require (_tokens >= minPurchase, \n            'Token equivalent amount should not be less than 1 token');\n\n        emit Withdraw(msg.sender, _ether);\n\n        payable(wallet_99_strong_hand).transfer(_fee);\n        payable(msg.sender).transfer(_withdraw);\n        return true;\n    }\n\n    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\n        require (_amount >= minPurchase, \n            'Token amount should not be less than 1 token');\n        require (_amount <= balanceOf(msg.sender), \n            'Token amount should not be greater than balance');\n        uint256 _fee = _amount.mul(transferFee).div(100);\n        uint256 _tokens = _amount.sub(_fee);\n\n        dividendsPayouts[msg.sender] = dividendsPayouts[msg.sender]\n            - (int256)(dividendsPerShare.mul(_amount));\n        dividendsPayouts[_recipient] = dividendsPayouts[_recipient]\n            + (int256)(dividendsPerShare.mul(_tokens));\n\n        _burn(msg.sender, _fee);\n\n        dividendsPerShare = dividendsPerShare\n        .add(tokensToEth(_fee).mul(magnitude).div(totalSupply()));\n        return super.transfer(_recipient, _tokens);\n    }\n\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\n        require (_amount >= minPurchase, \n            'Token amount should not be less than 1 token');\n        require (_amount <= balanceOf(_sender), \n            'Token amount should not be greater than balance');\n        uint256 _fee = _amount.mul(transferFee).div(100);\n        uint256 _tokens = _amount.sub(_fee);\n\n        dividendsPayouts[msg.sender] = dividendsPayouts[msg.sender]\n            - (int256)(dividendsPerShare.mul(_amount));\n        dividendsPayouts[_recipient] = dividendsPayouts[_recipient]\n            + (int256)(dividendsPerShare.mul(_tokens));\n\n        _burn(_sender, _fee);\n\n        dividendsPerShare = dividendsPerShare\n        .add(tokensToEth(_fee).mul(magnitude).div(totalSupply()));\n        return super.transferFrom(_sender, _recipient, _tokens);\n    }    \n    \n    receive() payable external {\n        purchase(msg.value, address(0));\n    }\n\n    function buy(address _referrer) payable external {\n        purchase(msg.value, _referrer);\n    }\n\n    function purchase(uint256 _amount, address _referrer) internal {\n        require (msg.sender != _referrer, 'You can not be your referrer');\n        uint256 _refFee = _amount.mul(referrerFee).div(100);\n        uint256 _buyFee = _amount.mul(buyFee).div(100);\n        uint256 _totalFee = _refFee.add(_buyFee);\n        if (referrer[msg.sender] == address(0)\n            && _referrer != address(0)\n            && balanceOf(_referrer) >= 99 ether) {\n            referrer[msg.sender] = _referrer;\n            referralEarnings[_referrer] = referralEarnings[_referrer]\n            .add(_refFee);\n        } else {\n            _buyFee = _totalFee;\n        }\n        \n        uint256 _tokens = ethToTokens(_amount.sub(_totalFee));\n\n        require (_tokens >= minPurchase, \n            'Tokens amount should not be less than 1 token');\n\n        emit Buy(msg.sender, _amount, _tokens, _referrer);\n\n        _mint(msg.sender, _tokens);\n        uint256 _supply = totalSupply();\n\n        uint256 _extra = _buyFee\n        .mul(magnitude)\n        .div(_supply);\n\n        if (dividendsPerShare > 0) {\n            dividendsPayouts[msg.sender] = dividendsPayouts[msg.sender]\n            + (int256)(dividendsPerShare.mul(_tokens));\n        }\n\n        dividendsPerShare = dividendsPerShare\n        .add(_extra);\n    }\n\n    function sell(uint256 _tokens) external {\n        require (_tokens >= minPurchase, \n            'Tokens amount should not be less than 1 token');\n        require (_tokens <= balanceOf(msg.sender), \n            'Not enough tokens');\n        uint256 _amount = tokensToEth(_tokens);\n        uint256 _fee = _amount.mul(sellFee).div(100);\n\n        emit Sell(msg.sender, _amount, _tokens);\n\n        _burn(msg.sender, _tokens);\n\n        dividendsPayouts[msg.sender] = dividendsPayouts[msg.sender] \n            - (int256)(dividendsPerShare.mul(_tokens));\n\n        uint256 _supply = totalSupply();\n\n        if (_supply > 0) { \n            dividendsPerShare = dividendsPerShare\n            .add(_fee.mul(magnitude).div(_supply));\n        } else {\n            dividendsPerShare = 0;\n            dividendsPayouts[msg.sender] = dividendsPayouts[msg.sender]\n                - (int256)(_fee.mul(magnitude));\n        }\n\n        payable(msg.sender)\n        .transfer(_amount.sub(_fee));\n    }\n\n    function getCurrentPrice () public view returns(uint256) {\n        uint256 supply = totalSupply();\n        uint256 supplyInt = supply.div(1 ether);\n        return supplyInt.mul(increment).add(initialPrice);\n    }\n\n    /**\n     * Calculate Token price based on an amount of incoming ethereum\n     */\n    function ethToTokens(uint256 _ether)\n        public\n        view\n        returns(uint256)\n    {\n        // return _ether;\n        uint256 eth = _ether;\n        uint256 supply = totalSupply();\n        uint256 supplyInt = supply.div(1 ether);\n        uint256 supplyFract = supply.sub(supplyInt.mul(1 ether));\n        uint256 currentPrice = supplyInt.mul(increment).add(initialPrice);\n        uint256 tokens;\n        uint256 tempTokens = eth.mul(1 ether).div(currentPrice);\n\n        if (tempTokens < supplyFract) {\n            return tempTokens;\n        }\n\n        tokens = tokens.add(supplyFract);\n\n        eth = eth.sub(supplyFract.mul(currentPrice).div(1 ether));\n        if (supplyFract > 0) {\n            currentPrice = currentPrice.add(increment);\n        }\n        tempTokens = eth.mul(1 ether).div(currentPrice);\n\n        if (tempTokens <= 1 ether) {\n            return tokens.add(tempTokens);\n        }\n\n        uint256 d = currentPrice.mul(2)\n        .sub(increment);\n        d = d.mul(d);\n        d = d.add(increment.mul(eth).mul(8));\n\n        uint256 sqrtD = sqrt(d);\n        \n        tempTokens = increment\n        .add(sqrtD)\n        .sub(currentPrice.mul(2));\n\n        tempTokens = tempTokens\n        .mul(1 ether)\n        .div(increment.mul(2));\n\n        tokens = tokens.add(tempTokens);\n\n        return tokens;\n    }\n    \n    /**\n     * Calculate tokens\n    */\n     function tokensToEth(uint256 _tokens)\n        public\n        view\n        returns(uint256)\n    {\n        // return _tokens;\n        uint256 tokens = _tokens;\n        uint256 supply = totalSupply();\n        if (tokens > supply) return 0;\n        uint256 supplyInt = supply.div(1 ether);\n        uint256 supplyFract = supply.sub(supplyInt.mul(1 ether, '1'));\n        uint256 currentPrice = supplyInt.mul(increment).add(initialPrice);\n        uint256 eth;\n\n        if (tokens < supplyFract) {\n            return tokens.mul(currentPrice).div(1 ether);\n        }\n\n        eth = eth.add(supplyFract.mul(currentPrice).div(1 ether));\n        tokens = tokens.sub(supplyFract);\n\n        if (supplyFract > 0) {\n            currentPrice = currentPrice.sub(increment);\n        }\n\n        if (tokens <= 1 ether) {\n            return eth.add(tokens.mul(currentPrice).div(1 ether));\n        }\n\n        uint256 tokensInt = tokens.div(1 ether);\n        uint256 tokensFract;\n        if (tokensInt > 1) {\n            tokensFract = tokens.sub(tokensInt.mul(1 ether));\n        }\n\n        uint256 tempEth = currentPrice\n        .mul(2)\n        .sub(increment.mul(tokensInt.sub(1)));\n\n        tempEth = tempEth\n        .mul(tokensInt)\n        .div(2);\n\n        eth = eth.add(tempEth);\n\n        currentPrice = currentPrice.sub(increment.mul(tokensInt));\n        eth = eth\n        .add(currentPrice.mul(tokensFract).div(1 ether));\n        return eth;\n    }\n    \n    function sqrt(uint x) public pure returns (uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n\n    function contractBalance() \n        public\n        view\n        returns(uint256)\n    {\n        return address(this).balance;\n    }\n}"
    }
  }
}