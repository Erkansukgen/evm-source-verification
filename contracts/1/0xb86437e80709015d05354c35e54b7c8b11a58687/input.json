{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/DSA/chi.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface CHIInterface {\n    function mint(uint256 value) external;\n    function free(uint256 value) external returns (uint256);\n    function balanceOf(address) external view returns (uint);\n    function approve(address, uint256) external;\n}\n\ncontract ChiHelpers  {\n    /**\n     * @dev CHI token Address\n     */\n    function getCHIAddress() internal pure returns (address) {\n        return 0x0000000000004946c0e9F43F4Dee607b0eF1fA1c;\n    }\n\n    /**\n    * @dev Connector Details.\n    */\n    function connectorID() public view returns(uint model, uint id) {\n        (model, id) = (1, 36);\n    }\n}\n\ncontract ChiResolver is ChiHelpers {\n    /**\n     * @dev Mint CHI token.\n     * @param amt token amount to mint.\n     */\n    function mint(uint amt) public payable {\n        uint _amt = amt == uint(-1) ? 140 : amt;\n        require(_amt <= 140, \"Max minting is 140 chi\");\n        CHIInterface(getCHIAddress()).mint(_amt);\n    }\n\n    /**\n     * @dev burn CHI token.\n     * @param amt token amount to burn.\n     */\n    function burn(uint amt) public payable {\n        CHIInterface chiToken = CHIInterface(getCHIAddress());\n        uint _amt = amt == uint(-1) ? chiToken.balanceOf(address(this)) : amt;\n        chiToken.approve(address(chiToken), _amt);\n        chiToken.free(_amt);\n    }\n}\n\ncontract ConnectCHI is ChiResolver {\n    string public name = \"CHI-v1\";\n}"
    }
  }
}