{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/Claims.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.11;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n    function burnFrom(address account_, uint256 amount_) external;\n}\n\ncontract Claims {\n    address public constant CERBERUS = 0x8a14897eA5F668f36671678593fAe44Ae23B39FB;\n    address public constant owner = 0xdB00139222c99e9098DEf2ceBCD94bDCDa8E7625;\n    uint public supplyRemaining = 0;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        _;\n    }\n\n    function claimAmount(address claimer) public view returns (uint) {\n        uint tokenBalance = IERC20(CERBERUS).balanceOf(claimer);\n        require(supplyRemaining > 0, \"supplyRemaining not set\");\n        require(tokenBalance > 0, \"No 3dog\");\n        require(address(this).balance > 0, \"eth not received\");\n        uint ethAmount = address(this).balance * tokenBalance / supplyRemaining;\n        return ethAmount;\n    }\n\n    function claim() external {\n        uint tokenBalance = IERC20(CERBERUS).balanceOf(msg.sender);\n        uint ethAmount = claimAmount(msg.sender);\n        // Subtract from denominator\n        supplyRemaining -= tokenBalance;\n        // Burn the 3dog\n        IERC20(CERBERUS).burnFrom(msg.sender, tokenBalance);\n        // Send the eth\n        (bool sent, bytes memory data) = msg.sender.call{value: ethAmount}(\"\");\n        require(sent, \"Failed to send Ether\");\n    }\n\n    function setSupplyRemaining(uint _supplyRemaining) external onlyOwner {\n        supplyRemaining = _supplyRemaining;\n    }\n\n    function retrieveTokens(address token) external onlyOwner {\n        if(token == address(0x0)) {\n            uint ethAmount = address(this).balance;\n            (bool sent, bytes memory data) = owner.call{value: ethAmount}(\"\");\n            require(sent, \"Failed to send Ether\");\n        } else {\n            uint tokenBalance = IERC20(token).balanceOf(address(this));\n            IERC20(token).transfer(owner, tokenBalance);\n        }\n    }\n\n}"}}}