{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/Toto.sol":{"content":"pragma solidity ^0.6.3;\r\r\r// SPDX-License-Identifier: MIT\r/**\r * @dev Interface of the ERC20 standard as defined in the EIP.\r */\rinterface IERC20 {\r    /**\r     * @dev Returns the amount of tokens in existence.\r     */\r    function totalSupply() external view returns (uint256);\r\r    /**\r     * @dev Returns the amount of tokens owned by `account`.\r     */\r    function balanceOf(address account) external view returns (uint256);\r\r    /**\r     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r     *\r     * Returns a boolean value indicating whether the operation succeeded.\r     *\r     * Emits a {Transfer} event.\r     */\r    function transfer(address recipient, uint256 amount) external returns (bool);\r\r    /**\r     * @dev Returns the remaining number of tokens that `spender` will be\r     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r     * zero by default.\r     *\r     * This value changes when {approve} or {transferFrom} are called.\r     */\r    function allowance(address owner, address spender) external view returns (uint256);\r\r    /**\r     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r     *\r     * Returns a boolean value indicating whether the operation succeeded.\r     *\r     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r     * that someone may use both the old and the new allowance by unfortunate\r     * transaction ordering. One possible solution to mitigate this race\r     * condition is to first reduce the spender's allowance to 0 and set the\r     * desired value afterwards:\r     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r     *\r     * Emits an {Approval} event.\r     */\r    function approve(address spender, uint256 amount) external returns (bool);\r\r    /**\r     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r     * allowance mechanism. `amount` is then deducted from the caller's\r     * allowance.\r     *\r     * Returns a boolean value indicating whether the operation succeeded.\r     *\r     * Emits a {Transfer} event.\r     */\r    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\r    /**\r     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r     * another (`to`).\r     *\r     * Note that `value` may be zero.\r     */\r    event Transfer(address indexed from, address indexed to, uint256 value);\r\r    /**\r     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r     * a call to {approve}. `value` is the new allowance.\r     */\r    event Approval(address indexed owner, address indexed spender, uint256 value);\r}\r\r// SPDX-License-Identifier: MIT\r/**\r * @dev Interface of the ERC165 standard, as defined in the\r * https://eips.ethereum.org/EIPS/eip-165[EIP].\r *\r * Implementers can declare support of contract interfaces, which can then be\r * queried by others ({ERC165Checker}).\r *\r * For an implementation, see {ERC165}.\r */\rinterface IERC165 {\r    /**\r     * @dev Returns true if this contract implements the interface defined by\r     * `interfaceId`. See the corresponding\r     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r     * to learn more about how these ids are created.\r     *\r     * This function call must use less than 30 000 gas.\r     */\r    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r}\r\r// SPDX-License-Identifier: MIT\r/**\r * @dev Required interface of an ERC1155 compliant contract, as defined in the\r * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r *\r * _Available since v3.1._\r */\rinterface IERC1155 is IERC165 {\r    /**\r     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r     */\r    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\r    /**\r     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r     * transfers.\r     */\r    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\r    /**\r     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r     * `approved`.\r     */\r    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\r    /**\r     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r     *\r     * If an {URI} event was emitted for `id`, the standard\r     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r     * returned by {IERC1155MetadataURI-uri}.\r     */\r    event URI(string value, uint256 indexed id);\r\r    /**\r     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r     *\r     * Requirements:\r     *\r     * - `account` cannot be the zero address.\r     */\r    function balanceOf(address account, uint256 id) external view returns (uint256);\r\r    /**\r     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r     *\r     * Requirements:\r     *\r     * - `accounts` and `ids` must have the same length.\r     */\r    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\r    /**\r     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r     *\r     * Emits an {ApprovalForAll} event.\r     *\r     * Requirements:\r     *\r     * - `operator` cannot be the caller.\r     */\r    function setApprovalForAll(address operator, bool approved) external;\r\r    /**\r     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r     *\r     * See {setApprovalForAll}.\r     */\r    function isApprovedForAll(address account, address operator) external view returns (bool);\r\r    /**\r     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r     *\r     * Emits a {TransferSingle} event.\r     *\r     * Requirements:\r     *\r     * - `to` cannot be the zero address.\r     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r     * acceptance magic value.\r     */\r    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\r    /**\r     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r     *\r     * Emits a {TransferBatch} event.\r     *\r     * Requirements:\r     *\r     * - `ids` and `amounts` must have the same length.\r     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r     * acceptance magic value.\r     */\r    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r}\r\r// SPDX-License-Identifier: MIT\r/*\r * @dev Provides information about the current execution context, including the\r * sender of the transaction and its data. While these are generally available\r * via msg.sender and msg.data, they should not be accessed in such a direct\r * manner, since when dealing with GSN meta-transactions the account sending and\r * paying for execution may not be the actual sender (as far as an application\r * is concerned).\r *\r * This contract is only required for intermediate, library-like contracts.\r */\rabstract contract Context {\r    function _msgSender() internal view virtual returns (address payable) {\r        return msg.sender;\r    }\r\r    function _msgData() internal view virtual returns (bytes memory) {\r        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r        return msg.data;\r    }\r}\r\r// SPDX-License-Identifier: MIT\r/**\r * @dev Contract module which provides a basic access control mechanism, where\r * there is an account (an owner) that can be granted exclusive access to\r * specific functions.\r *\r * By default, the owner account will be the one that deploys the contract. This\r * can later be changed with {transferOwnership}.\r *\r * This module is used through inheritance. It will make available the modifier\r * `onlyOwner`, which can be applied to your functions to restrict their use to\r * the owner.\r */\rabstract contract Ownable is Context {\r    address private _owner;\r\r    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\r    /**\r     * @dev Initializes the contract setting the deployer as the initial owner.\r     */\r    constructor () internal {\r        address msgSender = _msgSender();\r        _owner = msgSender;\r        emit OwnershipTransferred(address(0), msgSender);\r    }\r\r    /**\r     * @dev Returns the address of the current owner.\r     */\r    function owner() public view virtual returns (address) {\r        return _owner;\r    }\r\r    /**\r     * @dev Throws if called by any account other than the owner.\r     */\r    modifier onlyOwner() {\r        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r        _;\r    }\r\r    /**\r     * @dev Leaves the contract without owner. It will not be possible to call\r     * `onlyOwner` functions anymore. Can only be called by the current owner.\r     *\r     * NOTE: Renouncing ownership will leave the contract without an owner,\r     * thereby removing any functionality that is only available to the owner.\r     */\r    function renounceOwnership() public virtual onlyOwner {\r        emit OwnershipTransferred(_owner, address(0));\r        _owner = address(0);\r    }\r\r    /**\r     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r     * Can only be called by the current owner.\r     */\r    function transferOwnership(address newOwner) public virtual onlyOwner {\r        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r        emit OwnershipTransferred(_owner, newOwner);\r        _owner = newOwner;\r    }\r}\r\r// SPDX-License-Identifier: MIT\r/**\r * @dev Wrappers over Solidity's arithmetic operations with added overflow\r * checks.\r *\r * Arithmetic operations in Solidity wrap on overflow. This can easily result\r * in bugs, because programmers usually assume that an overflow raises an\r * error, which is the standard behavior in high level programming languages.\r * `SafeMath` restores this intuition by reverting the transaction when an\r * operation overflows.\r *\r * Using this library instead of the unchecked operations eliminates an entire\r * class of bugs, so it's recommended to use it always.\r */\rlibrary SafeMath {\r    /**\r     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r     *\r     * _Available since v3.4._\r     */\r    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r        uint256 c = a + b;\r        if (c < a) return (false, 0);\r        return (true, c);\r    }\r\r    /**\r     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r     *\r     * _Available since v3.4._\r     */\r    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r        if (b > a) return (false, 0);\r        return (true, a - b);\r    }\r\r    /**\r     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r     *\r     * _Available since v3.4._\r     */\r    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r        // benefit is lost if 'b' is also tested.\r        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r        if (a == 0) return (true, 0);\r        uint256 c = a * b;\r        if (c / a != b) return (false, 0);\r        return (true, c);\r    }\r\r    /**\r     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r     *\r     * _Available since v3.4._\r     */\r    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r        if (b == 0) return (false, 0);\r        return (true, a / b);\r    }\r\r    /**\r     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r     *\r     * _Available since v3.4._\r     */\r    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r        if (b == 0) return (false, 0);\r        return (true, a % b);\r    }\r\r    /**\r     * @dev Returns the addition of two unsigned integers, reverting on\r     * overflow.\r     *\r     * Counterpart to Solidity's `+` operator.\r     *\r     * Requirements:\r     *\r     * - Addition cannot overflow.\r     */\r    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r        uint256 c = a + b;\r        require(c >= a, \"SafeMath: addition overflow\");\r        return c;\r    }\r\r    /**\r     * @dev Returns the subtraction of two unsigned integers, reverting on\r     * overflow (when the result is negative).\r     *\r     * Counterpart to Solidity's `-` operator.\r     *\r     * Requirements:\r     *\r     * - Subtraction cannot overflow.\r     */\r    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r        require(b <= a, \"SafeMath: subtraction overflow\");\r        return a - b;\r    }\r\r    /**\r     * @dev Returns the multiplication of two unsigned integers, reverting on\r     * overflow.\r     *\r     * Counterpart to Solidity's `*` operator.\r     *\r     * Requirements:\r     *\r     * - Multiplication cannot overflow.\r     */\r    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r        if (a == 0) return 0;\r        uint256 c = a * b;\r        require(c / a == b, \"SafeMath: multiplication overflow\");\r        return c;\r    }\r\r    /**\r     * @dev Returns the integer division of two unsigned integers, reverting on\r     * division by zero. The result is rounded towards zero.\r     *\r     * Counterpart to Solidity's `/` operator. Note: this function uses a\r     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r     * uses an invalid opcode to revert (consuming all remaining gas).\r     *\r     * Requirements:\r     *\r     * - The divisor cannot be zero.\r     */\r    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r        require(b > 0, \"SafeMath: division by zero\");\r        return a / b;\r    }\r\r    /**\r     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r     * reverting when dividing by zero.\r     *\r     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r     * opcode (which leaves remaining gas untouched) while Solidity uses an\r     * invalid opcode to revert (consuming all remaining gas).\r     *\r     * Requirements:\r     *\r     * - The divisor cannot be zero.\r     */\r    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r        require(b > 0, \"SafeMath: modulo by zero\");\r        return a % b;\r    }\r\r    /**\r     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r     * overflow (when the result is negative).\r     *\r     * CAUTION: This function is deprecated because it requires allocating memory for the error\r     * message unnecessarily. For custom revert reasons use {trySub}.\r     *\r     * Counterpart to Solidity's `-` operator.\r     *\r     * Requirements:\r     *\r     * - Subtraction cannot overflow.\r     */\r    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r        require(b <= a, errorMessage);\r        return a - b;\r    }\r\r    /**\r     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r     * division by zero. The result is rounded towards zero.\r     *\r     * CAUTION: This function is deprecated because it requires allocating memory for the error\r     * message unnecessarily. For custom revert reasons use {tryDiv}.\r     *\r     * Counterpart to Solidity's `/` operator. Note: this function uses a\r     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r     * uses an invalid opcode to revert (consuming all remaining gas).\r     *\r     * Requirements:\r     *\r     * - The divisor cannot be zero.\r     */\r    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r        require(b > 0, errorMessage);\r        return a / b;\r    }\r\r    /**\r     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r     * reverting with custom message when dividing by zero.\r     *\r     * CAUTION: This function is deprecated because it requires allocating memory for the error\r     * message unnecessarily. For custom revert reasons use {tryMod}.\r     *\r     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r     * opcode (which leaves remaining gas untouched) while Solidity uses an\r     * invalid opcode to revert (consuming all remaining gas).\r     *\r     * Requirements:\r     *\r     * - The divisor cannot be zero.\r     */\r    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r        require(b > 0, errorMessage);\r        return a % b;\r    }\r}\r\r// SPDX-License-Identifier: MIT\r/**\r * @dev Collection of functions related to the address type\r */\rlibrary Address {\r    /**\r     * @dev Returns true if `account` is a contract.\r     *\r     * [IMPORTANT]\r     * ====\r     * It is unsafe to assume that an address for which this function returns\r     * false is an externally-owned account (EOA) and not a contract.\r     *\r     * Among others, `isContract` will return false for the following\r     * types of addresses:\r     *\r     *  - an externally-owned account\r     *  - a contract in construction\r     *  - an address where a contract will be created\r     *  - an address where a contract lived, but was destroyed\r     * ====\r     */\r    function isContract(address account) internal view returns (bool) {\r        // This method relies on extcodesize, which returns 0 for contracts in\r        // construction, since the code is only stored at the end of the\r        // constructor execution.\r\r        uint256 size;\r        // solhint-disable-next-line no-inline-assembly\r        assembly { size := extcodesize(account) }\r        return size > 0;\r    }\r\r    /**\r     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r     * `recipient`, forwarding all available gas and reverting on errors.\r     *\r     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r     * imposed by `transfer`, making them unable to receive funds via\r     * `transfer`. {sendValue} removes this limitation.\r     *\r     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r     *\r     * IMPORTANT: because control is transferred to `recipient`, care must be\r     * taken to not create reentrancy vulnerabilities. Consider using\r     * {ReentrancyGuard} or the\r     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r     */\r    function sendValue(address payable recipient, uint256 amount) internal {\r        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\r        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r        (bool success, ) = recipient.call{ value: amount }(\"\");\r        require(success, \"Address: unable to send value, recipient may have reverted\");\r    }\r\r    /**\r     * @dev Performs a Solidity function call using a low level `call`. A\r     * plain`call` is an unsafe replacement for a function call: use this\r     * function instead.\r     *\r     * If `target` reverts with a revert reason, it is bubbled up by this\r     * function (like regular Solidity function calls).\r     *\r     * Returns the raw returned data. To convert to the expected return value,\r     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r     *\r     * Requirements:\r     *\r     * - `target` must be a contract.\r     * - calling `target` with `data` must not revert.\r     *\r     * _Available since v3.1._\r     */\r    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r      return functionCall(target, data, \"Address: low-level call failed\");\r    }\r\r    /**\r     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r     * `errorMessage` as a fallback revert reason when `target` reverts.\r     *\r     * _Available since v3.1._\r     */\r    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r        return functionCallWithValue(target, data, 0, errorMessage);\r    }\r\r    /**\r     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r     * but also transferring `value` wei to `target`.\r     *\r     * Requirements:\r     *\r     * - the calling contract must have an ETH balance of at least `value`.\r     * - the called Solidity function must be `payable`.\r     *\r     * _Available since v3.1._\r     */\r    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r    }\r\r    /**\r     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r     * with `errorMessage` as a fallback revert reason when `target` reverts.\r     *\r     * _Available since v3.1._\r     */\r    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r        require(isContract(target), \"Address: call to non-contract\");\r\r        // solhint-disable-next-line avoid-low-level-calls\r        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r        return _verifyCallResult(success, returndata, errorMessage);\r    }\r\r    /**\r     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r     * but performing a static call.\r     *\r     * _Available since v3.3._\r     */\r    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r    }\r\r    /**\r     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r     * but performing a static call.\r     *\r     * _Available since v3.3._\r     */\r    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r        require(isContract(target), \"Address: static call to non-contract\");\r\r        // solhint-disable-next-line avoid-low-level-calls\r        (bool success, bytes memory returndata) = target.staticcall(data);\r        return _verifyCallResult(success, returndata, errorMessage);\r    }\r\r    /**\r     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r     * but performing a delegate call.\r     *\r     * _Available since v3.4._\r     */\r    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r    }\r\r    /**\r     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r     * but performing a delegate call.\r     *\r     * _Available since v3.4._\r     */\r    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r        require(isContract(target), \"Address: delegate call to non-contract\");\r\r        // solhint-disable-next-line avoid-low-level-calls\r        (bool success, bytes memory returndata) = target.delegatecall(data);\r        return _verifyCallResult(success, returndata, errorMessage);\r    }\r\r    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r        if (success) {\r            return returndata;\r        } else {\r            // Look for revert reason and bubble it up if present\r            if (returndata.length > 0) {\r                // The easiest way to bubble the revert reason is using memory via assembly\r\r                // solhint-disable-next-line no-inline-assembly\r                assembly {\r                    let returndata_size := mload(returndata)\r                    revert(add(32, returndata), returndata_size)\r                }\r            } else {\r                revert(errorMessage);\r            }\r        }\r    }\r}\r\rcontract TotoDoge is Context, IERC20, Ownable {\r    using SafeMath for uint256;\r    using Address for address;\r\r    mapping(address => uint256) public _balances;\r\r    mapping(address => mapping(address => uint256)) public _allowances;\r\r    uint256 public _totalSupply;\r\r    string public _name = \"Toto Doge\";\r    string public _symbol = \"tDOGE\";\r    uint256 public _total = 1000000000 * 10**18;\r\r\r    constructor() public {\r        _mint(_msgSender(), _total);\r        emit Transfer(address(0), _msgSender(), _total);\r    }\r\t\r    /**\r     * @dev Returns the name of the token.\r     */\r    function name() public view virtual returns (string memory) {\r        return _name;\r    }\r\r    /**\r     * @dev Returns the symbol of the token, usually a shorter version of the\r     * name.\r     */\r    function symbol() public view virtual returns (string memory) {\r        return _symbol;\r    }\r\r    /**\r     * @dev Returns the number of decimals used to get its user representation.\r     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r     *\r     * Tokens usually opt for a value of 18, imitating the relationship between\r     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r     * overloaded;\r     *\r     * NOTE: This information is only used for _display_ purposes: it in\r     * no way affects any of the arithmetic of the contract, including\r     * {IERC20-balanceOf} and {IERC20-transfer}.\r     */\r    function decimals() public view virtual returns (uint8) {\r        return 18;\r    }\r\r    /**\r     * @dev See {IERC20-totalSupply}.\r     */\r    function totalSupply() public view virtual override returns (uint256) {\r        return _totalSupply;\r    }\r\r    /**\r     * @dev See {IERC20-balanceOf}.\r     */\r    function balanceOf(address account)\r        public\r        view\r        virtual\r        override\r        returns (uint256)\r    {\r        return _balances[account];\r    }\r\r    /**\r     * @dev See {IERC20-transfer}.\r     *\r     * Requirements:\r     *\r     * - `recipient` cannot be the zero address.\r     * - the caller must have a balance of at least `amount`.\r     */\r    function transfer(address recipient, uint256 amount)\r        public\r        virtual\r        override\r        returns (bool)\r    {\r        _transfer(_msgSender(), recipient, amount);\r        return true;\r    }\r\r    /**\r     * @dev See {IERC20-allowance}.\r     */\r    function allowance(address owner, address spender)\r        public\r        view\r        virtual\r        override\r        returns (uint256)\r    {\r        return _allowances[owner][spender];\r    }\r\r    /**\r     * @dev See {IERC20-approve}.\r     *\r     * Requirements:\r     *\r     * - `spender` cannot be the zero address.\r     */\r    function approve(address spender, uint256 amount)\r        public\r        virtual\r        override\r        returns (bool)\r    {\r        _approve(_msgSender(), spender, amount);\r        return true;\r    }\r\r    /**\r     * @dev See {IERC20-transferFrom}.\r     *\r     * Emits an {Approval} event indicating the updated allowance. This is not\r     * required by the EIP. See the note at the beginning of {ERC20}.\r     *\r     * Requirements:\r     *\r     * - `sender` and `recipient` cannot be the zero address.\r     * - `sender` must have a balance of at least `amount`.\r     * - the caller must have allowance for ``sender``'s tokens of at least\r     * `amount`.\r     */\r    function transferFrom(\r        address sender,\r        address recipient,\r        uint256 amount\r    ) public virtual override returns (bool) {\r        _transfer(sender, recipient, amount);\r\r        uint256 currentAllowance = _allowances[sender][_msgSender()];\r        require(\r            currentAllowance >= amount,\r            \"ERC20: transfer amount exceeds allowance\"\r        );\r        _approve(sender, _msgSender(), currentAllowance.sub(amount));\r\r        return true;\r    }\r\r    /**\r     * @dev Atomically increases the allowance granted to `spender` by the caller.\r     *\r     * This is an alternative to {approve} that can be used as a mitigation for\r     * problems described in {IERC20-approve}.\r     *\r     * Emits an {Approval} event indicating the updated allowance.\r     *\r     * Requirements:\r     *\r     * - `spender` cannot be the zero address.\r     */\r    function increaseAllowance(address spender, uint256 addedValue)\r        public\r        virtual\r        returns (bool)\r    {\r        _approve(\r            _msgSender(),\r            spender,\r            _allowances[_msgSender()][spender].add(addedValue)\r        );\r        return true;\r    }\r\r    /**\r     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r     *\r     * This is an alternative to {approve} that can be used as a mitigation for\r     * problems described in {IERC20-approve}.\r     *\r     * Emits an {Approval} event indicating the updated allowance.\r     *\r     * Requirements:\r     *\r     * - `spender` cannot be the zero address.\r     * - `spender` must have allowance for the caller of at least\r     * `subtractedValue`.\r     */\r    function decreaseAllowance(address spender, uint256 subtractedValue)\r        public\r        virtual\r        returns (bool)\r    {\r        uint256 currentAllowance = _allowances[_msgSender()][spender];\r        require(\r            currentAllowance >= subtractedValue,\r            \"ERC20: decreased allowance below zero\"\r        );\r        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\r        return true;\r    }\r\r    /**\r     * @dev Moves tokens `amount` from `sender` to `recipient`.\r     *\r     * This is internal function is equivalent to {transfer}, and can be used to\r     * e.g. implement automatic token fees, slashing mechanisms, etc.\r     *\r     * Emits a {Transfer} event.\r     *\r     * Requirements:\r     *\r     * - `sender` cannot be the zero address.\r     * - `recipient` cannot be the zero address.\r     * - `sender` must have a balance of at least `amount`.\r     */\r    function _transfer(\r        address sender,\r        address recipient,\r        uint256 amount\r    ) internal virtual {\r        require(sender != address(0), \"ERC20: transfer from the zero address\");\r        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\r        _beforeTokenTransfer(sender, recipient, amount);\r\r        uint256 senderBalance = _balances[sender];\r\r        require(\r            senderBalance >= amount,\r            \"ERC20: transfer amount exceeds balance\"\r        );\r    \r        _balances[sender] = senderBalance.sub(amount);\r        _balances[recipient] = _balances[recipient].add(amount);\r\r        emit Transfer(sender, recipient, amount);\r    }\r\r    /**\r     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r     *\r     * This internal function is equivalent to `approve`, and can be used to\r     * e.g. set automatic allowances for certain subsystems, etc.\r     *\r     * Emits an {Approval} event.\r     *\r     * Requirements:\r     *\r     * - `owner` cannot be the zero address.\r     * - `spender` cannot be the zero address.\r     */\r    function _approve(\r        address owner,\r        address spender,\r        uint256 amount\r    ) internal virtual {\r        require(owner != address(0), \"ERC20: approve from the zero address\");\r        require(spender != address(0), \"ERC20: approve to the zero address\");\r\r        _allowances[owner][spender] = amount;\r        emit Approval(owner, spender, amount);\r    }\r\r    /**\r     * @dev Hook that is called before any transfer of tokens. This includes\r     * minting and burning.\r     *\r     * Calling conditions:\r     *\r     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r     * will be to transferred to `to`.\r     * - when `from` is zero, `amount` tokens will be minted for `to`.\r     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r     * - `from` and `to` are never both zero.\r     *\r     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r     */\r    function _beforeTokenTransfer(\r        address from,\r        address to,\r        uint256 amount\r    ) internal virtual {}\r\r    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r     * the total supply.\r     *\r     * Emits a {Transfer} event with `from` set to the zero address.\r     *\r     * Requirements:\r     *\r     * - `to` cannot be the zero address.\r     */\r    function _mint(address account, uint256 amount) internal virtual {\r        require(account != address(0), \"ERC20: mint to the zero address\");\r\r        _beforeTokenTransfer(address(0), account, amount);\r\r        _totalSupply += amount;\r        _balances[account] += amount;\r        emit Transfer(address(0), account, amount);\r    }\r\r    /**\r     * @dev Destroys `amount` tokens from `account`, reducing the\r     * total supply.\r     *\r     * Emits a {Transfer} event with `to` set to the zero address.\r     *\r     * Requirements:\r     *\r     * - `account` cannot be the zero address.\r     * - `account` must have at least `amount` tokens.\r     */\r    function _burn(address account, uint256 amount) internal virtual {\r        require(account != address(0), \"ERC20: burn from the zero address\");\r\r        _beforeTokenTransfer(account, address(0), amount);\r\r        uint256 accountBalance = _balances[account];\r        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r        _balances[account] = accountBalance - amount;\r        _totalSupply -= amount;\r\r        emit Transfer(account, address(0), amount);\r    }\r}"}}}