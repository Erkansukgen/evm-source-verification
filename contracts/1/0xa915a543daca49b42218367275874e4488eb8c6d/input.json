{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "localhost/VoxVaultV2.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"./access/ReentrancyGuard.sol\";\n\nimport \"./interfaces/Strategy.sol\";\nimport \"./interfaces/Timelock.sol\";\n\nimport \"./libs/ERC20.sol\";\nimport \"./libs/SafeMath.sol\";\n\ncontract VoxVaultV2 is ERC20Lib, ReentrancyGuard {\n    using SafeERC20Lib for IERC20Lib;\n    using Address for address;\n    using SafeMath for uint256;\n\n    IERC20Lib internal token;\n    IERC20Lib internal vox;\n\n    address public underlying;\n\n    uint256 public min = 9500;\n    uint256 public constant max = 10000;\n\n    uint256 public burnFee = 5000;\n    uint256 public constant burnFeeMax = 7500;\n    uint256 public constant burnFeeMin = 2500;\n    uint256 public constant burnFeeBase = 10000;\n\n    // Withdrawal fee\n    uint256 public withdrawalFee = 15;\n    uint256 public constant withdrawalFeeMax = 25;\n    uint256 public constant withdrawalFeeBase = 10000;\n\n    bool public isActive = false;\n\n    address public governance;\n    address public treasury;\n    address public timelock;\n    address public strategy;\n    address public burn = 0x000000000000000000000000000000000000dEaD;\n\n    mapping(address => uint256) public depositBlocks;\n    mapping(address => uint256) public deposits;\n    mapping(address => uint256) public issued;\n    mapping(address => uint256) public tiers;\n    uint256[] public multiplierCosts;\n    uint256 internal constant tierBase = 100;\n    uint256 public totalDeposited = 0;\n\n    // EVENTS\n    event Deposit(address indexed user, uint256 amount);\n    event Withdraw(address indexed user, uint256 amount);\n    event SharesIssued(address indexed user, uint256 amount);\n    event SharesPurged(address indexed user, uint256 amount);\n    event ClaimRewards(address indexed user, uint256 amount);\n    event MultiplierPurchased(address indexed user, uint256 tiers, uint256 totalCost);\n\n    constructor(\n        address _underlying, \n        address _vox, \n        address _governance, \n        address _treasury, \n        address _timelock\n        )\n        public\n        ERC20Lib(\n            string(abi.encodePacked(\"voxie \", ERC20Lib(_underlying).name())),\n            string(abi.encodePacked(\"v\", ERC20Lib(_underlying).symbol()))\n        )\n    {\n        require(\n            address(_underlying) != address(_vox), \n            \"!underlying equal to vox\");\n\n        _setupDecimals(ERC20Lib(_underlying).decimals());\n        token = IERC20Lib(_underlying);\n        vox = IERC20Lib(_vox);\n        underlying = _underlying;\n        governance = _governance;\n        treasury = _treasury;\n        timelock = _timelock;\n\n        // multiplier costs from tier 1 to 5\n        multiplierCosts.push(31250000000000000);\n        multiplierCosts.push(125000000000000000);\n        multiplierCosts.push(281250000000000000);\n        multiplierCosts.push(500000000000000000);\n        multiplierCosts.push(781250000000000000);\n    }\n\n    // **** Modifiers **** //\n\n    modifier isTimelock {\n        require(\n            msg.sender == timelock, \n            \"!timelock\"\n        );\n        _;\n    }\n\n    modifier isGovernance {\n        require(\n            msg.sender == governance, \n            \"!governance\"\n        );\n        _;\n    }\n\n    // Check the total underyling token balance to see if we should earn();\n    function balance() public view returns (uint256) {\n        return\n            token.balanceOf(address(this)).add(\n                IStrategy(strategy).balanceOf()\n            );\n    }\n\n    // Sets whether deposits are accepted by the vault\n    function setActive(bool _isActive) public isGovernance {\n        isActive = _isActive;\n    }\n\n    // Set the minimum percentage of tokens that can be deposited to earn \n    function setMin(uint256 _min) external isGovernance {\n        require(_min <= max, \"numerator cannot be greater than denominator\");\n        min = _min;\n    }\n\n    // Set a new governance address, can only be triggered by the old address\n    function setGovernance(address _governance) public isGovernance {\n        governance = _governance;\n    }\n\n    // Set the timelock address, can only be triggered by the old address\n    function setTimelock(address _timelock) public isTimelock {\n        timelock = _timelock;\n    }\n\n    // Set a new strategy address, can only be triggered by the timelock\n    function setStrategy(address _strategy) public isTimelock {\n        require(IStrategy(_strategy).underlying() == address(token), '!underlying');\n        strategy = _strategy;\n    }\n\n    // Set the burn fee for multipliers\n    function setBurnFee(uint256 _burnFee) public isTimelock {\n        require(_burnFee <= burnFeeMax, 'burn max');\n        require(_burnFee >= burnFeeMin, 'burn min');\n        burnFee = _burnFee;\n    }\n\n    // Set withdrawal fee for the vault\n    function setWithdrawalFee(uint256 _withdrawalFee) external isTimelock {\n        require(_withdrawalFee <= withdrawalFeeMax, \"!max withdrawal fee\");\n        withdrawalFee = _withdrawalFee;\n    }\n\n    // Add a new multplier with the selected cost\n    function addMultiplier(uint256 _cost) public isTimelock returns (uint256 index) {\n        multiplierCosts.push(_cost);\n        index = multiplierCosts.length - 1;\n    }\n\n    // Set new cost for multiplier, can only be triggered by the timelock\n    function setMultiplier(uint256 index, uint256 _cost) public isTimelock {\n        multiplierCosts[index] = _cost;\n    }\n\n    // Custom logic in here for how much of the underlying asset can be deposited\n    // Sets the minimum required on-hand to keep small withdrawals cheap\n    function available() public view returns (uint256) {\n        return token.balanceOf(address(this)).mul(min).div(max);\n    }\n\n    // Deposits collected underlying assets into the strategy and starts earning\n    function earn() public {\n        require(isActive, 'vault is not active');\n        require(strategy != address(0), 'strategy is not set');\n        uint256 _bal = available();\n        token.safeTransfer(strategy, _bal);\n        IStrategy(strategy).deposit();\n    }\n\n    // Deposits underlying assets from the user into the vault contract\n    function deposit(uint256 _amount) public nonReentrant {\n        require(!address(msg.sender).isContract() && msg.sender == tx.origin, \"!no contract\");\n        require(isActive, 'vault is not active');\n        require(strategy != address(0), 'strategy is not yet set');\n        \n        uint256 _pool = balance();\n        uint256 _before = token.balanceOf(address(this));\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 _after = token.balanceOf(address(this));\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\n        deposits[msg.sender] = deposits[msg.sender].add(_amount);\n        totalDeposited = totalDeposited.add(_amount);\n        uint256 shares = 0;\n        if (totalSupply() == 0) {\n            uint256 userMultiplier = tiers[msg.sender].add(tierBase);\n            shares = _amount.mul(userMultiplier).div(tierBase);\n        } else {\n            uint256 userMultiplier = tiers[msg.sender].add(tierBase);\n            shares = (_amount.mul(userMultiplier).div(tierBase).mul(totalSupply())).div(_pool);\n        }\n\n        _mint(msg.sender, shares);\n        issued[msg.sender] = issued[msg.sender].add(shares);\n        depositBlocks[msg.sender] = block.number;\n        emit Deposit(msg.sender, _amount);\n        emit SharesIssued(msg.sender, shares);\n    }\n\n    // Deposits all the funds of the user\n    function depositAll() external {\n        deposit(token.balanceOf(msg.sender));\n    }\n\n    // No rebalance implementation for lower fees and faster swaps\n    function withdraw(uint256 _amount) public nonReentrant {\n        require(!address(msg.sender).isContract() && msg.sender == tx.origin, \"!no contract\");\n        require(block.number > depositBlocks[msg.sender], 'withdraw: not the same block as deposits');\n        require(_amount > 0, 'withdraw: positive amount');\n        require(_amount <= deposits[msg.sender], 'withdraw: more than deposited');\n        require(issued[msg.sender] > 0, 'withdraw: you need to first make a deposit');\n\n        // Get the amount of user shares\n        uint256 shares = issued[msg.sender];\n        // Calculate percentage of principal being withdrawn\n        uint256 p = (_amount.mul(1e18).div(deposits[msg.sender]));\n        // Calculate amount of shares to be burned\n        uint256 r = shares.mul(p).div(1e18);\n\n        // Make sure the user has the required amount in his balance\n        require(balanceOf(msg.sender) >= r, \"withdraw: not enough shares in balance\");\n        // Burn the proportion of shares that are being withdrawn\n        _burn(msg.sender, r);\n        // Reduce the amount from user's issued amount\n        issued[msg.sender] = issued[msg.sender].sub(r);\n\n        // Calculate amount of rewards the user has gained\n        uint256 rewards = balance().sub(totalDeposited);\n        uint256 userRewards = 0;\n        if (rewards > 0) {\n            userRewards = (rewards.mul(shares)).div(totalSupply());\n        }\n\n        // Receive the correct proportion of the rewards\n        if (userRewards > 0) {\n            userRewards = userRewards.mul(p).div(1e18);\n        }\n\n        // Calculate the withdrawal amount as _amount + user rewards\n        uint256 withdrawAmount = _amount.add(userRewards);\n\n        // Check balance\n        uint256 b = token.balanceOf(address(this));\n        if (b < withdrawAmount) {\n            uint256 _withdraw = withdrawAmount.sub(b);\n            IStrategy(strategy).withdraw(_withdraw);\n            uint256 _after = token.balanceOf(address(this));\n            uint256 _diff = _after.sub(b);\n            if (_diff < _withdraw) {\n                withdrawAmount = b.add(_diff);\n            }\n        }\n\n        // Remove the withdrawn principal from total and user deposits\n        deposits[msg.sender] = deposits[msg.sender].sub(_amount);\n        totalDeposited = totalDeposited.sub(_amount);\n\n        // Calculate withdrawal fee and deduct from amount\n        uint256 _withdrawalFee = _amount.mul(withdrawalFee).div(withdrawalFeeBase);\n        token.safeTransfer(treasury, _withdrawalFee);\n        token.safeTransfer(msg.sender, withdrawAmount.sub(_withdrawalFee));\n\n        // Emit events\n        emit Withdraw(msg.sender, _amount);\n        emit SharesPurged(msg.sender, r);\n        emit ClaimRewards(msg.sender, userRewards);\n    }\n\n    // Withdraws all underlying assets belonging to the user\n    function withdrawAll() external {\n        withdraw(deposits[msg.sender]);\n    }\n\n    function pendingRewards(address account) external view returns (uint256) {\n        // Calculate amount of rewards the user has gained\n        uint256 rewards = balance().sub(totalDeposited);\n        uint256 shares = issued[account];\n        if (rewards > 0) {\n            return (rewards.mul(shares)).div(totalSupply());\n        }\n    }\n\n    // Purchase a multiplier tier for the user\n    function purchaseMultiplier(uint256 _tiers) external returns (uint256 newTier) {\n        require(isActive, 'vault is not active');\n        require(strategy != address(0), 'strategy is not yet set');\n        require(_tiers > 0, 'you need to purchase at least one multiplier');\n        uint256 multipliersLength = multiplierCosts.length;\n        require(tiers[msg.sender].add(_tiers) <= multipliersLength, 'you can not purchase so many tiers');\n\n        uint256 totalCost = 0;\n        uint256 lastMultiplier = tiers[msg.sender].add(_tiers);\n        for (uint256 i = tiers[msg.sender]; i < multipliersLength; i++) {\n            if (i == lastMultiplier) {\n                break;\n            }\n            totalCost = totalCost.add(multiplierCosts[i]);\n        }\n\n        require(IERC20Lib(vox).balanceOf(msg.sender) >= totalCost, 'you do not have enough VOX to purchase the multiplier tiers');\n        vox.safeTransferFrom(msg.sender, address(this), totalCost);\n        newTier = tiers[msg.sender].add(_tiers);\n        tiers[msg.sender] = newTier;\n        emit MultiplierPurchased(msg.sender, _tiers, totalCost);\n    }\n\n    // Distribute the VOX tokens collected by the multiplier purchases\n    function distribute() external isGovernance {\n        uint256 b = vox.balanceOf(address(this));\n        if (b > 0) {\n            uint256 toBurn = b.mul(burnFee).div(burnFeeBase);\n            uint256 leftover = b.sub(toBurn);\n            vox.safeTransfer(burn, toBurn);\n            vox.safeTransfer(treasury, leftover);\n        }\n    }\n\n    // Used to salvage any non-underlying assets to the treasury\n    function salvage(address reserve, uint256 amount) external {\n        require(msg.sender == governance, \"!governance\");\n        require(reserve != address(token), \"token\");\n        require(reserve != address(vox), \"vox\");\n        IERC20Lib(reserve).safeTransfer(treasury, amount);\n    }\n\n    // Helper function when migrating to new version\n    function setMultiplier(address account, uint256 multiplier) external isGovernance {\n        require(multiplier <= multiplierCosts.length, 'multiplier value too high');\n        tiers[account] = multiplier;\n    }\n\n    // Returns the current multiplier tier for the user\n    function getMultiplier() external view returns (uint256) {\n        return tiers[msg.sender];\n    }\n\n    // Returns the next multiplier tier cost for the user\n    function getNextMultiplierCost() external view returns (uint256) {\n        require(tiers[msg.sender] < multiplierCosts.length, 'all tiers have already been purchased');\n        return multiplierCosts[tiers[msg.sender]];\n    }\n\n    // Returns the total number of multipliers\n    function getCountOfMultipliers() external view returns (uint256) {\n        return multiplierCosts.length;\n    }\n\n    // Returns the current ratio between earned assets and deposited assets\n    function getRatio() public view returns (uint256) {\n        return (balance().sub(totalDeposited)).mul(1e18).div(totalSupply());\n    }\n}"
    },
    "localhost/access/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"
    },
    "localhost/interfaces/Strategy.sol": {
      "content": "pragma solidity 0.6.12;\n\ninterface IStrategy {\n    function rewards() external view returns (address);\n\n    function gauge() external view returns (address);\n\n    function underlying() external view returns (address);\n\n    function timelock() external view returns (address);\n\n    function deposit() external;\n\n    function withdraw(uint256) external;\n\n    function withdrawAll() external returns (uint256);\n\n    function balanceOf() external view returns (uint256);\n\n    function harvest() external;\n\n    function salvage(address) external;\n\n    function setTimelock(address _timelock) external;\n\n    function setGovernance(address _governance) external;\n\n    function setTreasury(address _treasury) external;\n}"
    },
    "localhost/interfaces/Timelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\ninterface ITimelock {\n    function MINIMUM_DELAY() external view returns (uint);\n    function MAXIMUM_DELAY() external view returns (uint);\n    function delay() external view returns (uint);\n}"
    },
    "localhost/libs/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"
    },
    "localhost/libs/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"./SafeMath.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Lib {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n// File: contracts/utils/Address.sol\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\n            data\n        );\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: contracts/token/ERC20/ERC20.sol\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Lib is Context, IERC20Lib {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public override view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public override view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        virtual\n        override\n        view\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(\n                subtractedValue,\n                \"ERC20: decreased allowance below zero\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(\n            amount,\n            \"ERC20: burn amount exceeds balance\"\n        );\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Lib {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IERC20Lib token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20Lib token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Lib token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Lib token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(\n            value\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Lib token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\n            value,\n            \"SafeERC20: decreased allowance below zero\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Lib token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n"
    },
    "localhost/libs/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"
    }
  }
}