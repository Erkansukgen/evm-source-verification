{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Funtastic.sol":{"content":"pragma solidity ^0.4.24;\r\n\r\n// Example. Token and crowdsale contact\r\n// ====================================\r\n// Crowdsale basic information:\r\n// ------------------------------------\r\n// Token name: Funtastic Coin\r\n// Token symbol: FUNT\r\n// Decimals: 18\r\n// Total supply cap: 90,000,000 tokens\r\n// Price: 500 tokens per 1 ether\r\n// Bonus price 100% for 24 hours: 1000 tokens per 1 ether\r\n// HardCap: 5000 ether\r\n// Crowdsale duration: 7 days\r\n// Minimal investment: 0.01 ether\r\n// ------------------------------------\r\n\r\n// ====================================\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        }\r\n    function safeDiv(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function tokensReleased() public view returns (uint);\r\n    function checkBalanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address private newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the additions\r\n// ----------------------------------------------------------------------------\r\ncontract Funtastic is ERC20Interface, Owned, SafeMath {\r\n    string public symbol;\r\n    string public tokenName;\r\n    string public version = \"1.1\";\r\n    uint private decimals;\r\n    uint private _totalSupply;\r\n    uint public startOfCrowdsale = 1607265334; // 03.09.2018 08:10 UTC   <-- CHANGE THIS\r\n    uint public endOfCrowdsale;\r\n    uint public hardCap;\r\n    uint public weiRaised;\r\n    uint public lastTransactionReceivedInWei;\r\n    uint public bonusEnds;\r\n    bool public stopCrowdsale;\r\n    bool public wasCrowdsaleStoped;\r\n    uint public numberOfContributors;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        symbol = \"FUNT\"; // <-- CHANGE THIS\r\n        tokenName = \"Funtastic\"; // <-- CHANGE THIS\r\n        decimals = 0; // <-- CHANGE THIS\r\n        bonusEnds = startOfCrowdsale + 60 minutes; // <-- CHANGE minutes\r\n        endOfCrowdsale = startOfCrowdsale + 2 hours; // <-- CHANGE hours\r\n        hardCap = 50000 ether;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function tokensReleased() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function checkBalanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account. The `spender` contract function\r\n    // `receiveApproval(...)` is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Set price depending on period\r\n    // ------------------------------------------------------------------------\r\n    function () public payable {\r\n        require((crowdsaleIsActive()) && (msg.value >= .01 ether));\r\n        uint tokens;\r\n        if (now <= bonusEnds) {\r\n            tokens = msg.value * 1000 / 1 ether; // <-- CHANGE THIS\r\n        } else {\r\n            tokens = msg.value * 500 / 1 ether; // <-- CHANGE THIS\r\n        }\r\n        lastTransactionReceivedInWei = msg.value;\r\n        weiRaised = safeAdd(weiRaised, lastTransactionReceivedInWei);\r\n        _totalSupply = safeAdd(_totalSupply, tokens);\r\n        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\r\n        emit Transfer(address(0), msg.sender, tokens);\r\n        owner.transfer(msg.value);\r\n        numberOfContributors += 1; // actually counts number of contributions\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Anyone can check if the crowdsale is ON\r\n    // ------------------------------------------------------------------------\r\n    function crowdsaleIsActive() public view returns (bool) {\r\n        return (\r\n        now >= startOfCrowdsale && now <= endOfCrowdsale && weiRaised <= hardCap && stopCrowdsale == false\r\n        );\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner {\r\n        ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can stop crowdsale anytime\r\n    // ------------------------------------------------------------------------\r\n    function stopCrowdsale() public onlyOwner {\r\n        stopCrowdsale = true;\r\n        if (stopCrowdsale = true) {\r\n           wasCrowdsaleStoped = true;\r\n        } else {\r\n            wasCrowdsaleStoped = false;\r\n        }\r\n    }\r\n}"}}}