{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/HF.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.6;\r\n\r\nimport 'https://github.com/qq79324055/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol';\r\n\r\ninterface Token {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract HackerFederation {\r\n    using SafeMath for uint256;\r\n\r\n    // Hashrate decimals\r\n    uint256 public constant hashRateDecimals = 5;\r\n    // 10 usdt = 1 T\r\n    uint256 public constant hashRatePerUsdt = 10;\r\n    // Manager address\r\n    address public owner;\r\n    // Root address\r\n    address public rootAddress;\r\n    // Burn address\r\n    address public burnAddress;\r\n\r\n    // DAI-HE3 pair address\r\n    address public daiToHe3Address;\r\n\r\n    // DAI ERC20 address\r\n    address public daiTokenAddress;\r\n    Token tokenDai;\r\n    // HE-3 ERC20 address\r\n    address public he3TokenAddress;\r\n    Token tokenHe3;\r\n\r\n    // HE-1 ERC20 address\r\n    address public he1TokenAddress;\r\n\r\n    // Userinfo\r\n    struct User {\r\n        address superior;\r\n        uint256 hashRate;\r\n        bool isUser;\r\n    }\r\n    mapping(address => User) public users;\r\n\r\n    // Buy hashrate event\r\n    event LogBuyHashRate(address indexed owner, address indexed superior, uint256 hashRate);\r\n\r\n    constructor(\r\n        address _rootAddress, \r\n        address _burnAddress, \r\n        address _daiToHe3Address, \r\n        address _daiTokenAddress, \r\n        address _he3TokenAddress, \r\n        address _he1TokenAddress\r\n    ) public {\r\n        owner = msg.sender;\r\n        rootAddress = _rootAddress;\r\n        burnAddress = _burnAddress;\r\n        daiToHe3Address = _daiToHe3Address;\r\n\r\n        daiTokenAddress = _daiTokenAddress;\r\n        tokenDai = Token(daiTokenAddress);\r\n\r\n        he3TokenAddress = _he3TokenAddress;\r\n        tokenHe3 = Token(he3TokenAddress);\r\n\r\n        he1TokenAddress = _he1TokenAddress;\r\n    }\r\n\r\n    // Modifier func\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"This function is restricted to the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier notAddress0(address newAddress) {\r\n        require(newAddress != address(0), \"Address should not be address(0)\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Use HE-1 to buy hashrate\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_tokenAmount`: Amount of HE-1 \r\n     * - `_superior`: User's inviter\r\n     */\r\n    function buyHashRateWithHE1(uint256 _tokenAmount, address _superior) public {\r\n        _buyHashRate(he1TokenAddress, _tokenAmount, _tokenAmount.div(10**12), _superior);\r\n    }\r\n\r\n    /**\r\n     * Use HE-3 to buy hashrate\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_tokenAmount`: Amount of HE-3\r\n     * - `_superior`: User's inviter\r\n     */\r\n    function buyHashRateWithHE3(uint256 _tokenAmount, address _superior) public {\r\n        uint256 totalDai = getHe3ToDai(_tokenAmount);\r\n        _buyHashRate(he3TokenAddress, _tokenAmount, totalDai.div(10**12), _superior);\r\n    }\r\n\r\n    /**\r\n     * Buy hashrate\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_token`: HE-1 or HE-3 address\r\n     * - `_tokenAmount`: Amount of token\r\n     * - `_usdtAmount`: Value of _tokenAmount to USDT\r\n     * - `_superior`: inviter\r\n     */\r\n    function _buyHashRate(address _tokenAddress,uint256 _tokenAmount, uint256 _usdtAmount, address _superior) internal {\r\n        // require _superior\r\n        require(users[_superior].isUser || _superior == rootAddress, \"Superiorshould be a user or rootAddress\");\r\n        \r\n        // burn the token sent by user\r\n        bool sent = Token(_tokenAddress).transferFrom(msg.sender, burnAddress, _tokenAmount);\r\n        require(sent, \"Token transfer failed\");\r\n\r\n        // USDT decimals = 6\r\n        require(_usdtAmount >= 10000000, \"Usdt should be great than or equal 10\");\r\n        \r\n        uint256 hashRate = _usdtAmount.div(10).div(hashRatePerUsdt);\r\n        if (users[msg.sender].isUser) {\r\n            users[msg.sender].hashRate = users[msg.sender].hashRate.add(hashRate);\r\n        } else {\r\n            users[msg.sender].superior = _superior;\r\n            users[msg.sender].hashRate = hashRate;\r\n            users[msg.sender].isUser = true;\r\n        }\r\n        \r\n        // Buy hashrate event\r\n        emit LogBuyHashRate(msg.sender, _superior, hashRate);\r\n    }\r\n\r\n    // Update owner address\r\n    function updateOwnerAddress(address _newOwnerAddress) public onlyOwner {\r\n        owner = _newOwnerAddress;\r\n    }\r\n\r\n    // Update burn address\r\n    function updateBurnAddress(address _newBurnAddress) public onlyOwner {\r\n        burnAddress = _newBurnAddress;\r\n    }\r\n\r\n    // update HE-3 contract address\r\n    function updateHe3TokenAddress(address _he3TokenAddress) public onlyOwner notAddress0(_he3TokenAddress) {\r\n        he3TokenAddress = _he3TokenAddress;\r\n        tokenHe3 = Token(he3TokenAddress);\r\n    }\r\n\r\n    // update HE-1 contract address\r\n    function updateHe1TokenAddress(address _he1TokenAddress) public onlyOwner notAddress0(_he1TokenAddress) {\r\n        he1TokenAddress = _he1TokenAddress;\r\n    }\r\n\r\n    // update DAI contract address\r\n    function updateDaiToHe3AddressAddress(address _daiToHe3Address) public onlyOwner notAddress0(_daiToHe3Address) {\r\n        daiToHe3Address = _daiToHe3Address;\r\n    }\r\n\r\n    // update DAI-HE3 uniswap pair contract address\r\n    function updateDaiTokenAddress(address _daiTokenAddress) public onlyOwner notAddress0(_daiTokenAddress) {\r\n        daiTokenAddress = _daiTokenAddress;\r\n        tokenDai = Token(daiTokenAddress);\r\n    }\r\n\r\n    /**\r\n     * Is user?\r\n     */\r\n    function isUser(address _userAddress) public view returns (bool) {\r\n        return users[_userAddress].isUser;\r\n    }\r\n\r\n    // Get amount 1 HE3 to DAI\r\n    function getDaiPerHe3() public view returns (uint256) {\r\n        return getHe3ToDai(10**18);\r\n    }\r\n\r\n    // Get amount _he3Amount HE3 to DAI \r\n    function getHe3ToDai(uint256 _he3Amount) internal view returns (uint256) {\r\n        return tokenDai.balanceOf(daiToHe3Address).mul(_he3Amount).div(tokenHe3.balanceOf(daiToHe3Address));\r\n    }\r\n}\r\n"
    },
    "https://github.com/qq79324055/openzeppelin-contracts/blob/release-v3.0.0/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    }
  }
}