{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/BatchIsContract.sol":{"content":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.7;\n\ncontract BatchIsContract {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function _isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     */\n    function batchIsContract(address[] memory _addressList)\n        external view\n        returns (bool[] memory results)\n    {\n        results = new bool[](_addressList.length);\n        for (uint256 i = 0; i < _addressList.length; i++) {\n            results[i] = _isContract(_addressList[i]);\n        }\n        return results;\n    }\n}\n"}}}