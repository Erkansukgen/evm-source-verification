{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/Sett.sol":{"content":"// SPDX-License-Identifier: MIT\n\n\npragma solidity 0.6.12;\n\n\n\n// Part: ICurveFi\n\ninterface ICurveFi {\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\n        external;\n\n    function calc_token_amount(uint256[2] calldata amounts, bool isDeposit)\n        external\n        view\n        returns (uint256);\n\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        int128 i,\n        uint256 min_amount\n    ) external;\n\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\n        external\n        view\n        returns (uint256);\n}\n\n// Part: ISett\n\ninterface ISett {\n    function token() external view returns (address);\n\n    function deposit(uint256) external;\n\n    function depositFor(address, uint256) external;\n\n    function depositAll() external;\n\n    function withdraw(uint256) external;\n\n    function withdrawAll() external;\n\n    function earn() external;\n\n    function decimals() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function balance() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function claimInsurance() external; // NOTE: Only yDelegatedVault implements this\n\n    function getPricePerFullShare() external view returns (uint256);\n\n    function blockLock(address _caller) external view returns (uint256);\n}\n\n// Part: IZapRenWBTC\n\ninterface IZapRenWBTC {\n    function calcMint(address token, uint256 amount)\n        external\n        view\n        returns (\n            uint256 poolId,\n            uint256 idx,\n            uint256 bBTC,\n            uint256 fee\n        );\n\n    function mint(\n        address token,\n        uint256 amount,\n        uint256 poolId,\n        uint256 idx,\n        uint256 minOut\n    ) external returns (uint256);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts-upgradeable@3.4.0/AddressUpgradeable\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts-upgradeable@3.4.0/IERC20Upgradeable\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts-upgradeable@3.4.0/SafeMathUpgradeable\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Part: IYearnSett\n\ninterface IYearnSett is ISett {\n    function pricePerShare() external view returns (uint256);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts-upgradeable@3.4.0/Initializable\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts-upgradeable@3.4.0/SafeERC20Upgradeable\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using SafeMathUpgradeable for uint256;\n    using AddressUpgradeable for address;\n\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts-upgradeable@3.4.0/ContextUpgradeable\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts-upgradeable@3.4.0/PausableUpgradeable\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n\n// File: SettToRenIbbtcZap.sol\n\ncontract SettToRenIbbtcZap is PausableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using AddressUpgradeable for address;\n    using SafeMathUpgradeable for uint256;\n\n    address public guardian;\n    address public governance;\n\n    struct ZapConfig {\n        ISett sett;\n        IERC20Upgradeable token;\n        ICurveFi curvePool;\n        IERC20Upgradeable withdrawToken;\n        int128 withdrawTokenIndex;\n    }\n    ZapConfig[] public zapConfigs;\n\n    IERC20Upgradeable public constant WBTC =\n        IERC20Upgradeable(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\n    IERC20Upgradeable public constant RENBTC =\n        IERC20Upgradeable(0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D);\n    IERC20Upgradeable public constant IBBTC =\n        IERC20Upgradeable(0xc4E15973E6fF2A35cC804c2CF9D2a1b817a8b40F);\n\n    IZapRenWBTC public constant IBBTC_MINT_ZAP =\n        IZapRenWBTC(0xe8E40093017A3A55B5c2BC3E9CA6a4d208c07734);\n\n    ISett public constant RENCRV_SETT =\n        ISett(0x6dEf55d2e18486B9dDfaA075bc4e4EE0B28c1545);\n    address public constant WBTC_YEARN_SETT =\n        0x4b92d19c11435614CD49Af1b589001b7c08cD4D5;\n\n    uint256 public constant SETT_WITHDRAWAL_FEE = 10;\n    uint256 public constant MAX_FEE = 10_000;\n\n    event GovernanceUpdated(address indexed newGovernanceAddress);\n    event GuardianshipTransferred(address indexed newGuardianAddress);\n\n    function initialize(address _governance, address _guardian)\n        public\n        initializer\n        whenNotPaused\n    {\n        require(_guardian != address(0)); // dev: 0 address\n        require(_governance != address(0)); // dev: 0 address\n\n        guardian = _guardian;\n        governance = _governance;\n\n        // Allow zap to mint ibbtc through wbtc/renbtc\n        WBTC.safeApprove(address(IBBTC_MINT_ZAP), type(uint256).max);\n        RENBTC.safeApprove(address(IBBTC_MINT_ZAP), type(uint256).max);\n\n        // Add zap configs for setts\n        _addZapConfig(\n            WBTC_YEARN_SETT, // byvWBTC\n            address(WBTC),\n            address(0), // No curve pool\n            address(WBTC),\n            0 // No curve pool\n        );\n        _addZapConfig(\n            0xd04c48A53c111300aD41190D63681ed3dAd998eC, // bcrvSBTC\n            0x075b1bb99792c9E1041bA13afEf80C91a1e70fB3, // sbtcCrv\n            0x7fC77b5c7614E1533320Ea6DDc2Eb61fa00A9714, // sbtcCrv curve pool\n            address(WBTC),\n            1 // idx - renbtc: 0, wbtc: 1\n        );\n        _addZapConfig(\n            0xb9D076fDe463dbc9f915E5392F807315Bf940334, // bcrvTBTC\n            0x64eda51d3Ad40D56b9dFc5554E06F94e1Dd786Fd, // tbtcCrv\n            0xaa82ca713D94bBA7A89CEAB55314F9EfFEdDc78c, // tbtcCrv zap\n            address(WBTC),\n            2 // idx - renbtc: 1, wbtc: 2\n        );\n        _addZapConfig(\n            0x8c76970747afd5398e958bDfadA4cf0B9FcA16c4, // bcrvHBTC\n            0xb19059ebb43466C323583928285a49f558E572Fd, // hbtcCrv\n            0x4CA9b3063Ec5866A4B82E437059D2C43d1be596F, // hbtcCrv curve pool\n            address(WBTC),\n            1 // idx - wbtc: 1\n        );\n        _addZapConfig(\n            0x5Dce29e92b1b939F8E8C60DcF15BDE82A85be4a9, // bcrvBBTC\n            0x410e3E86ef427e30B9235497143881f717d93c2A, // bbtcCrv\n            0xC45b2EEe6e09cA176Ca3bB5f7eEe7C47bF93c756, // bbtcCrv zap\n            address(WBTC),\n            2 // idx - renbtc: 1, wbtc: 2\n        );\n    }\n\n    /// ===== Modifiers =====\n\n    function _onlyGovernance() internal view {\n        require(msg.sender == governance, \"onlyGovernance\");\n    }\n\n    function _onlyGovernanceOrGuardian() internal view {\n        require(\n            msg.sender == governance || msg.sender == guardian,\n            \"onlyGovernanceOrGuardian\"\n        );\n    }\n\n    /// ===== Permissioned Actions: Guardian =====\n\n    function pause() external {\n        _onlyGovernanceOrGuardian();\n        _pause();\n    }\n\n    /// ===== Permissioned Actions: Governance =====\n\n    function unpause() external {\n        _onlyGovernance();\n        _unpause();\n    }\n\n    function setGuardian(address _guardian) external {\n        _onlyGovernance();\n        guardian = _guardian;\n        emit GuardianshipTransferred(guardian);\n    }\n\n    function setGovernance(address _governance) external {\n        _onlyGovernance();\n        governance = _governance;\n        emit GovernanceUpdated(governance);\n    }\n\n    function addZapConfig(\n        address _sett,\n        address _token,\n        address _curvePool,\n        address _withdrawToken,\n        int128 _withdrawTokenIndex\n    ) external {\n        _onlyGovernance();\n        _addZapConfig(\n            _sett,\n            _token,\n            _curvePool,\n            _withdrawToken,\n            _withdrawTokenIndex\n        );\n    }\n\n    function setZapConfig(\n        uint256 _idx,\n        address _sett,\n        address _token,\n        address _curvePool,\n        address _withdrawToken,\n        int128 _withdrawTokenIndex\n    ) external {\n        _onlyGovernance();\n\n        require(_sett != address(0));\n        require(_token != address(0));\n        require(\n            _withdrawToken == address(WBTC) || _withdrawToken == address(RENBTC)\n        );\n\n        zapConfigs[_idx].sett = ISett(_sett);\n        zapConfigs[_idx].token = IERC20Upgradeable(_token);\n        zapConfigs[_idx].curvePool = ICurveFi(_curvePool);\n        zapConfigs[_idx].withdrawToken = IERC20Upgradeable(_withdrawToken);\n        zapConfigs[_idx].withdrawTokenIndex = _withdrawTokenIndex;\n    }\n\n    /// ===== Internal Implementations =====\n\n    function _addZapConfig(\n        address _sett,\n        address _token,\n        address _curvePool,\n        address _withdrawToken,\n        int128 _withdrawTokenIndex\n    ) internal {\n        require(_sett != address(0));\n        require(_token != address(0));\n        require(\n            _withdrawToken == address(WBTC) || _withdrawToken == address(RENBTC)\n        );\n\n        zapConfigs.push(\n            ZapConfig({\n                sett: ISett(_sett),\n                token: IERC20Upgradeable(_token),\n                curvePool: ICurveFi(_curvePool),\n                withdrawToken: IERC20Upgradeable(_withdrawToken),\n                withdrawTokenIndex: _withdrawTokenIndex\n            })\n        );\n        if (_curvePool != address(0)) {\n            IERC20Upgradeable(_token).safeApprove(\n                _curvePool,\n                type(uint256).max\n            );\n        }\n    }\n\n    /// ===== Public Functions =====\n\n    function calcMint(uint256 _shares, uint256 _settIdx)\n        public\n        view\n        returns (uint256)\n    {\n        if (_shares == 0) {\n            return 0;\n        }\n\n        ZapConfig memory zapConfig = zapConfigs[_settIdx];\n\n        // Get price per share\n        uint256 pricePerShare;\n        if (address(zapConfig.sett) == WBTC_YEARN_SETT) {\n            // byvWBTC doesn't support getPricePerFullShare\n            pricePerShare = IYearnSett(address(zapConfig.sett)).pricePerShare();\n        } else {\n            pricePerShare = zapConfig.sett.getPricePerFullShare();\n        }\n\n        // Withdraw (0.1% withdrawal fee)\n        uint256 underlyingAmount = _shares\n            .mul(pricePerShare)\n            .mul(MAX_FEE.sub(SETT_WITHDRAWAL_FEE))\n            .div(MAX_FEE)\n            .div(10**zapConfig.sett.decimals());\n\n        // Underlying of bvyWBTC is WBTC\n        uint256 btcAmount = underlyingAmount;\n\n        if (address(zapConfig.curvePool) != address(0)) {\n            // Remove renBTC/WBTC from pool (0.04% fee + slippage)\n            btcAmount = zapConfig.curvePool.calc_withdraw_one_coin(\n                underlyingAmount,\n                zapConfig.withdrawTokenIndex\n            );\n        }\n\n        // Zap (calcMint)\n        (, , uint256 ibbtcAmount, ) = IBBTC_MINT_ZAP.calcMint(\n            address(zapConfig.withdrawToken),\n            btcAmount\n        );\n        return ibbtcAmount;\n    }\n\n    function mint(\n        uint256 _shares,\n        uint256 _settIdx,\n        uint256 _minOut\n    ) public whenNotPaused returns (uint256) {\n        // Non-zero shares\n        require(_shares > 0, \"No shares\");\n        // Ensure mint zap isn't block locked\n        require(\n            RENCRV_SETT.blockLock(address(IBBTC_MINT_ZAP)) < block.number,\n            \"blockLocked\"\n        );\n\n        ZapConfig memory zapConfig = zapConfigs[_settIdx];\n\n        if (address(zapConfig.sett) != WBTC_YEARN_SETT) {\n            // Not block locked by sett\n            require(\n                zapConfig.sett.blockLock(address(this)) < block.number,\n                \"blockLocked\"\n            );\n        }\n\n        IERC20Upgradeable(address(zapConfig.sett)).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _shares\n        );\n\n        // Withdraw from sett\n        zapConfig.sett.withdraw(_shares);\n        uint256 underlyingAmount = zapConfig.token.balanceOf(address(this));\n\n        // Underlying of bvyWBTC is WBTC\n        uint256 btcAmount = underlyingAmount;\n\n        if (address(zapConfig.curvePool) != address(0)) {\n            // Remove from pool\n            zapConfig.curvePool.remove_liquidity_one_coin(\n                underlyingAmount,\n                zapConfig.withdrawTokenIndex,\n                0 // minOut\n            );\n            btcAmount = zapConfig.withdrawToken.balanceOf(address(this));\n        }\n\n        // Use other zap to deposit\n        uint256 ibbtcAmount = IBBTC_MINT_ZAP.mint(\n            address(zapConfig.withdrawToken),\n            btcAmount,\n            0, // poolId - renCrv: 0\n            address(zapConfig.withdrawToken) == address(RENBTC) ? 0 : 1, // idx - renbtc: 0, wbtc: 1\n            _minOut\n        );\n        IBBTC.safeTransfer(msg.sender, ibbtcAmount);\n\n        return ibbtcAmount;\n    }\n}\n"}}}