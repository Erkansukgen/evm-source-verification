{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "ERC721.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\n// phoodles.xyz\r\ncontract ERC721 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\r\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    string public name;\r\n    string public symbol;\r\n\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(uint256 => address) public ownerOf;\r\n    mapping(uint256 => address) public getApproved;\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n    uint256 public PRICE = 0.025 ether;\r\n    uint256 public constant MAX = 10000;\r\n    address public owner;\r\n\r\n    constructor(string memory _name, string memory _symbol) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function lowerPrice(uint256 newPrice) external {\r\n        require(msg.sender == owner, \"NOT_ALLOWED\");\r\n        require(newPrice < PRICE, \"TOO_HIGH\");\r\n        PRICE = newPrice;\r\n    }\r\n\r\n    function tokenURI(uint256 id) public pure returns(string memory) {\r\n        return string(abi.encodePacked(\"ipfs://QmREqrCgU4PryZtq41tUwsrREqXTEwWW7A1xZ9W5yWUs6e/\", toString(id)));\r\n    }\r\n\r\n    function approve(address spender, uint256 id) public {\r\n        address approver = ownerOf[id];\r\n\r\n        require(msg.sender == approver || isApprovedForAll[approver][msg.sender], \"NOT_AUTHORIZED\");\r\n\r\n        getApproved[id] = spender;\r\n\r\n        emit Approval(approver, spender, id);\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public {\r\n        isApprovedForAll[msg.sender][operator] = approved;\r\n\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id\r\n    ) public {\r\n        require(from == ownerOf[id], \"WRONG_FROM\");\r\n\r\n        require(to != address(0), \"INVALID_RECIPIENT\");\r\n\r\n        require(\r\n            msg.sender == from || msg.sender == getApproved[id] || isApprovedForAll[from][msg.sender],\r\n            \"NOT_AUTHORIZED\"\r\n        );\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        unchecked {\r\n            balanceOf[from]--;\r\n\r\n            balanceOf[to]++;\r\n        }\r\n\r\n        delete getApproved[id];\r\n\r\n        ownerOf[id] = to;\r\n\r\n        emit Transfer(from, to, id);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id\r\n    ) public {\r\n        transferFrom(from, to, id);\r\n\r\n        require(\r\n            to.code.length == 0 ||\r\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\") ==\r\n                ERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        bytes memory data\r\n    ) public {\r\n        transferFrom(from, to, id);\r\n\r\n        require(\r\n            to.code.length == 0 ||\r\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\r\n                ERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public pure returns (bool) {\r\n        return\r\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\r\n            interfaceId == 0x5b5e139f || // ERC165 Interface ID for ERC165\r\n            interfaceId == 0x01ffc9a7; // ERC165 Interface ID for ERC721Metadata\r\n    }\r\n\r\n    function mint(uint256 amount) external payable {\r\n        require(amount <= 20, \"TOO_MANY\");\r\n        require(amount * PRICE == msg.value, \"INVALID_PAYMENT\");\r\n        require(totalSupply + amount <= MAX, \"TOO_MANY\");\r\n        for (uint256 x = 0; x < amount; x++) {\r\n            _mint(msg.sender, totalSupply);\r\n        }\r\n    }\r\n\r\n    function _mint(address to, uint256 id) internal {\r\n        require(to != address(0), \"INVALID_RECIPIENT\");\r\n\r\n        require(ownerOf[id] == address(0), \"ALREADY_MINTED\");\r\n\r\n        // Counter overflow is incredibly unrealistic.\r\n        unchecked {\r\n            totalSupply++;\r\n\r\n            balanceOf[to]++;\r\n        }\r\n\r\n        ownerOf[id] = to;\r\n\r\n        emit Transfer(address(0), to, id);\r\n    }\r\n\r\n    function withdraw() public {\r\n        require(msg.sender == owner, \"NOT_ALLOWED\");\r\n        uint balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n}\r\n\r\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\r\ninterface ERC721TokenReceiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}"
    }
  }
}