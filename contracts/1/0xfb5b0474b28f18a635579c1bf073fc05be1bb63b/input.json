{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Layerx.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\n /**\r\n * @title SafeMath\r\n * @dev   Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256){\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b,\"Calculation error\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256){\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0,\"Calculation error\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256){\r\n        require(b <= a,\"Calculation error\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256){\r\n        uint256 c = a + b;\r\n        require(c >= a,\"Calculation error\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256){\r\n        require(b != 0,\"Calculation error\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n /**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\n /**\r\n * @title Layerx Contract For ERC20 Tokens\r\n * @dev LAYERX tokens as per ERC20 Standards\r\n */\r\ncontract Layerx is IERC20, Owned {\r\n    using SafeMath for uint256;\r\n    \r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint _totalSupply;\r\n    uint public ethToNextStake = 0;\r\n    uint stakeNum = 0;\r\n    uint amtByDay = 27397260274000000000;\r\n    address public stakeCreator; \r\n    bool isPaused = false;\r\n    \r\n    struct Stake {\r\n        uint start;\r\n        uint end;\r\n        uint layerLockedTotal;\r\n        uint layerxReward;\r\n        uint ethReward;\r\n    }\r\n    \r\n    struct StakeHolder {\r\n        uint layerLocked;\r\n        uint layerLockedToNextStake;\r\n        uint numStake;\r\n    }\r\n    \r\n    struct Rewards {\r\n        uint layerLocked;\r\n        uint layersx;\r\n        uint eth;\r\n        bool isReceived;\r\n    }    \r\n    \r\n    event logLockedTokens(address holder, uint amountLocked, uint stakeId);\r\n    event logUnlockedTokens(address holder, uint amountUnlocked);\r\n    event logNewStakePayment(uint id, uint amount);\r\n    event logWithdraw(address holder, uint layerx, uint eth, uint stakeId);    \r\n    \r\n    modifier paused {\r\n        require(isPaused == false, \"This contract was paused by the owner!\");\r\n        _;\r\n    }\r\n    \r\n    modifier exist (uint index) {\r\n        require(index <= stakeNum, 'This stake does not exist.');\r\n        _;        \r\n    }\r\n    \r\n    mapping (address => StakeHolder) public stakeHolders;\r\n    mapping (uint => Stake) public stakes;\r\n    mapping (address => mapping (uint => Rewards)) public rewards;\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping(address => uint)) allowed;   \r\n    mapping (address => bool) private swap;\r\n    \r\n    IERC20 UNILAYER = IERC20(0x0fF6ffcFDa92c53F615a4A75D982f399C989366b);\r\n\r\n    \r\n    constructor(address _owner) public {\r\n        owner = _owner;\r\n        stakeCreator = owner;\r\n        symbol = \"LAYERX\";\r\n        name = \"UNILAYERX\";\r\n        decimals = 18;\r\n        _totalSupply = 40000 * 10**uint(decimals);\r\n        balances[owner] = _totalSupply;\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n        stakes[0] = Stake(now, 0, 0, 0, 0);\r\n    }\r\n    \r\n    /**\r\n     * @dev Total number of tokens in existence.\r\n     */\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param tokenOwner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }   \r\n    \r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) public onlyOwner {\r\n        require(value > 0, \"Invalid Amount.\");\r\n        require(_totalSupply >= value, \"Invalid account state.\");\r\n        require(balances[owner] >= value, \"Invalid account balances state.\");\r\n        _totalSupply = _totalSupply.sub(value);\r\n        balances[owner] = balances[owner].sub(value);\r\n        emit Transfer(owner, address(0), value);\r\n    }    \r\n    \r\n    /**\r\n     * @dev Set new Stake Creator address.\r\n     * @param _stakeCreator The address of the new Stake Creator.\r\n     */    \r\n    function setNewStakeCreator(address _stakeCreator) external onlyOwner {\r\n        require(_stakeCreator != address(0), 'Do not use 0 address');\r\n        stakeCreator = _stakeCreator;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set new pause status.\r\n     * @param newIsPaused The pause status: 0 - not paused, 1 - paused.\r\n     */ \r\n    function setIsPaused(bool newIsPaused) external onlyOwner {\r\n        isPaused = newIsPaused;\r\n    }     \r\n    \r\n    /**\r\n    * @dev Stake LAYER tokens for earning rewards, Tokens will be deducted from message sender account\r\n    * @param payment Amount of LAYER to be staked in the pool\r\n    */    \r\n    function lock(uint payment) external paused {\r\n        require(payment > 0, 'Payment must be greater than 0.');\r\n        require(UNILAYER.balanceOf(msg.sender) >= payment, 'Holder does not have enough tokens.');\r\n        UNILAYER.transferFrom(msg.sender, address(this), payment);\r\n        \r\n        StakeHolder memory holder = stakeHolders[msg.sender];\r\n        Stake memory stake = stakes[stakeNum];\r\n\r\n        if(now <= stake.start) { \r\n            holder.layerLocked = holder.layerLocked.add(payment);\r\n            holder.numStake = stakeNum;\r\n            stake.layerLockedTotal = stake.layerLockedTotal.add(payment);\r\n            emit logLockedTokens(msg.sender, payment, stakeNum);\r\n            stakes[stakeNum] = stake;\r\n        } else {\r\n            holder.layerLockedToNextStake = holder.layerLockedToNextStake.add(payment);\r\n            emit logLockedTokens(msg.sender, payment, stakeNum+1);\r\n        }\r\n        stakeHolders[msg.sender] = holder;\r\n    }\r\n    \r\n    /**\r\n    * @dev Withdraw My Staked Tokens from staker pool\r\n    */    \r\n    function unlock() external paused {\r\n        StakeHolder memory holder = stakeHolders[msg.sender]; \r\n        uint amt = holder.layerLocked + holder.layerLockedToNextStake;\r\n        require(amt > 0, 'You do not have locked tokens.');\r\n        require(UNILAYER.balanceOf(address(this))  >= amt, 'Insufficient account balance!');\r\n        \r\n        if(holder.layerLocked > 0) {\r\n            Rewards memory rwds = rewards[msg.sender][stakeNum-1];\r\n            require(rwds.isReceived == true,'Withdraw your rewards.');\r\n        }\r\n        \r\n        Stake memory stake = stakes[stakeNum];\r\n        stake.layerLockedTotal = stake.layerLockedTotal.sub(holder.layerLocked);\r\n        stakes[stakeNum] = stake;\r\n        \r\n        holder.layerLocked = 0;\r\n        holder.layerLockedToNextStake = 0;\r\n        holder.numStake = 0;\r\n        stakeHolders[msg.sender] = holder;\r\n        \r\n        emit logUnlockedTokens(msg.sender, amt);\r\n        UNILAYER.transfer(msg.sender, amt);\r\n    }    \r\n    \r\n    /**\r\n    * @dev Stake Creator finalizes the stake, the stake receives the accumulated ETH as reward and calculates everyone's percentages.\r\n    */      \r\n    function addStakePayment() external {\r\n        require(msg.sender == stakeCreator, 'You cannot call this function');\r\n        Stake memory stake = stakes[stakeNum]; \r\n        stake.end = now;\r\n        stake.ethReward = stake.ethReward.add(ethToNextStake);\r\n        ethToNextStake = 0;\r\n  \r\n        uint amtLayerx = stake.end.sub(stake.start).div(1 days).mul(amtByDay);\r\n        if(amtLayerx > balances[owner]) { amtLayerx = balances[owner]; }\r\n        stake.layerxReward = amtLayerx;\r\n        stakes[stakeNum] = stake;\r\n        emit logNewStakePayment(stakeNum, ethToNextStake);  \r\n        stakeNum++;\r\n        stakes[stakeNum] = Stake(now, 0, stake.layerLockedTotal, 0, 0);\r\n    }\r\n    \r\n    /**\r\n    * @dev Withdraw Reward Layerx Tokens and ETH\r\n    * @param index Stake index\r\n    */\r\n    function withdraw(uint index) external paused exist(index) {\r\n        Rewards memory rwds = rewards[msg.sender][index];\r\n        Stake memory stake = stakes[index];\r\n        StakeHolder memory holder = stakeHolders[msg.sender];\r\n     \r\n        if(index > holder.numStake && holder.numStake > 0) {\r\n            Rewards memory rwdsb = rewards[msg.sender][index-1];\r\n            require(rwdsb.isReceived == true, 'Get past rewards first.');\r\n        }\r\n        \r\n        require(stake.end <= now, 'Invalid date for withdrawal.');\r\n        require(rwds.isReceived == false, 'You already withdrawal your rewards.');\r\n        require(balances[owner] >= rwds.layersx, 'Insufficient account balance!');\r\n        require(address(this).balance >= rwds.eth,'Invalid account state, not enough funds.');\r\n        \r\n        rwds.isReceived = true;\r\n        rwds.layerLocked = holder.layerLocked;\r\n        \r\n        if(rwds.layerLocked > 0) {\r\n            rwds.layersx = rwds.layerLocked.mul(stake.layerxReward).div(stake.layerLockedTotal);\r\n            rwds.eth = rwds.layerLocked.mul(stake.ethReward).div(stake.layerLockedTotal);            \r\n        }\r\n        \r\n        if(index == (stakeNum-1) && holder.layerLockedToNextStake > 0) {\r\n            Stake memory stakeN = stakes[stakeNum];\r\n            holder.layerLocked = holder.layerLocked.add(holder.layerLockedToNextStake);\r\n            stakeN.layerLockedTotal = stakeN.layerLockedTotal.add(holder.layerLockedToNextStake);\r\n            holder.layerLockedToNextStake = 0; \r\n            stakes[stakeNum] = stakeN;\r\n        }\r\n        \r\n        holder.numStake = (index+1);\r\n        stakeHolders[msg.sender] = holder;\r\n\r\n        rewards[msg.sender][index] = rwds;\r\n        emit logWithdraw(msg.sender, rwds.layersx, rwds.eth, index);\r\n\r\n        if(rwds.layersx > 0) {\r\n            balances[owner] = balances[owner].sub(rwds.layersx);\r\n            balances[msg.sender] = balances[msg.sender].add(rwds.layersx);  \r\n            emit Transfer(owner, msg.sender, rwds.layersx);\r\n        }\r\n        \r\n        if(rwds.eth > 0) { msg.sender.transfer(rwds.eth); }\r\n    }\r\n\r\n    /**\r\n    * @dev Function to get the number of stakes\r\n    * @return number of stakes\r\n    */    \r\n    function getStakesNum() external view returns (uint) {\r\n        return stakeNum+1;\r\n    }\r\n    \r\n    /**\r\n    * @dev Receive ETH and add value to the accumulated eth for stake\r\n    */      \r\n    function() external payable {\r\n        ethToNextStake = ethToNextStake.add(msg.value); \r\n    }\r\n\r\n}"}}}