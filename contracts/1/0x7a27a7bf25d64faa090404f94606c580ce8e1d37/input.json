{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    function hasRole(bytes32 role, address account) external view returns (bool);\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n    function grantRole(bytes32 role, address account) external;\n    function revokeRole(bytes32 role, address account) external;\n    function renounceRole(bytes32 role, address account) external;\n}\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping (address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override {\n        require(hasRole(getRoleAdmin(role), _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override {\n        require(hasRole(getRoleAdmin(role), _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"synchronizer.sol":{"content":"// Be name Khoda\n// Bime Abolfazl\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol';\n\ninterface IERC20 {\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n}\n\ninterface Registrar {\n\tfunction mint(address to, uint256 amount) external;\n\tfunction burn(address from, uint256 amount) external;\n}\n\n\ncontract Synchronizer is AccessControl {\n\t// roles\n\tbytes32 public constant ORACLE_ROLE = keccak256(\"ORACLE_ROLE\");\n\tbytes32 public constant FEE_WITHDRAWER_ROLE = keccak256(\"FEE_WITHDRAWER_ROLE\");\n\tbytes32 public constant COLLATERAL_WITHDRAWER_ROLE = keccak256(\"COLLATERAL_WITHDRAWER_ROLE\");\n\tbytes32 public constant REMAINING_DOLLAR_CAP_SETTER_ROLE = keccak256(\"REMAINING_DOLLAR_CAP_SETTER_ROLE\");\n\n\t// variables\n\tuint256 public minimumRequiredSignature;\n\tIERC20 public collateralToken;\n\tuint256 public remainingDollarCap;\n\tuint256 public scale = 1e18;\n\tuint256 public withdrawableFeeAmount;\n\n\t// events\n\tevent Buy(address user, address registrar, uint256 registrarAmount, uint256 collateralAmount, uint256 feeAmount);\n\tevent Sell(address user, address registrar, uint256 registrarAmount, uint256 collateralAmount, uint256 feeAmount);\n\tevent WithdrawFee(uint256 amount, address recipient);\n\tevent WithdrawCollateral(uint256 amount, address recipient);\n\n\tconstructor (\n\t\tuint256 _remainingDollarCap,\n\t\tuint256 _minimumRequiredSignature,\n\t\taddress _collateralToken\n\t)\n\t{\n\t\tremainingDollarCap = _remainingDollarCap;\n\t\tminimumRequiredSignature = _minimumRequiredSignature;\n\t\tcollateralToken = IERC20(_collateralToken);\n\n\t\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\t\t_setupRole(FEE_WITHDRAWER_ROLE, msg.sender);\n\t\t_setupRole(COLLATERAL_WITHDRAWER_ROLE, msg.sender);\n\t}\n\n\tfunction setMinimumRequiredSignature(uint256 _minimumRequiredSignature) external {\n\t\trequire(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Caller is not an admin\");\n\t\tminimumRequiredSignature = _minimumRequiredSignature;\n\t}\n\n\tfunction setCollateralToken(address _collateralToken) external {\n\t\trequire(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Caller is not an admin\");\n\t\tcollateralToken = IERC20(_collateralToken);\n\t}\n\n\tfunction setRemainingDollarCap(uint256 _remainingDollarCap) external {\n\t\trequire(hasRole(REMAINING_DOLLAR_CAP_SETTER_ROLE, msg.sender), \"Caller is not a remainingDollarCap setter\");\n\t\tremainingDollarCap = _remainingDollarCap;\n\t}\n\n\tfunction sellFor(\n\t\taddress _user,\n\t\tuint256 multiplier,\n\t\taddress registrar,\n\t\tuint256 amount,\n\t\tuint256 fee,\n\t\tuint256[] memory blockNos,\n\t\tuint256[] memory prices,\n\t\tuint8[] memory v,\n\t\tbytes32[] memory r,\n\t\tbytes32[] memory s\n\t)\n\t\texternal\n\t{\n\t\tuint256 price = prices[0];\n\t\taddress lastOracle;\n\n\t\tfor (uint256 index = 0; index < minimumRequiredSignature; ++index) {\n\t\t\trequire(blockNos[index] >= block.number, \"Signature is expired\");\n\t\t\tif(prices[index] < price) {\n\t\t\t\tprice = prices[index];\n\t\t\t}\n\t\t\taddress oracle = getSigner(registrar, 2, multiplier, fee, blockNos[index], prices[index], v[index], r[index], s[index]);\n\t\t\trequire(hasRole(ORACLE_ROLE, oracle), \"signer is not an oracle\");\n\n\t\t\trequire(oracle > lastOracle, \"Signers are same\");\n\t\t\tlastOracle = oracle;\n\t\t}\n\n\t\t//---------------------------------------------------------------------------------\n\n\t\tuint256 collateralAmount = amount * price / scale;\n\t\tuint256 feeAmount = collateralAmount * fee / scale;\n\n\t\tremainingDollarCap = remainingDollarCap + (collateralAmount * multiplier);\n\n\t\twithdrawableFeeAmount = withdrawableFeeAmount + feeAmount;\n\n\t\tRegistrar(registrar).burn(msg.sender, amount);\n\n\t\tcollateralToken.transfer(_user, collateralAmount - feeAmount);\n\n\t\temit Sell(_user, registrar, amount, collateralAmount, feeAmount);\n\t}\n\n\tfunction buyFor(\n\t\taddress _user,\n\t\tuint256 multiplier,\n\t\taddress registrar,\n\t\tuint256 amount,\n\t\tuint256 fee,\n\t\tuint256[] memory blockNos,\n\t\tuint256[] memory prices,\n\t\tuint8[] memory v,\n\t\tbytes32[] memory r,\n\t\tbytes32[] memory s\n\t)\n\t\texternal\n\t{\n\t\tuint256 price = prices[0];\n        address lastOracle;\n        \n\t\tfor (uint256 index = 0; index < minimumRequiredSignature; ++index) {\n\t\t\trequire(blockNos[index] >= block.number, \"Signature is expired\");\n\t\t\tif(prices[index] > price) {\n\t\t\t\tprice = prices[index];\n\t\t\t}\n\t\t\taddress oracle = getSigner(registrar, 3, multiplier, fee, blockNos[index], prices[index], v[index], r[index], s[index]);\n\t\t\trequire(hasRole(ORACLE_ROLE, oracle), \"Signer is not an oracle\");\n\n\t\t\trequire(oracle > lastOracle, \"Signers are same\");\n\t\t\tlastOracle = oracle;\n\t\t}\n\n\t\t//---------------------------------------------------------------------------------\n\t\tuint256 collateralAmount = amount * price / scale;\n\t\tuint256 feeAmount = collateralAmount * fee / scale;\n\n\t\tremainingDollarCap = remainingDollarCap - (collateralAmount * multiplier);\n\t\twithdrawableFeeAmount = withdrawableFeeAmount + feeAmount;\n\n\t\tcollateralToken.transferFrom(msg.sender, address(this), collateralAmount + feeAmount);\n\n\t\tRegistrar(registrar).mint(_user, amount);\n\n\t\temit Buy(_user, registrar, amount, collateralAmount, feeAmount);\n\t}\n\n\tfunction getSigner(\n\t\taddress registrar,\n\t\tuint256 isBuy,\n\t\tuint256 multiplier,\n\t\tuint256 fee,\n\t\tuint256 blockNo,\n\t\tuint256 price,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t)\n\t\tpure\n\t\tinternal\n\t\treturns (address)\n\t{\n        bytes32 message = prefixed(keccak256(abi.encodePacked(registrar, isBuy, multiplier, fee, blockNo, price)));\n\t\treturn ecrecover(message, v, r, s);\n    }\n\n\tfunction prefixed(\n\t\tbytes32 hash\n\t)\n\t\tinternal\n\t\tpure\n\t\treturns(bytes32)\n\t{\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n\t//---------------------------------------------------------------------------------------\n\n\tfunction withdrawFee(uint256 _amount, address _recipient) external {\n\t\trequire(hasRole(FEE_WITHDRAWER_ROLE, msg.sender), \"Caller is not a FeeWithdrawer\");\n\n\t\twithdrawableFeeAmount = withdrawableFeeAmount - _amount;\n\t\tcollateralToken.transfer(_recipient, _amount);\n\n\t\temit WithdrawFee(_amount, _recipient);\n\t}\n\n\tfunction withdrawCollateral(uint256 _amount, address _recipient) external {\n\t\trequire(hasRole(COLLATERAL_WITHDRAWER_ROLE, msg.sender), \"Caller is not a CollateralWithdrawer\");\n\n\t\tcollateralToken.transfer(_recipient, _amount);\n\n\t\temit WithdrawCollateral(_amount, _recipient);\n\t}\n\n}\n\n//Dar panah khoda\n"}}}