{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Context.sol": {
      "content": "\npragma solidity ^0.6.0;\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n} // File: @openzeppelin/contracts/GSN/Context.sol"
    },
    "browser/ERC20.sol": {
      "content": "\npragma solidity ^0.6.0;\nimport \"./Context.sol\";\nimport \"./SafeMath.sol\";\ncontract ERC20 is Context {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) public _balances;\n    mapping (address => mapping (address => uint256)) public _allowances;\n    //need to go public\n    uint256 public _totalSupply;\n\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) virtual internal  {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n} //_mint passed as virtual bc overriden in ERC20Capped.\n//======================================================================================================\n"
    },
    "browser/SafeMath.sol": {
      "content": "\npragma solidity ^0.6.0;\nlibrary SafeMath{\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n        /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n} // File: @openzeppelin/contracts/math/SafeMath.sol"
    },
    "browser/Steam.sol": {
      "content": "//SPDX-Licence-Identifier: 2guys\n\npragma solidity ^0.6.0;\n\nimport \"./ERC20.sol\";\n\ncontract Steam is ERC20 {\n\n    using SafeMath for uint256;\n\n    modifier onlyUPS() {\n        require(_UPS == _msgSender(), \"onlyUPS: Only the UPStkn contract may call this function\");\n        _;\n    }\n\n    string private _name;\n    address public _UPS;\n    string private _symbol;\n    uint8 private _decimals;\n    uint256 private _maxSupply;\n    uint256 private _steamMinted = 0;\n\n    event SteamGenerated(address account, uint amount);\n\n    constructor(uint256 STEAM_maxTokens) public {\n        _name = \"STEAM\";\n        _symbol = \"STEAM\";\n        _decimals = 18;\n        _maxSupply = STEAM_maxTokens.mul(1e18);\n        ERC20._mint(_msgSender(), 1e18);\n        _UPS =  _msgSender();\n    }\n    \n    function generateSteam(address account, uint256 amount) external onlyUPS {\n        require((_totalSupply + amount) < _maxSupply, \"STEAM token: cannot generate more steam than the max supply\");\n        ERC20._mint(account, amount);\n        _steamMinted = _steamMinted.add(amount);\n    }\n    \n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return ERC20._totalSupply;\n    }\n    \n    function mySteam(address _address) public view returns(uint256){\n        return balanceOf(_address);\n    }\n    \n    function getSteamTotalSupply() public view returns(uint256){\n        return _totalSupply;\n    }\n    \n    function getSteamMaxSupply() public view returns(uint256){\n        return _maxSupply;\n    }\n    \n    function getSteamMinted() public view returns(uint256){\n        return _steamMinted;\n    }\n\n}"
    },
    "browser/UpSwing.sol": {
      "content": "//SPDX-Licence-Identifier: 2guys\r\n\r\n//======================================================================================================\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport \"./Steam.sol\";\r\nimport \"./ERC20.sol\";\r\n\r\ninterface IUNIv2 {\r\n    function sync() external;\r\n}\r\n\r\ncontract UpSwing is ERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address private UNIv2;\r\n    \r\n    mapping(address => bool) public allowed;\r\n    mapping(address => bool) public pauser;\r\n    modifier onlyAllowed() {\r\n        require(allowed[_msgSender()], \"onlyAllowed\");\r\n        _;\r\n    }\r\n\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint256 private _initialSupply;\r\n    uint256 private _UPSBurned = 0;\r\n    \r\n    uint8 public leverage;\r\n    bool public paused = true;\r\n    mapping(address => uint256) sellPressure;\r\n    mapping(address => uint256) steamToGenerate;\r\n    mapping(address => uint256) txCount;\r\n    \r\n    address _STEAM;\r\n\r\n    event BurnedFromLiquidityPool(address burnerAddress, uint amount);\r\n    event SteamGenerated(address steamRecipientddress, uint amount);\r\n\r\n    constructor(uint256 UPS_totalSupply) public {\r\n        _name = \"UpSwing\"; \r\n        _symbol = \"UPS\";\r\n        _decimals = 18;\r\n        _initialSupply = UPS_totalSupply.mul(1e18);\r\n        ERC20._mint(_msgSender(), UPS_totalSupply.mul(1e18)); //uses \"normal\" numbers\r\n\r\n        leverage = 200;\r\n        \r\n        _STEAM = address(new Steam(UPS_totalSupply)); //creates steam token\r\n        allowed[_msgSender()] = true;\r\n        pauser[_msgSender()] = true;\r\n    }\r\n    \r\n    modifier onlyPauser() {\r\n        require(pauser[_msgSender()], \"onlyPauser\");\r\n        _;\r\n    }\r\n\r\n    \r\n    function setPauser(address _address, bool _bool) public onlyAllowed {\r\n        pauser[_address] = _bool;\r\n    }\r\n    \r\n    function togglePause(bool _bool) public onlyPauser {\r\n        paused = _bool;\r\n    }\r\n    \r\n    \r\n    modifier canSteam(address _address){\r\n        require(steamToGenerate[_address] > 0, \"no Steam to generate\");\r\n        _;\r\n    }\r\n    \r\n    /*  //STEAM function called below:\r\n    \r\n        function generateSteam(address account, uint256 amount) external onlyAllowed {\r\n        require((_totalSupply + amount) < _maxSupply, \"STEAM token: cannot generate more steam than the max supply\");\r\n        ERC20._mint(account, amount);\r\n        _steamMinted = _steamMinted.add(amount);\r\n    }\r\n    */\r\n    \r\n    function _generateSteamFromUPSBurn(address _address) internal canSteam(_address){\r\n        uint256 _steam = steamToGenerate[_address];\r\n        steamToGenerate[_address] = 0;\r\n        Steam(_STEAM).generateSteam(_address, _steam);\r\n    }   \r\n    \r\n    function addToSteam(address _address, uint256 _amount) internal {\r\n        steamToGenerate[_address] = steamToGenerate[_address].add(_amount);\r\n    }  \r\n    \r\n    function amountPressure(uint256 amount) internal view returns(uint256){ \r\n        uint256 UNI_SupplyRatio = (getUNIV2Liq().mul(1e18)).div(totalSupply());\r\n        UNI_SupplyRatio = UNI_SupplyRatio.mul(leverage).div(100);\r\n\r\n        return amount.mul(UNI_SupplyRatio).div(1e18);\r\n    }\r\n    \r\n    function setAllowed(address _address, bool _bool) public onlyAllowed {\r\n        allowed[_address] = _bool;\r\n    }\r\n\r\n    function setUNIv2(address _address) public onlyAllowed {\r\n        UNIv2 = _address;\r\n    }\r\n\r\n    function setLeverage(uint8 _leverage) public onlyAllowed {\r\n        require(_leverage <= 1000 && _leverage >= 0);\r\n        leverage = _leverage;\r\n    }\r\n\r\n    function myPressure(address _address) public view returns(uint256){\r\n        return amountPressure(sellPressure[_address]);\r\n    }\r\n    \r\n    function releasePressure(address _address) internal {\r\n        uint256 amount = myPressure(_address);\r\n        \r\n        if(amount < balanceOf(UNIv2)) {\r\n            require(_totalSupply.sub(amount) >= _initialSupply.div(1000), \"There is less than 0.1% of the Maximum Supply remaining, unfortunately, kabooming is over\");\r\n            \r\n            sellPressure[_address] = 0;\r\n            addToSteam(_address, amount);\r\n            \r\n            ERC20._burn(UNIv2, amount);\r\n\r\n            _UPSBurned = _UPSBurned.add(amount);\r\n            emit BurnedFromLiquidityPool(_address, amount);\r\n            \r\n            _generateSteamFromUPSBurn(_address);\r\n            emit SteamGenerated(_address, amount);\r\n            \r\n            txCount[_address] = 0;\r\n        } else if (amount > 0) {\r\n            sellPressure[_address] = sellPressure[_address].div(2);\r\n        }\r\n        \r\n        \r\n       IUNIv2(UNIv2).sync();\r\n    }\r\n    \r\n    function UPSMath(uint256 n) internal pure returns(uint256){\r\n        uint _t = n*n + 1;\r\n        _t =  1e10/(_t);\r\n        return (92*_t)/100;\r\n        \r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) internal override{\r\n        require(!paused || pauser[sender], \"UPStkn: You must wait until UniSwap listing to transfer\");\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n    \r\n        ERC20._balances[sender] = ERC20._balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        ERC20._balances[recipient] = ERC20._balances[recipient].add(amount);\r\n    \r\n            if(recipient == UNIv2){ \r\n                txCount[sender] = txCount[sender]+1;\r\n                amount = amount.mul(UPSMath(txCount[sender])).div(1e10);\r\n                sellPressure[sender] = sellPressure[sender].add(amount);\r\n            }\r\n    \r\n            if(sender == recipient && amount == 0){releasePressure(sender);}\r\n    \r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n    \r\n    function mySteam(address _address) public view returns(uint256){\r\n        return steamToGenerate[_address];\r\n    }\r\n    \r\n    function getUNIV2Address() public view returns (address) {\r\n        return UNIv2;\r\n    }\r\n    \r\n    function getUNIV2Liq() public view returns (uint256) {\r\n        return balanceOf(UNIv2);\r\n    }\r\n    \r\n    function getUPSTotalSupply() public view returns(uint256){\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function getUPSBurned() public view returns(uint256){\r\n        return _UPSBurned;\r\n    }\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return ERC20._totalSupply;\r\n    }\r\n\r\n}"
    }
  }
}