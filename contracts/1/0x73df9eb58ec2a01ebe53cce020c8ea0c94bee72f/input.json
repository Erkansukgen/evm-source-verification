{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"BribeBabylon.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\n// Bribe logic and helper functions\r\ncontract BribeBabylon {\r\n    address owner;\r\n\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Helper functions\r\n    // onlyOwner modifier for swap\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        _;\r\n    }\r\n\r\n    // Change owner\r\n    function amendOwner(address _newOwner) external onlyOwner{\r\n        require(_newOwner != address(0));\r\n        owner = _newOwner;\r\n\r\n    }\r\n    \r\n    function payProtectionMoney(uint256 _bribe) external payable onlyOwner{\r\n        block.coinbase.transfer(_bribe);\r\n    }\r\n    \r\n        \r\n    function retrieveFunds(address payable _recipient, uint256 _amount, bool _all) external payable onlyOwner{\r\n            uint256 amountSend;\r\n            if (_all == true){\r\n              amountSend = address(this).balance;\r\n            }else{\r\n              amountSend = _amount;\r\n            }\r\n            _recipient.transfer(amountSend);\r\n        }  \r\n        \r\n    // Receive ETH \r\n    function receiveHushMoney() external payable {\r\n        \r\n    }\r\n}\r\n\r\n\r\n"}}}