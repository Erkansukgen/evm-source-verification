{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/ethswap_test.sol": {
      "content": "/*\n! proof.sol\n(c) 2020 Krasava Digital Solutions\nDevelop by BelovITLab LLC (smartcontract.ru) & Krasava Digital Solutions (krasava.pro)\nauthors @stupidlovejoy, @sergeytyan\nLicense: MIT \n*/\n\npragma solidity 0.6.6;\n\ninterface SwapInterface {\n    function ETHtoUSD() external view returns(uint256); // Название функции как ETHtoUSD во внешнем смарктонтракте\n}\n\ncontract EthSwapTest {\n\n    uint256 private eth_custom_rate;\n\n    SwapInterface public swapSourceAddress = SwapInterface(0xc4888352C06799aC450d9e24563ef1D85CeDe3f6); // Адрес внешнего смартконтракта\n\n    function set_eth_rate(uint256 _value) external {\n        eth_custom_rate = _value > 999999 ? _value : 0; // Проверка на минимум $1\n    }\n\n    function show_eth_rate() external view returns(uint256) {\n        uint256 ext_rate = swapSourceAddress.ETHtoUSD();\n        return eth_custom_rate > 0 && eth_custom_rate > ext_rate ? eth_custom_rate : ext_rate; // Используем больший курс // Синтаксис?\n    }\n}"
    }
  }
}