{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "EfficientDeployer.sol": {
      "content": "pragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\ncontract EfficientDeployer {\r\n    address owner = msg.sender;\r\n    \r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"Forbidden.\");\r\n        _;\r\n    }\r\n    \r\n    function deploy(bytes memory code, uint256 salt) isOwner public returns(address) {\r\n        address addr;\r\n        assembly {\r\n            addr := create2(0, add(code, 0x20), mload(code), salt)\r\n            if iszero(extcodesize(addr)) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n        return addr;\r\n    }\r\n    \r\n    function computeAddress(bytes memory code, uint256 salt) public view returns(address) {\r\n        uint8 prefix = 0xff;\r\n        bytes32 initCodeHash = keccak256(abi.encodePacked(code));\r\n        bytes32 hash = keccak256(abi.encodePacked(prefix, address(this), salt, initCodeHash));\r\n        return address(uint160(uint256(hash)));\r\n    }\r\n}"
    }
  }
}