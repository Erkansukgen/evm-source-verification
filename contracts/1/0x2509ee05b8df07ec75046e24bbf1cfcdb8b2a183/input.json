{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Amaten.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.10;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n}\r\ncontract Amaten {\r\n    using SafeMath for uint;\r\n    // Track how many tokens are owned by each address.\r\n    mapping (address => uint256) public balanceOf;\r\n    string public name = \"Amaten\";\r\n    string public symbol = \"AMA\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 500000000 * (uint256(10) ** decimals);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    constructor() public {\r\n        // Initially assign all tokens to the contract's creator.\r\n        balanceOf[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n    function transfer(address to, uint256 value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= value);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(value); // deduct from sender's balance\r\n        balanceOf[to] = balanceOf[to].add(value); // add to recipient's balance\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(value <= balanceOf[from]);\r\n        require(value <= allowance[from][msg.sender]);\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n}"
    }
  }
}