{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/AAAAConfig.sol": {
      "content": "// Dependency file: contracts/libraries/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\n// pragma solidity >=0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Dependency file: contracts/modules/ConfigNames.sol\n\n// pragma solidity >=0.5.16;\n\nlibrary ConfigNames {\n    //GOVERNANCE\n    bytes32 public constant PROPOSAL_VOTE_DURATION = bytes32('PROPOSAL_VOTE_DURATION');\n    bytes32 public constant PROPOSAL_EXECUTE_DURATION = bytes32('PROPOSAL_EXECUTE_DURATION');\n    bytes32 public constant PROPOSAL_CREATE_COST = bytes32('PROPOSAL_CREATE_COST');\n    bytes32 public constant STAKE_LOCK_TIME = bytes32('STAKE_LOCK_TIME');\n    bytes32 public constant MINT_AMOUNT_PER_BLOCK =  bytes32('MINT_AMOUNT_PER_BLOCK');\n    bytes32 public constant INTEREST_PLATFORM_SHARE =  bytes32('INTEREST_PLATFORM_SHARE');\n    bytes32 public constant CHANGE_PRICE_DURATION =  bytes32('CHANGE_PRICE_DURATION');\n    bytes32 public constant CHANGE_PRICE_PERCENT =  bytes32('CHANGE_PRICE_PERCENT');\n\n    // POOL\n    bytes32 public constant POOL_BASE_INTERESTS = bytes32('POOL_BASE_INTERESTS');\n    bytes32 public constant POOL_MARKET_FRENZY = bytes32('POOL_MARKET_FRENZY');\n    bytes32 public constant POOL_PLEDGE_RATE = bytes32('POOL_PLEDGE_RATE');\n    bytes32 public constant POOL_LIQUIDATION_RATE = bytes32('POOL_LIQUIDATION_RATE');\n    bytes32 public constant POOL_MINT_BORROW_PERCENT = bytes32('POOL_MINT_BORROW_PERCENT');\n    bytes32 public constant POOL_MINT_POWER = bytes32('POOL_MINT_POWER');\n    \n    //NOT GOVERNANCE\n    bytes32 public constant AAAA_USER_MINT = bytes32('AAAA_USER_MINT');\n    bytes32 public constant AAAA_TEAM_MINT = bytes32('AAAA_TEAM_MINT');\n    bytes32 public constant AAAA_REWAED_MINT = bytes32('AAAA_REWAED_MINT');\n    bytes32 public constant DEPOSIT_ENABLE = bytes32('DEPOSIT_ENABLE');\n    bytes32 public constant WITHDRAW_ENABLE = bytes32('WITHDRAW_ENABLE');\n    bytes32 public constant BORROW_ENABLE = bytes32('BORROW_ENABLE');\n    bytes32 public constant REPAY_ENABLE = bytes32('REPAY_ENABLE');\n    bytes32 public constant LIQUIDATION_ENABLE = bytes32('LIQUIDATION_ENABLE');\n    bytes32 public constant REINVEST_ENABLE = bytes32('REINVEST_ENABLE');\n    bytes32 public constant INTEREST_BUYBACK_SHARE =  bytes32('INTEREST_BUYBACK_SHARE');\n\n    //POOL\n    bytes32 public constant POOL_PRICE = bytes32('POOL_PRICE');\n\n    //wallet\n    bytes32 public constant TEAM = bytes32('team'); \n    bytes32 public constant SPARE = bytes32('spare');\n    bytes32 public constant REWARD = bytes32('reward');\n}\n\n// Root file: contracts/AAAAConfig.sol\n\npragma solidity >=0.5.16;\n// import \"contracts/libraries/SafeMath.sol\";\n// import 'contracts/modules/ConfigNames.sol';\n\ninterface IERC20 {\n    function balanceOf(address owner) external view returns (uint);\n    function decimals() external view returns (uint8);\n}\n\ninterface IAAAAPool {\n    function collateralToken() external view returns(address);\n}\n\ncontract AAAAConfig {\n    using SafeMath for uint;\n    using SafeMath for uint8;\n    address public owner;\n    address public factory;\n    address public platform;\n    address public developer;\n    address public mint;\n    address public token;\n    address public share;\n    address public base;\n    address public governor;\n    address public WETH;\n\n    address[] public mintTokenList;\n\n    uint public lastPriceBlock;\n\n    uint public DAY = 6400;\n    uint public HOUR = 267;\n    \n    struct ConfigItem {\n        uint min;\n        uint max;\n        uint span;\n        uint value;\n    }\n    \n    mapping (address => mapping (bytes32 => ConfigItem)) public poolParams;\n    mapping (bytes32 => ConfigItem) public params;\n    mapping (bytes32 => address) public wallets;\n    mapping (address => uint) public prices;\n\n    event PriceChange(address token, uint value);\n    event ParameterChange(bytes32 key, uint value);\n    event PoolParameterChange(address pool, bytes32 key, uint value);\n    \n    constructor() public {\n        owner = msg.sender;\n        developer = msg.sender;\n        uint id;\n        assembly {\n            id := chainid()\n        }\n        if(id != 1) {\n            DAY = 28800;\n            HOUR = 1200;\n        }\n    }\n    \n    function initialize (address _platform, address _factory, address _mint, address _token, address _share, address _governor, address _base, address _WETH) external {\n        require(msg.sender == owner || msg.sender == developer, \"AAAA: Config FORBIDDEN\");\n        mint        = _mint;\n        platform    = _platform;\n        factory     = _factory;\n        token       = _token;\n        share       = _share;\n        governor    = _governor;\n        base        = _base;\n        WETH        = _WETH;\n    }\n\n    function addMintToken(address _token) external {\n        require(msg.sender == owner || msg.sender == developer, \"AAAA: Config FORBIDDEN\");\n        mintTokenList.push(_token);\n    }\n\n    function isMintToken(address _token) public view returns (bool)  {\n        for(uint i = 0;i < mintTokenList.length;i++) {\n            if(_token == mintTokenList[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    function changeDeveloper(address _developer) external {\n        require(msg.sender == owner || msg.sender == developer, \"AAAA: Config FORBIDDEN\");\n        developer = _developer;\n    }\n\n    function setWallets(bytes32[] calldata _names, address[] calldata _wallets) external {\n        require(msg.sender == owner || msg.sender == developer, \"AAAA: ONLY DEVELOPER\");\n        require(_names.length == _wallets.length ,\"AAAA: WALLETS LENGTH MISMATCH\");\n        for(uint i = 0; i < _names.length; i ++)\n        {\n            wallets[_names[i]] = _wallets[i];\n        }\n    }\n\n    function initParameter() external {\n        require(msg.sender == owner || msg.sender == developer, \"AAAA: Config FORBIDDEN\");\n        _setParams(ConfigNames.PROPOSAL_VOTE_DURATION ,   1*DAY,  7*DAY , 1*DAY,  1*DAY);\n        _setParams(ConfigNames.PROPOSAL_EXECUTE_DURATION, 1*HOUR, 48*HOUR, 1*HOUR, 1*HOUR);\n        _setParams(ConfigNames.PROPOSAL_CREATE_COST, 0, 10000 * 1e18, 100 * 1e18, 0);\n        _setParams(ConfigNames.STAKE_LOCK_TIME, 0, 7*DAY, 1*DAY, 0);\n        _setParams(ConfigNames.MINT_AMOUNT_PER_BLOCK, 0, 10000 * 1e18, 1e17, 1e17);\n        _setParams(ConfigNames.INTEREST_PLATFORM_SHARE, 0, 1e18, 1e17, 1e17);\n        _setParams(ConfigNames.INTEREST_BUYBACK_SHARE, 10000, 10000, 0, 10000);\n        _setParams(ConfigNames.CHANGE_PRICE_DURATION, 0, 500, 100, 0);\n        _setParams(ConfigNames.CHANGE_PRICE_PERCENT, 1, 100, 1, 20);\n\n        _setParams(ConfigNames.AAAA_USER_MINT, 0, 0, 0, 3000);\n        _setParams(ConfigNames.AAAA_TEAM_MINT, 0, 0, 0, 7142);\n        _setParams(ConfigNames.AAAA_REWAED_MINT, 0, 0, 0, 5000);\n        _setParams(ConfigNames.DEPOSIT_ENABLE, 0, 0, 0, 1);\n        _setParams(ConfigNames.WITHDRAW_ENABLE, 0, 0, 0, 1);\n        _setParams(ConfigNames.BORROW_ENABLE, 0, 0, 0, 1);\n        _setParams(ConfigNames.REPAY_ENABLE, 0, 0, 0, 1);\n        _setParams(ConfigNames.LIQUIDATION_ENABLE, 0, 0, 0, 1);\n        _setParams(ConfigNames.REINVEST_ENABLE, 0, 0, 0, 1);\n    }\n\n    function initPoolParams(address _pool) external {\n        require(msg.sender == factory, \"Config FORBIDDEN\");\n        _setPoolParams(_pool, ConfigNames.POOL_BASE_INTERESTS, 0, 1e18, 1e16, 2e17);\n        _setPoolParams(_pool, ConfigNames.POOL_MARKET_FRENZY, 0, 1e18, 1e16, 2e17);\n        _setPoolParams(_pool, ConfigNames.POOL_PLEDGE_RATE, 0, 1e18, 1e16, 6e17);\n        _setPoolParams(_pool, ConfigNames.POOL_LIQUIDATION_RATE, 0, 1e18, 1e16, 9e17);\n        _setPoolParams(_pool, ConfigNames.POOL_MINT_POWER, 0, 0, 0, 10000);\n        _setPoolParams(_pool, ConfigNames.POOL_MINT_BORROW_PERCENT, 0, 10000, 1000, 5000);\n    }\n\n    function _setPoolValue(address _pool, bytes32 _key, uint _value) internal {\n        poolParams[_pool][_key].value = _value;\n        emit PoolParameterChange(_pool, _key, _value);\n    }\n\n    function _setParams(bytes32 _key, uint _min, uint _max, uint _span, uint _value) internal {\n        params[_key] = ConfigItem(_min, _max, _span, _value);\n        emit ParameterChange(_key, _value);\n    }\n\n    function _setPoolParams(address _pool, bytes32 _key, uint _min, uint _max, uint _span, uint _value) internal {\n        poolParams[_pool][_key] = ConfigItem(_min, _max, _span, _value);\n        emit PoolParameterChange(_pool, _key, _value);\n    }\n\n    function _setPrice(address _token, uint _value) internal {\n        prices[_token] = _value;\n        emit PriceChange(_token, _value);\n    }\n\n    function setTokenPrice(address[] calldata _tokens, uint[] calldata _prices) external {\n        uint duration = params[ConfigNames.CHANGE_PRICE_DURATION].value;\n        uint maxPercent = params[ConfigNames.CHANGE_PRICE_PERCENT].value;\n        require(block.number >= lastPriceBlock.add(duration), \"AAAA: Price Duration\");\n        require(msg.sender == wallets[bytes32(\"price\")], \"AAAA: Config FORBIDDEN\");\n        require(_tokens.length == _prices.length ,\"AAAA: PRICES LENGTH MISMATCH\");\n\n        for(uint i = 0; i < _tokens.length; i++)\n        {\n            if(prices[_tokens[i]] == 0) {\n                _setPrice(_tokens[i], _prices[i]);\n            } else {\n                uint currentPrice = prices[_tokens[i]];\n                if(_prices[i] > currentPrice) {\n                    uint maxPrice = currentPrice.add(currentPrice.mul(maxPercent).div(10000));\n                    _setPrice(_tokens[i], _prices[i] > maxPrice ? maxPrice: _prices[i]);\n                } else {\n                    uint minPrice = currentPrice.sub(currentPrice.mul(maxPercent).div(10000));\n                    _setPrice(_tokens[i], _prices[i] < minPrice ? minPrice: _prices[i]);\n                }\n            } \n        }\n\n        lastPriceBlock = block.number;\n    }\n    \n    function setValue(bytes32 _key, uint _value) external {\n        require(msg.sender == owner || msg.sender == governor || msg.sender == platform || msg.sender == developer, \"AAAA: ONLY DEVELOPER\");\n        params[_key].value = _value;\n        emit ParameterChange(_key, _value);\n    }\n    \n    function setPoolValue(address _pool, bytes32 _key, uint _value) external {\n        require(msg.sender == owner || msg.sender == governor || msg.sender == platform || msg.sender == developer, \"AAAA: FORBIDDEN\");\n        _setPoolValue(_pool, _key, _value);\n    }\n    \n    function getValue(bytes32 _key) external view returns (uint){\n        return params[_key].value;\n    }\n    \n    function getPoolValue(address _pool, bytes32 _key) external view returns (uint) {\n        return poolParams[_pool][_key].value;\n    } \n\n    function setParams(bytes32 _key, uint _min, uint _max, uint _span, uint _value) external {\n        require(msg.sender == owner || msg.sender == governor || msg.sender == platform || msg.sender == developer, \"AAAA: FORBIDDEN\");\n        _setParams(_key, _min, _max, _span, _value);\n    }\n\n    function setPoolParams(address _pool, bytes32 _key, uint _min, uint _max, uint _span, uint _value) external {\n        require(msg.sender == owner || msg.sender == governor || msg.sender == platform || msg.sender == developer, \"AAAA: FORBIDDEN\");\n        _setPoolParams(_pool, _key, _min, _max, _span, _value);\n    }\n\n    function getParams(bytes32 _key) external view returns (uint, uint, uint, uint) {\n        ConfigItem memory item = params[_key];\n        return (item.min, item.max, item.span, item.value);\n    }\n\n    function getPoolParams(address _pool, bytes32 _key) external view returns (uint, uint, uint, uint) {\n        ConfigItem memory item = poolParams[_pool][_key];\n        return (item.min, item.max, item.span, item.value);\n    }\n\n    function convertTokenAmount(address _fromToken, address _toToken, uint _fromAmount) external view returns(uint toAmount) {\n        uint fromPrice = prices[_fromToken];\n        uint toPrice = prices[_toToken];\n        uint8 fromDecimals = IERC20(_fromToken).decimals();\n        uint8 toDecimals = IERC20(_toToken).decimals();\n        toAmount = _fromAmount.mul(fromPrice).div(toPrice);\n        if(fromDecimals > toDecimals) {\n            toAmount = toAmount.div(10 ** (fromDecimals.sub(toDecimals)));\n        } else if(toDecimals > fromDecimals) {\n            toAmount = toAmount.mul(10 ** (toDecimals.sub(fromDecimals)));\n        }\n    }\n}"
    }
  }
}