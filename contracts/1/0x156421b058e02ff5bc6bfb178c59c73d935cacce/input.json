{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"},"contracts/dlock.sol":{"content":"// SPDX-License-Identifier: Unlicensed\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x095ea7b3, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: APPROVE_FAILED\"\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0xa9059cbb, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: TRANSFER_FAILED\"\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\n        );\n    }\n}\n\ninterface IUniswapV2Pair {\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n}\n\ninterface IUniFactory {\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address);\n}\n\ncontract DLock is Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    IUniFactory public uniswapFactory;\n\n    struct UserInfo {\n        EnumerableSet.AddressSet lockedTokens; //  records of user's locked tokens\n        mapping(address => uint256[]) locksForToken; // toekn address -> lock id\n    }\n\n    struct TokenLock {\n        uint256 lockDate; // locked date\n        uint256 amount; // locked tokens amount\n        uint256 initialAmount; // the initial lock amount\n        uint256 unlockDate; // unlock date\n        uint256 lockID; // lock id per token\n        address owner; // lock owner\n    }\n\n    mapping(address => UserInfo) private users; // user address -> user info\n\n    EnumerableSet.AddressSet private lockedTokens;\n    mapping(address => TokenLock[]) public tokenLocks;\n\n    struct FeeStruct {\n        uint256 ethFee; // fee to lock\n    }\n\n    FeeStruct public gFees;\n\n    address payable devaddr;\n\n    event onDeposit(\n        address indexed Token,\n        address indexed user,\n        uint256 amount,\n        uint256 lockDate,\n        uint256 unlockDate\n    );\n    event onWithdraw(address indexed Token, uint256 amount);\n    event onTranferLockOwnership(\n        address indexed Token,\n        address indexed oldOwner,\n        address newOwner\n    );\n    event onRelock(address indexed Token, uint256 amount);\n\n    constructor(IUniFactory _uniswapFactory, address payable _devAddress) {\n        devaddr = _devAddress;\n        gFees.ethFee = 75000000000000000; // initial fee set to 0.075 ETH\n        uniswapFactory = _uniswapFactory;\n    }\n\n    function setDev(address payable _devAddress) external onlyOwner {\n        devaddr = _devAddress;\n    }\n\n    function setFees(uint256 _ethFee) external onlyOwner {\n        require(_ethFee <= 2 * 1e17, \"Fees cannot be more than 0.2 ETH\");\n        gFees.ethFee = _ethFee;\n    }\n\n    /**\n     * @notice new lock\n     * @param _lockToken address of token to lock\n     * @param _amount amount of tokens to lock\n     * @param _unlock_date timestamp until unlock\n     * @param _is_lp_tokens is the token an LP token use 1 to confirm, any other value will default to token lock\n     * @param _lock_owner owner of the lock\n     */\n    function lockTokens(\n        address _lockToken,\n        uint256 _amount,\n        uint256 _unlock_date,\n        uint256 _is_lp_tokens,\n        address payable _lock_owner\n    ) external payable nonReentrant {\n        require(_unlock_date < 10000000000, \"DLock: TIMESTAMP INVALID\"); // no milliseconds\n        require(_amount > 0, \"DLock: INSUFFICIENT\"); // no 0 tokens\n\n        // check if the lock is for an LP token\n        if (_is_lp_tokens == 1) {\n            // check if the pair is valid\n            IUniswapV2Pair lpair = IUniswapV2Pair(address(_lockToken));\n            address factoryPairAddress = uniswapFactory.getPair(\n                lpair.token0(),\n                lpair.token1()\n            );\n            require(\n                factoryPairAddress == address(_lockToken),\n                \"DLock: NOT UNIV2\"\n            );\n            TransferHelper.safeTransferFrom(\n                _lockToken,\n                address(msg.sender),\n                address(this),\n                _amount\n            );\n        } else {\n            TransferHelper.safeTransferFrom(\n                _lockToken,\n                address(msg.sender),\n                address(this),\n                _amount\n            );\n        }\n\n        // check if fee is met\n        uint256 ethFee = gFees.ethFee;\n        require(msg.value == ethFee, \"DLock: FEE NOT MET\");\n        if (ethFee > 0) {\n            devaddr.transfer(ethFee);\n        }\n\n        TokenLock memory the_lock;\n        the_lock.lockDate = block.timestamp;\n        the_lock.amount = _amount;\n        the_lock.initialAmount = _amount;\n        the_lock.unlockDate = _unlock_date;\n        the_lock.lockID = tokenLocks[_lockToken].length;\n        the_lock.owner = _lock_owner;\n\n        // store record of token lock\n        tokenLocks[_lockToken].push(the_lock);\n        lockedTokens.add(_lockToken);\n\n        // store record of user's lock\n        UserInfo storage user = users[_lock_owner];\n        user.lockedTokens.add(_lockToken);\n        uint256[] storage user_locks = user.locksForToken[_lockToken];\n        user_locks.push(the_lock.lockID);\n\n        emit onDeposit(\n            _lockToken,\n            msg.sender,\n            the_lock.amount,\n            the_lock.lockDate,\n            the_lock.unlockDate\n        );\n    }\n\n    /**\n     * @notice extend a token's lock\n     */\n    function relock(\n        address _lockToken,\n        uint256 _index,\n        uint256 _lock_id,\n        uint256 _unlock_date\n    ) external payable nonReentrant {\n        require(_unlock_date < 10000000000, \"DLock: TIMESTAMP INVALID\");\n        uint256 lock_id = users[msg.sender].locksForToken[_lockToken][_index];\n        TokenLock storage userLock = tokenLocks[_lockToken][lock_id];\n        require(\n            lock_id == _lock_id && userLock.owner == msg.sender,\n            \"DLock: LOCK DOES NOT MATCH\"\n        );\n        require(userLock.unlockDate < _unlock_date, \"DLock: UNLOCK BEFORE\");\n\n        // check if fee is met\n        uint256 ethFee = gFees.ethFee;\n        require(msg.value == ethFee, \"DLock: FEE NOT MET\");\n        if (ethFee > 0) {\n            devaddr.transfer(ethFee);\n        }\n\n        userLock.unlockDate = _unlock_date;\n\n        emit onRelock(_lockToken, userLock.amount);\n    }\n\n    /**\n     * @notice withdraw a valid amount from a locked token\n     */\n    function withdraw(\n        address _lockToken,\n        uint256 _index,\n        uint256 _lock_id,\n        uint256 _amount\n    ) external nonReentrant {\n        require(_amount > 0, \"DLock: ZERO WITHDRAWL NOT ALLOWED\");\n        uint256 lock_id = users[msg.sender].locksForToken[_lockToken][_index];\n        TokenLock storage userLock = tokenLocks[_lockToken][lock_id];\n        require(\n            lock_id == _lock_id && userLock.owner == msg.sender,\n            \"DLock: LOCK DOES NOT MATCH\"\n        );\n        require(\n            userLock.unlockDate < block.timestamp,\n            \"DLock: UNLOCK DATE NOT DUE\"\n        );\n        userLock.amount = userLock.amount.sub(_amount);\n\n        // remove the user if all tokens are unlocked and withdrawn\n        if (userLock.amount == 0) {\n            uint256[] storage userLocks = users[msg.sender].locksForToken[\n                _lockToken\n            ];\n            userLocks[_index] = userLocks[userLocks.length - 1];\n            userLocks.pop();\n            if (userLocks.length == 0) {\n                users[msg.sender].lockedTokens.remove(_lockToken);\n            }\n        }\n\n        TransferHelper.safeTransfer(_lockToken, msg.sender, _amount);\n        emit onWithdraw(_lockToken, _amount);\n    }\n\n    /**\n     * @notice increment the amount on an existing lock\n     */\n    function incrementLock(\n        address _lockToken,\n        uint256 _index,\n        uint256 _lock_id,\n        uint256 _amount\n    ) external payable nonReentrant {\n        require(_amount > 0, \"DLock: ZERO AMOUNT\");\n        uint256 lock_id = users[msg.sender].locksForToken[_lockToken][_index];\n        TokenLock storage userLock = tokenLocks[_lockToken][lock_id];\n        require(\n            lock_id == _lock_id && userLock.owner == msg.sender,\n            \"DLock: LOCK DOES NOT MATCH\"\n        );\n\n        TransferHelper.safeTransferFrom(\n            _lockToken,\n            address(msg.sender),\n            address(this),\n            _amount\n        );\n\n        // check if fee is met\n        uint256 ethFee = gFees.ethFee;\n        require(msg.value == ethFee, \"DLock: FEE NOT MET\");\n        if (ethFee > 0) {\n            devaddr.transfer(ethFee);\n        }\n        \n        userLock.amount = userLock.amount.add(_amount);\n\n        emit onDeposit(\n            _lockToken,\n            msg.sender,\n            _amount,\n            userLock.lockDate,\n            userLock.unlockDate\n        );\n    }\n\n    /**\n     * @notice transfer ownership of locked tokens to another user\n     */\n    function transferLockOwnership(\n        address _lockToken,\n        uint256 _index,\n        uint256 _lock_id,\n        address payable _new_owner\n    ) external {\n        require(msg.sender != _new_owner, \"Dlock: YOU ARE ALREADY THE OWNER\");\n        uint256 lock_id = users[msg.sender].locksForToken[_lockToken][_index];\n        TokenLock storage transferredLock = tokenLocks[_lockToken][lock_id];\n        require(\n            lock_id == _lock_id && transferredLock.owner == msg.sender,\n            \"DLock: LOCK DOES NOT MATCH\"\n        ); // ensures correct lock is affected\n\n        // store record for new lock owner\n        UserInfo storage user = users[_new_owner];\n        user.lockedTokens.add(_lockToken);\n        uint256[] storage user_locks = user.locksForToken[_lockToken];\n        user_locks.push(transferredLock.lockID);\n\n        // store record for removing old lock owner\n        uint256[] storage userLocks = users[msg.sender].locksForToken[\n            _lockToken\n        ];\n        userLocks[_index] = userLocks[userLocks.length - 1];\n        userLocks.pop();\n        if (userLocks.length == 0) {\n            users[msg.sender].lockedTokens.remove(_lockToken);\n        }\n        transferredLock.owner = _new_owner;\n\n        emit onTranferLockOwnership(_lockToken, msg.sender, _new_owner);\n    }\n\n    function getTotalLocksForToken(address _lockToken)\n        external\n        view\n        returns (uint256)\n    {\n        return tokenLocks[_lockToken].length;\n    }\n\n    function getLocksByTokenAddress(address _lockToken)\n        external\n        view\n        returns (TokenLock[] memory)\n    {\n        return tokenLocks[_lockToken];\n    }\n\n    function getLocksByTokenAddressAndId(address _lockToken, uint256 _id)\n        external\n        view\n        returns (TokenLock memory)\n    {\n        return tokenLocks[_lockToken][_id];\n    }\n\n    function getTotalLockedTokens() external view returns (uint256) {\n        return lockedTokens.length();\n    }\n\n    function getLockedTokenAt(uint256 _index) external view returns (address) {\n        return lockedTokens.at(_index);\n    }\n\n    function getUserTotalLockedTokens(address _user)\n        external\n        view\n        returns (uint256)\n    {\n        UserInfo storage user = users[_user];\n        return user.lockedTokens.length();\n    }\n\n    function getUserLockedTokenAt(address _user, uint256 _index)\n        external\n        view\n        returns (address)\n    {\n        UserInfo storage user = users[_user];\n        return user.lockedTokens.at(_index);\n    }\n\n    function getUserTotalLocksForToken(address _user, address _lockToken)\n        external\n        view\n        returns (uint256)\n    {\n        UserInfo storage user = users[_user];\n        return user.locksForToken[_lockToken].length;\n    }\n\n    function getUserFull(address _user)\n        external\n        view\n        returns (address[] memory)\n    {\n        UserInfo storage user = users[_user];\n        return user.lockedTokens.values();\n    }\n\n    function getAllLockAddresses() external view returns (address[] memory) {\n        return lockedTokens.values();\n    }\n\n    function getUserLockForTokenAt(\n        address _user,\n        address _lockToken,\n        uint256 _index\n    )\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            address\n        )\n    {\n        uint256 lockID = users[_user].locksForToken[_lockToken][_index];\n        TokenLock storage tokenLock = tokenLocks[_lockToken][lockID];\n        return (\n            tokenLock.lockDate,\n            tokenLock.amount,\n            tokenLock.initialAmount,\n            tokenLock.unlockDate,\n            tokenLock.lockID,\n            tokenLock.owner\n        );\n    }\n}\n"}}}