{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":20000},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/AyMaTrading.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.4.16 <0.8.5;\r\npragma abicoder v2;\r\n\r\n    /**\r\n     * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n     * checks.\r\n     *\r\n     * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n     * in bugs, because programmers usually assume that an overflow raises an\r\n     * error, which is the standard behavior in high level programming languages.\r\n     * `SafeMath` restores this intuition by reverting the transaction when an\r\n     * operation overflows.\r\n     *\r\n     * Using this library instead of the unchecked operations eliminates an entire\r\n     * class of bugs, so it's recommended to use it always.\r\n     */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n    /**\r\n     * @dev In order to handle the Eth and token trade.\r\n    */\r\nlibrary UniversalERC20 {\r\n\r\n    IERC20 private constant ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\r\n    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    function universalTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\r\n        \r\n        if (!isETH(token)) {\r\n            token.transferFrom(from, to, amount);\r\n        } else {\r\n            payable(to).transfer(amount);\r\n        }\r\n    }\r\n\r\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\r\n        if (isETH(token)) {\r\n            return who.balance;\r\n        } else {\r\n            return token.balanceOf(who);\r\n        }\r\n    }\r\n\r\n    function isETH(IERC20 token) internal pure returns(bool) {\r\n        return (address(token) == address(ZERO_ADDRESS) || address(token) == address(ETH_ADDRESS));\r\n    }\r\n}\r\n\r\n    /**\r\n     * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n     * the optional functions; to access them see `ERC20Detailed`.\r\n     */\r\ninterface IERC20 {\r\n    /**\r\n     * @return the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     * @return a boolean value indicating whether the operation succeeded.\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. \r\n     * This is zero by default.\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * @return a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * @return a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n    /**\r\n     * @dev interface to use CHI gqs token.\r\n     */ \r\ninterface IFreeFromUpTo {\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n}\r\n\r\n    /**\r\n     * @title AyMaTrading.\r\n     * @dev The AyMaTrading contract has an owner address, and provides with some trading functions for crypto arbitrage:\r\n     *   - AMM to AMM\r\n     *   - Discount Swaps\r\n     *   - Safe Multiple Swaps\r\n     */\r\ncontract AyMaTrading {\r\n\t\r\n\t/**\r\n\t * @dev Sender of the message (current call).\r\n\t */\r\n\taddress payable _owner;\r\n\t\r\n    /**\r\n     * @dev To use chi gas token for discount transaction.\r\n     */ \r\n\tIFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n\t\r\n\t/**\r\n\t * @dev The AyMaTrading contract constructor.\r\n\t * Accept WETH for the loan and Allowance in order to pay the fees.\r\n\t */ \r\n\tconstructor() payable {\r\n\t   _owner = payable(msg.sender);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @return true if 'msg.sender' is the owner of the contract.\r\n\t */\r\n\tfunction isOwner() public view returns (bool) {\r\n\t\treturn payable(msg.sender) == _owner;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Throw if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner {\r\n        require(isOwner(),\"Only owner can call this function.\");\r\n        _;\r\n    }\r\n\t\r\n\t/**\r\n\t * @dev Discount gas when gasPrice is high.\r\n\t */\r\n\tmodifier discountCHI {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n        chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev arbitrage from AMM to AMM.\r\n\t */\r\n\tfunction discountTradeAMMtoAMM(address[] calldata _pool, address _fromToken, address _toToken, uint256 _fromAmount, bytes calldata _1InchDataOne, bytes calldata _1InchDataTwo, uint256[] calldata _flag)  external payable onlyOwner discountCHI {\r\n\t   _tradeAMMtoAMM(_pool, _fromToken, _toToken, _fromAmount, _1InchDataOne, _1InchDataTwo, _flag);\r\n\t}\r\n\tfunction tradeAMMtoAMM(address[] calldata _pool, address _fromToken, address _toToken, uint256 _fromAmount, bytes calldata _1InchDataOne, bytes calldata _1InchDataTwo, uint256[] calldata _flag)  external payable onlyOwner {\r\n\t   _tradeAMMtoAMM(_pool, _fromToken, _toToken, _fromAmount, _1InchDataOne, _1InchDataTwo, _flag);\r\n\t}\r\n\tfunction _tradeAMMtoAMM(address[] calldata _pool, address _fromToken, address _toToken, uint256 _fromAmount, bytes calldata _1InchDataOne, bytes calldata _1InchDataTwo, uint256[] calldata _flag) internal {\r\n\t    \r\n\t     // Track the balance of the token RECEIVED from the trade\r\n        uint256 _beforeBalance = IERC20(_toToken).balanceOf(address(this));\r\n        \r\n\t\t// Swap on AMM: give _fromToken, receive _toToken\r\n        bool success = _swap(_pool[0], _fromToken, _fromAmount, _1InchDataOne, _flag[0]);\r\n\t\t\r\n\t\tif (success) {\r\n            // Read _toToken balance after swap\r\n            uint256 _afterBalance = IERC20(_toToken).balanceOf(address(this));\r\n            \r\n    \t\t// Calculate how much of the token we received\r\n            uint256 _toAmount = SafeMath.sub(_afterBalance, _beforeBalance);\r\n            \r\n    \t\t// Swap on AMM: give _toToken, receive _fromToken\r\n            _swap(_pool[1], _toToken, _toAmount, _1InchDataTwo, _flag[1]);\r\n\t\t} else {\r\n\t\t    return;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * @dev arbitrage from Multiple Swaps.\r\n\t */\r\n\tfunction discountTradeSwaps(address[] calldata _pool, address[] calldata _proxy, address[] calldata _token, uint256 _inputAmount, bytes[] calldata _CallHex, uint256[] calldata _flag) external payable onlyOwner discountCHI {\r\n        _tradeSwaps(_pool, _proxy,_token, _inputAmount, _CallHex, _flag);\r\n    }\r\n\tfunction tradeSwaps(address[] calldata _pool, address[] calldata _proxy, address[] calldata _token, uint256 _inputAmount, bytes[] calldata _CallHex, uint256[] calldata _flag) external payable onlyOwner {\r\n        _tradeSwaps(_pool, _proxy, _token, _inputAmount, _CallHex, _flag);\r\n    }\r\n    function _tradeSwaps(address[] calldata _pool, address[] calldata _proxy, address[] calldata _token, uint256 _inputAmount, bytes[] calldata _CallHex, uint256[] memory _flag) internal {\r\n        \r\n        uint256 amount = _inputAmount;\r\n        uint256 balanceBefore = 0;\r\n        uint256 balanceAfter = 0;\r\n        \r\n        for ( uint i = 0; i < _pool.length; i++ ) {\r\n            \r\n            // Track the balance of the token RECEIVED from the current trade.\r\n            if ( i < _pool.length - 1 ) {\r\n                balanceBefore = UniversalERC20.universalBalanceOf(IERC20(_token[i+1]), address(this));\r\n            }\r\n           \t\r\n           \t// Swap on 1Inch: give _fromToken, receive _toToken.\r\n            bool success = _safeSwap(_pool[i], _proxy[i], _token[i], amount, _CallHex[i], _flag[i]);\r\n            \r\n            if ( success && ( i < _pool.length - 1 ) ) {\r\n                \r\n                // Read _toToken balance after the swap\r\n                balanceAfter = UniversalERC20.universalBalanceOf(IERC20(_token[i+1]),address(this));\r\n                \r\n                // Calculate the how much of the token we receieved\r\n                amount = SafeMath.sub(balanceAfter, balanceBefore);\r\n            }\r\n            \r\n            else { break; }\r\n        }\r\n    }\r\n    \r\n\tfunction discountSwap(address _contract, address _from , uint256 _amount, bytes calldata _callData, uint256 _flag)  external payable onlyOwner discountCHI {\r\n        _swap(_contract, _from, _amount, _callData, _flag);        \r\n    }\r\n    function swap(address _contract, address _from , uint256 _amount, bytes calldata _callData, uint256 _flag)  external payable onlyOwner {\r\n        _swap(_contract, _from, _amount, _callData, _flag);        \r\n    }\r\n    function _swap(address _contract, address _from, uint256 _amount, bytes calldata _callData, uint256 _flag) internal returns (bool) {\r\n        \r\n        //Configuration\r\n        IERC20 _fromToken = IERC20(_from);\r\n        \r\n        // Uniswap V2\r\n        if (_flag == 1) {\r\n            _fromToken.transferFrom(address(this), _contract, _amount);\r\n        } else {\r\n            if (_fromToken.allowance(address(this), _contract) < _amount) {\r\n                _fromToken.approve(_contract, 115792089237316195423570985008687907853269984665640564039457584007913129639935);\r\n            }\r\n        }\r\n         (bool success,) = address(_contract).call{value:0}(_callData);\r\n         return success;\r\n    }\r\n\r\n    function discountSafeSwap(address _contract, address _proxy, address _from , uint256 _amount, bytes calldata _callData, uint256 _flag)  external payable onlyOwner discountCHI {\r\n        _safeSwap(_contract, _proxy, _from, _amount, _callData, _flag);        \r\n    }\r\n    function safeSwap(address _contract, address _proxy, address _from , uint256 _amount, bytes calldata _callData, uint256 _flag)  external payable onlyOwner {\r\n        _safeSwap(_contract, _proxy, _from, _amount, _callData, _flag);        \r\n    }\r\n    function _safeSwap(address _contract, address _proxy, address _from, uint256 _amount, bytes calldata _callData, uint256 _flag) internal returns (bool) {\r\n        \r\n        //Configuration\r\n        IERC20 _fromToken = IERC20(_from);\r\n        bool success = false;\r\n        \r\n        if ( _flag == 1 ) {\r\n            UniversalERC20.universalTransferFrom(_fromToken, address(this), _proxy, _amount);\r\n            (success,) = address(_contract).call{value:0}(_callData);\r\n        } else {\r\n            if ( !UniversalERC20.isETH(_fromToken) ) {\r\n                if ( _fromToken.allowance(address(this), _proxy) < _amount ) {\r\n                    _fromToken.approve(_proxy, 115792089237316195423570985008687907853269984665640564039457584007913129639935);\r\n                }\r\n                // Swap TOKEN or ETH with the right contract\r\n                (success,) = address(_contract).call{value:0}(_callData);\r\n            } else {\r\n                (success,) = address(_contract).call{value:_amount}(_callData);\r\n            }\r\n        }\r\n         \r\n         return success;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve Token for a spender.\r\n     */\r\n     function approveToken(address tokenAddress, address spender) external payable onlyOwner {\r\n        _approveToken(tokenAddress, spender);\r\n     }\r\n     function _approveToken(address _tokenAddress, address _spender) internal {\r\n        //Allowance for a DEX contract\r\n        IERC20(_tokenAddress).approve(_spender, 115792089237316195423570985008687907853269984665640564039457584007913129639935);\r\n     }\r\n\r\n\t/**\r\n\t * @dev Deposit Ether.\r\n\t */\r\n\tfunction deposit(uint256 amount) external payable {\r\n\t\trequire(msg.value==amount, \"Deposit failed!\");\r\n\t}\r\n\t/**\r\n\t * @dev Inorder to get the Ether of this contract.\r\n\t */ \r\n\tfunction withdrawEther() external payable onlyOwner {\r\n        address self = address(this); // workaround for a possible solidity bug\r\n        uint256 balance = self.balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n    /*\r\n\t * @dev Notification of a deposit event in ETH.\r\n\t */\r\n\tevent Received(address, uint);\r\n\t/**\r\n\t * @dev This contract keeps all Ether sent to it.\r\n\t */\r\n\treceive() external payable{\r\n\t\temit Received(msg.sender, msg.value);\r\n\t}\r\n\t\r\n\tfunction withdrawToken(address _tokenAddress) payable external onlyOwner {\r\n\t\tuint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\r\n\t\tIERC20(_tokenAddress).transfer(_owner, balance);\r\n\t}\r\n\tfunction withdrawToken(address _tokenAddress, uint256 _amount) payable external onlyOwner {\r\n\t    uint256 balance = _amount;\r\n\t    IERC20(_tokenAddress).transfer(_owner, balance);\r\n\t}\r\n}"}}}