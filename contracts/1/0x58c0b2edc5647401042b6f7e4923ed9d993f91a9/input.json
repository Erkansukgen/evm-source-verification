{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"SLTDToken.sol":{"content":"pragma solidity 0.6.0;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0);\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor () public {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), msg.sender);\r\n  }\r\n\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract SLTDToken is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  string public constant name = \"Staking Limited\";\r\n  string public constant symbol = \"SLTD\";\r\n  uint256 public constant decimals = 18;\r\n  uint256 private constant _maximumSupply = 24750 * 10 ** decimals;\r\n  uint256 private constant _maximumPresaleBurnAmount = 10000 * 10 ** decimals;\r\n  uint256 public _presaleBurnTotal = 0;\r\n  uint256 public _stakingBurnTotal = 0;\r\n  uint256 public _totalSupply;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  mapping(address => uint256) public _balanceOf;\r\n  mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n  constructor() public override {\r\n    _owner = msg.sender;\r\n    _totalSupply = _maximumSupply;\r\n    _balanceOf[msg.sender] = _maximumSupply;\r\n    emit Transfer(address(0x0), msg.sender, _maximumSupply);\r\n  }\r\n\r\n  function totalSupply () public view returns (uint256) {\r\n    return _totalSupply; \r\n  }\r\n\r\n  function balanceOf (address who) public view returns (uint256) {\r\n    return _balanceOf[who];\r\n  }\r\n\r\n  function _transfer(address _from, address _to, uint256 _value) internal {\r\n    _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n    _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n    emit Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {\r\n    require(_balanceOf[msg.sender] >= _value);\r\n    _transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function burn (uint256 _burnAmount, bool _presaleBurn) public onlyOwner returns (bool success) {\r\n    if (_presaleBurn) {\r\n      require(_presaleBurnTotal.add(_burnAmount) <= _maximumPresaleBurnAmount);\r\n      require(_balanceOf[msg.sender] >= _burnAmount);\r\n      _presaleBurnTotal = _presaleBurnTotal.add(_burnAmount);\r\n      _transfer(_owner, address(0), _burnAmount);\r\n      _totalSupply = _totalSupply.sub(_burnAmount);\r\n    } else {\r\n      require(_balanceOf[msg.sender] >= _burnAmount);\r\n      _transfer(_owner, address(0), _burnAmount);\r\n      _totalSupply = _totalSupply.sub(_burnAmount);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool success) {\r\n    require(_spender != address(0));\r\n    allowance[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n    require(_value <= _balanceOf[_from]);\r\n    require(_value <= allowance[_from][msg.sender]);\r\n    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n    _transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n}"}}}