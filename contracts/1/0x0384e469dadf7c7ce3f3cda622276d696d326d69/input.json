{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "TingBooster.sol": {
      "content": "pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev provides information about the current execution context, including the\r\n * sender of the transaction and its data. while these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with gsn meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * this contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * this module is used through inheritance. it will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev leaves the contract without owner. it will not be possible to call\r\n     * `onlyOwner` functions anymore. can only be called by the current owner.\r\n     *\r\n     * smol note: renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev transfers ownership of the contract to a new account (`newOwner`).\r\n     * can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title roles\r\n * @dev library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract CanTransferRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event CanTransferAdded(address indexed account);\r\n    event CanTransferRemoved(address indexed account);\r\n\r\n    Roles.Role private _canTransfer;\r\n\r\n    constructor () internal {\r\n        _addCanTransfer(_msgSender());\r\n    }\r\n\r\n    modifier onlyCanTransfer() {\r\n        require(canTransfer(_msgSender()), \"cant: smol caller is not beeg\");\r\n        _;\r\n    }\r\n\r\n    function canTransfer(address account) public view returns (bool) {\r\n        return _canTransfer.has(account);\r\n    }\r\n\r\n    function addCanTransfer(address account) public onlyCanTransfer {\r\n        _addCanTransfer(account);\r\n    }\r\n\r\n    function renounceCanTransfer() public {\r\n        _removeCanTransfer(_msgSender());\r\n    }\r\n\r\n    function _addCanTransfer(address account) internal {\r\n        _canTransfer.add(account);\r\n        emit CanTransferAdded(account);\r\n    }\r\n\r\n    function _removeCanTransfer(address account) internal {\r\n        _canTransfer.remove(account);\r\n        emit CanTransferRemoved(account);\r\n    }\r\n}\r\n\r\n\r\ncontract TingBooster is Ownable, CanTransferRole  {\r\n\r\n\r\n\t//Mapping data of booster of a user in a pool. 100% booster = 1e5\r\n    mapping(address => uint256) public boosterInfo;\r\n\t\r\n    \r\n    function getMultiplierOfAddress(address _address)  public view returns (uint256) {\r\n        return boosterInfo[_address];\r\n    }\r\n\t\r\n\tfunction setMultiplierOfAddress(address _address, uint256 _booster) public onlyOwner {\r\n        boosterInfo[_address] = _booster;\r\n    }\r\n    \r\n}"
    }
  }
}