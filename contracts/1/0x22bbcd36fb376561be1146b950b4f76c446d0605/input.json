{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/OrFeedInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.8;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface OrFeed {\r\n  function getTokenAddress (string calldata symbol) external view returns (address);\r\n  function arb (address fundsReturnToAddress, address liquidityProviderContractAddress, string[] calldata tokens,  uint256 amount, string[] calldata exchanges) external payable returns (bool);\r\n}\r\n\r\ncontract OrFeedInterface {\r\n    OrFeed orFeed;\r\n    \r\n    constructor() public {\r\n        orFeed = OrFeed(0x8316B082621CFedAB95bf4a44a1d4B64a6ffc336);\r\n    }\r\n    \r\n    function getTokenAddress(string memory _symbol) public view returns (address result) {\r\n        result = orFeed.getTokenAddress(_symbol);\r\n    }\r\n    \r\n    function arbitrage(address returnAddress, address liquidityAddress, string[] memory tokens,  uint256 amount, string[] memory exchanges) public payable returns (bool result) {\r\n        result = orFeed.arb(returnAddress, liquidityAddress, tokens, amount, exchanges);\r\n    }\r\n}"
    }
  }
}