{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "fei.sol": {
      "content": "\r\npragma solidity >= 0.6.1;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\ninterface IFeiRouter {\r\n    function sellFei(\r\n        uint256 maxPenalty,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address to,\r\n        uint256 deadline\r\n    )external returns (uint256 amountOut);\r\n}\r\n\r\ncontract MineBot{\r\n    using SafeMath for uint256;\r\n    \r\n    address payable public owner;\r\n    modifier onlyOwner(){\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    //转发\r\n    function custom_call(address target, uint value,  bytes calldata data) onlyOwner external payable returns (bool, bytes memory) {\r\n\r\n        (bool success, bytes memory returnData) = target.call{value:value}(data);\r\n        if (!success){\r\n            revert();\r\n        }\r\n        return (success,returnData);\r\n    }\r\n\r\n    function withdraw(address _token, uint amount) onlyOwner public{\r\n        if (amount==0){\r\n            amount = IERC20(_token).balanceOf(address(this));\r\n        }\r\n        IERC20(_token).transfer(owner, amount);\r\n    }\r\n\r\n    function setOwner(address payable _owner) onlyOwner public{\r\n        owner = _owner;\r\n    }\r\n\r\n    mapping(address => bool) public operators;\r\n        \r\n    function set_operators(address[] memory  _operators, bool ok) onlyOwner public{\r\n        for (uint n=0;n<_operators.length; n++){\r\n            operators[_operators[n]] = ok;    \r\n        }\r\n    }\r\n    \r\n    modifier onlyOperator(){\r\n        require(operators[msg.sender] || owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function sell(address router,\r\n                    uint percent,\r\n                    uint minethbili\r\n        ) onlyOperator public{\r\n            \r\n            IERC20 sellToken = IERC20(0x956F47F50A910163D8BF957Cf5846D573E7f87CA);\r\n            uint amount = sellToken.balanceOf(address(this));\r\n\r\n            sellToken.approve(router, amount);\r\n            uint tokenAmountOut = IFeiRouter(router).sellFei(\r\n                amount*percent/100,\r\n                amount,\r\n                amount/minethbili,\r\n                0xbee81b34196E68cF62421DD9FE188623729FB3Cf,\r\n                block.timestamp \r\n            );\r\n            require(tokenAmountOut>amount/minethbili, \"ERR_LIMIT_OUT\");\r\n    }\r\n}\r\n\r\n\r\n"
    }
  }
}