{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/proxy.sol":{"content":"pragma solidity ^0.6.2;\n\ncontract Proxy {\n\n    address delegate;\n    address owner = msg.sender;\n\n    function upgradeDelegate(address newDelegateAddress) public {\n        require(msg.sender == owner);\n        delegate = newDelegateAddress;\n    }\n\n    fallback() external payable {\n        address addr = delegate;\n        assembly {\n            let freememstart := mload(0x40)\n            calldatacopy(freememstart, 0, calldatasize())\n            let success := delegatecall(not(0), addr, freememstart, calldatasize(), freememstart, 32)\n            switch success\n            case 0 { revert(freememstart, 32) }\n            default { return(freememstart, 32) }\n        }\n    }\n}\n"}}}