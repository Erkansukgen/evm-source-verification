{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/tkn.sol":{"content":"/// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.8.1;\r\n\r\ncontract Token {\r\n    string constant public name = \"Token\";\r\n    string constant public symbol = \"TKN\";\r\n    uint8 constant public decimals = 18;\r\n    uint256 constant public totalSupply = 100 ether;\r\n    \r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n    \r\n    constructor(address creator) {\r\n        balanceOf[creator] = 100 ether;\r\n        emit Transfer(address(0), creator, 100 ether);\r\n    }\r\n    \r\n    function approve(address to, uint256 amount) external returns (bool) {\r\n        allowance[msg.sender][to] = amount;\r\n        emit Approval(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address to, uint256 amount) external returns (bool) {\r\n        balanceOf[msg.sender] -= amount;\r\n        balanceOf[to] += amount;\r\n        emit Transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool) {\r\n        balanceOf[from] -= amount;\r\n        balanceOf[to] += amount;\r\n        allowance[from][msg.sender] -= amount;\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract TokenFactory {\r\n    fallback() external { new Token(msg.sender); }\r\n}"}}}