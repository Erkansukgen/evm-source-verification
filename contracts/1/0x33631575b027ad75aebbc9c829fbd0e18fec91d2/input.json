{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"curveff.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n// Global Enums and Structs\n\n\n\nstruct StrategyParams {\n    uint256 performanceFee;\n    uint256 activation;\n    uint256 debtRatio;\n    uint256 minDebtPerHarvest;\n    uint256 maxDebtPerHarvest;\n    uint256 lastReport;\n    uint256 totalDebt;\n    uint256 totalGain;\n    uint256 totalLoss;\n}\n\n// Part: IAddressResolver\n\n// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\ninterface IAddressResolver {\n    function getAddress(bytes32 name) external view returns (address);\n\n    function getSynth(bytes32 key) external view returns (address);\n\n    function requireAndGetAddress(bytes32 name, string calldata reason)\n        external\n        view\n        returns (address);\n}\n\n// Part: IBaseFee\n\ninterface IBaseFee {\n    function basefee_global() external view returns (uint256);\n}\n\n// Part: ICurveFi\n\ninterface ICurveFi {\n    function get_virtual_price() external view returns (uint256);\n\n    function add_liquidity(\n        // EURt\n        uint256[2] calldata amounts,\n        uint256 min_mint_amount\n    ) external payable;\n\n    function add_liquidity(\n        // Compound, sAave\n        uint256[2] calldata amounts,\n        uint256 min_mint_amount,\n        bool _use_underlying\n    ) external payable returns (uint256);\n\n    function add_liquidity(\n        // Iron Bank, Aave\n        uint256[3] calldata amounts,\n        uint256 min_mint_amount,\n        bool _use_underlying\n    ) external payable returns (uint256);\n\n    function add_liquidity(\n        // 3Crv Metapools\n        address pool,\n        uint256[4] calldata amounts,\n        uint256 min_mint_amount\n    ) external;\n\n    function add_liquidity(\n        // Y and yBUSD\n        uint256[4] calldata amounts,\n        uint256 min_mint_amount,\n        bool _use_underlying\n    ) external payable returns (uint256);\n\n    function add_liquidity(\n        // 3pool\n        uint256[3] calldata amounts,\n        uint256 min_mint_amount\n    ) external payable;\n\n    function add_liquidity(\n        // sUSD\n        uint256[4] calldata amounts,\n        uint256 min_mint_amount\n    ) external payable;\n\n    function remove_liquidity_imbalance(\n        uint256[2] calldata amounts,\n        uint256 max_burn_amount\n    ) external;\n\n    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts)\n        external;\n\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        int128 i,\n        uint256 min_amount\n    ) external;\n\n    function exchange(\n        int128 from,\n        int128 to,\n        uint256 _from_amount,\n        uint256 _min_to_amount\n    ) external;\n\n    function balances(uint256) external view returns (uint256);\n\n    function get_dy(\n        int128 from,\n        int128 to,\n        uint256 _from_amount\n    ) external view returns (uint256);\n\n    // EURt\n    function calc_token_amount(uint256[2] calldata _amounts, bool _is_deposit)\n        external\n        view\n        returns (uint256);\n\n    // 3Crv Metapools\n    function calc_token_amount(\n        address _pool,\n        uint256[4] calldata _amounts,\n        bool _is_deposit\n    ) external view returns (uint256);\n\n    // sUSD, Y pool, etc\n    function calc_token_amount(uint256[4] calldata _amounts, bool _is_deposit)\n        external\n        view\n        returns (uint256);\n\n    // 3pool, Iron Bank, etc\n    function calc_token_amount(uint256[3] calldata _amounts, bool _is_deposit)\n        external\n        view\n        returns (uint256);\n\n    function calc_withdraw_one_coin(uint256 amount, int128 i)\n        external\n        view\n        returns (uint256);\n}\n\n// Part: ICurveStrategyProxy\n\ninterface ICurveStrategyProxy {\n    function proxy() external returns (address);\n\n    function balanceOf(address _gauge) external view returns (uint256);\n\n    function deposit(address _gauge, address _token) external;\n\n    function withdraw(\n        address _gauge,\n        address _token,\n        uint256 _amount\n    ) external returns (uint256);\n\n    function withdrawAll(address _gauge, address _token)\n        external\n        returns (uint256);\n\n    function harvest(address _gauge) external;\n\n    function lock() external;\n\n    function approveStrategy(address) external;\n\n    function revokeStrategy(address) external;\n\n    function claimRewards(address _gauge, address _token) external;\n}\n\n// Part: IReadProxy\n\ninterface IReadProxy {\n    function target() external view returns (address);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n}\n\n// Part: ISynth\n\ninterface ISynth {\n    // Views\n    function currencyKey() external view returns (bytes32);\n\n    function transferableSynths(address account)\n        external\n        view\n        returns (uint256);\n\n    // Mutative functions\n    function transferAndSettle(address to, uint256 value)\n        external\n        returns (bool);\n\n    function transferFromAndSettle(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    // Restricted: used internally to Synthetix\n    function burn(address account, uint256 amount) external;\n\n    function issue(address account, uint256 amount) external;\n}\n\n// Part: ISynthetix\n\n// https://docs.synthetix.io/contracts/source/interfaces/isynthetix\ninterface ISynthetix {\n    // Views\n    function anySynthOrSNXRateIsInvalid()\n        external\n        view\n        returns (bool anyRateInvalid);\n\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\n\n    function availableSynthCount() external view returns (uint256);\n\n    function collateral(address account) external view returns (uint256);\n\n    function collateralisationRatio(address issuer)\n        external\n        view\n        returns (uint256);\n\n    function debtBalanceOf(address issuer, bytes32 currencyKey)\n        external\n        view\n        returns (uint256);\n\n    function isWaitingPeriod(bytes32 currencyKey) external view returns (bool);\n\n    function maxIssuableSynths(address issuer)\n        external\n        view\n        returns (uint256 maxIssuable);\n\n    function remainingIssuableSynths(address issuer)\n        external\n        view\n        returns (\n            uint256 maxIssuable,\n            uint256 alreadyIssued,\n            uint256 totalSystemDebt\n        );\n\n    function synthsByAddress(address synthAddress)\n        external\n        view\n        returns (bytes32);\n\n    function totalIssuedSynths(bytes32 currencyKey)\n        external\n        view\n        returns (uint256);\n\n    function totalIssuedSynthsExcludeEtherCollateral(bytes32 currencyKey)\n        external\n        view\n        returns (uint256);\n\n    function transferableSynthetix(address account)\n        external\n        view\n        returns (uint256 transferable);\n\n    // Mutative Functions\n    function burnSynths(uint256 amount) external;\n\n    function burnSynthsOnBehalf(address burnForAddress, uint256 amount)\n        external;\n\n    function burnSynthsToTarget() external;\n\n    function burnSynthsToTargetOnBehalf(address burnForAddress) external;\n\n    function exchange(\n        bytes32 sourceCurrencyKey,\n        uint256 sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external returns (uint256 amountReceived);\n\n    function exchangeOnBehalf(\n        address exchangeForAddress,\n        bytes32 sourceCurrencyKey,\n        uint256 sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external returns (uint256 amountReceived);\n\n    function exchangeWithTracking(\n        bytes32 sourceCurrencyKey,\n        uint256 sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address originator,\n        bytes32 trackingCode\n    ) external returns (uint256 amountReceived);\n\n    function exchangeOnBehalfWithTracking(\n        address exchangeForAddress,\n        bytes32 sourceCurrencyKey,\n        uint256 sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address originator,\n        bytes32 trackingCode\n    ) external returns (uint256 amountReceived);\n\n    function issueMaxSynths() external;\n\n    function issueMaxSynthsOnBehalf(address issueForAddress) external;\n\n    function issueSynths(uint256 amount) external;\n\n    function issueSynthsOnBehalf(address issueForAddress, uint256 amount)\n        external;\n\n    function mint() external returns (bool);\n\n    function settle(bytes32 currencyKey)\n        external\n        returns (\n            uint256 reclaimed,\n            uint256 refunded,\n            uint256 numEntries\n        );\n\n    // Liquidations\n    function liquidateDelinquentAccount(address account, uint256 susdAmount)\n        external\n        returns (bool);\n\n    // Restricted Functions\n\n    function mintSecondary(address account, uint256 amount) external;\n\n    function mintSecondaryRewards(uint256 amount) external;\n\n    function burnSecondary(address account, uint256 amount) external;\n}\n\n// Part: ISystemStatus\n\ninterface ISystemStatus {\n    function getSynthExchangeSuspensions(bytes32[] calldata synths)\n        external\n        view\n        returns (bool[] memory exchangeSuspensions, uint256[] memory reasons);\n}\n\n// Part: IUniV3\n\ninterface IUniV3 {\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    function exactInput(ExactInputParams calldata params)\n        external\n        payable\n        returns (uint256 amountOut);\n}\n\n// Part: IUniswapV2Router01\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/Address\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/IERC20\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/Math\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/SafeMath\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Part: yearn/yearn-vaults@0.4.3/HealthCheck\n\ninterface HealthCheck {\n    function check(\n        uint256 profit,\n        uint256 loss,\n        uint256 debtPayment,\n        uint256 debtOutstanding,\n        uint256 totalDebt\n    ) external view returns (bool);\n}\n\n// Part: IUniswapV2Router02\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\n// Part: IVirtualSynth\n\ninterface IVirtualSynth {\n    // Views\n    function balanceOfUnderlying(address account)\n        external\n        view\n        returns (uint256);\n\n    function rate() external view returns (uint256);\n\n    function readyToSettle() external view returns (bool);\n\n    function secsLeftInWaitingPeriod() external view returns (uint256);\n\n    function settled() external view returns (bool);\n\n    function synth() external view returns (ISynth);\n\n    // Mutative functions\n    function settle(address account) external;\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/SafeERC20\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// Part: yearn/yearn-vaults@0.4.3/VaultAPI\n\ninterface VaultAPI is IERC20 {\n    function name() external view returns (string calldata);\n\n    function symbol() external view returns (string calldata);\n\n    function decimals() external view returns (uint256);\n\n    function apiVersion() external pure returns (string memory);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 expiry,\n        bytes calldata signature\n    ) external returns (bool);\n\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\n    function deposit() external returns (uint256);\n\n    function deposit(uint256 amount) external returns (uint256);\n\n    function deposit(uint256 amount, address recipient) external returns (uint256);\n\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\n    function withdraw() external returns (uint256);\n\n    function withdraw(uint256 maxShares) external returns (uint256);\n\n    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\n\n    function token() external view returns (address);\n\n    function strategies(address _strategy) external view returns (StrategyParams memory);\n\n    function pricePerShare() external view returns (uint256);\n\n    function totalAssets() external view returns (uint256);\n\n    function depositLimit() external view returns (uint256);\n\n    function maxAvailableShares() external view returns (uint256);\n\n    /**\n     * View how much the Vault would increase this Strategy's borrow limit,\n     * based on its present performance (since its last report). Can be used to\n     * determine expectedReturn in your Strategy.\n     */\n    function creditAvailable() external view returns (uint256);\n\n    /**\n     * View how much the Vault would like to pull back from the Strategy,\n     * based on its present performance (since its last report). Can be used to\n     * determine expectedReturn in your Strategy.\n     */\n    function debtOutstanding() external view returns (uint256);\n\n    /**\n     * View how much the Vault expect this Strategy to return at the current\n     * block, based on its present performance (since its last report). Can be\n     * used to determine expectedReturn in your Strategy.\n     */\n    function expectedReturn() external view returns (uint256);\n\n    /**\n     * This is the main contact point where the Strategy interacts with the\n     * Vault. It is critical that this call is handled as intended by the\n     * Strategy. Therefore, this function will be called by BaseStrategy to\n     * make sure the integration is correct.\n     */\n    function report(\n        uint256 _gain,\n        uint256 _loss,\n        uint256 _debtPayment\n    ) external returns (uint256);\n\n    /**\n     * This function should only be used in the scenario where the Strategy is\n     * being retired but no migration of the positions are possible, or in the\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\n     * mode in order for it to exit as quickly as possible. The latter scenario\n     * could be for any reason that is considered \"critical\" that the Strategy\n     * exits its position as fast as possible, such as a sudden change in\n     * market conditions leading to losses, or an imminent failure in an\n     * external dependency.\n     */\n    function revokeStrategy() external;\n\n    /**\n     * View the governance address of the Vault to assert privileged functions\n     * can only be called by governance. The Strategy serves the Vault, so it\n     * is subject to governance defined by the Vault.\n     */\n    function governance() external view returns (address);\n\n    /**\n     * View the management address of the Vault to assert privileged functions\n     * can only be called by management. The Strategy serves the Vault, so it\n     * is subject to management defined by the Vault.\n     */\n    function management() external view returns (address);\n\n    /**\n     * View the guardian address of the Vault to assert privileged functions\n     * can only be called by guardian. The Strategy serves the Vault, so it\n     * is subject to guardian defined by the Vault.\n     */\n    function guardian() external view returns (address);\n}\n\n// Part: IExchanger\n\n// https://docs.synthetix.io/contracts/source/interfaces/iexchanger\ninterface IExchanger {\n    // Views\n    function calculateAmountAfterSettlement(\n        address from,\n        bytes32 currencyKey,\n        uint256 amount,\n        uint256 refunded\n    ) external view returns (uint256 amountAfterSettlement);\n\n    function isSynthRateInvalid(bytes32 currencyKey)\n        external\n        view\n        returns (bool);\n\n    function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey)\n        external\n        view\n        returns (uint256);\n\n    function settlementOwing(address account, bytes32 currencyKey)\n        external\n        view\n        returns (\n            uint256 reclaimAmount,\n            uint256 rebateAmount,\n            uint256 numEntries\n        );\n\n    function hasWaitingPeriodOrSettlementOwing(\n        address account,\n        bytes32 currencyKey\n    ) external view returns (bool);\n\n    function feeRateForExchange(\n        bytes32 sourceCurrencyKey,\n        bytes32 destinationCurrencyKey\n    ) external view returns (uint256 exchangeFeeRate);\n\n    function getAmountsForExchange(\n        uint256 sourceAmount,\n        bytes32 sourceCurrencyKey,\n        bytes32 destinationCurrencyKey\n    )\n        external\n        view\n        returns (\n            uint256 amountReceived,\n            uint256 fee,\n            uint256 exchangeFeeRate\n        );\n\n    function priceDeviationThresholdFactor() external view returns (uint256);\n\n    function waitingPeriodSecs() external view returns (uint256);\n\n    // Mutative functions\n    function exchange(\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint256 sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address destinationAddress\n    ) external returns (uint256 amountReceived);\n\n    function exchangeOnBehalf(\n        address exchangeForAddress,\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint256 sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external returns (uint256 amountReceived);\n\n    function exchangeWithTracking(\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint256 sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address destinationAddress,\n        address originator,\n        bytes32 trackingCode\n    ) external returns (uint256 amountReceived);\n\n    function exchangeOnBehalfWithTracking(\n        address exchangeForAddress,\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint256 sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address originator,\n        bytes32 trackingCode\n    ) external returns (uint256 amountReceived);\n\n    function exchangeWithVirtual(\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint256 sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address destinationAddress,\n        bytes32 trackingCode\n    ) external returns (uint256 amountReceived, IVirtualSynth vSynth);\n\n    function settle(address from, bytes32 currencyKey)\n        external\n        returns (\n            uint256 reclaimed,\n            uint256 refunded,\n            uint256 numEntries\n        );\n\n    function setLastExchangeRateForSynth(bytes32 currencyKey, uint256 rate)\n        external;\n\n    function resetLastExchangeRate(bytes32[] calldata currencyKeys) external;\n\n    function suspendSynthWithInvalidRate(bytes32 currencyKey) external;\n}\n\n// Part: yearn/yearn-vaults@0.4.3/BaseStrategy\n\n/**\n * @title Yearn Base Strategy\n * @author yearn.finance\n * @notice\n *  BaseStrategy implements all of the required functionality to interoperate\n *  closely with the Vault contract. This contract should be inherited and the\n *  abstract methods implemented to adapt the Strategy to the particular needs\n *  it has to create a return.\n *\n *  Of special interest is the relationship between `harvest()` and\n *  `vault.report()'. `harvest()` may be called simply because enough time has\n *  elapsed since the last report, and not because any funds need to be moved\n *  or positions adjusted. This is critical so that the Vault may maintain an\n *  accurate picture of the Strategy's performance. See  `vault.report()`,\n *  `harvest()`, and `harvestTrigger()` for further details.\n */\n\nabstract contract BaseStrategy {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    string public metadataURI;\n\n    // health checks\n    bool public doHealthCheck;\n    address public healthCheck;\n\n    /**\n     * @notice\n     *  Used to track which version of `StrategyAPI` this Strategy\n     *  implements.\n     * @dev The Strategy's version must match the Vault's `API_VERSION`.\n     * @return A string which holds the current API version of this contract.\n     */\n    function apiVersion() public pure returns (string memory) {\n        return \"0.4.3\";\n    }\n\n    /**\n     * @notice This Strategy's name.\n     * @dev\n     *  You can use this field to manage the \"version\" of this Strategy, e.g.\n     *  `StrategySomethingOrOtherV1`. However, \"API Version\" is managed by\n     *  `apiVersion()` function above.\n     * @return This Strategy's name.\n     */\n    function name() external view virtual returns (string memory);\n\n    /**\n     * @notice\n     *  The amount (priced in want) of the total assets managed by this strategy should not count\n     *  towards Yearn's TVL calculations.\n     * @dev\n     *  You can override this field to set it to a non-zero value if some of the assets of this\n     *  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.\n     *  Note that this value must be strictly less than or equal to the amount provided by\n     *  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.\n     *  Also note that this value is used to determine the total assets under management by this\n     *  strategy, for the purposes of computing the management fee in `Vault`\n     * @return\n     *  The amount of assets this strategy manages that should not be included in Yearn's Total Value\n     *  Locked (TVL) calculation across it's ecosystem.\n     */\n    function delegatedAssets() external view virtual returns (uint256) {\n        return 0;\n    }\n\n    VaultAPI public vault;\n    address public strategist;\n    address public rewards;\n    address public keeper;\n\n    IERC20 public want;\n\n    // So indexers can keep track of this\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\n\n    event UpdatedStrategist(address newStrategist);\n\n    event UpdatedKeeper(address newKeeper);\n\n    event UpdatedRewards(address rewards);\n\n    event UpdatedMinReportDelay(uint256 delay);\n\n    event UpdatedMaxReportDelay(uint256 delay);\n\n    event UpdatedProfitFactor(uint256 profitFactor);\n\n    event UpdatedDebtThreshold(uint256 debtThreshold);\n\n    event EmergencyExitEnabled();\n\n    event UpdatedMetadataURI(string metadataURI);\n\n    // The minimum number of seconds between harvest calls. See\n    // `setMinReportDelay()` for more details.\n    uint256 public minReportDelay;\n\n    // The maximum number of seconds between harvest calls. See\n    // `setMaxReportDelay()` for more details.\n    uint256 public maxReportDelay;\n\n    // The minimum multiple that `callCost` must be above the credit/profit to\n    // be \"justifiable\". See `setProfitFactor()` for more details.\n    uint256 public profitFactor;\n\n    // Use this to adjust the threshold at which running a debt causes a\n    // harvest trigger. See `setDebtThreshold()` for more details.\n    uint256 public debtThreshold;\n\n    // See note on `setEmergencyExit()`.\n    bool public emergencyExit;\n\n    // modifiers\n    modifier onlyAuthorized() {\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\n        _;\n    }\n\n    modifier onlyEmergencyAuthorized() {\n        require(\n            msg.sender == strategist || msg.sender == governance() || msg.sender == vault.guardian() || msg.sender == vault.management(),\n            \"!authorized\"\n        );\n        _;\n    }\n\n    modifier onlyStrategist() {\n        require(msg.sender == strategist, \"!strategist\");\n        _;\n    }\n\n    modifier onlyGovernance() {\n        require(msg.sender == governance(), \"!authorized\");\n        _;\n    }\n\n    modifier onlyKeepers() {\n        require(\n            msg.sender == keeper ||\n                msg.sender == strategist ||\n                msg.sender == governance() ||\n                msg.sender == vault.guardian() ||\n                msg.sender == vault.management(),\n            \"!authorized\"\n        );\n        _;\n    }\n\n    modifier onlyVaultManagers() {\n        require(msg.sender == vault.management() || msg.sender == governance(), \"!authorized\");\n        _;\n    }\n\n    constructor(address _vault) public {\n        _initialize(_vault, msg.sender, msg.sender, msg.sender);\n    }\n\n    /**\n     * @notice\n     *  Initializes the Strategy, this is called only once, when the\n     *  contract is deployed.\n     * @dev `_vault` should implement `VaultAPI`.\n     * @param _vault The address of the Vault responsible for this Strategy.\n     * @param _strategist The address to assign as `strategist`.\n     * The strategist is able to change the reward address\n     * @param _rewards  The address to use for pulling rewards.\n     * @param _keeper The adddress of the _keeper. _keeper\n     * can harvest and tend a strategy.\n     */\n    function _initialize(\n        address _vault,\n        address _strategist,\n        address _rewards,\n        address _keeper\n    ) internal {\n        require(address(want) == address(0), \"Strategy already initialized\");\n\n        vault = VaultAPI(_vault);\n        want = IERC20(vault.token());\n        want.safeApprove(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\n        strategist = _strategist;\n        rewards = _rewards;\n        keeper = _keeper;\n\n        // initialize variables\n        minReportDelay = 0;\n        maxReportDelay = 86400;\n        profitFactor = 100;\n        debtThreshold = 0;\n\n        vault.approve(rewards, uint256(-1)); // Allow rewards to be pulled\n    }\n\n    function setHealthCheck(address _healthCheck) external onlyVaultManagers {\n        healthCheck = _healthCheck;\n    }\n\n    function setDoHealthCheck(bool _doHealthCheck) external onlyVaultManagers {\n        doHealthCheck = _doHealthCheck;\n    }\n\n    /**\n     * @notice\n     *  Used to change `strategist`.\n     *\n     *  This may only be called by governance or the existing strategist.\n     * @param _strategist The new address to assign as `strategist`.\n     */\n    function setStrategist(address _strategist) external onlyAuthorized {\n        require(_strategist != address(0));\n        strategist = _strategist;\n        emit UpdatedStrategist(_strategist);\n    }\n\n    /**\n     * @notice\n     *  Used to change `keeper`.\n     *\n     *  `keeper` is the only address that may call `tend()` or `harvest()`,\n     *  other than `governance()` or `strategist`. However, unlike\n     *  `governance()` or `strategist`, `keeper` may *only* call `tend()`\n     *  and `harvest()`, and no other authorized functions, following the\n     *  principle of least privilege.\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _keeper The new address to assign as `keeper`.\n     */\n    function setKeeper(address _keeper) external onlyAuthorized {\n        require(_keeper != address(0));\n        keeper = _keeper;\n        emit UpdatedKeeper(_keeper);\n    }\n\n    /**\n     * @notice\n     *  Used to change `rewards`. EOA or smart contract which has the permission\n     *  to pull rewards from the vault.\n     *\n     *  This may only be called by the strategist.\n     * @param _rewards The address to use for pulling rewards.\n     */\n    function setRewards(address _rewards) external onlyStrategist {\n        require(_rewards != address(0));\n        vault.approve(rewards, 0);\n        rewards = _rewards;\n        vault.approve(rewards, uint256(-1));\n        emit UpdatedRewards(_rewards);\n    }\n\n    /**\n     * @notice\n     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\n     *  of blocks that should pass for `harvest()` to be called.\n     *\n     *  For external keepers (such as the Keep3r network), this is the minimum\n     *  time between jobs to wait. (see `harvestTrigger()`\n     *  for more details.)\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _delay The minimum number of seconds to wait between harvests.\n     */\n    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\n        minReportDelay = _delay;\n        emit UpdatedMinReportDelay(_delay);\n    }\n\n    /**\n     * @notice\n     *  Used to change `maxReportDelay`. `maxReportDelay` is the maximum number\n     *  of blocks that should pass for `harvest()` to be called.\n     *\n     *  For external keepers (such as the Keep3r network), this is the maximum\n     *  time between jobs to wait. (see `harvestTrigger()`\n     *  for more details.)\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _delay The maximum number of seconds to wait between harvests.\n     */\n    function setMaxReportDelay(uint256 _delay) external onlyAuthorized {\n        maxReportDelay = _delay;\n        emit UpdatedMaxReportDelay(_delay);\n    }\n\n    /**\n     * @notice\n     *  Used to change `profitFactor`. `profitFactor` is used to determine\n     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\n     *  for more details.)\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _profitFactor A ratio to multiply anticipated\n     * `harvest()` gas cost against.\n     */\n    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\n        profitFactor = _profitFactor;\n        emit UpdatedProfitFactor(_profitFactor);\n    }\n\n    /**\n     * @notice\n     *  Sets how far the Strategy can go into loss without a harvest and report\n     *  being required.\n     *\n     *  By default this is 0, meaning any losses would cause a harvest which\n     *  will subsequently report the loss to the Vault for tracking. (See\n     *  `harvestTrigger()` for more details.)\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _debtThreshold How big of a loss this Strategy may carry without\n     * being required to report to the Vault.\n     */\n    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\n        debtThreshold = _debtThreshold;\n        emit UpdatedDebtThreshold(_debtThreshold);\n    }\n\n    /**\n     * @notice\n     *  Used to change `metadataURI`. `metadataURI` is used to store the URI\n     * of the file describing the strategy.\n     *\n     *  This may only be called by governance or the strategist.\n     * @param _metadataURI The URI that describe the strategy.\n     */\n    function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {\n        metadataURI = _metadataURI;\n        emit UpdatedMetadataURI(_metadataURI);\n    }\n\n    /**\n     * Resolve governance address from Vault contract, used to make assertions\n     * on protected functions in the Strategy.\n     */\n    function governance() internal view returns (address) {\n        return vault.governance();\n    }\n\n    /**\n     * @notice\n     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)\n     *  to `want` (using the native decimal characteristics of `want`).\n     * @dev\n     *  Care must be taken when working with decimals to assure that the conversion\n     *  is compatible. As an example:\n     *\n     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),\n     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)\n     *\n     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`\n     * @return The amount in `want` of `_amtInEth` converted to `want`\n     **/\n    function ethToWant(uint256 _amtInWei) public view virtual returns (uint256);\n\n    /**\n     * @notice\n     *  Provide an accurate estimate for the total amount of assets\n     *  (principle + return) that this Strategy is currently managing,\n     *  denominated in terms of `want` tokens.\n     *\n     *  This total should be \"realizable\" e.g. the total value that could\n     *  *actually* be obtained from this Strategy if it were to divest its\n     *  entire position based on current on-chain conditions.\n     * @dev\n     *  Care must be taken in using this function, since it relies on external\n     *  systems, which could be manipulated by the attacker to give an inflated\n     *  (or reduced) value produced by this function, based on current on-chain\n     *  conditions (e.g. this function is possible to influence through\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\n     *  mechanisms).\n     *\n     *  It is up to governance to use this function to correctly order this\n     *  Strategy relative to its peers in the withdrawal queue to minimize\n     *  losses for the Vault based on sudden withdrawals. This value should be\n     *  higher than the total debt of the Strategy and higher than its expected\n     *  value to be \"safe\".\n     * @return The estimated total assets in this Strategy.\n     */\n    function estimatedTotalAssets() public view virtual returns (uint256);\n\n    /*\n     * @notice\n     *  Provide an indication of whether this strategy is currently \"active\"\n     *  in that it is managing an active position, or will manage a position in\n     *  the future. This should correlate to `harvest()` activity, so that Harvest\n     *  events can be tracked externally by indexing agents.\n     * @return True if the strategy is actively managing a position.\n     */\n    function isActive() public view returns (bool) {\n        return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;\n    }\n\n    /**\n     * Perform any Strategy unwinding or other calls necessary to capture the\n     * \"free return\" this Strategy has generated since the last time its core\n     * position(s) were adjusted. Examples include unwrapping extra rewards.\n     * This call is only used during \"normal operation\" of a Strategy, and\n     * should be optimized to minimize losses as much as possible.\n     *\n     * This method returns any realized profits and/or realized losses\n     * incurred, and should return the total amounts of profits/losses/debt\n     * payments (in `want` tokens) for the Vault's accounting (e.g.\n     * `want.balanceOf(this) >= _debtPayment + _profit`).\n     *\n     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\n     * debt limit, otherwise its value will be how far past the debt limit\n     * the Strategy is. The Strategy's debt limit is configured in the Vault.\n     *\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\n     *       It is okay for it to be less than `_debtOutstanding`, as that\n     *       should only used as a guide for how much is left to pay back.\n     *       Payments should be made to minimize loss from slippage, debt,\n     *       withdrawal fees, etc.\n     *\n     * See `vault.debtOutstanding()`.\n     */\n    function prepareReturn(uint256 _debtOutstanding)\n        internal\n        virtual\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _debtPayment\n        );\n\n    /**\n     * Perform any adjustments to the core position(s) of this Strategy given\n     * what change the Vault made in the \"investable capital\" available to the\n     * Strategy. Note that all \"free capital\" in the Strategy after the report\n     * was made is available for reinvestment. Also note that this number\n     * could be 0, and you should handle that scenario accordingly.\n     *\n     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\n     */\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\n\n    /**\n     * Liquidate up to `_amountNeeded` of `want` of this strategy's positions,\n     * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.\n     * This function should return the amount of `want` tokens made available by the\n     * liquidation. If there is a difference between them, `_loss` indicates whether the\n     * difference is due to a realized loss, or if there is some other sitution at play\n     * (e.g. locked funds) where the amount made available is less than what is needed.\n     *\n     * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\n     */\n    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _liquidatedAmount, uint256 _loss);\n\n    /**\n     * Liquidate everything and returns the amount that got freed.\n     * This function is used during emergency exit instead of `prepareReturn()` to\n     * liquidate all of the Strategy's positions back to the Vault.\n     */\n\n    function liquidateAllPositions() internal virtual returns (uint256 _amountFreed);\n\n    /**\n     * @notice\n     *  Provide a signal to the keeper that `tend()` should be called. The\n     *  keeper will provide the estimated gas cost that they would pay to call\n     *  `tend()`, and this function should use that estimate to make a\n     *  determination if calling it is \"worth it\" for the keeper. This is not\n     *  the only consideration into issuing this trigger, for example if the\n     *  position would be negatively affected if `tend()` is not called\n     *  shortly, then this can return `true` even if the keeper might be\n     *  \"at a loss\" (keepers are always reimbursed by Yearn).\n     * @dev\n     *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).\n     *\n     *  This call and `harvestTrigger()` should never return `true` at the same\n     *  time.\n     * @param callCostInWei The keeper's estimated gas cost to call `tend()` (in wei).\n     * @return `true` if `tend()` should be called, `false` otherwise.\n     */\n    function tendTrigger(uint256 callCostInWei) public view virtual returns (bool) {\n        // We usually don't need tend, but if there are positions that need\n        // active maintainence, overriding this function is how you would\n        // signal for that.\n        // If your implementation uses the cost of the call in want, you can\n        // use uint256 callCost = ethToWant(callCostInWei);\n\n        return false;\n    }\n\n    /**\n     * @notice\n     *  Adjust the Strategy's position. The purpose of tending isn't to\n     *  realize gains, but to maximize yield by reinvesting any returns.\n     *\n     *  See comments on `adjustPosition()`.\n     *\n     *  This may only be called by governance, the strategist, or the keeper.\n     */\n    function tend() external onlyKeepers {\n        // Don't take profits with this call, but adjust for better gains\n        adjustPosition(vault.debtOutstanding());\n    }\n\n    /**\n     * @notice\n     *  Provide a signal to the keeper that `harvest()` should be called. The\n     *  keeper will provide the estimated gas cost that they would pay to call\n     *  `harvest()`, and this function should use that estimate to make a\n     *  determination if calling it is \"worth it\" for the keeper. This is not\n     *  the only consideration into issuing this trigger, for example if the\n     *  position would be negatively affected if `harvest()` is not called\n     *  shortly, then this can return `true` even if the keeper might be \"at a\n     *  loss\" (keepers are always reimbursed by Yearn).\n     * @dev\n     *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).\n     *\n     *  This call and `tendTrigger` should never return `true` at the\n     *  same time.\n     *\n     *  See `min/maxReportDelay`, `profitFactor`, `debtThreshold` to adjust the\n     *  strategist-controlled parameters that will influence whether this call\n     *  returns `true` or not. These parameters will be used in conjunction\n     *  with the parameters reported to the Vault (see `params`) to determine\n     *  if calling `harvest()` is merited.\n     *\n     *  It is expected that an external system will check `harvestTrigger()`.\n     *  This could be a script run off a desktop or cloud bot (e.g.\n     *  https://github.com/iearn-finance/yearn-vaults/blob/main/scripts/keep.py),\n     *  or via an integration with the Keep3r network (e.g.\n     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\n     * @param callCostInWei The keeper's estimated gas cost to call `harvest()` (in wei).\n     * @return `true` if `harvest()` should be called, `false` otherwise.\n     */\n    function harvestTrigger(uint256 callCostInWei) public view virtual returns (bool) {\n        uint256 callCost = ethToWant(callCostInWei);\n        StrategyParams memory params = vault.strategies(address(this));\n\n        // Should not trigger if Strategy is not activated\n        if (params.activation == 0) return false;\n\n        // Should not trigger if we haven't waited long enough since previous harvest\n        if (block.timestamp.sub(params.lastReport) < minReportDelay) return false;\n\n        // Should trigger if hasn't been called in a while\n        if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;\n\n        // If some amount is owed, pay it back\n        // NOTE: Since debt is based on deposits, it makes sense to guard against large\n        //       changes to the value from triggering a harvest directly through user\n        //       behavior. This should ensure reasonable resistance to manipulation\n        //       from user-initiated withdrawals as the outstanding debt fluctuates.\n        uint256 outstanding = vault.debtOutstanding();\n        if (outstanding > debtThreshold) return true;\n\n        // Check for profits and losses\n        uint256 total = estimatedTotalAssets();\n        // Trigger if we have a loss to report\n        if (total.add(debtThreshold) < params.totalDebt) return true;\n\n        uint256 profit = 0;\n        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\n\n        // Otherwise, only trigger if it \"makes sense\" economically (gas cost\n        // is <N% of value moved)\n        uint256 credit = vault.creditAvailable();\n        return (profitFactor.mul(callCost) < credit.add(profit));\n    }\n\n    /**\n     * @notice\n     *  Harvests the Strategy, recognizing any profits or losses and adjusting\n     *  the Strategy's position.\n     *\n     *  In the rare case the Strategy is in emergency shutdown, this will exit\n     *  the Strategy's position.\n     *\n     *  This may only be called by governance, the strategist, or the keeper.\n     * @dev\n     *  When `harvest()` is called, the Strategy reports to the Vault (via\n     *  `vault.report()`), so in some cases `harvest()` must be called in order\n     *  to take in profits, to borrow newly available funds from the Vault, or\n     *  otherwise adjust its position. In other cases `harvest()` must be\n     *  called to report to the Vault on the Strategy's position, especially if\n     *  any losses have occurred.\n     */\n    function harvest() external onlyKeepers {\n        uint256 profit = 0;\n        uint256 loss = 0;\n        uint256 debtOutstanding = vault.debtOutstanding();\n        uint256 debtPayment = 0;\n        if (emergencyExit) {\n            // Free up as much capital as possible\n            uint256 amountFreed = liquidateAllPositions();\n            if (amountFreed < debtOutstanding) {\n                loss = debtOutstanding.sub(amountFreed);\n            } else if (amountFreed > debtOutstanding) {\n                profit = amountFreed.sub(debtOutstanding);\n            }\n            debtPayment = debtOutstanding.sub(loss);\n        } else {\n            // Free up returns for Vault to pull\n            (profit, loss, debtPayment) = prepareReturn(debtOutstanding);\n        }\n\n        // Allow Vault to take up to the \"harvested\" balance of this contract,\n        // which is the amount it has earned since the last time it reported to\n        // the Vault.\n        uint256 totalDebt = vault.strategies(address(this)).totalDebt;\n        debtOutstanding = vault.report(profit, loss, debtPayment);\n\n        // Check if free returns are left, and re-invest them\n        adjustPosition(debtOutstanding);\n\n        // call healthCheck contract\n        if (doHealthCheck && healthCheck != address(0)) {\n            require(HealthCheck(healthCheck).check(profit, loss, debtPayment, debtOutstanding, totalDebt), \"!healthcheck\");\n        } else {\n            doHealthCheck = true;\n        }\n\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\n    }\n\n    /**\n     * @notice\n     *  Withdraws `_amountNeeded` to `vault`.\n     *\n     *  This may only be called by the Vault.\n     * @param _amountNeeded How much `want` to withdraw.\n     * @return _loss Any realized losses\n     */\n    function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {\n        require(msg.sender == address(vault), \"!vault\");\n        // Liquidate as much as possible to `want`, up to `_amountNeeded`\n        uint256 amountFreed;\n        (amountFreed, _loss) = liquidatePosition(_amountNeeded);\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\n        want.safeTransfer(msg.sender, amountFreed);\n        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\n    }\n\n    /**\n     * Do anything necessary to prepare this Strategy for migration, such as\n     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\n     * value.\n     */\n    function prepareMigration(address _newStrategy) internal virtual;\n\n    /**\n     * @notice\n     *  Transfers all `want` from this Strategy to `_newStrategy`.\n     *\n     *  This may only be called by the Vault.\n     * @dev\n     * The new Strategy's Vault must be the same as this Strategy's Vault.\n     *  The migration process should be carefully performed to make sure all\n     * the assets are migrated to the new address, which should have never\n     * interacted with the vault before.\n     * @param _newStrategy The Strategy to migrate to.\n     */\n    function migrate(address _newStrategy) external {\n        require(msg.sender == address(vault));\n        require(BaseStrategy(_newStrategy).vault() == vault);\n        prepareMigration(_newStrategy);\n        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice\n     *  Activates emergency exit. Once activated, the Strategy will exit its\n     *  position upon the next harvest, depositing all funds into the Vault as\n     *  quickly as is reasonable given on-chain conditions.\n     *\n     *  This may only be called by governance or the strategist.\n     * @dev\n     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\n     */\n    function setEmergencyExit() external onlyEmergencyAuthorized {\n        emergencyExit = true;\n        vault.revokeStrategy();\n\n        emit EmergencyExitEnabled();\n    }\n\n    /**\n     * Override this to add all tokens/tokenized positions this contract\n     * manages on a *persistent* basis (e.g. not just for swapping back to\n     * want ephemerally).\n     *\n     * NOTE: Do *not* include `want`, already included in `sweep` below.\n     *\n     * Example:\n     * ```\n     *    function protectedTokens() internal override view returns (address[] memory) {\n     *      address[] memory protected = new address[](3);\n     *      protected[0] = tokenA;\n     *      protected[1] = tokenB;\n     *      protected[2] = tokenC;\n     *      return protected;\n     *    }\n     * ```\n     */\n    function protectedTokens() internal view virtual returns (address[] memory);\n\n    /**\n     * @notice\n     *  Removes tokens from this Strategy that are not the type of tokens\n     *  managed by this Strategy. This may be used in case of accidentally\n     *  sending the wrong kind of token to this Strategy.\n     *\n     *  Tokens will be sent to `governance()`.\n     *\n     *  This will fail if an attempt is made to sweep `want`, or any tokens\n     *  that are protected by this Strategy.\n     *\n     *  This may only be called by governance.\n     * @dev\n     *  Implement `protectedTokens()` to specify any additional tokens that\n     *  should be protected from sweeping in addition to `want`.\n     * @param _token The token to transfer out of this vault.\n     */\n    function sweep(address _token) external onlyGovernance {\n        require(_token != address(want), \"!want\");\n        require(_token != address(vault), \"!shares\");\n\n        address[] memory _protectedTokens = protectedTokens();\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \"!protected\");\n\n        IERC20(_token).safeTransfer(governance(), IERC20(_token).balanceOf(address(this)));\n    }\n}\n\n// Part: StrategyCurveBase\n\nabstract contract StrategyCurveBase is BaseStrategy {\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint256;\n\n    /* ========== STATE VARIABLES ========== */\n    // these should stay the same across different wants.\n\n    // curve infrastructure contracts\n    ICurveStrategyProxy public proxy; // Below we set it to Yearn's Updated v4 StrategyProxy\n    ICurveFi public curve; // Curve Pool, need this for depositing into our curve pool\n    address public gauge; // Curve gauge contract, most are tokenized, held by Yearn's voter\n\n    // keepCRV stuff\n    uint256 public keepCRV; // the percentage of CRV we re-lock for boost (in basis points)\n    uint256 internal constant FEE_DENOMINATOR = 10000; // this means all of our fee values are in bips\n    address public constant voter = 0xF147b8125d2ef93FB6965Db97D6746952a133934; // Yearn's veCRV voter\n\n    // swap stuff\n    address internal constant sushiswap =\n        0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F; // default to sushiswap, more CRV liquidity there\n    address[] public crvPath;\n\n    IERC20 internal constant crv =\n        IERC20(0xD533a949740bb3306d119CC777fa900bA034cd52);\n    IERC20 internal constant weth =\n        IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\n    string internal stratName; // set our strategy name here\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(address _vault) public BaseStrategy(_vault) {}\n\n    /* ========== VIEWS ========== */\n\n    function name() external view override returns (string memory) {\n        return stratName;\n    }\n\n    function stakedBalance() public view returns (uint256) {\n        return proxy.balanceOf(gauge);\n    }\n\n    function balanceOfWant() public view returns (uint256) {\n        return want.balanceOf(address(this));\n    }\n\n    function estimatedTotalAssets() public view override returns (uint256) {\n        return balanceOfWant().add(stakedBalance());\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n    // these should stay the same across different wants.\n\n    function liquidatePosition(uint256 _amountNeeded)\n        internal\n        override\n        returns (uint256 _liquidatedAmount, uint256 _loss)\n    {\n        uint256 _wantBal = balanceOfWant();\n        if (_amountNeeded > _wantBal) {\n            // check if we have enough free funds to cover the withdrawal\n            uint256 _stakedBal = stakedBalance();\n            if (_stakedBal > 0) {\n                proxy.withdraw(\n                    gauge,\n                    address(want),\n                    Math.min(_stakedBal, _amountNeeded.sub(_wantBal))\n                );\n            }\n            uint256 _withdrawnBal = balanceOfWant();\n            _liquidatedAmount = Math.min(_amountNeeded, _withdrawnBal);\n            _loss = _amountNeeded.sub(_liquidatedAmount);\n        } else {\n            // we have enough balance to cover the liquidation available\n            return (_amountNeeded, 0);\n        }\n    }\n\n    // fire sale, get rid of it all!\n    function liquidateAllPositions() internal override returns (uint256) {\n        uint256 _stakedBal = stakedBalance();\n        if (_stakedBal > 0) {\n            // don't bother withdrawing zero\n            proxy.withdraw(gauge, address(want), _stakedBal);\n        }\n        return balanceOfWant();\n    }\n\n    function protectedTokens()\n        internal\n        view\n        override\n        returns (address[] memory)\n    {}\n\n    /* ========== SETTERS ========== */\n\n    // These functions are useful for setting parameters of the strategy that may need to be adjusted.\n\n    // Use to update Yearn's StrategyProxy contract as needed in case of upgrades.\n    function setProxy(address _proxy) external onlyGovernance {\n        proxy = ICurveStrategyProxy(_proxy);\n    }\n\n    // Set the amount of CRV to be locked in Yearn's veCRV voter from each harvest. Default is 10%.\n    function setKeepCRV(uint256 _keepCRV) external onlyAuthorized {\n        require(_keepCRV <= 10_000);\n        keepCRV = _keepCRV;\n    }\n}\n\n// File: StrategyCurveFixedForexClonable.sol\n\ncontract StrategyCurveFixedForexClonable is StrategyCurveBase {\n    /* ========== STATE VARIABLES ========== */\n    // these will likely change across different wants.\n\n    // synthetix stuff\n    IReadProxy public sTokenProxy; // this is the proxy for our synthetix token\n    IERC20 internal constant sethProxy =\n        IERC20(0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb); // this is the proxy for sETH\n    IReadProxy internal constant readProxy =\n        IReadProxy(0x4E3b31eB0E5CB73641EE1E65E7dCEFe520bA3ef2);\n\n    ISystemStatus internal constant systemStatus =\n        ISystemStatus(0x1c86B3CDF2a60Ae3a574f7f71d44E2C50BDdB87E); // this is how we check if our market is closed\n\n    bytes32 public synthCurrencyKey;\n    bytes32 internal constant sethCurrencyKey = \"sETH\";\n\n    bytes32 internal constant TRACKING_CODE = \"YEARN\"; // this is our referral code for SNX volume incentives\n    bytes32 internal constant CONTRACT_SYNTHETIX = \"Synthetix\";\n    bytes32 internal constant CONTRACT_EXCHANGER = \"Exchanger\";\n\n    // swap stuff\n    address internal constant uniswapv3 =\n        address(0xE592427A0AEce92De3Edee1F18E0157C05861564);\n    bool public sellOnSushi; // determine if we sell partially on sushi or all on Uni v3\n    bool internal harvestNow; // this tells us if we're currently harvesting or tending\n    uint24 public uniCrvFee; // this is equal to 1%, can change this later if a different path becomes more optimal\n    uint256 public lastTendTime; // this is the timestamp that our last tend was called\n    uint256 public maxGasPrice; // this is the max gas price we want our keepers to pay for harvests/tends in gwei\n\n    // check for cloning\n    bool internal isOriginal = true;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        address _vault,\n        address _curvePool,\n        address _gauge,\n        address _sTokenProxy,\n        string memory _name\n    ) public StrategyCurveBase(_vault) {\n        _initializeStrat(_curvePool, _gauge, _sTokenProxy, _name);\n    }\n\n    /* ========== CLONING ========== */\n\n    event Cloned(address indexed clone);\n\n    // we use this to clone our original strategy to other vaults\n    function cloneCurveibFF(\n        address _vault,\n        address _strategist,\n        address _rewards,\n        address _keeper,\n        address _curvePool,\n        address _gauge,\n        address _sTokenProxy,\n        string memory _name\n    ) external returns (address newStrategy) {\n        require(isOriginal);\n        // Copied from https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol\n        bytes20 addressBytes = bytes20(address(this));\n        assembly {\n            // EIP-1167 bytecode\n            let clone_code := mload(0x40)\n            mstore(\n                clone_code,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(clone_code, 0x14), addressBytes)\n            mstore(\n                add(clone_code, 0x28),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n            newStrategy := create(0, clone_code, 0x37)\n        }\n\n        StrategyCurveFixedForexClonable(newStrategy).initialize(\n            _vault,\n            _strategist,\n            _rewards,\n            _keeper,\n            _curvePool,\n            _gauge,\n            _sTokenProxy,\n            _name\n        );\n\n        emit Cloned(newStrategy);\n    }\n\n    // this will only be called by the clone function above\n    function initialize(\n        address _vault,\n        address _strategist,\n        address _rewards,\n        address _keeper,\n        address _curvePool,\n        address _gauge,\n        address _sTokenProxy,\n        string memory _name\n    ) public {\n        _initialize(_vault, _strategist, _rewards, _keeper);\n        _initializeStrat(_curvePool, _gauge, _sTokenProxy, _name);\n    }\n\n    // this is called by our original strategy, as well as any clones\n    function _initializeStrat(\n        address _curvePool,\n        address _gauge,\n        address _sTokenProxy,\n        string memory _name\n    ) internal {\n        // You can set these parameters on deployment to whatever you want\n        maxReportDelay = 7 days; // 7 days in seconds\n        debtThreshold = 5 * 1e18; // we shouldn't ever have debt, but set a bit of a buffer\n        profitFactor = 1_000_000; // in this strategy, profitFactor is only used for telling keep3rs when to move funds from vault to strategy\n        healthCheck = 0xDDCea799fF1699e98EDF118e0629A974Df7DF012; // health.ychad.eth\n\n        // need to set our proxy again when cloning since it's not a constant\n        proxy = ICurveStrategyProxy(0xA420A63BbEFfbda3B147d0585F1852C358e2C152);\n\n        // these are our standard approvals for swaps. want = Curve LP token\n        want.approve(address(proxy), type(uint256).max);\n        crv.approve(sushiswap, type(uint256).max);\n        crv.approve(uniswapv3, type(uint256).max);\n        weth.approve(uniswapv3, type(uint256).max);\n\n        // set our keepCRV\n        keepCRV = 1000;\n\n        // set our fee for univ3 pool\n        uniCrvFee = 10000;\n\n        // this is the pool specific to this vault, used for depositing\n        curve = ICurveFi(_curvePool);\n\n        // set our curve gauge contract\n        gauge = address(_gauge);\n\n        // set our strategy's name\n        stratName = _name;\n\n        // start off using sushi\n        sellOnSushi = true;\n\n        // set our token to swap for and deposit with\n        sTokenProxy = IReadProxy(_sTokenProxy);\n\n        // these are our approvals and path specific to this contract\n        sTokenProxy.approve(address(curve), type(uint256).max);\n\n        // crv token path\n        crvPath = [address(crv), address(weth)];\n\n        // set our synth currency key\n        synthCurrencyKey = ISynth(IReadProxy(_sTokenProxy).target())\n            .currencyKey();\n\n        // set our last tend time to the deployment block\n        lastTendTime = block.timestamp;\n\n        // set our max gas price\n        maxGasPrice = 100 * 1e9;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n    // these will likely change across different wants.\n\n    function prepareReturn(uint256 _debtOutstanding)\n        internal\n        override\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _debtPayment\n        )\n    {\n        // turn on our toggle for harvests\n        harvestNow = true;\n\n        // deposit our sToken to Curve if we have any and if our trade has finalized\n        uint256 _sTokenProxyBalance = sTokenProxy.balanceOf(address(this));\n        if (_sTokenProxyBalance > 0 && checkWaitingPeriod()) {\n            curve.add_liquidity([0, _sTokenProxyBalance], 0);\n        }\n\n        // debtOustanding will only be > 0 in the event of revoking or if we need to rebalance from a withdrawal or lowering the debtRatio\n        if (_debtOutstanding > 0) {\n            uint256 _stakedBal = stakedBalance();\n            if (_stakedBal > 0) {\n                // don't bother withdrawing if we don't have staked funds\n                proxy.withdraw(\n                    gauge,\n                    address(want),\n                    Math.min(_stakedBal, _debtOutstanding)\n                );\n            }\n            uint256 _withdrawnBal = balanceOfWant();\n            _debtPayment = Math.min(_debtOutstanding, _withdrawnBal);\n        }\n        // serious loss should never happen, but if it does (for instance, if Curve is hacked), let's record it accurately\n        uint256 assets = estimatedTotalAssets();\n        uint256 debt = vault.strategies(address(this)).totalDebt;\n\n        // if assets are greater than debt, things are working great!\n        if (assets > debt) {\n            _profit = assets.sub(debt);\n            uint256 _wantBal = balanceOfWant();\n            if (_profit.add(_debtPayment) > _wantBal) {\n                // this should only be hit following donations to strategy\n                liquidateAllPositions();\n            }\n        }\n        // if assets are less than debt, we are in trouble\n        else {\n            _loss = debt.sub(assets);\n        }\n    }\n\n    function adjustPosition(uint256 _debtOutstanding) internal override {\n        if (emergencyExit) {\n            return;\n        }\n        if (harvestNow) {\n            // this is a part of a harvest call\n            // Send all of our LP tokens to the proxy and deposit to the gauge if we have any\n            uint256 _toInvest = balanceOfWant();\n            if (_toInvest > 0) {\n                want.safeTransfer(address(proxy), _toInvest);\n                proxy.deposit(gauge, address(want));\n            }\n            // we're done with our harvest, so we turn our toggle back to false\n            harvestNow = false;\n        } else {\n            // this is our tend call\n            claimAndSell();\n\n            // update our variable for tracking last tend time\n            lastTendTime = block.timestamp;\n        }\n    }\n\n    // sell from CRV into WETH via sushiswap, then sell WETH for sETH on Uni v3\n    function _sellOnSushiFirst(uint256 _amount) internal {\n        IUniswapV2Router02(sushiswap).swapExactTokensForTokens(\n            _amount,\n            uint256(0),\n            crvPath,\n            address(this),\n            block.timestamp\n        );\n\n        uint256 _wethBalance = weth.balanceOf(address(this));\n        IUniV3(uniswapv3).exactInput(\n            IUniV3.ExactInputParams(\n                abi.encodePacked(\n                    address(weth),\n                    uint24(500),\n                    address(sethProxy)\n                ),\n                address(this),\n                block.timestamp,\n                _wethBalance,\n                uint256(1)\n            )\n        );\n    }\n\n    // Sells our CRV for sETH all on uni v3\n    function _sellOnUniOnly(uint256 _amount) internal {\n        IUniV3(uniswapv3).exactInput(\n            IUniV3.ExactInputParams(\n                abi.encodePacked(\n                    address(crv),\n                    uint24(uniCrvFee),\n                    address(weth),\n                    uint24(500),\n                    address(sethProxy)\n                ),\n                address(this),\n                block.timestamp,\n                _amount,\n                uint256(1)\n            )\n        );\n    }\n\n    function prepareMigration(address _newStrategy) internal override {\n        uint256 _stakedBal = stakedBalance();\n        if (_stakedBal > 0) {\n            proxy.withdraw(gauge, address(want), _stakedBal);\n        }\n        sethProxy.safeTransfer(\n            _newStrategy,\n            sethProxy.balanceOf(address(this))\n        );\n    }\n\n    /* ========== KEEP3RS ========== */\n\n    function harvestTrigger(uint256 callCostinEth)\n        public\n        view\n        override\n        returns (bool)\n    {\n        // check if the 5-minute lock has elapsed yet\n        if (!checkWaitingPeriod()) {\n            return false;\n        }\n\n        // check if the base fee gas price is higher than we allow\n        if (readBaseFee() > maxGasPrice) {\n            return false;\n        }\n\n        // Should not trigger if strategy is not active (no assets and no debtRatio). This means we don't need to adjust keeper job.\n        if (!isActive()) {\n            return false;\n        }\n\n        return super.harvestTrigger(callCostinEth);\n    }\n\n    function tendTrigger(uint256 callCostinEth)\n        public\n        view\n        override\n        returns (bool)\n    {\n        // Should not trigger if strategy is not active (no assets and no debtRatio). This means we don't need to adjust keeper job.\n        if (!isActive()) {\n            return false;\n        }\n\n        // check if the base fee gas price is higher than we allow\n        if (readBaseFee() > maxGasPrice) {\n            return false;\n        }\n\n        // Should trigger if hasn't been called in a while. Running this based on harvest even though this is a tend call since a harvest should run ~5 mins after every tend.\n        if (block.timestamp.sub(lastTendTime) >= maxReportDelay) return true;\n    }\n\n    // convert our keeper's eth cost into want (not applicable, and synths are a pain to swap for, so we removed it)\n    function ethToWant(uint256 _ethAmount)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _ethAmount;\n    }\n\n    function readBaseFee() internal view returns (uint256 baseFee) {\n        IBaseFee _baseFeeOracle =\n            IBaseFee(0xf8d0Ec04e94296773cE20eFbeeA82e76220cD549);\n        return _baseFeeOracle.basefee_global();\n    }\n\n    /* ========== SYNTHETIX ========== */\n\n    // claim and swap our CRV for synths\n    function claimAndSell() internal {\n        // if we have anything in the gauge, then harvest CRV from the gauge\n        uint256 _stakedBal = stakedBalance();\n        if (_stakedBal > 0) {\n            proxy.harvest(gauge);\n            uint256 _crvBalance = crv.balanceOf(address(this));\n            // if we claimed any CRV, then sell it\n            if (_crvBalance > 0) {\n                // keep some of our CRV to increase our boost\n                uint256 _sendToVoter =\n                    _crvBalance.mul(keepCRV).div(FEE_DENOMINATOR);\n                if (_sendToVoter > 0) {\n                    crv.safeTransfer(voter, _sendToVoter);\n                }\n                uint256 _crvRemainder = _crvBalance.sub(_sendToVoter);\n\n                // sell the rest of our CRV for sETH\n                if (_crvRemainder > 0) {\n                    if (sellOnSushi) {\n                        _sellOnSushiFirst(_crvRemainder);\n                    } else {\n                        _sellOnUniOnly(_crvRemainder);\n                    }\n                }\n\n                // check our output balance of sETH\n                uint256 _sEthBalance = sethProxy.balanceOf(address(this));\n\n                // swap our sETH for our underlying synth if the forex markets are open\n                if (!isMarketClosed()) {\n                    // this check allows us to still tend even if forex markets are closed.\n                    exchangeSEthToSynth(_sEthBalance);\n                }\n            }\n        }\n    }\n\n    function exchangeSEthToSynth(uint256 amount) internal returns (uint256) {\n        // swap amount of sETH for Synth\n        if (amount == 0) {\n            return 0;\n        }\n\n        return\n            _synthetix().exchangeWithTracking(\n                sethCurrencyKey,\n                amount,\n                synthCurrencyKey,\n                address(this),\n                TRACKING_CODE\n            );\n    }\n\n    function _synthetix() internal view returns (ISynthetix) {\n        return ISynthetix(resolver().getAddress(CONTRACT_SYNTHETIX));\n    }\n\n    function resolver() internal view returns (IAddressResolver) {\n        return IAddressResolver(readProxy.target());\n    }\n\n    function _exchanger() internal view returns (IExchanger) {\n        return IExchanger(resolver().getAddress(CONTRACT_EXCHANGER));\n    }\n\n    function checkWaitingPeriod() internal view returns (bool freeToMove) {\n        return\n            // check if it's been >5 mins since we traded our sETH for our synth\n            _exchanger().maxSecsLeftInWaitingPeriod(\n                address(this),\n                synthCurrencyKey\n            ) == 0;\n    }\n\n    function isMarketClosed() public view returns (bool) {\n        // set up our arrays to use\n        bool[] memory tradingSuspended;\n        bytes32[] memory synthArray;\n\n        // use our synth key\n        synthArray = new bytes32[](1);\n        synthArray[0] = synthCurrencyKey;\n\n        // check if trading is open or not. true = market is closed\n        (tradingSuspended, ) = systemStatus.getSynthExchangeSuspensions(\n            synthArray\n        );\n        return tradingSuspended[0];\n    }\n\n    /* ========== SETTERS ========== */\n\n    // set the maximum gas price we want to pay for a harvest/tend in gwei\n    function setGasPrice(uint256 _maxGasPrice) external onlyAuthorized {\n        maxGasPrice = _maxGasPrice.mul(1e9);\n    }\n\n    // set the fee pool we'd like to swap through for if we're swapping CRV on UniV3\n    function setUniCrvFee(uint24 _fee) external onlyAuthorized {\n        uniCrvFee = _fee;\n    }\n\n    // set if we want to sell our swap partly on sushi or just uniV3\n    function setSellOnSushi(bool _sellOnSushi) external onlyAuthorized {\n        sellOnSushi = _sellOnSushi;\n    }\n}\n"}}}