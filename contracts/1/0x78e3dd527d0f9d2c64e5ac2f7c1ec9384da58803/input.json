{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"BSB_StakingSoftStakers.sol":{"content":"pragma solidity >=0.8.0;\n\n// SPDX-License-Identifier: BSD-3-Clause\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor()  {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\n\ninterface Token {\n    function transferFrom(address, address, uint) external returns (bool);\n    function transfer(address, uint) external returns (bool);\n}\n\ncontract BSB_StakingSoftStakers is Ownable {\n    using SafeMath for uint;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    \n    event RewardsTransferred(address holder, uint amount);\n    event RewardsRestaked(address holder, uint amount);\n    \n    /*\n    * @dev Token contract address\n    */\n    address public constant tokenDepositAddress = 0xA478A13242b64629bff309125770B69f75Bd77cb;\n    \n    /*\n    * @dev Reward rate 260.00% per year\n    */\n    uint public rewardRate = 26000;\n    uint public constant rewardInterval = 365 days;\n    \n    /*\n    * @dev Staking fee 1 percent\n    */\n    uint public constant stakingFeeRate = 100;\n    \n    /*\n    * @dev Unstaking fee 0.50 percent\n    */\n    uint public constant unstakingFeeRate = 50;\n    \n    /*\n    * @dev Unstaking possible after 30 days\n    */\n    uint public constant unstakeTime = 30 days;\n    \n    /*\n    * @dev Claiming possible every 10 days\n    */\n    uint public constant claimTime = 10 days;\n    \n    /*\n    * @dev Pool size \n    */\n    uint public constant maxPoolSize = 10000000000000000000000;\n    uint public availablePoolSize = 10000000000000000000000;\n    \n    /*\n    * @dev Total rewards\n    */\n    uint public constant totalRewards = 50000000000000000000000; \n    \n    uint public totalClaimedRewards = 0;\n    uint public totalDeposited = 0; // usar esta variable que no se usa!\n    bool public ended ;\n    \n    EnumerableSet.AddressSet private holders;\n    \n    mapping (address => uint) public depositedTokens;\n    mapping (address => uint) public maxDepositedTokens;\n    mapping (address => uint) public stakingTime; //used for the unstaking locktime\n    mapping (address => uint) public firstTime; //used for the APY boost\n    mapping (address => uint) public lastClaimedTime; //used for the claiming locktime\n    mapping (address => uint) public progressiveTime; //used for the claiming locktime\n    mapping (address => uint) public totalEarnedTokens;\n    \n    mapping (address => uint) public rewardEnded;\n    \n    /*\n    * @dev Progressive Unstaking\n    */\n    mapping (address => uint) public alreadyProgUnstaked; \n    mapping (address => uint) public amountPerInterval;\n    uint public number_intervals = 3;\n    uint public duration_interval = 20 days;\n    \n    /*\n    * @dev Incentive For Not Unstaking\n    */\n    uint extraAPY = 10400; // 2% extra weekly\n    \n    /*\n    * @dev Smart Capped Claiming\n    */\n    uint percent_claim = 1; // 20% of weekly rewards earned\n    mapping (address => uint) public unclaimed;\n    \n    uint public endTime;\n    \n    /* FUNCTIONS */\n    \n    /*\n    * @dev End the staking pool\n    */\n    function end() public onlyOwner returns (bool){\n        require(!ended, \"Staking already ended\");\n        address _aux;\n        \n        for(uint i = 0; i < holders.length(); i = i.add(1)){\n            _aux = holders.at(i);\n            rewardEnded[_aux] = getPendingRewards(_aux);\n            unclaimed[_aux] = 0;\n            stakingTime[_aux] = block.timestamp;\n            progressiveTime[_aux] = block.timestamp;\n            alreadyProgUnstaked[_aux] = 0;\n            amountPerInterval[_aux] = depositedTokens[_aux].div(number_intervals);\n        }\n        \n        ended = true;\n        endTime = block.timestamp;\n        return true;\n    }\n    \n    function getRewardsLeft() public view returns (uint){\n       \n        uint _res;\n        if(ended){\n            _res = 0;\n        }else{\n            uint totalPending;\n            for(uint i = 0; i < holders.length(); i = i.add(1)){\n                totalPending = totalPending.add(getPendingRewards(holders.at(i)));\n            }\n            if(totalRewards > totalClaimedRewards.add(totalPending)){\n                _res = totalRewards.sub(totalClaimedRewards).sub(totalPending);\n            }else{\n                _res = 0;\n            }\n            \n        }\n        \n        return _res;\n    }\n    \n    function updateAccount(address account, bool _restake, bool _withdraw) private returns (bool){\n        uint pendingDivs = getPendingRewards(account);\n        uint toSend = pendingDivs;\n        \n        if(depositedTokens[account].mul(percent_claim).div(100) < pendingDivs){\n            toSend = depositedTokens[account].mul(percent_claim).div(100);\n        }\n        \n        if (pendingDivs > 0) {\n            if(ended){ // claim o withdraw cuando ha terminado\n                if(!_withdraw){\n                     \n                    if(depositedTokens[account] == 0){\n                        \n                        if( maxDepositedTokens[account].mul(percent_claim).div(100) > pendingDivs ){\n                            toSend = pendingDivs;\n                        }else{\n                            toSend = maxDepositedTokens[account].mul(percent_claim).div(100);\n                        }\n                    }\n                     rewardEnded[account] = rewardEnded[account].sub(toSend);\n                     require(Token(tokenDepositAddress).transfer(account, toSend), \"Could not transfer tokens.\");\n                     totalEarnedTokens[account] = totalEarnedTokens[account].add(toSend);\n                     totalClaimedRewards = totalClaimedRewards.add(toSend);\n                }\n               \n            }else{\n                \n                if(_restake){ // deposit\n                    require(pendingDivs <= availablePoolSize, \"No spot available\");\n                    depositedTokens[account] = depositedTokens[account].add(pendingDivs);\n                    \n                    unclaimed[account] = 0;\n                    \n                    if(depositedTokens[account] > maxDepositedTokens[account]){\n                        maxDepositedTokens[account] = depositedTokens[account];\n                    } \n                    availablePoolSize = availablePoolSize.sub(pendingDivs);\n                    totalDeposited = totalDeposited.add(pendingDivs);\n                    totalEarnedTokens[account] = totalEarnedTokens[account].add(pendingDivs);\n                    totalClaimedRewards = totalClaimedRewards.add(pendingDivs);\n                }else if(_withdraw){ // withdraw\n                    unclaimed[account] = pendingDivs;\n                // claim\n                }else{ // does not have deposited tokens\n                    if(depositedTokens[account] == 0){\n                        \n                        if( maxDepositedTokens[account].mul(percent_claim).div(100) > pendingDivs ){\n                            toSend = pendingDivs;\n                        }else{\n                            toSend = maxDepositedTokens[account].mul(percent_claim).div(100);\n                        }\n                    }\n                    uint toUnclaimed = 0;\n                    uint subUnclaimed = 0;\n                    uint pendingWithoutUnclaimed = getOnlyPendingRewards(account);\n                    if(toSend > pendingWithoutUnclaimed){\n                        subUnclaimed = toSend.sub(pendingWithoutUnclaimed);\n                        toUnclaimed = 0;\n                    }else{\n                        toUnclaimed = pendingWithoutUnclaimed.sub(toSend);\n                        subUnclaimed = 0;\n                    }\n                \n                    unclaimed[account] = unclaimed[account].add(toUnclaimed).sub(subUnclaimed);\n                    require(Token(tokenDepositAddress).transfer(account, toSend), \"Could not transfer tokens.\");\n                    totalEarnedTokens[account] = totalEarnedTokens[account].add(toSend);\n                    totalClaimedRewards = totalClaimedRewards.add(toSend);\n                }\n            }    \n        }\n        lastClaimedTime[account] = block.timestamp;\n        return true;\n    }\n    \n    function getAPY(address _staker) public view returns(uint){\n        uint apy = rewardRate;\n        if(block.timestamp.sub(firstTime[_staker]) > unstakeTime && alreadyProgUnstaked[_staker] == 0 && !ended){\n            apy = apy.add(extraAPY);\n        }\n        return apy;\n    }\n    \n    function getPendingRewards(address _holder) public view returns (uint) { //getPendingRewards\n        if (!holders.contains(_holder)) return 0;\n        if (depositedTokens[_holder] == 0 && unclaimed[_holder] == 0 && !ended) return 0;\n        uint pendingDivs;\n        if(!ended){\n             uint timeDiff = block.timestamp.sub(lastClaimedTime[_holder]);\n             uint stakedAmount = depositedTokens[_holder];\n             \n             // Incentive For Not Unstaking\n             uint apy = getAPY(_holder);\n        \n             pendingDivs = stakedAmount\n                                .mul(apy) \n                                .mul(timeDiff)\n                                .div(rewardInterval)\n                                .div(1e4);\n                                \n             pendingDivs = pendingDivs.add(unclaimed[_holder]);\n            \n        }else{\n            pendingDivs = rewardEnded[_holder];\n        }\n       \n        return pendingDivs;\n    }\n    \n    function getOnlyPendingRewards(address _holder) internal view returns (uint) { // getPendingRewards without \"Unclaimed\"\n        if (!holders.contains(_holder)) return 0;\n        if (depositedTokens[_holder] == 0 || ended) return 0;\n        uint pendingDivs;\n        if(!ended){\n             uint timeDiff = block.timestamp.sub(lastClaimedTime[_holder]);\n             uint stakedAmount = depositedTokens[_holder];\n             \n             // Incentive For Not Unstaking\n             uint apy = getAPY(_holder);\n        \n             pendingDivs = stakedAmount\n                                .mul(apy) \n                                .mul(timeDiff)\n                                .div(rewardInterval)\n                                .div(1e4);\n            \n        }else{\n            pendingDivs = 0;\n        }\n       \n        return pendingDivs;\n    }\n    \n    function getNumberOfHolders() public view returns (uint) {\n        return holders.length();\n    }\n    \n    function deposit(uint amountToStake) public returns (bool){\n        require(!ended, \"Staking has ended\");\n        require(getRewardsLeft() > 0, \"No rewards left\");\n        require(amountToStake > 0, \"Cannot deposit 0 Tokens\");\n       \n        require(Token(tokenDepositAddress).transferFrom(msg.sender, address(this), amountToStake), \"Insufficient Token Allowance\");\n        \n        \n        require(updateAccount(msg.sender, true, false), \"Error updating account\");\n        \n        uint fee = amountToStake.mul(stakingFeeRate).div(1e4);\n        uint amountAfterFee = amountToStake.sub(fee);\n        require(amountAfterFee <= availablePoolSize, \"No space available\");\n        require(Token(tokenDepositAddress).transfer(owner, fee), \"Could not transfer deposit fee.\");\n        \n        depositedTokens[msg.sender] = depositedTokens[msg.sender].add(amountAfterFee);\n        if(depositedTokens[msg.sender] > maxDepositedTokens[msg.sender]){\n            maxDepositedTokens[msg.sender] = depositedTokens[msg.sender];\n        } \n        availablePoolSize = availablePoolSize.sub(amountAfterFee);\n        totalDeposited = totalDeposited.add(amountAfterFee);\n        \n        if (!holders.contains(msg.sender)) {\n            holders.add(msg.sender);\n            firstTime[msg.sender] = block.timestamp;\n            \n        }\n        \n        // Reset the Progressive Unstaking\n        amountPerInterval[msg.sender] = 0;\n        if(alreadyProgUnstaked[msg.sender] > 0){\n            firstTime[msg.sender] = block.timestamp;\n        } \n        \n        alreadyProgUnstaked[msg.sender] = 0;\n        \n        stakingTime[msg.sender] = block.timestamp;\n        return true;\n    }\n    \n    /*\n    * @dev Max amount withdrawable on basis on time\n    */\n    function getMaxAmountWithdrawable(address _staker) public view returns(uint){\n        uint _res = 0;\n        if(block.timestamp.sub(stakingTime[msg.sender]) < unstakeTime && !ended && alreadyProgUnstaked[_staker] == 0){\n            _res = 0;\n        }else if(alreadyProgUnstaked[_staker] == 0 && !ended){\n            \n            if(block.timestamp.sub(stakingTime[msg.sender]) > unstakeTime){\n                _res = depositedTokens[_staker].div(number_intervals);\n            }\n          \n        }else{\n            uint _time = progressiveTime[_staker];\n            \n            if(block.timestamp < _time.add(duration_interval)){\n                _res = 0;\n            }else{\n               \n                \n                uint _numIntervals = (block.timestamp.sub(_time)).div(duration_interval);\n                \n                if(_numIntervals == 0){\n                    return 0;\n                }\n                if(!ended){\n                    _numIntervals = _numIntervals.add(1);\n                }\n                \n                \n                if(_numIntervals > number_intervals){\n                    _numIntervals = number_intervals;\n                }\n                \n                if(_numIntervals.mul(amountPerInterval[_staker]) > alreadyProgUnstaked[_staker]){\n                    _res = _numIntervals.mul(amountPerInterval[_staker]).sub(alreadyProgUnstaked[_staker]);\n                }else{\n                    _res = 0;\n                }\n            }\n            \n            \n        }\n\n        return _res;\n    }\n    \n    /*\n    * @dev Progressive Unstaking (Second, third, fourth... Progressive withdraws)\n    */\n    function withdraw2(uint amountToWithdraw) public returns (bool){\n        require(holders.contains(msg.sender), \"Not a staker\");\n        require(amountToWithdraw <= getMaxAmountWithdrawable(msg.sender), \"Maximum reached\");\n        require(alreadyProgUnstaked[msg.sender] > 0 || ended, \"Use withdraw first\");\n        \n        alreadyProgUnstaked[msg.sender] = alreadyProgUnstaked[msg.sender].add(amountToWithdraw);\n        \n        uint fee = amountToWithdraw.mul(unstakingFeeRate).div(1e4);\n        uint amountAfterFee = amountToWithdraw.sub(fee);\n        \n        updateAccount(msg.sender, false, true);\n        \n        require(Token(tokenDepositAddress).transfer(owner, fee), \"Could not transfer withdraw fee.\");\n        require(Token(tokenDepositAddress).transfer(msg.sender, amountAfterFee), \"Could not transfer tokens.\");\n        \n        depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(amountToWithdraw);\n        availablePoolSize = availablePoolSize.add(amountToWithdraw);\n        totalDeposited = totalDeposited.sub(amountToWithdraw);\n        \n        if (holders.contains(msg.sender) && depositedTokens[msg.sender] == 0 && getPendingRewards(msg.sender) == 0) {\n            holders.remove(msg.sender);\n            firstTime[msg.sender] = 0;\n        }\n        return true;\n    }\n    \n    /*\n    * @dev Progressive Unstaking (First  withdraw)\n    */\n    function withdraw(uint amountToWithdraw) public returns (bool){\n        require(holders.contains(msg.sender), \"Not a staker\");\n        require(alreadyProgUnstaked[msg.sender] == 0 && !ended , \"Use withdraw2 function\");\n        amountPerInterval[msg.sender] = depositedTokens[msg.sender].div(number_intervals);\n        require(depositedTokens[msg.sender].div(number_intervals) >= amountToWithdraw, \"Invalid amount to withdraw\");\n        alreadyProgUnstaked[msg.sender] = amountToWithdraw;\n        require(block.timestamp.sub(stakingTime[msg.sender]) > unstakeTime || ended, \"You recently staked, please wait before withdrawing.\");\n        \n        \n        \n        updateAccount(msg.sender, false, true);\n        \n        uint fee = amountToWithdraw.mul(unstakingFeeRate).div(1e4);\n        uint amountAfterFee = amountToWithdraw.sub(fee);\n        \n        require(Token(tokenDepositAddress).transfer(owner, fee), \"Could not transfer withdraw fee.\");\n        require(Token(tokenDepositAddress).transfer(msg.sender, amountAfterFee), \"Could not transfer tokens.\");\n        \n        depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(amountToWithdraw);\n        availablePoolSize = availablePoolSize.add(amountToWithdraw);\n        totalDeposited = totalDeposited.sub(amountToWithdraw);\n        \n        progressiveTime[msg.sender] = block.timestamp;\n    \n        return true;\n    }\n    \n    function getTimeToWithdraw(address _staker) public view returns (uint){\n        if(getMaxAmountWithdrawable(_staker) != 0) return 0;\n        \n        uint _res = 0;\n        uint _time = stakingTime[_staker];\n        if(alreadyProgUnstaked[_staker] == 0 && !ended ){\n            \n            if(block.timestamp <= _time.add(unstakeTime)){\n                _res = _time.add(unstakeTime).sub(block.timestamp);\n            }\n            \n        }else{\n            _time = progressiveTime[_staker];\n            \n            for(uint i = 1; i <= number_intervals; i = i.add(1)){\n                if(block.timestamp < _time.add(duration_interval.mul(i))){\n                    _res = _time.add(duration_interval.mul(i)).sub(block.timestamp);\n                    break;\n                }\n            }\n            \n        }\n        return _res;\n    }\n    \n    function getTimeToClaim(address _staker) public view returns (uint){\n        uint _res = 0;\n        \n        if(lastClaimedTime[_staker].add(claimTime) > block.timestamp){\n            _res = lastClaimedTime[_staker].add(claimTime).sub(block.timestamp);\n        }\n        \n        return _res;\n    }\n    \n    function claimDivs() public  returns (bool){\n        require(holders.contains(msg.sender), \"Not a staker\");\n        require(block.timestamp.sub(lastClaimedTime[msg.sender]) > claimTime, \"Not yet\");\n        updateAccount(msg.sender, false, false);\n        return true;\n    }\n    \n    function getStakersList(uint startIndex, uint endIndex) public view returns (address[] memory stakers, uint[] memory stakingTimestamps,  uint[] memory lastClaimedTimeStamps, uint[] memory stakedTokens) {\n        require (startIndex < endIndex);\n        \n        uint length = endIndex.sub(startIndex);\n        address[] memory _stakers = new address[](length);\n        uint[] memory _stakingTimestamps = new uint[](length);\n        uint[] memory _lastClaimedTimeStamps = new uint[](length);\n        uint[] memory _stakedTokens = new uint[](length);\n        \n        for (uint i = startIndex; i < endIndex; i = i.add(1)) {\n            address staker = holders.at(i);\n            uint listIndex = i.sub(startIndex);\n            _stakers[listIndex] = staker;\n            _stakingTimestamps[listIndex] = stakingTime[staker];\n            _lastClaimedTimeStamps[listIndex] = lastClaimedTime[staker];\n            _stakedTokens[listIndex] = depositedTokens[staker];\n        }\n        \n        return (_stakers, _stakingTimestamps, _lastClaimedTimeStamps, _stakedTokens);\n    }\n    \n    /*\n    * @dev function to allow admin to claim *other* ERC20 tokens sent to this contract (by mistake)\n    */\n    function transferAnyERC20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner  returns (bool){\n        require (_tokenAddr != tokenDepositAddress, \"Cannot Transfer Out this token\");\n        Token(_tokenAddr).transfer(_to, _amount);\n        return true;\n    }\n    \n    function getClaimableAmount(address account) public view returns (uint){\n        uint pendingDivs = getPendingRewards(account);\n        uint toSend = pendingDivs;\n        \n        if(depositedTokens[account].mul(percent_claim).div(100) < pendingDivs){\n            toSend = depositedTokens[account].mul(percent_claim).div(100);\n        }\n        \n        if (pendingDivs > 0) {\n            if(ended){ // claim o withdraw cuando ha terminado\n                    if(depositedTokens[account] == 0){\n                        \n                        if( maxDepositedTokens[account].mul(percent_claim).div(100) > pendingDivs ){\n                            toSend = pendingDivs;\n                        }else{\n                            toSend = maxDepositedTokens[account].mul(percent_claim).div(100);\n                        }\n                    }\n                \n            }else{\n                if(depositedTokens[account] == 0){\n                        \n                    if( maxDepositedTokens[account].mul(percent_claim).div(100) > pendingDivs ){\n                        toSend = pendingDivs;\n                    }else{\n                        toSend = maxDepositedTokens[account].mul(percent_claim).div(100);\n                    }\n                }\n            }    \n        }\n        return toSend;\n    }\n    \n}"}}}