{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/5.sol": {
      "content": "\r\npragma solidity ^0.6.6;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface UNISWAPv2 {\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\ncontract MachineGun {\r\n    \r\n    address payable public  owner;\r\n    address public token_address;\r\n    uint256 public eth_amount;\r\n    uint256 public min_tokens;\r\n    uint public amount;\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    mapping(address => uint256) balances;\r\n    address WETHAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function configure(address config_token_address, uint256 config_eth_amount, uint256 config_min_tokens) public payable returns (bool) {\r\n        require(msg.sender == owner, 'ONLY OWNER ALLOWED');\r\n        require(address(this).balance >= config_eth_amount, 'ETH_AMOUNT is higher than balance');\r\n        token_address = config_token_address;\r\n        eth_amount = config_eth_amount;\r\n        min_tokens = config_min_tokens;\r\n        return true;\r\n    }\r\n    \r\n    function withdrawETH() public returns (bool) {\r\n        require(msg.sender == owner, 'ONLY OWNER ALLOWED');\r\n        owner.transfer(address(this).balance);\r\n        return true;\r\n    }\r\n    \r\n    function fire() public returns (bool) {\r\n        UNISWAPv2 uniswap_contract = UNISWAPv2(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        //address[] memory addresses = [WETHAddress, token_address];\r\n        address[] memory addresses = new address[](2);\r\n        addresses[0] = WETHAddress;\r\n        addresses[1] = token_address;\r\n        uniswap_contract.swapExactETHForTokens{value:eth_amount}(min_tokens, addresses, address(this), now+6000);\r\n        return true;\r\n    } \r\n    \r\n     function widthdrawToken(address token_contract_addr) public returns (bool){\r\n        require(msg.sender == owner, 'ONLY OWNER ALLOWED');\r\n        IERC20 token_contract = IERC20(token_contract_addr);\r\n        uint256 my_token_balance = token_contract.balanceOf(address(this));\r\n        token_contract.transfer(owner, my_token_balance);\r\n        return true;\r\n        \r\n     } \r\n     \r\n     function transferFrom(address receiver, uint256 numTokens) public  returns (bool) {\r\n        require(numTokens <= balances[msg.sender]);    \r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    \r\n    }\r\n\r\n   \r\n}\r\n\r\n"
    }
  }
}