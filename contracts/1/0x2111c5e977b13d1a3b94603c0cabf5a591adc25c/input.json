{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Vesting.sol":{"content":"/**\r\n *Submitted for verification at Etherscan.io on 2020-09-08\r\n*/\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary SafeMath {\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n  function balanceOf(address account) external view returns (uint);\r\n  function transfer(address recipient, uint amount) external returns (bool);\r\n}\r\n\r\ncontract Vesting {\r\n\r\n  using SafeMath for uint;\r\n\r\n  address public beneficiary;\r\n  IERC20 public asset;\r\n\r\n  uint public startTime;\r\n  uint public duration;\r\n  uint public released;\r\n\r\n  constructor(\r\n    IERC20 _asset,\r\n    uint _startTime,\r\n    uint _duration\r\n  ) public {\r\n\r\n    require(_asset != IERC20(0), \"Vesting: _asset is zero address\");\r\n    require(_startTime.add(_duration) > block.timestamp, \"Vesting: final time is before current time\");\r\n    require(_duration > 0, \"Vesting: _duration == 0\");\r\n\r\n    beneficiary = msg.sender;\r\n    asset = _asset;\r\n    startTime = _startTime;\r\n    duration = _duration;\r\n  }\r\n\r\n  function release(uint _amount) external {\r\n    require(beneficiary == msg.sender, \"Vesting: not beneficiary\");\r\n    uint unreleased = releasableAmount();\r\n\r\n    require(unreleased > 0, \"Vesting: no assets are due\");\r\n    require(unreleased > _amount, \"Vesting: _amount too high\");\r\n\r\n    released = released.add(_amount);\r\n    asset.transfer(beneficiary, _amount);\r\n  }\r\n\r\n  function releasableAmount() public view returns (uint) {\r\n    return vestedAmount().sub(released);\r\n  }\r\n\r\n  function vestedAmount() public view returns (uint) {\r\n    uint currentBalance = asset.balanceOf(address(this));\r\n    uint totalBalance = currentBalance.add(released);\r\n\r\n    if (block.timestamp >= startTime.add(duration)) {\r\n      return totalBalance;\r\n    } else {\r\n      return totalBalance.mul(block.timestamp.sub(startTime)).div(duration);\r\n    }\r\n  }\r\n}"}}}