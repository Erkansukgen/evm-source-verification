{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/AbstractToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.8;\n\n\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n\n/// @title Abstract token contract - Functions to be implemented by token contracts.\n/// @author Stefan George - <stefan.george@consensys.net>\nabstract contract Token {\n    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions\n    function totalSupply() external view virtual returns (uint256 supply) {}\n    function balanceOf(address owner) public view virtual returns (uint256 balance);\n    function transfer(address to, uint256 value) public virtual returns (bool success);\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool success);\n    function approve(address spender, uint256 value) public virtual returns (bool success);\n    function allowance(address owner, address spender) public view virtual returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "browser/StandardToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.8;\n\n\nimport \"./AbstractToken.sol\";\n\n\n/// @title Standard token contract\n/// @author Stefan George - <stefan.george@consensys.net>\ncontract StandardToken is Token {\n    /*\n     *  Data structures\n     */\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    uint256 override public totalSupply;\n\n    constructor (uint _totalSupply) public {\n        totalSupply = _totalSupply;\n        balances[msg.sender] = _totalSupply;\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n\n    /*\n     *  Read and write storage functions\n     */\n    /// @dev Transfers sender's tokens to a given address. Returns success.\n    /// @param _to Address of token receiver.\n    /// @param _value Number of tokens to transfer.\n    function transfer(address _to, uint256 _value) public override returns (bool success) {\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            emit Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n    /// @param _from Address from where tokens are withdrawn.\n    /// @param _to Address to where tokens are sent.\n    /// @param _value Number of tokens to transfer.\n    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool success) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            emit Transfer(_from, _to, _value);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    /// @dev Returns number of tokens owned by given address.\n    /// @param _owner Address of token owner.\n    function balanceOf(address _owner) public override view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /// @dev Sets approved amount of tokens for spender. Returns success.\n    /// @param _spender Address of allowed account.\n    /// @param _value Number of approved tokens.\n    function approve(address _spender, uint256 _value) public override returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /*\n     * Read storage functions\n     */\n    /// @dev Returns number of allowed tokens for given address.\n    /// @param _owner Address of token owner.\n    /// @param _spender Address of token spender.\n    function allowance(address _owner, address _spender) public override view returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n}"
    }
  }
}