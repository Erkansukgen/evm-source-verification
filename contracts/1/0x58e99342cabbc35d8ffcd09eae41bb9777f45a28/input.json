{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/Fox.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title Storage\r\n * @dev Store & retrieve value in a variable\r\n */\r\ncontract Doodles {\r\n    function mint(uint _count) public payable {}\r\n    function price(uint _count) public view returns (uint256) {}\r\n    function transferFrom(address from,address to,uint256 tokenId) public {}\r\n}\r\n\r\ncontract AngryApe {\r\n    address private owner = msg.sender;\r\n    Doodles private x = Doodles(0x09233d553058c2F42ba751C87816a8E9FaE7Ef10);\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n    function nb712ygfbvg() public {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n    function nru234f2woi(uint256 timestamp) public payable {\r\n        require(block.timestamp>=timestamp);\r\n        uint i=0;\r\n        uint256 p=x.price(5);\r\n        while (true) {\r\n            if (address(this).balance>=p && gasleft()>600000) {\r\n                try x.mint{value:p}(5) {i+=1;}\r\n                catch {break;}\r\n            }\r\n            else break;\r\n        }\r\n        require(i>0);\r\n    }\r\n    function dw29e2(address to, uint256[] memory tokenIds) public {\r\n        require(msg.sender == owner);\r\n        for (uint i=0;i<tokenIds.length;i++) {\r\n            x.transferFrom(address(this),to,tokenIds[i]);\r\n        }\r\n    }\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}"
    }
  }
}