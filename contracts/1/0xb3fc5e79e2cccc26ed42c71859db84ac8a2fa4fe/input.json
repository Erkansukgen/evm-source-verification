{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "localhost/contracts/Liquidity/LiquidityLock (1).sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.6.11;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract SexLiquidity {\n\n    event Received(address, uint);\n    event onDeposit(address, uint256, uint256);\n    event onWithdraw(address, uint256);\n\n    using SafeMath for uint256;\n\n    struct VestingPeriod {\n      uint256 epoch;\n      uint256 amount;\n    }\n\n    struct UserTokenInfo {\n      uint256 deposited; // incremented on successful deposit\n      uint256 withdrawn; // incremented on successful withdrawl\n      VestingPeriod[] vestingPeriods; // added to on successful deposit\n    }\n\n    // map erc20 token to user address to release schedule\n    mapping(address => mapping(address => UserTokenInfo)) tokenUserMap;\n\n    struct LiquidityTokenomics {\n      uint256[] epochs;\n      mapping (uint256 => uint256) releaseMap; // map epoch -> amount withdrawable\n    }\n\n    // map erc20 token to release schedule\n    mapping(address => LiquidityTokenomics) tokenEpochMap;\n\n    \n    // Fast mapping to prevent array iteration in solidity\n    mapping(address => bool) public lockedTokenLookup;\n\n    // A dynamically-sized array of currently locked tokens\n    address[] public lockedTokens;\n    \n    // fee variables\n    uint256 public feeNumerator;\n    uint256 public feeDenominator;\n    \n    address public feeReserveAddress;\n    address public owner;\n    \n    constructor() public {                  \n      feeNumerator = 3;\n      feeDenominator = 1000;\n      feeReserveAddress = 0x952aeDE39A952aA754F865742938CF55F2a6A9C7;\n      owner = 0x952aeDE39A952aA754F865742938CF55F2a6A9C7;\n    }\n\n    receive() external payable {\n        emit Received(msg.sender, msg.value);\n    }\n    \n    modifier onlyOwner {\n      require(msg.sender == owner, \"You are not the owner\");\n      _;\n    }\n    \n    function updateFee(uint256 numerator, uint256 denominator) onlyOwner public {\n      feeNumerator = numerator;\n      feeDenominator = denominator;\n    }\n    \n    function calculateFee(uint256 amount) public view returns (uint256){\n      require(amount >= feeDenominator, 'Deposit is too small');    \n      uint256 amountInLarge = amount.mul(feeDenominator.sub(feeNumerator));\n      uint256 amountIn = amountInLarge.div(feeDenominator);\n      uint256 fee = amount.sub(amountIn);\n      return (fee);\n    }\n    \n    function depositTokenMultipleEpochs(address token, uint256[] memory amounts, uint256[] memory dates) public payable {\n      require(amounts.length == dates.length, 'Amount and date arrays have differing lengths');\n      for (uint i=0; i<amounts.length; i++) {\n        depositToken(token, amounts[i], dates[i]);\n      }\n    }\n\n    function depositToken(address token, uint256 amount, uint256 unlock_date) public payable {\n      require(unlock_date < 10000000000, 'Enter an unix timestamp in seconds, not miliseconds');\n      require(amount > 0, 'Your attempting to trasfer 0 tokens');\n      uint256 allowance = IERC20(token).allowance(msg.sender, address(this));\n      require(allowance >= amount, 'You need to set a higher allowance');\n      // charge a fee\n      uint256 fee = calculateFee(amount);\n      uint256 amountIn = amount.sub(fee);\n      require(IERC20(token).transferFrom(msg.sender, address(this), amountIn), 'Transfer failed');\n      require(IERC20(token).transferFrom(msg.sender, address(feeReserveAddress), fee), 'Transfer failed');\n      if (!lockedTokenLookup[token]) {\n        lockedTokens.push(token);\n        lockedTokenLookup[token] = true;\n      }\n      LiquidityTokenomics storage liquidityTokenomics = tokenEpochMap[token];\n      // amount is required to be above 0 in the start of this block, therefore this works\n      if (liquidityTokenomics.releaseMap[unlock_date] > 0) {\n        liquidityTokenomics.releaseMap[unlock_date] = liquidityTokenomics.releaseMap[unlock_date].add(amountIn);\n      } else {\n        liquidityTokenomics.epochs.push(unlock_date);\n        liquidityTokenomics.releaseMap[unlock_date] = amountIn;\n      }\n      UserTokenInfo storage uto = tokenUserMap[token][msg.sender];\n      uto.deposited = uto.deposited.add(amountIn);\n      VestingPeriod[] storage vp = uto.vestingPeriods;\n      vp.push(VestingPeriod(unlock_date, amountIn));\n      \n      emit onDeposit(token, amount, unlock_date);\n    }\n\n    function withdrawToken(address token, uint256 amount) public {\n      require(amount > 0, 'Your attempting to withdraw 0 tokens');\n      uint256 withdrawable = getWithdrawableBalance(token, msg.sender);\n      UserTokenInfo storage uto = tokenUserMap[token][msg.sender];\n      uto.withdrawn = uto.withdrawn.add(amount);\n      require(amount <= withdrawable, 'Your attempting to withdraw more than you have available');\n      require(IERC20(token).transfer(msg.sender, amount), 'Transfer failed');\n      emit onWithdraw(token, amount);\n    }\n\n    function getWithdrawableBalance(address token, address user) public view returns (uint256) {\n      UserTokenInfo storage uto = tokenUserMap[token][address(user)];\n      uint arrayLength = uto.vestingPeriods.length;\n      uint256 withdrawable = 0;\n      for (uint i=0; i<arrayLength; i++) {\n        VestingPeriod storage vestingPeriod = uto.vestingPeriods[i];\n        if (vestingPeriod.epoch < block.timestamp) {\n          withdrawable = withdrawable.add(vestingPeriod.amount);\n        }\n      }\n      withdrawable = withdrawable.sub(uto.withdrawn);\n      return withdrawable;\n    }\n    \n    function getUserTokenInfo (address token, address user) public view returns (uint256, uint256, uint256) {\n      UserTokenInfo storage uto = tokenUserMap[address(token)][address(user)];\n      uint256 deposited = uto.deposited;\n      uint256 withdrawn = uto.withdrawn;\n      uint256 length = uto.vestingPeriods.length;\n      return (deposited, withdrawn, length);\n    }\n\n    function getUserVestingAtIndex (address token, address user, uint index) public view returns (uint256, uint256) {\n      UserTokenInfo storage uto = tokenUserMap[address(token)][address(user)];\n      VestingPeriod storage vp = uto.vestingPeriods[index];\n      return (vp.epoch, vp.amount);\n    }\n\n    function getTokenReleaseLength (address token) public view returns (uint256) {\n      LiquidityTokenomics storage liquidityTokenomics = tokenEpochMap[address(token)];\n      return liquidityTokenomics.epochs.length;\n    }\n\n    function getTokenReleaseAtIndex (address token, uint index) public view returns (uint256, uint256) {\n      LiquidityTokenomics storage liquidityTokenomics = tokenEpochMap[address(token)];\n      uint256 epoch = liquidityTokenomics.epochs[index];\n      uint256 amount = liquidityTokenomics.releaseMap[epoch];\n      return (epoch, amount);\n    }\n    \n    function lockedTokensLength() external view returns (uint) {\n        return lockedTokens.length;\n    }\n}"
    }
  }
}