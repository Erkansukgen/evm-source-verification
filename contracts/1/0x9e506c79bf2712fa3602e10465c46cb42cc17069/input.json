{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Torro.sol":{"content":"// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity 0.6.6;\n\n/// @title Factory interface with benefits related methods exposed.\n/// @notice Interface for claiming, adding and depositing benefits.\n/// @author ORayskiy - @robitnik_TorroDao\ninterface ITorroFactory {\n\n  /// @notice Address of the main token.\n  /// @return address of the main token.  \n  function mainToken() external view returns (address);\n\n  /// @notice Address of the main DAO.\n  /// @return address of the main DAO.\n  function mainDao() external view returns (address);\n\n  /// @notice Checks whether provided address is a valid DAO.\n  /// @param dao_ address to check.\n  /// @return bool true if address is a valid DAO.\n  function isDao(address dao_) external view returns (bool);\n\n  /// @notice Claim available benefits for holder.\n  /// @param amount_ of wei to claim.\n  function claimBenefits(uint256 amount_) external;\n\n  /// @notice Adds withdrawal benefits for holder.\n  /// @param recipient_ holder that's getting benefits.\n  /// @param amount_ benefits amount to be added to holder's existing benefits.\n  function addBenefits(address recipient_, uint256 amount_) external;\n  \n  /// @notice Depositis withdrawal benefits.\n  /// @param token_ governing token for DAO that's depositing benefits.\n  function depositBenefits(address token_) external payable;\n}\n\n/// @title Interface for ERC-20 Torro governing token.\n/// @notice ERC-20 token.\n/// @author ORayskiy - @robitnik_TorroDao\ninterface ITorro {\n\n  // Initializer.\n\n  /// @notice Initializes governing token.\n  /// @param dao_ address of cloned DAO.\n  /// @param factory_ address of factory.\n  /// @param supply_ total supply of tokens.\n  function initializeCustom(address dao_, address factory_, uint256 supply_) external;\n\n  // Public calls.\n\n  /// @notice Token's name.\n  /// @return string name of the token.\n  function name() external view returns (string memory);\n\n  /// @notice Token's symbol.\n  /// @return string symbol of the token.\n  function symbol() external view returns (string memory);\n\n  /// @notice Token's decimals.\n  /// @return uint8 demials of the token.\n  function decimals() external pure returns (uint8);\n\n  /// @notice Token's total supply.\n  /// @return uint256 total supply of the token.\n  function totalSupply() external view returns (uint256);\n\n  /// @notice Count of token holders.\n  /// @return uint256 number of token holders.\n  function holdersCount() external view returns (uint256);\n\n  /// @notice All token holders.\n  /// @return array of addresses of token holders.\n  function holders() external view returns (address[] memory);\n\n  /// @notice Available balance for address.\n  /// @param sender_ address to get available balance for.\n  /// @return uint256 amount of tokens available for given address.\n  function balanceOf(address sender_) external view returns (uint256);\n\n  /// @notice Staked balance for address.\n  /// @param sender_ address to get staked balance for.\n  /// @return uint256 amount of staked tokens for given address.\n  function stakedOf(address sender_) external view returns (uint256);\n\n  /// @notice Total balance for address = available + staked.\n  /// @param sender_ address to get total balance for.\n  /// @return uint256 total amount of tokens for given address.\n  function totalOf(address sender_) external view returns (uint256);\n\n  /// @notice Spending allowance.\n  /// @param owner_ token owner address.\n  /// @param spender_ token spender address.\n  /// @return uint256 amount of owner's tokens that spender can use.\n  function allowance(address owner_, address spender_) external view returns (uint256);\n\n  /// @notice Unstaked supply of token.\n  /// @return uint256 amount of tokens in circulation that are not staked.\n  function unstakedSupply() external view returns (uint256);\n\n  /// @notice Staked supply of token.\n  /// @return uint256 amount of tokens in circulation that are staked.\n  function stakedSupply() external view returns (uint256);\n\n  // Public transactions.\n\n  /// @notice Transfer tokens to recipient.\n  /// @param recipient_ address of tokens' recipient.\n  /// @param amount_ amount of tokens to transfer.\n  /// @return bool true if successful.\n  function transfer(address recipient_, uint256 amount_) external returns (bool);\n\n  /// @notice Approve spender to spend an allowance.\n  /// @param spender_ address that will be allowed to spend specified amount of tokens.\n  /// @param amount_ amount of tokens that spender can spend.\n  /// @return bool true if successful.\n  function approve(address spender_, uint256 amount_) external returns (bool);\n\n  /// @notice Approves DAO to spend tokens.\n  /// @param owner_ address whose tokens DAO can spend.\n  /// @param amount_ amount of tokens that DAO can spend.\n  /// @return bool true if successful.\n  function approveDao(address owner_, uint256 amount_) external returns (bool);\n\n  /// @notice Transfers tokens from owner to recipient by approved spender.\n  /// @param owner_ address of tokens' owner whose tokens will be spent.\n  /// @param recipient_ address of recipient that will recieve tokens.\n  /// @param amount_ amount of tokens to be spent.\n  /// @return bool true if successful.\n  function transferFrom(address owner_, address recipient_, uint256 amount_) external returns (bool);\n\n  /// @notice Increases allowance for given spender.\n  /// @param spender_ spender to increase allowance for.\n  /// @param addedValue_ extra amount that spender can spend.\n  /// @return bool true if successful.\n  function increaseAllowance(address spender_, uint256 addedValue_) external returns (bool);\n\n  /// @notice Decreases allowance for given spender.\n  /// @param spender_ spender to decrease allowance for.\n  /// @param subtractedValue_ removed amount that spender can spend.\n  /// @return bool true if successful.\n  function decreaseAllowance(address spender_, uint256 subtractedValue_) external returns (bool);\n\n  /// @notice Stake tokens.\n  /// @param amount_ amount of tokens to be staked.\n  /// @return bool true if successful.\n  function stake(uint256 amount_) external returns (bool);\n\n  /// @notice Unstake tokens.\n  /// @param amount_ amount of tokens to be unstaked.\n  /// @return bool true if successful.\n  function unstake(uint256 amount_) external returns (bool);\n\n  /// @notice Functionality for DAO to add benefits for all stakers.\n  /// @param amount_ amount of wei to be shared among stakers.\n  function addBenefits(uint256 amount_) external;\n\n  /// @notice Sets DAO and Factory addresses.\n  /// @param dao_ DAO address that this token governs.\n  /// @param factory_ Factory address.\n  function setDaoFactoryAddresses(address dao_, address factory_) external;\n\n  /// @notice Pauses token functionality.\n  /// @param paused_ whether token functionality is paused.\n  function setPause(bool paused_) external;\n\n  /// @notice Sets whitelist address allowing it to make token operations when paused.\n  /// @param whitelistAddress_ address to whitelist.\n  function setWhitelistAddress(address whitelistAddress_) external;\n\n  /// @notice Functionality for owner to burn tokens.\n  /// @param amount_ amount of tokens to burn.\n  function burn(uint256 amount_) external;\n}\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n * (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextUpgradeSafe is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n\n\n    }\n\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n\n\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n\n    }\n\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[49] private __gap;\n}\n\n\n/// @title ERC-20 Torro governing token.\n/// @notice Contract for ERC-20 governing token.\n/// @author ORayskiy - @robitnik_TorroDao\ncontract Torro is ITorro, OwnableUpgradeSafe {\n  using SafeMath for uint256;\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  // Structs.\n\n  /// @notice structure to hold holder's information.\n  struct Holder {\n    uint256 balance;\n    uint256 staked;\n    mapping(address => uint256) allowances;\n  }\n\n  // Private data.\n\n  uint8 constant private _decimals = 18;\n\n  string private _name;\n  string private _symbol;\n  uint256 private _totalSupply;\n  address private _dao;\n  address private _factory;\n  bool private _isMain;\n  bool private _paused;\n\n  mapping(address => Holder) private _holders;\n  EnumerableSet.AddressSet private _holderAddresses;\n\n  address private _whitelist;\n\n  // Events.\n\n  /// @notice Event for dispatching when token transfer occurs.\n  /// @param from address of tokens' sender.\n  /// @param to address of tokens' reciever.\n  /// @param amount amount of tokens sent.\n\tevent Transfer(address indexed from, address indexed to, uint256 amount);\n\n  /// @notice Event for dispatching when tokens allowance has been approved.\n  /// @param owner address of tokens' owner.\n  /// @param spender address of tokens; spender.\n  /// @param value amount of tokens approved for use.\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /// @notice Event for dispatching when tokens have been staked.\n  /// @param owner address of tokens' owner that have been staked.\n  /// @param amount amount of tokens that have been staked.\n\tevent Stake(address indexed owner, uint256 amount);\n\n  /// @notice Event for dispatching when tokens have been unstaked.\n  /// @param owner address of tokens' owner that have been unstaked.\n  /// @param amount amount of tokens that have been unstaked.\n\tevent Unstake(address indexed owner, uint256 amount);\n  \n  /// @notice Event for dispatching when benefits have been added.\n  event AddBenefits();\n\n  // Constructor.\n\n  constructor() public {\n    __Ownable_init();\n\n    _name = \"Torro DAO Token\";\n    _symbol = \"TORRO\";\n    _totalSupply = 1e23;\n    _dao = address(0x0);\n    _factory = address(0x0);\n    _isMain = true;\n    _paused = true;\n    _whitelist = address(0x0);\n\n    _holders[msg.sender].balance = _totalSupply;\n    _holderAddresses.add(msg.sender);\n\n\temit Transfer(address(0x0), msg.sender, _totalSupply);\n  }\n\n  /// @notice Initializes governing token.\n  /// @param dao_ address of cloned DAO.\n  /// @param factory_ address of factory.\n  /// @param supply_ total supply of tokens.\n  function initializeCustom(address dao_, address factory_, uint256 supply_) public override initializer {\n    __Ownable_init();\n\n    _name = \"Torro DAO Custom Token\";\n    _symbol = \"TORRO-C\";\n    _totalSupply = supply_;\n    _dao = dao_;\n    _factory = factory_;\n    _isMain = false;\n    _paused = false;\n    _whitelist = address(0x0);\n\n    _holders[dao_].balance = _totalSupply;\n    _holderAddresses.add(dao_);\n\n    emit Transfer(address(0x0), dao_, _totalSupply);\n  }\n\n  // Modifiers.\n\n  /// @notice Modifier to check that token functionality is not paused.\n  modifier notPaused() {\n    require(_paused == false || msg.sender == owner() || msg.sender == _whitelist);\n    _;\n  }\n\n  // Public calls.\n\n  /// @notice Token's name.\n  /// @return string name of the token.\n  function name() public override view returns (string memory) {\n    return _name;\n  }\n\n  /// @notice Token's symbol.\n  /// @return string symbol of the token.\n  function symbol() public override view returns (string memory) {\n    return _symbol;\n  }\n\n  /// @notice Token's decimals.\n  /// @return uint8 demials of the token.\n  function decimals() public override pure returns (uint8) {\n    return _decimals;\n  }\n\n  /// @notice Token's total supply.\n  /// @return uint256 total supply of the token.\n\tfunction totalSupply() public override view returns (uint256) {\n\t\treturn _totalSupply;\n\t}\n\n  /// @notice Count of token holders.\n  /// @return uint256 number of token holders.\n  function holdersCount() public override view returns (uint256) {\n    return _holderAddresses.length();\n  }\n\n  /// @notice All token holders.\n  /// @return array of addresses of token holders.\n  function holders() public override view returns (address[] memory) {\n    uint256 length = _holderAddresses.length();\n    address[] memory holderAddresses = new address[](length);\n    for (uint256 i = 0; i < length; i++) {\n      holderAddresses[i] = _holderAddresses.at(i);\n    }\n    return holderAddresses;\n  }\n\n  /// @notice Available balance for address.\n  /// @param sender_ address to get available balance for.\n  /// @return uint256 amount of tokens available for given address.\n  function balanceOf(address sender_) public override view returns (uint256) {\n    return _holders[sender_].balance;\n  }\n\n  /// @notice Staked balance for address.\n  /// @param sender_ address to get staked balance for.\n  /// @return uint256 amount of staked tokens for given address.\n  function stakedOf(address sender_) public override view returns (uint256) {\n    return _holders[sender_].staked;\n  }\n\n  /// @notice Total balance for address = available + staked.\n  /// @param sender_ address to get total balance for.\n  /// @return uint256 total amount of tokens for given address.\n  function totalOf(address sender_) public override view returns (uint256) {\n    return _holders[sender_].balance.add(_holders[sender_].staked);\n  }\n\n  /// @notice Spending allowance.\n  /// @param owner_ token owner address.\n  /// @param spender_ token spender address.\n  /// @return uint256 amount of owner's tokens that spender can use.\n  function allowance(address owner_, address spender_) public override view returns (uint256) {\n    return _holders[owner_].allowances[spender_];\n  }\n\n  /// @notice Unstaked supply of token.\n  /// @return uint256 amount of tokens in circulation that are not staked.\n  function unstakedSupply() public override view returns (uint256) {\n    uint256 supply = 0;\n    for (uint256 i = 0; i < _holderAddresses.length(); i++) {\n      supply = supply.add(_holders[_holderAddresses.at(i)].balance);\n    }\n    return supply;\n  }\n\n  /// @notice Staked supply of token.\n  /// @return uint256 amount of tokens in circulation that are staked.\n  function stakedSupply() public override view returns (uint256) {\n    uint256 supply = 0;\n    for (uint256 i = 0; i < _holderAddresses.length(); i++) {\n      supply = supply.add(_holders[_holderAddresses.at(i)].staked);\n    }\n    return supply;\n  }\n\n  // Public transactions.\n\n  /// @notice Transfer tokens to recipient.\n  /// @param recipient_ address of tokens' recipient.\n  /// @param amount_ amount of tokens to transfer.\n  /// @return bool true if successful.\n  function transfer(address recipient_, uint256 amount_) public override notPaused returns (bool) {\n    _transfer(msg.sender, recipient_, amount_);\n    return true;\n  }\n\n  /// @notice Approve spender to spend an allowance.\n  /// @param spender_ address that will be allowed to spend specified amount of tokens.\n  /// @param amount_ amount of tokens that spender can spend.\n  /// @return bool true if successful.\n  function approve(address spender_, uint256 amount_) public override notPaused returns (bool) {\n    _approve(msg.sender, spender_, amount_);\n    return true;\n  }\n\n  /// @notice Approves DAO to spend tokens.\n  /// @param owner_ address whose tokens DAO can spend.\n  /// @param amount_ amount of tokens that DAO can spend.\n  /// @return bool true if successful.\n  function approveDao(address owner_, uint256 amount_) public override notPaused returns (bool) {\n    require(msg.sender == _dao);\n    _approve(owner_, _dao, amount_);\n    return true;\n  }\n\n  /// @notice Transfers tokens from owner to recipient by approved spender.\n  /// @param owner_ address of tokens' owner whose tokens will be spent.\n  /// @param recipient_ address of recipient that will recieve tokens.\n  /// @param amount_ amount of tokens to be spent.\n  /// @return bool true if successful.\n  function transferFrom(address owner_, address recipient_, uint256 amount_) public override notPaused returns (bool) {\n    require(_holders[owner_].allowances[msg.sender] >= amount_);\n    _transfer(owner_, recipient_, amount_);\n    _approve(owner_, msg.sender, _holders[owner_].allowances[msg.sender].sub(amount_));\n    return true;\n  }\n\n  /// @notice Increases allowance for given spender.\n  /// @param spender_ spender to increase allowance for.\n  /// @param addedValue_ extra amount that spender can spend.\n  /// @return bool true if successful.\n  function increaseAllowance(address spender_, uint256 addedValue_) public override notPaused returns (bool) {\n    _approve(msg.sender, spender_, _holders[msg.sender].allowances[spender_].add(addedValue_));\n    return true;\n  }\n\n  /// @notice Decreases allowance for given spender.\n  /// @param spender_ spender to decrease allowance for.\n  /// @param subtractedValue_ removed amount that spender can spend.\n  /// @return bool true if successful.\n  function decreaseAllowance(address spender_, uint256 subtractedValue_) public override notPaused returns (bool) {\n    _approve(msg.sender, spender_, _holders[msg.sender].allowances[spender_].sub(subtractedValue_));\n    return true;\n  }\n\n  /// @notice Stake tokens.\n  /// @param amount_ amount of tokens to be staked.\n  /// @return bool true if successful.\n  function stake(uint256 amount_) public override notPaused returns (bool) {\n    require(amount_ >= 1e18);\n    require(balanceOf(msg.sender) >= amount_);\n    Holder storage holder = _holders[msg.sender];\n    holder.balance = holder.balance.sub(amount_);\n    holder.staked = holder.staked.add(amount_);\n\t\temit Transfer(msg.sender, address(this), amount_);\n\t\temit Stake(msg.sender, amount_);\n    return true;\n  }\n\n  /// @notice Unstake tokens.\n  /// @param amount_ amount of tokens to be unstaked.\n  /// @return bool true if successful.\n  function unstake(uint256 amount_) public override notPaused returns (bool) {\n    require(stakedOf(msg.sender) >= amount_);\n    Holder storage holder = _holders[msg.sender];\n    uint256 amount;\n    if (_isMain) {\n      uint256 burn = amount_ / 200;\n      uint256 tempTotalSupply = _totalSupply.sub(burn);\n      if (tempTotalSupply < 1e22) {\n        burn = _totalSupply.sub(tempTotalSupply);\n      }\n      if (burn > 0) {\n        amount = amount_.sub(burn);\n        _totalSupply = _totalSupply.sub(burn);\n        emit Transfer(msg.sender, address(0x0), burn);\n      }\n    } else {\n      amount = amount_;\n    }\n    holder.staked = holder.staked.sub(amount_);\n    holder.balance = holder.balance.add(amount);\n    emit Transfer(address(this), msg.sender, amount);\n    emit Unstake(msg.sender, amount_);\n    return true;\n  }\n\n  /// @notice Functionality for DAO to add benefits for all stakers.\n  /// @param amount_ amount of wei to be shared among stakers.\n  function addBenefits(uint256 amount_) public override {\n    require(msg.sender == _dao || ITorroFactory(_factory).isDao(msg.sender));\n    for (uint256 i = 0; i < _holderAddresses.length(); i++) {\n      address holder = _holderAddresses.at(i);\n      uint256 staked = stakedOf(holder);\n      if (staked > 0) {\n        uint256 amount = staked.mul(amount_) / stakedSupply();\n        if (amount > 0) {\n          ITorroFactory(_factory).addBenefits(holder, amount);\n        }\n      }\n    }\n\n    // Emit event that benefits have been added for token.\n    emit AddBenefits();\n  }\n  \n  /// @notice Functionality to burn tokens.\n  /// @param amount_ amount of tokens to burn.\n  function burn(uint256 amount_) public override {\n    Holder storage burner = _holders[msg.sender];\n    require(burner.balance >= amount_);\n    burner.balance = burner.balance.sub(amount_);\n    _totalSupply = _totalSupply.sub(amount_);\n\n    emit Transfer(msg.sender, address(0x0), amount_);\n  }\n\n  // Private transactions.\n\n  /// @notice Main functionality for token trnasfer.\n  /// @param sender_ address that sends tokens.\n  /// @param recipient_ address that will recieve tokens.\n  /// @param amount_ amount of tokens to be sent.\n  function _transfer(address sender_, address recipient_, uint256 amount_) private {\n    require(sender_ != address(0x0));\n    require(recipient_ != address(0x0));\n\n    Holder storage sender = _holders[sender_];\n    Holder storage recipient = _holders[recipient_];\n\n    require(sender.balance >= amount_);\n\n    if (_holderAddresses.contains(recipient_)) {\n      recipient.balance = recipient.balance.add(amount_);\n    } else {\n      recipient.balance = amount_;\n      _holderAddresses.add(recipient_);\n    }\n    sender.balance = sender.balance.sub(amount_);\n    if (totalOf(sender_) == 0) {\n      _holderAddresses.remove(sender_);\n    }\n\n    emit Transfer(sender_, recipient_, amount_);\n  }\n\n  /// @notice Main functionality for token allowance approval.\n  /// @param owner_ address whose tokens will be spent.\n  /// @param spender_ address that will be able to spend tokens.\n  /// @param amount_ amount of tokens that can be spent.\n  function _approve(address owner_, address spender_, uint256 amount_) private {\n    require(owner_ != address(0x0));\n    require(spender_ != address(0x0));\n\n    _holders[owner_].allowances[spender_] = amount_;\n\n    emit Approval(owner_, spender_, amount_);\n  }\n\n  // Owner transactions.\n\n  /// @notice Sets DAO and Factory addresses.\n  /// @param dao_ DAO address that this token governs.\n  /// @param factory_ Factory address.\n  function setDaoFactoryAddresses(address dao_, address factory_) public override onlyOwner {\n    _dao = dao_;\n    _factory = factory_;\n  }\n\n  /// @notice Pauses token functionality.\n  /// @param paused_ whether token functionality is paused.\n  function setPause(bool paused_) public override onlyOwner {\n    _paused = paused_;\n  }\n\n  /// @notice Sets whitelist address allowing it to make token operations when paused.\n  /// @param whitelistAddress_ address to whitelist.\n  function setWhitelistAddress(address whitelistAddress_) public override onlyOwner {\n    _whitelist = whitelistAddress_;\n  }\n}\n"}}}