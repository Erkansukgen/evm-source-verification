{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/PointList2.sol": {
      "content": "pragma solidity ^0.8.0;\n\ninterface BatchAuctionLike {\n    struct MarketStatus {\n        uint128 commitmentsTotal;\n        uint128 minimumCommitmentAmount;\n        bool finalized;\n        bool usePointList;\n    }\n\n    function commitments(address) external view returns (uint);\n    function marketStatus() external view returns (MarketStatus memory);\n}\n\n\ncontract BatchValidatingPointList {\n    function hasPoints(address who, uint newCommitment) public view returns (bool) {\n        BatchAuctionLike auction = BatchAuctionLike(msg.sender);\n        BatchAuctionLike.MarketStatus memory status = auction.marketStatus();\n\n        uint expectedEth = status.commitmentsTotal - auction.commitments(who) + newCommitment;\n        require(address(auction).balance >= expectedEth, \"BatchValidatingPointList/invalid-eth\");\n        require(BatchValidatingPointList(0x5982E018d91f919819e1E1Ab9d1648144e637E49).hasPoints(who, newCommitment), \"BatchValidatingPointList/upstream\");\n\n        return true;\n    }\n}"
    }
  }
}