{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/Token.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\npragma solidity ^0.6.0;\n\n/// @title Abstract token contract - Functions to be implemented by token contracts\nabstract contract Token {\n    /*\n     *  Events\n     */\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n\n    /*\n     *  Public functions\n     */\n    function transfer(address to, uint value) public virtual returns (bool);\n    function transferFrom(address from, address to, uint value) public virtual returns (bool);\n    function approve(address spender, uint value) public virtual returns (bool);\n    function balanceOf(address owner) public virtual view returns (uint);\n    function allowance(address owner, address spender) public virtual view returns (uint);\n    function totalSupply() public virtual view returns (uint);\n}\n\n"
    },
    "contracts/disbursement.sol": {
      "content": "pragma solidity ^0.6.0;\nimport  \"./Token.sol\";\n\n\n/// @title Disbursement contract - allows to distribute tokens over time\n/// @author Stefan George - <stefan@gnosis.pm>\ncontract Disbursement {\n\n    /*\n     *  Storage\n     */\n    address public receiver;\n    address public wallet;\n    uint public disbursementPeriod;\n    uint public startDate;\n    uint public withdrawnTokens;\n    Token public token;\n\n    /*\n     *  Modifiers\n     */\n    modifier isReceiver() {\n        if (msg.sender != receiver)\n            revert(\"Only receiver is allowed to proceed\");\n        _;\n    }\n\n    modifier isWallet() {\n        if (msg.sender != wallet)\n            revert(\"Only wallet is allowed to proceed\");\n        _;\n    }\n\n    /*\n     *  Public functions\n     */\n    /// @dev Constructor function sets the wallet address, which is allowed to withdraw all tokens anytime\n    /// @param _receiver Receiver of vested tokens\n    /// @param _wallet Gnosis multisig wallet address\n    /// @param _disbursementPeriod Vesting period in seconds\n    /// @param _startDate Start date of disbursement period (cliff)\n    /// @param _token ERC20 token used for the vesting\n    constructor(address _receiver, address _wallet, uint _disbursementPeriod, uint _startDate, Token _token)\n        public\n    {\n        if (_receiver == address(0) || _wallet == address(0) || _disbursementPeriod == 0 || address(_token) == address(0))\n            revert(\"Arguments are null\");\n        receiver = _receiver;\n        wallet = _wallet;\n        disbursementPeriod = _disbursementPeriod;\n        startDate = _startDate;\n        token = _token;\n        if (startDate == 0){\n          startDate = now;\n        }\n    }\n\n    /// @dev Transfers tokens to a given address\n    /// @param _to Address of token receiver\n    /// @param _value Number of tokens to transfer\n    function withdraw(address _to, uint256 _value)\n        public\n        isReceiver\n    {\n        uint maxTokens = calcMaxWithdraw();\n        if (_value > maxTokens){\n          revert(\"Withdraw amount exceeds allowed tokens\");\n        }\n        withdrawnTokens += _value;\n        token.transfer(_to, _value);\n    }\n\n    /// @dev Transfers all tokens to multisig wallet\n    function walletWithdraw()\n        public\n        isWallet\n    {\n        uint balance = token.balanceOf(address(this));\n        withdrawnTokens += balance;\n        token.transfer(wallet, balance);\n    }\n\n    /// @dev Calculates the maximum amount of vested tokens\n    /// @return Number of vested tokens to withdraw\n    function calcMaxWithdraw()\n        public\n        view\n        returns (uint)\n    {\n        uint maxTokens = (token.balanceOf(address(this)) + withdrawnTokens) * (now - startDate) / disbursementPeriod;\n        if (withdrawnTokens >= maxTokens || startDate > now){\n          return 0;\n        }\n        return maxTokens - withdrawnTokens;\n    }\n}\n"
    }
  }
}