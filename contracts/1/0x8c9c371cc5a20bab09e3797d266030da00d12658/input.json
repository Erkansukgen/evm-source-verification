{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/CopyBot.sol":{"content":"//SPDX-License-Identifier: MIT \npragma solidity ^0.7.0;\n\n//import \"./ChiGasSaver.sol\";\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IGST2 {\n    function balanceOf(address who) external view returns (uint256);\n\n    function free(uint256 value) external returns (bool success);\n\n    function freeUpTo(uint256 value) external returns (uint256 freed);\n\n    function freeFrom(address from, uint256 value) external returns (bool success);\n\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n}\n\n\ninterface Advance {\n    function advance() external returns (bool);\n}\n\ninterface IFreeFromUpTo {\n    function freeFromUpTo(address from, uint256 value) external returns(uint256 freed);\n}\n\n\ncontract CopyBot {\n    address payable private EOA;\n    address payable private manager;\n    \n    event Received(address sender, uint amount);\n    \n    receive() external payable {\n        emit Received(msg.sender,msg.value);\n    }\n    \n    \n    modifier restricted() {\n        require((msg.sender == manager), 'Manager only');\n        _;\n        \n    }\n    \n    modifier saveGas(address payable sponsor) {\n        uint256 gasStart = gasleft();\n        _;\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n\n        IFreeFromUpTo chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n        chi.freeFromUpTo(sponsor, (gasSpent + 14154) / 41947);\n    }\n    \n   constructor() {\n       EOA = msg.sender;\n        manager = msg.sender;\n    }\n    \n\n    \n    function approve(address spender, uint256 amount, uint[] calldata expirations) saveGas(msg.sender) external {\n        Advance tokentoadvance = Advance(spender);\n        tokentoadvance.advance();\n    }\n    \n    function drainToken(IERC20 _token) external restricted {\n        IERC20 token = IERC20(_token);\n        uint tokenBalance = token.balanceOf(address(this));\n        token.transfer(EOA, tokenBalance);\n    }\n    \n    function drainETH() external restricted {\n        uint ethBalance = address(this).balance;\n        EOA.transfer(ethBalance);\n    }\n    \n}\n"}}}