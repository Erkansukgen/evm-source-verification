{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/2_Owner.sol": {
      "content": "pragma solidity ^0.6.6;\r\n\r\n// describe the interface\r\n\r\ncontract Service{\r\n    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) public payable{}\r\n}\r\n\r\ncontract Client {\r\n\r\n    Service _s;\r\n\r\n    address payable public manager;\r\n\r\n    address public weth = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\r\n\r\n    address[] public path;\r\n    \r\n    address public _router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    bool public ready = false;\r\n\r\n    uint public price;\r\n\r\n    uint public decimal;\r\n\r\n    constructor() public {\r\n        _s = Service(_router); \r\n        manager = msg.sender;\r\n    }\r\n\r\n    modifier restricted {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n    \r\n    function transferManager(address payable addr) public restricted{\r\n        manager = addr;\r\n    }\r\n\r\n    function deposit() public payable {}\r\n\r\n    function withdraw() public restricted {\r\n        manager.transfer(address(this).balance);\r\n    }\r\n    \r\n    function config(address _token, uint _price, uint _decimal) public payable restricted {\r\n        delete path;\r\n        path.push(weth);\r\n        path.push(_token);\r\n        price = _price;\r\n        decimal = _decimal;\r\n        ready = true;\r\n    }\r\n\r\n    function b() public{\r\n        require(ready);\r\n        _s.swapExactETHForTokens{value: address(this).balance}(address(this).balance * price / (10 ** (18 - decimal)), path, manager, block.timestamp + 10) ;\r\n        if(address(this).balance < 0.00001 ether){\r\n            ready = false;\r\n        }\r\n    }\r\n}"
    }
  }
}