{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/license.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0;\r\n\r\ncontract License {\r\n    \r\n    /* Licenses for trader.js the DeFi degen companion script */\r\n    \r\n    address payable admin;\r\n    uint256 public price;\r\n    mapping (address => bool) public licenses;\r\n    \r\n    constructor() {\r\n        admin = msg.sender;\r\n        licenses[msg.sender] = true;\r\n        price = 2 ether;\r\n    }\r\n    \r\n    receive() external payable {\r\n        require(msg.value >= price, \"Not enough ETH was sent\");\r\n        require(!licenses[msg.sender], \"User already has a license\");\r\n        licenses[msg.sender] = true;\r\n    }\r\n    \r\n    function withdraw() external {\r\n        admin.transfer(address(this).balance);\r\n    }\r\n    \r\n    function check() external view returns(bool) {\r\n        return(licenses[msg.sender]);\r\n    }\r\n    \r\n    function updatePrice(uint256 _new) external {\r\n        require(admin == msg.sender, \"Admin only!\");\r\n        price = _new;\r\n    }\r\n}"
    }
  }
}