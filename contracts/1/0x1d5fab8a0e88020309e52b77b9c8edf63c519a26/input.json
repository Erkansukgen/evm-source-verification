{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Blacksmith.sol":{"content":"// SPDX-License-Identifier: None\r\npragma solidity ^0.7.4;\r\n\r\ninterface ICOVER {\r\n  function setBlacksmith(address _newBlacksmith) external returns (bool);\r\n}\r\n\r\ncontract Blacksmith {\r\n  ICOVER public cover;\r\n  address public governance;\r\n  \r\n  constructor (address _coverAddress, address _governance) {\r\n    cover = ICOVER(_coverAddress);\r\n    governance = _governance;\r\n  }\r\n\r\n\r\n  modifier onlyGovernance() {\r\n    require(msg.sender == governance, \"Blacksmith: caller not governance\");\r\n    _;\r\n  }\r\n\r\n  /// @notice transfer minting rights to new blacksmith\r\n  function transferMintingRights(address _newAddress) external onlyGovernance {\r\n    cover.setBlacksmith(_newAddress);\r\n  }\r\n}"}}}