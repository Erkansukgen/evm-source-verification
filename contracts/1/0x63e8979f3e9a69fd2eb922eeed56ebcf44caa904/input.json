{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "OakTreasureChest.sol": {
      "content": "pragma solidity ^0.5.16;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        \r\n\t    return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n\tusing SafeMath for uint256;\r\n\tuint public totalSupply;\r\n\t\r\n\tstring public name;\r\n\tuint8 public decimals;\r\n\tstring public symbol;\r\n\tstring public version;\r\n\t\r\n\tmapping (address => uint256) balances;\r\n\tmapping (address => mapping (address => uint)) allowed;\r\n\r\n\t//Fix for short address attack against ERC20\r\n\tmodifier onlyPayloadSize(uint size) {\r\n\t\tassert(msg.data.length == size + 4);\r\n\t\t_;\r\n\t} \r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint _value) public onlyPayloadSize(2*32) returns (bool success) {\r\n\t    address owner = msg.sender;\r\n\t    require(balances[owner] >= _value && _value > 0);\r\n\t    balances[owner] = balances[owner].sub(_value);\r\n\t    balances[_to] = balances[_to].add(_value);\r\n\t    emit Transfer(owner, _to, _value);\r\n\t    return true;\r\n    }\r\n\r\n\tfunction transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n\t    address owner = msg.sender;\r\n\t    require(balances[_from] >= _value && allowed[_from][owner] >= _value && _value > 0);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][owner] = allowed[_from][owner].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Approve `spender` to transfer up to `amount` from `src`\r\n     * @dev This will overwrite the approval amount for `spender`\r\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n     * @param _spender The address of the account which may transfer tokens\r\n     * @param _value The number of tokens that are approved (2^256-1 means infinite)\r\n     * @return Whether or not the approval succeeded\r\n     */\r\n    function approve(address _spender, uint _value) external returns (bool) {\r\n    \taddress owner = msg.sender;\r\n        allowed[owner][_spender] = _value;\r\n        emit Approval(owner, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\t//Event which is triggered to log all transfers to this contract's event log\r\n\tevent Transfer(\r\n\t\taddress indexed _from,\r\n\t\taddress indexed _to,\r\n\t\tuint _value\r\n\t\t);\r\n\t\t\r\n\t//Event which is triggered whenever an owner approves a new allowance for a spender.\r\n\tevent Approval(\r\n\t\taddress indexed _owner,\r\n\t\taddress indexed _spender,\r\n\t\tuint _value\r\n\t\t);\r\n}\r\n\r\ncontract OakTreasureChest is ERC20 {\r\n\tconstructor() public {\r\n\t\ttotalSupply = 123000000000000000000;\r\n\t\tname = \"OakTreasureChest\";\r\n\t\tdecimals = 18;\r\n\t\tsymbol = \"OAK-CHEST\";\r\n\t\tversion = \"1.0\";\r\n\t\tbalances[msg.sender] = totalSupply;\r\n\t}\r\n}"
    }
  }
}