{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":1000000},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"NiftyWallet.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\ninterface ERC721 {\r\n    function ownerOf(uint) external view returns (address);\r\n}\r\n\r\ncontract NiftyWallet {\r\n\r\n    struct NFT {\r\n        address tokenContract;\r\n        uint tokenId;\r\n    }\r\n\r\n    NFT public ownerNft;\r\n\r\n    constructor(address tokenContract, uint tokenId) {\r\n        ownerNft = NFT(tokenContract, tokenId);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return ERC721(ownerNft.tokenContract).ownerOf(ownerNft.tokenId);\r\n    }\r\n\r\n    function onERC721Received(\r\n        address /*_operator*/,\r\n        address /* _from */,\r\n        uint256 /* _tokenId */,\r\n        bytes calldata /* _data */\r\n    ) external pure returns (bytes4) { return 0x150b7a02; }\r\n\r\n    function onERC1155Received(\r\n        address /* _operator */,\r\n        address /* _from */,\r\n        uint256 /* _id */,\r\n        uint256 /* _value */,\r\n        bytes calldata /* _data */\r\n    ) external pure returns (bytes4) { return 0xf23a6e61; }\r\n\r\n    function onERC1155BatchReceived(\r\n        address /* _operator */,\r\n        address /* _from */,\r\n        uint256[] calldata /* _ids */,\r\n        uint256[] calldata /* _values */,\r\n        bytes calldata /* _data */\r\n    ) external pure returns (bytes4) { return 0xbc197c81; }\r\n\r\n    fallback() external payable {\r\n        require(msg.sender == owner());\r\n        assembly {\r\n            let end := calldatasize()\r\n            for { let p := 0 } lt(p, end) { p := add(p, 0x20) } {\r\n                let encodedHeader := calldataload(p)\r\n                let target := shr(96, encodedHeader)\r\n                let sendValue := shr(176, shl(160, encodedHeader))\r\n                let size := and(encodedHeader, 0xffff)\r\n\r\n                if iszero(iszero(size)) {\r\n                    calldatacopy(0, add(p, 0x20), size)\r\n                    p := add(p, size)\r\n                }\r\n\r\n                if iszero(call(gas(), target, sendValue, 0, size, 0, 0)) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"}}}