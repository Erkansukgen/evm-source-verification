{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/PreETHToken.sol":{"content":"pragma solidity 0.6.12;\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = _a * _b;\r\n    require(c / _a == _b);\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = _a / _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a);\r\n    uint256 c = _a - _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    require(c >= _a);\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n\r\n}\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    uint256 public totalSupply = 0;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n\r\n    function balanceOf(address _owner) override external view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) override external view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) override public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) override public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) override public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, allowed[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        balances[from] = balances[from].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        balances[account] = balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        balances[account] = balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n\r\n        allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _burn(account, value);\r\n        _approve(account, msg.sender, allowed[account][msg.sender].sub(value));\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract PreETHToken is StandardToken {\r\n\r\n    // Libs\r\n    using SafeMath for uint;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint public decimals;\r\n    address public owner;\r\n    address public estDepositPool;\r\n    // Events\r\n    event TokensMinted(address indexed to, uint256 amount, uint256 time);\r\n    event TokensBurned(address indexed from, uint256 amount, uint256 time);\r\n\r\n\r\n    constructor(uint256 _initialSupply, string memory _name, string memory _symbol, uint256 _decimals) public {\r\n        totalSupply = _initialSupply;\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        balances[owner] = _initialSupply;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n     modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Account is not owner\");\r\n        _;\r\n    }\r\n    \r\n    \r\n    function setEstDepositePoolAddress(address _address) public onlyOwner {\r\n        estDepositPool = _address;\r\n    }\r\n\r\n    function mint(uint256 _preETHAmount, address _to) external {\r\n        require(keccak256(abi.encodePacked(msg.sender))==keccak256(abi.encodePacked(estDepositPool)),\"Invalid contract address\");\r\n        require(_preETHAmount > 0, \"Invalid token mint amount\");\r\n        // Update balance & supply\r\n        balances[_to] = balances[_to].add(_preETHAmount);\r\n        totalSupply = totalSupply.add(_preETHAmount);\r\n        // Emit tokens minted event\r\n        emit TokensMinted(_to, _preETHAmount, now);\r\n    }\r\n\r\n    // Burn preETH for ETH\r\n    function burn(uint256 _preETHAmount) external {\r\n        // Check preETH amount\r\n        require(_preETHAmount > 0, \"Invalid token burn amount\");\r\n        require(balances[msg.sender] >= _preETHAmount, \"Insufficient preETH balance\");\r\n        // Update balance & supply\r\n        balances[msg.sender] = balances[msg.sender].sub(_preETHAmount);\r\n        totalSupply = totalSupply.sub(_preETHAmount);\r\n        emit TokensBurned(msg.sender, _preETHAmount, now);\r\n    }\r\n    \r\n    // Burn preETH for ETH\r\n    function contractBurn(uint256 _preETHAmount,address _burnAddress) external {\r\n        // Check preETH amount\r\n       require(keccak256(abi.encodePacked(msg.sender))==keccak256(abi.encodePacked(estDepositPool)),\"Invalid contract address\");\r\n        require(_preETHAmount > 0, \"Invalid token burn amount\");\r\n        require(balances[_burnAddress] >= _preETHAmount, \"Insufficient preETH balance\");\r\n        // Update balance & supply\r\n        balances[_burnAddress] = balances[_burnAddress].sub(_preETHAmount);\r\n        totalSupply = totalSupply.sub(_preETHAmount);\r\n        emit TokensBurned(_burnAddress, _preETHAmount, now);\r\n    }\r\n    \r\n\r\n\r\n}\r\n\r\n"}}}