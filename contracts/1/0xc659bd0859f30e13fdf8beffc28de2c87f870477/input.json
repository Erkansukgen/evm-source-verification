{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/fantastic4.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface ofÆ’ice the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n    \n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n        uint256 c = add(a,m);\n        uint256 d = sub(c,1);\n        return mul(div(d,m),m);\n    }\n}\n  struct holderDetails {\n        uint256  totalBuyIn15Min;\n        uint256  lastBuyTime;\n        uint256  lastSellTime;\n\n         }\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract Fantastic is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n    \n    mapping (uint256=>address) private tokenHolders;\n    mapping (address=>holderDetails) public holderDetailInTimeSlot;\n    mapping (address => uint256) private winnersHistory;\n    mapping (address => bool) private whitelist;\n\n    \n    \n    uint256 prizeCooldown = 5 minutes;\n    uint256 winnerCooldown = 30 minutes; \n    uint256 holder_index = 0;\n    uint256 public lastPrizeTime = 0;\n    uint256 private precentageTokenToBurnBot = 28;\n    uint256 private precentageTokenToBurnBot2 = 15;\n    uint256 private precentageTokenToWinner = 5;\n    uint256 private precentageTokenToBurn = 2;\n    uint256 private minimumDiffSellBuyTime = 2 minutes;\n    uint256 private minimumDiffSellBuyTime2 = 5 minutes;\n    uint256 maxWinners = 4;\n    uint256 private _totalSupply = 500 ether;\n\n    string private _name = \"Fantastic4 Token\";\n    string private _symbol = \"F4\";\n    uint8 private _decimals = 18;\n    address private __owner;\n    bool private limitBuy = true;\n    bool private whitelistLimit = true;\n    \n\n    // those are the public addresses on etherscan\n    address private uniswapRouterV2 = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n    address private WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n    address private uniswapFactory = address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\n    address[] winners;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor () public {\n        __owner = msg.sender;\n        _balances[__owner] = _totalSupply;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n    \n    function getWinnerAddresses() public view returns (address[] memory){\n        return winners;\n    }\n\n    function burnTokens(uint256 amount) public {\n        _burn(msg.sender, amount);\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n    \n    function multiTransfer(address[] memory addresses, uint256 amount) public {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            transfer(addresses[i], amount);\n        }\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function enableLimit() public {\n        if (msg.sender != __owner) {\n            revert();\n        }\n        \n        limitBuy = true;\n    }\n    \n    function disableLimit() public {\n        if (msg.sender != __owner) {\n            revert();\n        }\n        \n        limitBuy = false;\n    }\n\n    function enableWhitelistLimit() public {\n        if (msg.sender != __owner) {\n            revert();\n        }\n        \n        whitelistLimit = true;\n    }\n\n    function disableWhitelistLimit() public {\n        if (msg.sender != __owner) {\n            revert();\n        }\n        \n        whitelistLimit = false;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n\n    function multiWhitelistAdd(address[] memory addresses) public {\n        if (msg.sender != __owner) {\n            revert();\n        }\n\n        for (uint256 i = 0; i < addresses.length; i++) {\n            whitelistAdd(addresses[i]);\n        }\n    }\n\n    function multiWhitelistRemove(address[] memory addresses) public {\n        if (msg.sender != __owner) {\n            revert();\n        }\n\n        for (uint256 i = 0; i < addresses.length; i++) {\n            whitelistRemove(addresses[i]);\n        }\n    }\n\n    function whitelistAdd(address a) public {\n        if (msg.sender != __owner) {\n            revert();\n        }\n        \n        whitelist[a] = true;\n    }\n    \n    function whitelistRemove(address a) public {\n        if (msg.sender != __owner) {\n            revert();\n        }\n        \n        whitelist[a] = false;\n    }\n    \n    function isInWhitelist(address a) internal view returns (bool) {\n        return whitelist[a];\n    }\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n      \n    function isBattleDone() public view returns(bool) {\n        return now>=(lastPrizeTime + prizeCooldown);\n    }\n    \n    function nextBattleDone() public view returns(uint) {\n        int256 toGo = int256(lastPrizeTime + prizeCooldown - now);\n        if (toGo < 0) {\n            return 0;\n        }\n        \n        return uint(toGo);\n    }\n    \n    function addAddressWonPrize(address addr) private{\n            winnersHistory[addr] = now;    \n    }\n    \n    function canWin(address recipient) public view returns (bool){\n        if(winnersHistory[recipient] != 0){\n            return (now - (winnersHistory[recipient])) >= winnerCooldown;\n        }\n\n        return true;\n    }\n    \n    function getTokenHolders(uint256 i) public view returns(address){\n        return tokenHolders[i];\n    }\n    \n    function getBiggestholders() public view returns (address[] memory){\n        // if only solidity had some data structures...\n        uint256 max1 = 0; uint256 max2 = 0; uint256 max3 = 0; uint256 max4 = 0; uint256 max5 = 0;\n        address winner1 = address(0); address winner2 = address(0); address winner3 = address(0); address winner4 = address(0); address winner5 = address(0);\n        uint256 bought = 0;\n        address[] memory winnerAddresses = new address[](maxWinners);\n        address curAddress;\n        \n        for(uint256 i=0; i < holder_index; i++){\n            curAddress = tokenHolders[i];\n            if (soldFast(curAddress) || shouldIgnore(curAddress) || !canWin(curAddress)) {\n                continue;\n            }\n            \n            bought = holderDetailInTimeSlot[curAddress].totalBuyIn15Min;\n            if(bought > max1) {\n                max5 = max4; winner5 = winner4;\n                max4 = max3; winner4 = winner3;\n                max3 = max2; winner3 = winner2;\n                max2 = max1; winner2 = winner1;\n                max1 = bought; winner1 = curAddress;\n            } else if (bought > max2) {\n                max5 = max4; winner5 = winner4;\n                max4 = max3; winner4 = winner3;\n                max3 = max2; winner3 = winner2;\n                max2 = bought; winner2 = curAddress;\n            } else if (bought > max3) {\n                max5 = max4; winner5 = winner4;\n                max4 = max3; winner4 = winner3;\n                max3 = bought; winner3 = curAddress;\n            } else if (bought > max4) {\n                max5 = max4; winner5 = winner4;\n                max4 = bought; winner4 = curAddress;\n            }\n        }\n        winnerAddresses[0] = winner1;\n        winnerAddresses[1] = winner2;\n        winnerAddresses[2] = winner3;\n        winnerAddresses[3] = winner4;\n        \n        return winnerAddresses;\n    }\n\n    function rememberBuyerTransaction(address holderAddress, uint256 amount) private {\n        if(holderDetailInTimeSlot[holderAddress].totalBuyIn15Min != 0){\n            holderDetailInTimeSlot[holderAddress].totalBuyIn15Min  +=  amount;\n            holderDetailInTimeSlot[holderAddress].lastBuyTime = now;\n\n        }\n        else{\n            tokenHolders[holder_index] = holderAddress;\n            holderDetailInTimeSlot[holderAddress] = holderDetails(amount, now, 0);\n            holder_index +=1;\n            holder_index %= 400;\n        }\n    }\n    \n    function rememberSellerTransaction(address holderAddress, uint256 amount) private {\n        if(holderDetailInTimeSlot[holderAddress].totalBuyIn15Min != 0){\n            holderDetailInTimeSlot[holderAddress].totalBuyIn15Min  -=  amount;\n            holderDetailInTimeSlot[holderAddress].lastSellTime = now;\n        }\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n            ))));\n    }\n    \n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n    \n    function soldFast(address holderAddress) public view returns(bool){\n        if (holderDetailInTimeSlot[holderAddress].lastSellTime == 0) {\n            return false;\n        }\n        \n        return (holderDetailInTimeSlot[holderAddress].lastSellTime - holderDetailInTimeSlot[holderAddress].lastBuyTime) < minimumDiffSellBuyTime;\n    }\n    \n    function shouldIgnore(address a) public view returns(bool) {\n        if (a == uniswapRouterV2 || a == __owner) {\n            return true;\n        }\n\n        (address token0, address token1) = sortTokens(address(this), WETH);\n        address pair = pairFor(uniswapFactory, token0, token1);\n\n       return a == pair;\n    }\n    \n    function clearTransactionHistory() internal {\n        for (uint256 i = 0; i < holder_index; i++) {\n            holderDetailInTimeSlot[tokenHolders[i]] = holderDetails(0, 0, 0);\n        }\n\n        holder_index = 0;\n    }\n    \n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        uint256 curBurnPrecentage = precentageTokenToBurn;\n        uint256 curWinnerPrecentage = precentageTokenToWinner;\n\n        if (__owner == sender) {\n            curBurnPrecentage = 3;\n        } else if (limitBuy) {\n            if (amount > 6 ether) {\n                revert();\n            }\n            \n            if ((now - holderDetailInTimeSlot[sender].lastBuyTime) < minimumDiffSellBuyTime && !shouldIgnore(sender)){\n                curBurnPrecentage = precentageTokenToBurnBot;\n            } else if ((now - holderDetailInTimeSlot[sender].lastBuyTime) < minimumDiffSellBuyTime2 && !shouldIgnore(sender)){\n                curBurnPrecentage = precentageTokenToBurnBot2;\n            }\n\n        }\n\n        if (whitelistLimit) {\n        \tif (isInWhitelist(sender)) {\n        \t\tcurBurnPrecentage = precentageTokenToBurnBot;\n        \t}\n        }\n        \n        _beforeTokenTransfer(sender, recipient, amount);\n        \n        uint256 tokensToBurn = amount.div(100).mul(curBurnPrecentage);\n        uint256 tokensToSidePot = amount.div(100).mul(curWinnerPrecentage);\n        uint256 tokensToTransfer = amount.sub(tokensToBurn).sub(tokensToSidePot);\n\n        _burn(sender, tokensToBurn);\n        _balances[sender] = _balances[sender].sub(tokensToTransfer, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(tokensToTransfer);\n        \n        emit Transfer(sender, recipient, tokensToTransfer);   \n        \n        rememberSellerTransaction(sender, amount);\n        rememberBuyerTransaction(recipient, amount);\n    \n        if(isBattleDone()){\n          winners = getBiggestholders();\n\n            for (uint i=0; i < maxWinners; i++) {\n                if (winners[i] != address(0)) {\n                    addAddressWonPrize(winners[i]);\n                    clearTransactionHistory();\n                    lastPrizeTime = now;\n                }\n            }\n        } \n        \n        _transferToWinners(sender, tokensToSidePot);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n    \n    function _transferToWinners(address sender, uint256 amount) internal virtual{\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: burn amount exceeds balance\");\n        uint256 part = amount.div(maxWinners);\n        for (uint i = 0; i < maxWinners; i++) {\n            _balances[winners[i]] = _balances[winners[i]].add(part);\n            emit Transfer(sender, winners[i], part);    \n        }\n        \n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}"
    }
  }
}