{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "TestContract.sol": {
      "content": "pragma solidity >=0.8.1;\n\n\ncontract TestContract {\n    \n    function pass() external pure returns (bool) { return true; }\n    \n    function fail() external pure { revert(\"Fail\"); }\n    \n    function proxyCall(address _to, bytes calldata _calldata, uint _val) external payable returns (bool, bytes memory) {\n        return payable(_to).call{value: _val}(_calldata);\n    }\n    \n    function spendGas(uint _maxAmount) external view {\n        require(_maxAmount > 23e3, 'Spend more gas!');\n        _maxAmount -= 22000;\n        uint initialGas = gasleft();\n        while (true) {\n            if (initialGas-gasleft() >= _maxAmount) {\n                break;\n            }\n        }\n    }\n    \n    function spendAllGas() external pure {\n        while (true) {}\n    }\n    \n    \n    function disperseFunds(address[] calldata _accounts) external payable {\n        uint contractBal = address(this).balance;\n        require(_accounts.length > 0 && contractBal>0);\n        uint chunk = contractBal / _accounts.length;\n        for (uint i=0; i<_accounts.length; i++) {\n            payable(_accounts[i]).transfer(chunk);\n        }\n    }\n    \n    function poyMiner(uint _amount) external payable {\n        block.coinbase.transfer(_amount);\n    }\n    \n    receive() external payable {}\n    \n}\n\n\n\n"
    }
  }
}