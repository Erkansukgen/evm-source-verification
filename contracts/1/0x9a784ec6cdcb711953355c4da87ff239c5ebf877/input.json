{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":9999},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/gOHMOracleV1.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n}\n\n/// @notice A library for performing overflow-/underflow-safe math,\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\nlibrary BoringMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        require(b == 0 || (c = a * b) / b == a, \"BoringMath: Mul Overflow\");\n    }\n}\n\ninterface IAggregator {\n    function latestAnswer() external view returns (int256 answer);\n}\n\ninterface IGOHM {\n    function index() external view returns (uint256 number);\n}\n\n/// @title gOHMOracle\n/// @author Oxkeno\n/// @notice Oracle used for getting the price of gOHM based on Chainlink OHMV2 price\n/// @dev\ncontract gOHMOracle is IAggregator {\n    using BoringMath for uint256;\n\n    IGOHM public constant gOHM = IGOHM(0x0ab87046fBb341D058F17CBC4c1133F25a20a52f);\n    IAggregator public constant OhmV2Oracle = IAggregator(0x9a72298ae3886221820B1c878d12D872087D3a23);\n\n    // Calculates the lastest exchange rate\n    // Uses ohmV2 rate and gOHM index conversion\n    function latestAnswer() external view override returns (int256) {\n        return int256(\n            uint256(OhmV2Oracle.latestAnswer())\n                .mul(gOHM.index())\n                / 1e9\n        );\n    }\n}"}}}