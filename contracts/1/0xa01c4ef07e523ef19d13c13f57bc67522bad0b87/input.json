{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/tests/VeroxOwnershipWrapper.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AnyToken {\n    function transferFrom(address, address, uint) external returns (bool);\n    function transfer(address, uint) external returns (bool);\n}\n\ninterface IVEROX_MAKER {\n    function transferAnyERC20Tokens(address _tokenAddr, address _to, uint _amount) external;\n}\n\ncontract VeroxOwnershipWrapper {\n    \n    address public owner;\n    AnyToken public veroxToken = AnyToken(0x87DE305311D5788e8da38D19bb427645b09CB4e5);\n    IVEROX_MAKER public maker = IVEROX_MAKER(0x744612Bd6c29301A99eF2b19393eB95080926003);\n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n  constructor() {\n    owner = msg.sender;\n  }\n  \n  function transferOwnership(address newOwner) public {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n  \n    function transferAnyTokensFromMaker(address _tokenAddr, address _to, uint _amount) public {\n        require(msg.sender == owner);\n        require(_tokenAddr != address(veroxToken), \"Not allowed for Verox token\");\n        maker.transferAnyERC20Tokens(_tokenAddr, _to, _amount);\n    }\n\n    // function to allow admin to claim *any* ERC20 tokens sent to this contract\n    function transferAnyTokensFromThis(address _tokenAddr, address _to, uint _amount) public {\n        require(msg.sender == owner);\n        AnyToken(_tokenAddr).transfer(_to, _amount);\n    }\n}\n"}}}