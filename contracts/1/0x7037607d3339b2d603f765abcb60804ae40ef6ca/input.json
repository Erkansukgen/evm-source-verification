{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overloaded;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        _approve(account, _msgSender(), currentAllowance - amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/GasSwap.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract GasSwap {\n    uint swapCount;\n   \n    GasSwapToken public gswpContract;\n    GasSwapStakingToken public gswpstkContract;\n   \n    address constant public manager = 0xBB39c493B0Dda05bEE2fcbf0eF976933426F8058;\n    address constant public gswpContractAddress = 0xA98105193C685346cB4989Cb208Ab2Bb5E4902B8;\n    address constant public gswpstkContractAddress = 0x6f1A7867cE03D13c7a38c8A1Da7c5611F32Cd67B;\n\n    event Swapped(address indexed userAddress, uint gswp, uint gswpstk, uint gasPrice, uint8 swapType);\n   \n    constructor() public {\n        gswpContract = GasSwapToken(gswpContractAddress);\n        gswpstkContract = GasSwapStakingToken(gswpstkContractAddress);\n}\n\n    function stakeGSWP(bytes memory signature, uint8 gasPrice, uint gswpIn, uint gswpstkOut, uint expires) public {\n        require(expires > block.timestamp);\n        require(gswpContract.balanceOf(msg.sender) >= gswpIn);\n        bytes32 message = keccak256(abi.encodePacked(msg.sender, gasPrice, gswpIn, gswpstkOut, expires));\n        address signer = recoverSigner(message, signature);\n        require(signer == manager);\n        gswpContract.burnFrom(msg.sender, gswpIn);\n        gswpstkContract.mint(msg.sender, gswpstkOut);\n        emit Swapped(msg.sender, gswpIn, gswpstkOut, gasPrice, 1);\n    }\n   \n    function claimGSWP(bytes memory signature, uint8 gasPrice, uint gswpstkIn, uint gswpOut, uint expires) public {\n        require(expires > block.timestamp);\n        require(gswpstkContract.balanceOf(msg.sender) >= gswpstkIn);\n        bytes32 message = keccak256(abi.encodePacked(msg.sender, gasPrice, gswpstkIn, gswpOut, expires));\n        address signer = recoverSigner(message, signature);\n        require(signer == manager);\n        gswpstkContract.burnFrom(msg.sender, gswpstkIn);\n        gswpContract.mint(msg.sender, gswpOut);\n        emit Swapped(msg.sender, gswpOut, gswpstkIn, gasPrice, 1);\n    }\n\n   function recoverSigner(bytes32 message, bytes memory sig) public pure returns (address) {\n       uint8 v;\n       bytes32 r;\n       bytes32 s;\n       (v, r, s) = splitSignature(sig);\n       return ecrecover(message, v, r, s);\n   }\n\n   function splitSignature(bytes memory sig) public pure returns (uint8, bytes32, bytes32) {\n       require(sig.length == 65);\n       bytes32 r;\n       bytes32 s;\n       uint8 v;\n       assembly {\n           r := mload(add(sig, 32))\n           s := mload(add(sig, 64))\n           v := byte(0, mload(add(sig, 96)))\n       }\n       return (v, r, s);\n   }\n\n}\n\ncontract GasSwapToken is ERC20, ERC20Burnable, Ownable {\n    address stakingAddress;\n    constructor() ERC20(\"Gas Swap\", \"GSWP\") {\n        _mint(msg.sender, 12500000 * 10 ** decimals());\n    }\n   \n    function mint(address to, uint256 amount) public{\n        require(msg.sender == stakingAddress || msg.sender == owner(), \"Sender not authorized.\");\n        _mint(to, amount);\n    }\n   \n    function setStakingAddress(address _address) onlyOwner public{\n        stakingAddress = _address;\n    }\n   \n    function burnFrom(address account, uint256 amount) public virtual override {\n        if (msg.sender != owner() && msg.sender != stakingAddress) {\n            uint256 currentAllowance = allowance(account, _msgSender());\n            require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n\ncontract GasSwapStakingToken is ERC20, ERC20Burnable, Ownable {\n    address stakingAddress;\n    constructor() ERC20(\"Gas Swap Staking\", \"GSWPSTK\") {\n    }\n\n    function mint(address to, uint256 amount) public{\n        require(msg.sender == stakingAddress || msg.sender == owner(), \"Sender not authorized.\");\n        _mint(to, amount);\n    }\n   \n    function burnFrom(address account, uint256 amount) public virtual override {\n        if (msg.sender != owner() && msg.sender != stakingAddress) {\n            uint256 currentAllowance = allowance(account, _msgSender());\n            require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n\n    function setStakingAddress(address _address) onlyOwner public{\n        stakingAddress = _address;\n    }\n   \n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        revert('Transfers are not allowed');\n    }\n   \n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        revert('Approvals are not allowed');\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        revert('Transfers are not allowed');\n    }\n   \n    function increaseAllowance(address spender, uint256 addedValue) public virtual override returns (bool) {\n        revert('Approvals are not allowed');\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual override returns (bool) {\n        revert('Approvals are not allowed');\n    }\n}\n\n// contract GasSwapStakingToken {\n//     string public constant name = \"Gas Swap Staking Token\";\n//     string public constant symbol = \"GSWPSTK\";\n//     uint8 public constant decimals = 18;\n   \n//     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n//     event Transfer(address indexed from, address indexed to, uint tokens);\n\n//     mapping(address => uint256) balances;\n\n//     mapping(address => mapping (address => uint256)) allowed;\n   \n//     uint256 totalSupply;\n//     uint burntSupply;\n//     address minter;\n   \n//     using SafeMath for uint256;\n\n//     constructor(uint256 total, address owner) public {\n//         minter = msg.sender;\n//     totalSupply = total;\n//     balances[owner] = totalSupply;\n       \n//     } \n  \n//   function balanceOf(address tokenOwner) public view returns (uint) {\n//       return balances[tokenOwner];\n//   }\n  \n//   function transfer(address receiver, uint numTokens) public returns (bool) {\n//       require(msg.sender == minter);\n//       require(numTokens <= balances[msg.sender]);\n//       balances[msg.sender] = balances[msg.sender].sub(numTokens);\n//       balances[receiver] = balances[receiver].add(numTokens);\n//       emit Transfer(msg.sender, receiver, numTokens);\n//       return true;\n//     }\n\n//     function approve(address delegate, uint numTokens) public returns (bool) {\n//         allowed[msg.sender][delegate] = numTokens;\n//         Approval(msg.sender, delegate, numTokens);\n//         return true;\n//     }\n\n//     function allowance(address owner, address delegate) public view returns (uint) {\n//         return allowed[owner][delegate];\n//     }\n\n//     function transferFrom(address owner, address buyer, uint numTokens) public returns (bool) {\n//         require(msg.sender == minter);\n//         require(numTokens <= balances[owner]);   \n//         require(numTokens <= allowed[owner][msg.sender]);\n   \n//         balances[owner] = balances[owner].sub(numTokens);\n//         allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\n//         balances[buyer] = balances[buyer].add(numTokens);\n//         Transfer(owner, buyer, numTokens);\n//         return true;\n//     }\n   \n//     function mintTokens(uint256 amount, address toWallet) public returns (bool) {\n//         require(msg.sender == minter);\n//         balances[toWallet] = balances[toWallet] + amount;\n//         return true;\n//     }\n\n//     function burnTokens(uint amount, address fromAddress) public {\n//         require(msg.sender == minter);\n//         balances[fromAddress] = balances[fromAddress] - amount;\n//         totalSupply = totalSupply - amount;\n//         burntSupply = burntSupply + amount;\n//     }\n\n// }\n\n// contract GasSwapToken {\n//     string public constant name = \"Gas Swap Token\";\n//     string public constant symbol = \"GSWP\";\n//     uint8 public constant decimals = 18;\n   \n//     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n//     event Transfer(address indexed from, address indexed to, uint tokens);\n\n//     mapping(address => uint256) balances;\n\n//     mapping(address => mapping (address => uint256)) allowed;\n   \n//     uint totalSupply;\n//     uint burntSupply;\n//     address minter;\n   \n//     using SafeMath for uint256;\n\n//     constructor(uint256 total, address owner) public {\n//         minter = msg.sender;\n//     totalSupply = total;\n//     balances[owner] = totalSupply;\n//   } \n \n//   function getTotalSupply() public view returns (uint) {\n//       return totalSupply;\n//   }\n  \n//   function balanceOf(address tokenOwner) public view returns (uint) {\n//       return balances[tokenOwner];\n//   }\n  \n//   function transfer(address receiver, uint numTokens) public returns (bool) {\n//       require(numTokens <= balances[msg.sender]);\n//       balances[msg.sender] = balances[msg.sender].sub(numTokens);\n//       balances[receiver] = balances[receiver].add(numTokens);\n//       emit Transfer(msg.sender, receiver, numTokens);\n//       return true;\n//     }\n\n//     function approve(address delegate, uint numTokens) public returns (bool) {\n//         allowed[msg.sender][delegate] = numTokens;\n//         Approval(msg.sender, delegate, numTokens);\n//         return true;\n//     }\n\n//     function allowance(address owner, address delegate) public view returns (uint) {\n//         return allowed[owner][delegate];\n//     }\n\n//     function transferFrom(address owner, address buyer, uint numTokens) public returns (bool) {\n//         require(numTokens <= balances[owner]);   \n//         require(numTokens <= allowed[owner][msg.sender]);\n   \n//         balances[owner] = balances[owner].sub(numTokens);\n//         allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\n//         balances[buyer] = balances[buyer].add(numTokens);\n//         Transfer(owner, buyer, numTokens);\n//         return true;\n//     }\n   \n//     function mintTokens(uint256 amount, address toWallet) public returns (bool) {\n//         require(msg.sender == minter);\n//         balances[toWallet] = balances[toWallet] + amount;\n//         totalSupply = totalSupply + amount;\n//         return true;\n//     }\n   \n//     function burnTokens(uint amount, address fromAddress) public {\n//         require(msg.sender == minter);\n//         balances[fromAddress] = balances[fromAddress] - amount;\n//         totalSupply = totalSupply - amount;\n//         burntSupply = burntSupply + amount;\n//     }\n// }\n\n// library SafeMath {\n//     function add(uint x, uint y) internal pure returns (uint z) {\n//         require((z = x + y) >= x, 'ds-math-add-overflow');\n//     }\n\n//     function sub(uint x, uint y) internal pure returns (uint z) {\n//         require((z = x - y) <= x, 'ds-math-sub-underflow');\n//     }\n\n//     function mul(uint x, uint y) internal pure returns (uint z) {\n//         require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n//     }\n// }"
    }
  }
}