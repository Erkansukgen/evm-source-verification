{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "SPOSPaymentSplitter.sol": {
      "content": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: payment splitter.sol\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\n\r\ncontract SPOSPaymentSplitter is Ownable {\r\n\r\n  event PayeeAdded(address account, uint256 shares);\r\n  event PaymentReleased(address to, uint256 amount);\r\n  event PaymentReceived(address from, uint256 amount);\r\n\r\n  uint256 private _totalShares;\r\n  uint256 private _totalReleased;\r\n\r\n  mapping(address => uint256) private _shares;\r\n  mapping(address => uint256) private _released;\r\n  address[] private _payees;\r\n\r\n  /**\r\n   * @dev Constructor\r\n   */\r\n  constructor(address[] memory payees, uint256[] memory shareAmounts) payable {\r\n    require(payees.length == shareAmounts.length);\r\n    require(payees.length > 0);\r\n\r\n    for (uint256 i = 0; i < payees.length; i++) {\r\n      _addPayee(payees[i], shareAmounts[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev payable fallback\r\n   */\r\n  fallback() external payable {\r\n    emit PaymentReceived(msg.sender, msg.value);\r\n  }\r\n  \r\n  receive() external payable {\r\n    emit PaymentReceived(msg.sender, msg.value);\r\n  }\r\n\r\n  /**\r\n   * @return the total shares of the contract.\r\n   */\r\n  function totalShares() public view returns(uint256) {\r\n    return _totalShares;\r\n  }\r\n\r\n  /**\r\n   * @return the total amount already released.\r\n   */\r\n  function totalReleased() public view returns(uint256) {\r\n    return _totalReleased;\r\n  }\r\n\r\n  /**\r\n   * @return the shares of an account.\r\n   */\r\n  function shares(address account) public view returns(uint256) {\r\n    return _shares[account];\r\n  }\r\n\r\n  /**\r\n   * @return the amount already released to an account.\r\n   */\r\n  function released(address account) public view returns(uint256) {\r\n    return _released[account];\r\n  }\r\n\r\n  /**\r\n   * @return the address of a payee.\r\n   */\r\n  function payee(uint256 index) public view returns(address) {\r\n    return _payees[index];\r\n  }\r\n\r\n  /**\r\n   * @dev Release one of the payee's proportional payment.\r\n   * @param account Whose payments will be released.\r\n   */\r\n  function release(address account) public {\r\n    require(_shares[account] > 0);\r\n\r\n    uint256 totalReceived = address(this).balance + _totalReleased;\r\n    uint256 payment = totalReceived * _shares[account] / _totalShares - _released[account];\r\n\r\n    require(payment > 0);\r\n\r\n    _released[account] = _released[account] + payment;\r\n    _totalReleased = _totalReleased + payment;\r\n\r\n    payable(account).transfer(payment);\r\n    emit PaymentReleased(account, payment);\r\n  }\r\n\r\n  /**\r\n   * @dev Add a new payee to the contract.\r\n   * @param account The address of the payee to add.\r\n   * @param shares_ The number of shares owned by the payee.\r\n   */\r\n  function _addPayee(address account, uint256 shares_) private {\r\n    require(account != address(0));\r\n    require(shares_ > 0);\r\n    require(_shares[account] == 0);\r\n\r\n    _payees.push(account);\r\n    _shares[account] = shares_;\r\n    _totalShares = _totalShares + shares_;\r\n    emit PayeeAdded(account, shares_);\r\n  }\r\n}"
    }
  }
}