{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Locker.sol":{"content":"pragma solidity ^0.4.13;\r\n\r\ncontract _ERC20Basic {\r\n  function balanceOf(address _owner) public returns (uint256 balance);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract Locker {\r\n    address owner;\r\n    \r\n    address tokenAddress = 0x4A01C8775319244Bf0680ED61a61AB4f6ec38a39; // $GASPAY token address\r\n    uint256 unlockUnix = now + (30 days); // 1 month\r\n    \r\n    _ERC20Basic token = _ERC20Basic(tokenAddress);\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function unlockTeamTokens() public {\r\n        require(owner == msg.sender, \"Sender not owner\");\r\n        require( now > unlockUnix, \"Unlock Time not reached yet\");\r\n        token.transfer(owner, token.balanceOf(address(this)));\r\n    }\r\n    \r\n    function getLockAmount() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n    \r\n    function getTokenAddress()  public view returns (address) {\r\n        return tokenAddress;\r\n    }\r\n    \r\n    function getUnlockTimeLeft() public view returns (uint) {\r\n        return unlockUnix - now;\r\n    }\r\n}"}}}