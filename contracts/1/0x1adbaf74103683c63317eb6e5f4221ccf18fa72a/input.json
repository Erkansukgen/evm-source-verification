{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/SellAllTokens.sol":{"content":"pragma solidity ^0.8.1;\r\n// SPDX-License-Identifier: None\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address) external view returns (uint);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function approve(address, uint) external returns (bool);\r\n}\r\n\r\ninterface Router {\r\n    function swapExactTokensForTokens(uint, uint, address[] memory, address, uint) external returns (uint[] memory);\r\n}\r\n\r\ncontract SellAllTokens {\r\n    constructor() {}\r\n\r\n    function sellAllTokens(address _inputTokenAddress, address _outputTokenAddress, address _routerAddress, address _toAddress) public {\r\n        uint balance = IERC20(_inputTokenAddress).balanceOf(msg.sender);\r\n        require(balance != 0, 'Must have tokens to sell!');\r\n        (bool result,) = _routerAddress.delegatecall(abi.encodeWithSignature('swapExactTokensForTokens(uint, uint, address[] memory, address, uint)', balance, 0, [_inputTokenAddress, _outputTokenAddress], _toAddress, block.timestamp + 1));\r\n        assert(result);\r\n    }\r\n}"}}}