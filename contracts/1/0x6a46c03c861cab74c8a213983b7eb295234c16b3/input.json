{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "AIP11.sol": {
      "content": "\n// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.6.12;\n\ninterface ILendingPoolConfigurator {\n  function disableReserveStableBorrowRate(address _reserve) external;\n}\n\n\ninterface ILendingPoolAddressesProvider {\n  \n  function setLendingPoolImpl(address _pool) external;\n\n  function setLendingPoolCoreImpl(address _lendingPoolCore) external;\n  \n  function getLendingPool() external view returns (address);\n}\n\n\ninterface IProposalExecutor {\n  function execute() external;\n}\n\n\ninterface ILendingPoolV1 {\n  function getReserves() external view returns (address[] memory);\n}\n\n/**\n * @title AIP11\n * @notice Proposal payload to be executed by the Aave Governance contract via DELEGATECALL\n * - Disables new stable rates borrowings on Aave v1\n * - Updates the implementation of Aave v1 to replace rebalancing with swap to variable\n * @author Emilio Frangella\n **/\ncontract AIP11Payload is IProposalExecutor {\n  event ProposalExecuted();\n\n  ILendingPoolConfigurator public constant LENDING_POOL_CONFIGURATOR =\n    ILendingPoolConfigurator(0x4965f6FA20fE9728deCf5165016fc338a5a85aBF);\n\n  ILendingPoolAddressesProvider public constant LENDING_POOL_ADDRESSES_PROVIDER =\n    ILendingPoolAddressesProvider(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8);\n\n  address public constant NEW_LENDING_POOL_IMPL = 0xDB9217fad3c1463093fc2801Dd0a22C930850A61;\n  address public constant NEW_LENDING_POOL_CORE_IMPL = 0x2847A5D7Ce69790cb40471d454FEB21A0bE1F2e3;\n\n  /**\n   * @dev Payload execution function, called once a proposal passed in the Aave governance\n   */\n  function execute() external override {\n    LENDING_POOL_ADDRESSES_PROVIDER.setLendingPoolImpl(NEW_LENDING_POOL_IMPL);\n    LENDING_POOL_ADDRESSES_PROVIDER.setLendingPoolCoreImpl(NEW_LENDING_POOL_CORE_IMPL);\n\n    address[] memory reserves =\n      ILendingPoolV1(LENDING_POOL_ADDRESSES_PROVIDER.getLendingPool()).getReserves();\n    for (uint256 i = 0; i < reserves.length; i++) {\n      LENDING_POOL_CONFIGURATOR.disableReserveStableBorrowRate(reserves[i]);\n    }\n\n    emit ProposalExecuted();\n  }\n}"
    }
  }
}