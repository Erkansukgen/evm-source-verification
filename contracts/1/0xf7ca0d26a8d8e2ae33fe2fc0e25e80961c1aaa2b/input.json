{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/AddressRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\nimport { Ownable } from \"./Ownable.sol\";\nimport { IAddressRegistry } from \"./IAddressRegistry.sol\";\nimport { AddressStorage } from \"./AddressStorage.sol\";\n\ncontract AddressRegistry is IAddressRegistry, Ownable, AddressStorage {\n    event AvalancheUpdated(address indexed newAddress);\n    event LGEUpdated(address indexed newAddress);\n    event LodgeUpdated(address indexed newAddress);\n    event LoyaltyUpdated(address indexed newAddress);\n    event FrostUpdated(address indexed newAddress);\n    event FrostPoolUpdated(address indexed newAddress);\n    event SlopesUpdated(address indexed newAddress);\n    event SnowPatrolUpdated(address indexed newAddress);\n    event TreasuryUpdated(address indexed newAddress);\n    event UniswapRouterUpdated(address indexed newAddress);\n    event VaultUpdated(address indexed newAddress);\n    event WethUpdated(address indexed newAddress);\n\n    bytes32 private constant AVALANCHE_KEY = \"AVALANCHE\";\n    bytes32 private constant LGE_KEY = \"LGE\";\n    bytes32 private constant LODGE_KEY = \"LODGE\";\n    bytes32 private constant LOYALTY_KEY = \"LOYALTY\";\n    bytes32 private constant FROST_KEY = \"FROST\";\n    bytes32 private constant FROST_POOL_KEY = \"FROST_POOL\";\n    bytes32 private constant SLOPES_KEY = \"SLOPES\";\n    bytes32 private constant SNOW_PATROL_KEY = \"SNOW_PATROL\";\n    bytes32 private constant TREASURY_KEY = \"TREASURY\";\n    bytes32 private constant UNISWAP_ROUTER_KEY = \"UNISWAP_ROUTER\";\n    bytes32 private constant WETH_KEY = \"WETH\";\n    bytes32 private constant VAULT_KEY = \"VAULT\";\n\n    function getAvalanche() public override view returns (address) {\n        return getAddress(AVALANCHE_KEY);\n    }\n\n    function setAvalanche(address _address) public override onlyOwner {\n        _setAddress(AVALANCHE_KEY, _address);\n        emit AvalancheUpdated(_address);\n    }\n\n    function getLGE() public override view returns (address) {\n        return getAddress(LGE_KEY);\n    }\n\n    function setLGE(address _address) public override onlyOwner {\n        _setAddress(LGE_KEY, _address);\n        emit LGEUpdated(_address);\n    }\n\n    function getLodge() public override view returns (address) {\n        return getAddress(LODGE_KEY);\n    }\n\n    function setLodge(address _address) public override onlyOwner {\n        _setAddress(LODGE_KEY, _address);\n        emit LodgeUpdated(_address);\n    }\n\n    function getLoyalty() public override view returns (address) {\n        return getAddress(LOYALTY_KEY);\n    }\n\n    function setLoyalty(address _address) public override onlyOwner {\n        _setAddress(LOYALTY_KEY, _address);\n        emit LoyaltyUpdated(_address);\n    }\n\n    function getFrost() public override view returns (address) {\n        return getAddress(FROST_KEY);\n    }\n\n    function setFrost(address _address) public override onlyOwner {\n        _setAddress(FROST_KEY, _address);\n        emit FrostUpdated(_address);\n    }\n\n    function getFrostPool() public override view returns (address) {\n        return getAddress(FROST_POOL_KEY);\n    }\n\n    function setFrostPool(address _address) public override onlyOwner {\n        _setAddress(FROST_POOL_KEY, _address);\n        emit FrostPoolUpdated(_address);\n    }\n\n    function getSlopes() public override view returns (address) {\n        return getAddress(SLOPES_KEY);\n    }\n\n    function setSlopes(address _address) public override onlyOwner {\n        _setAddress(SLOPES_KEY, _address);\n        emit SlopesUpdated(_address);\n    }\n\n    function getSnowPatrol() public override view returns (address) {\n        return getAddress(SNOW_PATROL_KEY);\n    }\n\n    function setSnowPatrol(address _address) public override onlyOwner {\n        _setAddress(SNOW_PATROL_KEY, _address);\n        emit SnowPatrolUpdated(_address);\n    }\n\n    function getTreasury() public override view returns (address payable) {\n        address payable _address = address(uint160(getAddress(TREASURY_KEY)));\n        return _address;\n    }\n\n    function setTreasury(address _address) public override onlyOwner {\n        _setAddress(TREASURY_KEY, _address);\n        emit TreasuryUpdated(_address);\n    }\n\n    function getUniswapRouter() public override view returns (address) {\n        return getAddress(UNISWAP_ROUTER_KEY);\n    }\n\n    function setUniswapRouter(address _address) public override onlyOwner {\n        _setAddress(UNISWAP_ROUTER_KEY, _address);\n        emit UniswapRouterUpdated(_address);\n    }\n\n    function getVault() public override view returns (address) {\n        return getAddress(VAULT_KEY);\n    }\n\n    function setVault(address _address) public override onlyOwner {\n        _setAddress(VAULT_KEY, _address);\n        emit VaultUpdated(_address);\n    }\n\n    function getWeth() public override view returns (address) {\n        return getAddress(WETH_KEY);\n    }\n\n    function setWeth(address _address) public override onlyOwner {\n        _setAddress(WETH_KEY, _address);\n        emit WethUpdated(_address);\n    }\n}"
    },
    "browser/AddressStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\ncontract AddressStorage {\n    mapping(bytes32 => address) private addresses;\n\n    function getAddress(bytes32 _key) public view returns (address) {\n        return addresses[_key];\n    }\n\n    function _setAddress(bytes32 _key, address _value) internal {\n        addresses[_key] = _value;\n    }\n}"
    },
    "browser/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"
    },
    "browser/IAddressRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\ninterface IAddressRegistry {\n    event AvalancheUpdated(address indexed newAddress);\n    event LGEUpdated(address indexed newAddress);\n    event LodgeUpdated(address indexed newAddress);\n    event LoyaltyUpdated(address indexed newAddress);\n    event FrostUpdated(address indexed newAddress);\n    event FrostPoolUpdated(address indexed newAddress);\n    event SlopesUpdated(address indexed newAddress);\n    event SnowPatrolUpdated(address indexed newAddress);\n    event TreasuryUpdated(address indexed newAddress);\n    event UniswapRouterUpdated(address indexed newAddress);\n    event VaultUpdated(address indexed newAddress);\n    event WethUpdated(address indexed newAddress);\n    \n    function getAvalanche() external view returns (address);\n    function setAvalanche(address _address) external;\n\n    function getLGE() external view returns (address);\n    function setLGE(address _address) external;\n\n    function getLodge() external view returns (address);\n    function setLodge(address _address) external;\n\n    function getLoyalty() external view returns (address);\n    function setLoyalty(address _address) external;\n\n    function getFrost() external view returns (address);\n    function setFrost(address _address) external;\n\n    function getFrostPool() external view returns (address);\n    function setFrostPool(address _address) external;\n\n    function getSlopes() external view returns (address);\n    function setSlopes(address _address) external;\n\n    function getSnowPatrol() external view returns (address);\n    function setSnowPatrol(address _address) external;\n\n    function getTreasury() external view returns (address payable);\n    function setTreasury(address _address) external;\n\n    function getUniswapRouter() external view returns (address);\n    function setUniswapRouter(address _address) external;\n\n    function getVault() external view returns (address);\n    function setVault(address _address) external;\n\n    function getWeth() external view returns (address);\n    function setWeth(address _address) external;\n}"
    },
    "browser/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"
    }
  }
}