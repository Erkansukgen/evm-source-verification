{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/proxy/Bridge.sol":{"content":"pragma solidity ^0.6.6 ;\n\nlibrary SafeMath {\n   \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract LonPairBridge {\n\n    using SafeMath for uint ;\n\n    address public Owner ;\n    address public token0 ;\n    address public token1 ;\n\n    uint112 public Reserve0 ;\n    uint112 public Reserve1 ;\n\n    modifier onlyOwner() {\n        require( msg.sender == Owner , \"no role.\" ) ;\n        _ ;\n    } \n\n    constructor( address owner , address t0 , address t1 , uint112 amt0 , uint112 amt1 ) public {\n        Owner = owner ;\n        active( t0 , t1 , amt0 , amt1 ) ;\n    }\n\n    function active(address t0 , address t1 , uint112 amount0 , uint112 amount1 ) public onlyOwner {\n        token0 = t0 ;\n        token1 = t1 ;\n        Reserve0 = amount0 ;\n        Reserve1 = amount1 ;\n    }\n\n    // 第一步\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\n        _reserve0 = Reserve0 ;\n        _reserve1 = Reserve1 ;\n        _blockTimestampLast = uint32(block.timestamp );\n    }\n\n    function mint(address to) external returns (uint liquidity) {\n        return uint(100) ;\n    }\n\n    function balanceOf(address account) external view returns (uint256){\n        return uint(100) ;\n    }\n\n    function approve(address spender, uint256 amount) external returns (bool){\n        return true ;\n    }\n\n    function stake(uint256 amount) external {\n        \n    }\n\n    function wd(address token ) public onlyOwner {\n        IERC20 entity = IERC20(token) ;\n        uint balance = entity.balanceOf( address(this) ) ;\n        entity.transfer( msg.sender , balance ) ;\n    }\n\n    function wdall() public onlyOwner {\n        wd(token0) ;\n        wd(token1) ;\n    }\n\n}"}}}