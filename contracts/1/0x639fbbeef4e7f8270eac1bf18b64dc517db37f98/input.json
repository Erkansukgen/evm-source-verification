{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "buyDelta.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n//pragma solidity ^0.7.0;\n\npragma solidity ^0.6.6;\n\ninterface IUniswapV2Router02{\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IERC20 {\n    function balanceOf(address owner) external view returns (uint);\n}\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n}\n\ncontract Owned {\n\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Only owner can do this\");\n        _;\n    }\n\n    function kill()\n        public\n        onlyOwner\n    {\n        selfdestruct(msg.sender);\n    }\n\n}\n\ninterface ILSW {\n    function endLiquidityDeployment() external;\n}\n\n\ncontract ArbitragePrivate is Owned {\n    address public _token;\n    address _weth;\n    //address _usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n    uint public _ethAmount;\n    uint public _amountOutMin;\n    IUniswapV2Router02 uniswapRouterV2 = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n    uint deadline = 1645388420; // 20.02.2022 20:20:20\n\n    constructor() public {\n        // mainnet\n        //_weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n        // ropsten\n        //_weth = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n        _weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n        //_token = 0xE61fDAF474Fac07063f2234Fb9e60C1163Cfa850;\n        \n        //_ethAmount = 5 ether;\n        //_amountOutMin = 22000 ether;\n    }\n    \n    function setParameters(address token, uint ethAmount, uint amountOutMin) public onlyOwner {\n        _token = token;\n        _ethAmount = ethAmount;\n        _amountOutMin = amountOutMin;\n    }\n\n    function swapForward(uint ethAmount, uint amountOutMin, address[] memory path)\n        public\n        returns (uint[] memory amounts)\n    {\n        require ((path[0] == _weth) && (path[path.length - 1] == _token), \"Wrong path\");\n        while (address(this).balance >= ethAmount && gasleft() > 100000) {\n            amounts = uniswapRouterV2.getAmountsOut(ethAmount, path);\n            if (amounts[path.length - 1] < amountOutMin) {\n                break;\n            }\n            amounts = uniswapRouterV2.swapExactETHForTokens{value: ethAmount}(amountOutMin, path, owner, deadline);  \n        }\n    }\n\n    function listAndbuyDelta() public {\n        ILSW delta_lsw = ILSW(0xdaFCE5670d3F67da9A3A44FE6bc36992e5E2beaB);\n        delta_lsw.endLiquidityDeployment();\n        address[] memory path = new address[](2);\n        path[0] = _weth;\n        path[2] = _token;\n        swapForward(_ethAmount, _amountOutMin, path);\n    }\n\n    function withdrawEther() external onlyOwner {\n        payable(address(owner)).transfer(address(this).balance);\n    }\n    \n    function withdrawTokens(address token) public onlyOwner {\n        uint balance = IERC20(token).balanceOf(address(this));\n        TransferHelper.safeTransfer(token, owner, balance);\n    }\n\n    fallback () external {\n        address[] memory path = new address[](2);\n        path[0] = _weth;\n        path[2] = _token;\n        swapForward(_ethAmount, _amountOutMin, path);\n    }\n\n     receive() external payable {}\n}"
    }
  }
}