{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Staking.sol": {
      "content": "pragma solidity ^0.8.0;\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed approved,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId)\n        external\n        view\n        returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index)\n        external\n        view\n        returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: value}(\n            data\n        );\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nlibrary Strings {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this;\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string internal _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Base URI\n    string private _tokenBaseURI;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165, IERC165)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        require(\n            owner != address(0),\n            \"ERC721: balance query for the zero address\"\n        );\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        address owner = _owners[tokenId];\n        require(\n            owner != address(0),\n            \"ERC721: owner query for nonexistent token\"\n        );\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721Metadata: URI query for nonexistent token\"\n        );\n\n        string memory baseURI = _baseURI();\n        return\n            bytes(baseURI).length > 0\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\n                : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return _tokenBaseURI;\n    }\n\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        _tokenBaseURI = baseURI_;\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721: approved query for nonexistent token\"\n        );\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved)\n        public\n        virtual\n        override\n    {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(\n            _checkOnERC721Received(from, to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721: operator query for nonexistent token\"\n        );\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner ||\n            getApproved(tokenId) == spender ||\n            isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(\n            ERC721.ownerOf(tokenId) == from,\n            \"ERC721: transfer of token that is not own\"\n        );\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try\n                IERC721Receiver(to).onERC721Received(\n                    _msgSender(),\n                    from,\n                    tokenId,\n                    _data\n                )\n            returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\n                        \"ERC721: transfer to non ERC721Receiver implementer\"\n                    );\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n\ninterface Token is IERC20 {\n    function burn(address account, uint256 amount) external returns (bool);\n}\n\ninterface Collection is IERC721 {\n    function getTokenClanId(uint256 id) external view returns (uint8);\n}\n\ncontract Staking is IERC721Receiver, Ownable {\n    struct Staker {\n        uint256 islApes;\n        uint256 genApes;\n        uint256[] islApeIDs;\n        uint256[] genApeIDs;\n        uint256 multiplier;\n        uint256 rewarded;\n        uint256 recent;\n    }\n\n    uint256 public _rate = 5 ether;\n    uint256 public _multiplier = 10;\n    uint256 public _pack = 2;\n\n    mapping(address => Staker) private _stakingDetails;\n\n    uint256 private _totalStakedIslApes;\n    uint256 private _totalStakedGenApes;\n    uint256 private _totalStakedRewards;\n\n    address public immutable _APE_ONLY_ISLAND_COLLECTION_CA;\n    address public immutable _GENESIS_APE_ONLY_CA;\n\n    address public _APE_ONLY_ISLAND_TOKEN_CA;\n\n    event Staked(address indexed account, uint256 id);\n\n    event Unstaked(address indexed account, uint256 id);\n\n    event Rewarded(address indexed account, uint256 amount);\n\n    event Funded(address indexed account, uint256 amount);\n\n    constructor() {\n        _APE_ONLY_ISLAND_TOKEN_CA = 0x3aF3eeC33fE5B1af5cE4E1F3BA32e64Ab78912B2;\n        _APE_ONLY_ISLAND_COLLECTION_CA = 0x260428e36989ee6c6829F8a6E361cba99C7a8447;\n        _GENESIS_APE_ONLY_CA = 0xf1e0bEcA4eac65F902466881CDfDD0099D91e47b;\n    }\n\n    function setTokenAddress(address token) external onlyOwner returns (bool) {\n        _APE_ONLY_ISLAND_TOKEN_CA = token;\n        return true;\n    }\n\n    function stakeWithMultiplier(\n        uint256 packs,\n        uint256[] calldata islApes,\n        uint256[] calldata genApes\n    ) external returns (bool) {\n        address account = _msgSender();\n        uint256 minimum = _pack * packs;\n\n        require(\n            _totalStakedRewards > 0,\n            \"Staking: no staking rewards available\"\n        );\n\n        require(\n            packs > 0,\n            \"Staking: minimum argument of island apes not valid\"\n        );\n\n        require(\n            IERC721(_APE_ONLY_ISLAND_COLLECTION_CA).balanceOf(account) >=\n                minimum,\n            \"Staking: minimum of island apes for pack size not found\"\n        );\n\n        uint256 islApesLength = islApes.length;\n        uint256 genApesLength = genApes.length;\n\n        require(\n            genApesLength <= islApesLength,\n            \"Staking: genesis ape length must not be larger than island ape length\"\n        );\n\n        require(\n            islApesLength == minimum,\n            \"Staking: minimum of island apes for pack size not found\"\n        );\n\n        require(\n            _stakingDetails[account].islApes == 0,\n            \"Staking: account must unstake to stake\"\n        );\n\n        uint8 packsClan = getClanId(islApes[0]);\n\n        for (uint256 i = 0; i < islApesLength; i++) {\n            require(\n                IERC721(_APE_ONLY_ISLAND_COLLECTION_CA).ownerOf(islApes[i]) ==\n                    account,\n                \"Staking: account must be the owner of all island ape <ID> inputs\"\n            );\n\n            require(\n                packsClan == getClanId(islApes[i]),\n                \"Staking: all apes have to be from same clan\"\n            );\n\n            IERC721(_APE_ONLY_ISLAND_COLLECTION_CA).transferFrom(\n                account,\n                address(this),\n                islApes[i]\n            );\n            _stakingDetails[account].islApeIDs.push(islApes[i]);\n            emit Staked(account, islApes[i]);\n        }\n\n        for (uint256 i = 0; i < genApesLength; i++) {\n            require(\n                IERC721(_GENESIS_APE_ONLY_CA).ownerOf(genApes[i]) == account,\n                \"Staking: account must be the owner of all genesis ape <ID> inputs\"\n            );\n\n            IERC721(_GENESIS_APE_ONLY_CA).transferFrom(\n                account,\n                address(this),\n                genApes[i]\n            );\n            _stakingDetails[account].genApeIDs.push(genApes[i]);\n            emit Staked(account, genApes[i]);\n        }\n\n        _stakingDetails[account].islApes += islApesLength;\n        _stakingDetails[account].genApes += genApesLength;\n\n        _stakingDetails[account].multiplier = _multiplier * genApesLength;\n        _stakingDetails[account].recent = block.timestamp;\n\n        _totalStakedIslApes += islApesLength;\n        _totalStakedGenApes += genApesLength;\n\n        return true;\n    }\n\n    function stake(uint256 packs, uint256[] calldata islApes)\n        external\n        returns (bool)\n    {\n        address account = _msgSender();\n        uint256 minimum = _pack * packs;\n\n        require(\n            _totalStakedRewards > 0,\n            \"Staking: no staking rewards available\"\n        );\n\n        require(\n            IERC721(_APE_ONLY_ISLAND_COLLECTION_CA).balanceOf(account) >=\n                minimum,\n            \"Staking: minimum of island apes for pack size not found\"\n        );\n\n        uint256 islApesLength = islApes.length;\n\n        require(\n            islApesLength == minimum,\n            \"Staking: input of island apes and minimum must match\"\n        );\n\n        require(\n            _stakingDetails[account].islApes == 0,\n            \"Staking: account must unstake to stake\"\n        );\n\n        uint8 packsClan = getClanId(islApes[0]);\n\n        for (uint256 i = 0; i < islApesLength; i++) {\n            require(\n                packsClan == getClanId(islApes[i]),\n                \"Staking: all apes have to be from same clan\"\n            );\n\n            require(\n                IERC721(_APE_ONLY_ISLAND_COLLECTION_CA).ownerOf(islApes[i]) ==\n                    account,\n                \"Staking: account must be the owner of all island ape <ID> inputs\"\n            );\n\n            IERC721(_APE_ONLY_ISLAND_COLLECTION_CA).safeTransferFrom(\n                account,\n                address(this),\n                islApes[i]\n            );\n            _stakingDetails[account].islApeIDs.push(islApes[i]);\n            emit Staked(account, islApes[i]);\n        }\n\n        _stakingDetails[account].islApes += islApesLength;\n        _stakingDetails[account].recent = block.timestamp;\n        _totalStakedIslApes += islApesLength;\n        return true;\n    }\n\n    function unstake() external returns (bool) {\n        address account = _msgSender();\n\n        require(\n            _stakingDetails[account].islApes > 0,\n            \"Staking: no staked island apes found\"\n        );\n\n        uint256 islApes = _stakingDetails[account].islApes;\n        uint256[] memory islApeIDs = _stakingDetails[account].islApeIDs;\n\n        uint256 genApes = _stakingDetails[account].genApes;\n        uint256[] memory genApeIDs = _stakingDetails[account].genApeIDs;\n\n        if (getAccountRewardsAvailable(account) > 0) reward();\n\n        delete _stakingDetails[account].islApes;\n        delete _stakingDetails[account].genApes;\n        delete _stakingDetails[account].islApeIDs;\n        delete _stakingDetails[account].genApeIDs;\n        delete _stakingDetails[account].multiplier;\n\n        for (uint256 i = 0; i < islApes; i++) {\n            ERC721(_APE_ONLY_ISLAND_COLLECTION_CA).safeTransferFrom(\n                address(this),\n                account,\n                islApeIDs[i]\n            );\n            emit Unstaked(account, islApeIDs[i]);\n        }\n\n        for (uint256 i = 0; i < genApes; i++) {\n            ERC721(_GENESIS_APE_ONLY_CA).safeTransferFrom(\n                address(this),\n                account,\n                genApeIDs[i]\n            );\n            emit Unstaked(account, genApeIDs[i]);\n        }\n\n        _totalStakedIslApes -= islApes;\n        _totalStakedGenApes -= genApes;\n        return true;\n    }\n\n    function fund(uint256 amount) external returns (bool) {\n        require(amount > 0, \"Staking: must be a valid amount\");\n\n        address account = _msgSender();\n\n        require(\n            IERC20(_APE_ONLY_ISLAND_TOKEN_CA).balanceOf(account) >= amount,\n            \"Staking: no island tokens found\"\n        );\n\n        require(\n            IERC20(_APE_ONLY_ISLAND_TOKEN_CA).transferFrom(\n                account,\n                address(this),\n                amount\n            ),\n            \"Staking: transfer of staked rewards failed\"\n        );\n\n        _totalStakedRewards += amount;\n\n        emit Funded(account, amount);\n        return true;\n    }\n\n    function emergencyUnstake() external returns (bool) {\n        address account = _msgSender();\n\n        require(\n            _stakingDetails[account].islApes > 0,\n            \"Staking: no staked island apes found\"\n        );\n\n        uint256 islApes = _stakingDetails[account].islApes;\n        uint256[] memory islApeIDs = _stakingDetails[account].islApeIDs;\n\n        uint256 genApes = _stakingDetails[account].genApes;\n        uint256[] memory genApeIDs = _stakingDetails[account].genApeIDs;\n\n        delete _stakingDetails[account].islApes;\n        delete _stakingDetails[account].genApes;\n        delete _stakingDetails[account].islApeIDs;\n        delete _stakingDetails[account].genApeIDs;\n        delete _stakingDetails[account].multiplier;\n\n        for (uint256 i = 0; i < islApes; i++) {\n            ERC721(_APE_ONLY_ISLAND_COLLECTION_CA).safeTransferFrom(\n                address(this),\n                account,\n                islApeIDs[i]\n            );\n            emit Unstaked(account, islApeIDs[i]);\n        }\n\n        for (uint256 i = 0; i < genApes; i++) {\n            ERC721(_GENESIS_APE_ONLY_CA).safeTransferFrom(\n                address(this),\n                account,\n                genApeIDs[i]\n            );\n            emit Unstaked(account, genApeIDs[i]);\n        }\n\n        _totalStakedIslApes -= islApes;\n        _totalStakedGenApes -= genApes;\n        return true;\n    }\n\n    function emergencyWithdraw() external onlyOwner returns (bool) {\n        address account = _msgSender();\n\n        require(\n            _totalStakedRewards > 0,\n            \"Staking: no staking rewards available\"\n        );\n\n        require(\n            Token(_APE_ONLY_ISLAND_TOKEN_CA).transfer(\n                account,\n                _totalStakedRewards\n            ),\n            \"Staking: transfer of staked rewards failed\"\n        );\n\n        delete _totalStakedRewards;\n\n        return true;\n    }\n\n    function setRewardRate(uint256 amount) external onlyOwner returns (bool) {\n        _rate = amount;\n        return true;\n    }\n\n    function setRewardMultiplier(uint256 amount)\n        external\n        onlyOwner\n        returns (bool)\n    {\n        _multiplier = amount;\n        return true;\n    }\n\n    function setPackSize(uint256 amount) external onlyOwner returns (bool) {\n        _rate = amount;\n        return true;\n    }\n\n    function getRewardRate() external view returns (uint256) {\n        //return global reward rate per staked island ape\n        return _rate;\n    }\n\n    function getGenesisMultiplier() external view returns (uint256) {\n        //return global multiplier % from staking genesis apes\n        return _multiplier;\n    }\n\n    function getPackSize() external view returns (uint256) {\n        //return global pack size required to stake\n        return _pack;\n    }\n\n    function getTotalStakedGenesisApes() external view returns (uint256) {\n        //return total staked genesis apes in contract\n        return _totalStakedGenApes;\n    }\n\n    function getTotalStakedIslandApes() external view returns (uint256) {\n        //return total staked island apes in contract\n        return _totalStakedIslApes;\n    }\n\n    function getTotalStakedRewards() external view returns (uint256) {\n        //return total funded rewards in contract\n        return _totalStakedRewards;\n    }\n\n    function getAccountStakedIslandApes(address account)\n        external\n        view\n        returns (uint256)\n    {\n        //return amount of island apes staked by account\n        return _stakingDetails[account].islApes;\n    }\n\n    function getAccountStakedGenesisApes(address account)\n        external\n        view\n        returns (uint256)\n    {\n        //return amount of genesis apes staked by account\n        return _stakingDetails[account].genApes;\n    }\n\n    function getAccountStakedIslandApeIDs(address account)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        //return all island apes by id staked by account\n        return _stakingDetails[account].islApeIDs;\n    }\n\n    function getAccountStakedGenesisApeIDs(address account)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        //return all genesis apes by id staked by account\n        return _stakingDetails[account].genApeIDs;\n    }\n\n    function getAccountReward(address account) external view returns (uint256) {\n        //return all rewards earned by account\n        return _stakingDetails[account].rewarded;\n    }\n\n    function getAccountMultiplier(address account)\n        external\n        view\n        returns (uint256)\n    {\n        //return reward multiplier by account\n        return _stakingDetails[account].multiplier;\n    }\n\n    function getAccountRecentActivity(address account)\n        external\n        view\n        returns (uint256)\n    {\n        //return most recent activity by account\n        return _stakingDetails[account].recent;\n    }\n\n    function reward() public returns (bool) {\n        address account = _msgSender();\n\n        require(_totalStakedRewards > 0, \"Staking: no rewards available\");\n\n        uint256 rewards = getAccountRewardsAvailable(account);\n\n        require(rewards > 0, \"Staking: no rewards earned\");\n\n        _stakingDetails[account].rewarded += rewards;\n        _stakingDetails[account].recent = block.timestamp;\n\n        require(\n            IERC20(_APE_ONLY_ISLAND_TOKEN_CA).transfer(account, rewards),\n            \"Staking: transfer of rewards failed\"\n        );\n\n        _totalStakedRewards -= rewards;\n\n        emit Rewarded(account, rewards);\n        return true;\n    }\n\n    function getAccountRewardsAvailable(address account)\n        public\n        view\n        returns (uint256)\n    {\n        if (_totalStakedRewards > 0) {\n            uint256 start = _stakingDetails[account].recent;\n            uint256 duration;\n\n            if (block.timestamp - start >= 86400) {\n                duration = (block.timestamp - start) / 86400;\n                return getAccountRewardsEstimatedDaily(account) * duration;\n            }\n        }\n        return 0;\n    }\n\n    function getAccountRewardsEstimatedDaily(address account)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 staked = _stakingDetails[account].islApes;\n        uint256 multiplier = _stakingDetails[account].multiplier;\n        uint256 reward = _rate * staked;\n\n        //return processed reward with multiplier\n        return reward + ((reward * multiplier) / 100);\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    function getClanId(uint256 apeId) private view returns (uint8) {\n        return Collection(_APE_ONLY_ISLAND_COLLECTION_CA).getTokenClanId(apeId);\n    }\n}\n"
    }
  }
}