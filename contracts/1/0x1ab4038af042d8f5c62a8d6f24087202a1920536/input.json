{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/GravityV1.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.7.6;\r\n\r\ncontract GravityV1 {\r\n    address payable owner;\r\n    \r\n    uint256 public totalUser;\r\n    uint256 public totalBet;\r\n    mapping(address => bool) public used;\r\n    \r\n    uint256 public constant DEC = 10**16;\r\n    uint256 public constant MIN = 1;\r\n    uint256 constant _MAX = 65537;\r\n    uint256[11] public BOX = [64, 1024, 4096, 8192, 16384, 24576, 32768, 40960, 49152, 57344, 61440];\r\n    uint256[11] public MAX = [5, 25, 70, 100, 200, 250, 1000, 1300, 1800, 3000, 5000];\r\n    uint256[11] public MULTIPLIER = [76799500, 5247500, 1407500, 719500, 369500, 252833, 192500, 153900, 128167, 109786, 102433];\r\n    \r\n    event Dice(address player, uint256 value, uint256 betNumber, uint256 result, string status);\r\n    \r\n    modifier canBet(uint256 betNumber){\r\n        require(msg.value >= MIN * DEC  && msg.value <= MAX[betNumber] * DEC && betNumber >= 0 && betNumber <= 10, \"Do not meet the requirements\");\r\n        _;\r\n    }\r\n    \r\n    modifier isOwner(){\r\n        require(msg.sender == owner,\"Access is not available\");\r\n        _;\r\n    }\r\n    \r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    fallback() external {\r\n    \r\n    }\r\n    \r\n    function bet(uint256 betNumber) public payable canBet(betNumber) {\r\n        totalBet++;\r\n        if (!used[msg.sender]){\r\n            totalUser++;\r\n            used[msg.sender] = true;\r\n        }\r\n        \r\n        uint256 res = uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, totalUser + totalBet + betNumber + gasleft()))) % _MAX;\r\n        uint256 reward = msg.value * MULTIPLIER[betNumber] / 10**5;\r\n        \r\n        if (res < BOX[betNumber] && address(this).balance >= reward){\r\n            msg.sender.transfer(reward);\r\n            emit Dice(msg.sender, msg.value, BOX[betNumber], res, \"WIN\");\r\n        } else {\r\n            emit Dice(msg.sender, msg.value, BOX[betNumber], res, \"Lose\");\r\n        }\r\n    }\r\n    \r\n    function withdraw() public isOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n}"}}}