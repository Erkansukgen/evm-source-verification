{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "KryptonStakeToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.4;\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c=a+b;\n        require(c>=a,\"addition overflow\");\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b<=a,\"subtraction overflow\");\n        uint256 c=a-b;\n        return c;\n    }\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a==0) return 0;\n        uint256 c=a*b;\n        require(c/a==b,\"multiplication overflow\");\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b>0,\"division by zero\");\n        uint256 c=a/b;\n        return c;\n    }\n}\n\ncontract Owned {\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    address payable owner;\n    address payable newOwner;\n    function changeOwner(address payable _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        if (msg.sender == newOwner) {\n            owner = newOwner;\n        }\n    }\n}\n\ncontract ERC20 {\n    using SafeMath for uint256;\n    string public symbol;\n    string public name;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    mapping (address=>uint256) balances;\n    mapping (address=>mapping (address=>uint256)) allowed;\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {return balances[_owner];}\n\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\n        require (balances[msg.sender]>=_amount&&_amount>0);\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(msg.sender,_to,_amount);\n        return true;\n    }\n\n    function transferFrom(address _from,address _to,uint256 _amount) public returns (bool success) {\n        require (balances[_from]>=_amount&&allowed[_from][msg.sender]>=_amount&&_amount>0);\n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to]  = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n        allowed[msg.sender][_spender]=_amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n}\n\ncontract KryptonStakeToken is Owned,ERC20{\n    using SafeMath for uint256;\n    uint8 public profit;\n    uint8[5] public mlm;\n    uint8 public fee;\n    struct Deposit {\n        address payable ref;\n        uint paid;\n    }\n    mapping (address=>Deposit) deposits;\n    event Mint(address indexed _from, uint256 _value);\n    event Profit(address indexed _to, uint256 _value);\n    \n    constructor() {\n        symbol = \"CRYPT\";\n        name = \"Krypton Stake Token\";\n        decimals = 18;\n        profit = 36;\n        fee = 1;\n        mlm = [9,6,3,1,1];\n        totalSupply = 0;\n        owner = msg.sender;\n    }\n    \n    receive() external payable {\n        revert();\n    }\n    \n    function buyToken(address payable ref) public payable returns (bool) {\n        require(msg.value>0);\n        if (ref==address(0)||ref==msg.sender||ref==address(this)) ref = owner;\n        balances[msg.sender] = balances[msg.sender].add(msg.value);\n        totalSupply = totalSupply.add(msg.value);\n        deposits[msg.sender].ref = ref;\n        deposits[msg.sender].paid = block.timestamp;\n        uint256 _bonus = (msg.value.mul(mlm[0])).div(100);\n        balances[ref] = balances[ref].add(_bonus);\n        totalSupply = totalSupply.add(_bonus);\n        uint256 _fee = (msg.value.mul(fee)).div(100);\n        balances[owner] = balances[owner].add(_fee);\n        totalSupply = totalSupply.add(_fee);\n        emit Mint(msg.sender,msg.value);\n        return true;\n    }\n    \n    function calcProfit(address _user) public view returns(uint16 _period,uint256 _profit){\n        if (balances[_user]==0) return (0,0);\n        _period = uint16((block.timestamp-deposits[_user].paid)/86400);\n        _profit = uint256((balances[_user].mul(_period)).mul(profit)).div(36500);\n        return (_period,_profit);\n    }\n    \n    function getProfit() public payable returns (uint256 _value){\n        require(balances[msg.sender]>0,\"emptydeposit\");\n        (uint16 _period,uint256 _profit) = calcProfit(msg.sender);\n        require(_period>0&&_profit>0,\"emptyprofit\");\n        _value = _profit;\n        address ref = deposits[msg.sender].ref;\n        uint levels = mlm.length;\n        for(uint8 i=0;i<levels;i++){\n            uint256 b = uint256(_profit*mlm[i]/100);\n            if (b>0) {\n                balances[ref] = balances[ref].add(b);\n                totalSupply = totalSupply.add(b);\n                _value = _value.sub(b);\n            }\n            ref = deposits[ref].ref;\n            if (ref==owner) break;\n        }\n        require(address(this).balance>=_value);\n        deposits[msg.sender].paid = block.timestamp;\n        msg.sender.transfer(_value);\n        emit Profit(msg.sender,_value);\n        return _value;\n    }\n    \n    function getDeposit(address _user) public view returns (address ref, uint paid){\n        require(_user!=address(0),\"wronguser\");\n        return (deposits[_user].ref,deposits[_user].paid);\n    }\n}"
    }
  }
}