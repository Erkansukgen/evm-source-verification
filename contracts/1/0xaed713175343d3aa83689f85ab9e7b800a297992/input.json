{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/BaoVotes.sol":{"content":"/**\n *Submitted for verification at Etherscan.io on 2020-09-12\n*/\n\npragma solidity ^0.6.12;\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n    function unlockedSupply() external view returns (uint256);\n    function totalLock() external view returns (uint256);\n    function lockOf(address account) external view returns (uint256);\n}\n\ninterface IPair {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function getReserves() external view returns (uint112, uint112, uint32);\n}\n\ninterface IMasterChef {\n    function userInfo(uint256 nr, address who) external view returns (uint256, uint256);\n    function pendingbao(uint256 nr, address who) external view returns (uint256);\n}\n\ncontract BaoVotes {\n  using SafeMath for uint256;\n  \n  function name() public pure returns(string memory) { return \"BaoVotes\"; }\n  function symbol() public pure returns(string memory) { return \"BaoVotes\"; }\n  function decimals() public pure returns(uint8) { return 18; }  \n\n  function totalSupply() public view returns (uint256) {\n    IPair pair = IPair(0x9973bb0fE5F8DF5dE730776dF09E946c74254fb3);\n    IERC20 bao = IERC20(0x374CB8C27130E2c9E04F44303f3c8351B9De61C1);\n    (uint256 lp_totalbao, , ) = pair.getReserves();\n    (uint256 unlockedTotal) = bao.unlockedSupply();\n    (uint256 lockedTotal) = bao.totalLock();\n\n    return lp_totalbao.mul(3).add(unlockedTotal.div(4)).add(lockedTotal.div(3));\n  }\n\n  function balanceOf(address owner) public view returns (uint256) {\n    IMasterChef chef = IMasterChef(0xBD530a1c060DC600b951f16dc656E4EA451d1A2D);\n    IERC20 bao = IERC20(0x374CB8C27130E2c9E04F44303f3c8351B9De61C1);\n    IPair pair = IPair(0x9973bb0fE5F8DF5dE730776dF09E946c74254fb3);\n    \n    (uint256 reserves, ,) = pair.getReserves();\n    (uint256 lp_totalbao, ) = chef.userInfo(0, owner);\n    uint256 pairTotal = pair.totalSupply();\n    uint256 locked_balance = bao.lockOf(owner);\n    uint256 bao_balance = bao.balanceOf(owner).mul(25).div(100);\n\n    // Add locked balance\n    uint256 userShare = lp_totalbao.div(pairTotal);\n    uint256 pairUnderlying = reserves.mul(userShare).mul(100);\n    uint256 lp_balance = pairUnderlying.mul(3);\n    lp_balance = lp_balance.add(locked_balance.mul(33).div(100));\n    \n    // Add user bao balance\n    uint256 lp_powah = lp_balance.add(bao_balance);\n\n    \n    return lp_powah;\n  }\n\n  function allowance(address, address) public pure returns (uint256) { return 0; }\n  function transfer(address, uint256) public pure returns (bool) { return false; }\n  function approve(address, uint256) public pure returns (bool) { return false; }\n  function transferFrom(address, address, uint256) public pure returns (bool) { return false; }\n}"}}}