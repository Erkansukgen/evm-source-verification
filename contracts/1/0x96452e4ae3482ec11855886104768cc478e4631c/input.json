{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"AutoSellFEI.sol":{"content":"pragma solidity ^0.6.6;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\ninterface WETH is IERC20{\n    function deposit() external payable;\n}\ninterface GenesisGroup is IERC20{\n    function core() external view returns (address);\n    function launchBlock() external view returns (uint256);\n    function purchase(address to, uint256 value) external payable;\n    function commit(address from,address to,uint256 amount) external;\n    function redeem(address to) external ;\n    function getAmountsToRedeem(address to) external view returns (uint256 feiAmount,uint256 genesisTribe,uint256 idoTribe);\n}\ninterface ICore {\n    function hasGenesisGroupCompleted() external view returns (bool);\n}\ninterface IUniswapV2Factory {\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\ninterface IUniswapV2Pair {\n  function token0() external view returns (address);\n  function token1() external view returns (address);\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n}\ninterface IUniswapV2 {\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    \n}\ncontract AutoSellFEI {\n    address payable public owner;\n    \n    address public FGEN  = 0xBFfB152b9392e38CdDc275D818a3Db7FE364596b;\n    address public Tribe = 0xc7283b66Eb1EB5FB86327f08e1B5816b0720212B;\n    address public Fei   = 0x956F47F50A910163D8BF957Cf5846D573E7f87CA;\n    \n    address public Route = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; \n    address public Factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f; //uniswap\n    //address public Factory = 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac; //sushiswap\n    \n    address public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; \n    \n    constructor () public {\n        owner = msg.sender;\n    }\n    \n    modifier onlyOwner {\n        require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n        _;\n    }\n    \n    \n    \n    function task(uint minGetAmount) public{\n        //IERC20(FGEN).transferFrom(owner,address(this), IERC20(FGEN).balanceOf(owner) ); //transfer FGEN\n        GenesisGroup(FGEN).redeem(owner);       //need approve FGEN\n        uint outToken = Token2Token(Fei,WETH);  //need approve FEI\n        require(outToken >= minGetAmount, \"Less than minimum target.\");\n    }\n    \n    \n    function Token2Token(address token0,address token1) public returns(uint outToken){\n        address Pair = IUniswapV2Factory(Factory).getPair(token0,token1);\n        \n        address Pairtoken0 = IUniswapV2Pair(Pair).token0();\n         (uint112 _reserve0, uint112 _reserve1,) = IUniswapV2Pair(Pair).getReserves();\n        \n        uint beforePairBalance = IERC20(token0).balanceOf(Pair);\n        IERC20(token0).transferFrom(owner, Pair, IERC20(token0).balanceOf(owner));\n        uint afterPairBalance = IERC20(token0).balanceOf(Pair);\n        uint actual = afterPairBalance - beforePairBalance;\n        \n        if (Pairtoken0 == token0){\n            outToken = IUniswapV2(Route).getAmountOut(actual,_reserve0,_reserve1);\n            IUniswapV2Pair(Pair).swap(0, outToken, owner, new bytes(0));\n        }else{\n            outToken = IUniswapV2(Route).getAmountOut(actual,_reserve1,_reserve0);\n            IUniswapV2Pair(Pair).swap(outToken, 0, owner, new bytes(0));\n        }\n    }\n    \n    \n    function isOpen() public view returns (bool){\n        if (ICore(GenesisGroup(FGEN).core()).hasGenesisGroupCompleted() && block.number >= GenesisGroup(FGEN).launchBlock()){\n            return true;\n        }else{\n            return false;\n        }\n    }\n    \n    function getReserves(address token0,address token1) public view returns (uint112 _reserve0, uint112 _reserve1, bool Open){\n        address Pair = IUniswapV2Factory(Factory).getPair(token0,token1);\n        ( _reserve0, _reserve1,) = IUniswapV2Pair(Pair).getReserves();\n        Open = isOpen();\n    }\n    \n    \n    //withdraw ERC20 Token\n    function transfer(address token, address dst, uint wad) external onlyOwner {\n         (bool success,  ) = address(token).call{value: 0 ether}(abi.encodeWithSignature(\"transfer(address,uint256)\",dst,wad));\n         require(success, \"Contract execution Failed\");\n    }\n    receive() external payable {\n        \n    }\n    fallback() external payable {\n        \n    }\n    function withdraw(uint wad) external onlyOwner {\n        owner.transfer(wad);\n    }\n    function kill() external onlyOwner {\n        selfdestruct(owner); // 销毁合约\n    }\n    \n}"}}}