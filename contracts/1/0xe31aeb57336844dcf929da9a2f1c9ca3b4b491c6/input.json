{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"/Simon/test/1/0xe31aeb57336844DCF929Da9a2F1c9Ca3B4B491C6/contracts/ILendingPool.sol":{"content":"pragma solidity >=0.5.0;\r\n\r\ninterface ILendingPool {\r\n\r\n    function liquidationCall(\r\n            address _collateral,\r\n            address _reserve,\r\n            address _user,\r\n            uint256 _purchaseAmount,\r\n            bool _receiveAToken\r\n        ) external payable;\r\n\r\n\r\n    function getUserAccountData(address _user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalLiquidityETH,\r\n            uint256 totalCollateralETH,\r\n            uint256 totalBorrowsETH,\r\n            uint256 totalFeesETH,\r\n            uint256 availableBorrowsETH,\r\n            uint256 currentLiquidationThreshold,\r\n            uint256 ltv,\r\n            uint256 healthFactor\r\n        );\r\n        \r\n    function getUserReserveData(address _reserve, address _user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 currentATokenBalance,\r\n            uint256 currentBorrowBalance,\r\n            uint256 principalBorrowBalance,\r\n            uint256 borrowRateMode,\r\n            uint256 borrowRate,\r\n            uint256 liquidityRate,\r\n            uint256 originationFee,\r\n            uint256 variableBorrowIndex,\r\n            uint256 lastUpdateTimestamp,\r\n            bool usageAsCollateralEnabled\r\n        );\r\n}\r\n"},"/Simon/test/1/0xe31aeb57336844DCF929Da9a2F1c9Ca3B4B491C6/contracts/Liquidate.sol":{"content":"pragma solidity 0.5.17;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./UniswapFlashSwapper.sol\";\r\nimport \"./ILendingPool.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./uniswap/IUniswapV2Router02.sol\";\r\n\r\ncontract Liquidate is UniswapFlashSwapper {\r\n    using SafeMath for uint256;\r\n\r\n    // Core: ropsten 0x4295Ee704716950A4dE7438086d6f0FBC0BA9472 // main 0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3\r\n    address core = address(0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3);\r\n\r\n    // Pool: ropsten 0x9E5C7835E4b13368fd628196C4f1c6cEc89673Fa  // main 0x398eC7346DcD622eDc5ae82352F02bE94C62d119\r\n    address lp = address(0x398eC7346DcD622eDc5ae82352F02bE94C62d119); \r\n\r\n    address _unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // same in ropsten\r\n    ILendingPool pool = ILendingPool(lp);\r\n    address payable owner;\r\n    mapping (address => bool) access;\r\n\r\n    struct LiquidationInfo {\r\n        address user;\r\n    }\r\n\r\n    constructor() public { \r\n        owner = msg.sender;\r\n        access[msg.sender] = true;\r\n        access[address(0x423db545F21b2Dbe673D85a4125fC2903dDFB684)] = true; // acc2\r\n        access[address(0x1b8515B46E00680A5FBA393c1b659FAf3f4f5B4e)] = true; // acc3\r\n        access[address(0xDFed12f3994D7cBb326CCcfa0E41DA5Fb8BC20fE)] = true; // acc4\r\n        access[address(0xcC9c7c354f8ab093016f6844D0d064382C6E4e90)] = true; // acc5\r\n        access[address(0x75b8862b3d44B8702dCFF29E3043033F4c6C29E9)] = true; // acc6\r\n        access[address(0xb0f29Db931254921aA4b68679C89d608C13eFe58)] = true; // acc7\r\n        access[address(0x202E28987A94D0e60702659FCc008e3858FAe456)] = true; // acc8\r\n        access[address(0x74FE5B53ce6493321Fe780A27B990094AA45a555)] = true; // acc9\r\n        access[address(0x0b7A87a6faAa55A92f32D813bBA1EC818cdfB04E)] = true; // acc10\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not owner!\");\r\n        _;\r\n    }\r\n\r\n    /* ACCESS ***/\r\n\r\n    modifier onlyAccess() {\r\n        require(access[msg.sender] == true, \"no access\");\r\n        _;\r\n    }\r\n\r\n    function hasAccess(address addr) external view returns(bool) {\r\n        return access[addr];\r\n    }\r\n\r\n        function addAccess(address addr) onlyOwner public {\r\n        access[addr] = true;\r\n    }\r\n\r\n    function removeAccess(address addr) onlyOwner public {\r\n        access[addr] = false;\r\n    }\r\n\r\n    function addGroupAccess(address[] memory addresses) onlyOwner public {\r\n        for(uint i = 0; i < addresses.length; i++) {\r\n            access[addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeGroupAccess(address[] memory addresses) onlyOwner public {\r\n        for(uint i = 0; i < addresses.length; i++) {\r\n            access[addresses[i]] = false;\r\n        }\r\n    }\r\n\r\n    /* ACCESS ***/\r\n\r\n    function deposit() payable public {}\r\n\r\n    event TransferETH(address _to, uint256 amount);\r\n    function drainEther(uint256 amount) onlyOwner external payable {\r\n        uint256 balance = address(this).balance;\r\n        if( amount > balance) {\r\n            amount = balance;\r\n        }\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function getOwner() external view returns(address) {\r\n        return owner;\r\n    }\r\n\r\n    function setOwner(address payable new_owner) onlyOwner external {\r\n        require(new_owner != address(0), \"burn address\");\r\n        owner = new_owner;\r\n    }\r\n\r\n    function recoverERC20(IERC20 _token, uint256 amount) onlyOwner external {\r\n        _token.transfer(owner, amount);\r\n    }\r\n\r\n    function flashSwap(address _tokenBorrow, uint256 _amount, address _tokenPay, address _user, address[] calldata convert) onlyAccess external { // bytes calldata _userData\r\n\r\n        uint256 health = 0;\r\n        (,,,,,,, health) = pool.getUserAccountData(_user);\r\n        require(health < 1e18, \"go home\");\r\n\r\n        address checkToken = _tokenBorrow;\r\n\r\n        if(_tokenBorrow == address(0)) {\r\n            checkToken = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n        }\r\n\r\n        uint256 borrowBalance = 0;\r\n        (, borrowBalance,,,,,,,,) = pool.getUserReserveData(checkToken, _user);\r\n\r\n        uint256 liquidateAmount = borrowBalance.div(100).mul(50);\r\n        _amount = liquidateAmount;\r\n\r\n        bytes memory _userData = abi.encode(LiquidationInfo({user: _user}));\r\n\r\n        startSwap(_tokenBorrow, _amount, _tokenPay, _userData);\r\n\r\n\r\n        //convert == True => collateral is not stablecoin => swap to stablecoin\r\n        if(convert.length > 0) {\r\n\r\n            IERC20 received = IERC20(_tokenPay);\r\n            uint256 balance_received = received.balanceOf(address(this));\r\n\r\n            if(balance_received > 0) {\r\n\r\n                IUniswapV2Router02 router = IUniswapV2Router02(_unirouter);\r\n                received.approve(_unirouter, balance_received);\r\n\r\n                uint256[] memory amounts = router.getAmountsOut(balance_received, convert);\r\n                \r\n                router.swapExactTokensForTokens(amounts[0], amounts[amounts.length-1], convert, address(this), block.timestamp +200);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------------\r\n    // ----------------------------------------------------------------------------------\r\n    // ----------------------------------------------------------------------------------\r\n    // ----------------------------------------------------------------------------------\r\n    \r\n\r\n    function execute(address _tokenBorrow, uint _amount, address _tokenPay, uint _amountToRepay, bytes memory _userData) internal {\r\n\r\n        LiquidationInfo memory info = abi.decode(_userData, (LiquidationInfo));\r\n\r\n        // do whatever you want here\r\n        address aaveETH = (0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n        if(_tokenBorrow == address(0)) {\r\n            _tokenBorrow = aaveETH;\r\n        }\r\n\r\n        if(_tokenPay == address(0)) {\r\n            _tokenPay = aaveETH;\r\n        }\r\n\r\n        //IERC20 collateral = IERC20(_tokenPay);\r\n        \r\n        uint256 _sendingValue = 0;\r\n        if (_tokenBorrow != aaveETH) {\r\n            IERC20 reserve = IERC20(_tokenBorrow);\r\n            reserve.approve(core, _amount);\r\n            // _amount = _amount;\r\n        } else {\r\n            _sendingValue = _amount;\r\n        }\r\n\r\n        pool.liquidationCall.value(_sendingValue)(_tokenPay, _tokenBorrow, info.user, _amount, false); //_amount\r\n    }\r\n}"},"/Simon/test/1/0xe31aeb57336844DCF929Da9a2F1c9Ca3B4B491C6/contracts/SafeMath.sol":{"content":"pragma solidity >=0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"},"/Simon/test/1/0xe31aeb57336844DCF929Da9a2F1c9Ca3B4B491C6/contracts/UniswapFlashSwapper.sol":{"content":"pragma solidity 0.5.17;\r\n\r\nimport \"./UniswapV2Interfaces.sol\";\r\n\r\n\r\ncontract UniswapFlashSwapper {\r\n\r\n    enum SwapType {SimpleLoan, SimpleSwap, TriangularSwap}\r\n\r\n    // CONSTANTS\r\n    IUniswapV2Factory constant uniswapV2Factory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f); // same for all networks\r\n    address constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // Mainnet: 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 Ropsten: 0xc778417E063141139Fce010982780140Aa0cD5Ab\r\n    address constant DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F); // Mainnet: 0x6B175474E89094C44Da98b954EedeAC495271d0F Ropsten: 0xf80A32A835F79D7787E8a8ee5721D0fEaFd78108\r\n    address constant ETH = address(0);\r\n\r\n    // ACCESS CONTROL\r\n    // Only the `permissionedPairAddress` may call the `uniswapV2Call` function\r\n    address permissionedPairAddress = address(1);\r\n\r\n    // Fallback must be payable\r\n    function() external payable {}\r\n\r\n    // @notice Flash-borrows _amount of _tokenBorrow from a Uniswap V2 pair and repays using _tokenPay\r\n    // @param _tokenBorrow The address of the token you want to flash-borrow, use 0x0 for ETH\r\n    // @param _amount The amount of _tokenBorrow you will borrow\r\n    // @param _tokenPay The address of the token you want to use to payback the flash-borrow, use 0x0 for ETH\r\n    // @param _userData Data that will be passed to the `execute` function for the user\r\n    // @dev Depending on your use case, you may want to add access controls to this \r\n    function startSwap(address _tokenBorrow, uint256 _amount, address _tokenPay, bytes memory _userData) internal {\r\n        bool isBorrowingEth;\r\n        bool isPayingEth;\r\n        address tokenBorrow = _tokenBorrow;\r\n        address tokenPay = _tokenPay;\r\n\r\n        if (tokenBorrow == ETH) {\r\n            isBorrowingEth = true;\r\n            tokenBorrow = WETH; // we'll borrow WETH from UniswapV2 but then unwrap it for the user\r\n        }\r\n        if (tokenPay == ETH) {\r\n            isPayingEth = true;\r\n            tokenPay = WETH; // we'll wrap the user's ETH before sending it back to UniswapV2\r\n        }\r\n        if (tokenBorrow == tokenPay) {\r\n            simpleFlashLoan(tokenBorrow, _amount, isBorrowingEth, isPayingEth, _userData);\r\n            return;\r\n        } else if (tokenBorrow == WETH || tokenPay == WETH) {\r\n            simpleFlashSwap(tokenBorrow, _amount, tokenPay, isBorrowingEth, isPayingEth, _userData);\r\n            return;\r\n        } else {\r\n            traingularFlashSwap(tokenBorrow, _amount, tokenPay, _userData);\r\n            \r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // @notice Function is called by the Uniswap V2 pair's `swap` function\r\n    function uniswapV2Call(address _sender, uint _amount0, uint _amount1, bytes calldata _data) external {\r\n        // access control\r\n        require(msg.sender == permissionedPairAddress, \"only permissioned UniswapV2 pair can call\");\r\n        require(_sender == address(this), \"only this contract may initiate\");\r\n\r\n        // decode data\r\n        (\r\n            SwapType _swapType,\r\n            address _tokenBorrow,\r\n            uint _amount,\r\n            address _tokenPay,\r\n            bool _isBorrowingEth,\r\n            bool _isPayingEth,\r\n            bytes memory _triangleData,\r\n            bytes memory _userData\r\n        ) = abi.decode(_data, (SwapType, address, uint, address, bool, bool, bytes, bytes));\r\n\r\n        if (_swapType == SwapType.SimpleLoan) {\r\n            simpleFlashLoanExecute(_tokenBorrow, _amount, msg.sender, _isBorrowingEth, _isPayingEth, _userData);\r\n            return;\r\n        } else if (_swapType == SwapType.SimpleSwap) {\r\n            simpleFlashSwapExecute(_tokenBorrow, _amount, _tokenPay, msg.sender, _isBorrowingEth, _isPayingEth, _userData);\r\n            return;\r\n        } else {\r\n            traingularFlashSwapExecute(_tokenBorrow, _amount, _tokenPay, _triangleData, _userData);\r\n        }\r\n\r\n        // NOOP to silence compiler \"unused parameter\" warning\r\n        if (false) {\r\n            _amount0;\r\n            _amount1;\r\n        }\r\n    }\r\n\r\n    // @notice This function is used when the user repays with the same token they borrowed\r\n    // @dev This initiates the flash borrow. See `simpleFlashLoanExecute` for the code that executes after the borrow.\r\n    function simpleFlashLoan(address _tokenBorrow, uint256 _amount, bool _isBorrowingEth, bool _isPayingEth, bytes memory _userData) private {\r\n        address tokenOther = _tokenBorrow == WETH ? DAI : WETH;\r\n        permissionedPairAddress = uniswapV2Factory.getPair(_tokenBorrow, tokenOther); // is it cheaper to compute this locally?\r\n        address pairAddress = permissionedPairAddress; // gas efficiency\r\n        require(pairAddress != address(0), \"Requested _token is not available.\");\r\n        address token0 = IUniswapV2Pair(pairAddress).token0();\r\n        address token1 = IUniswapV2Pair(pairAddress).token1();\r\n        uint amount0Out = _tokenBorrow == token0 ? _amount : 0;\r\n        uint amount1Out = _tokenBorrow == token1 ? _amount : 0;\r\n        bytes memory data = abi.encode(\r\n            SwapType.SimpleLoan,\r\n            _tokenBorrow,\r\n            _amount,\r\n            _tokenBorrow,\r\n            _isBorrowingEth,\r\n            _isPayingEth,\r\n            bytes(\"\"),\r\n            _userData\r\n        ); // note _tokenBorrow == _tokenPay\r\n        IUniswapV2Pair(pairAddress).swap(amount0Out, amount1Out, address(this), data);\r\n    }\r\n\r\n    // @notice This is the code that is executed after `simpleFlashLoan` initiated the flash-borrow\r\n    // @dev When this code executes, this contract will hold the flash-borrowed _amount of _tokenBorrow\r\n    function simpleFlashLoanExecute(\r\n        address _tokenBorrow,\r\n        uint _amount,\r\n        address _pairAddress,\r\n        bool _isBorrowingEth,\r\n        bool _isPayingEth,\r\n        bytes memory _userData\r\n    ) private {\r\n        // unwrap WETH if necessary\r\n        if (_isBorrowingEth) {\r\n            IWETH(WETH).withdraw(_amount);\r\n        }\r\n\r\n        // compute amount of tokens that need to be paid back\r\n        uint fee = ((_amount * 3) / 997) + 1;\r\n        uint amountToRepay = _amount + fee;\r\n        address tokenBorrowed = _isBorrowingEth ? ETH : _tokenBorrow;\r\n        address tokenToRepay = _isPayingEth ? ETH : _tokenBorrow;\r\n\r\n        // do whatever the user wants\r\n        execute(tokenBorrowed, _amount, tokenToRepay, amountToRepay, _userData);\r\n\r\n        // payback the loan\r\n        // wrap the ETH if necessary\r\n        if (_isPayingEth) {\r\n            IWETH(WETH).deposit.value(amountToRepay)();\r\n        }\r\n        IERC20(_tokenBorrow).transfer(_pairAddress, amountToRepay);\r\n    }\r\n\r\n    // @notice This function is used when either the _tokenBorrow or _tokenPay is WETH or ETH\r\n    // @dev Since ~all tokens trade against WETH (if they trade at all), we can use a single UniswapV2 pair to\r\n    //     flash-borrow and repay with the requested tokens.\r\n    // @dev This initiates the flash borrow. See `simpleFlashSwapExecute` for the code that executes after the borrow.\r\n    function simpleFlashSwap(\r\n        address _tokenBorrow,\r\n        uint _amount,\r\n        address _tokenPay,\r\n        bool _isBorrowingEth,\r\n        bool _isPayingEth,\r\n        bytes memory _userData\r\n    ) private {\r\n        permissionedPairAddress = uniswapV2Factory.getPair(_tokenBorrow, _tokenPay); // is it cheaper to compute this locally?\r\n        address pairAddress = permissionedPairAddress; // gas efficiency\r\n        require(pairAddress != address(0), \"Requested pair is not available.\");\r\n        address token0 = IUniswapV2Pair(pairAddress).token0();\r\n        address token1 = IUniswapV2Pair(pairAddress).token1();\r\n        uint amount0Out = _tokenBorrow == token0 ? _amount : 0;\r\n        uint amount1Out = _tokenBorrow == token1 ? _amount : 0;\r\n        \r\n        bytes memory data = abi.encode(\r\n            SwapType.SimpleSwap,\r\n            _tokenBorrow,\r\n            _amount,\r\n            _tokenPay,\r\n            _isBorrowingEth,\r\n            _isPayingEth,\r\n            bytes(\"\"),\r\n            _userData\r\n        );\r\n        IUniswapV2Pair(pairAddress).swap(amount0Out, amount1Out, address(this), data);\r\n    }\r\n\r\n    // @notice This is the code that is executed after `simpleFlashSwap` initiated the flash-borrow\r\n    // @dev When this code executes, this contract will hold the flash-borrowed _amount of _tokenBorrow\r\n    function simpleFlashSwapExecute(\r\n        address _tokenBorrow,\r\n        uint _amount,\r\n        address _tokenPay,\r\n        address _pairAddress,\r\n        bool _isBorrowingEth,\r\n        bool _isPayingEth,\r\n        bytes memory _userData\r\n    ) private {\r\n        // unwrap WETH if necessary\r\n        if (_isBorrowingEth) {\r\n            IWETH(WETH).withdraw(_amount);\r\n        }\r\n\r\n        // compute the amount of _tokenPay that needs to be repaid\r\n        address pairAddress = permissionedPairAddress; // gas efficiency\r\n\r\n        uint pairBalanceTokenBorrow = IERC20(_tokenBorrow).balanceOf(pairAddress);\r\n        uint pairBalanceTokenPay = IERC20(_tokenPay).balanceOf(pairAddress);\r\n        uint amountToRepay = ((1000 * pairBalanceTokenPay * _amount) / (997 * pairBalanceTokenBorrow)) + 1;\r\n\r\n        // get the orignal tokens the user requested\r\n        address tokenBorrowed = _isBorrowingEth ? ETH : _tokenBorrow;\r\n        address tokenToRepay = _isPayingEth ? ETH : _tokenPay;\r\n\r\n        // do whatever the user wants\r\n        execute(tokenBorrowed, _amount, tokenToRepay, amountToRepay, _userData);\r\n        \r\n        // payback loan\r\n        // wrap ETH if necessary\r\n        if (_isPayingEth) {\r\n            IWETH(WETH).deposit.value(amountToRepay)();\r\n        }\r\n        IERC20(_tokenPay).transfer(_pairAddress, amountToRepay);\r\n    }\r\n\r\n    // @notice This function is used when neither the _tokenBorrow nor the _tokenPay is WETH\r\n    // @dev Since it is unlikely that the _tokenBorrow/_tokenPay pair has more liquidaity than the _tokenBorrow/WETH and\r\n    //     _tokenPay/WETH pairs, we do a triangular swap here. That is, we flash borrow WETH from the _tokenPay/WETH pair,\r\n    //     Then we swap that borrowed WETH for the desired _tokenBorrow via the _tokenBorrow/WETH pair. And finally,\r\n    //     we pay back the original flash-borrow using _tokenPay.\r\n    // @dev This initiates the flash borrow. See `traingularFlashSwapExecute` for the code that executes after the borrow.\r\n\r\n    function traingularFlashSwap(address _tokenBorrow, uint _amount, address _tokenPay, bytes memory _userData) private {\r\n        address borrowPairAddress = uniswapV2Factory.getPair(_tokenBorrow, WETH); // is it cheaper to compute this locally?\r\n        require(borrowPairAddress != address(0), \"Requested borrow token is not available.\");\r\n\r\n        permissionedPairAddress = uniswapV2Factory.getPair(_tokenPay, WETH); // is it cheaper to compute this locally?\r\n        address payPairAddress = permissionedPairAddress; // gas efficiency\r\n        require(payPairAddress != address(0), \"Requ\");\r\n\r\n        // STEP 1: Compute how much WETH will be needed to get _amount of _tokenBorrow out of the _tokenBorrow/WETH pool\r\n\r\n        // get balance of borrowed token in uniswap pool\r\n        uint pairBalanceTokenBorrowBefore = IERC20(_tokenBorrow).balanceOf(borrowPairAddress);\r\n        require(pairBalanceTokenBorrowBefore >= _amount, \"_amount is too big\");\r\n\r\n        // calculate balance of pair in pool w/o my flashloan amount\r\n        uint pairBalanceTokenBorrowAfter = pairBalanceTokenBorrowBefore - _amount;\r\n\r\n        // calculate WETH value/size in uniswapv2 pool\r\n        uint pairBalanceWeth = IERC20(WETH).balanceOf(borrowPairAddress);\r\n\r\n        // Amount of Weth needed (including fee) to borrow amount of tokenBorrow from uniswap Pool\r\n        uint amountOfWeth = ((1000 * pairBalanceWeth * _amount) / (997 * pairBalanceTokenBorrowAfter)) + 1;\r\n        // using a helper function here to avoid \"stack too deep\" :(\r\n        traingularFlashSwapHelper(_tokenBorrow, _amount, _tokenPay, borrowPairAddress, payPairAddress, amountOfWeth, _userData);\r\n    }\r\n\r\n    // @notice Helper function for `traingularFlashSwap` to avoid `stack too deep` errors\r\n    function traingularFlashSwapHelper(\r\n        address _tokenBorrow,\r\n        uint _amount,\r\n        address _tokenPay,\r\n        address _borrowPairAddress,\r\n        address _payPairAddress,\r\n        uint _amountOfWeth,\r\n        bytes memory _userData\r\n    ) private returns (uint) {\r\n        // Step 2: Flash-borrow _amountOfWeth WETH from the _tokenPay/WETH pool\r\n        address token0 = IUniswapV2Pair(_payPairAddress).token0();\r\n        address token1 = IUniswapV2Pair(_payPairAddress).token1();\r\n        uint amount0Out = WETH == token0 ? _amountOfWeth : 0;\r\n        uint amount1Out = WETH == token1 ? _amountOfWeth : 0;\r\n        bytes memory triangleData = abi.encode(_borrowPairAddress, _amountOfWeth);\r\n        bytes memory data = abi.encode(SwapType.TriangularSwap, _tokenBorrow, _amount, _tokenPay, false, false, triangleData, _userData);\r\n        // initiate the flash swap from UniswapV2\r\n        // get Token for WETH\r\n        IUniswapV2Pair(_payPairAddress).swap(amount0Out, amount1Out, address(this), data);\r\n    }\r\n\r\n    // @notice This is the code that is executed after `traingularFlashSwap` initiated the flash-borrow\r\n    // @dev When this code executes, this contract will hold the amount of WETH we need in order to get _amount\r\n    //     _tokenBorrow from the _tokenBorrow/WETH pair.\r\n\r\n    function traingularFlashSwapExecute(\r\n        address _tokenBorrow,\r\n        uint _amount,\r\n        address _tokenPay,\r\n        bytes memory _triangleData,\r\n        bytes memory _userData\r\n    ) private {\r\n        // decode _triangleData\r\n        (address _borrowPairAddress, uint _amountOfWeth) = abi.decode(_triangleData, (address, uint));\r\n        \r\n        // Step 3: Using a normal swap, trade that WETH for _tokenBorrow\r\n        address token0 = IUniswapV2Pair(_borrowPairAddress).token0();\r\n        address token1 = IUniswapV2Pair(_borrowPairAddress).token1();\r\n        uint amount0Out = _tokenBorrow == token0 ? _amount : 0;\r\n        uint amount1Out = _tokenBorrow == token1 ? _amount : 0;\r\n        IERC20(WETH).transfer(_borrowPairAddress, _amountOfWeth); // send our flash-borrowed WETH to the pair\r\n        // Swap flash-loaned WETH to repay-Token\r\n        IUniswapV2Pair(_borrowPairAddress).swap(amount0Out, amount1Out, address(this), bytes(\"\"));\r\n\r\n        // compute the amount of _tokenPay that needs to be repaid\r\n        address payPairAddress = permissionedPairAddress; // gas efficiency\r\n\r\n        uint pairBalanceWETH = IERC20(WETH).balanceOf(payPairAddress); // available WETH in Pool\r\n\r\n        uint pairBalanceTokenPay = IERC20(_tokenPay).balanceOf(payPairAddress); // available TokenPay in Pool\r\n\r\n        uint amountToRepay = ((1000 * pairBalanceTokenPay * _amountOfWeth) / (997 * pairBalanceWETH)) + 1; // fees\r\n        \r\n\r\n        // Step 4: Do whatever the user wants (arb, liqudiation, etc)\r\n        execute(_tokenBorrow, _amount, _tokenPay, amountToRepay, _userData);\r\n\r\n        // Step 5: Pay back the flash-borrow to the _tokenPay/WETH pool\r\n        IERC20(_tokenPay).transfer(payPairAddress, amountToRepay);\r\n\r\n    }\r\n    \r\n\r\n    // @notice This is where the user's custom logic goes\r\n    // @dev When this function executes, this contract will hold _amount of _tokenBorrow\r\n    // @dev It is important that, by the end of the execution of this function, this contract holds the necessary\r\n    //     amount of the original _tokenPay needed to pay back the flash-loan.\r\n    // @dev Paying back the flash-loan happens automatically by the calling function -- do not pay back the loan in this function\r\n    // @dev If you entered `0x0` for _tokenPay when you called `flashSwap`, then make sure this contract hols _amount ETH before this\r\n    //     finishes executing\r\n    // @dev User will override this function on the inheriting contract\r\n    function execute(address _tokenBorrow, uint _amount, address _tokenPay, uint _amountToRepay, bytes memory _userData) internal;\r\n\r\n}"},"/Simon/test/1/0xe31aeb57336844DCF929Da9a2F1c9Ca3B4B491C6/contracts/UniswapV2Interfaces.sol":{"content":"pragma solidity 0.5.17;\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n  function allPairs(uint) external view returns (address pair);\r\n  function allPairsLength() external view returns (uint);\r\n  function feeTo() external view returns (address);\r\n  function feeToSetter() external view returns (address);\r\n  function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  function name() external pure returns (string memory);\r\n  function symbol() external pure returns (string memory);\r\n  function decimals() external pure returns (uint8);\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address owner) external view returns (uint);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function approve(address spender, uint value) external returns (bool);\r\n  function transfer(address to, uint value) external returns (bool);\r\n  function transferFrom(address from, address to, uint value) external returns (bool);\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n  function nonces(address owner) external view returns (uint);\r\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n  event Mint(address indexed sender, uint amount0, uint amount1);\r\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n  event Swap(\r\n      address indexed sender,\r\n      uint amount0In,\r\n      uint amount1In,\r\n      uint amount0Out,\r\n      uint amount1Out,\r\n      address indexed to\r\n  );\r\n  event Sync(uint112 reserve0, uint112 reserve1);\r\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n  function factory() external view returns (address);\r\n  function token0() external view returns (address);\r\n  function token1() external view returns (address);\r\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n  function price0CumulativeLast() external view returns (uint);\r\n  function price1CumulativeLast() external view returns (uint);\r\n  function kLast() external view returns (uint);\r\n  function mint(address to) external returns (uint liquidity);\r\n  function burn(address to) external returns (uint amount0, uint amount1);\r\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n  function skim(address to) external;\r\n  function sync() external;\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IWETH {\r\n    function withdraw(uint) external;\r\n    function deposit() external payable;\r\n}"},"/Simon/test/1/0xe31aeb57336844DCF929Da9a2F1c9Ca3B4B491C6/contracts/uniswap/IUniswapV2Router02.sol":{"content":"pragma solidity >=0.5.0;\r\n\r\n//import './IUniswapV2Router01.sol';\r\n\r\ninterface IUniswapV2Router02 { \r\n        function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"}}}