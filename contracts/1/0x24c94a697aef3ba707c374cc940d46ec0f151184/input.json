{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "artifacts/MetaSquid.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n    \n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n}\n\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    uint256 private _lockTime;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        _owner = 0xfE9bd4213Ee86DA41c70cB2661a2d8619da5e6Ab;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }   \n    \n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n    \n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function getUnlockTime() public view returns (uint256) {\n        return _lockTime;\n    }\n    \n    function getTime() public view returns (uint256) {\n        return block.timestamp;\n    }\n\n    function lock(uint256 time) public virtual onlyOwner {\n        _previousOwner = _owner;\n        _owner = address(0);\n        _lockTime = block.timestamp + time;\n        emit OwnershipTransferred(_owner, address(0));\n    }\n    \n    function unlock() public virtual {\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\n        require(block.timestamp > _lockTime , \"Contract is locked until 7 days\");\n        emit OwnershipTransferred(_owner, _previousOwner);\n        _owner = _previousOwner;\n    }\n}\n\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Pair {\n    function sync() external;\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n      address token,\n      uint liquidity,\n      uint amountTokenMin,\n      uint amountETHMin,\n      address to,\n      uint deadline\n    ) external returns (uint amountETH);\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n}\n\n\ncontract MetaSquid  is Ownable, IERC20, IERC20Metadata {\n    \n    using SafeMath for uint256;\n    \n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n    \n    mapping(address => bool) internal _isTxLimitExempt;\n    mapping(address => bool) internal _isMaxTxWallet;\n    \n    mapping (address => bool) public isTaxless;\n\n\n    string private _name;\n    string private _symbol;\n    \n    \n    uint256 private _totalSupply=1_000_000_000_000_000_000  *(10**decimals());\n    \n   \n\n    address marketingWallet=0xBdC0f282370A2D89dE5f76d1399965D9713117E5;\n    address devWallet=0xAcCb24349b57026E28CAeDa3b76893CfEbDAc61F;\n    address prizeWallet=0xC9FfFc23e2Cc4f91D7709E1953FD79d43C77f173;\n    \n    \n    uint256 _feeDecimal = 2; // do not change this value...\n    \n    uint256 marketingFee=500; //marketing fee 5%\n    uint256 devFee = 400; // development fee 4%\n    uint256 prizeFee=200; // prize money fee 2%\n    uint256 liquidityFee = 200; // means 2% add liquidity\n    \n    \n    uint256 public maxTxAmount = _totalSupply; \n    uint256 public maxWalletAmount =_totalSupply;// no limit\n    bool private inSwapAndLiquify;\n    bool public swapAndLiquifyEnabled = true;\n    bool public isFeeActive=true;\n    bool public tradingEnable = true;\n     \n    \n    \n    event SwapAndLiquifyEnabledUpdated(bool enabled);\n    event SwapAndLiquify(uint256 tokensSwapped,uint256 ethReceived, uint256 tokensIntoLiqudity);\n    \n    \n    uint256 public minTokensBeforeSwap = 10_000_000  *(10**decimals());\n    \n    \n    modifier lockTheSwap {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    \n    IUniswapV2Router02 public  uniswapV2Router;\n    address public  uniswapV2Pair;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor () {\n        _name = 'MetaSquid';\n        _symbol = 'MetaSquid';\n        \n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // for Ethereum uniswap v2\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _uniswapV2Router.WETH());\n        uniswapV2Router = _uniswapV2Router;\n      \n      \n        isTaxless[owner()] = true;\n        isTaxless[address(this)] = true;\n        \n        _isTxLimitExempt[owner()] = true;\n        _isTxLimitExempt[address(0)] = true;\n        _isTxLimitExempt[address(this)]=true;\n        \n        _isMaxTxWallet[owner()] = true;\n        _isMaxTxWallet[address(this)]=true;\n        \n        // TEAM Wallets\n        _balances[0xc2Bfe56DfBfdc8c4d4e1190885e1344A94467A62] = 10_000_000_000_000_000  *(10**decimals()); // 1% of totalSupply\n        _balances[0x150AA7b2f36C9aa761bDd8889387256608bf69AC] = 10_000_000_000_000_000  *(10**decimals()); \n        _balances[0x9488eeac781607782E5531c6d4b63009D6F22b43] = 10_000_000_000_000_000  *(10**decimals()); \n        _balances[0xD4d28e4E4CB95183c4F785E036dfadAdc533CA80] = 10_000_000_000_000_000  *(10**decimals()); \n        _balances[0xE91B5cB816d542fCc467d52c720Af485DB2D3e3F] = 10_000_000_000_000_000  *(10**decimals()); \n        \n        \n        _balances[owner()]=950_000_000_000_000_000 *(10**decimals());      // 95% of totalSupply\n        \n        emit Transfer(address(0),owner(),950_000_000_000_000_000 *(10**decimals()));\n        \n        emit Transfer(address(0),0xc2Bfe56DfBfdc8c4d4e1190885e1344A94467A62,10_000_000_000_000_000  *(10**decimals()));\n        emit Transfer(address(0),0x150AA7b2f36C9aa761bDd8889387256608bf69AC,10_000_000_000_000_000  *(10**decimals()));\n        emit Transfer(address(0),0x9488eeac781607782E5531c6d4b63009D6F22b43,10_000_000_000_000_000  *(10**decimals()));\n        emit Transfer(address(0),0xD4d28e4E4CB95183c4F785E036dfadAdc533CA80,10_000_000_000_000_000  *(10**decimals()));\n        emit Transfer(address(0),0xE91B5cB816d542fCc467d52c720Af485DB2D3e3F,10_000_000_000_000_000  *(10**decimals()));\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     * \n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n    \n    \n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(_balances[sender] >= amount, \"ERC20: transfer amount exceeds balance\");\n        require(amount <= maxTxAmount || _isTxLimitExempt[sender], \"Transfer Limit Exceeds\");\n        require(amount <= maxWalletAmount || _isMaxTxWallet[sender] || _isMaxTxWallet[recipient],\"Can't hold more tokens\");   \n        require(tradingEnable || owner()==sender,\"trading is disable\");\n        \n        uint256 transferAmount = amount;\n        \n        \n        uint256 contractTokenBalance = balanceOf(address(this));\n        bool overMinTokenBalance = contractTokenBalance >= minTokensBeforeSwap;\n        if (!inSwapAndLiquify && overMinTokenBalance && sender != uniswapV2Pair && swapAndLiquifyEnabled) {\n            swapAndLiquify(contractTokenBalance);\n        }\n\n        \n         if(isFeeActive && !isTaxless[sender] && !isTaxless[recipient] && !inSwapAndLiquify){\n            transferAmount = collectBuyFee(sender,amount);\n         }\n\n            _balances[sender] -= amount;\n            _balances[recipient] += transferAmount;\n            \n            emit Transfer(sender, recipient, transferAmount);\n            \n            return;\n        \n    }\n    \n    \n    function collectBuyFee(address account, uint256 amount) private returns (uint256) {\n        uint256 transferAmount = amount;\n        \n        if(marketingFee != 0){\n             //1\n            uint256 _makretingFee=amount.mul(marketingFee).div(10**(_feeDecimal + 2));\n            transferAmount=transferAmount.sub(_makretingFee);\n            _balances[marketingWallet] += _makretingFee;\n\n            emit Transfer(account, marketingWallet , _makretingFee);\n        }\n        \n        \n        if (prizeFee != 0){\n            \n            uint256 charityFee=amount.mul(prizeFee).div(10**(_feeDecimal + 2));\n            transferAmount=transferAmount.sub(charityFee);\n            _balances[prizeWallet] += charityFee;\n\n            emit Transfer(account, prizeWallet , charityFee);\n        }\n        \n         if (devFee != 0){\n            \n            uint256 _devFee=amount.mul(devFee).div(10**(_feeDecimal + 2));\n            transferAmount=transferAmount.sub(_devFee);\n            _balances[devWallet] += _devFee;\n\n            emit Transfer(account, devWallet , _devFee);\n        }\n        \n        //@dev liquidity fee\n        if(liquidityFee != 0){\n            uint256 _liquidityFee = amount.mul(liquidityFee).div(10**(_feeDecimal + 2));\n            transferAmount = transferAmount.sub(_liquidityFee);\n    \n            _balances[address(this)] = _balances[address(this)].add(_liquidityFee);\n            \n            emit Transfer(account,address(this),liquidityFee);\n        }\n      \n        \n        return transferAmount;\n    }\n    \n   \n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    \n       \n    function Burn(address account, uint256 amount) public onlyOwner{\n        _burn( account, amount);\n    }\n     \n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n    \n     function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\n         if(contractTokenBalance > maxTxAmount){\n             contractTokenBalance = maxTxAmount;\n         }\n        // split the contract balance into halves\n        uint256 half = contractTokenBalance.div(2);\n        uint256 otherHalf = contractTokenBalance.sub(half);\n\n        // capture the contract's current ETH balance.\n        // this is so that we can capture exactly the amount of ETH that the\n        // swap creates, and not make the liquidity event include any ETH that\n        // has been manually sent to the contract\n        uint256 initialBalance = address(this).balance;\n\n        // swap tokens for ETH\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\n\n        // how much ETH did we just swap into?\n        uint256 newBalance = address(this).balance.sub(initialBalance);\n\n        // add liquidity to uniswap\n        addLiquidity(otherHalf, newBalance);\n        \n        emit SwapAndLiquify(half, newBalance, otherHalf);\n    }\n    \n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // add the liquidity\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            address(this),\n            block.timestamp\n        );\n    }\n    \n    \n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n    \n    \n\n    function setFeeActive(bool value) external onlyOwner {\n        isFeeActive = value;\n    }\n    \n    function setWallets(address _marketingWallet,address _prizeWallet,address _devWallet) external onlyOwner {\n        marketingWallet=_marketingWallet;\n        prizeWallet =_prizeWallet;\n        devWallet = _devWallet;\n    }\n    \n    \n    function setFee(uint256 _makretingFee,uint256 _prizeFee, uint256 _devFee, uint256 _liquidityFee) external onlyOwner {\n        marketingFee=_makretingFee;\n        devFee=_devFee;\n        prizeFee=_prizeFee;\n        liquidityFee = _liquidityFee;\n        \n    }\n    \n    function setSwapAndLiquifyEnabled(bool enabled) external onlyOwner {\n        swapAndLiquifyEnabled = enabled;\n        emit SwapAndLiquifyEnabledUpdated(enabled);\n    }\n    \n     function setMaxTxAmountExempt(address holder, bool exempt) external onlyOwner {\n        _isTxLimitExempt[holder] = exempt;\n    }\n\n    function setTrading(bool value) external onlyOwner {\n        tradingEnable= value;\n    }\n   \n    function setMaxTxAmount(uint256 amount) external onlyOwner {\n        maxTxAmount = amount;\n    }\n\n    function setMaxWalletAmount(uint256 amount) external onlyOwner {\n        maxWalletAmount = amount;\n    }\n\n     function setMaxWalletExempt(address holder,bool exempt) external onlyOwner {\n        _isMaxTxWallet[holder] = exempt;\n    }\n    \n    function setMinTokensBeforeSwap(uint256 amount) external onlyOwner {\n        minTokensBeforeSwap = amount;\n    }\n    \n    receive() external payable {}\n}"
    }
  }
}