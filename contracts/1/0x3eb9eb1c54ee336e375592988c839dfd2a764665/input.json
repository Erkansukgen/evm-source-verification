{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/BridgeContract.sol": {
      "content": "pragma solidity ^0.6.12;\n\n\ninterface IERC721 {\n    function tokenURI(uint256) external view returns (string memory);\n    function setApprovalForAll(address operator, bool _approved) external;\n    function mint(address, string calldata) external returns (uint256);\n    function transferFrom(address, address, uint256) external;\n}\n\ncontract BridgeContract {\n    address constant hotwallet = address(0x1B933949Ff99A9ce9f0Fe43a3C5Bf6a56c9eA705);\n    address constant contr = address(0x33aEa2307407b0c00f885fdD45c9621D8C0db20F);\n\n    mapping(uint256 => bool) public withdrawals;\n\n    uint256 constant w = 0;\n\n    event Deposited(string tokendID, uint256 tokenID);\n    event Withdrawn(uint256 reqID);\n\n    modifier isSigned(\n        uint256 _prefix,\n        uint256 _requestID,\n        uint256 _tokenID,\n        bytes32 _r,\n        bytes32 _s,\n        uint8 _v\n    ) {\n        bytes32 _hash = keccak256(abi.encodePacked(_prefix, msg.sender, _requestID, _tokenID));\n        address signer = ecrecover(_hash, _v, _r, _s);\n\n        require(hotwallet == signer, \"bad-signer\");\n        _;\n    }\n\n    function mint(\n        string memory tokendID,\n        string memory tokenURI\n    ) external {\n        uint256 tokenID = IERC721(contr).mint(hotwallet, tokenURI);\n        emit Deposited(tokendID, tokenID);\n\n    }\n\n    function mintBySelf(string memory tokendID, string memory tokenURI) external {\n        uint256 tokenID = IERC721(contr).mint(msg.sender, tokenURI);\n        IERC721(contr).transferFrom(msg.sender, hotwallet, tokenID);\n        emit Deposited(tokendID, tokenID);\n    }\n\n    function deposit(string memory tokendID, uint256 tokenID) external {\n        IERC721(contr).transferFrom(msg.sender, hotwallet, tokenID);\n        emit Deposited(tokendID, tokenID);\n    }\n\n    function withdraw(\n        uint256 withdrawID,\n        uint256 tokenID,\n        bytes32 _r,\n        bytes32 _s,\n        uint8 _v\n    ) external isSigned(w, withdrawID, tokenID, _r, _s, _v) {\n        require(!withdrawals[withdrawID], \"such-withdraw-already-used\");\n        IERC721(contr).transferFrom(hotwallet, msg.sender, tokenID);\n        Withdrawn(withdrawID);\n    }\n}"
    }
  }
}