{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "WBET.sol": {
      "content": "pragma solidity =0.5.17;\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n\r\ncontract WBET {\r\n\r\n    // --- ERC20 Data ---\r\n    string  public constant name     = \"WarBet Token\";\r\n    string  public constant symbol   = \"WBET\";\r\n    uint8   public constant decimals = 18;\r\n    uint256 public constant totalSupply = 100000000e18;\r\n\r\n    mapping (address => uint)                      public balanceOf;\r\n    mapping (address => mapping (address => uint)) public allowance;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed src, address indexed dst, uint value);\r\n\r\n    constructor() public {\r\n        balanceOf[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n\r\n    // --- Math ---\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    // --- Token ---\r\n    function transfer(address dst, uint value) external returns (bool) {\r\n        return transferFrom(msg.sender, dst, value);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint value)\r\n        public returns (bool)\r\n    {\r\n        require(balanceOf[src] >= value, \"WBET/insufficient-balance\");\r\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\r\n            require(allowance[src][msg.sender] >= value, \"WBET/insufficient-allowance\");\r\n            allowance[src][msg.sender] = sub(allowance[src][msg.sender], value);\r\n        }\r\n        balanceOf[src] = sub(balanceOf[src], value);\r\n        balanceOf[dst] = add(balanceOf[dst], value);\r\n        emit Transfer(src, dst, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint value) external returns (bool) {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n}"
    }
  }
}