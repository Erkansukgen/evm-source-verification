{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/HypeRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.6.0 <0.8.0;\n\ncontract HypeRegistry {\n    \n    address public owner;\n    address[] public registry;\n    mapping(address=>uint256) public registryMap;\n    int256 public counter;\n    \n    event HypeAdded(address hype, uint256 index);\n    event HypeRemoved(address hype, uint256 index);\n    \n    constructor() {\n        owner = msg.sender;    \n    }\n    \n    function add(address hype) external {\n        require(msg.sender == owner,\"only owner\");\n        require(registryMap[hype]==0, \"exists\");\n        registry.push(hype);\n        registryMap[hype] = registry.length;\n        counter++;\n        emit HypeAdded(hype, registry.length-1);\n    }\n    \n    function addMany(address[] memory hypes) external {\n        require(msg.sender == owner,\"only owner\");\n        for(uint256 i=0; i<hypes.length; i++) {\n            if(registryMap[hypes[i]]!=0) continue;\n            registry.push(hypes[i]);\n            registryMap[hypes[i]] = registry.length;\n            counter++;\n            emit HypeAdded(hypes[i], registry.length-1);\n        }\n    }\n\n    function remove(address hype) external {\n        require(msg.sender == owner,\"only owner\");\n        require(registryMap[hype]!=0, \"not exists\");\n        emit HypeRemoved(hype, registryMap[hype]-1);\n        registryMap[hype] = 0;\n        counter--;\n    }\n    \n    function hypeByIndex(uint256 index) external view returns (address, uint256){\n        return (registry[index], registryMap[registry[index]]);\n    }\n    \n    function transferOwnership(address newOwner) external {\n        require(msg.sender == owner, \"only owner\");\n        owner = newOwner;\n    }\n\n}"
    }
  }
}