{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Auction.sol":{"content":"/**\n *Submitted for verification at Etherscan.io on 2021-02-24\n*/\n\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.6.7;\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ninterface IERC1155 {\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\n}\n\ncontract EnglishAuction {\n    using SafeMath for uint256;\n\n    // System settings\n    uint256 public id;\n    address public token;\n    bool public ended = false;\n    uint256 public startBidTime;\n    address payable public haus;\n    address payable public seller;\n    uint256 public bidLength = 20 hours;\n    uint256 public auctionLength = 20 hours;\n\n    // Current winning bid\n    uint256 public lastBid;\n    uint256 public lastBidTime;\n    address payable public winning;\n\n    event Bid(address who, uint256 amount);\n    event Won(address who, uint256 amount);\n\n    constructor() public {\n        token = address(0x13bAb10a88fc5F6c77b87878d71c9F1707D2688A);\n        id = 50;\n        startBidTime = 1616806800;\n        lastBid = 0.5 ether;\n        seller = payable(address(0x4a25E18076DDcFd646ED14ABC07286c2A4c1256A));\n        haus = payable(address(0x4a25E18076DDcFd646ED14ABC07286c2A4c1256A));\n    }\n\n    function bid() public payable {\n        require(msg.sender == tx.origin, \"no contracts\");\n        require(block.timestamp >= startBidTime, \"Auction not started\");\n        require(block.timestamp < startBidTime.add(auctionLength), \"Auction ended\");\n        require(msg.value >= lastBid.mul(105).div(100), \"Bid too small\");\n\n        // Give back the last bidders money\n        if (lastBidTime != 0) {\n            require(block.timestamp < lastBidTime.add(bidLength), \"Auction ended\");\n            winning.transfer(lastBid);\n        }\n\n        lastBid = msg.value;\n        winning = msg.sender;\n        lastBidTime = block.timestamp;\n\n        emit Bid(msg.sender, msg.value);\n    }\n\n    function end() public {\n        require(!ended, \"end already called\");\n        require(lastBidTime != 0, \"no bids\");\n        require(block.timestamp >= lastBidTime.add(bidLength) || block.timestamp >= startBidTime.add(auctionLength), \"Auction live\");\n\n        // transfer erc1155 to winner\n        IERC1155(token).safeTransferFrom(address(this), winning, id, 1, new bytes(0x0));\n\n        uint256 balance = address(this).balance;\n        uint256 hausFee = balance.div(20).mul(3);\n        haus.transfer(hausFee);\n        seller.transfer(address(this).balance);\n\n        ended = true;\n\n        emit Won(winning, lastBid);\n    }\n\n    function pull() public {\n        require(!ended, \"end already called\");\n        require(lastBidTime == 0, \"There were bids\");\n        require(block.timestamp >= startBidTime.add(auctionLength), \"Auction live\");\n\n        // transfer erc1155 to seller\n        IERC1155(token).safeTransferFrom(address(this), seller, id, 1, new bytes(0x0));\n\n        ended = true;\n    }\n\n    function live() external view returns(bool) {\n        if (block.timestamp < lastBidTime.add(bidLength) && block.timestamp < startBidTime.add(auctionLength)) {\n            return true;\n        }\n        return false;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure returns(bytes4) {\n        return bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"));\n    }\n\n}"}}}