{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/transferToList.sol":{"content":"// File: contracts\\ERC20\\TokenMintERC20Token.sol\n\npragma solidity =0.6.6;\n\ncontract Ownable {\n    address private _owner;\n\n    constructor() internal {\n        _owner = 0x36651d27Adbf859DA7F23d350Fb4A8361E587e12;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function isOwner(address account) public view returns (bool) {\n        return account == _owner;\n    }\n\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function _transferOwnership(address newOwner) internal {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    modifier onlyOwner() {\n        require(isOwner(msg.sender), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n}\nlibrary SafeMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n}\n/**\n * @title TokenMintERC20Token\n * @author TokenMint (visit https://tokenmint.io)\n *\n * @dev Standard ERC20 token with burning and optional functions implemented.\n * For full specification of ERC-20 standard see:\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n */\ncontract MaiTuGouTransferToList is Ownable {\n    using SafeMath for uint256;\n    constructor() public {}\n\n    function transferToList(\n        address token,\n        address[] memory recipientList,\n        uint256[] memory amounts,\n        uint256 fee\n    ) public payable returns (bool) {\n        require(fee>0 && msg.value>=fee,\"Transfer: fee error\");\n        for (uint256 i = 0; i < recipientList.length; i++) {\n            address recipient = recipientList[i];\n            uint256 amount = amounts[i];\n            TransferHelper.safeTransferFrom(\n                token,\n                msg.sender,\n                recipient,\n                amount\n            );\n        }\n        return true;\n    }\n\n    function transferETHToList(\n        address[] memory recipientList,\n        uint256[] memory amounts,\n        uint256 fee\n    ) public payable returns (bool) {\n        require(fee>0,\"Transfer: fee error\");\n        uint256 totalValue=fee;\n        for (uint256 i = 0; i < recipientList.length; i++) {\n            totalValue=totalValue.add(amounts[i]);\n            TransferHelper.safeTransferETH(recipientList[i], amounts[i]);\n        }\n        require(msg.value>=totalValue,\"Transfer: value error\");\n        return true;\n    }\n\n    function claimTokens() public onlyOwner returns (uint256 num) {\n        num = address(this).balance;\n        TransferHelper.safeTransferETH(owner(), num);\n    }\n\n    function claimOtherTokens(address token, uint256 value)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        TransferHelper.safeTransferFrom(\n                token,\n                address(this),\n                owner(),\n                value\n            );\n            return true;\n    }\n}\n\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x095ea7b3, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: APPROVE_FAILED\"\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0xa9059cbb, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: TRANSFER_FAILED\"\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\n    }\n}\n"}}}