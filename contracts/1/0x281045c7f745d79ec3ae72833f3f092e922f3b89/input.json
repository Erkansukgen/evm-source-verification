{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/ITangoFactory.sol":{"content":"\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\ninterface ITangoFactory { \r\n    function withdraw(uint256 _amount) external;\r\n    function invest4(uint256[4] memory _param) external;\r\n    function invest(address, uint256) external;\r\n    function adminClaimRewardForSCRT(address, bytes memory) external;\r\n    function userClaimReward() external;\r\n}"},"contracts/NewBridge.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n//import \"OpenZeppelin/openzeppelin-contracts@3.2.0/contracts/token/ERC20/SafeERC20.sol\";\r\n//import \"OpenZeppelin/openzeppelin-contracts@3.2.0/contracts/token/ERC20/IERC20.sol\";\r\n//import \"OpenZeppelin/openzeppelin-contracts@3.2.0/contracts/math/SafeMath.sol\";\r\nimport \"./ITangoFactory.sol\";\r\n\r\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.3.0/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.3.0/contracts/token/ERC20/IERC20.sol\";\r\n//import \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.3.0/contracts/utils/math/SafeMath.sol\";\r\n\r\n/// @title MultiSignature wallet - Allows multiple parties to agree on transactions before execution.\r\n/// @author Stefan George - <stefan.george@consensys.net>\r\n/// @author Itzik Grossman - modified contract for swapping purposes\r\ncontract DuplexBridge {\r\n    // No longer needed in 0.8+\r\n    //using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    event Confirmation(address indexed sender, uint indexed transactionId);\r\n    event Revocation(address indexed sender, uint indexed transactionId);\r\n    event Submission(uint indexed transactionId);\r\n    event Withdraw(uint indexed transactionId);\r\n    event WithdrawFailure(uint indexed transactionId);\r\n    event Swap(uint amount, bytes recipient);\r\n    event OwnerAddition(address indexed owner);\r\n    event FeeCollectorChange(address indexed collector);\r\n    event OwnerRemoval(address indexed owner);\r\n    event RequirementChange(uint required);\r\n    event SwapToken(address sender, bytes recipient, uint256 amount, address tokenAddress, uint256 toSCRT);\r\n    /*\r\n     *  Constants\r\n     */\r\n    uint constant public MAX_OWNER_COUNT = 50;\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    mapping (address => uint) public tokenWhitelist;\r\n\r\n    mapping(uint => Transaction) public transactions;\r\n    mapping(uint => mapping(address => bool)) public confirmations;\r\n    mapping(address => bool) public isOwner;\r\n    mapping(address => uint) public secretTxNonce;\r\n    mapping(address => uint) public tokenBalances;\r\n    mapping(address => uint) public tokenLimits;\r\n\r\n\r\n    address[] public tokens;\r\n    address[] public owners;\r\n    address   public investorContract;\r\n    address payable public feeCollector;\r\n\r\n    uint public required;\r\n    uint public transactionCount;\r\n    bool public paused = false;\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint value;\r\n        bytes data;\r\n        bool executed;\r\n        uint nonce;\r\n        address token;\r\n        uint amount;\r\n        uint fee;\r\n    }\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier onlyWallet() {\r\n        require(msg.sender == address(this));\r\n        _;\r\n    }\r\n\r\n    // is above limit\r\n    modifier isNotGoingAboveLimit(address _tokenAddress, uint _amount) {\r\n\t\t// overflow doesn't matter\r\n        require(tokenBalances[_tokenAddress] + _amount <= tokenLimits[_tokenAddress], \"Cannot swap more than hard limit\");\r\n        _;\r\n    }\r\n\r\n    // is not below limit\r\n    modifier isNotUnderflowingBalance(address _tokenAddress, uint _amount) {\r\n        require(tokenBalances[_tokenAddress] - _amount < tokenBalances[_tokenAddress], \"Cannot swap more than balance\");\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address owner) {\r\n        require(!isOwner[owner]);\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        require(isOwner[owner], \"Owner does not exist\");\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint transactionId) {\r\n        require(transactions[transactionId].destination != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint transactionId, address owner) {\r\n        require(confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint transactionId, address owner) {\r\n        require(!confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint transactionId) {\r\n        require(!transactions[transactionId].executed);\r\n        _;\r\n    }\r\n\r\n    modifier notSubmitted(address token, uint nonce) {\r\n        require(secretTxNonce[token] == 0 || secretTxNonce[token] < nonce, \"Transaction already computed\");\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier isSecretAddress(bytes memory _address) {\r\n        uint8 i = 0;\r\n        bytes memory bytesArray = new bytes(7);\r\n        for (i = 0; i < 7 && _address[i] != 0; i++) {\r\n            bytesArray[i] = _address[i];\r\n        }\r\n        require(keccak256(bytesArray) == keccak256(bytes(\"secret1\")));\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint ownerCount, uint _required) {\r\n        require(ownerCount <= MAX_OWNER_COUNT\r\n        && _required <= ownerCount\r\n        && _required != 0\r\n            && ownerCount != 0);\r\n        _;\r\n    }\r\n\r\n    modifier notTokenWhitelisted(address token) {\r\n        require(tokenWhitelist[token] == 0);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier tokenWhitelisted(address token) {\r\n        require(tokenWhitelist[token] > 0);\r\n        _;\r\n    }\r\n\r\n    modifier notPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function allows to deposit ether.\r\n    receive()\r\n    external\r\n    payable\r\n    {\r\n        revert();\r\n    }\r\n\r\n    /// @dev Returns the execution status of a transaction.\r\n    /// useful in case an execution fails for some reason - so we can easily see that it failed, and handle it manually\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Execution status.\r\n    function isExecuted(uint transactionId)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        return transactions[transactionId].executed;\r\n    }\r\n\r\n    function pauseSwaps()\r\n    public\r\n    onlyWallet\r\n    {\r\n        paused = true;\r\n    }\r\n\r\n    function unPauseSwaps()\r\n    public\r\n    //ownerExists(msg.sender) // todo: remove before production\r\n    onlyWallet\r\n    {\r\n        paused = false;\r\n    }\r\n\r\n    function SupportedTokens()\r\n    public\r\n    view\r\n    returns (address[] memory)\r\n    {\r\n        return tokens;\r\n    }\r\n\r\n    function setLimit(address _tokenAddress, uint limit)\r\n    public\r\n    ownerExists(msg.sender)\r\n    {\r\n        tokenLimits[_tokenAddress] = limit;\r\n    }\r\n\r\n    function changeInvestorContract(address _address)\r\n    public\r\n    ownerExists(msg.sender)\r\n    // OnlyWallet todo: consider this as OnlyWallet\r\n    {\r\n        investorContract = _address;\r\n    }\r\n\r\n    function addToken(address _tokenAddress, uint min_amount, uint limit)\r\n    public\r\n    ownerExists(msg.sender)\r\n    notTokenWhitelisted(_tokenAddress)\r\n    // OnlyWallet todo: consider this as OnlyWallet\r\n    {\r\n        tokenWhitelist[_tokenAddress] = min_amount;\r\n        tokenLimits[_tokenAddress] = limit;\r\n\r\n        tokens.push(_tokenAddress);\r\n    }\r\n\r\n    function removeToken(address _tokenAddress)\r\n    public\r\n    ownerExists(msg.sender)\r\n    // OnlyWallet todo: consider this as OnlyWallet\r\n    {\r\n        delete tokenWhitelist[_tokenAddress];\r\n\r\n        for (uint i = 0; i < tokens.length - 1; i++) {\r\n            if (tokens[i] == _tokenAddress) {\r\n                tokens[i] = tokens[tokens.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        tokens.pop();\r\n    }\r\n\r\n    function getTokenNonce(address _tokenAddress)\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return secretTxNonce[_tokenAddress];\r\n    }\r\n\r\n    function releaseToken(address _tokenAddress, uint _amount, address _recipient, uint fee)\r\n    public\r\n    notPaused()\r\n    onlyWallet()\r\n    notNull(investorContract)\r\n    isNotUnderflowingBalance(_tokenAddress, _amount)\r\n    {\r\n        ITangoFactory investor = ITangoFactory(investorContract);\r\n        IERC20 ercToken = IERC20(_tokenAddress);\r\n\r\n        tokenBalances[_tokenAddress] = tokenBalances[_tokenAddress] - _amount;\r\n        \r\n        // There's no way of knowing how many tokens we got from this, so either give us allowance\r\n        // or we hack it this way\r\n        uint curBalanceBefore = ercToken.balanceOf(address(this));\r\n        \r\n        //investor.withdrawAndClaimReward(_tokenAddress, _amount, false);\r\n        investor.withdraw(_amount);\r\n        \r\n        // There's no way of knowing how many tokens we got from this, so either give us allowance\r\n        // or we hack it this way\r\n        uint curBalanceAfter = ercToken.balanceOf(address(this));\r\n        \r\n        ercToken.safeTransfer(feeCollector, fee);\r\n        ercToken.safeTransfer(_recipient, curBalanceAfter - curBalanceBefore - fee);\r\n    }\r\n\r\n    /*\r\n    * Send funds to multisig account, and emit a SwapToken event for emission to the Secret Network\r\n    *\r\n    * @param _recipient: The intended recipient's Secret Network address.\r\n    * @param _amount: The amount of ENG tokens to be itemized.\r\n    * @param _tokenAddress: The address of the token being swapped\r\n    * @param _toSCRT: Amount of SCRT to be minted - will be deducted from the amount swapped\r\n    */\r\n    function swapToken(bytes memory _recipient, uint256 _amount, address _tokenAddress, uint256 _toSCRT)\r\n    public\r\n    notPaused()\r\n    tokenWhitelisted(_tokenAddress)\r\n    isSecretAddress(_recipient)\r\n    isNotGoingAboveLimit(_tokenAddress, _amount)\r\n    {\r\n        IERC20 ercToken = IERC20(_tokenAddress);\r\n        ITangoFactory investor = ITangoFactory(investorContract);\r\n\r\n        require(_amount >= tokenWhitelist[_tokenAddress], \"Require transfer greater than minimum\");\r\n\r\n        tokenBalances[_tokenAddress] = tokenBalances[_tokenAddress] + _amount;\r\n\r\n        // if (ercToken.allowance(investorContract, address(this)) < _amount) {\r\n        //     require(token.approve(address(recipient), uint(-1)), \"Approve has failed\");\r\n        // }\r\n\r\n        if (ercToken.allowance(address(this), investorContract) < _amount) {\r\n            ercToken.safeApprove(investorContract, type(uint256).max);\r\n        }\r\n\r\n        ercToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        investor.invest(_tokenAddress, _amount);\r\n\r\n        emit SwapToken(\r\n            msg.sender,\r\n            _recipient,\r\n            _amount,\r\n            _tokenAddress, \r\n            _toSCRT\r\n        );\r\n    }\r\n\r\n    function swap(bytes memory _recipient)\r\n    public\r\n    notPaused()\r\n    isSecretAddress(_recipient)\r\n    payable {\r\n//        require(msg.value >= 1000000000000000); // 0.001 ETH\r\n//        emit Swap(msg.value, _recipient);\r\n        revert();\r\n    }\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\r\n    /// @param _owners List of initial owners.\r\n    /// @param _required Number of required confirmations.\r\n    // todo: list of supported tokens?\r\n    constructor (address[] memory _owners, uint _required, address payable _feeCollector, address _investorContract)\r\n    validRequirement(_owners.length, _required)\r\n    notNull(_feeCollector)\r\n    notNull(_investorContract)\r\n    {\r\n        for (uint i = 0; i < _owners.length; i++) {\r\n            require(!isOwner[_owners[i]] && _owners[i] != address(0));\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n        owners = _owners;\r\n        required = _required;\r\n        feeCollector = _feeCollector;\r\n        investorContract = _investorContract;\r\n    }\r\n\r\n    function getFeeCollector()\r\n    public\r\n    view\r\n    returns (address)\r\n    {\r\n        return feeCollector;\r\n    }\r\n\r\n    /// @dev Allows change of the fee collector address. Transaction has to be sent by wallet.\r\n    /// @param _feeCollector Address that fees will be sent to.\r\n    function replaceFeeCollector(address payable _feeCollector)\r\n    public\r\n    onlyWallet\r\n    notNull(_feeCollector)\r\n    {\r\n        feeCollector = _feeCollector;\r\n        emit FeeCollectorChange(_feeCollector);\r\n    }\r\n\r\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of new owner.\r\n    function addOwner(address owner)\r\n    public\r\n    onlyWallet\r\n    ownerDoesNotExist(owner)\r\n    notNull(owner)\r\n    validRequirement(owners.length + 1, required)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        emit OwnerAddition(owner);\r\n    }\r\n\r\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner.\r\n    function removeOwner(address owner)\r\n    public\r\n    onlyWallet\r\n    ownerExists(owner)\r\n    {\r\n        isOwner[owner] = false;\r\n        for (uint i = 0; i < owners.length - 1; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        owners.pop();\r\n        if (required > owners.length)\r\n            changeRequirement(owners.length);\r\n        emit OwnerRemoval(owner);\r\n    }\r\n\r\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner to be replaced.\r\n    /// @param newOwner Address of new owner.\r\n    function replaceOwner(address owner, address newOwner)\r\n    public\r\n    onlyWallet\r\n    ownerExists(owner)\r\n    ownerDoesNotExist(newOwner)\r\n    notNull(newOwner)\r\n    {\r\n        for (uint i = 0; i < owners.length; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = newOwner;\r\n                break;\r\n            }\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n        emit OwnerRemoval(owner);\r\n        emit OwnerAddition(newOwner);\r\n    }\r\n\r\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n    /// @param _required Number of required confirmations.\r\n    function changeRequirement(uint _required)\r\n    public\r\n    onlyWallet\r\n    validRequirement(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        emit RequirementChange(_required);\r\n    }\r\n\r\n    /// @dev Allows an owner to submit and confirm a transaction.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param fee amount of token or ether to transfer to fee collector\r\n    /// @param data Transaction data payload.\r\n    /// @return transactionId - Returns transaction ID.\r\n    function submitTransaction(address destination, uint value, uint nonce, address token, uint fee, uint amount, bytes memory data)\r\n    public\r\n    ownerExists(msg.sender)\r\n    notSubmitted(token, nonce)\r\n    isNotUnderflowingBalance(token, amount)\r\n    returns (uint transactionId)\r\n    {\r\n        transactionId = addTransaction(destination, value, nonce, token, fee, amount, data);\r\n        secretTxNonce[token] = nonce;\r\n\r\n        confirmTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function confirmTransaction(uint transactionId)\r\n    public\r\n    ownerExists(msg.sender)\r\n    transactionExists(transactionId)\r\n    notConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        emit Confirmation(msg.sender, transactionId);\r\n        executeTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function revokeConfirmation(uint transactionId)\r\n    public\r\n    ownerExists(msg.sender)\r\n    confirmed(transactionId, msg.sender)\r\n    notExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        emit Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    /// @dev Transfers the amount in tnx.fee to the fee collector\r\n    /// @param transactionId Transaction ID.\r\n    function collectFee(uint transactionId)\r\n    internal\r\n    {\r\n        Transaction storage txn = transactions[transactionId];\r\n        if (txn.token == address(0)) {\r\n            feeCollector.transfer(txn.fee);\r\n        } else {\r\n            IERC20 token = IERC20(txn.token);\r\n            token.safeTransfer(feeCollector, txn.fee);\r\n        }\r\n    }\r\n\r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function executeTransaction(uint transactionId)\r\n    public\r\n    ownerExists(msg.sender)\r\n    confirmed(transactionId, msg.sender)\r\n    notExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            Transaction storage txn = transactions[transactionId];\r\n\r\n            txn.executed = true;\r\n\r\n            if (txn.fee > 0) {\r\n                collectFee(transactionId);\r\n            }\r\n\r\n            require(gasleft() >= 3000);\r\n\r\n            if (external_call(txn.destination, txn.value, txn.data, gasleft() - 3000))\r\n                emit Withdraw(transactionId);\r\n            else {\r\n                emit WithdrawFailure(transactionId);\r\n                txn.executed = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // call has been separated into its own function in order to take advantage\r\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\r\n    function external_call(address destination, uint value, bytes memory data, uint256 txGas)\r\n        internal\r\n        returns (bool success) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            success := call(\r\n                txGas,\r\n                destination,\r\n                value,\r\n                add(data, 0x20),     // First 32 bytes are the padded length of data, so exclude that\r\n                mload(data),       // Size of the input (in bytes) - this is what fixes the padding problem\r\n                0,\r\n                0                  // Output is ignored, therefore the output size is zero\r\n            )\r\n        }\r\n        return success;\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(uint transactionId)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        uint count = 0;\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n            if (count == required)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /*\r\n     * Internal functions\r\n     */\r\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return transactionId - Returns transaction ID.\r\n    function addTransaction(address destination, uint value, uint nonce, address token, uint fee, uint amount, bytes memory data)\r\n    internal\r\n    notNull(destination)\r\n    returns (uint transactionId)\r\n    {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = Transaction({\r\n            destination : destination,\r\n            value : value,\r\n            data : data,\r\n            executed : false,\r\n            nonce : nonce,\r\n            token : token,\r\n            amount: amount,\r\n            fee: fee\r\n        });\r\n        transactionCount += 1;\r\n        emit Submission(transactionId);\r\n    }\r\n\r\n    /*\r\n     * Web3 call functions\r\n     */\r\n    /// @dev Returns number of confirmations of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return count - Number of confirmations.\r\n    function getConfirmationCount(uint transactionId)\r\n    public\r\n    view\r\n    returns (uint count)\r\n    {\r\n        for (uint i = 0; i < owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns total number of transactions after filers are applied.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return count - Total number of transactions after filters are applied.\r\n    function getTransactionCount(bool pending, bool executed)\r\n    public\r\n    view\r\n    returns (uint count)\r\n    {\r\n        for (uint i = 0; i < transactionCount; i++)\r\n            if (pending && !transactions[i].executed\r\n            || executed && transactions[i].executed)\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOwners()\r\n    public\r\n    view\r\n    returns (address[] memory)\r\n    {\r\n        return owners;\r\n    }\r\n\r\n    /// @dev Returns array with owner addresses, which confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return _confirmations - Returns array of owner addresses.\r\n    function getConfirmations(uint transactionId)\r\n    public\r\n    view\r\n    returns (address[] memory _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i = 0; i < owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                confirmationsTemp[count] = owners[i];\r\n                count += 1;\r\n            }\r\n        _confirmations = new address[](count);\r\n        for (i = 0; i < count; i++)\r\n            _confirmations[i] = confirmationsTemp[i];\r\n    }\r\n\r\n    /// @dev Returns list of transaction IDs in defined range.\r\n    /// @param from Index start position of transaction array.\r\n    /// @param to Index end position of transaction array.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return _transactionIds - Returns array of transaction IDs.\r\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\r\n    public\r\n    view\r\n    returns (uint[] memory _transactionIds)\r\n    {\r\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i = 0; i < transactionCount; i++)\r\n            if (pending && !transactions[i].executed\r\n            || executed && transactions[i].executed)\r\n            {\r\n                transactionIdsTemp[count] = i;\r\n                count += 1;\r\n            }\r\n        _transactionIds = new uint[](to - from);\r\n        for (i = from; i < to; i++)\r\n            _transactionIds[i - from] = transactionIdsTemp[i];\r\n    }\r\n}"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.3.0/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.3.0/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.3.0/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"}}}