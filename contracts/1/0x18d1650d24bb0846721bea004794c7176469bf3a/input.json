{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"@openzeppelin/contracts/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"contracts/base/Base.sol":{"content":"//SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.6.12;\n\n// Contracts\nimport \"../roles/RolesManagerConsts.sol\";\n\n// Libraries\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n// Interfaces\nimport \"../settings/IPlatformSettings.sol\";\nimport \"../roles/IRolesManager.sol\";\n\nabstract contract Base {\n    using Address for address;\n\n    /* Constant Variables */\n\n    /* State Variables */\n\n    address private settings;\n\n    /* Modifiers */\n\n    modifier onlyOwner(address account) {\n        _requireHasRole(\n            RolesManagerConsts(_rolesManager().consts()).OWNER_ROLE(),\n            account,\n            \"SENDER_ISNT_OWNER\"\n        );\n        _;\n    }\n\n    modifier onlyMinter(address account) {\n        _requireHasRole(\n            RolesManagerConsts(_rolesManager().consts()).MINTER_ROLE(),\n            account,\n            \"SENDER_ISNT_MINTER\"\n        );\n        _;\n    }\n\n    /* Constructor */\n\n    constructor(address settingsAddress) internal {\n        require(settingsAddress.isContract(), \"SETTINGS_MUST_BE_CONTRACT\");\n        settings = settingsAddress;\n    }\n\n    /** Internal Functions */\n\n    function _settings() internal view returns (IPlatformSettings) {\n        return IPlatformSettings(settings);\n    }\n\n    function _rolesManager() internal view returns (IRolesManager) {\n        return IRolesManager(IPlatformSettings(settings).rolesManager());\n    }\n\n    function _requireHasRole(\n        bytes32 role,\n        address account,\n        string memory message\n    ) internal view {\n        IRolesManager rolesManager = _rolesManager();\n        rolesManager.requireHasRole(role, account, message);\n    }\n}\n"},"contracts/libs/AccountRewardsLib.sol":{"content":"//SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nlibrary AccountRewardsLib {\n    using Address for address;\n    using SafeMath for uint256;\n\n    struct AccountRewards {\n        address account;\n        uint256 amount;\n        uint256 available;\n        bool exists;\n    }\n\n    function create(\n        AccountRewards storage self,\n        address account,\n        uint256 amount\n    ) internal {\n        requireNotExists(self);\n        require(amount > 0, \"AMOUNT_MUST_BE_GT_ZERO\");\n        self.account = account;\n        self.amount = amount;\n        self.available = amount;\n        self.exists = true;\n    }\n\n    function increaseAmount(AccountRewards storage self, uint256 amount) internal {\n        requireExists(self);\n        require(amount > 0, \"AMOUNT_MUST_BE_GT_ZERO\");\n        self.amount = self.amount.add(amount);\n        self.available = self.available.add(amount);\n    }\n\n    function decreaseAmount(AccountRewards storage self, uint256 amount) internal {\n        requireExists(self);\n        require(amount > 0, \"AMOUNT_MUST_BE_GT_ZERO\");\n        self.amount = self.amount.sub(amount);\n        self.available = self.available.sub(amount);\n    }\n\n    function claimRewards(AccountRewards storage self, uint256 amount) internal {\n        self.available = self.available.sub(amount);\n    }\n\n    /* View Functions */\n\n    /**\n        @notice Checks whether the current account rewards exists or not.\n        @dev It throws a require error if the account rewards already exists.\n        @param self the current account rewards.\n     */\n    function requireNotExists(AccountRewards storage self) internal view {\n        require(!self.exists, \"ACCOUNT_REWARD_ALREADY_EXISTS\");\n    }\n\n    /**\n        @notice Checks whether the current account rewards exists or not.\n        @dev It throws a require error if the current account rewards doesn't exist.\n        @param self the current account rewards.\n     */\n    function requireExists(AccountRewards storage self) internal view {\n        require(self.exists, \"ACCOUNT_REWARD_NOT_EXISTS\");\n    }\n\n    /**\n        @notice It removes a current account rewards.\n        @param self the current account rewards to remove.\n     */\n    function remove(AccountRewards storage self) internal {\n        requireExists(self);\n        self.amount = 0;\n        self.available = 0;\n        self.account = address(0x0);\n        self.exists = false;\n    }\n}\n"},"contracts/libs/SettingsLib.sol":{"content":"//SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.6.12;\n\nlibrary SettingsLib {\n    /**\n        It defines a setting. It includes: value, min, and max values.\n     */\n    struct Setting {\n        uint256 value;\n        uint256 min;\n        uint256 max;\n        bool exists;\n    }\n\n    /**\n        @notice It creates a new setting given a name, min and max values.\n        @param value initial value for the setting.\n        @param min min value allowed for the setting.\n        @param max max value allowed for the setting.\n     */\n    function create(\n        Setting storage self,\n        uint256 value,\n        uint256 min,\n        uint256 max\n    ) internal {\n        requireNotExists(self);\n        require(value >= min, \"VALUE_MUST_BE_GT_MIN_VALUE\");\n        require(value <= max, \"VALUE_MUST_BE_LT_MAX_VALUE\");\n        self.value = value;\n        self.min = min;\n        self.max = max;\n        self.exists = true;\n    }\n\n    /**\n        @notice Checks whether the current setting exists or not.\n        @dev It throws a require error if the setting already exists.\n        @param self the current setting.\n     */\n    function requireNotExists(Setting storage self) internal view {\n        require(!self.exists, \"SETTING_ALREADY_EXISTS\");\n    }\n\n    /**\n        @notice Checks whether the current setting exists or not.\n        @dev It throws a require error if the current setting doesn't exist.\n        @param self the current setting.\n     */\n    function requireExists(Setting storage self) internal view {\n        require(self.exists, \"SETTING_NOT_EXISTS\");\n    }\n\n    /**\n        @notice It updates a current setting.\n        @dev It throws a require error if:\n            - The new value is equal to the current value.\n            - The new value is not lower than the max value.\n            - The new value is not greater than the min value\n        @param self the current setting.\n        @param newValue the new value to set in the setting.\n     */\n    function update(Setting storage self, uint256 newValue) internal returns (uint256 oldValue) {\n        requireExists(self);\n        require(self.value != newValue, \"NEW_VALUE_REQUIRED\");\n        require(newValue >= self.min, \"NEW_VALUE_MUST_BE_GT_MIN_VALUE\");\n        require(newValue <= self.max, \"NEW_VALUE_MUST_BE_LT_MAX_VALUE\");\n        oldValue = self.value;\n        self.value = newValue;\n    }\n\n    /**\n        @notice It removes a current setting.\n        @param self the current setting to remove.\n     */\n    function remove(Setting storage self) internal {\n        requireExists(self);\n        self.value = 0;\n        self.min = 0;\n        self.max = 0;\n        self.exists = false;\n    }\n}\n"},"contracts/minters/IRewardsMinter.sol":{"content":"//SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.6.12;\n\nimport \"../tokens/IMintableERC20.sol\";\n\ninterface IRewardsMinter {\n    event NewCalculatorAdded(\n        address indexed adder,\n        address indexed newCalulator,\n        uint256 calculatorPercentage,\n        uint256 currentPercentage\n    );\n\n    event CalculatorRemoved(\n        address indexed remover,\n        address indexed calulator,\n        uint256 calculatorPercentage,\n        uint256 currentPercentage\n    );\n\n    event CalculatorPercentageUpdated(\n        address indexed updater,\n        address indexed calulator,\n        uint256 newcalculatorPercentage,\n        uint256 currentPercentage\n    );\n\n    event RewardsClaimed(address indexed account, uint256 indexed periodId, uint256 amount);\n\n    function token() external view returns (IMintableERC20);\n\n    function settings() external view returns (address);\n\n    function rewardPeriodsRegistry() external view returns (address);\n\n    function currentPercentage() external view returns (uint256);\n\n    function getCalculators() external view returns (address[] memory);\n\n    function getAvailableRewards(uint256 periodId, address account) external view returns (uint256);\n\n    function claimRewards(uint256 periodId) external;\n\n    function addCalculator(address newCalculator, uint256 percentage) external;\n\n    function removeCalculator(address calculator) external;\n\n    function hasCalculator(address calculator) external view returns (bool);\n\n    function updateCalculatorPercentage(address calculator, uint256 percentage) external;\n}\n"},"contracts/rewards/IRewardsCalculator.sol":{"content":"//SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.6.12;\n\ninterface IRewardsCalculator {\n    function getRewards(\n        uint256 period,\n        address account,\n        uint256 totalRewards,\n        uint256 totalAvailableRewards\n    ) external view returns (uint256);\n\n    function processRewards(\n        uint256 period,\n        address account,\n        uint256 totalRewards,\n        uint256 totalAvailableRewards\n    ) external returns (uint256 rewardsForAccount);\n}\n"},"contracts/rewards/ManualPGURewardsCalculator.sol":{"content":"//SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n// Contracts\nimport \"../base/Base.sol\";\nimport \"./RewardsCalculatorBase.sol\";\n\n// Libraries\nimport \"../libs/AccountRewardsLib.sol\";\n\n// Interfaces\nimport \"./IRewardsCalculator.sol\";\n\ncontract ManualPGURewardsCalculator is Base, RewardsCalculatorBase, IRewardsCalculator {\n    using AccountRewardsLib for AccountRewardsLib.AccountRewards;\n\n    /* Events */\n\n    event ManualRewardsUpdated(\n        address indexed updater,\n        uint256 period,\n        address account,\n        uint256 amount\n    );\n\n    /* State Variables */\n    mapping(uint256 => mapping(address => AccountRewardsLib.AccountRewards)) private rewards;\n\n    /* Constructor */\n\n    constructor(address settingsAddress, address rewardsMinterAddress)\n        public\n        Base(settingsAddress)\n    {\n        _setRewardsMinter(rewardsMinterAddress);\n    }\n\n    function setMultiRewardsForPeriod(\n        uint256 rewardsPeriod,\n        address[] calldata accounts,\n        uint256[] calldata amounts\n    ) external onlyOwner(msg.sender) {\n        require(accounts.length == amounts.length, \"ARRAY_LENGTHS_NOT_EQUAL\");\n        for (uint256 i = 0; i < accounts.length; i++) {\n            _setRewardsForPeriod(rewardsPeriod, accounts[i], amounts[i]);\n        }\n    }\n\n    function removeMultiRewardsForPeriod(uint256 rewardsPeriod, address[] calldata accounts)\n        external\n        onlyOwner(msg.sender)\n    {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            _removeRewardsForPeriod(rewardsPeriod, accounts[i]);\n        }\n    }\n\n    function processRewards(\n        uint256 period,\n        address account,\n        uint256 totalRewards,\n        uint256 totalAvailableRewards\n    ) external override onlyRewardsMinter(msg.sender) returns (uint256 rewardsForAccount) {\n        rewardsForAccount = _getRewards(period, account, totalRewards, totalAvailableRewards);\n        if (rewardsForAccount > 0) {\n            rewards[period][account].claimRewards(rewardsForAccount);\n        }\n    }\n\n    /* View Functions */\n\n    function getRewards(\n        uint256 period,\n        address account,\n        uint256 totalRewards,\n        uint256 totalAvailableRewards\n    ) external view override returns (uint256) {\n        return _getRewards(period, account, totalRewards, totalAvailableRewards);\n    }\n\n    function getAccountRewardsFor(uint256 period, address account)\n        external\n        view\n        returns (AccountRewardsLib.AccountRewards memory)\n    {\n        return rewards[period][account];\n    }\n\n    /* Internal Functions */\n\n    function _getRewards(\n        uint256 period,\n        address account,\n        uint256,\n        uint256 totalAvailableRewards\n    ) internal view returns (uint256 rewardsForAccount) {\n        rewardsForAccount = rewards[period][account].available;\n        require(totalAvailableRewards >= rewardsForAccount, \"NOT_ENOUGH_TOTAL_AVAILAB_REWARDS\");\n    }\n\n    function _setRewardsForPeriod(\n        uint256 rewardsPeriod,\n        address account,\n        uint256 amount\n    ) internal {\n        rewards[rewardsPeriod][account].create(account, amount);\n\n        emit ManualRewardsUpdated(msg.sender, rewardsPeriod, account, amount);\n    }\n\n    function _removeRewardsForPeriod(uint256 rewardsPeriod, address account) internal {\n        rewards[rewardsPeriod][account].remove();\n\n        emit ManualRewardsUpdated(msg.sender, rewardsPeriod, account, 0);\n    }\n}\n"},"contracts/rewards/RewardsCalculatorBase.sol":{"content":"//SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.6.12;\n\n// Contracts\n\n// Libraries\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n// Interfaces\nimport \"../minters/IRewardsMinter.sol\";\n\nabstract contract RewardsCalculatorBase {\n    using Address for address;\n\n    /* Constant Variables */\n\n    /* State Variables */\n\n    address private rewardsMinter;\n\n    /* Modifiers */\n\n    modifier onlyRewardsMinter(address account) {\n        _requireOnlyRewardsMinter(account);\n        _;\n    }\n\n    /* Constructor */\n\n    /** View Functions */\n\n    function _rewardsMinter() internal view returns (IRewardsMinter) {\n        return IRewardsMinter(rewardsMinter);\n    }\n\n    function _requireOnlyRewardsMinter(address account) internal view {\n        require(\n            rewardsMinter != address(0x0) && account == rewardsMinter,\n            \"ACCOUNT_ISNT_REWARDS_MINTER\"\n        );\n    }\n\n    /* Internal Funtions */\n\n    function _setRewardsMinter(address rewardsMinterAddress) internal {\n        require(rewardsMinterAddress.isContract(), \"REWARDS_MINTER_MUST_BE_CONTRACT\");\n        rewardsMinter = rewardsMinterAddress;\n    }\n}\n"},"contracts/roles/IRolesManager.sol":{"content":"//SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.6.12;\n\ninterface IRolesManager {\n    event MaxMultiItemsUpdated(address indexed updater, uint8 oldValue, uint8 newValue);\n\n    function setMaxMultiItems(uint8 newMaxMultiItems) external;\n\n    function multiGrantRole(bytes32 role, address[] calldata accounts) external;\n\n    function multiRevokeRole(bytes32 role, address[] calldata accounts) external;\n\n    function consts() external view returns (address);\n\n    function maxMultiItems() external view returns (uint8);\n\n    function requireHasRole(bytes32 role, address account) external view;\n\n    function requireHasRole(\n        bytes32 role,\n        address account,\n        string calldata message\n    ) external view;\n}\n"},"contracts/roles/RolesManagerConsts.sol":{"content":"//SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.6.12;\n\ncontract RolesManagerConsts {\n    /**\n        @notice It is the AccessControl.DEFAULT_ADMIN_ROLE role.\n     */\n    bytes32 public constant OWNER_ROLE = keccak256(\"\");\n\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    bytes32 public constant CONFIGURATOR_ROLE = keccak256(\"CONFIGURATOR_ROLE\");\n\n    bytes32 public constant VAULT_CONFIGURATOR_ROLE = keccak256(\"VAULT_CONFIGURATOR_ROLE\");\n}\n"},"contracts/settings/IPlatformSettings.sol":{"content":"//SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/SettingsLib.sol\";\n\ninterface IPlatformSettings {\n    event PlatformPaused(address indexed pauser);\n\n    event PlatformUnpaused(address indexed unpauser);\n\n    event PlatformSettingCreated(\n        bytes32 indexed name,\n        address indexed creator,\n        uint256 minValue,\n        uint256 value,\n        uint256 maxValue\n    );\n\n    event PlatformSettingRemoved(bytes32 indexed name, address indexed remover, uint256 value);\n\n    event PlatformSettingUpdated(\n        bytes32 indexed name,\n        address indexed remover,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    function createSetting(\n        bytes32 name,\n        uint256 value,\n        uint256 min,\n        uint256 max\n    ) external;\n\n    function removeSetting(bytes32 name) external;\n\n    function getSetting(bytes32 name) external view returns (SettingsLib.Setting memory);\n\n    function getSettingValue(bytes32 name) external view returns (uint256);\n\n    function hasSetting(bytes32 name) external view returns (bool);\n\n    function rolesManager() external view returns (address);\n\n    function isPaused() external view returns (bool);\n\n    function requireIsPaused() external view;\n\n    function requireIsNotPaused() external view;\n\n    function pause() external;\n\n    function unpause() external;\n}\n"},"contracts/tokens/IMintableERC20.sol":{"content":"//SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMintableERC20 is IERC20 {\n    function mint(address account, uint256 amount) external;\n}\n"}}}