{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"localhost/interfaces/burnable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface Burnable {\r\n    function burn(uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n"},"localhost/interfaces/controller.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IController {\r\n    function set_pair(address pair) external;\r\n    function set_ready(bool _ready) external;\r\n    function notify() external;\r\n}"},"localhost/interfaces/token-timelock.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface ITokenTimelock {\r\n    function set_token(address token_) external;\r\n}"},"localhost/interfaces/uniswap-v2.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface UniswapRouterV2 {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n}\r\n\r\ninterface UniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}"},"localhost/libs/context.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"localhost/libs/erc20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"./safe-math.sol\";\r\nimport \"./context.sol\";\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/utils/Address.sol\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}"},"localhost/libs/ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"./context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"},"localhost/libs/safe-math.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"},"localhost/presale.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nimport \"./interfaces/burnable.sol\";\r\nimport \"./interfaces/uniswap-v2.sol\";\r\nimport \"./interfaces/controller.sol\";\r\nimport \"./interfaces/token-timelock.sol\";\r\n\r\nimport \"./libs/ownable.sol\";\r\nimport \"./libs/erc20.sol\";\r\nimport \"./libs/safe-math.sol\";\r\n\r\ncontract YvsPresale is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // the token being sold\r\n    IERC20 public token;\r\n\r\n    // the addresses where collected funds are sent\r\n    address payable public team;\r\n    address payable public marketing;\r\n    address payable public listing;\r\n\r\n    // controller contract\r\n    address public controller;\r\n\r\n    // treasury contract\r\n    address payable public treasury = 0xe04af79053639D2c4C1c3827F72e52459eE0E88e;\r\n\r\n    // timelock contract\r\n    address public timelock;\r\n\r\n    // presale duration\r\n    uint256 public start;\r\n    uint256 public duration = 5 days;\r\n    uint256 public grace = 12 days;\r\n\r\n    // token max cap\r\n    uint256 public cap = 100000000000000000000000; // 100.000 $yvs\r\n\r\n    // presale threshold to close\r\n    uint256 public threshold = 90; // 90 % of token cap\r\n\r\n    // total to be distributed\r\n    uint256 public total;\r\n\r\n    // total wei deposited\r\n    uint256 public deposited;\r\n\r\n    // total number of depositors\r\n    uint256 public depositors;\r\n\r\n    // limits for investment\r\n    uint256 public min = 1000000000000000000; // 1 eth\r\n    uint256 public max = 50000000000000000000; // 50 eth\r\n\r\n    // token exchange rate for base amount (1 eth = 45 $yvs)\r\n    uint256 public rate = 45000000000000000000;\r\n\r\n    // referral bonus\r\n    uint256 public referralRate = 10;\r\n    uint256 public referralRateReferrer = 5;\r\n    uint256 public referralRateDepositor = 5;\r\n    uint256 public referralRateBase = 1000;\r\n\r\n    // public contact information\r\n    string public contact;\r\n\r\n    // is the presale finalized\r\n    bool public finalized = false;\r\n\r\n    // is the distribution finished\r\n    bool public completed = false;\r\n\r\n    // is the presale cancelled\r\n    bool public cancelled = false;\r\n\r\n    // is the presale closed\r\n    bool public closed = false;\r\n\r\n    struct ReferralBonus {\r\n        uint256 count;\r\n        uint256 amount;\r\n    }\r\n\r\n    // mappings for deposited, claimable\r\n    mapping(address => uint256) public deposits;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => ReferralBonus) public bonus;\r\n\r\n    // mappings for referrals\r\n    mapping(bytes12 => address) public referrals;\r\n    mapping(address => bool) public registered;\r\n\r\n    UniswapRouterV2 internal uniswap = UniswapRouterV2(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    UniswapV2Factory internal factory = UniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n\r\n    address internal weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    /**\r\n    * event for presale enter logging\r\n    * @param account who will receive the tokens\r\n    * @param value weis entered into presale\r\n    * @param amount amount of tokens to be distributed\r\n    */ \r\n    event PresaleEntered(address indexed account, uint256 value, uint256 amount);\r\n\r\n    /**\r\n    * event for referral earned from user\r\n    * @param beneficiary that receives the referral bonus\r\n    * @param amount amount of bonus tokens from daily\r\n    */ \r\n    event DailyBonusEarned(address indexed beneficiary, uint256 amount);\r\n\r\n    /**\r\n    * event for referral earned from user\r\n    * @param beneficiary that receives the referral bonus\r\n    * @param account that entered presale with referral code\r\n    * @param amount amount of bonus tokens from referral\r\n    */ \r\n    event ReferrerEarned(address indexed beneficiary, address indexed account, uint256 amount);\r\n\r\n    /**\r\n    * event for referral earned from user\r\n    * @param account that entered presale with referral code\r\n    * @param amount amount of bonus tokens from referral\r\n    */ \r\n    event DepositorEarned(address indexed account, uint256 amount);\r\n\r\n    /**\r\n    * event for claim of tokens\r\n    * @param recipient that received the tokens\r\n    * @param amount amount of tokens received\r\n    */ \r\n    event Claimed(address indexed recipient, uint256 amount);\r\n\r\n    /**\r\n    * event for refund of wei\r\n    * @param recipient that received the wei\r\n    * @param amount amount of wei received\r\n    */ \r\n    event Refunded(address indexed recipient, uint256 amount);\r\n\r\n    /**\r\n    * event for setting a referral\r\n    * @param account the account that set the referral code\r\n    * @param code referral string from 8 characters\r\n    */ \r\n    event ReferralSet(address indexed account, bytes12 code);\r\n\r\n    /**\r\n    * event for signaling liquidity creation & lock\r\n    * @param amount amount of lp tokens created\r\n    * @param timelock address of timelock contract\r\n    */\r\n    event LiquidityAddedAndLocked(uint256 amount, address timelock);\r\n\r\n    /**\r\n    * event for signaling salvaged non-token assets\r\n    * @param token salvaged token address\r\n    * @param amount amount of tokens salvaged\r\n    */\r\n    event Salvaged(address token, uint256 amount);\r\n\r\n    /**\r\n    * event for signaling dist collection of wei\r\n    * @param recipient address that received the wei\r\n    * @param amount amount of wei collected\r\n    */\r\n    event DustCollected(address recipient, uint256 amount);\r\n\r\n    /**\r\n    * event for signaling destruction of leftover tokens\r\n    * @param amount amount of tokens burned\r\n    */\r\n    event Destroyed(uint256 amount);\r\n\r\n    /**\r\n    * event for signaling presale completion\r\n    */\r\n    event Completed();\r\n\r\n    // CONSTRUCTOR\r\n\r\n    constructor(\r\n        address _token,\r\n        address _timelock,\r\n        uint256 _start,\r\n        string memory _contact\r\n    ) public {\r\n        require(_start >= block.timestamp);\r\n        \r\n        token = IERC20(_token);\r\n        timelock = _timelock;\r\n        start = _start;\r\n        contact = _contact;\r\n\r\n        team = 0x0dB32cD2805c541375DFa609D4866D132A4687A6;\r\n        marketing = 0x685Da6c75698611ac875d8a485d6eFB18A88921D;\r\n        listing = 0xBF2Ba575C25F36Ea507726656a7fdB4374974Aa2;\r\n    }\r\n\r\n    // fallback function to enter presale\r\n    receive () external payable {\r\n        // will probably fail unless gas limit is set high\r\n        enter(msg.value);\r\n    }\r\n\r\n    /**\r\n    * Low level presale enter function\r\n    * @param _amount the wei amount\r\n    */\r\n    function enter(uint256 _amount) public payable active {\r\n        require(msg.value == _amount);\r\n        require(msg.sender != address(0));\r\n        require(valid(msg.sender, _amount));\r\n\r\n        uint256 amount;\r\n        uint256 acquired;\r\n\r\n        // calculate base tokens\r\n        amount = _amount.mul(rate).div(1e18);\r\n        require(distributable(amount), \"not enough tokens for distribution\");\r\n\r\n        // calculate daily bonus\r\n        uint256 dailyBonus;\r\n        if (block.timestamp <= start.add(1 days)) {\r\n            dailyBonus = amount.mul(125).div(1000); // 12.5 % for first day\r\n        }\r\n        else if (block.timestamp <= start.add(2 days)) {\r\n            dailyBonus = amount.mul(75).div(1000); // 7.5 % for second day\r\n        }\r\n        else if (block.timestamp <= start.add(3 days)) {\r\n            dailyBonus = amount.mul(50).div(1000); // 5.0 % for third day\r\n        }\r\n        else if (block.timestamp <= start.add(4 days)) {\r\n            dailyBonus = amount.mul(25).div(1000); // 2.5 % for fourth day\r\n        }\r\n        \r\n        if (dailyBonus > 0) {\r\n            if (distributable(amount.add(dailyBonus))) {\r\n                acquired = acquired.add(dailyBonus);\r\n                emit DailyBonusEarned(msg.sender, dailyBonus);\r\n            }\r\n        }\r\n\r\n        // store in dictionary\r\n        uint256 distribution = amount.add(acquired);\r\n        deposits[msg.sender] = deposits[msg.sender].add(_amount);\r\n        balances[msg.sender] = balances[msg.sender].add(distribution);\r\n        emit PresaleEntered(msg.sender, amount, distribution);\r\n\r\n        deposited = deposited.add(_amount);\r\n        depositors = depositors.add(1);\r\n        total = total.add(distribution);\r\n    }\r\n\r\n    /**\r\n    * Low level presale enter function\r\n    * @param _amount the wei amount\r\n    * @param _code referral code\r\n    */\r\n    function enter(uint256 _amount, bytes12 _code) public payable active {\r\n        require(msg.value == _amount);\r\n        require(msg.sender != address(0));\r\n        require(valid(msg.sender, _amount));\r\n        require(referrals[_code] != address(0), \"referral code is invalid\");\r\n        require(referrals[_code] != msg.sender, \"can not use your own referral code\");\r\n\r\n        uint256 acquired;\r\n        uint256 amount;\r\n\r\n        // calculate base tokens\r\n        amount = _amount.mul(rate).div(1e18);\r\n        require(distributable(amount), \"not enough tokens for distribution\");\r\n\r\n        // calculate daily bonus\r\n        uint256 dailyBonus;\r\n        if (block.timestamp <= start.add(1 days)) {\r\n            dailyBonus = amount.mul(125).div(1000); // 12.5 % for first day\r\n        }\r\n        else if (block.timestamp <= start.add(2 days)) {\r\n            dailyBonus = amount.mul(75).div(1000); // 7.5 % for second day\r\n        }\r\n        else if (block.timestamp <= start.add(3 days)) {\r\n            dailyBonus = amount.mul(50).div(1000); // 5.0 % for third day\r\n        }\r\n        else if (block.timestamp <= start.add(4 days)) {\r\n            dailyBonus = amount.mul(25).div(1000); // 2.5 % for fourth day\r\n        }\r\n        \r\n        if (dailyBonus > 0) {\r\n            if (distributable(amount.add(dailyBonus))) {\r\n                acquired = acquired.add(dailyBonus);\r\n                emit DailyBonusEarned(msg.sender, dailyBonus);\r\n            }\r\n        }\r\n\r\n        // calculate bonus for referral\r\n        uint256 referralBonus = amount.mul(referralRate).div(referralRateBase); \r\n        if (referralBonus > 0) {\r\n            if (distributable(amount.add(acquired).add(referralBonus))) {\r\n                address referrer = referrals[_code];\r\n                uint256 referrerBonus = amount.mul(referralRateReferrer).div(referralRateBase); \r\n                uint256 depositorBonus = amount.mul(referralRateDepositor).div(referralRateBase); \r\n                balances[referrer] = balances[referrer].add(referrerBonus);\r\n                bonus[referrer].count = bonus[referrer].count.add(1);\r\n                bonus[referrer].amount = bonus[referrer].amount.add(referrerBonus);\r\n                acquired = acquired.add(depositorBonus);\r\n                total = total.add(referrerBonus);\r\n                emit ReferrerEarned(referrer, msg.sender, referrerBonus);\r\n                emit DepositorEarned(msg.sender, depositorBonus);\r\n            }\r\n        }\r\n\r\n        // store in dictionary\r\n        uint256 distribution = amount.add(acquired);\r\n        deposits[msg.sender] = deposits[msg.sender].add(_amount);\r\n        balances[msg.sender] = balances[msg.sender].add(distribution);\r\n        emit PresaleEntered(msg.sender, amount, distribution);\r\n\r\n        deposited = deposited.add(_amount);\r\n        depositors = depositors.add(1);\r\n        total = total.add(distribution);\r\n    }\r\n\r\n    /**\r\n    * Refund collected eth from user if presale is cancelled\r\n    */\r\n    function refund() external {\r\n        require(cancelled, \"presale is not cancelled\");\r\n        require(deposits[msg.sender] > 0, \"you have not deposited anything\");\r\n\r\n        // return collected ether\r\n        msg.sender.transfer(deposits[msg.sender]);\r\n        emit Refunded(msg.sender, deposits[msg.sender]);\r\n        deposited = deposited.sub(deposits[msg.sender]);\r\n        total = total.sub(balances[msg.sender]);\r\n        deposits[msg.sender] = 0;\r\n        balances[msg.sender] = 0;\r\n    }\r\n\r\n    /**\r\n    * Claim tokens after presale is distributed\r\n    */\r\n    function claim() external distributed {\r\n        require(balances[msg.sender]> 0, \"you can not claim any tokens\");\r\n\r\n        // send claimable token to user\r\n        token.safeTransfer(msg.sender, balances[msg.sender]);\r\n        emit Claimed(msg.sender, balances[msg.sender]);\r\n        balances[msg.sender] = 0;\r\n    }\r\n\r\n    /**\r\n    * Set a referral code for an address\r\n    * @param code referral code\r\n    */\r\n    function referral(bytes12 code) external {\r\n        require(referrals[code] == address(0), \"referral code already set\");\r\n        require(!registered[msg.sender], \"you have already set a referral code\");\r\n\r\n        referrals[code] = address(msg.sender);\r\n        registered[msg.sender] = true;\r\n        emit ReferralSet(msg.sender, code);\r\n    }\r\n\r\n    /**\r\n    * Distribute wei, create liquidity pair and start rewards after presale end\r\n    */\r\n    function distribute() external {\r\n        require(concluded(), \"presale is not concluded\");\r\n        require(address(this).balance >= deposited, \"!balance >= deposited\");\r\n        \r\n        if (deposited > 0) {\r\n            // calculate distribution amounts\r\n            uint256 _liquidity = deposited.mul(30).div(100); // 30 % to liquidity\r\n            uint256 _team = deposited.mul(20).div(100); // 20 % to team\r\n            uint256 _marketing = deposited.mul(30).div(100); // 30 % to marketing\r\n            uint256 _listing = deposited\r\n                .sub(_liquidity)\r\n                .sub(_team)\r\n                .sub(_marketing); // 20 % to exchange listings\r\n\r\n            // calculate token uniswap liquidity amount\r\n            uint256 _uniswap = _liquidity.mul(rate).div(1e18);\r\n\r\n            // create uniswap pair\r\n            token.safeApprove(address(uniswap), _uniswap);\r\n            ( , , uint256 added) = uniswap.addLiquidityETH{value: _liquidity}(address(token), _uniswap, 0, 0, address(timelock), block.timestamp + 5 minutes);\r\n            emit LiquidityAddedAndLocked(added, timelock);\r\n\r\n            // get uniswap pair address\r\n            address pair = factory.getPair(address(token), weth);\r\n\r\n            // set token in timelock contract\r\n            ITokenTimelock(timelock).set_token(pair);\r\n\r\n            // set uniswap pair address in controller\r\n            IController(controller).set_pair(pair);\r\n\r\n            // set controller to ready\r\n            IController(controller).set_ready(true);\r\n\r\n            // start distribution\r\n            IController(controller).notify();\r\n\r\n            // transfer wei to addresses\r\n            team.transfer(_team);\r\n            marketing.transfer(_marketing);\r\n            listing.transfer(_listing);\r\n        }\r\n\r\n        // signal distribution complete\r\n        completed = true;\r\n        emit Completed();\r\n    }\r\n\r\n    /**\r\n    * Salvage unrelated tokens to presale\r\n    * @param _token address of token to salvage\r\n    */\r\n    function salvage(address _token) external distributed onlyOwner {\r\n        require(_token != address(token), \"can not salvage token\");\r\n\r\n        uint256 balance = IERC20(_token).balanceOf(address(this));\r\n        if (balance > 0) {\r\n            IERC20(_token).safeTransfer(treasury, balance);\r\n            emit Salvaged(_token, balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Collect wei left as dust on contract after grace period\r\n    */\r\n    function collect_dust() external distributed onlyOwner {\r\n        require(!cancelled);\r\n        require(block.timestamp >= start.add(grace), \"grace period not over\");\r\n\r\n        uint256 balance = address(this).balance;\r\n        if (balance > 0) {\r\n            treasury.transfer(balance);\r\n            emit DustCollected(treasury, balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Destroy (burn) leftover tokens from presale\r\n    */\r\n    function destroy() external distributed onlyOwner {\r\n        require(!cancelled);\r\n        require(block.timestamp >= start.add(grace), \"grace period not over\");\r\n\r\n        uint256 balance = token.balanceOf(address(this));\r\n        if (balance > 0) {\r\n            Burnable(address(token)).burn(balance);\r\n            emit Destroyed(balance);\r\n        }\r\n    }\r\n\r\n    // *** RESTRICTED ***\r\n\r\n    /**\r\n    * Set controller contract for the presale\r\n    * @param _controller address of controller contract\r\n    */\r\n    function set_controller(address _controller) external onlyOwner {\r\n        require(controller == address(0), \"!controller\");\r\n        controller = _controller;\r\n    }\r\n\r\n    /**\r\n    * Update contact information on the contract\r\n    * @param _contact text to set as contact information\r\n    */\r\n    function update(string memory _contact) external onlyOwner {\r\n        contact = _contact;\r\n    }\r\n\r\n    /**\r\n    * Cancel presale, stop accepting wei and enable refunds\r\n    */\r\n    function cancel() external onlyOwner {\r\n        cancelled = true;\r\n    }\r\n\r\n    /**\r\n    * Close presale if threshold is reached\r\n    */\r\n    function close() external onlyOwner {\r\n        require(reached(), \"threshold is not reached\");\r\n\r\n        closed = true;\r\n    }\r\n\r\n    // *** VIEWS **** //\r\n\r\n\r\n    /**\r\n    * Returns claimable amount for address\r\n    */\r\n    function claimable() external view returns (uint256 amount) {\r\n        if (!cancelled) {\r\n            amount = balances[msg.sender];\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Check if wei amount is within limits\r\n    */\r\n    function valid(address account, uint256 amount) internal view returns (bool) {\r\n        bool above = deposits[account].add(amount) >= min;\r\n        bool below = deposits[account].add(amount) <= max;\r\n\r\n        return (above && below);\r\n    }\r\n\r\n    /**\r\n    * Check if token amount can be distributed\r\n    */\r\n    function distributable(uint256 amount) internal view returns (bool) {\r\n        bool below = total.add(amount) <= cap;\r\n\r\n        return (below);\r\n    }\r\n\r\n    /**\r\n    * Check if presale if concluded\r\n    */\r\n    function concluded() internal view returns (bool) {\r\n        if (closed) {\r\n            return true;\r\n        }\r\n\r\n        if (block.timestamp > start.add(duration) && !cancelled) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * Check if threshold is reached\r\n    */\r\n    function reached() internal view returns (bool) {\r\n        bool above = total.mul(100).div(cap) >= threshold;\r\n\r\n        return (above);\r\n    }\r\n\r\n    // *** MODIFIERS **** //\r\n\r\n    modifier distributed {\r\n        require(\r\n            completed,\r\n            \"tokens were not distributed yet\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier active {\r\n        require(\r\n            block.timestamp >= start,\r\n            \"presale has not started yet\"\r\n        );\r\n\r\n        require(\r\n            block.timestamp <= start.add(duration),\r\n            \"presale has concluded\"\r\n        );\r\n\r\n        require(\r\n            !cancelled,\r\n            \"presale was cancelled\"\r\n        );\r\n\r\n        require(\r\n            !closed,\r\n            \"presale was closed\"\r\n        );\r\n\r\n        _;\r\n    }\r\n}"}}}