{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "SingleNFT.sol": {
      "content": "// SPDX-License-Identifier: private\r\n//\r\n// Single NFToken\r\n\r\npragma solidity ^0.7.0;\r\n\r\ncontract SingleNFT {\r\n\r\n    address private _admin;\r\n\t\r\n    // Token long name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n\tstring private tag1;\r\n\r\n    // Mapping from token ID to owner address\r\n    //mapping(uint256 => address) private _owners;\r\n\t\r\n\taddress private _owner; // single owner for single token\r\n\r\n\t//Declare an Event\r\n\t//event TokenTransferred(address _from, address _to, address _by);\r\n\r\n//    constructor(string memory name_, string memory symbol_) \r\n    constructor () {\r\n\t\t_admin = msg.sender;\r\n        _name = \"Canada Day - July 1, 2021\";\r\n        _symbol = \"Can21\";\r\n\t\t_owner = msg.sender;\r\n\t\t\r\n\t\ttag1= \"2021 Best Countries Report names Canada as the No.1 country in the world\";\r\n    }\r\n\r\n    function transferFrom( address from, address to ) // there is no tokenID\r\n    public virtual {\r\n\r\n\t\tif (msg.sender != _admin) { // Admin can do any transfer\r\n\t\t\trequire(msg.sender == from, \"Not yours\");\r\n\t\t}\r\n\t\t\r\n\t\trequire(from == _owner, \"no Token\");\r\n        _owner = to;\r\n\r\n        //_balances[from] -= 1;\r\n        //_balances[to] += 1;\r\n\r\n\t\t//emit TokenTransferred(from, to, msg.sender);\r\n    }\r\n/*\t\r\n\tfunction inspectSender() public view returns(address) {\r\n        return msg.sender;\r\n    }\r\n\tfunction inspectAdmin() public view returns(address) {\r\n        return _admin;\r\n    }\r\n*/\r\n    function inspectOwner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n\tfunction inspectToken() public view returns(string memory) {\r\n        return string(abi.encodePacked(_symbol,\" | \",_name));\r\n    }\r\n\r\n\tfunction inspectTag1() public view returns(string memory) {\r\n        return tag1;\r\n    }\r\n\r\n} // end of Contract\r\n"
    }
  }
}