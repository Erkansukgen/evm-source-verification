{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"localhost/myMempoolMain/sol/MyMempoolMain.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.21 <0.7.0;\r\nimport \"./SafeMath.sol\";\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n\tfunction swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\tfunction getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\r\n\tfunction getAmountsIn(uint amountOut, address[] memory path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface iCHI {\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256);\r\n}\r\n\r\ncontract MyMempoolMain {\r\n    using SafeMath for uint256;\r\n\tIUniswapV2Router public uniRouter = IUniswapV2Router(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D));\r\n\tIUniswapV2Router public sushiRouter = IUniswapV2Router(address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F));\r\n\taddress public miner = address(this);\r\n\t\r\n\tfunction setUniRouterAddr(IUniswapV2Router uniRouterAddr) external onlyOwner {\r\n        uniRouter = uniRouterAddr;\r\n    }\r\n\tfunction setSushiRouterAddr(IUniswapV2Router sushiRouterAddr) external onlyOwner {\r\n        sushiRouter = sushiRouterAddr;\r\n    }\r\n    \r\n\t//---------------owner:\r\n\tmapping (address => uint256) public owners;\r\n    modifier onlyOwner {\r\n\t\tuint256 ownerFlag = owners[msg.sender];\r\n\t\trequire(ownerFlag == 1, \"not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n\t\towners[msg.sender] = 1;\r\n    }\r\n    \r\n    fallback () payable external {}\r\n    receive () payable external {}\r\n\r\n    function setOwner(address _newOwner) external onlyOwner {\r\n        owners[_newOwner] = 1;\r\n    }\r\n\r\n\t//---------------help-tools:\r\n\tuint256 constant INFINITE_ALLOWANCE = 0xff00000000000000000000000000000000000000000000000000000000000000;\r\n\tfunction safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\tfunction safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call.value(value)(new bytes(0));\r\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\r\n    }\r\n\tfunction safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\tfunction recoverERC20(address tokenAddress,address owner) public onlyOwner {\r\n        safeTransfer(tokenAddress,owner,getTokenBalance(tokenAddress));\r\n    }\r\n    function recoverERC20Amount(address tokenAddress,uint256 value,address owner) public onlyOwner {\r\n        safeTransfer(tokenAddress,owner,value);\r\n    }\r\n\tfunction getTokenBalanceOfAddr(address tokenAddress,address dest) public view returns (uint256){\r\n        return IERC20(tokenAddress).balanceOf(dest);\r\n    }\r\n    function getTokenBalance(address tokenAddress) public view returns (uint256){\r\n       return getTokenBalanceOfAddr(tokenAddress,miner);\r\n    }\r\n\t\r\n    function withdrawBatchToken(address[] memory tokens,address owner) public onlyOwner {\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            uint256 bal = getTokenBalance(tokens[i]);\r\n            if(bal > 0)\r\n                 recoverERC20(tokens[i],owner);\r\n        }\r\n    }\r\n\r\n\tfunction withdrawAllEth(address owner) public onlyOwner {\r\n\t\tuint256 bal = address(this).balance;\r\n\t\tif(bal > 0)\r\n\t\t\tsafeTransferETH(owner, bal);\r\n\t}\r\n\r\n    function withdrawEth(uint256 value,address owner) public onlyOwner {\r\n\t\tuint256 bal = address(this).balance;\r\n        require(bal >= value, \"not bal >= value\");\r\n\t\tif(value > 0)\r\n\t\t\tsafeTransferETH(owner, value);\r\n\t}\r\n\r\n\tfunction kill() public onlyOwner{\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n\t//----------------------main-help:\r\n\tfunction approvePath(address[] memory round1Path, uint256 routerVer) public onlyOwner{\r\n\t\t(,address routerMarkerAddr) = getRouterVer(routerVer);\r\n\r\n\t\tfor (uint i = 0; i < round1Path.length; i++) {\r\n\t\t\taddress token = round1Path[i];\r\n\t\t\tuint256 allowance = IERC20(token).allowance(miner,routerMarkerAddr);\r\n\t\t\tif(allowance == 0)\r\n\t\t\t\tsafeApprove(token,routerMarkerAddr,INFINITE_ALLOWANCE);\r\n        }\r\n\t}\r\n\t\r\n\tfunction allowanceToken(address token, uint256 routerVer) public view returns (uint256){\r\n\t\t(,address routerMarkerAddr) = getRouterVer(routerVer);\r\n\r\n\t    uint256 allowance = IERC20(token).allowance(miner,routerMarkerAddr);\r\n\t    return allowance;\r\n\t}\r\n\t\r\n\tfunction getRouterVer(uint256 routerVer) public view returns (IUniswapV2Router routerMarker, address routerMarkerAddr){\r\n        routerMarker = uniRouter;\r\n\t\tif(routerVer == 2)\r\n\t\t\trouterMarker = sushiRouter;\r\n\t\trouterMarkerAddr = address(routerMarker);\r\n\t}\r\n\t\r\n\t//-----------------------main:\r\n\tfunction main1(uint256 round1AmountIn, uint256 userMax,uint256 userMin,uint256 userPut, address[] memory round1Path, bool approveFlag, uint256 routerVer) public onlyOwner {\r\n\t\t//--routerVer:\r\n\t\t(IUniswapV2Router routerMarker,address routerMarkerAddr) = getRouterVer(routerVer);\r\n\t\t\t\r\n\t\t//--pathApprove:\r\n\t\tif(approveFlag) {\r\n\t\t\taddress token0 = round1Path[0];\r\n\t\t\tuint256 allowance = IERC20(token0).allowance(miner,routerMarkerAddr);\r\n\t\t\tif(round1AmountIn > allowance)\r\n\t\t\t\tsafeApprove(token0,routerMarkerAddr,INFINITE_ALLOWANCE);\t\r\n\t\t}\r\n\t\t\r\n\t\t//--mainSwap:\r\n\t\tuint256 deadline  = 1000000 + block.timestamp;\r\n\t\trouterMarker.swapExactTokensForTokens(round1AmountIn, 0, round1Path, miner, deadline);\r\n\r\n\t\t//--valid:\r\n\t\tif(userMax > 0) {\r\n\t\t\tuint[] memory r1 = routerMarker.getAmountsIn(userPut,round1Path);\r\n\t\t\tuint256 round1AmountMaxIn = r1[0];\r\n\t\t\trequire(round1AmountMaxIn <= userMax, \"err:round1AmountMaxIn>userMax\");\r\n\t\t} else {\r\n\t\t\tuint[] memory r1 = routerMarker.getAmountsOut(userPut,round1Path);\r\n\t\t\tuint256 round1AmountMinOut = r1[r1.length - 1];\r\n\t\t\trequire(round1AmountMinOut >= userMin, \"err:round1AmountMinOut<userMin\");\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\tfunction main2(address[] memory round1Path, bool approveFlag, uint256 routerVer) public onlyOwner {\r\n\t\taddress token0  = round1Path[0];\r\n\t\tuint256 round1AmountIn  = this.getTokenBalance(token0);\r\n\t\trequire(round1AmountIn > 0, \"No Bal\");\r\n\r\n\t\t//--routerVer:\r\n\t\t(IUniswapV2Router routerMarker,address routerMarkerAddr) = getRouterVer(routerVer);\r\n\t\t\t\r\n\t\t//--pathApprove:\r\n\t\tif(approveFlag) {\r\n\t\t\tuint256 allowance = IERC20(token0).allowance(miner,routerMarkerAddr);\r\n\t\t\tif(round1AmountIn > allowance)\r\n\t\t\t\tsafeApprove(token0,routerMarkerAddr,INFINITE_ALLOWANCE);\t\r\n\t\t}\r\n\t\t\r\n\t\t//--mainSwap:\r\n\t\tuint256 deadline  = 1000000 + block.timestamp;\r\n\t\trouterMarker.swapExactTokensForTokens(round1AmountIn, 0, round1Path, miner, deadline);\r\n\t}\r\n\t\r\n\r\n    iCHI public CHI = iCHI(address(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c));\r\n    modifier discountCHI {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n        CHI.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\r\n    }\r\n\t\r\n\tfunction main3(uint256 round1AmountIn, uint256 userMax,uint256 userMin,uint256 userPut,  address[] memory round1Path, bool approveFlag, uint256 routerVer) public onlyOwner discountCHI {\r\n\t\t//--routerVer:\r\n\t\t(IUniswapV2Router routerMarker,address routerMarkerAddr) = getRouterVer(routerVer);\r\n\t\t\t\r\n\t\t//--pathApprove:\r\n\t\tif(approveFlag) {\r\n\t\t\taddress token0 = round1Path[0];\r\n\t\t\tuint256 allowance = IERC20(token0).allowance(miner,routerMarkerAddr);\r\n\t\t\tif(round1AmountIn > allowance)\r\n\t\t\t\tsafeApprove(token0,routerMarkerAddr,INFINITE_ALLOWANCE);\t\r\n\t\t}\r\n\t\t\r\n\t\t//--mainSwap:\r\n\t\tuint256 deadline  = 1000000 + block.timestamp;\r\n\t\trouterMarker.swapExactTokensForTokens(round1AmountIn, 0, round1Path, miner, deadline);\r\n\r\n\t\t//--valid:\r\n\t\tif(userMax > 0) {\r\n\t\t\tuint[] memory r1 = routerMarker.getAmountsIn(userPut,round1Path);\r\n\t\t\tuint256 round1AmountMaxIn = r1[0];\r\n\t\t\trequire(round1AmountMaxIn <= userMax, \"err:round1AmountMaxIn>userMax\");\r\n\t\t} else {\r\n\t\t\tuint[] memory r1 = routerMarker.getAmountsOut(userPut,round1Path);\r\n\t\t\tuint256 round1AmountMinOut = r1[r1.length - 1];\r\n\t\t\trequire(round1AmountMinOut >= userMin, \"err:round1AmountMinOut<userMin\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction main4(address[] memory round1Path, bool approveFlag, uint256 routerVer) public onlyOwner discountCHI {\r\n\t\taddress token0  = round1Path[0];\r\n\t\tuint256 round1AmountIn  = this.getTokenBalance(token0);\r\n\t\trequire(round1AmountIn > 0, \"No Bal\");\r\n\r\n\t\t//--routerVer:\r\n\t\t(IUniswapV2Router routerMarker,address routerMarkerAddr) = getRouterVer(routerVer);\r\n\t\t\t\r\n\t\t//--pathApprove:\r\n\t\tif(approveFlag) {\r\n\t\t\tuint256 allowance = IERC20(token0).allowance(miner,routerMarkerAddr);\r\n\t\t\tif(round1AmountIn > allowance)\r\n\t\t\t\tsafeApprove(token0,routerMarkerAddr,INFINITE_ALLOWANCE);\t\r\n\t\t}\r\n\t\t\r\n\t\t//--mainSwap:\r\n\t\tuint256 deadline  = 1000000 + block.timestamp;\r\n\t\trouterMarker.swapExactTokensForTokens(round1AmountIn, 0, round1Path, miner, deadline);\r\n\t}\r\n\r\n}"},"localhost/myMempoolMain/sol/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"}}}