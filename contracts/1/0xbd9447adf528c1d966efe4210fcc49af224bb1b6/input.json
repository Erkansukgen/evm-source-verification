{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/MCDPriceVerifier.sol":{"content":"pragma solidity ^0.6.0;\n\n\nabstract contract OsmMom {\n    mapping (bytes32 => address) public osms;\n}\n\nabstract contract Osm {\n    mapping(address => uint256) public bud;\n\n    function peep() external view virtual returns (bytes32, bool);\n}\n\nabstract contract Manager {\n    function last(address) virtual public returns (uint);\n    function cdpCan(address, uint, address) virtual public view returns (uint);\n    function ilks(uint) virtual public view returns (bytes32);\n    function owns(uint) virtual public view returns (address);\n    function urns(uint) virtual public view returns (address);\n    function vat() virtual public view returns (address);\n    function open(bytes32, address) virtual public returns (uint);\n    function give(uint, address) virtual public;\n    function cdpAllow(uint, address, uint) virtual public;\n    function urnAllow(address, uint) virtual public;\n    function frob(uint, int, int) virtual public;\n    function flux(uint, address, uint) virtual public;\n    function move(uint, address, uint) virtual public;\n    function exit(address, uint, address, uint) virtual public;\n    function quit(uint, address) virtual public;\n    function enter(address, uint) virtual public;\n    function shift(uint, uint) virtual public;\n}\n\n\ncontract AdminAuth {\n\n    address public owner;\n    address public admin;\n\n    modifier onlyOwner() {\n        require(owner == msg.sender);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\n    /// @param _admin Address of multisig that becomes admin\n    function setAdminByOwner(address _admin) public {\n        require(msg.sender == owner);\n        require(admin == address(0));\n\n        admin = _admin;\n    }\n\n    /// @notice Admin is able to set new admin\n    /// @param _admin Address of multisig that becomes new admin\n    function setAdminByAdmin(address _admin) public {\n        require(msg.sender == admin);\n\n        admin = _admin;\n    }\n\n    /// @notice Admin is able to change owner\n    /// @param _owner Address of new owner\n    function setOwnerByAdmin(address _owner) public {\n        require(msg.sender == admin);\n\n        owner = _owner;\n    }\n}\n\ncontract MCDPriceVerifier is AdminAuth {\n\n    OsmMom public osmMom = OsmMom(0x76416A4d5190d071bfed309861527431304aA14f);\n    Manager public manager = Manager(0x5ef30b9986345249bc32d8928B7ee64DE9435E39);\n\n    mapping(address => bool) public authorized;\n\n    function verifyVaultNextPrice(uint _nextPrice, uint _cdpId) public view returns(bool) {\n        require(authorized[msg.sender]);\n\n        bytes32 ilk = manager.ilks(_cdpId);\n\n        return verifyNextPrice(_nextPrice, ilk);\n    }\n\n    function verifyNextPrice(uint _nextPrice, bytes32 _ilk) public view returns(bool) {\n        require(authorized[msg.sender]);\n\n        address osmAddress = osmMom.osms(_ilk);\n\n        uint whitelisted = Osm(osmAddress).bud(address(this));\n        // If contracts doesn't have access return true\n        if (whitelisted != 1) return true;\n\n        (bytes32 price, bool has) = Osm(osmAddress).peep();\n\n        return has ? uint(price) == _nextPrice : false;\n    }\n\n    function setAuthorized(address _address, bool _allowed) public onlyOwner {\n        authorized[_address] = _allowed;\n    }\n}"}}}