{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "EliteFeeToSetter.sol": {
      "content": "pragma solidity ^0.5.16;\r\n\r\n// this contract serves as feeToSetter, allowing owner to manage fees in the context of a specific feeTo implementation\r\ncontract EliteFeeToSetter {\r\n    // immutables\r\n    address public factory;\r\n    uint public vestingEnd;\r\n    address public feeTo;\r\n\r\n    address public owner;\r\n\r\n    constructor(address factory_, uint vestingEnd_, address owner_, address feeTo_) public {\r\n        require(vestingEnd_ > block.timestamp, 'EliteFeeToSetter::constructor: vesting must end after deployment');\r\n        factory = factory_;\r\n        vestingEnd = vestingEnd_;\r\n        owner = owner_;\r\n        feeTo = feeTo_;\r\n    }\r\n\r\n    // allows owner to change itself at any time\r\n    function setOwner(address owner_) public {\r\n        require(msg.sender == owner, 'EliteFeeToSetter::setOwner: not allowed');\r\n        owner = owner_;\r\n    }\r\n\r\n    // allows owner to change feeToSetter after vesting\r\n    function setFeeToSetter(address feeToSetter_) public {\r\n        require(block.timestamp >= vestingEnd, 'EliteFeeToSetter::setFeeToSetter: not time yet');\r\n        require(msg.sender == owner, 'EliteFeeToSetter::setFeeToSetter: not allowed');\r\n        IEliteswapV2Factory(factory).setFeeToSetter(feeToSetter_);\r\n    }\r\n\r\n    // allows owner to turn fees on/off after vesting\r\n    function toggleFees(bool on) public {\r\n        require(block.timestamp >= vestingEnd, 'EliteFeeToSetter::toggleFees: not time yet');\r\n        require(msg.sender == owner, 'EliteFeeToSetter::toggleFees: not allowed');\r\n        IEliteswapV2Factory(factory).setFeeTo(on ? feeTo : address(0));\r\n    }\r\n}\r\n\r\ninterface IEliteswapV2Factory {\r\n    function setFeeToSetter(address) external;\r\n    function setFeeTo(address) external;\r\n}"
    }
  }
}