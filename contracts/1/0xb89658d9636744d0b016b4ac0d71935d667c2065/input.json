{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"localhost/powerswap-core/contracts/PowerswapERC20.sol":{"content":"pragma solidity ^0.7.4;\n\nimport './interfaces/IPowerswapERC20.sol';\nimport './libraries/SafeMath.sol';\n\nabstract contract PowerswapERC20 is IPowerswapERC20{\n    using SafeMath for uint;\n    \n    string public constant override name = 'Powerswap';\n    string public constant override symbol = 'POWER';\n    uint8 public constant override decimals = 18;\n    uint public override totalSupply;\n    mapping(address => uint) public override balanceOf;\n    mapping(address => mapping(address => uint)) public override allowance;\n    \n    bytes32 public override DOMAIN_SEPARATOR;\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    mapping(address => uint) public override nonces; \n    \n//    event Approval(address indexed owner, address indexed spender, uint value);\n//    event Transfer(address indexed from, address indexed to, uint value);\n\n    constructor() {\n        uint chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n                keccak256(bytes(name)),\n                keccak256(bytes('1')),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    \n    function _mint(address to, uint value) internal {\n        totalSupply = totalSupply.add(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(address(0), to, value);\n    }\n    \n    function _burn(address from, uint value) internal{\n        balanceOf[from] = balanceOf[from].sub(value);\n        totalSupply = totalSupply.sub(value);\n        emit Transfer(from, address(0), value);\n    }\n    \n    function _approve(address owner, address spender, uint value) private{\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n    \n    function _transfer(address from, address to, uint value) private{\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n    \n    function approve(address spender, uint value) external override returns(bool){\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n    \n    function transfer(address to, uint value) external override returns(bool){\n    _transfer(msg.sender, to, value);\n    return true;\n    }    \n    \n    function transferFrom(address from, address to, uint value) external override returns(bool){\n        if(allowance[from][msg.sender] != uint(-1)){\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n    \n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override{\n        require(deadline >= block.timestamp, 'Powerswap: EXPIRED');\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                '\\x19\\x01',\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n                )\n            );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'Powerswap: INVALID_SIGNATURE');\n        _approve(owner, spender, value);\n    }\n}"},"localhost/powerswap-core/contracts/PowerswapFactory.sol":{"content":"pragma solidity ^0.7.4;\n\nimport './interfaces/IPowerswapFactory.sol';\nimport './PowerswapPair.sol';\n\ncontract PowerswapFactory is IPowerswapFactory{\n    address public override feeTo;\n    address public override feeToSetter;\n    address public override rSetter;\n\n    mapping(address => mapping(address => address)) public override getPair;\n    address[] public override allPairs;\n\n    constructor(address _feeToSetter, address _rSetter) public{\n        feeToSetter = _feeToSetter;\n        rSetter = _rSetter;\n    }\n    \n    function allPairsLength() external view override returns(uint){\n        return allPairs.length;\n    }\n    \n    function createPair(address tokenA, address tokenB) external override returns(address pair){\n        require(tokenA != tokenB, 'Powerswap: IDENTICAL_ADDRESSES');\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'Powerswap: ZERO_ADDRESSES');\n        require(getPair[token0][token1] == address(0), 'Powerswap: PAIR_EXISTS'); // single check is sufficient\n        bytes memory bytecode = type(PowerswapPair).creationCode; // TODO\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        assembly{\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt) \n        }//TODO\n        IPowerswapPair(pair).initialize(token0, token1); // TODO\n        getPair[token0][token1] = pair;\n        getPair[token1][token0] = pair;\n        allPairs.push(pair);\n        emit PairCreated(token0, token1, pair, allPairs.length);\n    }\n    \n    function setFeeTo(address _feeTo) external override {\n        require(msg.sender == feeToSetter, 'Powerswap: FORBIDDEN');\n        feeTo = _feeTo;\n    }\n    \n    function setFeeToSetter(address _feeToSetter) external override{\n        require(msg.sender == feeToSetter, 'Powerswap: FORBIDDEN');\n        feeToSetter = _feeToSetter;\n    }\n\n    function setrSetter(address _rSetter) external override{\n        require(msg.sender == rSetter, 'Powerswap: FORBIDDEN');\n        rSetter = _rSetter;\n    }\n}"},"localhost/powerswap-core/contracts/PowerswapPair.sol":{"content":"pragma solidity ^0.7.4;\n\nimport './interfaces/IPowerswapPair.sol';\nimport './PowerswapERC20.sol';\nimport './libraries/Math.sol';\nimport './libraries/UQ112x112.sol';\nimport './interfaces/IERC20.sol';\nimport './interfaces/IPowerswapFactory.sol';\nimport './interfaces/IPowerswapCallee.sol';\n\ncontract PowerswapPair is IPowerswapPair, PowerswapERC20{\n    using SafeMath for uint;\n    using SafeMath for uint112;\n    using UQ112x112 for uint224;\n    uint8 private constant RESOLUTION = 112;\n\n    \n    uint public constant override MINIMUM_LIQUIDITY = 1000;\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n    \n    address public override factory;\n    address public override token0; // 0 for 'X', 1 for 'Y';\n    address public override token1;\n    uint16  private  R; // R = r*(2**16-1) = r*65535; r = R/(2**16-1); rounding error\n    \n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\n    uint112 private reserve1;\n    \n    uint private balanceBuy0; // Buy means \"Buy 1 & Sell 0\";  Sell means \"Sell 1 & Buy 0\";\n    uint private balanceBuy1;\n    uint private balanceSell0; \n    uint private balanceSell1;\n    \n    uint private priceBuy; // P_{1/0} \n    uint private priceSell; //P_{0/1}\n\n    uint32 private blockTimestampLast;\n    \n    uint public override price0CumulativeLast;\n    uint public override price1CumulativeLast;\n    uint public override kLast; // reserveReal0 * reserveReal1, as of immediately after the most recent liquidity event \n    \n    uint private unlocked = 1;\n    modifier lock(){\n        require(unlocked == 1, 'Powerswap: LOCKED');\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n    \n    function getReserves() public view override returns(uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast){\n        _reserve0 = reserve0;\n        _reserve1 = reserve1;\n        _blockTimestampLast = blockTimestampLast;\n    }\n    \n    function getBalances() public view override returns(uint _balanceBuy0, uint _balanceBuy1, uint _balanceSell0, uint _balanceSell1){\n        _balanceBuy0  = balanceBuy0;\n        _balanceBuy1  = balanceBuy1;\n        _balanceSell0 = balanceSell0;\n        _balanceSell1 = balanceSell1;\n    }\n    \n    function getPrices() public view override returns(uint _priceBuy, uint _priceSell){\n        _priceBuy   = priceBuy;\n        _priceSell  = priceSell;\n    }\n    \n    function getR() public view override returns(uint16 _R){\n        _R = R;\n    }\n\n    function _safeTransfer(address token, address to, uint value) private{\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Powerswap: TRANSFER_FAILED');\n    }\n\n    constructor() public{\n        factory = msg.sender;\n    } \n\n    // called once by the factory at time of deployment\n    function initialize(address _token0, address _token1) external override{\n        require(msg.sender == factory, 'Powerswap: FORBIDDEN');\n        token0 = _token0;\n        token1 = _token1;\n        R = 32767;  // default r = 0.5;\n    }\n\n    function setR(uint16 _R) external override {\n        address _rSetter = IPowerswapFactory(factory).rSetter();\n        require(msg.sender == _rSetter, 'Powerswap: FORBIDDEN');\n        R = _R;\n    }\n\n    //update reserves and, on the first call per block, price accumulators // TODO where is the first call of _update in each block? \n    function _updateAtTheInitialBlock(uint balance0, uint balance1) private{\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'Powerswap: OVERFLOW');\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n\n        balanceBuy0  = balance0;\n        balanceBuy1  = balance1;\n        balanceSell0 = balance0;\n        balanceSell1 = balance1;\n\n        priceBuy     = (balance0 << RESOLUTION) / balance1; // original price * 2**112\n        priceSell    = (balance1 << RESOLUTION) / balance0;\n        \n        blockTimestampLast = uint32(block.timestamp % 2**32);\n\n        emit Sync(reserve0, reserve1);\n    }\n\n    function _updateAtTheFirstCallInEachBlock(uint112 _reserve0, uint112 _reserve1, uint32 timeElapsed) private{\n        // * never overflow, and + overflow is desired\n        balanceBuy0  = _reserve0;\n        balanceBuy1  = _reserve1;\n        balanceSell0 = _reserve0;\n        balanceSell1 = _reserve1;\n        \n        uint _priceBuy  = priceBuy;\n        uint _priceSell = priceSell;\n        uint16 _R = R;\n        priceBuy  = (_priceBuy.mul(_reserve1).mul(_R).add((uint(_reserve0) << RESOLUTION).mul(65535-_R)))/(_reserve1.mul(65535));\n        priceSell = (_priceSell.mul(_reserve0).mul(_R).add((uint(_reserve1) << RESOLUTION).mul(65535-_R)))/(_reserve0.mul(65535));\n\n        price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n        price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n    }\n\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private{\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'Powerswap: OVERFLOW');\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; //overflow is desired.\n        if(timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0){\n            _updateAtTheFirstCallInEachBlock(reserve0, reserve1, timeElapsed);\n            blockTimestampLast = blockTimestamp;\n        }else{\n        uint _balanceBuy0  = balanceBuy0;\n        uint _balanceBuy1  = balanceBuy1;\n        uint _balanceSell0 = balanceSell0;\n        uint _balanceSell1 = balanceSell1;\n        \n        balanceBuy0     = _balanceBuy0.add(balance0).sub(_reserve0); \n        balanceBuy1     = _balanceBuy1.add(balance1).sub(_reserve1);\n        balanceSell0    = _balanceSell0.add(balance0).sub(_reserve0);\n        balanceSell1    = _balanceSell1.add(balance1).sub(_reserve1);\n        }\n\n        emit Sync(reserve0, reserve1);\n    }\n    \n\n    function _updateAfterSwap(\n        uint amount0In,  uint amount1In,\n        uint amount0Out, uint amount1Out,\n        uint balance0,   uint balance1) private {\n/*\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; //overflow is desired.\n        if(timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0){\n        _updateAtTheFirstCallInEachBlock(_reserve0, _reserve1, timeElapsed);\n        blockTimestampLast = blockTimestamp;\n        }\n*/\n        if(amount0In > 0){\n        balanceBuy0 += amount0In;\n        balanceBuy1 -= amount1Out;\n        }else{\n        balanceSell0 -= amount0Out;\n        balanceSell1 += amount1In;\n        }\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n\n        emit Sync(reserve0, reserve1);\n    }\n\n// if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn){\n        address feeTo = IPowerswapFactory(factory).feeTo(); \n        feeOn = feeTo != address(0);\n        uint _kLast = kLast; // gas savings\n        if (feeOn) {\n            if (_kLast != 0) {\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\n                uint rootKLast = Math.sqrt(_kLast);\n                if (rootK > rootKLast) {\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\n                    uint denominator = rootK.mul(5).add(rootKLast);\n                    uint liquidity = numerator / denominator;\n                    if (liquidity > 0) _mint(feeTo, liquidity);\n                }\n            }\n        } else if (_kLast != 0) {\n            kLast = 0;\n        }\n    }\n\n    \n    // this low-level function should be called from a contract which performs important safety checks\n    function mint(address to) external lock override returns(uint liquidity){\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); //gas savings\n        uint balance0 = IERC20(token0).balanceOf(address(this));\n        uint balance1 = IERC20(token1).balanceOf(address(this));\n        uint amount0  = balance0.sub(_reserve0);\n        uint amount1  = balance1.sub(_reserve1);\n        \n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        if(_totalSupply == 0){\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n            _updateAtTheInitialBlock(balance0, balance1);\n        }else{\n            _update(balance0, balance1, _reserve0, _reserve1);\n            liquidity = Math.min(_totalSupply.mul(amount0.mul(98))/(_reserve0.mul(100).add(amount0.mul(2))),\n                                 _totalSupply.mul(amount1.mul(98))/(_reserve1.mul(100).add(amount1.mul(2)))); // F = 0.98\n            }\n        require(liquidity > 0, 'Powerswap: INSUFFICIENT_LIQUIDITY_MINTED');\n        _mint(to, liquidity);\n        if(feeOn) {\n        kLast = uint(_reserve0).mul(_reserve1);\n        } // reserve0 and reserve1 are up-to-date\n        emit Mint(msg.sender, amount0, amount1);\n    }\n    \n    // this low-level function should be called from a contract which performs important safety checks\n    function burn(address to) external lock override returns(uint amount0, uint amount1){\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); //gas savings\n        address _token0 = token0;\n        address _token1 = token1;\n        uint balance0 = IERC20(_token0).balanceOf(address(this)); // this = pair\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\n        uint liquidity = balanceOf[address(this)];\n        \n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        uint numerator = _totalSupply.mul(100).sub(liquidity.mul(2));\n        uint denominator = (_totalSupply.mul(_totalSupply).mul(98)/liquidity).add(1);\n        amount0 = balance0.mul(numerator)/denominator; // F=0.98 here\n        amount1 = balance1.mul(numerator)/denominator;\n        require(amount0 > 0 && amount1 > 0, 'Powerswap: INSUFFICIENT_LIQUIDITY_BURNED');\n        _burn(address(this), liquidity);\n        _safeTransfer(_token0, to, amount0);\n        _safeTransfer(_token1, to, amount1);\n        balance0 = IERC20(token0).balanceOf(address(this));\n        balance1 = IERC20(token1).balanceOf(address(this));\n        \n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn){\n        kLast = uint(_reserve0).mul(_reserve1);\n        } // reserve0 and reserve1 are up-to-date // reserve0 and reserve1 are up-to-date\n        emit Burn(msg.sender, amount0, amount1, to);\n    } \n     \n    // this low-level function should be called from a contract which performs important safety checks\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock override{\n        require(amount0Out > 0 || amount1Out > 0, 'Powerswap: INSUFFICIENT_OUTPUT_AMOUNT');\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); //gas savings\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'Powerswap: INSUFFICIENT_LIQUIDITY');\n        \n        uint balance0;\n        uint balance1;\n        { // scope for _token{0,1}, avoids stack too deep errors\n        address _token0 = token0;\n        address _token1 = token1;\n        require(to != _token0 && to != _token1, 'Powerswap: INVALID_TO');\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n        if (data.length > 0){IPowerswapCallee(to).powerswapCall(msg.sender, amount0Out, amount1Out, data);}\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In > 0 || amount1In > 0, 'Powerswap: INSUFFICIENT_INPUT_AMOUNT');\n        require(amount0In <= uint112(-1) && amount1In <= uint112(-1), 'Powerswap: OVERFLOW');\n        /*\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n        uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\n        uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'Powerswap: K');\n        }//TODO Do we need to do a similar test here?\n        */\n        _updateAfterSwap(amount0In, amount1In, amount0Out, amount1Out, balance0, balance1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);    \n    }\n    \n    function updateVirtualBalances() external lock override{\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; //overflow is desired.\n        uint112 _reserve0 = reserve0;\n        uint112 _reserve1 = reserve1;\n        if(timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0){\n            _updateAtTheFirstCallInEachBlock(_reserve0, _reserve1, timeElapsed);\n            blockTimestampLast = blockTimestamp;\n        }\n    }\n    \n    // force balances to match reserves \n    function skim(address to) external lock override{\n        address _token0 = token0;\n        address _token1 = token1;\n\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\n    }\n    \n    // force reserves to match balances\n    function sync() external lock override{\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n    }\n}"},"localhost/powerswap-core/contracts/interfaces/IERC20.sol":{"content":"pragma solidity ^0.7.4;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}"},"localhost/powerswap-core/contracts/interfaces/IPowerswapCallee.sol":{"content":"pragma solidity ^0.7.4;\n\n\ninterface IPowerswapCallee {\n    function powerswapCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}\n"},"localhost/powerswap-core/contracts/interfaces/IPowerswapERC20.sol":{"content":"pragma solidity ^0.7.4;\n//pragma solidity = 0.5.16\n\ninterface IPowerswapERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n"},"localhost/powerswap-core/contracts/interfaces/IPowerswapFactory.sol":{"content":"pragma solidity ^0.7.4;\n\ninterface IPowerswapFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function rSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n    function setrSetter(address) external;\n}\n"},"localhost/powerswap-core/contracts/interfaces/IPowerswapPair.sol":{"content":"pragma solidity ^0.7.4;\n\nimport './IPowerswapERC20.sol';\n\ninterface IPowerswapPair is IPowerswapERC20{\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast); //TODO\n    function getBalances() external view returns(uint _balanceBuy0, uint _balanceBuy1, uint _balanceSell0, uint _balanceSell1);\n    function getPrices() external view returns(uint _priceBuy, uint _priceSell);\n    function setR(uint16) external;\n    function getR() external view returns(uint16);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function updateVirtualBalances() external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"},"localhost/powerswap-core/contracts/libraries/Math.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.7.4;\n\n// a library for performing various math operations\n\nlibrary Math {\n    function min(uint x, uint y) internal pure returns (uint z) {\n        z = x < y ? x : y;\n    }\n    \n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        } //TODO: y = 0, what is z?\n    }\n    \n        // cbrt = cube root\n   function cbrt(uint y) internal pure returns(uint z){\n       if(y > 7){\n           z = y;\n           uint x = y/3 + 1;\n           while(x < z){\n               z = x;\n               x = (2*x + y/(x*x))/3;\n           }\n       }else if(y != 0){\n           z = 1;\n       }\n   }\n\n}"},"localhost/powerswap-core/contracts/libraries/SafeMath.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.7.4;\n\n\nlibrary SafeMath{\n    function add(uint x, uint y) internal pure returns(uint z){\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n    \n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}"},"localhost/powerswap-core/contracts/libraries/UQ112x112.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.7.4;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n\n// range: [0, 2**112 - 1]\n// resolution: 1 / 2**112\n\nlibrary UQ112x112 {\n    uint224 constant Q112 = 2**112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112; // never overflows. TODO\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}\n"}}}