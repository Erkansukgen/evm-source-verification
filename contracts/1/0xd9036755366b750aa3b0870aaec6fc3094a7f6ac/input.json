{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/RoomNFTStake.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n\r\n// \"IERC165.sol\";\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// \"ERC165.sol\";\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// \"IERC1155.sol\";\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transfered from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n\r\n// \"IERC1155Receiver.sol\";\r\n/**\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n\r\n// \"SafeMath.sol\";\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// \"IERC20\"\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\ncontract RoomNFTStake is IERC1155Receiver, ReentrancyGuard {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public constant roomToken = IERC20(0xAd4f86a25bbc20FfB751f2FAC312A0B4d8F88c64);\r\n\r\n\r\n    IERC1155 public constant NFTToken = IERC1155(0x8fDa42090a5AC9Dde01Fd2bA0431fE22FC72dc65);\r\n\r\n    uint256 public finishBlock;\r\n    address public roomTokenRewardsReservoirAddress = 0x5419F0b9e40EF0EeC44640800eD21272491D4CEC;\r\n\r\n    mapping(uint256 => mapping(address => bool)) _nftLockedToStakeRoom;\r\n\r\n    mapping(uint256 => uint256) private _totalStaked;\r\n    mapping(uint256 => mapping(address => uint256)) private _balances;\r\n\r\n    mapping(uint256 => uint256) public lastUpdateBlock;\r\n    mapping(uint256 => uint256) private _accRewardPerToken;\r\n    mapping(uint256 => uint256) private _rewardPerBlock;\r\n\r\n    mapping(uint256 => mapping(address => uint256)) private _prevAccRewardPerToken; // previous accumulative reward per token (for a user)\r\n    mapping(uint256 => mapping(address => uint256)) private _rewards; // rewards balances\r\n\r\n    event Staked(uint256 poolId, address indexed user, uint256 amount);\r\n    event Unstaked(uint256 poolId, address indexed user, uint256 amount);\r\n    event ClaimReward(uint256 poolId, address indexed user, uint256 reward);\r\n\r\n    event RewardTransferFailed(TransferRewardState failure);\r\n\r\n    enum TransferRewardState {\r\n        Succeeded,\r\n        RewardWalletEmpty\r\n    }\r\n\r\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external override returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata) external override returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function supportsInterface(bytes4) external override view returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    constructor () public {\r\n        uint256 rewardBlockCount = 1036800;  // 5760 * 30 * 6; six months = 1,036,800 blocks\r\n\r\n        uint256 totalRewards0 = 50000e18; // 24,937 room Token total rewards for pool0 (Tier1)\r\n        uint256 totalRewards1 = 49600e18; // 30,922 room Token total rewards for pool1 (Tier2)\r\n        uint256 totalRewards2 = 44400e18; // 36,907 room Token total rewards for pool2 (Tier3)\r\n        uint256 totalRewards3 = 36000e18; // 44,887 room Token total rewards for pool3 (Tier4)\r\n        uint256 totalRewards4 = 20000e18; // 62,344 room Token total rewards for pool4 (Tier5)\r\n\r\n        finishBlock = blockNumber().add(rewardBlockCount);\r\n\r\n        _rewardPerBlock[0] = totalRewards0 * (1e18) / rewardBlockCount; // mul(1e18) for math precision\r\n        _rewardPerBlock[1] = totalRewards1 * (1e18) / rewardBlockCount; // mul(1e18) for math precision\r\n        _rewardPerBlock[2] = totalRewards2 * (1e18) / rewardBlockCount; // mul(1e18) for math precision\r\n        _rewardPerBlock[3] = totalRewards3 * (1e18) / rewardBlockCount; // mul(1e18) for math precision\r\n        _rewardPerBlock[4] = totalRewards4 * (1e18) / rewardBlockCount; // mul(1e18) for math precision\r\n\r\n        lastUpdateBlock[0] = blockNumber();\r\n        lastUpdateBlock[1] = blockNumber();\r\n        lastUpdateBlock[2] = blockNumber();\r\n        lastUpdateBlock[3] = blockNumber();\r\n        lastUpdateBlock[4] = blockNumber();\r\n    }\r\n\r\n    function stake(uint256 poolId, uint256 amount) external {\r\n        updateReward(poolId, msg.sender);\r\n\r\n        if (amount > 0) {\r\n            if (_nftLockedToStakeRoom[poolId][msg.sender] == false) {\r\n                _nftLockedToStakeRoom[poolId][msg.sender] = true;\r\n                NFTToken.safeTransferFrom(msg.sender, address(this), poolId, 1, \"\");\r\n            }\r\n\r\n            _totalStaked[poolId] = _totalStaked[poolId].add(amount);\r\n            _balances[poolId][msg.sender] = _balances[poolId][msg.sender].add(amount);\r\n\r\n            roomToken.transferFrom(msg.sender, address(this), amount);\r\n\r\n            emit Staked(poolId, msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    function unstake(uint256 poolId, uint256 amount, bool claim) public returns(uint256 reward, TransferRewardState reason)  {\r\n        updateReward(poolId, msg.sender);\r\n\r\n        _totalStaked[poolId] = _totalStaked[poolId].sub(amount);\r\n        _balances[poolId][msg.sender] = _balances[poolId][msg.sender].sub(amount);\r\n        // Send Room token staked to the original owner.\r\n        roomToken.transfer(msg.sender, amount);\r\n\r\n        if (claim) {\r\n            (reward, reason) = _executeRewardTransfer(poolId, msg.sender);\r\n        }\r\n\r\n        emit Unstaked(poolId, msg.sender, amount);\r\n    }\r\n\r\n    function exit(uint256 poolId) public nonReentrant{\r\n        unstake(poolId, _balances[poolId][msg.sender], true);\r\n        if (_nftLockedToStakeRoom[poolId][msg.sender]) {\r\n            _nftLockedToStakeRoom[poolId][msg.sender] = false;\r\n            NFTToken.safeTransferFrom(address(this), msg.sender, poolId, 1, \"\");\r\n        }\r\n    }\r\n\r\n    function claimReward(uint256 poolId) external returns (uint256 reward, TransferRewardState reason) {\r\n        updateReward(poolId, msg.sender);\r\n        return _executeRewardTransfer(poolId, msg.sender);\r\n    }\r\n\r\n    function _executeRewardTransfer(uint256 poolId, address account) internal returns(uint256 reward, TransferRewardState reason) {\r\n        reward = _rewards[poolId][account];\r\n        if (reward > 0) {\r\n            uint256 walletBalance = roomToken.balanceOf(roomTokenRewardsReservoirAddress);\r\n            if (walletBalance < reward) {\r\n                // This fails, and we send reason 1 for the UI\r\n                // to display a meaningful message for the user.\r\n                // 1 means the wallet is empty.\r\n                reason = TransferRewardState.RewardWalletEmpty;\r\n                emit RewardTransferFailed(reason);\r\n\r\n            } else {\r\n\r\n                // We will transfer and then empty the rewards\r\n                // for the sender.\r\n                _rewards[poolId][msg.sender] = 0;\r\n                roomToken.transferFrom(roomTokenRewardsReservoirAddress, msg.sender, reward);\r\n                emit ClaimReward(poolId, msg.sender, reward);\r\n            }\r\n        }\r\n    }\r\n\r\n    function updateReward(uint256 poolId, address account) public {\r\n        // reward algorithm\r\n        // in general: rewards = (reward per token ber block) user balances\r\n        uint256 cnBlock = blockNumber();\r\n\r\n        // update accRewardPerToken, in case totalSupply is zero; do not increment accRewardPerToken\r\n        if (_totalStaked[poolId] > 0) {\r\n\r\n            uint256 lastRewardBlock = cnBlock < finishBlock ? cnBlock : finishBlock;\r\n            if (lastRewardBlock > lastUpdateBlock[poolId]) {\r\n                _accRewardPerToken[poolId] = lastRewardBlock.sub(lastUpdateBlock[poolId])\r\n                .mul(_rewardPerBlock[poolId]).div(_totalStaked[poolId])\r\n                .add(_accRewardPerToken[poolId]);\r\n            }\r\n        }\r\n\r\n        lastUpdateBlock[poolId] = cnBlock;\r\n\r\n        if (account != address(0)) {\r\n\r\n            uint256 accRewardPerTokenForUser = _accRewardPerToken[poolId].sub(_prevAccRewardPerToken[poolId][account]);\r\n\r\n            if (accRewardPerTokenForUser > 0) {\r\n                _rewards[poolId][account] =\r\n                _balances[poolId][account]\r\n                .mul(accRewardPerTokenForUser)\r\n                .div(1e18)\r\n                .add(_rewards[poolId][account]);\r\n\r\n                _prevAccRewardPerToken[poolId][account] = _accRewardPerToken[poolId];\r\n            }\r\n        }\r\n    }\r\n\r\n    function rewards(uint256 poolId, address account) external view returns (uint256 reward) {\r\n        // read version of update\r\n        uint256 cnBlock = blockNumber();\r\n        uint256 accRewardPerToken = _accRewardPerToken[poolId];\r\n\r\n        // update accRewardPerToken, in case totalSupply is zero; do not increment accRewardPerToken\r\n        if (_totalStaked[poolId] > 0) {\r\n            uint256 lastRewardBlock = cnBlock < finishBlock ? cnBlock : finishBlock;\r\n            if (lastRewardBlock > lastUpdateBlock[poolId]) {\r\n                accRewardPerToken = lastRewardBlock.sub(lastUpdateBlock[poolId])\r\n                .mul(_rewardPerBlock[poolId]).div(_totalStaked[poolId])\r\n                .add(accRewardPerToken);\r\n            }\r\n        }\r\n\r\n        reward = _balances[poolId][account]\r\n        .mul(accRewardPerToken.sub(_prevAccRewardPerToken[poolId][account]))\r\n        .div(1e18)\r\n        .add(_rewards[poolId][account]);\r\n    }\r\n\r\n    function totalStaked(uint256 poolId) public view returns (uint256){\r\n        return _totalStaked[poolId];\r\n    }\r\n\r\n    function balanceOf(uint256 poolId, address account) public view returns (uint256) {\r\n        return _balances[poolId][account];\r\n    }\r\n\r\n\r\n    function blockNumber() public view returns (uint256) {\r\n        return block.number;\r\n    }\r\n    \r\n    function getNftLockedToStakeRoom(uint256 id, address account) external view returns(bool){\r\n        return _nftLockedToStakeRoom[id][account];\r\n    }\r\n\r\n}\r\n"}}}