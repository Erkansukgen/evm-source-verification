{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/DSA_READ/curve_vesting.sol":{"content":"pragma solidity ^0.6.0;\n\ninterface TokenInterface {\n    function balanceOf(address) external view returns (uint);\n}\n\ninterface ICurveVesting {\n  function vestedOf(address addr) external view returns (uint256);\n  function balanceOf(address addr) external view returns (uint256);\n  function lockedOf(address addr) external view returns (uint256);\n  function total_claimed(address addr) external view returns (uint256);\n}\n\ncontract CurveVestingHelpers {\n  /**\n  * @dev Return Curve Token Address\n  */\n  function getCurveTokenAddr() internal pure returns (address) {\n    return 0xD533a949740bb3306d119CC777fa900bA034cd52;\n  }\n\n  /**\n  * @dev Return Curve Vesting Address\n  */\n  function getCurveVestingAddr() internal pure returns (address) {\n    return 0x575CCD8e2D300e2377B43478339E364000318E2c;\n  }\n}\n\n\ncontract Resolver is CurveVestingHelpers {\n    function getPosition(address user) public view returns (\n        uint vestedBalance,\n        uint unclaimedBal,\n        uint claimedBal,\n        uint lockedBalance,\n        uint crvBalance\n    ) {\n        ICurveVesting vestingContract = ICurveVesting(getCurveVestingAddr());\n        vestedBalance = vestingContract.vestedOf(user);\n        unclaimedBal = vestingContract.balanceOf(user);\n        claimedBal = vestingContract.total_claimed(user);\n        lockedBalance = vestingContract.lockedOf(user);\n\n        crvBalance = TokenInterface(getCurveTokenAddr()).balanceOf(user);\n    }\n}\n\n\ncontract InstaCurveVestingResolver is Resolver {\n    string public constant name = \"Curve-Vesting-Resolver-v1\";\n}"}}}