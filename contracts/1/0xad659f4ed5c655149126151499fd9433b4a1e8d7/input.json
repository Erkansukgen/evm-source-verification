{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Proxy.sol": {
      "content": "pragma solidity <=0.5.4;\r\n\r\ncontract Ownable {\r\n\r\n    string public contractName;\r\n    address public owner;\r\n    address public manager;\r\n\r\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\r\n    event ManagerChanged(address indexed previousManager, address indexed newManager);\r\n\r\n    constructor() internal {\r\n        owner = msg.sender;\r\n        manager = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager(bytes32 managerName) {\r\n        require(msg.sender == manager, \"Ownable: caller is not the manager\");\r\n        _;\r\n    }\r\n\r\n\r\n    function setOwner(address _owner) public onlyOwner {\r\n        require(_owner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnerChanged(owner, _owner);\r\n        owner = _owner;\r\n    }\r\n\r\n    function setManager(address _manager) public onlyOwner {\r\n        require(_manager != address(0), \"Ownable: new manager is the zero address\");\r\n        emit ManagerChanged(manager, _manager);\r\n        manager = _manager;\r\n    }\r\n\r\n    function setContractName(bytes32 _contractName) internal {\r\n        contractName = string(abi.encodePacked(_contractName));\r\n    }\r\n\r\n}\r\n\r\ninterface IOwnable {\r\n\r\n    function contractName() external view returns (string memory);\r\n\r\n}\r\n\r\ncontract Proxy is Ownable {\r\n\r\n    bytes32 private constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    event ImplementationChanged(address indexed previousValue, address indexed newValue);\r\n\r\n    constructor(address _implementation) public {\r\n        setImplementation(_implementation);\r\n    }\r\n\r\n    function setImplementation(address _implementation) public onlyOwner {\r\n        require(_implementation != address(0), \"Proxy: new implementation is the zero address\");\r\n        contractName = IOwnable(_implementation).contractName();\r\n\r\n        emit ImplementationChanged(implementation(), _implementation);\r\n        bytes32 solt = IMPLEMENTATION_SLOT;\r\n        assembly {\r\n            sstore(solt, _implementation)\r\n        }\r\n    }\r\n\r\n    function implementation() public view returns (address _implementation) {\r\n        bytes32 solt = IMPLEMENTATION_SLOT;\r\n        assembly {\r\n            _implementation := sload(solt)\r\n        }\r\n    }\r\n\r\n    function() external payable {\r\n        _fallback(implementation());\r\n    }\r\n\r\n    function _fallback(address _implementation) private {\r\n        assembly {\r\n            calldatacopy(0, 0, calldatasize())\r\n            let result := delegatecall(gas(), _implementation, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            switch result\r\n                case 0 {\r\n                    revert(0, returndatasize())\r\n                }\r\n                default {\r\n                    return(0, returndatasize())\r\n                }\r\n        }\r\n    }\r\n\r\n}"
    }
  }
}