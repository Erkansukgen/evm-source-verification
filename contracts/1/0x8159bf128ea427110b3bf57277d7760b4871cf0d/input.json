{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/ttm.sol": {
      "content": "/**\r *Submitted for verification at Etherscan.io on 2021-06-14\r*/\r\r/**\r *Submitted for verification at Etherscan.io on 2021-05-27\r*/\r\r/*\rTo The Moon\rhttps://t.me/tothemoon_global\r*/\r\r// SPDX-License-Identifier: Unlicensed\rpragma solidity ^0.6.12;\r\rabstract contract Context {\r    function _msgSender() internal view virtual returns (address payable) {\r        return msg.sender;\r    }\r\r    function _msgData() internal view virtual returns (bytes memory) {\r        this;\r        return msg.data;\r    }\r}\r\rinterface IERC20 {\r    function totalSupply() external view returns (uint256);\r    function balanceOf(address account) external view returns (uint256);\r    function transfer(address recipient, uint256 amount) external returns (bool);\r    function allowance(address owner, address spender) external view returns (uint256);\r    function approve(address spender, uint256 amount) external returns (bool);\r    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r    event Transfer(address indexed from, address indexed to, uint256 value);\r    event Approval(address indexed owner, address indexed spender, uint256 value);\r}\r\rlibrary SafeMath {\r    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r        uint256 c = a + b;\r        require(c >= a, \"SafeMath: addition overflow\");\r        return c;\r    }\r\r    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r        return sub(a, b, \"SafeMath: subtraction overflow\");\r    }\r\r    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r        require(b <= a, errorMessage);\r        uint256 c = a - b;\r        return c;\r    }\r\r    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r        if (a == 0) {\r            return 0;\r        }\r        uint256 c = a * b;\r        require(c / a == b, \"SafeMath: multiplication overflow\");\r        return c;\r    }\r\r    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r        return div(a, b, \"SafeMath: division by zero\");\r    }\r\r    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r        require(b > 0, errorMessage);\r        uint256 c = a / b;\r        return c;\r    }\r\r    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r        return mod(a, b, \"SafeMath: modulo by zero\");\r    }\r\r    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r        require(b != 0, errorMessage);\r        return a % b;\r    }\r}\r\rlibrary Address {\r    function isContract(address account) internal view returns (bool) {\r        bytes32 codehash;\r        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r        assembly { codehash := extcodehash(account) }\r        return (codehash != accountHash && codehash != 0x0);\r    }\r\r    function sendValue(address payable recipient, uint256 amount) internal {\r        require(address(this).balance >= amount, \"Address: insufficient balance\");\r        (bool success, ) = recipient.call{ value: amount }(\"\");\r        require(success, \"Address: unable to send value, recipient may have reverted\");\r    }\r\r    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r        return functionCall(target, data, \"Address: low-level call failed\");\r    }\r\r    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r        return _functionCallWithValue(target, data, 0, errorMessage);\r    }\r\r    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r    }\r\r    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r        return _functionCallWithValue(target, data, value, errorMessage);\r    }\r\r    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r        require(isContract(target), \"Address: call to non-contract\");\r        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r        if (success) {\r            return returndata;\r        } else {\r            if (returndata.length > 0) {\r                assembly {\r                    let returndata_size := mload(returndata)\r                    revert(add(32, returndata), returndata_size)\r                }\r            } else {\r                revert(errorMessage);\r            }\r        }\r    }\r}\r\rcontract Ownable is Context {\r    address private _owner;\r    address private _previousOwner;\r    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\r    constructor () internal {\r        address msgSender = _msgSender();\r        _owner = msgSender;\r        emit OwnershipTransferred(address(0), msgSender);\r    }\r\r    function owner() public view returns (address) {\r        return _owner;\r    }\r\r    modifier onlyOwner() {\r        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r        _;\r    }\r\r    function renounceOwnership() public virtual onlyOwner {\r        emit OwnershipTransferred(_owner, address(0));\r        _owner = address(0);\r    }\r\r}  \r\rinterface IUniswapV2Factory {\r    function createPair(address tokenA, address tokenB) external returns (address pair);\r}\r\rinterface IUniswapV2Router02 {\r    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r        uint amountIn,\r        uint amountOutMin,\r        address[] calldata path,\r        address to,\r        uint deadline\r    ) external;\r    function factory() external pure returns (address);\r    function WETH() external pure returns (address);\r    function addLiquidityETH(\r        address token,\r        uint amountTokenDesired,\r        uint amountTokenMin,\r        uint amountETHMin,\r        address to,\r        uint deadline\r    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r}\r\rcontract TTM is Context, IERC20, Ownable {\r    using SafeMath for uint256;\r    using Address for address;\r    mapping (address => uint256) private _rOwned;\r    mapping (address => uint256) private _tOwned;\r    mapping (address => mapping (address => uint256)) private _allowances;\r    mapping (address => bool) private _isExcludedFromFee;\r    mapping (address => bool) private _isExcluded;\r    mapping (address => bool) private bots;\r    mapping (address => uint) private cooldown;\r    address[] private _excluded;\r    uint256 private constant MAX = ~uint256(0);\r    uint256 private constant _tTotal = 1000000000000 * 10**9;\r    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r    uint256 private _tFeeTotal;\r    string private constant _name = \"To The Moon\";\r    string private constant _symbol = 'TTM';\r    uint8 private constant _decimals = 9;\r    uint256 private _taxFee = 2;\r    uint256 private _teamFee = 16;\r    uint256 private _previousTaxFee = _taxFee;\r    uint256 private _previousteamFee = _teamFee;\r    address payable private _FeeAddress;\r    address payable private _marketingWalletAddress;\r    IUniswapV2Router02 private uniswapV2Router;\r    address private uniswapV2Pair;\r    bool private tradingOpen;\r    bool private inSwap = false;\r    bool private swapEnabled = false;\r    bool private cooldownEnabled = false;\r    uint256 private _maxTxAmount = _tTotal;\r    event MaxTxAmountUpdated(uint _maxTxAmount);\r    modifier lockTheSwap {\r        inSwap = true;\r        _;\r        inSwap = false;\r    }\r    constructor (address payable FeeAddress, address payable marketingWalletAddress) public {\r        _FeeAddress = FeeAddress;\r        _marketingWalletAddress = marketingWalletAddress;\r        _rOwned[_msgSender()] = _rTotal;\r        _isExcludedFromFee[owner()] = true;\r        _isExcludedFromFee[address(this)] = true;\r        _isExcludedFromFee[FeeAddress] = true;\r        _isExcludedFromFee[marketingWalletAddress] = true;\r        emit Transfer(address(0), _msgSender(), _tTotal);\r    }\r\r    function name() public pure returns (string memory) {\r        return _name;\r    }\r\r    function symbol() public pure returns (string memory) {\r        return _symbol;\r    }\r\r    function decimals() public pure returns (uint8) {\r        return _decimals;\r    }\r\r    function totalSupply() public view override returns (uint256) {\r        return _tTotal;\r    }\r\r    function balanceOf(address account) public view override returns (uint256) {\r        if (_isExcluded[account]) return _tOwned[account];\r        return tokenFromReflection(_rOwned[account]);\r    }\r\r    function transfer(address recipient, uint256 amount) public override returns (bool) {\r        _transfer(_msgSender(), recipient, amount);\r        return true;\r    }\r\r    function allowance(address owner, address spender) public view override returns (uint256) {\r        return _allowances[owner][spender];\r    }\r\r    function approve(address spender, uint256 amount) public override returns (bool) {\r        _approve(_msgSender(), spender, amount);\r        return true;\r    }\r\r    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r        _transfer(sender, recipient, amount);\r        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r        return true;\r    }\r\r    function setCooldownEnabled(bool onoff) external onlyOwner() {\r        cooldownEnabled = onoff;\r    }\r\r    function tokenFromReflection(uint256 rAmount) private view returns(uint256) {\r        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r        uint256 currentRate =  _getRate();\r        return rAmount.div(currentRate);\r    }\r\r    function removeAllFee() private {\r        if(_taxFee == 0 && _teamFee == 0) return;\r        _previousTaxFee = _taxFee;\r        _previousteamFee = _teamFee;\r        _taxFee = 0;\r        _teamFee = 0;\r    }\r    \r    function restoreAllFee() private {\r        _taxFee = _previousTaxFee;\r        _teamFee = _previousteamFee;\r    }\r\r    function _approve(address owner, address spender, uint256 amount) private {\r        require(owner != address(0), \"ERC20: approve from the zero address\");\r        require(spender != address(0), \"ERC20: approve to the zero address\");\r        _allowances[owner][spender] = amount;\r        emit Approval(owner, spender, amount);\r    }\r\r    function _transfer(address from, address to, uint256 amount) private {\r        require(from != address(0), \"ERC20: transfer from the zero address\");\r        require(to != address(0), \"ERC20: transfer to the zero address\");\r        require(amount > 0, \"Transfer amount must be greater than zero\");\r        \r        if (from != owner() && to != owner()) {\r            if (cooldownEnabled) {\r                if (from != address(this) && to != address(this) && from != address(uniswapV2Router) && to != address(uniswapV2Router)) {\r                    require(_msgSender() == address(uniswapV2Router) || _msgSender() == uniswapV2Pair,\"ERR: Uniswap only\");\r                }\r            }\r            require(amount <= _maxTxAmount);\r            require(!bots[from] && !bots[to]);\r            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] && cooldownEnabled) {\r                require(cooldown[to] < block.timestamp);\r                cooldown[to] = block.timestamp + (30 seconds);\r            }\r            uint256 contractTokenBalance = balanceOf(address(this));\r            if (!inSwap && from != uniswapV2Pair && swapEnabled) {\r                swapTokensForEth(contractTokenBalance);\r                uint256 contractETHBalance = address(this).balance;\r                if(contractETHBalance > 0) {\r                    sendETHToFee(address(this).balance);\r                }\r            }\r        }\r        bool takeFee = true;\r\r        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r            takeFee = false;\r        }\r\t\t\r        _tokenTransfer(from,to,amount,takeFee);\r    }\r\r    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r        address[] memory path = new address[](2);\r        path[0] = address(this);\r        path[1] = uniswapV2Router.WETH();\r        _approve(address(this), address(uniswapV2Router), tokenAmount);\r        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r            tokenAmount,\r            0,\r            path,\r            address(this),\r            block.timestamp\r        );\r    }\r        \r    function sendETHToFee(uint256 amount) private {\r        _FeeAddress.transfer(amount.div(2));\r        _marketingWalletAddress.transfer(amount.div(2));\r    }\r    \r    function manualswap() external {\r        require(_msgSender() == _FeeAddress);\r        uint256 contractBalance = balanceOf(address(this));\r        swapTokensForEth(contractBalance);\r    }\r    \r    function manualsend() external {\r        require(_msgSender() == _FeeAddress);\r        uint256 contractETHBalance = address(this).balance;\r        sendETHToFee(contractETHBalance);\r    }\r        \r    function openTrading() external onlyOwner() {\r        require(!tradingOpen,\"trading is already open\");\r        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r        uniswapV2Router = _uniswapV2Router;\r        _approve(address(this), address(uniswapV2Router), _tTotal);\r        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r        swapEnabled = true;\r        cooldownEnabled = true;\r        _maxTxAmount = 4250000000 * 10**9;\r        tradingOpen = true;\r        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r    }\r    \r    function setBots(address[] memory bots_) public onlyOwner {\r        for (uint i = 0; i < bots_.length; i++) {\r            bots[bots_[i]] = true;\r        }\r    }\r    \r    function delBot(address notbot) public onlyOwner {\r        bots[notbot] = false;\r    }\r        \r    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r        if(!takeFee)\r            removeAllFee();\r        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r            _transferFromExcluded(sender, recipient, amount);\r        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r            _transferToExcluded(sender, recipient, amount);\r        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r            _transferBothExcluded(sender, recipient, amount);\r        } else {\r            _transferStandard(sender, recipient, amount);\r        }\r        if(!takeFee)\r            restoreAllFee();\r    }\r\r    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\r        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r        _takeTeam(tTeam); \r        _reflectFee(rFee, tFee);\r        emit Transfer(sender, recipient, tTransferAmount);\r    }\r\r    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\r        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);    \r        _takeTeam(tTeam);           \r        _reflectFee(rFee, tFee);\r        emit Transfer(sender, recipient, tTransferAmount);\r    }\r\r    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\r        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r        _takeTeam(tTeam);   \r        _reflectFee(rFee, tFee);\r        emit Transfer(sender, recipient, tTransferAmount);\r    }\r\r    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\r        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \r        _takeTeam(tTeam);         \r        _reflectFee(rFee, tFee);\r        emit Transfer(sender, recipient, tTransferAmount);\r    }\r\r    function _takeTeam(uint256 tTeam) private {\r        uint256 currentRate =  _getRate();\r        uint256 rTeam = tTeam.mul(currentRate);\r        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r        if(_isExcluded[address(this)])\r            _tOwned[address(this)] = _tOwned[address(this)].add(tTeam);\r    }\r\r    function _reflectFee(uint256 rFee, uint256 tFee) private {\r        _rTotal = _rTotal.sub(rFee);\r        _tFeeTotal = _tFeeTotal.add(tFee);\r    }\r\r    receive() external payable {}\r\r    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _taxFee, _teamFee);\r        uint256 currentRate =  _getRate();\r        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);\r        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r    }\r\r    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {\r        uint256 tFee = tAmount.mul(taxFee).div(100);\r        uint256 tTeam = tAmount.mul(TeamFee).div(100);\r        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r        return (tTransferAmount, tFee, tTeam);\r    }\r\r    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r        uint256 rAmount = tAmount.mul(currentRate);\r        uint256 rFee = tFee.mul(currentRate);\r        uint256 rTeam = tTeam.mul(currentRate);\r        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r        return (rAmount, rTransferAmount, rFee);\r    }\r\r    function _getRate() private view returns(uint256) {\r        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r        return rSupply.div(tSupply);\r    }\r\r    function _getCurrentSupply() private view returns(uint256, uint256) {\r        uint256 rSupply = _rTotal;\r        uint256 tSupply = _tTotal;      \r        for (uint256 i = 0; i < _excluded.length; i++) {\r            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r        }\r        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r        return (rSupply, tSupply);\r    }\r        \r    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r        require(maxTxPercent > 0, \"Amount must be greater than 0\");\r        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);\r        emit MaxTxAmountUpdated(_maxTxAmount);\r    }\r}"
    }
  }
}