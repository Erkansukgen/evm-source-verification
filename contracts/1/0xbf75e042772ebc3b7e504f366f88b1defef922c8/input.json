{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/Nov11.sol":{"content":"pragma solidity 0.8.9;\n\n// SPDX-License-Identifier: MIT\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface IDEXFactory {\n\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n\tfunction feeTo() external view returns (address);\n\n\tfunction feeToSetter() external view returns (address);\n\n\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\n\n\tfunction allPairs(uint) external view returns (address pair);\n\n\tfunction allPairsLength() external view returns (uint);\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\n\n\tfunction setFeeTo(address) external;\n\n\tfunction setFeeToSetter(address) external;\n}\n\ninterface IDEXRouter {\n\tfunction factory() external pure returns (address);\n\n\tfunction WETH() external pure returns (address);\n\n\tfunction addLiquidity(\n\t\taddress tokenA,\n\t\taddress tokenB,\n\t\tuint amountADesired,\n\t\tuint amountBDesired,\n\t\tuint amountAMin,\n\t\tuint amountBMin,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint amountA, uint amountB, uint liquidity);\n\n\tfunction addLiquidityETH(\n\t\taddress token,\n\t\tuint amountTokenDesired,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline\n\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n\tfunction removeLiquidity(\n\t\taddress tokenA,\n\t\taddress tokenB,\n\t\tuint liquidity,\n\t\tuint amountAMin,\n\t\tuint amountBMin,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint amountA, uint amountB);\n\n\tfunction removeLiquidityETH(\n\t\taddress token,\n\t\tuint liquidity,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint amountToken, uint amountETH);\n\n\tfunction removeLiquidityWithPermit(\n\t\taddress tokenA,\n\t\taddress tokenB,\n\t\tuint liquidity,\n\t\tuint amountAMin,\n\t\tuint amountBMin,\n\t\taddress to,\n\t\tuint deadline,\n\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\n\t) external returns (uint amountA, uint amountB);\n\n\tfunction removeLiquidityETHWithPermit(\n\t\taddress token,\n\t\tuint liquidity,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline,\n\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\n\t) external returns (uint amountToken, uint amountETH);\n\n\tfunction swapExactTokensForTokens(\n\t\tuint amountIn,\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint[] memory amounts);\n\n\tfunction swapTokensForExactTokens(\n\t\tuint amountOut,\n\t\tuint amountInMax,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint[] memory amounts);\n\n\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n\texternal\n\tpayable\n\treturns (uint[] memory amounts);\n\n\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\texternal\n\treturns (uint[] memory amounts);\n\n\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\texternal\n\treturns (uint[] memory amounts);\n\n\tfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n\texternal\n\tpayable\n\treturns (uint[] memory amounts);\n\n\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n\n\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n\n\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n\n\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n\n\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\n\t\taddress token,\n\t\tuint liquidity,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint amountETH);\n\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n\t\taddress token,\n\t\tuint liquidity,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline,\n\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\n\t) external returns (uint amountETH);\n\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\n\t\tuint amountIn,\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external;\n\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external payable;\n\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\n\t\tuint amountIn,\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external;\n}\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ncontract LetsGoBrandon is Context, IERC20, Ownable {\n\tusing Address for address payable;\n\n\tstring constant NAME = \"Lets Go Brandon\";\n\tstring constant SYMBOL = \"LETS\";\n\tuint8 constant DECIMALS = 9;\n\n\tuint256 constant MAX_UINT = 2 ** 256 - 1;\n\taddress constant ROUTER_ADDRESS = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\taddress constant ZERO_ADDRESS = address(0);\n\taddress constant DEAD_ADDRESS = address(0x000000000000000000000000000000000000dEaD);//address(57005);\n\n\tmapping(address => uint256) rOwned;\n\tmapping(address => uint256) tOwned;\n\n\tmapping(address => uint256) firstTransactionTimestamp;\n\n\tmapping(address => mapping(address => uint256)) allowances;\n\n\tmapping(address => bool) public isExcludedFromFees;\n\tmapping(address => bool) public isExcludedFromRewards;\n\tmapping(address => bool) public isExcludedFromMaxWallet;\n\taddress[] excluded;\n\n\tmapping(address => bool) public isBot;\n\tuint256 tTotal = 100000000000000 * 10**9;//1000000000000000 * 10**9;\n\tuint256 rTotal = (MAX_UINT - (MAX_UINT % tTotal));\n\n\tuint256 public maxTxAmountBuy = tTotal;// / 200;\n\tuint256 public maxTxAmountSell = tTotal;// / 200;\n\tuint256 public maxWalletAmount = tTotal / 50;\n\n\tuint256 launchedAt;\n\tuint256 launchedAtTime;\n\taddress payable marketingAddress;\n\taddress payable developmentAddress;\n\n\tmapping(address => bool) automatedMarketMakerPairs;\n\n\tbool areFeesBeingProcessed;\n\tbool public isFeeProcessingEnabled = false;\n\tuint256 public feeProcessingThreshold = tTotal / 10000;\n\n\tIDEXRouter router;\n\n\tbool isTradingOpen;\n\n\tstruct FeeSet {\n\t\tuint256 reflectFee;\n\t\tuint256 marketingFee;\n\t\tuint256 developmentFee;\n\t\tuint256 liquidityFee;\n\t}\n\n\tFeeSet public fees = FeeSet({\n\t\treflectFee: 2,\n\t\tmarketingFee: 3,\n\t\tdevelopmentFee: 2,\n\t\tliquidityFee: 3\n\t});\n\n\tuint256 extraBurnFee = 10; //for early sale, per wallet//\n\n\tstruct ReflectValueSet {\n\t\tuint256 rAmount;\n\t\tuint256 rTransferAmount;\n\t\tuint256 rReflectFee;\n\t\tuint256 rOtherFee;\n\t\tuint256 tTransferAmount;\n\t\tuint256 tReflectFee;\n\t\tuint256 tOtherFee;\n\n\t\tuint256 rExtraFee;\n\t\tuint256 tExtraFee;\n\t}\n\n\tmodifier lockTheSwap {\n\t\tareFeesBeingProcessed = true;\n\t\t_;\n\t\tareFeesBeingProcessed = false;\n\t}\n\n\tconstructor() {\n\t\taddress self = address(this);\n\n\t\trOwned[owner()] = rTotal;\n\n\t\trouter = IDEXRouter(ROUTER_ADDRESS);\n\n\t\tmarketingAddress = payable(0xbfA80969cE5330c938cfc0F54Ac38384C9618449);\n\t\tdevelopmentAddress = payable(0x143CE9C93e5F03e860FFEeDEf9D97F621104ad70);\n\n\t\tisExcludedFromFees[owner()] = true;\n\t\tisExcludedFromFees[marketingAddress] = true;\n\t\tisExcludedFromFees[developmentAddress] = true;\n\t\tisExcludedFromFees[self] = true;\n\t\tisExcludedFromFees[DEAD_ADDRESS] = true;\n\n\t\tisExcludedFromMaxWallet[owner()] = true;\n\t\tisExcludedFromMaxWallet[marketingAddress] = true;\n\t\tisExcludedFromMaxWallet[developmentAddress] = true;\n\t\tisExcludedFromMaxWallet[self] = true;\n\t\tisExcludedFromMaxWallet[DEAD_ADDRESS] = true;\n\n\t\t//new - exclude owner from rewards for fair distribution\n\t\ttOwned[owner()] = tokenFromReflection(rOwned[owner()]);\n\t\tisExcludedFromRewards[owner()] = true;\n\t\texcluded.push(owner());\n\n\t\temit Transfer(ZERO_ADDRESS, owner(), tTotal);\n\t}\n\n\tfunction name() public pure returns (string memory) {\n\t\treturn NAME;\n\t}\n\n\tfunction symbol() public pure returns (string memory) {\n\t\treturn SYMBOL;\n\t}\n\n\tfunction decimals() public pure returns (uint8) {\n\t\treturn DECIMALS;\n\t}\n\n\tfunction totalSupply() public view override returns (uint256) {\n\t\treturn tTotal;\n\t}\n\n\tfunction balanceOf(address account) public view override returns (uint256) {\n\t\tif (isExcludedFromRewards[account]) return tOwned[account];\n\t\treturn tokenFromReflection(rOwned[account]);\n\t}\n\n\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\n\t\t_transfer(_msgSender(), recipient, amount);\n\t\treturn true;\n\t}\n\n\tfunction allowance(address owner, address spender) public view override returns (uint256) {\n\t\treturn allowances[owner][spender];\n\t}\n\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\n\t\t_approve(_msgSender(), spender, amount);\n\t\treturn true;\n\t}\n\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n\t\t_transfer(sender, recipient, amount);\n\n\t\tuint256 currentAllowance = allowances[sender][_msgSender()];\n\t\trequire(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n\n\t\tunchecked {\n\t\t\t_approve(sender, _msgSender(), currentAllowance - amount);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n\t\t_approve(_msgSender(), spender, allowances[_msgSender()][spender] + addedValue);\n\t\treturn true;\n\t}\n\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n\t\tuint256 currentAllowance = allowances[_msgSender()][spender];\n\t\trequire(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n\n\t\tunchecked {\n\t\t\t_approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction tokenFromReflection(uint256 rAmount) public view returns (uint256) {\n\t\trequire(rAmount <= rTotal, \"Amount must be less than total reflections\");\n\t\tuint256 currentRate = _getRate();\n\t\treturn rAmount / currentRate;\n\t}\n\n\tfunction excludeFromRewards(address account) external onlyOwner {\n\t\trequire(!isExcludedFromRewards[account], \"Account is already excluded\");\n\n\t\tif (rOwned[account] > 0) {\n\t\t\ttOwned[account] = tokenFromReflection(rOwned[account]);\n\t\t}\n\n\t\tisExcludedFromRewards[account] = true;\n\t\texcluded.push(account);\n\t}\n\n\tfunction includeInRewards(address account) external onlyOwner {\n\t\trequire(isExcludedFromRewards[account], \"Account is not excluded\");\n\n\t\tfor (uint256 i = 0; i < excluded.length; i++) {\n\t\t\tif (excluded[i] == account) {\n\t\t\t\texcluded[i] = excluded[excluded.length - 1];\n\t\t\t\ttOwned[account] = 0;\n\t\t\t\tisExcludedFromRewards[account] = false;\n\t\t\t\texcluded.pop();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _getValues(uint256 tAmount, bool takeFee, uint256 extraFee) private view returns (ReflectValueSet memory set) {\n\t\tset = _getTValues(tAmount, takeFee, extraFee);\n\t\t(set.rAmount, set.rTransferAmount, set.rReflectFee, set.rOtherFee, set.rExtraFee) = _getRValues(set, tAmount, takeFee, _getRate());\n\t\treturn set;\n\t}\n\n\tfunction _getTValues(uint256 tAmount, bool takeFee, uint256 extraFee) private view returns (ReflectValueSet memory set) {\n\t\tif (!takeFee) {\n\t\t\tset.tTransferAmount = tAmount;\n\t\t\treturn set;\n\t\t}\n\n\t\tset.tReflectFee = tAmount * fees.reflectFee / 100;\n\t\tset.tExtraFee = tAmount * extraFee / 100;\n\t\tset.tOtherFee = tAmount * (fees.marketingFee + fees.liquidityFee + fees.developmentFee) / 100;\n\t\tset.tTransferAmount = tAmount - set.tReflectFee - set.tOtherFee - set.tExtraFee;\n\n\t\treturn set;\n\t}\n\n\tfunction _getRValues(ReflectValueSet memory set, uint256 tAmount, bool takeFee, uint256 currentRate) private pure returns (uint256 rAmount, uint256 rTransferAmount, uint256 rReflectFee, uint256 rOtherFee, uint256 rExtraFee) {\n\t\trAmount = tAmount * currentRate;\n\n\t\tif (!takeFee) {\n\t\t\treturn (rAmount, rAmount, 0, 0, 0);\n\t\t}\n\n\t\trReflectFee = set.tReflectFee * currentRate;\n\t\trOtherFee = set.tOtherFee * currentRate;\n\t\trExtraFee = set.tExtraFee * currentRate;\n\t\trTransferAmount = rAmount - rReflectFee - rOtherFee - rExtraFee;\n\t\treturn (rAmount, rTransferAmount, rReflectFee, rOtherFee, rExtraFee);\n\t}\n\n\tfunction _getRate() private view returns (uint256) {\n\t\t(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n\t\treturn rSupply / tSupply;\n\t}\n\n\tfunction _getCurrentSupply() private view returns (uint256, uint256) {\n\t\tuint256 rSupply = rTotal;\n\t\tuint256 tSupply = tTotal;\n\n\t\tfor (uint256 i = 0; i < excluded.length; i++) {\n\t\t\tif (rOwned[excluded[i]] > rSupply || tOwned[excluded[i]] > tSupply) return (rTotal, tTotal);\n\t\t\trSupply -= rOwned[excluded[i]];\n\t\t\ttSupply -= tOwned[excluded[i]];\n\t\t}\n\n\t\tif (rSupply < rTotal / tTotal) return (rTotal, tTotal);\n\t\treturn (rSupply, tSupply);\n\t}\n\n\tfunction _approve(address owner, address spender, uint256 amount) private {\n\t\trequire(owner != ZERO_ADDRESS, \"ERC20: approve from the zero address\");\n\t\trequire(spender != ZERO_ADDRESS, \"ERC20: approve to the zero address\");\n\n\t\tallowances[owner][spender] = amount;\n\n\t\temit Approval(owner, spender, amount);\n\t}\n\n\tfunction _transfer(address from, address to, uint256 amount) private {\n\t\trequire(from != ZERO_ADDRESS, \"ERC20: transfer from the zero address\");\n\t\trequire(to != ZERO_ADDRESS, \"ERC20: transfer to the zero address\");\n\t\trequire(!isBot[from], \"ERC20: address blacklisted (bot)\");\n\t\trequire(amount > 0, \"Transfer amount must be greater than zero\");\n\t\trequire(amount <= balanceOf(from), \"You are trying to transfer more than your balance\");\n\n\t\tif (maxWalletAmount > 0 && !automatedMarketMakerPairs[to] && !isExcludedFromMaxWallet[to]) {\n\t\t\trequire((balanceOf(to) + amount) <= maxWalletAmount, \"You are trying to transfer more than the max wallet amount\");\n\t\t}\n\n\t\tif (launchedAt == 0 && automatedMarketMakerPairs[to]) {\n\t\t\tlaunchedAt = block.number;\n\t\t}\n\n\t\tbool shouldTakeFees = !isExcludedFromFees[from] && !isExcludedFromFees[to];\n\t\tif (shouldTakeFees) {\n\t\t\trequire(amount <= (automatedMarketMakerPairs[from] ? maxTxAmountBuy : maxTxAmountSell), \"You are trying to transfer too many tokens\");\n\n\t\t\tif (automatedMarketMakerPairs[from] && block.number <= launchedAt) {\n\t\t\t\tisBot[to] = true;\n\t\t\t}\n\t\t}\n\n\t\tuint256 balance = balanceOf(address(this));\n\n\t\tif (balance > maxTxAmountSell) {\n\t\t\tbalance = maxTxAmountSell;\n\t\t}\n\t\tuint256 extraFees = 0;\n\t\tif(!automatedMarketMakerPairs[from]) \n\t\t{\n\t\t\tif (isFeeProcessingEnabled && !areFeesBeingProcessed \n        \t\t&& balance >= feeProcessingThreshold \n\t\t\t) {\n\t\t\t\tareFeesBeingProcessed = true;\n\t\t\t\t_processFees(balance);\n\t\t\t\tareFeesBeingProcessed = false;\n\t\t\t}\n\t\t\tif(automatedMarketMakerPairs[to]){ //user is selling//\n\t\t\t\tuint256 firstTransTime = firstTransactionTimestamp[from];\n\t\t\t\tuint256 blockTime = block.timestamp;\n\t\t\t\t//first 5 minutes from launch ONLY - bot protection = 15% burn fee\n\t\t\t\tif(blockTime < launchedAtTime + 5 minutes){\n\t\t\t\t\textraFees = 15;\n\t\t\t\t}\n\t\t\t\t//first week early sale = 10% burn fee\n\t\t\t\telse if(blockTime < firstTransTime + 7 days){\n\t\t\t\t\textraFees = extraBurnFee;\n\t\t\t\t}\n\t\t\t\t//else don't apply extra tax//\n\t\t\t}\n\t\t}\n\n\t\t_tokenTransfer(from, to, amount, shouldTakeFees, extraFees);\n\t}\n\n\tfunction _takeReflectFees(uint256 rReflectFee) private {\n\t\trTotal -= rReflectFee;\n\t}\n\n\tfunction _takeOtherFees(uint256 rOtherFee, uint256 tOtherFee) private {\n\t\taddress self = address(this);\n\n\t\trOwned[self] += rOtherFee;\n\n\t\tif (isExcludedFromRewards[self]) {\n\t\t\ttOwned[self] += tOtherFee;\n\t\t}\n\t}\n\n\tfunction _takeExtraFees(uint256 rExtraFee, uint256 tExtraFee) private {\n\t\trOwned[DEAD_ADDRESS] += rExtraFee;\n\t\tif (isExcludedFromRewards[DEAD_ADDRESS]) {\n\t\t\ttOwned[DEAD_ADDRESS] += tExtraFee;\n\t\t}\n\t}\n\n\tfunction _tokenTransfer(address sender, address recipient, uint256 tAmount, bool shouldTakeFees, uint256 extraFee) private {\n\t\tReflectValueSet memory set = _getValues(tAmount, shouldTakeFees, extraFee);\n\n\t\tif (isExcludedFromRewards[sender]) {\n\t\t\ttOwned[sender] -= tAmount;\n\t\t}\n\n\t\tif (isExcludedFromRewards[recipient]) {\n\t\t\ttOwned[recipient] += set.tTransferAmount;\n\t\t}\n\n\t\trOwned[sender] -= set.rAmount;\n\t\trOwned[recipient] += set.rTransferAmount;\n\n\t\tif(firstTransactionTimestamp[recipient] == 0){ \n\t\t\tfirstTransactionTimestamp[recipient] = block.timestamp;\n\t\t}\n\n\t\tif (shouldTakeFees) {\n\t\t\t_takeReflectFees(set.rReflectFee);\n\t\t\t_takeOtherFees(set.rOtherFee, set.tOtherFee);\n\t\t\temit Transfer(sender, address(this), set.tOtherFee);\n\t\t\tif(set.tExtraFee > 0){\n\t\t\t\t_takeExtraFees(set.rExtraFee, set.tExtraFee);\n\t\t\t\temit Transfer(sender, DEAD_ADDRESS, set.tExtraFee);\n\t\t\t}\n\t\t}\n\n\t\temit Transfer(sender, recipient, set.tTransferAmount);\n\t}\n\n\tfunction _processFees(uint256 amount) private lockTheSwap {\n\t\tuint256 _marketingFee = fees.marketingFee + fees.developmentFee;\n\t\tuint256 feeSum = _marketingFee + fees.liquidityFee;\n\t\t\n\t\tif (feeSum == 0) return;\n\n\t\t//Calculate amounts\n\t\tuint256 amountForMarketing = amount * _marketingFee / feeSum;\n\t\tuint256 amountForLiquidity = amount - amountForMarketing;\n\n\t\t//Do processing\n\t\t_swapExactTokensForETH(amountForMarketing);\n\t\t_addLiquidity(amountForLiquidity);\n\n\t\t//Send marketing funds\n\t\tuint256 balanceEth = address(this).balance;\n\t\tuint256 marketingInEth = balanceEth * fees.marketingFee / _marketingFee;\n\t\tmarketingAddress.transfer(marketingInEth);\n\t\tdevelopmentAddress.transfer(address(this).balance);\n\t}\n\n\tfunction _addLiquidity(uint256 amount) private {\n\t\taddress self = address(this);\n\n\t\tuint256 tokensToSell = amount / 2;\n\t\tuint256 tokensForLiquidity = amount - tokensToSell;\n\n\t\tuint256 ethForLiquidity = _swapExactTokensForETH(tokensToSell);\n\n\t\t_approve(self, address(router), MAX_UINT);\n\t\trouter.addLiquidityETH{value: ethForLiquidity}(self, tokensForLiquidity, 0, 0, DEAD_ADDRESS, block.timestamp);\n\t}\n\n\tfunction _swapExactTokensForETH(uint256 amountIn) private returns (uint256) {\n\t\taddress self = address(this);\n\n\t\taddress[] memory path = new address[](2);\n\t\tpath[0] = self;\n\t\tpath[1] = router.WETH();\n\n\t\t_approve(self, address(router), MAX_UINT);\n\n\t\tuint256 previousBalance = self.balance;\n\t\trouter.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, 0, path, self, block.timestamp);\n\t\treturn self.balance - previousBalance;\n\t}\n\t\n\t//OWNER ONLY WRITE//\n\tfunction burn(uint256 value) external onlyOwner {\n\t\trequire(balanceOf(_msgSender()) >= value, \"Insufficient token balance for burn\");\n\t\t_tokenTransfer(_msgSender(), DEAD_ADDRESS, value, false, 0);\n    }\n\n\tfunction openTrading(uint256 tokensForLiquidity) external payable onlyOwner {\n\t\taddress self = address(this);\n\t\trequire(!isTradingOpen, \"Trading is already open\");\n\t\trequire(balanceOf(_msgSender()) >= tokensForLiquidity, \"Insufficient token balance for initial liquidity\");\n\t\trequire(msg.value > 0, \"Insufficient ETH for initial liquidity\");\n\n\t\t//Transfer tokens from sender/owner to contract\n\t\t_tokenTransfer(_msgSender(), self, tokensForLiquidity, false, 0);\n\n\t\t//Create pair\n\t\taddress pairAddress = IDEXFactory(router.factory()).createPair(self, router.WETH());\n\t\tautomatedMarketMakerPairs[pairAddress] = true;\n\t\tisExcludedFromMaxWallet[pairAddress] = true;\n\n\t\t//Add liquidity\n\t\t_approve(self, address(router), MAX_UINT);\n\t\trouter.addLiquidityETH{value: msg.value}(self, tokensForLiquidity, 0, 0, owner(), block.timestamp);\n\n\t\tisFeeProcessingEnabled = true;\n\t\tisTradingOpen = true;\n\t\tlaunchedAtTime = block.timestamp;\n\t}\n\n\tfunction setAutomatedMarketMakerPair(address pair, bool value) external onlyOwner {\n\t\trequire(automatedMarketMakerPairs[pair] != value, \"Automated market maker pair is already set to that value\");\n\t\tautomatedMarketMakerPairs[pair] = value;\n\n\t\tif (value) {\n\t\t\tisExcludedFromMaxWallet[pair] = true;\n\t\t}\n\t}\n\n\tfunction setBurnFees(uint256 burnFee) external onlyOwner {\n\t\trequire(burnFee <= 10, \"Cannot set burn fee to above 10%\");\n\t\textraBurnFee = burnFee;\n\t}\n\n\tfunction setIsFeeProcessingEnabled(bool value) public onlyOwner {\n\t\tisFeeProcessingEnabled = value;\n\t}\n\n\tfunction setFeeProcessingThreshold(uint256 value) external onlyOwner {\n\t\tfeeProcessingThreshold = value;\n\t}\n\n\tfunction setMarketingAddress(address payable value) external onlyOwner {\n\t\trequire(marketingAddress != value, \"Marketing address is already set to this value\");\n\t\tmarketingAddress = value;\n\t}\n\t\n\tfunction setDevelopmentAddress(address payable value) external onlyOwner {\n\t\trequire(developmentAddress != value, \"Development address is already set to this value\");\n\t\tdevelopmentAddress = value;\n\t}\n\n\tfunction setIsBot(address[] memory accounts, bool value) external onlyOwner {\n\t\tfor (uint256 i = 0; i < accounts.length; i++){\n\t\t\tisBot[accounts[i]] = value;\n\t\t}\n\t}\n\n\tfunction transferMany(address[] memory accounts, uint256 amount) external onlyOwner {\n\t\trequire(balanceOf(_msgSender()) >= amount * accounts.length, \"Insufficient token balance\");\n\t\tfor (uint256 i = 0; i < accounts.length; i++){\n\t\t\t_tokenTransfer(_msgSender(), accounts[i], amount, false, 0);\n\t\t}\n\t}\n\n\tfunction setMaxTransactionAmounts(uint256 maxBuy, uint256 maxSell) external onlyOwner {\n\t\trequire(maxBuy >= (tTotal / 400), \"Must set max buy to at least 0.25% of total supply\");\n\t\trequire(maxSell >= (tTotal / 400), \"Must set max sell to at least 0.25% of total supply\");\n\n\t\tmaxTxAmountBuy = maxBuy;\n\t\tmaxTxAmountSell = maxSell;\n\t}\n\n\tfunction setMaxWalletAmount(uint256 value) external onlyOwner {\n\t\trequire(value >= (tTotal / 200), \"Must set max wallet to at least 0.5% of total supply\");\n\t\tmaxWalletAmount = value;\n\t}\n\n\tfunction manuallyProcessFees() external onlyOwner{\n\t\tuint256 balance = balanceOf(address(this));\n\t\t_tokenTransfer(address(this), _msgSender(), balance, false, 0);\n\t}\n\n\t// function setIsExcludedFromMaxWallet(address account, bool value) external onlyOwner {\n\t// \trequire(isExcludedFromMaxWallet[account] != value, \"Account is already set to this value\");\n\t// \tisExcludedFromMaxWallet[account] = value;\n\t// }\n\n\t// function setIsExcludedFromFees(address account, bool value) external onlyOwner {\n\t// \trequire(isExcludedFromFees[account] != value, \"Account is already set to this value\");\n\t// \tisExcludedFromFees[account] = value;\n\t// }\n\n\tfunction getExtraSalesFee(address account) public view returns (uint256) {\n\t\tuint256 extraFees = 0;\n\t\tuint256 firstTransTime = firstTransactionTimestamp[account];\n\t\tuint256 blockTime = block.timestamp;\n\t\tif(blockTime < launchedAtTime + 5 minutes){\n\t\t\textraFees = 15;\n\t\t}\n\t\telse if(blockTime < firstTransTime + 7 days){\n\t\t\textraFees = extraBurnFee;\n\t\t}\n\t\treturn extraFees;\n\t}\n\n\treceive() external payable {}\n}"}}}