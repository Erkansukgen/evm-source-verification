{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "FLOKI.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract SafeMath {\r\n    \r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    \r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a); c = a - b;\r\n    } \r\n        \r\n    function safeMul(uint a, uint b) public pure returns (uint c) { \r\n        c = a * b; require(a == 0 || c / a == b); \r\n    } \r\n        \r\n    function safeDiv(uint a, uint b) public pure returns (uint c) { require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\nabstract contract _ERC20 {\r\n    \r\n    function balanceOf(address tokenOwner) public virtual view returns (uint balance);\r\n    \r\n    function allowance(address tokenOwner, address spender) public virtual view returns (uint remaining);\r\n    function approve(address spender, uint tokens) public virtual returns (bool success);\r\n    \r\n    function transfer(address to, uint tokens) public virtual returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public virtual returns (bool success);\r\n    \r\n    function totalSupply() public virtual view returns (uint);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract ForeverFloki is _ERC20, SafeMath\r\n{\r\n  address private _owner;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    \r\n    uint8 public decimals;\r\n    \r\n    uint256 public _totalSupply;\r\n    \r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    \r\n    event Burn(address indexed burner, uint256 value);\r\n    \r\n    constructor() {\r\n        name =\"ForeverFloki\";\r\n        symbol = \"FFlok\";\r\n        decimals = 18;\r\n        \r\n        _totalSupply = 1000000000000000000000000000000000;\r\n        \r\n    _owner = msg.sender;\r\n    \r\n         // to contract owner\r\n        balances[msg.sender] = _totalSupply;\r\n        \r\n        //burn(0x000000000000000000000000000000000000dEaD, _totalSupply / 2);\r\n    }\r\n  \r\n     function totalSupply() public override view returns (uint) {\r\n        return _totalSupply - balances[address(0)];\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public override view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n    function allowance(address tokenOwner, address spender) public override view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender]; \r\n    }\r\n    \r\n    function approve(address spender, uint tokens) public override returns (bool success)\r\n    {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address to, uint tokens) public override returns (bool success) {\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n    \r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint tokens) public override returns (bool success) {\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n            \r\n      emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function burn(address account, uint256 amount) private returns (bool success) {\r\n        \r\n        balances[account] -= amount;\r\n        _totalSupply -= amount;\r\n        emit Burn(msg.sender, amount);\r\n        return true;\r\n    }\r\n}"
    }
  }
}