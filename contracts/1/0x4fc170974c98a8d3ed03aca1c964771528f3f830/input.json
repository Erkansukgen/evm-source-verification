{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"ProtocolFinance.sol":{"content":"pragma solidity =0.5.16;\r\n\r\ninterface ERC20Interface {\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function totalSupply() external view returns (uint);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    address public creator;\r\n    uint public unlockDate;\r\n    uint public createdAt;\r\n    uint public balance;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"you are not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"you are not the new owner\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract ProtocolFinance is ERC20Interface, SafeMath, Owned {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint public totalSupply;\r\n    mapping(address => uint) public balances;\r\n    mapping(address => mapping(address => uint)) public allowed;\r\n   \r\n   \r\n     constructor () public {\r\n        name = \"Protocol Finance\";\r\n        symbol = \"PFI\";\r\n        decimals = 18;\r\n        totalSupply = 20000*10**uint(decimals);\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n       \r\n    function transfer(address to, uint value) public returns(bool) {\r\n        require(balances[msg.sender] >= value);\r\n        balances[msg.sender] -= value;\r\n        balances[to] += value;\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n   \r\n    function transferFrom(address from, address to, uint value) public returns(bool) {\r\n        uint allowance = allowed[from][msg.sender];\r\n        require(balances[msg.sender] >= value && allowance >= value);\r\n        allowed[from][msg.sender] -= value;\r\n        balances[msg.sender] -= value;\r\n        balances[to] += value;\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n   \r\n    function approve(address spender, uint value) public returns(bool) {\r\n        require(spender != msg.sender);\r\n        allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    function TimeLockedWallet(address _creator, address _owner, uint _unlockDate) onlyOwner public {\r\n        creator = _creator;\r\n        owner = _owner;\r\n        unlockDate = _unlockDate;\r\n        createdAt = now;\r\n    }\r\n    \r\n    function Recieved() payable public { \r\n        (msg.sender, msg.value);\r\n    }\r\n   \r\n   function withdraw() onlyOwner public {\r\n         require(now >= unlockDate);\r\n         msg.sender.transfer(balance);\r\n         withdraw();\r\n    }\r\n    \r\n\r\n    function allowance(address owner, address spender) public view returns(uint) {\r\n        return allowed[owner][spender];\r\n    }\r\n   \r\n    function balanceOf(address owner) public view returns(uint) {\r\n        return balances[owner];\r\n    }\r\n   \r\n}"}}}