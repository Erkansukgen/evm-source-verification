{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "TetsuV2.sol": {
      "content": "/*                 \n    $$$$$$$$\\ $$$$$$$$\\ $$$$$$$$\\  $$$$$$\\  $$\\   $$\\ \n    \\__$$  __|$$  _____|\\__$$  __|$$  __$$\\ $$ |  $$ |\n       $$ |   $$ |         $$ |   $$ /  \\__|$$ |  $$ |\n       $$ |   $$$$$\\       $$ |   \\$$$$$$\\  $$ |  $$ |\n       $$ |   $$  __|      $$ |    \\____$$\\ $$ |  $$ |\n       $$ |   $$ |         $$ |   $$\\   $$ |$$ |  $$ |\n       $$ |   $$$$$$$$\\    $$ |   \\$$$$$$  |\\$$$$$$  |\n       \\__|   \\________|   \\__|    \\______/  \\______/ \n                                                 \n    Tetsu Inu Relaunch\n    $TETSU\n */\n\n// SPDX-License-Identifier: None\npragma solidity ^0.8.4;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n}  \n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\ncontract TetsuInuV2 is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    mapping (address => uint256) private _rOwned;\n    mapping (address => uint256) private _tOwned;\n    mapping (address => uint256) private _buyMap;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => bool) private _excludedFromFee;\n    mapping (address => bool) private snipers;\n    mapping (address => uint) private cooldown;\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private constant _tTotal = 1e12 * 10**9;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _tFeeTotal;\n    \n    uint256 private _feeAddr1;\n    uint256 private _feeAddr2;\n    address payable private _marketingFeeAddr;\n    \n    string private constant _name = \"Tetsu Inu\";\n    string private constant _symbol = \"TETSU\";\n    uint8 private constant _decimals = 9;\n\n    IUniswapV2Router02 private uniswapV2Router;\n    address private uniswapV2Pair;\n    bool private tradingOpen;\n    bool private inSwap = false;\n    bool private swapEnabled = false;\n    bool private cooldownEnabled = false;\n    uint256 private _maxTxAmount = _tTotal;\n    event MaxTxAmountUpdated(uint _maxTxAmount);\n    modifier lockTheSwap {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n    constructor () {\n        _marketingFeeAddr = payable(0x4091207945913363879809359578983212806713);\n        _rOwned[_msgSender()] = _rTotal;\n        _excludedFromFee[owner()] = true;\n        _excludedFromFee[address(this)] = true;\n        _excludedFromFee[_marketingFeeAddr] = true;\n        emit Transfer(address(0x0000000000000000000000000000000000000000), _msgSender(), _tTotal);\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public pure override returns (uint256) {\n        return _tTotal;\n    }\n    \n    function originalPurchase(address account) public  view returns (uint256) {\n        return _buyMap[account];\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function setCooldownEnabled(bool onoff) external onlyOwner() {\n        cooldownEnabled = onoff;\n    }\n    \n    function setMaxTx(uint256 maxTransactionAmount) external onlyOwner() {\n        _maxTxAmount = maxTransactionAmount;\n    }\n\n    function tokenFromReflection(uint256 rAmount) private view returns(uint256) {\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n        uint256 currentRate =  _getRate();\n        return rAmount.div(currentRate);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n    \n        \n        if (!_isBuy(from)) {\n            // taxes 25% on sells that occur within 24h of buy time\n            if (_buyMap[from] != 0 &&\n                (_buyMap[from] + (24 hours) >= block.timestamp))  {\n                _feeAddr1 = 1;\n                _feeAddr2 = 15;\n            } else {\n                _feeAddr1 = 1;\n                _feeAddr2 = 9;\n            }\n        } else {\n            if (_buyMap[to] == 0) {\n                _buyMap[to] = block.timestamp;\n            }\n            _feeAddr1 = 1;\n            _feeAddr2 = 9;\n        }\n        \n        if (from != owner() && to != owner()) {\n            require(!snipers[from], \"Flagged as sniper\");\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _excludedFromFee[to] && cooldownEnabled) {\n                // cooldown\n                require(amount <= _maxTxAmount);\n                require(cooldown[to] < block.timestamp);\n                cooldown[to] = block.timestamp + (30 seconds);\n            }\n            \n            \n            uint256 contractTokenBalance = balanceOf(address(this));\n            if (!inSwap && from != uniswapV2Pair && swapEnabled) {\n                swapTokensForEth(contractTokenBalance);\n                uint256 contractETHBalance = address(this).balance;\n                if(contractETHBalance > 0) {\n                    sendETHToFee(address(this).balance);\n                }\n            }\n        }\n\t\t\n        _tokenTransfer(from,to,amount);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n    \n    // taxes\n    function sendETHToFee(uint256 amount) private {\n        _marketingFeeAddr.transfer(amount);\n    }\n\n    function withdrawToken(address _tokenContract, uint256 _amount) external onlyOwner() {\n        IERC20 tokenContract = IERC20(_tokenContract);\n        \n        // transfer the token from address of this contract\n        // to address of the user (executing the withdrawToken() function)\n        tokenContract.transfer(msg.sender, _amount);\n    }\n    \n    function withdrawStuckETH(uint256 amount) public onlyOwner {\n        require(amount <= address(this).balance);\n        _marketingFeeAddr.transfer(address(this).balance);\n    }\n    \n    function setAirdroppedTax() public onlyOwner {\n        // Setting 24h sell-tax manually for airdropped users\n    \n        _buyMap[address(0x088e1D16681269155D3934Be932AD9C12eA97453)] = 1636502400;\n        _buyMap[address(0x11597F1F8e097a35016e2e1c1Bd2b58CEE5EC1Cb)] = 1636502400;\n        _buyMap[address(0x311861578F2D40F05a8f31F89832Fc419Bec39eE)] = 1636502400;\n        _buyMap[address(0x39bf35Af35942F8395E4fc5B0e541191C310b2D9)] = 1636502400;\n        _buyMap[address(0x3c1cDD238ad13B7A207c16a0dd3dCCeD006F2cD9)] = 1636502400;\n        _buyMap[address(0x3cc6EcCd41cA85e8cB8b2161B0D1348A40688E1C)] = 1636502400;\n        _buyMap[address(0x4318D9DA6524b50CCF2D12F372D9E012e5a3F511)] = 1636502400;\n        _buyMap[address(0x441c1697d68654b74167D372b88Bc1314a25B6c8)] = 1636502400;\n        _buyMap[address(0x47584f11A998C19dDa33d8cA4002FBe892aC899b)] = 1636502400;\n        _buyMap[address(0x497f9644039e72B662970b9ec1E7B6FC55e3b71B)] = 1636502400;\n        _buyMap[address(0x558327F4Dbd6d5e10C584e0eE9251DF8Ea679320)] = 1636502400;\n        _buyMap[address(0x582F6d29371aEC2d0145887A6051c0B13B2cea19)] = 1636502400;\n        _buyMap[address(0x6799CBc08d6B80eeAE519E286f270D6B6E84798D)] = 1636502400;\n        _buyMap[address(0x696CcEb0c8888552c0f07A09F65cA38ACF42138B)] = 1636502400;\n        _buyMap[address(0x7aF7760a85122EF97Eac45fD48c55565a377A21d)] = 1636502400;\n        _buyMap[address(0x7F5DAaCD0602D9746418D7666ee3E904F21d4b64)] = 1636502400;\n        _buyMap[address(0x80043ADE3C7295450fC0dd93757DBEA8A7dc79Fa)] = 1636502400;\n        _buyMap[address(0x921c0b27FA2eeCA7cbcA305cca5cF2Dac9DE7e15)] = 1636502400;\n        _buyMap[address(0x934bd94713e5Db9F379cB4737f0A768Eb27aE3D7)] = 1636502400;\n        _buyMap[address(0x9cA55DE009e8489b2337d7aB7D2319CF98Eb70f7)] = 1636502400;\n        _buyMap[address(0xA3143587D89410Cc59fa2507b2E3E64c9F36c11d)] = 1636502400;\n        _buyMap[address(0xA6a3931c141CCb88F416B58AA64Df4506E1F22b7)] = 1636502400;\n        _buyMap[address(0xAcEe5d4f0D5e3BfaAC45762bcB479eb61B08507e)] = 1636502400;\n        _buyMap[address(0xcd8Bcc9fa6c6B7346CC97efd6E073ba6A158306A)] = 1636502400;\n        _buyMap[address(0xCD9759BF0460dA7745adb1EbBE8Bc55B2919C7E5)] = 1636502400;\n        _buyMap[address(0xd34D6A475aE81F8960B020Ba3cEeDeAB2fF65cCC)] = 1636502400;\n        _buyMap[address(0xd66E6D6F596E5020C0840fBee40b27892BCe8B6E)] = 1636502400;\n        _buyMap[address(0xE1B4B430989EbFB106C62bfd3d84eEE7D9f8Dcd2)] = 1636502400;\n        _buyMap[address(0xE355c9CbAC7Ee0BCC59605a2383966f73A82C451)] = 1636502400;\n        _buyMap[address(0xF8D184723887B3914587A6E7d0757c4026aF1640)] = 1636502400;\n        _buyMap[address(0xfcf6a3d7eb8c62a5256a020e48f153c6D5Dd6909)] = 1636502400;\n        _buyMap[address(0xfE2159Cc10CCC0b2E5c716118250c8921C761eD5)] = 1636502400;\n    }\n\n    function openTrading() external onlyOwner() {\n        require(!tradingOpen, \"Trading is already open\");\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        uniswapV2Router = _uniswapV2Router;\n        _approve(address(this), address(uniswapV2Router), _tTotal);\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),balanceOf(address(this)),address(this).balance,owner(),block.timestamp);\n        swapEnabled = true;\n        cooldownEnabled = true;\n        _maxTxAmount = 20000000000 * 10 ** 9;\n        tradingOpen = true;\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\n    }\n    \n    function banSniper(address[] memory sniper) public onlyOwner {\n        for (uint i = 0; i < sniper.length; i++) {\n            snipers[sniper[i]] = true;\n        }\n    }\n    \n    function removeStrictTxLimit() public onlyOwner {\n        _maxTxAmount = 1e12 * 10**9;\n    }\n    \n    function unbanSniper(address not_sniper) public onlyOwner {\n        snipers[not_sniper] = false;\n    }\n        \n    function _tokenTransfer(address sender, address recipient, uint256 amount) private {\n        _transferStandard(sender, recipient, amount);\n    }\n\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \n        _takeTeam(tTeam);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _takeTeam(uint256 tTeam) private {\n        uint256 currentRate =  _getRate();\n        uint256 rTeam = tTeam.mul(currentRate);\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\n    }\n    \n    function updateMaxTx(uint256 fee) public onlyOwner {\n        _maxTxAmount = fee;\n    }\n    \n    function _reflectFee(uint256 rFee, uint256 tFee) private {\n        _rTotal = _rTotal.sub(rFee);\n        _tFeeTotal = _tFeeTotal.add(tFee);\n    }\n\n    receive() external payable {}\n    \n    function manualswap() external {\n        require(_msgSender() == _marketingFeeAddr);\n        uint256 contractBalance = balanceOf(address(this));\n        swapTokensForEth(contractBalance);\n    }\n    \n    function manualsend() external {\n        require(_msgSender() == _marketingFeeAddr);\n        uint256 contractETHBalance = address(this).balance;\n        sendETHToFee(contractETHBalance);\n    }\n    \n\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _feeAddr1, _feeAddr2);\n        uint256 currentRate =  _getRate();\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\n    }\n\n    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {\n        uint256 tFee = tAmount.mul(taxFee).div(100);\n        uint256 tTeam = tAmount.mul(TeamFee).div(100);\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\n        return (tTransferAmount, tFee, tTeam);\n    }\n\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n        uint256 rAmount = tAmount.mul(currentRate);\n        uint256 rFee = tFee.mul(currentRate);\n        uint256 rTeam = tTeam.mul(currentRate);\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n    function _isBuy(address _sender) private view returns (bool) {\n        return _sender == uniswapV2Pair;\n    }\n\n\n\tfunction _getRate() private view returns(uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _getCurrentSupply() private view returns(uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;      \n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n}"
    }
  }
}