{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Receiver.sol":{"content":"// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/Receiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract Receiver is Ownable {\r\n\r\n    uint private _totalReceived;\r\n    mapping(address => uint) private _paidByAddr;\r\n    mapping(address => uint) private _percentByAddr;\r\n\r\n\r\n    event Received(address indexed caller, uint amount, string message);\r\n    event BalanceWithdraw(address indexed recipient, uint amount);\r\n\r\n    constructor(address[] memory _addrs, uint[] memory _percents) {\r\n        require(_addrs.length == _percents.length, \"Receiver: two array args of constructor do not have a same length\");\r\n        uint sum;\r\n        for(uint i=0; i < _addrs.length; i++) {\r\n            _percentByAddr[_addrs[i]] = _percents[i];\r\n            sum += _percents[i];\r\n        }\r\n        require(sum == uint(100), \"Receiver: Sum is not 100%\");\r\n    }\r\n\r\n    fallback() external payable {\r\n        _totalReceived += msg.value;\r\n        emit Received(_msgSender(), msg.value, \"fallback was called\");\r\n    }\r\n\r\n    receive() external payable {\r\n        _totalReceived += msg.value;\r\n        emit Received(_msgSender(), msg.value, \"receive was called\");\r\n    } \r\n\r\n    function getBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getPercent(address _account) public view returns (uint) {\r\n        return _percentByAddr[_account];\r\n    }    \r\n\r\n    function totalReceived() public view returns (uint) {\r\n        return _totalReceived;\r\n    }\r\n\r\n    function getTotalByAddr(address _addr) public view returns (uint) {\r\n        uint percent = _percentByAddr[_addr];\r\n        return _totalReceived * percent / 100;\r\n    }\r\n\r\n    function getPaidByAddr(address _addr) public view returns (uint) {\r\n        return _paidByAddr[_addr];\r\n    }\r\n\r\n    function getBalanceByAddr(address _addr) public view returns (uint) {\r\n        return getTotalByAddr(_addr) - getPaidByAddr(_addr);\r\n    }\r\n\r\n    function withdrawByAddr() public returns (bool) {\r\n\r\n        address recipient = payable(_msgSender());        \r\n        uint percent = _percentByAddr[recipient];\r\n        require(percent > 0, \"Receiver: This address has no share\");\r\n        uint amount = getBalanceByAddr(recipient);\r\n        _paidByAddr[recipient] += amount;\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Receiver: Failed to send Ether\");\r\n        emit BalanceWithdraw(recipient, amount); \r\n        return true;\r\n    }\r\n}"}}}