{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/MONG.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n// use latest solidity version at time of writing, need not worry about overflow and underflow\n\n/// @title ERC20 Contract \n\ncontract Token {\n\n    // My Variables\n    string public name;\n    string public symbol;\n    uint256 public decimals;\n    uint256 public totalSupply;\n\n    // Keep track balances and allowances approved\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    // Events - fire events on state changes etc\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor(string memory _name, string memory _symbol, uint _decimals, uint _totalSupply) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply = _totalSupply; \n        balanceOf[msg.sender] = totalSupply;\n    }\n\n    /// @notice transfer amount of tokens to an address\n    /// @param _to receiver of token\n    /// @param _value amount value of token to send\n    /// @return success as true, for transfer \n    function transfer(address _to, uint256 _value) external returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /// @dev internal helper transfer function with required safety checks\n    /// @param _from, where funds coming the sender\n    /// @param _to receiver of token\n    /// @param _value amount value of token to send\n    // Internal function transfer can only be called by this contract\n    //  Emit Transfer Event event \n    function _transfer(address _from, address _to, uint256 _value) internal {\n        // Ensure sending is to valid address! 0x0 address cane be used to burn() \n        require(_to != address(0));\n        balanceOf[_from] = balanceOf[_from] - (_value);\n        balanceOf[_to] = balanceOf[_to] + (_value);\n        emit Transfer(_from, _to, _value);\n    }\n\n    /// @notice Approve other to spend on your behalf eg an exchange \n    /// @param _spender allowed to spend and a max amount allowed to spend\n    /// @param _value amount value of token to send\n    /// @return true, success once address approved\n    //  Emit the Approval event  \n    // Allow _spender to spend up to _value on your behalf\n    function approve(address _spender, uint256 _value) external returns (bool) {\n        require(_spender != address(0));\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /// @notice transfer by approved person from original address of an amount within approved limit \n    /// @param _from, address sending to and the amount to send\n    /// @param _to receiver of token\n    /// @param _value amount value of token to send\n    /// @dev internal helper transfer function with required safety checks\n    /// @return true, success once transfered from original account    \n    // Allow _spender to spend up to _value on your behalf\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\n        require(_value <= balanceOf[_from]);\n        require(_value <= allowance[_from][msg.sender]);\n        allowance[_from][msg.sender] = allowance[_from][msg.sender] - (_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n}"
    }
  }
}