{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "LizardToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ERC721 {\n\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n}\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n\ninterface Token {\n    function balanceOf(address _owner) external view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract Owned {\n\n    address public owner;\n\n    modifier isOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    event OwnerUpdate(address _prevOwner, address _newOwner);\n\n    function changeOwnerForce(address _newOwner) public isOwner {\n        require(_newOwner != owner);\n        owner = _newOwner;\n        emit OwnerUpdate(owner, _newOwner);\n    }\n\n}\n\ncontract Controlled is Owned {\n\n    bool public transferEnable = true;\n\n    bool public lockFlag = true;\n\n    constructor() {\n        setExclude(msg.sender);\n    }\n\n    mapping(address => bool) public locked;\n\n    mapping(address => bool) public exclude;\n\n    function enableTransfer(bool _enable) public isOwner{\n        transferEnable = _enable;\n    }\n\n    function disableLock(bool _enable) public isOwner returns (bool success){\n        lockFlag = _enable;\n        return true;\n    }\n\n    function addLock(address _addr) public isOwner returns (bool success){\n        require(_addr != msg.sender);\n        locked[_addr] = true;\n        return true;\n    }\n\n    function setExclude(address _addr) public isOwner returns (bool success){\n        exclude[_addr] = true;\n        return true;\n    }\n\n    function removeLock(address _addr) public isOwner returns (bool success){\n        locked[_addr] = false;\n        return true;\n    }\n\n    modifier transferAllowed(address _addr) {\n        if (!exclude[_addr]) {\n            assert(transferEnable);\n            if(lockFlag){\n                assert(!locked[_addr]);\n            }\n        }\n        _;\n    }\n\n    modifier validAddress(address _addr) {\n        assert(address(0x0) != _addr && address(0x0) != msg.sender);\n        _;\n    }\n}\n\ncontract StandardToken is Token, Controlled {\n\n    string public name = \"\";\n    string public symbol = \"\";\n    uint8 public decimals = 18;\n\n    uint256 public totalSupply;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    constructor (string memory name_, string memory symbol_) {\n        name = name_;\n        symbol = symbol_;\n    }\n\n    function balanceOf(address _owner) public view override returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _value) public override transferAllowed(msg.sender) validAddress(_to) returns (bool success) {\n        require(_value > 0);\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            emit Transfer(msg.sender, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public override transferAllowed(_from) validAddress(_to) returns (bool success) {\n        require(_value > 0);\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            emit Transfer(_from, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function approve(address _spender, uint256 _value) public override transferAllowed(_spender) returns (bool success) {\n        require(_value > 0);\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public override view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(totalSupply + amount > totalSupply);\n        require(balances[account] + amount > balances[account]);\n\n        balances[account] += amount;\n        totalSupply += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(totalSupply >= amount);\n        require(balances[account] >= amount);\n\n        totalSupply -= amount;\n        balances[account] -= amount;\n        emit Transfer(account, address(0), amount);\n    }\n\n}\n\ncontract LizardToken is StandardToken {\n\n    ERC721 public lizardContract;\n    ERC721 public dragonContract;\n\n    uint256 public immutable PER_DAY_PER_LIZARD_REWARD = 10 ether;\n    uint256 public immutable PER_DAY_PER_DRAGON_REWARD = 50 ether;\n    uint256 private MINE_PERIOD = 86400;\n    uint256 public GENESIS = 1635379200;\n\n    bool public mineIsActive = true;\n\n    mapping(uint256 => uint256) public last;\n    mapping(uint256 => uint256) public lastDragon;\n\n    constructor(address lizard, address dragon) StandardToken(\"SCALE\",\"SCALE\"){\n        lizardContract = ERC721(lizard);\n        dragonContract = ERC721(dragon);\n    }\n\n    function closeMineState() public isOwner {\n        require(mineIsActive, \"Mining is currently unavailable\");\n        mineIsActive = false;\n    }\n\n    function openMineState(uint256 timestamp) public isOwner {\n        require(!mineIsActive, \"Mining is currently on\");\n        mineIsActive = true;\n        GENESIS = timestamp;\n    }\n\n    function claim(address user) external {\n        require(mineIsActive, \"Mining is currently unavailable\");\n        require(block.timestamp > GENESIS, \"Mining is currently unavailable\");\n        uint256 owed = 0;\n        uint256 total = lizardContract.balanceOf(user);\n        for (uint256 i = 0; i < total; i++) {\n            uint256 id = lizardContract.tokenOfOwnerByIndex(user, i);\n            uint256 minePeriods = minePeriod(last[id]);\n            owed += (minePeriods * PER_DAY_PER_LIZARD_REWARD);\n            last[id] = block.timestamp;\n        }\n        total = dragonContract.balanceOf(user);\n        for (uint256 i = 0; i < total; i++) {\n            uint256 id = dragonContract.tokenOfOwnerByIndex(user, i);\n            uint256 minePeriods = minePeriod(lastDragon[id]);\n            owed += (minePeriods * PER_DAY_PER_DRAGON_REWARD);\n            lastDragon[id] = block.timestamp;\n        }\n        _mint(user, owed);\n    }\n\n    function getTotalClaimable(address user)  external view returns(uint256) {\n        if (!mineIsActive) {\n            return 0;\n        }\n        if (block.timestamp < GENESIS) {\n            return 0;\n        }\n        uint256 owed = 0;\n        uint256 total = lizardContract.balanceOf(user);\n        for (uint256 i = 0; i < total; i++) {\n            uint256 id = lizardContract.tokenOfOwnerByIndex(user, i);\n            uint256 minePeriods = minePeriod(last[id]);\n            owed += (minePeriods * PER_DAY_PER_LIZARD_REWARD);\n        }\n        total = dragonContract.balanceOf(user);\n        for (uint256 i = 0; i < total; i++) {\n            uint256 id = dragonContract.tokenOfOwnerByIndex(user, i);\n            uint256 minePeriods = minePeriod(lastDragon[id]);\n            owed += (minePeriods * PER_DAY_PER_DRAGON_REWARD);\n        }\n        return owed;\n    }\n\n    function minePeriod(uint256 claimedTime) internal view returns (uint256) {\n        uint256 lastTime = Math.max(claimedTime, GENESIS);\n        return (block.timestamp - lastTime / MINE_PERIOD * MINE_PERIOD) / MINE_PERIOD;\n    }\n\n}"
    }
  }
}