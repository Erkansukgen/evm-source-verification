{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/Test.sol": {
      "content": "pragma solidity ^0.8.0;\n\ncontract AntonyCollage {\n    /* \n    * sha256 of original full image Antony Collage. Created using Python hashlib.\n    */\n    bytes32 public fullImgHash = 0x7a292346c200c7e46714489a1fbe10fcee47476d93f4080a71d275c40644a3f7;\n    \n    /* \n    * sha256 of secret phrase embeded in an Antony Collage Parts and encrypted by key. \n    * The first one to reveal the passphrase gets ownership of the Antony Collage after calling the reveal() function.\n    */\n    bytes32 public hashOfSecret = 0x59ce1e9545744b2b56590c37a7ea621c28ea7896eb92d8c1c6dcb80ee9390e4e;\n    \n    /* \n    * Antony Collage one and only one owner\n    */\n    address public owner;\n    \n    bool public ownershipTransferred = false;\n    \n    constructor() {\n        owner = msg.sender;\n    }\n    \n    function reveal(string memory _passphrase) public {\n        require(!ownershipTransferred, \"No more bro :)\");\n        require(hashOfSecret == keccak256(abi.encodePacked(_passphrase)), \"Ooops ;)\");\n        ownershipTransferred = true;\n        owner = msg.sender;\n    }\n}"
    }
  }
}