{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"AnteTest.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-only\n\n// ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\n// ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\n// ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\n// ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\n// ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\n// ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\npragma solidity >=0.7.0;\n\nimport \"./interfaces/IAnteTest.sol\";\n\n/// @title Ante V0.5 Ante Test smart contract\n/// @notice Abstract inheritable contract that supplies syntactic sugar for writing Ante Tests\n/// @dev Usage: contract YourAnteTest is AnteTest(\"String descriptor of test\") { ... }\nabstract contract AnteTest is IAnteTest {\n    /// @inheritdoc IAnteTest\n    address public override testAuthor;\n    /// @inheritdoc IAnteTest\n    string public override testName;\n    /// @inheritdoc IAnteTest\n    string public override protocolName;\n    /// @inheritdoc IAnteTest\n    address[] public override testedContracts;\n\n    /// @dev testedContracts and protocolName are optional parameters which should\n    /// be set in the constructor of your AnteTest\n    /// @param _testName The name of the Ante Test\n    constructor(string memory _testName) {\n        testAuthor = msg.sender;\n        testName = _testName;\n    }\n\n    /// @notice Returns the testedContracts array of addresses\n    /// @return The list of tested contracts as an array of addresses\n    function getTestedContracts() external view returns (address[] memory) {\n        return testedContracts;\n    }\n\n    /// @inheritdoc IAnteTest\n    function checkTestPasses() external virtual override returns (bool) {}\n}\n"},"contracts/AnteWildCreditOracleTest.sol":{"content":"// SPDX-License-Identifier: MIT\n\n// ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\n// ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\n// ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\n// ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\n// ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\n// ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n\npragma solidity >=0.8.0;\n\nimport \"../AnteTest.sol\";\n\ninterface IPriceOracle {\n    function tokenPrice(address _token) external view returns (uint256);\n}\n\n// Ante Test to check if the Wild Credit $WILD token price is always within 1% of the UniswapV3Price oracle\n// This will be useful in the event Wild Credit ever changes the price oracle and there would be discrepancies\ncontract AnteWildCreditOracleTest is\n    AnteTest(\"Wild.Credit Controller price oracle is always the within 1% of Wild.Credit UniswapV3Oracle\")\n{\n    address public constant wildCreditTokenAddr = 0x08A75dbC7167714CeaC1a8e43a8d643A4EDd625a;\n    IPriceOracle public constant uniswapV3Oracle = IPriceOracle(0x3D619bc03014917d3B27B3B86452346af36e58de);\n    IPriceOracle public constant controllerPriceOracle = IPriceOracle(0x45ee906E9CFAE0aabDB194D6180A3A119D4376C4);\n    uint256 accuracy = 10e12;\n\n    constructor() {\n        protocolName = \"Wild Credit\";\n        testedContracts = [address(controllerPriceOracle)];\n    }\n\n    function checkTestPasses() public view override returns (bool) {\n        uint256 price1 = uniswapV3Oracle.tokenPrice(wildCreditTokenAddr);\n        uint256 price2 = controllerPriceOracle.tokenPrice(wildCreditTokenAddr);\n        return ((price1 * accuracy) / (price2)) > 99e11 || ((price2 * accuracy) / (price1)) > 99e11;\n    }\n}\n\n"},"interfaces/IAnteTest.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-only\n\n// ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\n// ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\n// ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\n// ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\n// ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\n// ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\npragma solidity >=0.7.0;\n\n/// @title The interface for the Ante V0.5 Ante Test\n/// @notice The Ante V0.5 Ante Test wraps test logic for verifying fundamental invariants of a protocol\ninterface IAnteTest {\n    /// @notice Returns the author of the Ante Test\n    /// @dev This overrides the auto-generated getter for testAuthor as a public var\n    /// @return The address of the test author\n    function testAuthor() external view returns (address);\n\n    /// @notice Returns the name of the protocol the Ante Test is testing\n    /// @dev This overrides the auto-generated getter for protocolName as a public var\n    /// @return The name of the protocol in string format\n    function protocolName() external view returns (string memory);\n\n    /// @notice Returns a single address in the testedContracts array\n    /// @dev This overrides the auto-generated getter for testedContracts [] as a public var\n    /// @param i The array index of the address to return\n    /// @return The address of the i-th element in the list of tested contracts\n    function testedContracts(uint256 i) external view returns (address);\n\n    /// @notice Returns the name of the Ante Test\n    /// @dev This overrides the auto-generated getter for testName as a public var\n    /// @return The name of the Ante Test in string format\n    function testName() external view returns (string memory);\n\n    /// @notice Function containing test logic to inspect the protocol invariant\n    /// @dev This should usually return True\n    /// @return A single bool indicating if the Ante Test passes/fails\n    function checkTestPasses() external returns (bool);\n}\n"}}}