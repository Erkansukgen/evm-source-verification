{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/CoreUtils.sol":{"content":"/**\n *Submitted for verification at Etherscan.io on 2020-07-20\n*/\n\n/**\n *Submitted for verification at Etherscan.io on 2020-07-17\n*/\n\npragma experimental ABIEncoderV2;\npragma solidity ^0.6.0;\n\n\n/**\n *Submitted for verification at Etherscan.io on 2020-04-03\n*/\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    // function toPayable(address account) internal pure returns (address payable) {\n    //     return address(uint160(account));\n    // }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    // function sendValue(address payable recipient, uint256 amount) internal {\n    //     require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n    //     // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n    //     (bool success, ) = recipient.call.value(amount)(\"\");\n    //     require(success, \"Address: unable to send value, recipient may have reverted\");\n    // }\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    // function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n    //     uint256 newAllowance = token.allowance(address(this), spender).add(value);\n    //     callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    // }\n\n    // function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n    //     uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n    //     callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    // }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n/**\n * @dev Optional functions from the ERC20 standard.\n */\nabstract contract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20Mintable}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    // function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n    //     _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n    //     return true;\n    // }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    // function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n    //     _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n    //     return true;\n    // }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        // _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        // _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        // _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    // function _burnFrom(address account, uint256 amount) internal virtual {\n    //     _burn(account, amount);\n    //     _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    // }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of `from`'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\n     */\n    // function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n// File: ../../../../tmp/openzeppelin-contracts/contracts/token/ERC20/ERC20Burnable.sol\n// pragma solidity ^0.6.0;\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\ncontract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev See {ERC20-_burnFrom}.\n     */\n    // function burnFrom(address account, uint256 amount) public virtual {\n    //     _burnFrom(account, amount);\n    // }\n}\n\ninterface IRouter {\n    function f(uint id, bytes32 k) external view returns (address);\n    function defaultDataContract(uint id) external view returns (address);\n    function bondNr() external view returns (uint);\n    function setBondNr(uint _bondNr) external;\n\n    function setDefaultContract(uint id, address data) external;\n    function addField(uint id, bytes32 field, address data) external;\n}\n\nenum BondStage {\n        //无意义状态\n        DefaultStage,\n        //评级\n        RiskRating,\n        RiskRatingFail,\n        //募资\n        CrowdFunding,\n        CrowdFundingSuccess,\n        CrowdFundingFail,\n        UnRepay,//待还款\n        RepaySuccess,\n        Overdue,\n        //由清算导致的债务结清\n        DebtClosed\n    }\n\n//状态标签\nenum IssuerStage {\n        DefaultStage,\n\t\tUnWithdrawCrowd,\n        WithdrawCrowdSuccess,\n\t\tUnWithdrawPawn,\n        WithdrawPawnSuccess       \n    }\n\ninterface IBondData {\n    struct what {\n        address proposal;\n        uint256 weight;\n    }\n\n    struct prwhat {\n        address who;\n        address proposal;\n        uint256 reason;\n    }\n\n    struct Balance {\n        //发行者：\n        //amountGive: 质押的token数量，项目方代币\n        //amountGet: 募集的token数量，USDT，USDC\n\n        //投资者：\n        //amountGive: 投资的token数量，USDT，USDC\n        //amountGet: 债券凭证数量\n        uint256 amountGive;\n        uint256 amountGet;\n    }\n\n    function issuer() external view returns (address);\n\n    function collateralToken() external view returns (address);\n\n    function crowdToken() external view returns (address);\n\n    function getBorrowAmountGive() external view returns (uint256);\n\n\n\n    function getSupplyAmount(address who) external view returns (uint256);\n\n\n    function par() external view returns (uint256);\n\n    function mintBond(address who, uint256 amount) external;\n\n    function burnBond(address who, uint256 amount) external;\n\n\n    function transferableAmount() external view returns (uint256);\n\n    function debt() external view returns (uint256);\n\n    function actualBondIssuance() external view returns (uint256);\n\n    function couponRate() external view returns (uint256);\n\n    function depositMultiple() external view returns (uint256);\n\n    function discount() external view returns (uint256);\n\n\n    function voteExpired() external view returns (uint256);\n\n\n    function investExpired() external view returns (uint256);\n\n    function totalBondIssuance() external view returns (uint256);\n\n    function maturity() external view returns (uint256);\n\n    function config() external view returns (address);\n\n    function weightOf(address who) external view returns (uint256);\n\n    function totalWeight() external view returns (uint256);\n\n    function bondExpired() external view returns (uint256);\n\n    function interestBearingPeriod() external;\n\n\n    function bondStage() external view returns (uint256);\n\n    function issuerStage() external view returns (uint256);\n\n    function issueFee() external view returns (uint256);\n\n\n    function totalInterest() external view returns (uint256);\n\n    function gracePeriod() external view returns (uint256);\n\n    function liability() external view returns (uint256);\n\n    function remainInvestAmount() external view returns (uint256);\n\n    function supplyMap(address) external view returns (Balance memory);\n\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function setPar(uint256) external;\n\n    function liquidateLine() external view returns (uint256);\n\n    function setBondParam(bytes32 k, uint256 v) external;\n\n    function setBondParamAddress(bytes32 k, address v) external;\n\n    function minIssueRatio() external view returns (uint256);\n\n    function partialLiquidateAmount() external view returns (uint256);\n\n    function votes(address who) external view returns (what memory);\n\n    function setVotes(address who, address proposal, uint256 amount) external;\n\n    function weights(address proposal) external view returns (uint256);\n\n    function setBondParamMapping(bytes32 name, address k, uint256 v) external;\n\n    function top() external view returns (address);\n\n\n    function voteLedger(address who) external view returns (uint256);\n\n    function totalWeights() external view returns (uint256);\n\n\n    function setPr(address who, address proposal, uint256 reason) external;\n\n    function pr() external view returns (prwhat memory);\n\n    function fee() external view returns (uint256);\n\n    function profits(address who) external view returns (uint256);\n\n\n\n    function totalProfits() external view returns (uint256);\n\n    function originLiability() external view returns (uint256);\n\n    function liquidating() external view returns (bool);\n    function setLiquidating(bool _liquidating) external;\n\n    function sysProfit() external view returns (uint256);\n    function totalFee() external view returns (uint256);\n\n    function supportRedeem() external view returns (bool);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20Detailed {\n    function decimals() external view returns (uint8);\n    function symbol() external view returns (string memory);\n}\n\ninterface IOracle {\n    function get(address t) external view returns (uint, bool);\n}\n\ncontract CoreUtils {\n    using SafeMath for uint256;\n\n    address public router;\n    address public oracle;\n\n    constructor (address _router, address _oracle) public {\n        router = _router;\n        oracle = _oracle;\n    }\n\n    function d(uint256 id) public view returns (address) {\n        return IRouter(router).defaultDataContract(id);\n    }\n\n    function bondData(uint256 id) public view returns (IBondData) {\n        return IBondData(d(id));\n    }\n\n    //principal + interest = principal * (1 + couponRate);\n    function calcPrincipalAndInterest(uint256 principal, uint256 couponRate)\n        public\n        pure\n        returns (uint256)\n    {\n        uint256 _1 = 1 ether;\n        return principal.mul(_1.add(couponRate)).div(_1);\n    }\n\n    //可转出金额,募集到的总资金减去给所有投票人的手续费\n    function transferableAmount(uint256 id) external view returns (uint256) {\n        IBondData b = bondData(id);\n        uint256 baseDec = 18;\n        uint256 delta = baseDec.sub(\n            uint256(ERC20Detailed(b.crowdToken()).decimals())\n        );\n        uint256 _1 = 1 ether;\n        //principal * (1-0.05) * 1e18/(10** (18 - 6))\n        return\n            b.actualBondIssuance().mul(b.par()).mul((_1).sub(b.issueFee())).div(\n                10**delta\n            );\n    }\n\n    //总的募集资金量\n    function debt(uint256 id) public view returns (uint256) {\n        IBondData b = bondData(id);\n        uint256 crowdDec = ERC20Detailed(b.crowdToken()).decimals();\n        return b.actualBondIssuance().mul(b.par()).mul(10**crowdDec);\n    }\n\n    //总的募集资金量\n    function totalInterest(uint256 id) external view returns (uint256) {\n        IBondData b = bondData(id);\n        uint256 crowdDec = ERC20Detailed(b.crowdToken()).decimals();\n        return\n            b\n                .actualBondIssuance()\n                .mul(b.par())\n                .mul(10**crowdDec)\n                .mul(b.couponRate())\n                .div(1e18);\n    }\n\n    function debtPlusTotalInterest(uint256 id) public view returns (uint256) {\n        IBondData b = bondData(id);\n        uint256 crowdDec = ERC20Detailed(b.crowdToken()).decimals();\n        uint256 _1 = 1 ether;\n        return\n            b\n                .actualBondIssuance()\n                .mul(b.par())\n                .mul(10**crowdDec)\n                .mul(_1.add(b.couponRate()))\n                .div(1e18);\n    }\n\n    function CollateralDecimal(uint256 id) public view returns (uint256) {\n        IBondData b = bondData(id);\n        if (b.collateralToken() == address(0)) return 18;//ETH\n        if (keccak256(abi.encodePacked(IERC20Detailed(b.collateralToken()).symbol())) == keccak256(abi.encodePacked(string(\"BAT\")))) return 18;\n        return ERC20Detailed(b.collateralToken()).decimals();\n    }\n\n    //可投资的剩余份数\n    function remainInvestAmount(uint256 id) external view returns (uint256) {\n        IBondData b = bondData(id);\n\n        uint256 crowdDec = ERC20Detailed(b.crowdToken()).decimals();\n        return\n            b.totalBondIssuance().div(10**crowdDec).div(b.par()).sub(\n                b.actualBondIssuance()\n            );\n    }\n\n        function calcMinCollateralTokenAmount(uint256 id)\n        external\n        view\n        returns (uint256)\n    {\n        IBondData b = bondData(id);\n        uint256 CollateralDec = CollateralDecimal(id);\n        uint256 crowdDec = ERC20Detailed(b.crowdToken()).decimals();\n\n        //fix safemath mul overflow bug when crowddec is 18, eg. DAI, BUSD\n        uint256 unit = 10 ** (crowdDec.add(18).sub(CollateralDec));\n\n\n        return\n            b\n                .totalBondIssuance()\n                .mul(b.depositMultiple())\n                .mul(crowdPrice(id))\n                .div(pawnPrice(id))\n                .div(unit);\n    }\n\n    function pawnBalanceInUsd(uint256 id) public view returns (uint256) {\n        IBondData b = bondData(id);\n\n        uint256 unitPawn = 10 **\n            uint256(CollateralDecimal(id));\n        uint256 pawnUsd = pawnPrice(id).mul(b.getBorrowAmountGive()).div(unitPawn); //1e18\n        return pawnUsd;\n    }\n\n    function disCountPawnBalanceInUsd(uint256 id)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _1 = 1 ether;\n        IBondData b = bondData(id);\n\n        return pawnBalanceInUsd(id).mul(b.discount()).div(_1);\n    }\n\n    function crowdBalanceInUsd(uint256 id) public view returns (uint256) {\n        IBondData b = bondData(id);\n\n        uint256 unitCrowd = 10 **\n            uint256(ERC20Detailed(b.crowdToken()).decimals());\n        return crowdPrice(id).mul(b.liability()).div(unitCrowd);\n    }\n\n    //资不抵债判断，资不抵债时，为true，否则为false\n    function isInsolvency(uint256 id) public view returns (bool) {\n        return disCountPawnBalanceInUsd(id) < crowdBalanceInUsd(id);\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a <= b ? a : b;\n    }\n\n    //获取质押的代币价格\n    function pawnPrice(uint256 id) public view returns (uint256) {\n        IBondData b = bondData(id);\n\n        (uint256 price, bool pawnPriceOk) = IOracle(oracle).get(b.collateralToken());\n        require(pawnPriceOk, \"invalid pawn price\");\n        return price;\n    }\n\n    //获取募资的代币价格\n    function crowdPrice(uint256 id) public view returns (uint256) {\n        IBondData b = bondData(id);\n\n        (uint256 price, bool crowdPriceOk) = IOracle(oracle).get(b.crowdToken());\n        require(crowdPriceOk, \"invalid crowd price\");\n        return price;\n    }\n\n    //要清算的质押物数量\n    //X = (AC*price - PCR*PD)/(price*(1-PCR*Discount))\n    //X = (PCR*PD - AC*price)/(price*(PCR*Discount-1))\n    function X(uint256 id) public view returns (uint256 res) {\n        IBondData b = bondData(id);\n\n        if (!isUnsafe(id)) {\n            return 0;\n        }\n\n        //若质押资产不能清偿债务,全额清算\n        if (isInsolvency(id)) {\n            return b.getBorrowAmountGive();\n        }\n\n        //逾期未还款\n        if (now >= b.bondExpired().add(b.gracePeriod())) {\n            return calcLiquidatePawnAmount(id);\n        }\n\n        uint256 _1 = 1 ether;\n        uint256 price = pawnPrice(id); //1e18\n        uint256 pawnUsd = pawnBalanceInUsd(id);\n        uint256 debtUsd = crowdBalanceInUsd(id).mul(b.depositMultiple()).div(_1);\n\n        uint256 gap = pawnUsd >= debtUsd\n            ? pawnUsd.sub(debtUsd)\n            : debtUsd.sub(pawnUsd);\n        uint256 pcrXdis = b.depositMultiple().mul(b.discount()).div(_1); //1e18\n        require(pcrXdis != _1, \"PCR*Discout == 1 error\");\n        pcrXdis = pawnUsd >= debtUsd ? _1.sub(pcrXdis) : pcrXdis.sub(_1);\n        uint256 denominator = price.mul(pcrXdis).div(_1); //1e18\n        uint256 unitPawn = 10 **\n            uint256(CollateralDecimal(id));\n        res = gap.mul(unitPawn).div(denominator); //1e18/1e18*1e18 == 1e18\n\n        res = min(res, b.getBorrowAmountGive());\n    }\n\n    //清算额，减少的债务\n    //X*price(collater)*Discount/price(crowd)\n    function Y(uint256 id) public view returns (uint256 res) {\n        IBondData b = bondData(id);\n\n        if (!isUnsafe(id)) {\n            return 0;\n        }\n\n        uint256 _1 = 1 ether;\n        uint256 unitPawn = 10 **\n            uint256(CollateralDecimal(id));\n        uint256 xp = X(id).mul(pawnPrice(id)).div(unitPawn);\n        xp = xp.mul(b.discount()).div(_1);\n\n        uint256 unitCrowd = 10 **\n            uint256(ERC20Detailed(b.crowdToken()).decimals());\n        res = xp.mul(unitCrowd).div(crowdPrice(id));\n\n        res = min(res, b.liability());\n    }\n\n    //到期后，由系统债务算出需要清算的抵押物数量\n    function calcLiquidatePawnAmount(uint256 id) public view returns (uint256) {\n        IBondData b = bondData(id);\n        return calcLiquidatePawnAmount(id, b.liability());\n    }\n    \n    //return ((a + m - 1) / m) * m;\n    function ceil(uint256 a, uint256 m) public pure returns (uint256) {\n        return (a.add(m).sub(1)).div(m).mul(m);\n    }\n    \n    function precision(uint256 id) public view returns (uint256) {\n        uint256 decPawn = uint256(CollateralDecimal(id));\n\n        uint256 minUsdValue = 1e15;\n        return minUsdValue.mul(10 ** decPawn).div(pawnPrice(id));\n    }\n    \n    function ceilPawn(uint256 id, uint256 a) public view returns (uint256) {\n        IBondData b = bondData(id);\n        \n        uint256 decCrowd = uint256(ERC20Detailed(b.crowdToken()).decimals());\n        uint256 decPawn = uint256(CollateralDecimal(id));\n        \n        if (decPawn != decCrowd) {\n            a = ceil(a, 10 ** abs(decPawn, decCrowd).sub(1));\n        } else {\n            a = ceil(a, 10);\n        }\n\n        return a;\n    }\n    \n    //到期后，由系统债务算出需要清算的抵押物数量\n    function calcLiquidatePawnAmount(uint256 id, uint256 liability) public view returns (uint256) {\n        IBondData b = bondData(id);\n\n        uint256 _crowdPrice = crowdPrice(id);\n        uint256 _pawnPrice = pawnPrice(id);\n\n        uint256 decPawn = uint256(CollateralDecimal(id));\n        uint256 decCrowd = uint256(ERC20Detailed(b.crowdToken()).decimals());\n\n        //fix safemath mul overflow bug when decCrowd is 18, eg. DAI, BUSD\n        uint256 unit = 10 ** (decPawn.add(18).sub(decCrowd));\n\n        uint256 x = liability\n            .mul(_crowdPrice)\n            .mul(unit)\n            .div(_pawnPrice.mul(b.discount()));\n\n        uint256 _x1 = liability.mul(_crowdPrice).mul(unit);\n        uint256 _x2 = _pawnPrice.mul(b.discount());\n        if (x.mul(_x2) != _x1) {\n            x = x.add(1);\n        }\n\n        \n        x = min(x, b.getBorrowAmountGive());\n\n\n        return x;\n    }\n\n    function investPrincipalWithInterest(uint256 id, address who)\n        external\n        view\n        returns (uint256)\n    {\n        require(d(id) != address(0), \"invalid address\");\n\n        IBondData bond = bondData(id);\n        address give = bond.crowdToken();\n\n        (uint256 supplyGive) = bond.getSupplyAmount(who);\n        uint256 bondAmount = convert2BondAmount(\n            address(bond),\n            give,\n            supplyGive\n        );\n\n        uint256 crowdDec = IERC20Detailed(bond.crowdToken()).decimals();\n\n        uint256 unrepayAmount = bond.liability(); //未还的债务\n        uint256 actualRepay;\n\n        if (unrepayAmount == 0) {\n            actualRepay = calcPrincipalAndInterest(\n                bondAmount.mul(1e18),\n                bond.couponRate()\n            );\n            actualRepay = actualRepay.mul(bond.par()).mul(10**crowdDec).div(\n                1e18\n            );\n        } else {\n            //计算投资占比分之一,投资人亏损情况，从已还款（总债务-未还债务）中按比例分\n            uint256 debtTotal = debtPlusTotalInterest(id);\n            require(\n                debtTotal >= unrepayAmount,\n                \"debtPlusTotalInterest < borrowGet, overflow\"\n            );\n            actualRepay = debtTotal\n                .sub(unrepayAmount)\n                .mul(bondAmount)\n                .div(bond.actualBondIssuance());\n        }\n\n        return actualRepay;\n    }\n\n    //bond:\n    function convert2BondAmount(address b, address t, uint256 amount)\n        public\n        view\n        returns (uint256)\n    {\n        IERC20Detailed erc20 = IERC20Detailed(t);\n        uint256 dec = uint256(erc20.decimals());\n        uint256 _par = IBondData(b).par();\n        uint256 minAmount = _par.mul(10**dec);\n        require(amount.mod(minAmount) == 0, \"invalid amount\"); //投资时，必须按份买\n\n        return amount.div(minAmount);\n    }\n\n    function abs(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a >= b ? a.sub(b) : b.sub(a);\n    }\n\n    //bond:\n    function convert2GiveAmount(uint256 id, uint256 bondAmount)\n        external\n        view\n        returns (uint256)\n    {\n        IBondData b = bondData(id);\n\n        ERC20Detailed erc20 = ERC20Detailed(b.crowdToken());\n        uint256 dec = uint256(erc20.decimals());\n        return bondAmount.mul(b.par()).mul(10**dec);\n    }\n\n    //判断是否回到原始质押率(400%),回到后，设置为false，否则为true\n    function isDepositMultipleUnsafe(uint256 id) external view returns (bool unsafe) {\n        IBondData b = bondData(id);\n\n        if (b.liability() == 0 || b.getBorrowAmountGive() == 0) {\n            return false;\n        }\n\n        if (b.bondStage() == uint(BondStage.CrowdFundingSuccess)\n            || b.bondStage() == uint(BondStage.UnRepay)\n            || b.bondStage() == uint(BondStage.Overdue)) {\n\n            if (now >= b.bondExpired().add(b.gracePeriod())) {\n                return true;\n            }\n\n            uint256 _1 = 1 ether;\n            uint256 crowdUsdxLeverage = crowdBalanceInUsd(id)\n                .mul(b.depositMultiple())\n                .div(1e36);\n\n            //CCR < 4\n            //pawnUsd/crowdUsd < 4\n            //unsafe = pawnBalanceInUsd(id) < crowdUsdxLeverage;\n            \n            uint256 _ceilPawn = ceil(pawnBalanceInUsd(id), 10);\n            \n            uint256 _crowdPrice = crowdPrice(id);\n            uint256 decCrowd = uint256(ERC20Detailed(b.crowdToken()).decimals());\n            uint256 minCrowdInUsd = _crowdPrice.div(10 ** decCrowd);\n            \n            unsafe = _ceilPawn < crowdUsdxLeverage;\n            if (abs(_ceilPawn, crowdUsdxLeverage) <= minCrowdInUsd && _ceilPawn < crowdUsdxLeverage) {\n                unsafe = false;\n            }\n            return unsafe;\n        }\n        \n        return false;\n    }\n\n    function isDebtOpen(uint256 id) public view returns (bool) {\n        IBondData b = bondData(id);\n        uint256 decCrowd = uint256(ERC20Detailed(b.crowdToken()).decimals());\n        uint256 _crowdPrice = crowdPrice(id);\n        //1e15 is 0.001$\n        return b.liability().mul(_crowdPrice).div(10 ** decCrowd) > 1e15 && b.getBorrowAmountGive() == 0;\n    }\n\n    //融资时是否满足最小发行比率，将core中的logic检查放到这里，减少core的字节码大小\n    function isMinIssuanceCheckOK(uint256 id) public view returns (bool ok) {\n        IBondData b = bondData(id);\n        return b.totalBondIssuance().mul(b.minIssueRatio()).div(1e18) <= debt(id);\n    }\n    \n    function isUnsafe(uint256 id) public view returns (bool unsafe) {\n        IBondData b = bondData(id);\n        uint256 decCrowd = uint256(ERC20Detailed(b.crowdToken()).decimals());\n        uint256 _crowdPrice = crowdPrice(id);\n        //1e15 is 0.001$\n        if (b.liability().mul(_crowdPrice).div(10 ** decCrowd) <= 1e15 || b.getBorrowAmountGive() == 0) {\n            return false;\n        }\n\n        if (b.liquidating()) {\n            return true;\n        }\n\n        if (b.bondStage() == uint(BondStage.CrowdFundingSuccess)\n            || b.bondStage() == uint(BondStage.UnRepay)\n            || b.bondStage() == uint(BondStage.Overdue)) {\n\n            if (now >= b.bondExpired().add(b.gracePeriod())) {\n                return true;\n            }\n\n            uint256 _1 = 1 ether;\n            uint256 crowdUsdxLeverage = crowdBalanceInUsd(id)\n                .mul(b.depositMultiple())\n                .mul(b.liquidateLine())\n                .div(1e36);\n\n            //CCR < 0.7 * 4\n            //pawnUsd/crowdUsd < 0.7*4\n            //unsafe = pawnBalanceInUsd(id) < crowdUsdxLeverage;\n            \n            uint256 _ceilPawn = ceilPawn(id, pawnBalanceInUsd(id));\n            \n\n\n            uint256 minCrowdInUsd = _crowdPrice.div(10 ** decCrowd);\n            \n            unsafe = _ceilPawn < crowdUsdxLeverage;\n            if (abs(_ceilPawn, crowdUsdxLeverage) <= minCrowdInUsd && _ceilPawn < crowdUsdxLeverage) {\n                unsafe = false;\n            }\n            return unsafe;\n        }\n        \n        return false;\n    }\n\n    //获取实际需要的清算数量\n    function getLiquidateAmount(uint id, uint y1) external view returns (uint256, uint256) {\n        uint256 y2 = y1;//y2为实际清算额度\n        uint256 y = Y(id);//y为剩余清算额度\n        require(y1 <= y, \"exceed max liquidate amount\");\n\n        //剩余额度小于一次清算量，将剩余额度全部清算\n        IBondData b = bondData(id);\n\n        uint decUnit = 10 ** uint(IERC20Detailed(b.crowdToken()).decimals());\n        if (y <= b.partialLiquidateAmount()) {\n            y2 = y;\n        } else {\n           require(y1 >= decUnit, \"below min liquidate amount\");//设置最小清算额度为1单位\n        }\n        uint256 x = calcLiquidatePawnAmount(id, y2);\n        return (y2, x);\n    }\n}"}}}