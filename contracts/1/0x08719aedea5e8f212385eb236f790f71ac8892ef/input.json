{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/2_Owner.sol":{"content":"pragma solidity ^0.7.0;    \npragma experimental ABIEncoderV2;\n\n\nabstract contract IDFSRegistry {\n \n    function getAddr(bytes32 _id) public view virtual returns (address);\n\n    function addNewContract(\n        bytes32 _id,\n        address _contractAddr,\n        uint256 _waitPeriod\n    ) public virtual;\n\n    function startContractChange(bytes32 _id, address _newContractAddr) public virtual;\n\n    function approveContractChange(bytes32 _id) public virtual;\n\n    function cancelContractChange(bytes32 _id) public virtual;\n\n    function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;\n}    \n\n\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256 supply);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) external returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    function decimals() external view returns (uint256 digits);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}    \n\n\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}    \n\n\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}    \n\n\n\n\n\n\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {ERC20-approve}, and its usage is discouraged.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\n            value,\n            \"SafeERC20: decreased allowance below zero\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n        );\n    }\n\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}    \n\n\n\ncontract AdminVault {\n    address public owner;\n    address public admin;\n\n    constructor() {\n        owner = msg.sender;\n        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\n    }\n\n    /// @notice Admin is able to change owner\n    /// @param _owner Address of new owner\n    function changeOwner(address _owner) public {\n        require(admin == msg.sender, \"msg.sender not admin\");\n        owner = _owner;\n    }\n\n    /// @notice Admin is able to set new admin\n    /// @param _admin Address of multisig that becomes new admin\n    function changeAdmin(address _admin) public {\n        require(admin == msg.sender, \"msg.sender not admin\");\n        admin = _admin;\n    }\n\n}    \n\n\n\n\n\n\n\n\n/// @title AdminAuth Handles owner/admin priviligies over smart contracts\ncontract AdminAuth {\n    using SafeERC20 for IERC20;\n\n    AdminVault public adminVault = AdminVault(0xCCf3d848e08b94478Ed8f46fFead3008faF581fD);\n\n    modifier onlyOwner() {\n        require(adminVault.owner() == msg.sender, \"msg.sender not owner\");\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(adminVault.admin() == msg.sender, \"msg.sender not admin\");\n        _;\n    }\n\n    /// @notice  withdraw stuck funds\n    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n            payable(_receiver).transfer(_amount);\n        } else {\n            IERC20(_token).safeTransfer(_receiver, _amount);\n        }\n    }\n\n    /// @notice Destroy the contract\n    function kill() public onlyAdmin {\n        selfdestruct(payable(msg.sender));\n    }\n\n    /// @notice Changes the admin vault that is currently used\n    /// @param _newAdminVault Address of the new Admin Vault contract\n    function changeAdminVault(address _newAdminVault) public onlyAdmin {\n        adminVault = AdminVault(_newAdminVault);\n    }\n}    \n\n\n\ncontract DefisaverLogger {\n    event LogEvent(\n        address indexed contractAddress,\n        address indexed caller,\n        string indexed logName,\n        bytes data\n    );\n\n    // solhint-disable-next-line func-name-mixedcase\n    function Log(\n        address _contract,\n        address _caller,\n        string memory _logName,\n        bytes memory _data\n    ) public {\n        emit LogEvent(_contract, _caller, _logName, _data);\n    }\n}    \n\n\n\n\n\n\n/// @title Stores all the important DFS addresses and can be changed (timelock)\ncontract DFSRegistry is AdminAuth {\n    DefisaverLogger public constant logger = DefisaverLogger(\n        0x5c55B921f590a89C1Ebe84dF170E655a82b62126\n    );\n\n    string public constant ERR_ENTRY_ALREADY_EXISTS = \"Entry id already exists\";\n    string public constant ERR_ENTRY_NON_EXISTENT = \"Entry id doesn't exists\";\n    string public constant ERR_ENTRY_NOT_IN_CHANGE = \"Entry not in change process\";\n    string public constant ERR_WAIT_PERIOD_SHORTER = \"New wait period must be bigger\";\n    string public constant ERR_CHANGE_NOT_READY = \"Change not ready yet\";\n    string public constant ERR_EMPTY_PREV_ADDR = \"Previous addr is 0\";\n    string public constant ERR_ALREADY_IN_CONTRACT_CHANGE = \"Already in contract change\";\n    string public constant ERR_ALREADY_IN_WAIT_PERIOD_CHANGE = \"Already in wait period change\";\n\n    struct Entry {\n        address contractAddr;\n        uint256 waitPeriod;\n        uint256 changeStartTime;\n        bool inContractChange;\n        bool inWaitPeriodChange;\n        bool exists;\n    }\n\n    mapping(bytes32 => Entry) public entries;\n    mapping(bytes32 => address) public previousAddresses;\n\n    mapping(bytes32 => address) public pendingAddresses;\n    mapping(bytes32 => uint256) public pendingWaitTimes;\n\n    /// @notice Given an contract id returns the registred address\n    /// @dev Id is keccak256 of the contract name\n    /// @param _id Id of contract\n    function getAddr(bytes32 _id) public view returns (address) {\n        return entries[_id].contractAddr;\n    }\n\n    /// @notice Helper function to easily query if id is registred\n    /// @param _id Id of contract\n    function isRegistered(bytes32 _id) public view returns (bool) {\n        return entries[_id].exists;\n    }\n\n    /////////////////////////// OWNER ONLY FUNCTIONS ///////////////////////////\n\n    /// @notice Adds a new contract to the registry\n    /// @param _id Id of contract\n    /// @param _contractAddr Address of the contract\n    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\n    function addNewContract(\n        bytes32 _id,\n        address _contractAddr,\n        uint256 _waitPeriod\n    ) public onlyOwner {\n        require(!entries[_id].exists, ERR_ENTRY_ALREADY_EXISTS);\n\n        entries[_id] = Entry({\n            contractAddr: _contractAddr,\n            waitPeriod: _waitPeriod,\n            changeStartTime: 0,\n            inContractChange: false,\n            inWaitPeriodChange: false,\n            exists: true\n        });\n\n        // Remember tha address so we can revert back to old addr if needed\n        previousAddresses[_id] = _contractAddr;\n\n        logger.Log(\n            address(this),\n            msg.sender,\n            \"AddNewContract\",\n            abi.encode(_id, _contractAddr, _waitPeriod)\n        );\n    }\n\n    /// @notice Revertes to the previous address immediately\n    /// @dev In case the new version has a fault, a quick way to fallback to the old contract\n    /// @param _id Id of contract\n    function revertToPreviousAddress(bytes32 _id) public onlyOwner {\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n        require(previousAddresses[_id] != address(0), ERR_EMPTY_PREV_ADDR);\n\n        address currentAddr = entries[_id].contractAddr;\n        entries[_id].contractAddr = previousAddresses[_id];\n\n        logger.Log(\n            address(this),\n            msg.sender,\n            \"RevertToPreviousAddress\",\n            abi.encode(_id, currentAddr, previousAddresses[_id])\n        );\n    }\n\n    /// @notice Starts an address change for an existing entry\n    /// @dev Can override a change that is currently in progress\n    /// @param _id Id of contract\n    /// @param _newContractAddr Address of the new contract\n    function startContractChange(bytes32 _id, address _newContractAddr) public onlyOwner {\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n        require(!entries[_id].inWaitPeriodChange, ERR_ALREADY_IN_WAIT_PERIOD_CHANGE);\n\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n        entries[_id].inContractChange = true;\n\n        pendingAddresses[_id] = _newContractAddr;\n\n        logger.Log(\n            address(this),\n            msg.sender,\n            \"StartContractChange\",\n            abi.encode(_id, entries[_id].contractAddr, _newContractAddr)\n        );\n    }\n\n    /// @notice Changes new contract address, correct time must have passed\n    /// @param _id Id of contract\n    function approveContractChange(bytes32 _id) public onlyOwner {\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n        require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);\n        require(\n            block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), // solhint-disable-line\n            ERR_CHANGE_NOT_READY\n        );\n\n        address oldContractAddr = entries[_id].contractAddr;\n        entries[_id].contractAddr = pendingAddresses[_id];\n        entries[_id].inContractChange = false;\n        entries[_id].changeStartTime = 0;\n\n        pendingAddresses[_id] = address(0);\n        previousAddresses[_id] = oldContractAddr;\n\n        logger.Log(\n            address(this),\n            msg.sender,\n            \"ApproveContractChange\",\n            abi.encode(_id, oldContractAddr, entries[_id].contractAddr)\n        );\n    }\n\n    /// @notice Cancel pending change\n    /// @param _id Id of contract\n    function cancelContractChange(bytes32 _id) public onlyOwner {\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n        require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);\n\n        address oldContractAddr = pendingAddresses[_id];\n\n        pendingAddresses[_id] = address(0);\n        entries[_id].inContractChange = false;\n        entries[_id].changeStartTime = 0;\n\n        logger.Log(\n            address(this),\n            msg.sender,\n            \"CancelContractChange\",\n            abi.encode(_id, oldContractAddr, entries[_id].contractAddr)\n        );\n    }\n\n    /// @notice Starts the change for waitPeriod\n    /// @param _id Id of contract\n    /// @param _newWaitPeriod New wait time\n    function startWaitPeriodChange(bytes32 _id, uint256 _newWaitPeriod) public onlyOwner {\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n        require(!entries[_id].inContractChange, ERR_ALREADY_IN_CONTRACT_CHANGE);\n\n        pendingWaitTimes[_id] = _newWaitPeriod;\n\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n        entries[_id].inWaitPeriodChange = true;\n\n        logger.Log(\n            address(this),\n            msg.sender,\n            \"StartWaitPeriodChange\",\n            abi.encode(_id, _newWaitPeriod)\n        );\n    }\n\n    /// @notice Changes new wait period, correct time must have passed\n    /// @param _id Id of contract\n    function approveWaitPeriodChange(bytes32 _id) public onlyOwner {\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n        require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);\n        require(\n            block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), // solhint-disable-line\n            ERR_CHANGE_NOT_READY\n        );\n\n        uint256 oldWaitTime = entries[_id].waitPeriod;\n        entries[_id].waitPeriod = pendingWaitTimes[_id];\n        \n        entries[_id].inWaitPeriodChange = false;\n        entries[_id].changeStartTime = 0;\n\n        pendingWaitTimes[_id] = 0;\n\n        logger.Log(\n            address(this),\n            msg.sender,\n            \"ApproveWaitPeriodChange\",\n            abi.encode(_id, oldWaitTime, entries[_id].waitPeriod)\n        );\n    }\n\n    /// @notice Cancel wait period change\n    /// @param _id Id of contract\n    function cancelWaitPeriodChange(bytes32 _id) public onlyOwner {\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n        require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);\n\n        uint256 oldWaitPeriod = pendingWaitTimes[_id];\n\n        pendingWaitTimes[_id] = 0;\n        entries[_id].inWaitPeriodChange = false;\n        entries[_id].changeStartTime = 0;\n\n        logger.Log(\n            address(this),\n            msg.sender,\n            \"CancelWaitPeriodChange\",\n            abi.encode(_id, oldWaitPeriod, entries[_id].waitPeriod)\n        );\n    }\n}    \n\n\n\n\n\n\n/// @title Implements Action interface and common helpers for pasing inputs\nabstract contract ActionBase {\n    address public constant REGISTRY_ADDR = 0xB0e1682D17A96E8551191c089673346dF7e1D467;\n    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\n\n    DefisaverLogger public constant logger = DefisaverLogger(\n        0x5c55B921f590a89C1Ebe84dF170E655a82b62126\n    );\n\n    string public constant ERR_SUB_INDEX_VALUE = \"Wrong sub index value\";\n    string public constant ERR_RETURN_INDEX_VALUE = \"Wrong return index value\";\n\n    /// @dev Subscription params index range [128, 255]\n    uint8 public constant SUB_MIN_INDEX_VALUE = 128;\n    uint8 public constant SUB_MAX_INDEX_VALUE = 255;\n\n    /// @dev Return params index range [1, 127]\n    uint8 public constant RETURN_MIN_INDEX_VALUE = 1;\n    uint8 public constant RETURN_MAX_INDEX_VALUE = 127;\n\n    /// @dev If the input value should not be replaced\n    uint8 public constant NO_PARAM_MAPPING = 0;\n\n    /// @dev We need to parse Flash loan actions in a different way\n    enum ActionType { FL_ACTION, STANDARD_ACTION, CUSTOM_ACTION }\n\n    /// @notice Parses inputs and runs the implemented action through a proxy\n    /// @dev Is called by the TaskExecutor chaining actions together\n    /// @param _callData Array of input values each value encoded as bytes\n    /// @param _subData Array of subscribed vales, replaces input values if specified\n    /// @param _paramMapping Array that specifies how return and subscribed values are mapped in input\n    /// @param _returnValues Returns values from actions before, which can be injected in inputs\n    /// @return Returns a bytes32 value through DSProxy, each actions implements what that value is\n    function executeAction(\n        bytes[] memory _callData,\n        bytes[] memory _subData,\n        uint8[] memory _paramMapping,\n        bytes32[] memory _returnValues\n    ) public payable virtual returns (bytes32);\n\n    /// @notice Parses inputs and runs the single implemented action through a proxy\n    /// @dev Used to save gas when executing a single action directly\n    function executeActionDirect(bytes[] memory _callData) public virtual payable;\n\n    /// @notice Returns the type of action we are implementing\n    function actionType() public pure virtual returns (uint8);\n\n\n    //////////////////////////// HELPER METHODS ////////////////////////////\n\n    /// @notice Given an uint256 input, injects return/sub values if specified\n    /// @param _param The original input value\n    /// @param _mapType Indicated the type of the input in paramMapping\n    /// @param _subData Array of subscription data we can repacle the input value with\n    /// @param _returnValues Array of subscription data we can repacle the input value with\n    function _parseParamUint(\n        uint _param,\n        uint8 _mapType,\n        bytes[] memory _subData,\n        bytes32[] memory _returnValues\n    ) internal pure returns (uint) {\n        if (isReplacable(_mapType)) {\n            if (isReturnInjection(_mapType)) {\n                _param = uint(_returnValues[getReturnIndex(_mapType)]);\n            } else {\n                _param = abi.decode(_subData[getSubIndex(_mapType)], (uint));\n            }\n        }\n\n        return _param;\n    }\n\n\n    /// @notice Given an addr input, injects return/sub values if specified\n    /// @param _param The original input value\n    /// @param _mapType Indicated the type of the input in paramMapping\n    /// @param _subData Array of subscription data we can repacle the input value with\n    /// @param _returnValues Array of subscription data we can repacle the input value with\n    function _parseParamAddr(\n        address _param,\n        uint8 _mapType,\n        bytes[] memory _subData,\n        bytes32[] memory _returnValues\n    ) internal pure returns (address) {\n        if (isReplacable(_mapType)) {\n            if (isReturnInjection(_mapType)) {\n                _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])));\n            } else {\n                _param = abi.decode(_subData[getSubIndex(_mapType)], (address));\n            }\n        }\n\n        return _param;\n    }\n\n    /// @notice Given an bytes32 input, injects return/sub values if specified\n    /// @param _param The original input value\n    /// @param _mapType Indicated the type of the input in paramMapping\n    /// @param _subData Array of subscription data we can repacle the input value with\n    /// @param _returnValues Array of subscription data we can repacle the input value with\n    function _parseParamABytes32(\n        bytes32 _param,\n        uint8 _mapType,\n        bytes[] memory _subData,\n        bytes32[] memory _returnValues\n    ) internal pure returns (bytes32) {\n        if (isReplacable(_mapType)) {\n            if (isReturnInjection(_mapType)) {\n                _param = (_returnValues[getReturnIndex(_mapType)]);\n            } else {\n                _param = abi.decode(_subData[getSubIndex(_mapType)], (bytes32));\n            }\n        }\n\n        return _param;\n    }\n\n    /// @notice Checks if the paramMapping value indicated that we need to inject values\n    /// @param _type Indicated the type of the input\n    function isReplacable(uint8 _type) internal pure returns (bool) {\n        return _type != NO_PARAM_MAPPING;\n    }\n\n    /// @notice Checks if the paramMapping value is in the return value range\n    /// @param _type Indicated the type of the input\n    function isReturnInjection(uint8 _type) internal pure returns (bool) {\n        return (_type >= RETURN_MIN_INDEX_VALUE) && (_type <= RETURN_MAX_INDEX_VALUE);\n    }\n\n    /// @notice Transforms the paramMapping value to the index in return array value\n    /// @param _type Indicated the type of the input\n    function getReturnIndex(uint8 _type) internal pure returns (uint8) {\n        require(isReturnInjection(_type), ERR_SUB_INDEX_VALUE);\n\n        return (_type - RETURN_MIN_INDEX_VALUE);\n    }\n\n    /// @notice Transforms the paramMapping value to the index in sub array value\n    /// @param _type Indicated the type of the input\n    function getSubIndex(uint8 _type) internal pure returns (uint8) {\n        require(_type >= SUB_MIN_INDEX_VALUE, ERR_RETURN_INDEX_VALUE);\n\n        return (_type - SUB_MIN_INDEX_VALUE);\n    }\n}    \n\n\n\nabstract contract IDSProxy {\n    // function execute(bytes memory _code, bytes memory _data)\n    //     public\n    //     payable\n    //     virtual\n    //     returns (address, bytes32);\n\n    function execute(address _target, bytes memory _data) public payable virtual returns (bytes32);\n\n    function setCache(address _cacheAddr) public payable virtual returns (bool);\n\n    function owner() public view virtual returns (address);\n}    \n\n\n  \n\n/// @title Struct Data in a separate contract soit can be used in multiple places\ncontract StrategyData {\n    struct Template {\n        string name;\n        bytes32[] triggerIds;\n        bytes32[] actionIds;\n        uint8[][] paramMapping;\n    }\n\n    struct Task {\n        string name;\n        bytes[][] callData;\n        bytes[][] subData;\n        bytes32[] actionIds;\n        uint8[][] paramMapping;\n    }\n\n    struct Strategy {\n        uint templateId;\n        address proxy;\n        bytes[][] subData;\n        bytes[][] triggerData;\n        bool active;\n\n        uint posInUserArr;\n    }\n}    \n\n\n  \n\n\n\n\n\n/// @title Storage of strategies and templates\ncontract Subscriptions is StrategyData {\n    DefisaverLogger public constant logger = DefisaverLogger(0x5c55B921f590a89C1Ebe84dF170E655a82b62126);\n\n    string public constant ERR_EMPTY_STRATEGY = \"Strategy does not exist\";\n    string public constant ERR_SENDER_NOT_OWNER = \"Sender is not strategy owner\";\n    string public constant ERR_USER_POS_EMPTY = \"No user positions\";\n\n    /// @dev The order of strategies might change as they are deleted\n    Strategy[] public strategies;\n\n    /// @dev Templates are fixed and are non removable\n    Template[] public templates;\n\n    /// @dev Keeps track of all the users strategies (their indexes in the array)\n    mapping (address => uint[]) public usersPos;\n\n    /// @dev Increments on state change, used for easier off chain tracking of changes\n    uint public updateCounter;\n\n    /// @notice Creates a new strategy with an existing template\n    /// @param _templateId Id of the template used for strategy\n    /// @param _active If the strategy is turned on at the start\n    /// @param _subData Subscription data for actions\n    /// @param _triggerData Subscription data for triggers\n    function createStrategy(\n        uint _templateId,\n        bool _active,\n        bytes[][] memory _subData,\n        bytes[][] memory _triggerData\n    ) public returns (uint) {\n        strategies.push(\n            Strategy({\n                templateId: _templateId,\n                proxy: msg.sender,\n                active: _active,\n                subData: _subData,\n                triggerData: _triggerData,\n                posInUserArr: (usersPos[msg.sender].length - 1)\n            })\n        );\n\n        usersPos[msg.sender].push(strategies.length - 1);\n\n        updateCounter++;\n\n        logger.Log(address(this), msg.sender, \"CreateStrategy\", abi.encode(strategies.length - 1));\n\n        return strategies.length - 1;\n    }\n\n    /// @notice Creates a new template to use in strategies\n    /// @dev Templates once created can't be changed\n    /// @param _name Name of template, used mainly for logging\n    /// @param _triggerIds Array of trigger ids which translate to trigger addresses\n    /// @param _actionIds Array of actions ids which translate to action addresses\n    /// @param _paramMapping Array that holds metadata of how inputs are mapped to sub/return data\n    function createTemplate(\n        string memory _name,\n        bytes32[] memory _triggerIds,\n        bytes32[] memory _actionIds,\n        uint8[][] memory _paramMapping\n    ) public returns (uint) {\n        \n        templates.push(\n            Template({\n                name: _name,\n                triggerIds: _triggerIds,\n                actionIds: _actionIds,\n                paramMapping: _paramMapping\n            })\n        );\n\n        updateCounter++;\n\n        logger.Log(address(this), msg.sender, \"CreateTemplate\", abi.encode(templates.length - 1));\n\n        return templates.length - 1;\n    }\n\n    /// @notice Updates the users strategy\n    /// @dev Only callable by proxy who created the strategy\n    /// @param _startegyId Id of the strategy to update\n    /// @param _templateId Id of the template used for strategy\n    /// @param _active If the strategy is turned on at the start\n    /// @param _subData Subscription data for actions\n    /// @param _triggerData Subscription data for triggers\n    function updateStrategy(\n        uint _startegyId,\n        uint _templateId,\n        bool _active,\n        bytes[][] memory _subData,\n        bytes[][] memory _triggerData\n    ) public {\n        Strategy storage s = strategies[_startegyId];\n\n        require(s.proxy != address(0), ERR_EMPTY_STRATEGY);\n        require(msg.sender == s.proxy, ERR_SENDER_NOT_OWNER);\n\n        s.templateId = _templateId;\n        s.active = _active;\n        s.subData = _subData;\n        s.triggerData = _triggerData;\n\n        updateCounter++;\n\n        logger.Log(address(this), msg.sender, \"UpdateStrategy\", abi.encode(_startegyId));\n    }\n\n    /// @notice Unsubscribe an existing strategy\n    /// @dev Only callable by proxy who created the strategy\n    /// @param _subId Subscription id\n    function removeStrategy(uint256 _subId) public {\n        Strategy memory s = strategies[_subId];\n        require(s.proxy != address(0), ERR_EMPTY_STRATEGY);\n        require(msg.sender == s.proxy, ERR_SENDER_NOT_OWNER);\n\n        uint lastSub = strategies.length - 1;\n\n        _removeUserPos(msg.sender, s.posInUserArr);\n\n        strategies[_subId] = strategies[lastSub]; // last strategy put in place of the deleted one\n        strategies.pop(); // delete last strategy, because it moved\n\n        logger.Log(address(this), msg.sender, \"Unsubscribe\", abi.encode(_subId));\n    }\n\n    function _removeUserPos(address _user, uint _index) internal {\n        require(usersPos[_user].length > 0, ERR_USER_POS_EMPTY);\n        uint lastPos = usersPos[_user].length - 1;\n\n        usersPos[_user][_index] = usersPos[_user][lastPos];\n        usersPos[_user].pop();\n    }\n\n    ///////////////////// VIEW ONLY FUNCTIONS ////////////////////////////\n\n    function getTemplateFromStrategy(uint _strategyId) public view returns (Template memory) {\n        uint templateId = strategies[_strategyId].templateId;\n        return templates[templateId];\n    }\n\n    function getStrategy(uint _strategyId) public view returns (Strategy memory) {\n        return strategies[_strategyId];\n    }\n\n    function getTemplate(uint _templateId) public view returns (Template memory) {\n        return templates[_templateId];\n    }\n\n    function getStrategyCount() public view returns (uint256) {\n        return strategies.length;\n    }\n\n    function getTemplateCount() public view returns (uint256) {\n        return templates.length;\n    }\n\n    function getStrategies() public view returns (Strategy[] memory) {\n        return strategies;\n    }\n\n    function getTemplates() public view returns (Template[] memory) {\n        return templates;\n    }\n\n    function userHasStrategies(address _user) public view returns (bool) {\n        return usersPos[_user].length > 0;\n    }\n\n    function getUserStrategies(address _user) public view returns (Strategy[] memory) {\n        Strategy[] memory userStrategies = new Strategy[](usersPos[_user].length);\n        \n        for (uint i = 0; i < usersPos[_user].length; ++i) {\n            userStrategies[i] = strategies[usersPos[_user][i]];\n        }\n\n        return userStrategies;\n    }\n\n    function getPaginatedStrategies(uint _page, uint _perPage) public view returns (Strategy[] memory) {\n        Strategy[] memory strategiesPerPage = new Strategy[](_perPage);\n\n        uint start = _page * _perPage;\n        uint end = start + _perPage;\n\n        end = (end > strategiesPerPage.length) ? strategiesPerPage.length : end;\n\n        uint count = 0;\n        for (uint i = start; i < end; i++) {\n            strategiesPerPage[count] = strategies[i];\n            count++;\n        }\n\n        return strategiesPerPage;\n    }\n\n    function getPaginatedTemplates(uint _page, uint _perPage) public view returns (Template[] memory) {\n        Template[] memory templatesPerPage = new Template[](_perPage);\n\n        uint start = _page * _perPage;\n        uint end = start + _perPage;\n\n        end = (end > templatesPerPage.length) ? templatesPerPage.length : end;\n\n        uint count = 0;\n        for (uint i = start; i < end; i++) {\n            templatesPerPage[count] = templates[i];\n            count++;\n        }\n\n        return templatesPerPage;\n    }\n}    \n\n\n\nabstract contract ILendingPool {\n    function flashLoan(\n        address payable _receiver,\n        address _reserve,\n        uint256 _amount,\n        bytes calldata _params\n    ) external virtual;\n\n    function deposit(\n        address _reserve,\n        uint256 _amount,\n        uint16 _referralCode\n    ) external payable virtual;\n\n    function setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral)\n        external\n        virtual;\n\n    function borrow(\n        address _reserve,\n        uint256 _amount,\n        uint256 _interestRateMode,\n        uint16 _referralCode\n    ) external virtual;\n\n    function repay(\n        address _reserve,\n        uint256 _amount,\n        address payable _onBehalfOf\n    ) external payable virtual;\n\n    function swapBorrowRateMode(address _reserve) external virtual;\n\n    function getReserves() external view virtual returns (address[] memory);\n\n    /// @param _reserve underlying token address\n    function getReserveData(address _reserve)\n        external\n        view\n        virtual\n        returns (\n            uint256 totalLiquidity, // reserve total liquidity\n            uint256 availableLiquidity, // reserve available liquidity for borrowing\n            uint256 totalBorrowsStable, // total amount of outstanding borrows at Stable rate\n            uint256 totalBorrowsVariable, // total amount of outstanding borrows at Variable rate\n            uint256 liquidityRate, // current deposit APY of the reserve for depositors, in Ray units.\n            uint256 variableBorrowRate, // current variable rate APY of the reserve pool, in Ray units.\n            uint256 stableBorrowRate, // current stable rate APY of the reserve pool, in Ray units.\n            uint256 averageStableBorrowRate, // current average stable borrow rate\n            uint256 utilizationRate, // expressed as total borrows/total liquidity.\n            uint256 liquidityIndex, // cumulative liquidity index\n            uint256 variableBorrowIndex, // cumulative variable borrow index\n            address aTokenAddress, // aTokens contract address for the specific _reserve\n            uint40 lastUpdateTimestamp // timestamp of the last update of reserve data\n        );\n\n    /// @param _user users address\n    function getUserAccountData(address _user)\n        external\n        view\n        virtual\n        returns (\n            uint256 totalLiquidityETH, // user aggregated deposits across all the reserves. In Wei\n            uint256 totalCollateralETH, // user aggregated collateral across all the reserves. In Wei\n            uint256 totalBorrowsETH, // user aggregated outstanding borrows across all the reserves. In Wei\n            uint256 totalFeesETH, // user aggregated current outstanding fees in ETH. In Wei\n            uint256 availableBorrowsETH, // user available amount to borrow in ETH\n            uint256 currentLiquidationThreshold, // user current average liquidation threshold across all the collaterals deposited\n            uint256 ltv, // user average Loan-to-Value between all the collaterals\n            uint256 healthFactor // user current Health Factor\n        );\n\n    /// @param _reserve underlying token address\n    /// @param _user users address\n    function getUserReserveData(address _reserve, address _user)\n        external\n        view\n        virtual\n        returns (\n            uint256 currentATokenBalance, // user current reserve aToken balance\n            uint256 currentBorrowBalance, // user current reserve outstanding borrow balance\n            uint256 principalBorrowBalance, // user balance of borrowed asset\n            uint256 borrowRateMode, // user borrow rate mode either Stable or Variable\n            uint256 borrowRate, // user current borrow rate APY\n            uint256 liquidityRate, // user current earn rate on _reserve\n            uint256 originationFee, // user outstanding loan origination fee\n            uint256 variableBorrowIndex, // user variable cumulative index\n            uint256 lastUpdateTimestamp, // Timestamp of the last data update\n            bool usageAsCollateralEnabled // Whether the user's current reserve is enabled as a collateral\n        );\n\n    function getReserveConfigurationData(address _reserve)\n        external\n        view\n        virtual\n        returns (\n            uint256 ltv,\n            uint256 liquidationThreshold,\n            uint256 liquidationBonus,\n            address rateStrategyAddress,\n            bool usageAsCollateralEnabled,\n            bool borrowingEnabled,\n            bool stableBorrowRateEnabled,\n            bool isActive\n        );\n\n    // ------------------ LendingPoolCoreData ------------------------\n    function getReserveATokenAddress(address _reserve) public view virtual returns (address);\n\n    function getReserveConfiguration(address _reserve)\n        external\n        view\n        virtual\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            bool\n        );\n\n    function getUserUnderlyingAssetBalance(address _reserve, address _user)\n        public\n        view\n        virtual\n        returns (uint256);\n\n    function getReserveCurrentLiquidityRate(address _reserve) public view virtual returns (uint256);\n\n    function getReserveCurrentVariableBorrowRate(address _reserve)\n        public\n        view\n        virtual\n        returns (uint256);\n\n    function getReserveTotalLiquidity(address _reserve) public view virtual returns (uint256);\n\n    function getReserveAvailableLiquidity(address _reserve) public view virtual returns (uint256);\n\n    function getReserveTotalBorrowsVariable(address _reserve) public view virtual returns (uint256);\n\n    // ---------------- LendingPoolDataProvider ---------------------\n    function calculateUserGlobalData(address _user)\n        public\n        view\n        virtual\n        returns (\n            uint256 totalLiquidityBalanceETH,\n            uint256 totalCollateralBalanceETH,\n            uint256 totalBorrowBalanceETH,\n            uint256 totalFeesETH,\n            uint256 currentLtv,\n            uint256 currentLiquidationThreshold,\n            uint256 healthFactor,\n            bool healthFactorBelowThreshold\n        );\n}    \n\n\n\nabstract contract ILendingPoolAddressesProvider {\n    function getLendingPool() public view virtual returns (address);\n\n    function setLendingPoolImpl(address _pool) public virtual;\n\n    function getLendingPoolCore() public view virtual returns (address payable);\n\n    function setLendingPoolCoreImpl(address _lendingPoolCore) public virtual;\n\n    function getLendingPoolConfigurator() public view virtual returns (address);\n\n    function setLendingPoolConfiguratorImpl(address _configurator) public virtual;\n\n    function getLendingPoolDataProvider() public view virtual returns (address);\n\n    function setLendingPoolDataProviderImpl(address _provider) public virtual;\n\n    function getLendingPoolParametersProvider() public view virtual returns (address);\n\n    function setLendingPoolParametersProviderImpl(address _parametersProvider) public virtual;\n\n    function getTokenDistributor() public view virtual returns (address);\n\n    function setTokenDistributor(address _tokenDistributor) public virtual;\n\n    function getFeeProvider() public view virtual returns (address);\n\n    function setFeeProviderImpl(address _feeProvider) public virtual;\n\n    function getLendingPoolLiquidationManager() public view virtual returns (address);\n\n    function setLendingPoolLiquidationManager(address _manager) public virtual;\n\n    function getLendingPoolManager() public view virtual returns (address);\n\n    function setLendingPoolManager(address _lendingPoolManager) public virtual;\n\n    function getPriceOracle() public view virtual returns (address);\n\n    function setPriceOracle(address _priceOracle) public virtual;\n\n    function getLendingRateOracle() public view virtual returns (address);\n\n    function setLendingRateOracle(address _lendingRateOracle) public virtual;\n}\n\nlibrary EthAddressLib {\n    function ethAddress() internal pure returns (address) {\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    }\n}    \n\n\n\n\n\nabstract contract IWETH {\n    function allowance(address, address) public virtual returns (uint256);\n\n    function balanceOf(address) public virtual returns (uint256);\n\n    function approve(address, uint256) public virtual;\n\n    function transfer(address, uint256) public virtual returns (bool);\n\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) public virtual returns (bool);\n\n    function deposit() public payable virtual;\n\n    function withdraw(uint256) public virtual;\n}    \n\n\n\n\n\n\ncontract TokenUtils {\n    using SafeERC20 for IERC20;\n\n    address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // mainnet\n\taddress public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    function approveToken(address _tokenAddr, address _to, uint _amount) internal {\n        if (_tokenAddr == ETH_ADDR) return;\n        \n        if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {\n            IERC20(_tokenAddr).safeApprove(_to, _amount);\n        }\n    }\n\n    function pullTokens(address _token, address _from, uint256 _amount) internal returns (uint) {\n\n        // handle max uint amount\n        if (_amount == uint(-1)) {\n            uint allowance = uint (-1);\n\n            if (_token == ETH_ADDR) {\n                allowance = IERC20(_token).allowance(address(this), _from);\n            }\n\n            uint balance = getBalance(_token, _from);\n\n            _amount = (balance > allowance) ? allowance : balance;\n        }\n\n        if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {\n            IERC20(_token).safeTransferFrom(_from, address(this), _amount);\n        }\n\n        return _amount;\n    }\n\n    function withdrawTokens(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal returns (uint) {\n        if (_amount == uint(-1)) {\n            _amount = getBalance(_token, address(this));\n        }\n\n        if (_to != address(0) && _to != address(this) && _amount != 0) {\n            if (_token != ETH_ADDR) {\n                IERC20(_token).safeTransfer(_to, _amount);\n            } else {\n                payable(_to).transfer(_amount);\n            }\n        }\n\n        return _amount;\n    }\n\n    function convertAndDepositToWeth(address _tokenAddr, uint _amount) internal returns (address) {\n        if (_tokenAddr == ETH_ADDR) {\n            IWETH(WETH_ADDR).deposit{value: _amount}();\n            return WETH_ADDR;\n        } else {\n            return _tokenAddr;\n        }\n    }\n\n    function withdrawWeth(uint _amount) internal {\n        IWETH(WETH_ADDR).withdraw(_amount);\n    }\n\n    function getBalance(address _tokenAddr, address _acc) internal view returns (uint) {\n        if (_tokenAddr == ETH_ADDR) {\n            return _acc.balance;\n        } else {\n            return IERC20(_tokenAddr).balanceOf(_acc);\n        }\n    }\n\n    function convertToWeth(address _tokenAddr) internal pure returns (address){\n        return _tokenAddr == ETH_ADDR ? WETH_ADDR : _tokenAddr;\n    }\n\n    function convertToEth(address _tokenAddr) internal pure returns (address){\n        return _tokenAddr == WETH_ADDR ? ETH_ADDR : _tokenAddr;\n    }\n\n    function getTokenDecimals(address _token) internal view returns (uint256) {\n        if (_token == ETH_ADDR) return 18;\n\n        return IERC20(_token).decimals();\n    }\n}    \n\n\n  \n\n\n\n\n\n\n\n\n/// @title Action that gets and receives a FL from Aave V1\ncontract FLAave is ActionBase, StrategyData, TokenUtils {\n    using SafeERC20 for IERC20;\n\n    address\n        public constant AAVE_LENDING_POOL_ADDRESSES = 0x398eC7346DcD622eDc5ae82352F02bE94C62d119;\n\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    bytes4 public constant CALLBACK_SELECTOR = 0xd6741b9e;\n\n    ILendingPoolAddressesProvider public constant addressesProvider = ILendingPoolAddressesProvider(\n        0x24a42fD28C976A61Df5D00D0599C34c4f90748c8\n    );\n\n    bytes32 constant FL_AAVE_ID = keccak256(\"FLAave\");\n    bytes32 constant TASK_EXECUTOR_ID = keccak256(\"TaskExecutor\");\n\n    /// @inheritdoc ActionBase\n    function executeAction(\n        bytes[] memory _callData,\n        bytes[] memory _subData,\n        uint8[] memory _paramMapping,\n        bytes32[] memory _returnValues\n    ) public override payable returns (bytes32) {\n        uint256 amount = abi.decode(_callData[0], (uint256));\n        address token = abi.decode(_callData[1], (address));\n\n        amount = _parseParamUint(amount, _paramMapping[0], _subData, _returnValues);\n        token = _parseParamAddr(token, _paramMapping[1], _subData, _returnValues);\n\n        uint256 flAmount = _flAave(amount, token, _callData[2]);\n\n        return bytes32(flAmount);\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    function executeActionDirect(bytes[] memory _callData) public override payable {}\n\n    /// @inheritdoc ActionBase\n    function actionType() public override pure returns (uint8) {\n        return uint8(ActionType.FL_ACTION);\n    }\n\n    //////////////////////////// ACTION LOGIC ////////////////////////////\n\n    function _flAave(\n        uint256 _amount,\n        address _tokenAddr,\n        bytes memory _taskData\n    ) internal returns (uint256) {\n        address payable receiver = payable(registry.getAddr(FL_AAVE_ID));\n\n        ILendingPool(AAVE_LENDING_POOL_ADDRESSES).flashLoan(\n            receiver,\n            _tokenAddr,\n            _amount,\n            _taskData\n        );\n\n        logger.Log(address(this), msg.sender, \"FLAave\", abi.encode(_amount, _tokenAddr));\n\n        return _amount;\n    }\n\n    /// @notice Aave callback function that formats and calls back TaskExecutor\n    function executeOperation(\n        address _reserve,\n        uint256 _amount,\n        uint256 _fee,\n        bytes calldata _params\n    ) external {\n        (Task memory currTask, address proxy) = abi.decode(_params, (Task, address));\n\n        withdrawTokens(_reserve, proxy, _amount);\n\n        address payable taskExecutor = payable(registry.getAddr(TASK_EXECUTOR_ID));\n        // call Action execution\n        IDSProxy(proxy).execute{value: address(this).balance}(\n            taskExecutor,\n            abi.encodeWithSelector(CALLBACK_SELECTOR, currTask, bytes32(_amount + _fee))\n        );\n\n        // return FL\n        address payable aaveCore = addressesProvider.getLendingPoolCore();\n\n        withdrawTokens(_reserve, aaveCore, (_amount + _fee));\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n}"}}}