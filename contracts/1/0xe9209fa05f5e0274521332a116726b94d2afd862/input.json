{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/Attack.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface Victim {\r\n    enum Kind { RABBIT, FOX, HUNTER }\r\n    struct Traits { Kind kind; uint8 advantage; uint8[7] traits; }\r\n\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\r\n    function getTraits(uint256 _tokenId) external view returns (Traits memory);\r\n}\r\n\r\ncontract Attack {\r\n    address target;\r\n\r\n    constructor(address _target) {\r\n        target = _target;\r\n    }\r\n\r\n    function wickedFunctionName(address user, uint index, Victim.Kind kind) view public returns(bool) {\r\n        uint tokenId = Victim(target).tokenOfOwnerByIndex(user, index);\r\n        Victim.Traits memory traits = Victim(target).getTraits(tokenId);\r\n\r\n        return traits.kind == kind;\r\n    }\r\n}\r\n"}}}