{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/SatoshifyToken.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.5.4 <0.9.0;\n\n\nlibrary SafeMath {\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n}\n\ncontract SatoshifyToken {\n    \n    string public constant name = \"Satoshify\";\n\n    string public constant symbol = \"SFT\";\n\n    uint256 public constant decimals = 8;\n    \n    uint256 public constant totalSupply = 1000000000000000;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n    \n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    using SafeMath for uint256;\n\n    constructor() {\n        balanceOf[msg.sender] = totalSupply;\n    }\n\n    function transfer(address _to, uint256 _value) public returns(bool success) {\n        require(_value > 0);\n        require(balanceOf[msg.sender] >= _value);\n        \n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        \n        emit Transfer(msg.sender, _to, _value);\n        \n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\n        require(_value <= balanceOf[_from]);\n        require(_value <= allowance[_from][msg.sender]);\n\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns(bool success) {\n        allowance[msg.sender][_spender] = _value;\n        \n        emit Approval(msg.sender, _spender, _value);\n        \n        return true;\n    }\n\n}\n"}}}