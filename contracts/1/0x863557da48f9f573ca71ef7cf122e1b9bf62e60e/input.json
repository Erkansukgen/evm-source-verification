{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Context.sol": {
      "content": "pragma solidity >=0.6.6;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor ()  public { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"
    },
    "browser/DydxFlashloanBase.sol": {
      "content": "pragma solidity >=0.6.6;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./SafeMath.sol\";\r\n//import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n\r\nimport \"./ISoloMargin.sol\";\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract DydxFlashloanBase {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    // -- Internal Helper functions -- //\r\n\r\n    function _getMarketIdFromTokenAddress(address _solo, address token)\r\n        public\r\n        \r\n        returns (uint256)\r\n    {\r\n        ISoloMargin solo = ISoloMargin(_solo);\r\n\r\n        uint256 numMarkets = solo.getNumMarkets();\r\n//revert(\"dont take away view?\");\r\n        address curToken;\r\n        for (uint256 i = 0; i < numMarkets; i++) {\r\n            curToken = solo.getMarketTokenAddress(i);\r\n\r\n            if (curToken == token) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        revert(\"No marketId found for provided token\");\r\n    }\r\n\r\n    function _getRepaymentAmountInternal(uint256 amount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // Needs to be overcollateralize\r\n        // Needs to provide +2 wei to be safe\r\n        return amount.add(2);\r\n    }\r\n\r\n    function _getAccountInfo() internal view returns (Account.Info memory) {\r\n        return Account.Info({owner: address(this), number: 1});\r\n    }\r\n\r\n    function _getWithdrawAction(uint marketId, uint256 amount)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Withdraw,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: amount\r\n                }),\r\n                primaryMarketId: marketId,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: \"\"\r\n            });\r\n    }\r\n\r\n    function _getCallAction(bytes memory data)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Call,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: 0\r\n                }),\r\n                primaryMarketId: 0,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: data\r\n            });\r\n    }\r\n\r\n    function _getDepositAction(uint marketId, uint256 amount)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Deposit,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: true,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: amount\r\n                }),\r\n                primaryMarketId: marketId,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: \"\"\r\n            });\r\n    }\r\n}"
    },
    "browser/ISoloMargin.sol": {
      "content": "pragma solidity >=0.6.6;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\nlibrary Account {\r\n    enum Status {Normal, Liquid, Vapor}\r\n    struct Info {\r\n        address owner; // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n    struct Storage {\r\n        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\r\n        Status status;\r\n    }\r\n}\r\n\r\n\r\nlibrary Actions {\r\n    enum ActionType {\r\n        Deposit, // supply tokens\r\n        Withdraw, // borrow tokens\r\n        Transfer, // transfer balance between accounts\r\n        Buy, // buy an amount of some token (publicly)\r\n        Sell, // sell an amount of some token (publicly)\r\n        Trade, // trade tokens against another account\r\n        Liquidate, // liquidate an undercollateralized or expiring account\r\n        Vaporize, // use excess tokens to zero-out a completely negative account\r\n        Call // send arbitrary data to an address\r\n    }\r\n\r\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\r\n\r\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\r\n\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        Types.AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n\r\n    struct DepositArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address from;\r\n    }\r\n\r\n    struct WithdrawArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address to;\r\n    }\r\n\r\n    struct TransferArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info accountOne;\r\n        Account.Info accountTwo;\r\n        uint256 market;\r\n    }\r\n\r\n    struct BuyArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 makerMarket;\r\n        uint256 takerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct SellArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 takerMarket;\r\n        uint256 makerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct TradeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info takerAccount;\r\n        Account.Info makerAccount;\r\n        uint256 inputMarket;\r\n        uint256 outputMarket;\r\n        address autoTrader;\r\n        bytes tradeData;\r\n    }\r\n\r\n    struct LiquidateArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info liquidAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct VaporizeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info vaporAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct CallArgs {\r\n        Account.Info account;\r\n        address callee;\r\n        bytes data;\r\n    }\r\n}\r\n\r\n\r\nlibrary Decimal {\r\n    struct D256 {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nlibrary Interest {\r\n    struct Rate {\r\n        uint256 value;\r\n    }\r\n\r\n    struct Index {\r\n        uint96 borrow;\r\n        uint96 supply;\r\n        uint32 lastUpdate;\r\n    }\r\n}\r\n\r\n\r\nlibrary Monetary {\r\n    struct Price {\r\n        uint256 value;\r\n    }\r\n    struct Value {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nlibrary Storage {\r\n    // All information necessary for tracking a market\r\n    struct Market {\r\n        // Contract address of the associated ERC20 token\r\n        address token;\r\n        // Total aggregated supply and borrow amount of the entire market\r\n        Types.TotalPar totalPar;\r\n        // Interest index of the market\r\n        Interest.Index index;\r\n        // Contract address of the price oracle for this market\r\n        address priceOracle;\r\n        // Contract address of the interest setter for this market\r\n        address interestSetter;\r\n        // Multiplier on the marginRatio for this market\r\n        Decimal.D256 marginPremium;\r\n        // Multiplier on the liquidationSpread for this market\r\n        Decimal.D256 spreadPremium;\r\n        // Whether additional borrows are allowed for this market\r\n        bool isClosing;\r\n    }\r\n\r\n    // The global risk parameters that govern the health and security of the system\r\n    struct RiskParams {\r\n        // Required ratio of over-collateralization\r\n        Decimal.D256 marginRatio;\r\n        // Percentage penalty incurred by liquidated accounts\r\n        Decimal.D256 liquidationSpread;\r\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\r\n        Decimal.D256 earningsRate;\r\n        // The minimum absolute borrow value of an account\r\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\r\n        Monetary.Value minBorrowedValue;\r\n    }\r\n\r\n    // The maximum RiskParam values that can be set\r\n    struct RiskLimits {\r\n        uint64 marginRatioMax;\r\n        uint64 liquidationSpreadMax;\r\n        uint64 earningsRateMax;\r\n        uint64 marginPremiumMax;\r\n        uint64 spreadPremiumMax;\r\n        uint128 minBorrowedValueMax;\r\n    }\r\n\r\n    // The entire storage state of Solo\r\n    struct State {\r\n        // number of markets\r\n        uint256 numMarkets;\r\n        // marketId => Market\r\n        mapping(uint256 => Market) markets;\r\n        // owner => account number => Account\r\n        mapping(address => mapping(uint256 => Account.Storage)) accounts;\r\n        // Addresses that can control other users accounts\r\n        mapping(address => mapping(address => bool)) operators;\r\n        // Addresses that can control all users accounts\r\n        mapping(address => bool) globalOperators;\r\n        // mutable risk parameters of the system\r\n        RiskParams riskParams;\r\n        // immutable risk limits of the system\r\n        RiskLimits riskLimits;\r\n    }\r\n}\r\n\r\n\r\nlibrary Types {\r\n    enum AssetDenomination {\r\n        Wei, // the amount is denominated in wei\r\n        Par // the amount is denominated in par\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta, // the amount is given as a delta from the current value\r\n        Target // the amount is given as an exact number to end up at\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    struct TotalPar {\r\n        uint128 borrow;\r\n        uint128 supply;\r\n    }\r\n\r\n    struct Par {\r\n        bool sign; // true if positive\r\n        uint128 value;\r\n    }\r\n\r\n    struct Wei {\r\n        bool sign; // true if positive\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\ninterface ISoloMargin {\r\n    struct OperatorArg {\r\n        address operator;\r\n        bool trusted;\r\n    }\r\n\r\n    function ownerSetSpreadPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 calldata spreadPremium\r\n    ) external;\r\n\r\n    function getIsGlobalOperator(address operator) external view returns (bool);\r\n\r\n    function getMarketTokenAddress(uint256 marketId)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function ownerSetInterestSetter(uint256 marketId, address interestSetter)\r\n        external;\r\n\r\n    function getAccountValues(Account.Info calldata account)\r\n        external\r\n        view\r\n        returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketPriceOracle(uint256 marketId)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function getMarketInterestSetter(uint256 marketId)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function getMarketSpreadPremium(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Decimal.D256 memory);\r\n\r\n    function getNumMarkets() external returns (uint256);\r\n\r\n    function ownerWithdrawUnsupportedTokens(address token, address recipient)\r\n        external\r\n        returns (uint256);\r\n\r\n    function ownerSetMinBorrowedValue(Monetary.Value calldata minBorrowedValue)\r\n        external;\r\n\r\n    function ownerSetLiquidationSpread(Decimal.D256 calldata spread) external;\r\n\r\n    function ownerSetEarningsRate(Decimal.D256 calldata earningsRate) external;\r\n\r\n    function getIsLocalOperator(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function getAccountPar(Account.Info calldata account, uint256 marketId)\r\n        external\r\n        view\r\n        returns (Types.Par memory);\r\n\r\n    function ownerSetMarginPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 calldata marginPremium\r\n    ) external;\r\n\r\n    function getMarginRatio() external view returns (Decimal.D256 memory);\r\n\r\n    function getMarketCurrentIndex(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Interest.Index memory);\r\n\r\n    function getMarketIsClosing(uint256 marketId) external view returns (bool);\r\n\r\n    function getRiskParams() external view returns (Storage.RiskParams memory);\r\n\r\n    function getAccountBalances(Account.Info calldata account)\r\n        external\r\n        view\r\n        returns (address[] memory, Types.Par[] memory, Types.Wei[] memory);\r\n\r\n    function renounceOwnership() external;\r\n\r\n    function getMinBorrowedValue() external view returns (Monetary.Value memory);\r\n\r\n    function setOperators(OperatorArg[] calldata args) external;\r\n\r\n    function getMarketPrice(uint256 marketId) external view returns (address);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function isOwner() external view returns (bool);\r\n\r\n    function ownerWithdrawExcessTokens(uint256 marketId, address recipient)\r\n        external\r\n        returns (uint256);\r\n\r\n    function ownerAddMarket(\r\n        address token,\r\n        address priceOracle,\r\n        address interestSetter,\r\n        Decimal.D256 calldata marginPremium,\r\n        Decimal.D256 calldata spreadPremium\r\n    ) external;\r\n\r\n    function operate(\r\n        Account.Info[] calldata accounts,\r\n        Actions.ActionArgs[] calldata actions\r\n    ) external;\r\n\r\n    function getMarketWithInfo(uint256 marketId)\r\n        external\r\n        view\r\n        returns (\r\n            Storage.Market memory,\r\n            Interest.Index memory,\r\n            Monetary.Price memory,\r\n            Interest.Rate memory\r\n        );\r\n\r\n    function ownerSetMarginRatio(Decimal.D256 calldata ratio) external;\r\n\r\n    function getLiquidationSpread() external view returns (Decimal.D256 memory);\r\n\r\n    function getAccountWei(Account.Info calldata account, uint256 marketId)\r\n        external\r\n        view\r\n        returns (Types.Wei memory);\r\n\r\n    function getMarketTotalPar(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Types.TotalPar memory);\r\n\r\n    function getLiquidationSpreadForPair(\r\n        uint256 heldMarketId,\r\n        uint256 owedMarketId\r\n    ) external view returns (Decimal.D256 memory);\r\n\r\n    function getNumExcessTokens(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Types.Wei memory);\r\n\r\n    function getMarketCachedIndex(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Interest.Index memory);\r\n\r\n    function getAccountStatus(Account.Info calldata account)\r\n        external\r\n        view\r\n        returns (uint8);\r\n\r\n    function getEarningsRate() external view returns (Decimal.D256 memory);\r\n\r\n    function ownerSetPriceOracle(uint256 marketId, address priceOracle) external;\r\n\r\n    function getRiskLimits() external view returns (Storage.RiskLimits memory);\r\n\r\n    function getMarket(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Storage.Market memory);\r\n\r\n    function ownerSetIsClosing(uint256 marketId, bool isClosing) external;\r\n\r\n    function ownerSetGlobalOperator(address operator, bool approved) external;\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function getAdjustedAccountValues(Account.Info calldata account)\r\n        external\r\n        view\r\n        returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketMarginPremium(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Decimal.D256 memory);\r\n\r\n    function getMarketInterestRate(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Interest.Rate memory);\r\n}"
    },
    "browser/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n"
    },
    "browser/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.6;\r\nimport './IUniswapV2Router01.sol';\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n"
    },
    "browser/LivyatanAave3.sol": {
      "content": "pragma solidity =0.6.6;\r\npragma experimental ABIEncoderV2;\r\nimport \"./Ownable.sol\";\r\nimport \"./IUniswapV2Router02.sol\";\r\nimport \"./DydxFlashloanBase.sol\";\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n//Aave address retrieval interface\r\ninterface LendingPoolAddressesProvider {\r\n    function getLendingPoolCore() external view returns (address payable);\r\n    function getLendingPool() external view returns (address);\r\n}\r\n\r\n//Aave Interface\r\ninterface LendingPool {\r\n  function liquidationCall ( address _collateral, address _reserve, address _user, uint256 _purchaseAmount, bool _receiveAToken ) external payable;\r\n   function getUserAccountData(address _user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalLiquidityETH,\r\n            uint256 totalCollateralETH,\r\n            uint256 totalBorrowsETH,\r\n            uint256 totalFeesETH,\r\n            uint256 availableBorrowsETH,\r\n            uint256 currentLiquidationThreshold,\r\n            uint256 ltv,\r\n            uint256 healthFactor\r\n        );\r\n}\r\ninterface ICallee {\r\n\r\n\r\n    function callFunction(\r\n        address sender,\r\n        Account.Info calldata accountInfo,\r\n        bytes calldata data\r\n    )\r\n        external;\r\n}\r\n\r\ninterface gasToken{\r\n    function mint(uint256 value) external;\r\n    function free(uint256 value) external returns (bool success);\r\n}\r\ncontract LivyatanMain is ICallee, DydxFlashloanBase, Ownable {\r\n     gasToken gt = gasToken(0x0000000000b3F879cb30FE243b4Dfee438691c04);\r\n    address constant aaveEthAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address constant lendingPoolAddressProvider = 0x24a42fD28C976A61Df5D00D0599C34c4f90748c8;\r\n    IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    //THis variable may be able to be replaced by mcd.token\r\n    address loanCoin;\r\n    address collateral;\r\n    address user;\r\n    address reserve;\r\n    struct MyCustomData {\r\n    address token;\r\n    uint256 repayAmount;\r\n    }\r\n        address _solo = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\r\n        ISoloMargin solo = ISoloMargin(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);\r\n         LendingPoolAddressesProvider addressProvider = LendingPoolAddressesProvider(lendingPoolAddressProvider);\r\n\r\n\r\n        LendingPool lendingPool = LendingPool(addressProvider.getLendingPool());\r\n\r\n    constructor() public Ownable() {\r\n   }\r\n    fallback() external payable {\r\n\r\n    }\r\n   function _mint(uint256 amount) onlyOwner public {\r\n        gt.mint(amount);\r\n\r\n    }\r\n   function getTokenBal(address addr)public view returns (uint256){\r\n       if (addr == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE){\r\n           return address(this).balance;\r\n       }\r\n        IERC20 tok = IERC20(addr);\r\n        uint256 tokenBalance = tok.balanceOf(address(this));\r\n        return tokenBalance;\r\n    }\r\n    function myLiquidationFunction(\r\n        address _collateral,\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _purchaseAmount,\r\n        bool _receiveaToken\r\n    )\r\n        internal\r\n    {\r\n       \r\n\r\n        if (_reserve != aaveEthAddress) {\r\n        if (IERC20(_reserve).allowance(address(this), addressProvider.getLendingPoolCore()) == 0){\r\n        SafeERC20.safeApprove(IERC20(_reserve), addressProvider.getLendingPoolCore(), 10000000000000000000000000);\r\n        }\r\n\r\n        }\r\n\r\n        \r\n\r\n        // Assumes this contract already has `_purchaseAmount` of `_reserve`.\r\n        lendingPool.liquidationCall{value: _reserve == aaveEthAddress ? _purchaseAmount : 0}(_collateral, _reserve, _user, _purchaseAmount, _receiveaToken);\r\n    }\r\n\r\n    function convertEthToToken(uint256 amountOutMin, uint256 inputAmount, address addr) internal {\r\n        uint deadline = block.timestamp + 150;\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapRouter.WETH();\r\n        path[1] = addr;\r\n        uniswapRouter.swapExactETHForTokens{value: inputAmount }(amountOutMin, path, address(this), deadline);\r\n    }\r\n\r\n    function convertTokenToEth(uint256 amount, address addr) internal {\r\n        uint deadline = block.timestamp + 150;\r\n        IERC20 dai = IERC20(addr);\r\n        address[] memory path = new address[](2);\r\n        path[0] = addr;\r\n        path[1] = uniswapRouter.WETH();\r\n        if (dai.allowance(address(this), 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D) == 0){\r\n\r\n            SafeERC20.safeApprove(dai, address(uniswapRouter), 10000000000000000000000000);\r\n        }\r\n\r\n        uniswapRouter.swapExactTokensForETH(amount,0, path, address(this), deadline);\r\n\r\n  }\r\n\r\n\r\n\r\n    // This is the function that will be called postLoan\r\n    // i.e. Encode the logic to handle your flashloaned funds here\r\n    function callFunction(\r\n        address sender,\r\n        Account.Info memory account,\r\n        bytes memory data\r\n    ) public override {\r\n        MyCustomData memory mcd = abi.decode(data, (MyCustomData));\r\n\r\n        IERC20 receivedToken = IERC20(loanCoin);\r\n        uint256 amountToConvert = receivedToken.balanceOf(address(this));\r\n\r\n         // Convert the flash loaned Dai to Eth (the reserve)\r\n\r\n        if (reserve == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE){\r\n\r\n            convertTokenToEth(amountToConvert, loanCoin);\r\n            require(receivedToken.balanceOf(address(this)) == 0, \"you still have some of loan left\");\r\n            uint256 ourEthBalance = address(this).balance;\r\n            require(ourEthBalance > 0, \"no eth\");\r\n            myLiquidationFunction(collateral, 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, user, ourEthBalance, false);\r\n      }\r\n\r\n\r\n        // Our reserve is the liquidation token\r\n        else if (reserve == 0x6B175474E89094C44Da98b954EedeAC495271d0F){\r\n            myLiquidationFunction(collateral, 0x6B175474E89094C44Da98b954EedeAC495271d0F, user, amountToConvert, false);\r\n\r\n        if (collateral != 0x6B175474E89094C44Da98b954EedeAC495271d0F){\r\n            IERC20 reserveToken = IERC20(reserve);\r\n            require(reserveToken.balanceOf(address(this)) == 0, \"why do we still have reserve\");\r\n        }\r\n        }\r\n\r\n//We must be liquidating a different reserve, so we need to swap to eth then to the token we need\r\n        else {\r\n\r\n            convertTokenToEth(amountToConvert, loanCoin);\r\n            require(receivedToken.balanceOf(address(this)) == 0, \"you still have some of loan left\");\r\n            uint256 ourEthBalance = address(this).balance;\r\n            IERC20 reserveToken = IERC20(reserve);\r\n            require(ourEthBalance > 0, \"no eth\");\r\n\r\n            convertEthToToken(0, ourEthBalance, reserve);\r\n            require(address(this).balance == 0, \"why do we still have eth\");\r\n            require(reserveToken.balanceOf(address(this)) >0, \"why dont we have reserve\");\r\n            //require(true == false, \"we made it here\");\r\n            myLiquidationFunction(collateral, reserve, user, reserveToken.balanceOf(address(this)), false);\r\n\r\n            //This will fail if collateral is the same as reserve token\r\n            if (collateral != reserve){\r\n                require(reserveToken.balanceOf(address(this)) == 0, \"why do we still have reserve2\");\r\n            }\r\n            }\r\n\r\n            //Now we have hopefully made a profit, time  to convert back to loaned token\r\n\r\n            //Handle when collateral is eth\r\n            if (collateral == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE){\r\n                //require(address(this).balance > ourEthBalance, \"we lost eth\");\r\n                convertEthToToken(0, address(this).balance, loanCoin);\r\n\r\n            }\r\n            //handle when the collateral token is not what we flash loaned for\r\n            else if (loanCoin != collateral){\r\n                require(address(this).balance == 0, \"youstill have eth)\");\r\n                IERC20 collToken = IERC20(collateral);\r\n                //Routes orders through eth as middleman\r\n\r\n                convertTokenToEth(collToken.balanceOf(address(this)), collateral);\r\n\r\n                require(collToken.balanceOf(address(this)) == 0, \"you still have collateral left\");\r\n                convertEthToToken(0, address(this).balance, loanCoin);\r\n\r\n\r\n\r\n\r\n}\r\n//Final checks to make sure we can pay this back\r\n        require(address(this).balance == 0, \"you still have eth)\");\r\n        require(receivedToken.balanceOf(address(this)) > mcd.repayAmount , \"not enoughs funds to repay\");\r\n\r\n\r\n    }\r\n\r\n//this function is from dydx except for the last line where I added withdrawal\r\n    function initiateFlashLoan(address _token, uint256 _amount, address _user, address _collateral, address _reserve, uint256 firstGas, uint256 gasToUse)\r\n        public\r\n        onlyOwner\r\n    {\r\n       gt.free(firstGas);\r\n\r\n        (,,,,,,,uint256 health) = lendingPool.getUserAccountData(_user);\r\n\r\n         require(health < 1000000000000000000, 'a');\r\n        gt.free(gasToUse);\r\n      loanCoin = _token;\r\n        user = _user;\r\n        reserve = _reserve;\r\n        collateral =_collateral;\r\n\r\n\r\n        // Get marketId from token address\r\n        uint256 marketId = _getMarketIdFromTokenAddress(_solo, _token);\r\n\r\n        // Calculate repay amount (_amount + (2 wei))\r\n        // Approve transfer from\r\n        uint256 repayAmount = _getRepaymentAmountInternal(_amount);\r\n        if (IERC20(_token).allowance(address(this), _solo) == 0){\r\n\r\n                SafeERC20.safeApprove(IERC20(_token), _solo, 10000000000000000000000000);\r\n        }\r\n\r\n\r\n        // 1. Withdraw $\r\n        // 2. Call callFunction(...)\r\n        // 3. Deposit back $\r\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\r\n\r\n        operations[0] = _getWithdrawAction(marketId, _amount);\r\n        operations[1] = _getCallAction(\r\n            // Encode MyCustomData for callFunction\r\n            abi.encode(MyCustomData({token: _token, repayAmount: repayAmount}))\r\n        );\r\n        operations[2] = _getDepositAction(marketId, repayAmount);\r\n\r\n        Account.Info[] memory accountInfos = new Account.Info[](1);\r\n        accountInfos[0] = _getAccountInfo();\r\n\r\n        solo.operate(accountInfos, operations);\r\n    // Commented out due to issues with msg.sender\r\n    // Will call this programatically right after execution\r\n    //withdraw(_token);\r\n    }\r\n\r\n    function withdraw(address token) public onlyOwner returns(bool) {\r\n\r\n    //for ether withdrawal from smart contract\r\n        if (address(token) == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n\r\n            uint256 rest = address(this).balance;\r\n            msg.sender.transfer(rest);\r\n\r\n        }\r\n        //for non ether withdrawal from smart contract. Note on dividing by zero: likely will error.\r\n        else {\r\n            IERC20 tokenToken = IERC20(token);\r\n            uint256 newTokenBalance = tokenToken.balanceOf(address(this));\r\n            require(tokenToken.transfer(msg.sender, (newTokenBalance)));\r\n            SafeERC20.safeTransfer(tokenToken, msg.sender, newTokenBalance);\r\n\r\n        }\r\n\r\n\r\n\r\n        return true;\r\n    }\r\n}\r\n"
    },
    "browser/Ownable.sol": {
      "content": "pragma solidity >=0.6.6;\r\n\r\nimport \"./Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () public {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"
    },
    "browser/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"
    }
  }
}