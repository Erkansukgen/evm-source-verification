{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Wolf/l1buy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.8.0;\n\ninterface IERC1155BurnMintable {\n  /**\n   * @dev Mint amount new tokens at ID `tokenId` (MINTER_ROLE required)\n   */\n  function mint(\n    address to,\n    uint256 tokenId,\n    uint256 amount,\n    bytes memory data\n  ) external;\n\n  /**\n   * @dev Mint new token amounts at IDs `tokenIds` (MINTER_ROLE required)\n   */\n  function mintBatch(\n    address to,\n    uint256[] memory tokenIds,\n    uint256[] memory amounts,\n    bytes memory data\n  ) external;\n\n  /**\n   * @dev Burn value amount of tokens with ID `tokenId`.\n   *\n   * Caller must be approvedForAll.\n   */\n  function burn(\n    address account,\n    uint256 tokenId,\n    uint256 value\n  ) external;\n\n  /**\n   * @dev Burn `values` amounts of tokens with IDs `tokenIds`.\n   *\n   * Caller must be approvedForAll.\n   */\n  function burnBatch(\n    address account,\n    uint256[] memory tokenIds,\n    uint256[] memory values\n  ) external;\n}\n\ninterface IWOWSERC1155 {\n  //////////////////////////////////////////////////////////////////////////////\n  // Getters\n  //////////////////////////////////////////////////////////////////////////////\n\n  /**\n   * @dev Check if the specified address is a known tradefloor\n   *\n   * @param account The address to check\n   *\n   * @return True if the address is a known tradefloor, false otherwise\n   */\n  function isTradeFloor(address account) external view returns (bool);\n\n  /**\n   * @dev Get the token ID of a given address\n   *\n   * A cross check is required because token ID 0 is valid.\n   *\n   * @param tokenAddress The address to convert to a token ID\n   *\n   * @return The token ID on success, or uint256(-1) if `tokenAddress` does not\n   * belong to a token ID\n   */\n  function addressToTokenId(address tokenAddress)\n    external\n    view\n    returns (uint256);\n\n  /**\n   * @dev Get the address for a given token ID\n   *\n   * @param tokenId The token ID to convert\n   *\n   * @return The address, or address(0) in case the token ID does not belong\n   * to an NFT\n   */\n  function tokenIdToAddress(uint256 tokenId) external view returns (address);\n\n  /**\n   * @dev Get the next mintable token ID for the specified card\n   *\n   * @param level The level of the card\n   * @param cardId The token ID of the card\n   *\n   * @return bool True if a free token ID was found, false otherwise\n   * @return uint256 The first free token ID if one was found, or invalid otherwise\n   */\n  function getNextMintableTokenId(uint8 level, uint8 cardId)\n    external\n    view\n    returns (bool, uint256);\n\n  /**\n   * @dev Return the next mintable custom token ID\n   */\n  function getNextMintableCustomToken() external view returns (uint256);\n\n  //////////////////////////////////////////////////////////////////////////////\n  // State modifiers\n  //////////////////////////////////////////////////////////////////////////////\n\n  /**\n   * @dev Set the URI for either predefined cards or custom cards\n   *\n   * For changing the default URI for predefined cards, token ID 0 must be\n   * passed. Custom token ID's (> 32-bit range) get their own URI per token ID.\n   *\n   * @param tokenId The token ID whose URI is being set. Use `tokenId` == 0 to\n   * set the default URI. `tokenId` >= 0xFFFFFFFF is for custom URIs.\n   * @param _uri The URI, also allowing for the ERC-1155 {id} mechanism.\n   */\n  function setURI(uint256 tokenId, string memory _uri) external;\n\n  /**\n   * @dev Set the URI which is returned for custom cards without specific URI\n   *\n   * @param _uri The URI, also allowing for the ERC-1155 {id} mechanism.\n   */\n  function setCustomDefaultURI(string memory _uri) external;\n\n  /**\n   * @dev Each custom card has its own level. Level will be used when\n   * calculating rewards and raiding power.\n   *\n   * @param tokenId The ID of the token whose level is being set\n   * @param cardLevel The new level of the specified token\n   */\n  function setCustomCardLevel(uint256 tokenId, uint8 cardLevel) external;\n}\n\n\ncontract l1buy {\n\nfunction mint(uint8 maxc)  public {\n  for (uint8 i = 0; i < 6; ++i) {\n      for(uint8 j = 0; j < 4; ++j) {\n        (bool success, uint256 tokenId) =\n          IWOWSERC1155(0x64B3342dB643f3Fb4da5781b6D09B44Ab4668dE4).getNextMintableTokenId(i, j);\n        if (success && (tokenId & 0xFFFF == 0))\n          IERC1155BurnMintable(0x64B3342dB643f3Fb4da5781b6D09B44Ab4668dE4).mint(0xC65e799100A42D97e5aD26ecB949fA880D8bc99d, tokenId, 1, '');\n        if (maxc > 0) --maxc; else return;\n      }\n    }\n}\n\n  function _destroyContract() public {\n    selfdestruct(payable(address(this))); // selfDestruct contract\n  }\n \n}"
    }
  }
}