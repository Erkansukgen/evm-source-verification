{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "localhost/contracts/ArbitrageMaster.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.6.6 <0.8.0;\r\n\r\nimport '../contracts/ExchangeTrader.sol';\r\nimport '../node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\n\r\n\r\n\r\ncontract ArbitrageMaster {\r\n    uint constant MAX_UINT = 2**256 - 1;\r\n    address public minter;\r\n\r\n    constructor() public\r\n    {\r\n        minter = msg.sender;\r\n    }\r\n\r\n    function transferEth(address payable toAddress, uint256 amount) public\r\n    {\r\n        require (msg.sender == minter, \"Admin required\");\r\n        toAddress.transfer(amount);\r\n    }\r\n\r\n    function transferToken(address payable toAddress, address tokenAddress, uint256 amount) public\r\n    {\r\n        require (msg.sender == minter, \"Admin required\");\r\n        IERC20 ERC20Instance = IERC20(tokenAddress);\r\n        ERC20Instance.transfer(toAddress, amount);\r\n    }\r\n\r\n    function checkAllowanceAndApproveToken(address tokenAddress, address exchangeAddress) internal\r\n    {\r\n        IERC20 ERC20Instance = IERC20(tokenAddress);\r\n        if (ERC20Instance.allowance(address(this), exchangeAddress) != MAX_UINT)\r\n        {\r\n            ERC20Instance.approve(exchangeAddress, MAX_UINT);\r\n        }\r\n    }\r\n\r\n    function executeTrade(uint blockNumber, uint256 exchangeInAddress, uint256 exchangeOutAddress,\r\n                          address tokenAddress, uint256 tokenAmountOutExpected, uint256 ethAmountOutExpected) public payable\r\n    {\r\n        require (blockNumber == block.number, \"Failure due to block number mismatch\");\r\n        require (msg.sender == minter, \"Admin required\");\r\n        IERC20 tokenInstance = IERC20(tokenAddress);\r\n\r\n        // Exchange eth to token\r\n        ExchangeTrader exchangeIn = ExchangeTrader(exchangeInAddress);\r\n        exchangeIn.makeTradeEthToToken(msg.value, tokenAddress, tokenAmountOutExpected, payable(address(this)));\r\n        uint256 tokenAmountReceived = tokenInstance.balanceOf(address(this));\r\n        require (tokenAmountReceived >= tokenAmountOutExpected, \"Token amount returned too low\");\r\n\r\n        // Exchange token to eth\r\n        ExchangeTrader exchangeOut = ExchangeTrader(exchangeOutAddress);\r\n\r\n        // Token to eth trade... must approve ERC20 to exchange out contract first\r\n        checkAllowanceAndApproveToken(tokenAddress, address(exchangeOut));\r\n        exchangeOut.makeTradeTokenToEth(tokenAmountReceived, tokenAddress, ethAmountOutExpected, payable(address(this)));\r\n        uint256 ethAmountOut = address(this).balance;\r\n        require (ethAmountOut >= ethAmountOutExpected, \"Eth amount returned too low\");\r\n\r\n        // Transfer eth back to sender\r\n        msg.sender.transfer(ethAmountOut);\r\n    }\r\n}"
    },
    "localhost/contracts/ExchangeTrader.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.6.6 <0.8.0;\r\n\r\ninterface ExchangeTrader\r\n{\r\n    function makeTradeEthToToken(uint256 amountEthIn, address tokenAddress, uint256 amountTokenOutMin,\r\n                                 address payable tokenDestinationAddress)\r\n                                 external returns (uint256);\r\n    function makeTradeTokenToEth(uint256 amountTokenIn, address tokenAddress, uint256 amountEthOutExpected,\r\n                                 address payable ethDestinationAddress)\r\n                                 external returns (uint256);\r\n}\r\n"
    },
    "localhost/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    }
  }
}