{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/erc20_airdrop.sol":{"content":"pragma solidity ^0.6.0;\n// SPDX-License-Identifier: UNLICENSED\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface InterfaceERC20 {\n    function totalSupply() external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Airdropper {\n    address public owner;\n    constructor()public{\n        owner = msg.sender;\n    }\n    \n    function AirTransfer(address[] memory _recipients, uint _values, address _tokenAddress) onlyOwner public returns (bool) {\n        require(_recipients.length > 0);\n        InterfaceERC20 token = InterfaceERC20(_tokenAddress);\n        for(uint j = 0; j < _recipients.length; j++){\n            token.transfer(_recipients[j], _values);\n        }\n        return true;\n    }\n    \n    function withdrawalToken(address _tokenAddress) onlyOwner public { \n        InterfaceERC20 token = InterfaceERC20(_tokenAddress);\n        token.transfer(owner, token.balanceOf(address(this)));\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n}\n"}}}