{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/SingleDebtFloorAdjuster.sol":{"content":"pragma solidity 0.6.7;\n\n\ncontract GebMath {\n    uint256 public constant RAY = 10 ** 27;\n    uint256 public constant WAD = 10 ** 18;\n\n    function ray(uint x) public pure returns (uint z) {\n        z = multiply(x, 10 ** 9);\n    }\n    function rad(uint x) public pure returns (uint z) {\n        z = multiply(x, 10 ** 27);\n    }\n    function minimum(uint x, uint y) public pure returns (uint z) {\n        z = (x <= y) ? x : y;\n    }\n    function addition(uint x, uint y) public pure returns (uint z) {\n        z = x + y;\n        require(z >= x, \"uint-uint-add-overflow\");\n    }\n    function subtract(uint x, uint y) public pure returns (uint z) {\n        z = x - y;\n        require(z <= x, \"uint-uint-sub-underflow\");\n    }\n    function multiply(uint x, uint y) public pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"uint-uint-mul-overflow\");\n    }\n    function rmultiply(uint x, uint y) public pure returns (uint z) {\n        z = multiply(x, y) / RAY;\n    }\n    function rdivide(uint x, uint y) public pure returns (uint z) {\n        z = multiply(x, RAY) / y;\n    }\n    function wdivide(uint x, uint y) public pure returns (uint z) {\n        z = multiply(x, WAD) / y;\n    }\n    function wmultiply(uint x, uint y) public pure returns (uint z) {\n        z = multiply(x, y) / WAD;\n    }\n    function rpower(uint x, uint n, uint base) public pure returns (uint z) {\n        assembly {\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\n            default {\n                switch mod(n, 2) case 0 { z := base } default { z := x }\n                let half := div(base, 2)  // for rounding.\n                for { n := div(n, 2) } n { n := div(n,2) } {\n                    let xx := mul(x, x)\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\n                    let xxRound := add(xx, half)\n                    if lt(xxRound, xx) { revert(0,0) }\n                    x := div(xxRound, base)\n                    if mod(n,2) {\n                        let zx := mul(z, x)\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n                        let zxRound := add(zx, half)\n                        if lt(zxRound, zx) { revert(0,0) }\n                        z := div(zxRound, base)\n                    }\n                }\n            }\n        }\n    }\n}\n\nabstract contract StabilityFeeTreasuryLike {\n    function getAllowance(address) virtual external view returns (uint, uint);\n    function systemCoin() virtual external view returns (address);\n    function pullFunds(address, address, uint) virtual external;\n}\n\ncontract IncreasingTreasuryReimbursement is GebMath {\n    // --- Auth ---\n    mapping (address => uint) public authorizedAccounts;\n    /**\n     * @notice Add auth to an account\n     * @param account Account to add auth to\n     */\n    function addAuthorization(address account) virtual external isAuthorized {\n        authorizedAccounts[account] = 1;\n        emit AddAuthorization(account);\n    }\n    /**\n     * @notice Remove auth from an account\n     * @param account Account to remove auth from\n     */\n    function removeAuthorization(address account) virtual external isAuthorized {\n        authorizedAccounts[account] = 0;\n        emit RemoveAuthorization(account);\n    }\n    /**\n    * @notice Checks whether msg.sender can call an authed function\n    **/\n    modifier isAuthorized {\n        require(authorizedAccounts[msg.sender] == 1, \"IncreasingTreasuryReimbursement/account-not-authorized\");\n        _;\n    }\n\n    // --- Variables ---\n    // Starting reward for the fee receiver/keeper\n    uint256 public baseUpdateCallerReward;          // [wad]\n    // Max possible reward for the fee receiver/keeper\n    uint256 public maxUpdateCallerReward;           // [wad]\n    // Max delay taken into consideration when calculating the adjusted reward\n    uint256 public maxRewardIncreaseDelay;          // [seconds]\n    // Rate applied to baseUpdateCallerReward every extra second passed beyond a certain point (e.g next time when a specific function needs to be called)\n    uint256 public perSecondCallerRewardIncrease;   // [ray]\n\n    // SF treasury\n    StabilityFeeTreasuryLike  public treasury;\n\n    // --- Events ---\n    event AddAuthorization(address account);\n    event RemoveAuthorization(address account);\n    event ModifyParameters(\n      bytes32 parameter,\n      address addr\n    );\n    event ModifyParameters(\n      bytes32 parameter,\n      uint256 val\n    );\n    event FailRewardCaller(bytes revertReason, address feeReceiver, uint256 amount);\n\n    constructor(\n      address treasury_,\n      uint256 baseUpdateCallerReward_,\n      uint256 maxUpdateCallerReward_,\n      uint256 perSecondCallerRewardIncrease_\n    ) public {\n        if (address(treasury_) != address(0)) {\n          require(StabilityFeeTreasuryLike(treasury_).systemCoin() != address(0), \"IncreasingTreasuryReimbursement/treasury-coin-not-set\");\n        }\n        require(maxUpdateCallerReward_ >= baseUpdateCallerReward_, \"IncreasingTreasuryReimbursement/invalid-max-caller-reward\");\n        require(perSecondCallerRewardIncrease_ >= RAY, \"IncreasingTreasuryReimbursement/invalid-per-second-reward-increase\");\n        authorizedAccounts[msg.sender] = 1;\n\n        treasury                        = StabilityFeeTreasuryLike(treasury_);\n        baseUpdateCallerReward          = baseUpdateCallerReward_;\n        maxUpdateCallerReward           = maxUpdateCallerReward_;\n        perSecondCallerRewardIncrease   = perSecondCallerRewardIncrease_;\n        maxRewardIncreaseDelay          = uint(-1);\n\n        emit AddAuthorization(msg.sender);\n        emit ModifyParameters(\"treasury\", treasury_);\n        emit ModifyParameters(\"baseUpdateCallerReward\", baseUpdateCallerReward);\n        emit ModifyParameters(\"maxUpdateCallerReward\", maxUpdateCallerReward);\n        emit ModifyParameters(\"perSecondCallerRewardIncrease\", perSecondCallerRewardIncrease);\n    }\n\n    // --- Boolean Logic ---\n    function either(bool x, bool y) internal pure returns (bool z) {\n        assembly{ z := or(x, y)}\n    }\n\n    // --- Treasury ---\n    /**\n    * @notice This returns the stability fee treasury allowance for this contract by taking the minimum between the per block and the total allowances\n    **/\n    function treasuryAllowance() public view returns (uint256) {\n        (uint total, uint perBlock) = treasury.getAllowance(address(this));\n        return minimum(total, perBlock);\n    }\n    /*\n    * @notice Get the SF reward that can be sent to a function caller right now\n    * @param timeOfLastUpdate The last time when the function that the treasury pays for has been updated\n    * @param defaultDelayBetweenCalls Enforced delay between calls to the function for which the treasury reimburses callers\n    */\n    function getCallerReward(uint256 timeOfLastUpdate, uint256 defaultDelayBetweenCalls) public view returns (uint256) {\n        // If the rewards are null or if the time of the last update is in the future or present, return 0\n        bool nullRewards = (baseUpdateCallerReward == 0 && maxUpdateCallerReward == 0);\n        if (either(timeOfLastUpdate >= now, nullRewards)) return 0;\n\n        // If the time elapsed is smaller than defaultDelayBetweenCalls or if the base reward is zero, return 0\n        uint256 timeElapsed = (timeOfLastUpdate == 0) ? defaultDelayBetweenCalls : subtract(now, timeOfLastUpdate);\n        if (either(timeElapsed < defaultDelayBetweenCalls, baseUpdateCallerReward == 0)) {\n            return 0;\n        }\n\n        // If too much time elapsed, return the max reward\n        uint256 adjustedTime      = subtract(timeElapsed, defaultDelayBetweenCalls);\n        uint256 maxPossibleReward = minimum(maxUpdateCallerReward, treasuryAllowance() / RAY);\n        if (adjustedTime > maxRewardIncreaseDelay) {\n            return maxPossibleReward;\n        }\n\n        // Calculate the reward\n        uint256 calculatedReward = baseUpdateCallerReward;\n        if (adjustedTime > 0) {\n            calculatedReward = rmultiply(rpower(perSecondCallerRewardIncrease, adjustedTime, RAY), calculatedReward);\n        }\n\n        // If the reward is higher than max, set it to max\n        if (calculatedReward > maxPossibleReward) {\n            calculatedReward = maxPossibleReward;\n        }\n        return calculatedReward;\n    }\n    /**\n    * @notice Send a stability fee reward to an address\n    * @param proposedFeeReceiver The SF receiver\n    * @param reward The system coin amount to send\n    **/\n    function rewardCaller(address proposedFeeReceiver, uint256 reward) internal {\n        // If the receiver is the treasury itself or if the treasury is null or if the reward is zero, return\n        if (address(treasury) == proposedFeeReceiver) return;\n        if (either(address(treasury) == address(0), reward == 0)) return;\n\n        // Determine the actual receiver and send funds\n        address finalFeeReceiver = (proposedFeeReceiver == address(0)) ? msg.sender : proposedFeeReceiver;\n        try treasury.pullFunds(finalFeeReceiver, treasury.systemCoin(), reward) {}\n        catch(bytes memory revertReason) {\n            emit FailRewardCaller(revertReason, finalFeeReceiver, reward);\n        }\n    }\n}\n\nabstract contract SAFEEngineLike {\n    function modifyParameters(\n        bytes32 collateralType,\n        bytes32 parameter,\n        uint256 data\n    ) virtual external;\n    function collateralTypes(bytes32) virtual public view returns (\n        uint256 debtAmount,        // [wad]\n        uint256 accumulatedRate,   // [ray]\n        uint256 safetyPrice,       // [ray]\n        uint256 debtCeiling        // [rad]\n    );\n}\nabstract contract OracleRelayerLike {\n    function redemptionPrice() virtual public returns (uint256);\n}\nabstract contract OracleLike {\n    function read() virtual external view returns (uint256);\n}\n\ncontract SingleDebtFloorAdjuster is IncreasingTreasuryReimbursement {\n    // --- Auth ---\n    // Mapping of addresses that are allowed to manually recompute the debt floor (without being rewarded for it)\n    mapping (address => uint256) public manualSetters;\n    /*\n    * @notify Add a new manual setter\n    * @param account The address of the new manual setter\n    */\n    function addManualSetter(address account) external isAuthorized {\n        manualSetters[account] = 1;\n        emit AddManualSetter(account);\n    }\n    /*\n    * @notify Remove a manual setter\n    * @param account The address of the manual setter to remove\n    */\n    function removeManualSetter(address account) external isAuthorized {\n        manualSetters[account] = 0;\n        emit RemoveManualSetter(account);\n    }\n    /*\n    * @notice Modifier for checking that the msg.sender is a whitelisted manual setter\n    */\n    modifier isManualSetter {\n        require(manualSetters[msg.sender] == 1, \"SingleDebtFloorAdjuster/not-manual-setter\");\n        _;\n    }\n\n    // --- Variables ---\n    // The collateral's name\n    bytes32 public collateralName;\n    // Gas amount needed to liquidate a Safe backed by the collateral type with the collateralName\n    uint256 public gasAmountForLiquidation;\n    // The max value for the debt floor\n    uint256 public maxDebtFloor;                    // [rad]\n    // The min amount of system coins that must be generated using this collateral type\n    uint256 public minDebtFloor;                    // [rad]\n    // When the debt floor was last updated\n    uint256 public lastUpdateTime;                  // [timestamp]\n    // Enforced gap between calls\n    uint256 public updateDelay;                     // [seconds]\n    // Last timestamp of a manual update\n    uint256 public lastManualUpdateTime;            // [seconds]\n\n    // The SAFEEngine contract\n    SAFEEngineLike    public safeEngine;\n    // The OracleRelayer contract\n    OracleRelayerLike public oracleRelayer;\n    // The gas price oracle\n    OracleLike        public gasPriceOracle;\n    // The ETH price oracle\n    OracleLike        public ethPriceOracle;\n\n    // --- Events ---\n    event AddManualSetter(address account);\n    event RemoveManualSetter(address account);\n    event UpdateFloor(uint256 nextDebtFloor);\n\n    constructor(\n      address safeEngine_,\n      address oracleRelayer_,\n      address treasury_,\n      address gasPriceOracle_,\n      address ethPriceOracle_,\n      bytes32 collateralName_,\n      uint256 baseUpdateCallerReward_,\n      uint256 maxUpdateCallerReward_,\n      uint256 perSecondCallerRewardIncrease_,\n      uint256 updateDelay_,\n      uint256 gasAmountForLiquidation_,\n      uint256 maxDebtFloor_,\n      uint256 minDebtFloor_\n    ) public IncreasingTreasuryReimbursement(treasury_, baseUpdateCallerReward_, maxUpdateCallerReward_, perSecondCallerRewardIncrease_) {\n        require(safeEngine_ != address(0), \"SingleDebtFloorAdjuster/invalid-safe-engine\");\n        require(oracleRelayer_ != address(0), \"SingleDebtFloorAdjuster/invalid-oracle-relayer\");\n        require(gasPriceOracle_ != address(0), \"SingleDebtFloorAdjuster/invalid-gas-price-oracle\");\n        require(ethPriceOracle_ != address(0), \"SingleDebtFloorAdjuster/invalid-eth-price-oracle\");\n        require(updateDelay_ > 0, \"SingleDebtFloorAdjuster/invalid-update-delay\");\n        require(both(gasAmountForLiquidation_ > 0, gasAmountForLiquidation_ < block.gaslimit), \"SingleDebtFloorAdjuster/invalid-liq-gas-amount\");\n        require(minDebtFloor_ > 0, \"SingleDebtFloorAdjuster/invalid-min-floor\");\n        require(both(maxDebtFloor_ > 0, maxDebtFloor_ > minDebtFloor_), \"SingleDebtFloorAdjuster/invalid-max-floor\");\n\n        manualSetters[msg.sender] = 1;\n\n        safeEngine              = SAFEEngineLike(safeEngine_);\n        oracleRelayer           = OracleRelayerLike(oracleRelayer_);\n        gasPriceOracle          = OracleLike(gasPriceOracle_);\n        ethPriceOracle          = OracleLike(ethPriceOracle_);\n        collateralName          = collateralName_;\n        gasAmountForLiquidation = gasAmountForLiquidation_;\n        updateDelay             = updateDelay_;\n        maxDebtFloor            = maxDebtFloor_;\n        minDebtFloor            = minDebtFloor_;\n        lastManualUpdateTime    = now;\n\n        oracleRelayer.redemptionPrice();\n\n        emit AddManualSetter(msg.sender);\n        emit ModifyParameters(\"oracleRelayer\", oracleRelayer_);\n        emit ModifyParameters(\"gasPriceOracle\", gasPriceOracle_);\n        emit ModifyParameters(\"ethPriceOracle\", ethPriceOracle_);\n        emit ModifyParameters(\"gasAmountForLiquidation\", gasAmountForLiquidation);\n        emit ModifyParameters(\"updateDelay\", updateDelay);\n        emit ModifyParameters(\"maxDebtFloor\", maxDebtFloor);\n        emit ModifyParameters(\"minDebtFloor\", minDebtFloor);\n    }\n\n    // --- Boolean Logic ---\n    function both(bool x, bool y) internal pure returns (bool z) {\n        assembly{ z := and(x, y)}\n    }\n\n    // --- Math ---\n    function divide(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y > 0, \"SingleDebtFloorAdjuster/div-y-null\");\n        z = x / y;\n        require(z <= x, \"SingleDebtFloorAdjuster/div-invalid\");\n    }\n\n    // --- Administration ---\n    /*\n    * @notify Update the address of a contract that this adjuster is connected to\n    * @param parameter The name of the contract to update the address for\n    * @param addr The new contract address\n    */\n    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\n        require(addr != address(0), \"SingleDebtFloorAdjuster/null-address\");\n        if (parameter == \"treasury\") {\n            treasury = StabilityFeeTreasuryLike(addr);\n        }\n        else if (parameter == \"oracleRelayer\") {\n            oracleRelayer = OracleRelayerLike(addr);\n            oracleRelayer.redemptionPrice();\n        }\n        else if (parameter == \"gasPriceOracle\") {\n            gasPriceOracle = OracleLike(addr);\n            gasPriceOracle.read();\n        }\n        else if (parameter == \"ethPriceOracle\") {\n            ethPriceOracle = OracleLike(addr);\n            ethPriceOracle.read();\n        }\n        else revert(\"SingleDebtFloorAdjuster/modify-unrecognized-params\");\n        emit ModifyParameters(parameter, addr);\n    }\n    /*\n    * @notify Modify an uint256 param\n    * @param parameter The name of the parameter to modify\n    * @param val The new parameter value\n    */\n    function modifyParameters(bytes32 parameter, uint256 val) external isAuthorized {\n        if (parameter == \"baseUpdateCallerReward\") {\n          require(val <= maxUpdateCallerReward, \"SingleDebtFloorAdjuster/invalid-base-caller-reward\");\n          baseUpdateCallerReward = val;\n        }\n        else if (parameter == \"maxUpdateCallerReward\") {\n          require(val >= baseUpdateCallerReward, \"SingleDebtFloorAdjuster/invalid-max-caller-reward\");\n          maxUpdateCallerReward = val;\n        }\n        else if (parameter == \"perSecondCallerRewardIncrease\") {\n          require(val >= RAY, \"SingleDebtFloorAdjuster/invalid-caller-reward-increase\");\n          perSecondCallerRewardIncrease = val;\n        }\n        else if (parameter == \"maxRewardIncreaseDelay\") {\n          require(val > 0, \"SingleDebtFloorAdjuster/invalid-max-increase-delay\");\n          maxRewardIncreaseDelay = val;\n        }\n        else if (parameter == \"updateDelay\") {\n          require(val >= 0, \"SingleDebtFloorAdjuster/invalid-call-gap-length\");\n          updateDelay = val;\n        }\n        else if (parameter == \"maxDebtFloor\") {\n          require(both(val > 0, val > minDebtFloor), \"SingleDebtFloorAdjuster/invalid-max-floor\");\n          maxDebtFloor = val;\n        }\n        else if (parameter == \"minDebtFloor\") {\n          require(both(val > 0, val < maxDebtFloor), \"SingleDebtFloorAdjuster/invalid-min-floor\");\n          minDebtFloor = val;\n        }\n        else if (parameter == \"lastUpdateTime\") {\n          require(val > now, \"SingleDebtFloorAdjuster/invalid-update-time\");\n          lastUpdateTime = val;\n        }\n        else if (parameter == \"gasAmountForLiquidation\") {\n          require(both(val > 0, val < block.gaslimit), \"SingleDebtFloorAdjuster/invalid-liq-gas-amount\");\n          gasAmountForLiquidation = val;\n        }\n        else revert(\"SingleDebtFloorAdjuster/modify-unrecognized-param\");\n        emit ModifyParameters(\n          parameter,\n          val\n        );\n    }\n\n    // --- Utils ---\n    /*\n    * @notify Internal function meant to modify the collateral's debt floor\n    * @param nextDebtFloor The new floor to set\n    */\n    function setFloor(uint256 nextDebtFloor) internal {\n        require(nextDebtFloor > 0, \"SingleDebtFloorAdjuster/null-debt-floor\");\n        safeEngine.modifyParameters(collateralName, \"debtFloor\", nextDebtFloor);\n        emit UpdateFloor(nextDebtFloor);\n    }\n\n    // --- Core Logic ---\n    /*\n    * @notify Automatically recompute and set a new debt floor for the collateral type with collateralName\n    * @param feeReceiver The address that will receive the reward for calling this function\n    */\n    function recomputeCollateralDebtFloor(address feeReceiver) external {\n        // Check that the update time is not in the future\n        require(lastUpdateTime < now, \"SingleDebtFloorAdjuster/update-time-in-the-future\");\n        // Check delay between calls\n        require(either(subtract(now, lastUpdateTime) >= updateDelay, lastUpdateTime == 0), \"SingleDebtFloorAdjuster/wait-more\");\n\n        // Get the caller's reward\n        uint256 callerReward = getCallerReward(lastUpdateTime, updateDelay);\n        // Update lastUpdateTime\n        lastUpdateTime = now;\n\n        // Get the next floor and set it\n        uint256 nextCollateralFloor = getNextCollateralFloor();\n        setFloor(nextCollateralFloor);\n\n        // Pay the caller for updating the floor\n        rewardCaller(feeReceiver, callerReward);\n    }\n    /*\n    * @notice Manually recompute and set a new debt floor for the collateral type with collateralName\n    */\n    function manualRecomputeCollateralDebtFloor() external isManualSetter {\n        require(now > lastManualUpdateTime, \"SingleDebtFloorAdjuster/cannot-update-twice-same-block\");\n        uint256 nextCollateralFloor = getNextCollateralFloor();\n        lastManualUpdateTime = now;\n        setFloor(nextCollateralFloor);\n    }\n\n    // --- Getters ---\n    /*\n    * @notify View function meant to return the new and upcoming debt floor. It checks for min/max bounds for newly computed floors\n    */\n    function getNextCollateralFloor() public returns (uint256) {\n        (, , , uint256 debtCeiling) = safeEngine.collateralTypes(collateralName);\n        uint256 lowestPossibleFloor  = minimum(debtCeiling, minDebtFloor);\n        uint256 highestPossibleFloor = minimum(debtCeiling, maxDebtFloor);\n\n        // Read the gas and the ETH prices\n        uint256 gasPrice = gasPriceOracle.read();\n        uint256 ethPrice = ethPriceOracle.read();\n\n        // Calculate the denominated value of the new debt floor\n        uint256 debtFloorValue = divide(multiply(multiply(gasPrice, gasAmountForLiquidation), ethPrice), WAD);\n\n        // Calculate the new debt floor in terms of system coins\n        uint256 redemptionPrice     = oracleRelayer.redemptionPrice();\n        uint256 systemCoinDebtFloor = multiply(divide(multiply(debtFloorValue, RAY), redemptionPrice), RAY);\n\n        // Check boundaries\n        if (systemCoinDebtFloor <= lowestPossibleFloor) return lowestPossibleFloor;\n        else if (systemCoinDebtFloor >= highestPossibleFloor) return highestPossibleFloor;\n\n        return systemCoinDebtFloor;\n    }\n}"}}}