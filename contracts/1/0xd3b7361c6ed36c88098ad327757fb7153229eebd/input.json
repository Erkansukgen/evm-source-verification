{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/BUSDC.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.7.6;\r\n\r\nlibrary SafeMath {\r\n  \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction underflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n   \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, errorMessage);\r\n\r\n        return c;\r\n    }\r\n  \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n    \r\n        return c;\r\n    }\r\n  \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address) external view returns (uint256);\r\n    function mint(address, uint256) external;\r\n    function burn(address, uint256) external;\r\n    function transfer(address, uint256) external returns (bool);\r\n    function approve(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract DADtoken is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private balances;\r\n    mapping (address => mapping (address => uint256)) private allowances;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    \r\n    address public ownerAddress;\r\n    address public poolAddress;\r\n\r\n    modifier onlyPool {\r\n        require(msg.sender == poolAddress, \"Can be called only by pool Contract\");   \r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == ownerAddress, \"Can be called only by owner\");   \r\n        _;\r\n    }\r\n\r\n    constructor(string memory _name, string memory _symbol, address _poolAddress, address _owner) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = 18;\r\n        ownerAddress = _owner;\r\n        poolAddress = _poolAddress;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return allowances[owner][spender];\r\n    }\r\n   \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        balances[sender] = balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        balances[recipient] = balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function mint(address account, uint256 amount) public override onlyPool() {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        totalSupply = totalSupply.add(amount);\r\n        balances[account] = balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function burn(address account, uint256 amount) public override onlyPool() {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n  \r\n        balances[account] = balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        totalSupply = totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function updatepoolAddress(address _poolAddress) public onlyOwner() {\r\n        require(_poolAddress != address(0), \"Pool address is zero address\");\r\n        poolAddress = _poolAddress;\r\n    }\r\n    function transferOwnership(address _newOwner) public onlyOwner() {\r\n        require(_newOwner != address(0), \"Owner address is zero address\");\r\n        ownerAddress = _newOwner;\r\n    }\r\n\r\n}\r\n\r\n"
    }
  }
}