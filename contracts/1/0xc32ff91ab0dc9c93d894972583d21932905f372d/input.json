{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "ETH.sol": {
      "content": "/**\r\n *Submitted for verification at Etherscan.io on 2020-11-27\r\n*/\r\n// ______________________________________________________________________\r\n// _____@@_____@@_______@_@______@@@@@@@@___@@@@@@@@_______@_______@_____\r\n// _____@@_____@@_____@____@_____@______@___@______@_________@___@_______\r\n// _____@@@@@@@@@_____@@@@@@_____@@@@@@@@___@@@@@@@@___________@_________\r\n// _____@@_____@@_____@____@_____@@_________@@_________________@_________\r\n// _____@@_____@@_____@____@_____@@_________@@_________________@_________\r\n// ______________________________________________________________________\r\n// _____BÄ°RTH___DAY___TO______YOUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU_____\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-11-27\r\n*/\r\npragma solidity ^0.4.23;\r\n\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\ninterface ethereum {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n   contract ETH{\r\n\r\n // Track how many tokens are owned by each address.\r\n    mapping (address => uint256) public balanceOf;\r\n    string public name = \"happybirthdaytoyou\";\r\n    string public symbol = \"hbd\";\r\n    uint8 public decimals = 18;\r\n\r\n    uint256 public totalSupply = 27112012 * (uint256(10) ** decimals);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function ETH() public {\r\n        // Initially assign all tokens to the contract's creator.\r\n        balanceOf[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= value);\r\n\r\n        balanceOf[msg.sender] -= value;  // deduct from sender's balance\r\n        balanceOf[to] += value;          // add to recipient's balance\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(value <= balanceOf[from]);\r\n        require(value <= allowance[from][msg.sender]);\r\n\r\n        balanceOf[from] -= value;\r\n        balanceOf[to] += value;\r\n        allowance[from][msg.sender] -= value;\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n}"
    }
  }
}