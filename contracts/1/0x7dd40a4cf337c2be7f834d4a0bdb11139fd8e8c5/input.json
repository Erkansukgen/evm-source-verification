{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/test.sol":{"content":"pragma solidity 0.6;\r\n\r\ncontract rolERC20  {\r\n  mapping(address => uint256) balances;\r\n\r\n  mapping(address => mapping(address => uint256)) allowed;\r\n\r\n  event Transfer(address _from, address _to, uint256 amount);\r\n\r\n  event Approval(address _from, address _to, uint256 amount);\r\n\r\n  string public name = \"Halo\";\r\n\r\n  uint8 public decimals = 18;\r\n\r\n  string public symbol = \"HLC\";\r\n\r\n  uint256 public totalSupply;\r\n\r\n  constructor () public\r\n  {\r\n    totalSupply = (4 * (10 ** 9)) * (10 ** uint256(decimals));\r\n    balances[msg.sender] = totalSupply;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool)\r\n  {\r\n    if ((balances[msg.sender] >= _value) && (_value > 0))\r\n    {\r\n      balances[msg.sender] = balances[msg.sender] - _value;\r\n      balances[_to] = balances[_to] + _value;\r\n      emit Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    }\r\n    else\r\n    {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool)\r\n  {\r\n    if (((balances[_from] >= _value) && (allowed[_from][msg.sender] >= _value)) && (_value > 0))\r\n    {\r\n      balances[_to] = balances[_to] + _value;\r\n      balances[_from] = balances[_from] - _value;\r\n      allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\r\n      emit Transfer(_from, _to, _value);\r\n      return true;\r\n    }\r\n    else\r\n    {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function balanceOf(address _owner) view public returns (uint256)\r\n  {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) view public returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}"}}}