{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "localhost/contracts/CompMinerV2.0.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"./compound/interfaces/ICToken.sol\";\nimport \"./compound/interfaces/IComptroller.sol\";\nimport \"./utils/SafeERC20.sol\";\nimport \"./XChangerUser.sol\";\nimport \"./access/Ownable.sol\";\n\nabstract contract FLReceiver {\n    enum FlashloanProvider {DYDX, AAVE}\n\n    function initiateFlashLoan(uint amount, uint flashLoanAmount, int8 _provider) virtual\n        external;\n}\n\ncontract CompMiner is Ownable, XChangerUser {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    enum OP {UNKNOWN, OPEN, CLOSE, PARTIALLYCLOSE}\n\n    OP private state;\n\n    enum FlashloanProvider {DYDX, AAVE}\n    FlashloanProvider public flashloanProvider; // Flashloan Aave or dYdX\n\n    mapping(FlashloanProvider => int8) public providers;\n\n    address private constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\n    address private constant COMPOUND_ORACLE = 0x1D8aEdc9E924730DD3f9641CDb4D1B92B848b4bd;\n    address private constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address private constant CDAI_ADDRESS = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\n    address private constant COMP_ADDRESS = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\n\n    //IERC20 private constant dai = IERC20(DAI_ADDRESS);\n    IERC20 private constant comp = IERC20(COMP_ADDRESS);\n    \n    address public constant enterToken = DAI_ADDRESS;\n    IERC20 private constant enterTokenIERC20 = IERC20(enterToken);\n    address private constant cTokenAddress = CDAI_ADDRESS;\n    ICToken private constant cToken = ICToken(cTokenAddress);\n    \n    uint public flRatio;\n    uint public minCompConvert;\n\n    bool private initialized;\n\n    event ratioUpdated(uint);\n    event COMPRatioUpdated(uint);\n    event compChanged(uint);\n    event compTooSmall(uint);\n    event NotDeposited();\n    event LogValueHolderUpdated(address Manager);\n\n    address public ValueHolder;\n    FLReceiver public flReceiver;\n    modifier onlyValueHolder() {\n        require(msg.sender == ValueHolder, \"Not Value Holder\");\n        _;\n    }\n\n    function setValueHolder(address _ValueHolder) external onlyOwner {\n        ValueHolder = _ValueHolder;\n        emit LogValueHolderUpdated(_ValueHolder);\n    }\n\n    function init(address _xChanger, address _flReceiver) external {\n        require(!initialized, \"Initialized\");\n        initialized = true;\n        _initVariables(_xChanger, _flReceiver);\n        Ownable.initialize(); // Do not forget this call!\n    }\n    \n    function _initVariables(address _xChanger, address _flReceiver) internal {\n        flRatio = 290;\n        minCompConvert = 3 * 1e17;\n        flashloanProvider = FlashloanProvider.AAVE;\n        xchanger = XChanger(_xChanger);\n        flReceiver = FLReceiver(_flReceiver);\n        providers[FlashloanProvider.DYDX] = 0;\n        providers[FlashloanProvider.AAVE] = 1;\n    }\n    \n    function reInit(address _xChanger, address _flReceiver) public onlyOwner {\n        _initVariables(_xChanger, _flReceiver);\n    }\n\n    function setFlashloanProvider(FlashloanProvider _flashloanProvider)\n        external\n        onlyOwner\n    {\n        flashloanProvider = _flashloanProvider;\n    }\n\n    //set new flashloan ratio (290/100)\n    function updateFlRatio(uint newValue) external onlyOwner {\n        flRatio = newValue;\n        emit ratioUpdated(newValue);\n    }\n\n    // set new usd comp value min available for conversion\n    function updateMinCompConvert(uint newValue) external onlyOwner {\n        minCompConvert = newValue;\n        emit COMPRatioUpdated(newValue);\n    }\n    \n    function setXChangerImpl(address _Xchanger) external onlyOwner {\n        xchanger = XChanger(_Xchanger);\n    }\n\n    function setFLReceiverImpl(address _flReceiver) external onlyOwner {\n        flReceiver = FLReceiver(_flReceiver);\n    }\n\n    function transferTokenTo(\n        address TokenAddress,\n        address recipient,\n        uint amount\n    ) external onlyValueHolder returns (uint) {\n        IERC20 Token = IERC20(TokenAddress);\n        uint balance = Token.balanceOf(address(this));\n        if (balance < amount) {\n            amount = balance;\n        }\n\n        Token.universalTransfer(recipient, amount);\n        return amount;\n    }\n\n    // main enter position function\n    function addPosition() external onlyValueHolder returns (uint amount) {\n        /*\n        uint _brpb = ICToken(CDAI_ADDRESS).borrowRatePerBlock();\n        uint _srpb = ICToken(CDAI_ADDRESS).supplyRatePerBlock();\n        \n        uint _mC = _fp.mul(_srpb).mul(_mrg).div(_brpb);\n        uint _lower = _fp.sub(_mC.div(_div));\n        uint _upper = amount.mul(_mC);\n        \n        uint flAmount = _upper.div(_lower).div(_div);\n        */\n\n        convertComp();\n\n        IERC20 _token = IERC20(enterToken);\n\n        amount = _token.balanceOf(address(this));\n        require(amount > 0, \"No available enterToken\");\n        \n        uint flAmount = (amount.mul(flRatio)).div(100);\n        openPositionFlashloan(amount, flAmount);\n    }\n\n    function exitPosition(uint amount) public onlyValueHolder {\n        if (amount == uint(-1)) {\n            //115792089237316195423570985008687907853269984665640564039457584007913129639935\n            //10000000000000000000000\n            closePositionFlashloan();\n        } else {\n            partiallyClosePositionFlashloan(amount);\n        }\n    }\n\n    function openPositionFlashloan(uint amount, uint flashLoanAmount)\n        internal\n        returns (bool)\n    {\n        // FLASHLOAN LOGIC\n        state = OP.OPEN;\n\n        flReceiver.initiateFlashLoan(amount, flashLoanAmount, providers[flashloanProvider]);\n\n        state = OP.UNKNOWN;\n        // END FLASHLOAN LOGIC\n\n        return true;\n    }\n\n    // main total close position function\n    function closePositionFlashloan() internal {\n        // FLASHLOAN LOGIC\n        uint flashLoanAmount = ICToken(cTokenAddress).borrowBalanceCurrent(\n            address(this)\n        );\n        state = OP.CLOSE;\n\n        flReceiver.initiateFlashLoan(uint(-1), flashLoanAmount, providers[flashloanProvider]);\n\n        state = OP.UNKNOWN;\n        // END FLASHLOAN LOGIC\n    }\n\n    function partiallyClosePositionFlashloan(uint amount) internal {\n        // FLASHLOAN LOGIC\n        uint flashLoanAmount = amount.mul(3);\n        state = OP.PARTIALLYCLOSE;\n\n        flReceiver.initiateFlashLoan(uint(-1), flashLoanAmount, providers[flashloanProvider]);\n\n        state = OP.UNKNOWN;\n        // END FLASHLOAN LOGIC\n    }\n\n\n    function universalFLcallback(uint flashloanAmount, uint totalDebt, uint depositAmount) external {\n        require(state != OP.UNKNOWN, 'dYdX Unknown state');\n\n        if (state == OP.OPEN) {\n            uint totalFunds = flashloanAmount + depositAmount;\n\n            deposit(\n                enterToken,\n                cTokenAddress,\n                totalFunds,\n                enterToken,\n                cTokenAddress,\n                totalDebt\n            );\n            convertComp();\n        } else if (state == OP.CLOSE) {\n            withdraw(\n                enterToken,\n                cTokenAddress,\n                uint(-1),\n                enterToken,\n                cTokenAddress,\n                uint(-1)\n            );\n            convertComp();\n        } else if (state == OP.PARTIALLYCLOSE) {\n            // flashloanData.amountFlashLoan.div(3) - user token requested\n            uint cDaiToExtract = flashloanAmount\n                .add(flashloanAmount.div(3))\n                .mul(1e18)\n                .div(cToken.exchangeRateCurrent());\n\n            withdraw(\n                enterToken,\n                cTokenAddress,\n                cDaiToExtract,\n                enterToken,\n                cTokenAddress,\n                flashloanAmount\n            );\n            convertComp();\n        }\n\n        IERC20(enterToken).universalTransfer(address(flReceiver), totalDebt);\n    }\n\n    // ** PRIVATE & INTERNAL functions **\n\n    // Example: _collToken = Eth, _borrowToken = USDC\n    function deposit(\n        address _collToken,\n        address _cCollToken,\n        uint _collAmount,\n        address _borrowToken,\n        address _cBorrowToken,\n        uint _borrowAmount\n    ) internal {\n        // add _cCollToken to market\n        enterMarketInternal(_cCollToken);\n\n        // mint _cCollToken\n        mintInternal(_collToken, _cCollToken, _collAmount);\n\n        // borrow and withdraw _borrowToken\n        if (_borrowToken != address(0)) {\n            borrowInternal(_cBorrowToken, _borrowAmount);\n        }\n    }\n\n    //claim comp, convert to DAI as needed\n    function claimValue() external {\n        IComptroller(COMPTROLLER).claimComp(address(this));\n        convertComp();\n    }\n\n    //convert if needed\n    function convertComp() public {\n        uint returnAmount;\n        uint balanceComp = comp.balanceOf(address(this));\n        if (balanceComp > minCompConvert) {\n            returnAmount = swap(\n                comp,\n                enterTokenIERC20,\n                balanceComp,\n                false\n            );\n            emit compChanged(returnAmount);\n        } else {\n            emit compTooSmall(returnAmount);\n        }\n    }\n\n    function getTokenStaked() public view returns (uint totalTokenStaked) {\n        uint256 borrowBalance = ICToken(cTokenAddress).borrowBalanceStored(\n            address(this)\n        );\n        uint256 supplyBalance = (\n            ICToken(cTokenAddress).balanceOf(address(this)).mul(\n                ICToken(cTokenAddress).exchangeRateStored()\n            )\n        ).div(1e18);\n        totalTokenStaked = supplyBalance.sub(borrowBalance);\n    }\n\n    function getConvertedValue(address denominateTo, uint amount)\n        public\n        view\n        returns (uint totalValue)\n    {\n        totalValue = quote(enterTokenIERC20, IERC20(denominateTo), amount);\n    }\n\n    function getPoolValue(address denominateTo) public view returns (uint totalValue) {\n        uint freeDAI = enterTokenIERC20.balanceOf(address(this));\n        uint totalDAI = freeDAI.add(getTokenStaked());\n        totalValue = getConvertedValue(denominateTo, totalDAI);\n\n        uint balanceComp = comp.balanceOf(address(this));\n        if (balanceComp > 0) {\n            (uint compQuote) = quote(\n                comp,\n                IERC20(denominateTo),\n                balanceComp\n            );\n            totalValue = totalValue.add(compQuote);\n        }\n    }\n    \n    // Example: _collToken = Eth, _borrowToken = USDC\n    function withdraw(\n        address _collToken,\n        address _cCollToken,\n        uint cAmountRedeem,\n        address _borrowToken,\n        address _cBorrowToken,\n        uint amountRepay\n    ) internal {\n        // repayBorrow _cBorrowToken\n        paybackInternal(_borrowToken, _cBorrowToken, amountRepay);\n\n        // redeem _cCollToken\n        redeemInternal(_collToken, _cCollToken, cAmountRedeem);\n    }\n\n    function enterMarket(address _cTokenAddr) internal {\n        address[] memory markets = new address[](1);\n        markets[0] = _cTokenAddr;\n\n        IComptroller(COMPTROLLER).enterMarkets(markets);\n    }\n\n    function borrow(address _cTokenAddr, uint _amount) internal {\n        require(ICToken(_cTokenAddr).borrow(_amount) == 0, 'borrow not 0');\n    }\n\n    function redeem(address _cTokenAddr, uint amount) internal {\n        if (amount == uint(-1))\n            amount = IERC20(_cTokenAddr).balanceOf(address(this));\n        // converts all _cTokenAddr into the underlying asset (_tokenAddr)\n        require(ICToken(_cTokenAddr).redeem(amount) == 0, 'redeem not 0');\n    }\n\n    function payback(\n        address _tokenAddr,\n        address _cTokenAddr,\n        uint amount\n    ) internal {\n        approveCTokenInternal(_tokenAddr, _cTokenAddr);\n\n        if (amount == uint(-1))\n            amount = ICToken(_cTokenAddr).borrowBalanceCurrent(address(this));\n\n        IERC20(_tokenAddr).safeTransferFrom(msg.sender, address(this), amount);\n        require(ICToken(_cTokenAddr).repayBorrow(amount) == 0, 'payback repay borrow not 0');\n    }\n\n    function mint(\n        address _tokenAddr,\n        address _cTokenAddr,\n        uint _amount\n    ) internal {\n        // approve _cTokenAddr to pull the _tokenAddr tokens\n        approveCTokenInternal(_tokenAddr, _cTokenAddr);\n\n        require(ICToken(_cTokenAddr).mint(_amount) == 0, 'mint not 0');\n    }\n\n    // **INTERNAL functions**\n    function approveCTokenInternal(address _tokenAddr, address _cTokenAddr)\n        internal\n    {\n        if (\n            IERC20(_tokenAddr).allowance(address(this), address(_cTokenAddr)) !=\n            uint(-1)\n        ) {\n            IERC20(_tokenAddr).universalApprove(_cTokenAddr, uint(-1));\n        }\n    }\n\n    function enterMarketInternal(address _cTokenAddr) internal {\n        address[] memory markets = new address[](1);\n        markets[0] = _cTokenAddr;\n\n        IComptroller(COMPTROLLER).enterMarkets(markets);\n    }\n\n    function mintInternal(\n        address _tokenAddr,\n        address _cTokenAddr,\n        uint _amount\n    ) internal {\n        // approve _cTokenAddr to pull the _tokenAddr tokens\n        approveCTokenInternal(_tokenAddr, _cTokenAddr);\n\n        require(ICToken(_cTokenAddr).mint(_amount) == 0, 'mint int not 0');\n    }\n\n    function borrowInternal(address _cTokenAddr, uint _amount) internal {\n        require(ICToken(_cTokenAddr).borrow(_amount) == 0, 'borrow int not 0');\n    }\n\n    function paybackInternal(\n        address _tokenAddr,\n        address _cTokenAddr,\n        uint amount\n    ) internal {\n        // approve _cTokenAddr to pull the _tokenAddr tokens\n\n        approveCTokenInternal(_tokenAddr, _cTokenAddr);\n        if (amount == uint(-1))\n            amount = ICToken(_cTokenAddr).borrowBalanceCurrent(address(this));\n\n        require(ICToken(_cTokenAddr).repayBorrow(amount) == 0, 'payback int repay borrow not 0');\n    }\n\n    function redeemInternal(\n        address _tokenAddr,\n        address _cTokenAddr,\n        uint amount\n    ) internal returns (uint) {\n        // converts all _cTokenAddr into the underlying asset (_tokenAddr)\n        if (amount == uint(-1))\n            amount = IERC20(_cTokenAddr).balanceOf(address(this));\n        require(ICToken(_cTokenAddr).redeem(amount) == 0, 'redeem int not 0');\n\n        // withdraw funds to msg.sender - not needed\n        //tokensSent = \n        return IERC20(_tokenAddr).balanceOf(address(this));\n    }\n}\n"
    },
    "localhost/contracts/XChangerUser.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"./utils/SafeERC20.sol\";\nimport \"./interfaces/IXChanger.sol\";\n\ncontract XChangerUser {\n    using UniversalERC20 for IERC20;\n    \n    XChanger public xchanger;// = XChanger(0x68b2151775d1A87d09Fa5D4263b8FEbACFFBAd95);\n\n    /*\n    function transferTokenBack(address TokenAddress)\n        external\n        returns (uint returnBalance)\n    {\n        IERC20 Token = IERC20(TokenAddress);\n        returnBalance = Token.universalBalanceOf(address(this));\n        if (returnBalance > 0) {\n            Token.universalTransfer(msg.sender, returnBalance);\n        }\n    }*/\n\n    function quote(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint amount\n    ) public view returns (uint returnAmount) {\n        if (fromToken == toToken) {\n            returnAmount = amount;\n        } else {\n            (bool success, bytes memory data) = address(xchanger).staticcall(abi.encodeWithSelector(\n                xchanger.quote.selector,\n                fromToken,\n                toToken,\n                amount\n            ));\n            \n            require (success && data.length > 0, 'XChanger quote not successful'); \n            \n            (returnAmount) = abi.decode(data, (uint));    \n        }\n    }\n    \n    function reverseQuote(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint returnAmount\n    ) public view returns (uint inputAmount) {\n        if (fromToken == toToken) {\n            inputAmount = returnAmount;\n        } else {\n            (bool success, bytes memory data) = address(xchanger).staticcall(abi.encodeWithSelector(\n                xchanger.reverseQuote.selector,\n                fromToken,\n                toToken,\n                returnAmount\n            ));\n            require (success && data.length > 0, 'XChanger reverseQuote not successful'); \n            \n            (inputAmount) = abi.decode(data, (uint));       \n            inputAmount += 1; // Curve requires this\n        }\n    }\n    \n    function swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint amount,\n        bool slipProtect\n    ) public payable returns (uint returnAmount) {\n        \n        if (fromToken.allowance(address(this), address(xchanger)) != uint(-1)) {\n            fromToken.universalApprove(address(xchanger), uint(-1));\n        }\n        \n        returnAmount = xchanger.swap(fromToken, toToken, amount, slipProtect);\n        \n        /*\n        (bool success, bytes memory data) = address(xchanger).delegatecall(abi.encodeWithSelector(\n                xchanger.swap.selector,\n                fromToken,\n                toToken,\n                amount,\n                slipProtect\n            ));\n            \n        require (success && data.length > 0, 'XChanger swap not successful'); \n        \n        (returnAmount) = abi.decode(data, (uint));    */\n    }\n}"
    },
    "localhost/contracts/access/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"
    },
    "localhost/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"../access/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function initialize() public {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"
    },
    "localhost/contracts/compound/interfaces/ICToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ninterface ICToken {\n    function borrowIndex() view external returns (uint256);\n\n    function mint(uint256 mintAmount) external returns (uint256);\n\n    function mint() external payable;\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function borrow(uint256 borrowAmount) external returns (uint256);\n\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\n\n    function repayBorrow() external payable;\n\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\n\n    function repayBorrowBehalf(address borrower) external payable;\n\n    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral)\n        external\n        returns (uint256);\n\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\n\n    function exchangeRateCurrent() external returns (uint256);\n\n    function supplyRatePerBlock() external returns (uint256);\n\n    function borrowRatePerBlock() external returns (uint256);\n\n    function totalReserves() external returns (uint256);\n\n    function reserveFactorMantissa() external returns (uint256);\n\n    function borrowBalanceCurrent(address account) external returns (uint256);\n\n    function borrowBalanceStored(address account) external view returns (uint256);\n\n    function totalBorrowsCurrent() external returns (uint256);\n\n    function getCash() external returns (uint256);\n\n    function balanceOfUnderlying(address owner) external returns (uint256);\n\n    function balanceOf(address owner) view external returns (uint256);\n\n    function underlying() external returns (address);\n\n    function exchangeRateStored() external view returns (uint);\n}\n"
    },
    "localhost/contracts/compound/interfaces/IComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ninterface IComptroller {\n    //mapping(address => uint) public compAccrued;\n\n    function claimComp(address holder) external;\n\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\n\n    function exitMarket(address cToken) external returns (uint256);\n\n    function getAssetsIn(address account) external view returns (address[] memory);\n\n    function getAccountLiquidity(address account) external view returns (uint256, uint256, uint256);\n\n    function markets(address cTokenAddress) external view returns (bool, uint);\n\n    struct CompMarketState {\n        uint224 index;\n        uint32 block;\n    }\n\n    function compSupplyState(address) view external returns(uint224, uint32);\n\n    function compBorrowState(address) view external returns(uint224, uint32);\n\n//    mapping(address => CompMarketState) external compBorrowState;\n\n    //mapping(address => mapping(address => uint)) public compSupplierIndex;\n\n    //mapping(address => mapping(address => uint)) public compBorrowerIndex;\n}\n"
    },
    "localhost/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"
    },
    "localhost/contracts/interfaces/IXChanger.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"../utils/SafeERC20.sol\";\n\ninterface XChanger {\n    function swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        bool slipProtect\n    ) external payable returns (uint result);\n    \n    function quote(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount\n    ) external view returns (uint returnAmount);\n    \n    function reverseQuote(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 returnAmount\n    ) external view returns (uint inputAmount);\n}"
    },
    "localhost/contracts/utils/SafeERC20.sol": {
      "content": "\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\nimport \"../interfaces/IERC20.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\n\n\npragma solidity ^0.6.0;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\nlibrary UniversalERC20 {\n\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    function universalTransfer(IERC20 token, address to, uint256 amount) internal {\n        if (token == IERC20(0)) {\n            address(uint160(to)).transfer(amount);\n        } else {\n            token.safeTransfer(to, amount);\n        }\n    }\n\n    function universalApprove(IERC20 token, address to, uint256 amount) internal {\n        if (token != IERC20(0)) {\n            token.safeApprove(to, amount);\n        }\n    }\n\n    function universalTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\n        if (token == IERC20(0)) {\n            require(from == msg.sender && msg.value >= amount, \"msg.value is zero\");\n            if (to != address(this)) {\n                address(uint160(to)).transfer(amount);\n            }\n            if (msg.value > amount) {\n                msg.sender.transfer(msg.value.sub(amount));\n            }\n        } else {\n            token.safeTransferFrom(from, to, amount);\n        }\n    }\n\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\n        if (token == IERC20(0)) {\n            return who.balance;\n        } else {\n            return token.balanceOf(who);\n        }\n    }\n}"
    }
  }
}