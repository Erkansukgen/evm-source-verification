{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "NARToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\nlibrary SafeMath {\r\n  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    if (x == 0) {\r\n      return 0;\r\n    }\r\n    z = x * y;\r\n    assert(z / x == y);\r\n    return z;\r\n  }\r\n  function div(uint256 x, uint256 y) internal pure returns (uint256) {\r\n    return x / y;\r\n  }\r\n  function sub(uint256 x, uint256 y) internal pure returns (uint256) {\r\n    assert(y <= x);\r\n    return x - y;\r\n  }\r\n  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    z = x + y;\r\n    assert(z >= x);\r\n    return z;\r\n  }\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract Ownable {\r\n    address private _owner;\r\n    constructor() public {\r\n        setOwner(msg.sender);\r\n    }\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n    function setOwner(address newOwner) internal {\r\n        _owner = newOwner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"You are not the owner\");\r\n        _;\r\n    }\r\n}\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n    bool public paused = false;\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"Contract paused\");\r\n        _;\r\n    }\r\n    function pause() external onlyOwner {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n    function unpause() external onlyOwner {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\ncontract Freezable is Ownable {\r\n    mapping(address => bool) internal freezed;\r\n    event Freezed(address indexed _account);\r\n    event UnFreezed(address indexed _account);\r\n    modifier notFreezed(address _account) {\r\n        require( !freezed[_account], \"Account is freezed\" );\r\n        _;\r\n    }\r\n    modifier alreadyFreezed(address _account) {\r\n        require( freezed[_account], \"Account is not freezed\" );\r\n        _;\r\n    }\r\n    function isFreezed(address _account) external view returns (bool) {\r\n        return freezed[_account];\r\n    }\r\n    function freeze(address _account) external onlyOwner {\r\n        freezed[_account] = true;\r\n        emit Freezed(_account);\r\n    }\r\n    function unFreeze(address _account) external onlyOwner {\r\n        require( freezed[_account], \"Account is not freezed\" );\r\n        freezed[_account] = false;\r\n        emit UnFreezed(_account);\r\n    }\r\n}\r\nabstract contract BaseToken is IERC20 {\r\n    function _approve( address owner, address spender, uint256 value ) internal virtual;\r\n    function _transfer( address from, address to, uint256 value) internal virtual;\r\n}\r\ncontract NARToken is  Ownable, Pausable, Freezable,BaseToken {\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    bool internal initialized;\r\n\r\n    mapping(address => uint256) internal balances;\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n    uint256 internal totalSupply_ = 0;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event Burn(address indexed burner, uint256 amount);\r\n\r\n    function initialize( string memory tokenName, string memory tokenSymbol, uint8 tokenDecimals ) public {\r\n        require(!initialized, \"Contract is already initialized\");\r\n\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        decimals = tokenDecimals;\r\n        setOwner(msg.sender);\r\n        initialized = true;\r\n    }\r\n    function mint(address _to, uint256 _amount) external whenNotPaused onlyOwner notFreezed(_to) returns (bool) {\r\n        require(_to != address(0), \"Mint to address can not be zero\");\r\n        require(_amount > 0, \"Mint amount can not lower than 0\");\r\n\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) external override view returns (uint256){\r\n        return allowed[owner][spender];\r\n    }\r\n    function totalSupply() external override view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n    function balanceOf(address account)  external  override view returns (uint256){\r\n        return balances[account];\r\n    }\r\n    function approve(address spender, uint256 value) external override whenNotPaused notFreezed(msg.sender)  notFreezed(spender) returns (bool){\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    function _approve( address owner, address spender,  uint256 value ) internal override {\r\n        require(owner != address(0), \"Approve from address can not be the zero\");\r\n        require(spender != address(0), \"Approve to address can not be the zero\");\r\n        allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n    function transferFrom( address from, address to, uint256 value  ) external override whenNotPaused notFreezed(msg.sender) notFreezed(from) notFreezed(to) returns (bool){\r\n        require( value <= allowed[from][msg.sender],  \"Transfer amount exceeds allowance\"  );\r\n        _transfer(from, to, value);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\r\n        return true;\r\n    }\r\n    function transfer(address to, uint256 value) external override whenNotPaused notFreezed(msg.sender)  notFreezed(to) returns (bool){\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    function _transfer( address from, address to, uint256 value ) internal override {\r\n        require(from != address(0), \"Transfer from address can not be the zero\");\r\n        require(to != address(0), \"Transfer to address can not be the zero\");\r\n        require(  value <= balances[from], \"Transfer amount exceeds balance\" );\r\n\r\n        balances[from] = balances[from].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n    function burn(uint256 _amount) external whenNotPaused onlyOwner notFreezed(msg.sender) {\r\n        uint256 balance = balances[msg.sender];\r\n        require(_amount > 0, \"Burn amount can not lower than 0\");\r\n        require(balance >= _amount, \"Burn amount exceeds balance\");\r\n\r\n        totalSupply_ = totalSupply_.sub(_amount);\r\n        balances[msg.sender] = balance.sub(_amount);\r\n        emit Burn(msg.sender, _amount);\r\n        emit Transfer(msg.sender, address(0), _amount);\r\n    }\r\n    function burnFreezed(address account) external onlyOwner alreadyFreezed(account)  returns (bool){\r\n        uint256 accountBalance = balances[account];\r\n        require(accountBalance > 0, \"Burn amount can not lower than 0\");\r\n        balances[account] = 0;\r\n        totalSupply_ = totalSupply_.sub(accountBalance);\r\n        emit Burn(account, accountBalance);\r\n        emit Transfer(account, address(0), accountBalance);\r\n    }\r\n}"
    }
  }
}