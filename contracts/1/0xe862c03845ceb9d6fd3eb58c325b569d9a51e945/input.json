{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/HTK_Sale_Contract_Flat.sol": {
      "content": "// File: contracts/openzeppelin-contracts/contracts/math/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: contracts/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// File: contracts/openzeppelin-contracts/contracts/GSN/Context.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: contracts/openzeppelin-contracts/contracts/access/Ownable.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n\n// File: contracts/HTK_Sale_Contract.sol\n\n// SPDX-License-Identifier: MIT\npragma solidity 0.6.6;\n/*\nThis is a Honest Token Sale Contract.\nThis contract holds HTK tokens and sell them at a given price (depending on if Pre-ICO, ICO or amount)\nThis contract holds HTK tokens because the HTK contract has mint them to this address.\n\n /$$   /$$                                          /$$           /$$                 /$$                \n| $$  | $$                                         | $$          | $$                | $$                \n| $$  | $$  /$$$$$$  /$$$$$$$   /$$$$$$   /$$$$$$$/$$$$$$        | $$        /$$$$$$ | $$$$$$$   /$$$$$$$\n| $$$$$$$$ /$$__  $$| $$__  $$ /$$__  $$ /$$_____/_  $$_/        | $$       |____  $$| $$__  $$ /$$_____/\n| $$__  $$| $$  \\ $$| $$  \\ $$| $$$$$$$$|  $$$$$$  | $$          | $$        /$$$$$$$| $$  \\ $$|  $$$$$$ \n| $$  | $$| $$  | $$| $$  | $$| $$_____/ \\____  $$ | $$ /$$      | $$       /$$__  $$| $$  | $$ \\____  $$\n| $$  | $$|  $$$$$$/| $$  | $$|  $$$$$$$ /$$$$$$$/ |  $$$$/      | $$$$$$$$|  $$$$$$$| $$$$$$$/ /$$$$$$$/\n|__/  |__/ \\______/ |__/  |__/ \\_______/|_______/   \\___/        |________/ \\_______/|_______/ |_______/ \n                                                                                                         \n                                                                                                         \n                                                                                                       \n                                                                                                      \n                                                                                                      \nVisit our website at www.honestlabs.win\n\nTo see the token contract, please visit:\nThis contract IS NOT the TOKEN CONTRACT that implements the ERC-2222 Funds Distribution Standar\nThis is just the contract in charge of the ICO\n\nTo read the code about the token, please visit the Token Contract Address:\n\n\n\n\nIf you hold HTK, you will earn all dividends that will be paid to the token contract Address\nThe first project to do this is the Honest Tree Game\nVisit www.honesttree.win\n*/\n\n\n// We first set an ERC20 contact interface with the functions that we'll use\ninterface HTK_Token {\n    function balanceOf(address owner) external returns (uint256);\n    function transfer(address to, uint256 amount) external returns (bool); //token transfer function\n    function decimals() external returns (uint256);\n    function withdrawFunds() external;\n}\n\n\n\n\ncontract HTK_TokenSale is ReentrancyGuard, Ownable {\n    \n    using SafeMath for uint256;\n    \n    HTK_Token public HTK_tokenContract;   // The HTK Token\n    address payable public HTK_tokenContract_address; // Is the same address, but now as an payable address object \n    \n    uint public pre_ICO_deadline;\n    uint public ICO_deadline;\n    \n    \n    uint256 public HTK_tokensSold;          // Number of tokens already sold\n\n    event HTK_tokenSold(address buyer, uint256 amount);\n    \n    constructor(HTK_Token _HTK_tokenContract, address payable _HTK_tokenContract_address) public {\n        HTK_tokenContract=_HTK_tokenContract;\n        HTK_tokenContract_address=_HTK_tokenContract_address;\n        HTK_tokensSold=0;\n        \n        \n        //Epoch timestamp:  1601510399\n        // Date and time (GMT): Wednesday, September 30, 2020 23:59:59 \n        pre_ICO_deadline=1601510399;\n        \n        \n        //Epoch timestamp: 1609459199\n        //Date and time (GMT): Thursday, December 31, 2020 23:59:59 \n        ICO_deadline=1609459199;\n        \n        // \n    }\n\n    fallback() external payable {\n        //The same Token Contract Address should not buy tokens itself :D\n        if (msg.sender !=HTK_tokenContract_address){\n            buyHTK_Tokens();\n        }\n        \n    }\n    \n    receive() external payable {\n        //The same Token Contract Address should not buy tokens itself :D\n        if (msg.sender !=HTK_tokenContract_address){\n            buyHTK_Tokens();\n        }\n    }\n\n    \n    function buyHTK_Tokens()\n        public\n        payable\n        nonReentrant {\n            uint _date = now;\n            uint256 _tokensAmount = getTokenAmount(msg.value, _date);\n            \n            require(HTK_tokenContract.balanceOf(address(this)) >= _tokensAmount,\n                'I dont have such amount, please check my balance and try to buy less tokens');\n    \n            emit HTK_tokenSold(msg.sender, _tokensAmount);\n            HTK_tokensSold = HTK_tokensSold.add(_tokensAmount);\n    \n            require(HTK_tokenContract.transfer(msg.sender, _tokensAmount),'Error while transfering tokens');\n    }\n    \n    \n    function getTokenAmount(uint256 _weiAmount, uint _date) public view returns(uint256){\n        if (_date<pre_ICO_deadline){\n            return _weiAmount.mul(1250); // 1ETH = 1250 HTK    \n        }\n        \n        else{ // During ICO, there are different bonuses:\n        \n            if (_weiAmount<=100000000000000000){ // from 0 to 0.1 ETH\n                return  _weiAmount.mul(1000); \n            }\n            else if ((_weiAmount>100000000000000000) && (_weiAmount<=1000000000000000000)){ // from 0.1 to 1 ETH\n                return  _weiAmount.mul(1100);  // 10% Bonus\n            }\n            else if ((_weiAmount>1000000000000000000) && (_weiAmount<=10000000000000000000)){ // from 1 to 10 ETH\n                return _weiAmount.mul(1200); // 20% Bonus\n            }\n            \n            else if ((_weiAmount>10000000000000000000)){ // More than 10 ETH\n                return _weiAmount.mul(1300); // 20% Bonus\n            }\n            \n        }\n        \n    }\n    \n    \n    \n    function withdrawICOFunds() public onlyOwner nonReentrant {\n        // funds will only be withdrawn after pre ICO\n        require(now>pre_ICO_deadline, 'Too early my friend');\n        (bool success, ) = owner().call{value: address(this).balance}(\"\");\n        require(success, \"Transfer failed.\");\n    }\n\n    function endSale() public onlyOwner nonReentrant{\n        // Only after ICO deadline\n        require(now>ICO_deadline, 'Too early my friend');\n        require(HTK_tokenContract.transfer(owner(), HTK_tokenContract.balanceOf(address(this))));\n        (bool success, ) = owner().call{value: address(this).balance}(\"\");\n        require(success, \"Transfer failed.\");\n    }\n    \n    function getDistributedFundsOfNotYesSoldTokens() public onlyOwner nonReentrant {\n        HTK_tokenContract.withdrawFunds();\n    }\n}\n\n\n"
    }
  }
}