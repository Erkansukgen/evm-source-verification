{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Factory.sol": {
      "content": "pragma solidity ^0.6.6;\n\n\n\nabstract contract ERC20 {\n    function totalSupply() virtual public view returns (uint);\n    function balanceOf(address tokenOwner) virtual public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) virtual public view returns (uint remaining);\n    function transfer(address to, uint tokens) virtual public returns (bool success);\n    function approve(address spender, uint tokens) virtual public returns (bool success);\n    function transferFrom(address from, address to, uint tokens)virtual public returns (bool success);\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\ncontract Receiver {\n\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function sendFundsTo( address tracker, uint256 amount, address receiver) public returns ( bool ) {\n        require(msg.sender == owner);\n        return ERC20(tracker).transfer(receiver, amount);\n    }\n\n}\n\ncontract Factory {\n    address public owner;\n    event AddressCreated(\n        address indexed _address\n    );\n    constructor() public {\n        owner = msg.sender;\n    }\n    function changeOwner(address newOwner) public {\n        require(msg.sender == owner);\n        owner = newOwner;\n    }\n    function createReceivers(uint8 number) public  {\n        require(msg.sender == owner);\n        for(uint8 i = 0; i < number; i++) {\n            address addr =  address(new Receiver());\n            emit AddressCreated(addr);\n        }\n    }\n\n    function sendFundsFromReceiverTo( address addr, address tracker, uint256 amount, address receiver ) public returns (bool) {\n        require(msg.sender == owner);\n        return Receiver(addr).sendFundsTo( tracker, amount, receiver);\n    }\n    \n    \n    function batchCollect( address  tracker, address receiver, address[] memory contractAddresses, uint256[] memory amounts ) public {\n        require(msg.sender == owner);\n        for(uint256 i = 0; i < contractAddresses.length; i++) {\n            Receiver( contractAddresses[i] ).sendFundsTo( tracker, amounts[i], receiver);\n        }\n    }\n\n}"
    }
  }
}