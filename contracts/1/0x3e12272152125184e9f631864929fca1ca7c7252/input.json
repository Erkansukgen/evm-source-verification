{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"End.sol":{"content":"/**\n *Submitted for verification at Etherscan.io on 2019-11-14\n*/\n\n// hevm: flattened sources of /nix/store/8xb41r4qd0cjb63wcrxf1qmfg88p0961-dss-6fd7de0/src/end.sol\npragma solidity =0.5.12;\n\n////// /nix/store/8xb41r4qd0cjb63wcrxf1qmfg88p0961-dss-6fd7de0/src/lib.sol\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.5.12; */\n\ncontract LibNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  usr,\n        bytes32  indexed  arg1,\n        bytes32  indexed  arg2,\n        bytes             data\n    ) anonymous;\n\n    modifier note {\n        _;\n        assembly {\n            // log an 'anonymous' event with a constant 6 words of calldata\n            // and four indexed topics: selector, caller, arg1 and arg2\n            let mark := msize                         // end of memory ensures zero\n            mstore(0x40, add(mark, 288))              // update free memory pointer\n            mstore(mark, 0x20)                        // bytes type data offset\n            mstore(add(mark, 0x20), 224)              // bytes size (padded)\n            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\n            log4(mark, 288,                           // calldata\n                 shl(224, shr(224, calldataload(0))), // msg.sig\n                 caller,                              // msg.sender\n                 calldataload(4),                     // arg1\n                 calldataload(36)                     // arg2\n                )\n        }\n    }\n}\n\n////// /nix/store/8xb41r4qd0cjb63wcrxf1qmfg88p0961-dss-6fd7de0/src/end.sol\n/// end.sol -- global settlement engine\n\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\n// Copyright (C) 2018 Lev Livnev <lev@liv.nev.org.uk>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.5.12; */\n\n/* import \"./lib.sol\"; */\n\ncontract VatLike {\n    function dai(address) external view returns (uint256);\n    function ilks(bytes32 ilk) external returns (\n        uint256 Art,\n        uint256 rate,\n        uint256 spot,\n        uint256 line,\n        uint256 dust\n    );\n    function urns(bytes32 ilk, address urn) external returns (\n        uint256 ink,\n        uint256 art\n    );\n    function debt() external returns (uint256);\n    function move(address src, address dst, uint256 rad) external;\n    function hope(address) external;\n    function flux(bytes32 ilk, address src, address dst, uint256 rad) external;\n    function grab(bytes32 i, address u, address v, address w, int256 dink, int256 dart) external;\n    function suck(address u, address v, uint256 rad) external;\n    function cage() external;\n}\ncontract CatLike {\n    function ilks(bytes32) external returns (\n        address flip,  // Liquidator\n        uint256 chop,  // Liquidation Penalty   [ray]\n        uint256 lump   // Liquidation Quantity  [rad]\n    );\n    function cage() external;\n}\ncontract PotLike {\n    function cage() external;\n}\ncontract VowLike {\n    function cage() external;\n}\ncontract Flippy {\n    function bids(uint id) external view returns (\n        uint256 bid,\n        uint256 lot,\n        address guy,\n        uint48  tic,\n        uint48  end,\n        address usr,\n        address gal,\n        uint256 tab\n    );\n    function yank(uint id) external;\n}\n\ncontract PipLike {\n    function read() external view returns (bytes32);\n}\n\ncontract Spotty {\n    function par() external view returns (uint256);\n    function ilks(bytes32) external view returns (\n        PipLike pip,\n        uint256 mat\n    );\n    function cage() external;\n}\n\n/*\n    This is the `End` and it coordinates Global Settlement. This is an\n    involved, stateful process that takes place over nine steps.\n\n    First we freeze the system and lock the prices for each ilk.\n\n    1. `cage()`:\n        - freezes user entrypoints\n        - cancels flop/flap auctions\n        - starts cooldown period\n        - stops pot drips\n\n    2. `cage(ilk)`:\n       - set the cage price for each `ilk`, reading off the price feed\n\n    We must process some system state before it is possible to calculate\n    the final dai / collateral price. In particular, we need to determine\n\n      a. `gap`, the collateral shortfall per collateral type by\n         considering under-collateralised CDPs.\n\n      b. `debt`, the outstanding dai supply after including system\n         surplus / deficit\n\n    We determine (a) by processing all under-collateralised CDPs with\n    `skim`:\n\n    3. `skim(ilk, urn)`:\n       - cancels CDP debt\n       - any excess collateral remains\n       - backing collateral taken\n\n    We determine (b) by processing ongoing dai generating processes,\n    i.e. auctions. We need to ensure that auctions will not generate any\n    further dai income. In the two-way auction model this occurs when\n    all auctions are in the reverse (`dent`) phase. There are two ways\n    of ensuring this:\n\n    4.  i) `wait`: set the cooldown period to be at least as long as the\n           longest auction duration, which needs to be determined by the\n           cage administrator.\n\n           This takes a fairly predictable time to occur but with altered\n           auction dynamics due to the now varying price of dai.\n\n       ii) `skip`: cancel all ongoing auctions and seize the collateral.\n\n           This allows for faster processing at the expense of more\n           processing calls. This option allows dai holders to retrieve\n           their collateral faster.\n\n           `skip(ilk, id)`:\n            - cancel individual flip auctions in the `tend` (forward) phase\n            - retrieves collateral and returns dai to bidder\n            - `dent` (reverse) phase auctions can continue normally\n\n    Option (i), `wait`, is sufficient for processing the system\n    settlement but option (ii), `skip`, will speed it up. Both options\n    are available in this implementation, with `skip` being enabled on a\n    per-auction basis.\n\n    When a CDP has been processed and has no debt remaining, the\n    remaining collateral can be removed.\n\n    5. `free(ilk)`:\n        - remove collateral from the caller's CDP\n        - owner can call as needed\n\n    After the processing period has elapsed, we enable calculation of\n    the final price for each collateral type.\n\n    6. `thaw()`:\n       - only callable after processing time period elapsed\n       - assumption that all under-collateralised CDPs are processed\n       - fixes the total outstanding supply of dai\n       - may also require extra CDP processing to cover vow surplus\n\n    7. `flow(ilk)`:\n        - calculate the `fix`, the cash price for a given ilk\n        - adjusts the `fix` in the case of deficit / surplus\n\n    At this point we have computed the final price for each collateral\n    type and dai holders can now turn their dai into collateral. Each\n    unit dai can claim a fixed basket of collateral.\n\n    Dai holders must first `pack` some dai into a `bag`. Once packed,\n    dai cannot be unpacked and is not transferrable. More dai can be\n    added to a bag later.\n\n    8. `pack(wad)`:\n        - put some dai into a bag in preparation for `cash`\n\n    Finally, collateral can be obtained with `cash`. The bigger the bag,\n    the more collateral can be released.\n\n    9. `cash(ilk, wad)`:\n        - exchange some dai from your bag for gems from a specific ilk\n        - the number of gems is limited by how big your bag is\n*/\n\ncontract End is LibNote {\n    // --- Auth ---\n    mapping (address => uint) public wards;\n    function rely(address guy) external note auth { wards[guy] = 1; }\n    function deny(address guy) external note auth { wards[guy] = 0; }\n    modifier auth {\n        require(wards[msg.sender] == 1, \"End/not-authorized\");\n        _;\n    }\n\n    // --- Data ---\n    VatLike  public vat;\n    CatLike  public cat;\n    VowLike  public vow;\n    PotLike  public pot;\n    Spotty   public spot;\n\n    uint256  public live;  // cage flag\n    uint256  public when;  // time of cage\n    uint256  public wait;  // processing cooldown length\n    uint256  public debt;  // total outstanding dai following processing [rad]\n\n    mapping (bytes32 => uint256) public tag;  // cage price           [ray]\n    mapping (bytes32 => uint256) public gap;  // collateral shortfall [wad]\n    mapping (bytes32 => uint256) public Art;  // total debt per ilk   [wad]\n    mapping (bytes32 => uint256) public fix;  // final cash price     [ray]\n\n    mapping (address => uint256)                      public bag;  // [wad]\n    mapping (bytes32 => mapping (address => uint256)) public out;  // [wad]\n\n    // --- Init ---\n    constructor() public {\n        wards[msg.sender] = 1;\n        live = 1;\n    }\n\n    // --- Math ---\n    function add(uint x, uint y) internal pure returns (uint z) {\n        z = x + y;\n        require(z >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = mul(x, y) / RAY;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = mul(x, RAY) / y;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = mul(x, WAD) / y;\n    }\n\n    // --- Administration ---\n    function file(bytes32 what, address data) external note auth {\n        require(live == 1, \"End/not-live\");\n        if (what == \"vat\")  vat = VatLike(data);\n        else if (what == \"cat\")  cat = CatLike(data);\n        else if (what == \"vow\")  vow = VowLike(data);\n        else if (what == \"pot\")  pot = PotLike(data);\n        else if (what == \"spot\") spot = Spotty(data);\n        else revert(\"End/file-unrecognized-param\");\n    }\n    function file(bytes32 what, uint256 data) external note auth {\n        require(live == 1, \"End/not-live\");\n        if (what == \"wait\") wait = data;\n        else revert(\"End/file-unrecognized-param\");\n    }\n\n    // --- Settlement ---\n    function cage() external note auth {\n        require(live == 1, \"End/not-live\");\n        live = 0;\n        when = now;\n        vat.cage();\n        cat.cage();\n        vow.cage();\n        spot.cage();\n        pot.cage();\n    }\n\n    function cage(bytes32 ilk) external note {\n        require(live == 0, \"End/still-live\");\n        require(tag[ilk] == 0, \"End/tag-ilk-already-defined\");\n        (Art[ilk],,,,) = vat.ilks(ilk);\n        (PipLike pip,) = spot.ilks(ilk);\n        // par is a ray, pip returns a wad\n        tag[ilk] = wdiv(spot.par(), uint(pip.read()));\n    }\n\n    function skip(bytes32 ilk, uint256 id) external note {\n        require(tag[ilk] != 0, \"End/tag-ilk-not-defined\");\n\n        (address flipV,,) = cat.ilks(ilk);\n        Flippy flip = Flippy(flipV);\n        (, uint rate,,,) = vat.ilks(ilk);\n        (uint bid, uint lot,,,, address usr,, uint tab) = flip.bids(id);\n\n        vat.suck(address(vow), address(vow),  tab);\n        vat.suck(address(vow), address(this), bid);\n        vat.hope(address(flip));\n        flip.yank(id);\n\n        uint art = tab / rate;\n        Art[ilk] = add(Art[ilk], art);\n        require(int(lot) >= 0 && int(art) >= 0, \"End/overflow\");\n        vat.grab(ilk, usr, address(this), address(vow), int(lot), int(art));\n    }\n\n    function skim(bytes32 ilk, address urn) external note {\n        require(tag[ilk] != 0, \"End/tag-ilk-not-defined\");\n        (, uint rate,,,) = vat.ilks(ilk);\n        (uint ink, uint art) = vat.urns(ilk, urn);\n\n        uint owe = rmul(rmul(art, rate), tag[ilk]);\n        uint wad = min(ink, owe);\n        gap[ilk] = add(gap[ilk], sub(owe, wad));\n\n        require(wad <= 2**255 && art <= 2**255, \"End/overflow\");\n        vat.grab(ilk, urn, address(this), address(vow), -int(wad), -int(art));\n    }\n\n    function free(bytes32 ilk) external note {\n        require(live == 0, \"End/still-live\");\n        (uint ink, uint art) = vat.urns(ilk, msg.sender);\n        require(art == 0, \"End/art-not-zero\");\n        require(ink <= 2**255, \"End/overflow\");\n        vat.grab(ilk, msg.sender, msg.sender, address(vow), -int(ink), 0);\n    }\n\n    function thaw() external note {\n        require(live == 0, \"End/still-live\");\n        require(debt == 0, \"End/debt-not-zero\");\n        require(vat.dai(address(vow)) == 0, \"End/surplus-not-zero\");\n        require(now >= add(when, wait), \"End/wait-not-finished\");\n        debt = vat.debt();\n    }\n    function flow(bytes32 ilk) external note {\n        require(debt != 0, \"End/debt-zero\");\n        require(fix[ilk] == 0, \"End/fix-ilk-already-defined\");\n\n        (, uint rate,,,) = vat.ilks(ilk);\n        uint256 wad = rmul(rmul(Art[ilk], rate), tag[ilk]);\n        fix[ilk] = rdiv(mul(sub(wad, gap[ilk]), RAY), debt);\n    }\n\n    function pack(uint256 wad) external note {\n        require(debt != 0, \"End/debt-zero\");\n        vat.move(msg.sender, address(vow), mul(wad, RAY));\n        bag[msg.sender] = add(bag[msg.sender], wad);\n    }\n    function cash(bytes32 ilk, uint wad) external note {\n        require(fix[ilk] != 0, \"End/fix-ilk-not-defined\");\n        vat.flux(ilk, address(this), msg.sender, rmul(wad, fix[ilk]));\n        out[ilk][msg.sender] = add(out[ilk][msg.sender], wad);\n        require(out[ilk][msg.sender] <= bag[msg.sender], \"End/insufficient-bag-balance\");\n    }\n}\n"}}}