{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/7_middleware.sol":{"content":"pragma solidity ^0.8.0;\n\n\ncontract MiddleWare{\n    \n    address payable private admin;\n    address private owner;\n    \n    constructor(address payable _admin){\n        owner = msg.sender;\n        admin = _admin;\n    }\n    \n    event Deposit(address indexed from, uint indexed id, uint indexed _value);\n\n    fallback() external{  }\n    \n    function currentOwner() public view virtual returns (address) {\n        return owner;\n    }\n    \n    function currentAdmin() public view virtual returns (address) {\n        return admin;\n    }\n    \n    function transferOwnership(address _newOwner) external returns(bool){\n        require(msg.sender == owner,\"Sender not Owner.\");\n        owner = _newOwner;\n        return true;\n    }\n    \n    function updateAdmin(address payable _newAdmin) external returns(bool){\n        require(msg.sender == owner,\"Sender not Owner.\");\n        admin = _newAdmin;\n        return true;\n    }\n    \n    function deposit(uint _id) payable external returns(bool){\n        require(msg.value>0,\"Value needs to be not 0\");\n        \n        if(!admin.send(msg.value)) revert();\n        \n        emit Deposit(msg.sender, _id, msg.value);\n        return true;\n    }\n}"}}}