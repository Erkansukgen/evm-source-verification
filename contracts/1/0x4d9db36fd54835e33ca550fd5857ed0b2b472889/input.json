{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "gist-dac24a51a735e42f864c0ae14cedf9af/contracts/DataSource.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.6.12;\n\npragma experimental ABIEncoderV2;\n\ninterface IUniswapV3Pool {\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n    function tickSpacing() external view returns (int24);\n    function feeGrowthGlobal0X128() external view returns (uint256);\n    function feeGrowthGlobal1X128() external view returns (uint256);\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n    function liquidity() external view returns (uint128);\n    function ticks(int24 tick)\n    external\n    view\n    returns (\n        uint128 liquidityGross,\n        int128 liquidityNet,\n        uint256 feeGrowthOutside0X128,\n        uint256 feeGrowthOutside1X128,\n        int56 tickCumulativeOutside,\n        uint160 secondsPerLiquidityOutsideX128,\n        uint32 secondsOutside,\n        bool initialized\n    );\n    function slot0()\n    external\n    view\n    returns (\n        uint160 sqrtPriceX96,\n        int24 tick,\n        uint16 observationIndex,\n        uint16 observationCardinality,\n        uint16 observationCardinalityNext,\n        uint8 feeProtocol,\n        bool unlocked\n    );\n}\n\ninterface IUniswapV2Pair {\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n}\n\nabstract contract UniswapV2Factory  {\n    mapping(address => mapping(address => address)) public getPair;\n    address[] public allPairs;\n    function allPairsLength() external view virtual returns (uint);\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n\ncontract DataSource {\n\n    struct Token {\n        address id;\n        string symbol;\n        uint8 decimals;\n    }\n\n    struct PoolV2 {\n        address id;\n        Token token0;\n        Token token1;\n    }\n\n    struct PoolV3Tick {\n        int24 tickIndex;\n        uint128 liquidityGross;\n        int128 liquidityNet;\n        uint256 feeGrowthOutside0X128;\n        uint256 feeGrowthOutside1X128;\n    }\n\n    struct PoolV3 {\n        address id;\n        uint256 sqrtPriceX96;\n        uint128 liquidity;\n        int24 tickCurrent;\n        uint256 feeGrowthGlobal0X128;\n        uint256 feeGrowthGlobal1X128;\n        PoolV3Tick[] ticks;\n    }\n\n    struct ArbitrageTransaction {\n        uint8 SEND_Dex;\n        uint256 SEND_amount;\n        address SEND_poolAddress;\n        uint8 RECEIVE_Dex;\n        uint256 RECEIVE_amount;\n        address RECEIVE_poolAddress;\n    }\n\n    function uniswapv2_getReservesByPairs(IUniswapV2Pair[] calldata _pairs) external view returns (uint256[3][] memory) {\n        uint256[3][] memory result = new uint256[3][](_pairs.length);\n        for (uint i = 0; i < _pairs.length; i++) {\n            (result[i][0], result[i][1], result[i][2]) = _pairs[i].getReserves();\n        }\n        return result;\n    }\n\n    function uniswapv2_getPairsLength(UniswapV2Factory _uniswapFactory) external view returns (uint256)  {\n        return _uniswapFactory.allPairsLength();\n    }\n\n    function uniswapv2_getPairsByIndexRange(UniswapV2Factory _uniswapFactory, uint256 _start, uint256 _stop) external view returns (PoolV2[] memory)  {\n        uint256 _allPairsLength = _uniswapFactory.allPairsLength();\n        if (_stop > _allPairsLength) {\n            _stop = _allPairsLength;\n        }\n        require(_stop >= _start, \"start cannot be higher than stop\");\n        uint256 _qty = _stop - _start;\n        PoolV2[] memory result = new PoolV2[](_qty);\n        for (uint i = 0; i < _qty; i++) {\n            IUniswapV2Pair _uniswapPair = IUniswapV2Pair(_uniswapFactory.allPairs(_start + i));\n            address _token0Address  = _uniswapPair.token0();\n            Token memory _token0 = this.getToken(_token0Address);\n            address _token1Address  = _uniswapPair.token1();\n            Token memory _token1 = this.getToken(_token1Address);\n            result[i] = PoolV2(address(_uniswapPair), _token0, _token1);\n        }\n        return result;\n    }\n\n    function getToken(address _tokenAddress) external view returns (Token memory){\n        string memory _symbol = IERC20(_tokenAddress).symbol();\n        uint8 _decimals = IERC20(_tokenAddress).decimals();\n        return Token(_tokenAddress, _symbol, _decimals);\n    }\n\n    // function uniswapv3_getPoolTicks(int24 currentTick, int24 tickSpacing, IUniswapV3Pool _pool) external view returns (PoolV3Tick[] memory) {\n    //     int16 ticksToLoadEachSide = 10;\n    //     PoolV3Tick[] memory tmpTicks = new PoolV3Tick[](uint256(2 * ticksToLoadEachSide + 1));\n    //     int24 middleTick = currentTick - (currentTick % tickSpacing);\n    //     uint128 tmpLiquidityGross;\n    //     int128 tmpLiquidityNet;\n    //     uint256 tmpFeeGrowthOutside0X128;\n    //     uint256 tmpFeeGrowthOutside1X128;\n    //     for (int24 index = -1 * (ticksToLoadEachSide); index <= ticksToLoadEachSide; index+=1) {\n    //         (\n    //         tmpLiquidityGross,\n    //         tmpLiquidityNet,\n    //         tmpFeeGrowthOutside0X128,\n    //         tmpFeeGrowthOutside1X128,\n    //         ,,,\n    //         ) = _pool.ticks(middleTick + index * tickSpacing);\n    //         tmpTicks[uint256(index + ticksToLoadEachSide)] = PoolV3Tick(middleTick + index * tickSpacing, tmpLiquidityGross, tmpLiquidityNet, tmpFeeGrowthOutside0X128, tmpFeeGrowthOutside1X128);\n    //     }\n    //     return tmpTicks;\n    // }\n\n    // function uniswapv3_getPoolPrices(IUniswapV3Pool[] calldata _pools) external view returns (PoolV3[] memory) {\n    //     PoolV3[] memory result = new PoolV3[](_pools.length);\n    //     uint160 tmpSqrtPriceX96;\n    //     int24 tmpTick;\n    //     uint128 liquidity;\n    //     uint256 tmpFeeGrowthGlobal0X128;\n    //     uint256 tmpFeeGrowthGlobal1X128;\n    //     int24 tmpTickSpacing;\n    //     uint i;\n    //     for (i = 0; i < _pools.length; i++) {\n    //         (tmpSqrtPriceX96, tmpTick,,,,,) = _pools[i].slot0();\n    //         liquidity = _pools[i].liquidity();\n    //         tmpFeeGrowthGlobal0X128 = _pools[i].feeGrowthGlobal0X128();\n    //         tmpFeeGrowthGlobal1X128 = _pools[i].feeGrowthGlobal1X128();\n    //         tmpTickSpacing = _pools[i].tickSpacing();\n    //         PoolV3Tick[] memory tmpTicks = this.uniswapv3_getPoolTicks(tmpTick, tmpTickSpacing, _pools[i]);\n    //         result[i] = PoolV3(\n    //             address(_pools[i]),\n    //             tmpSqrtPriceX96,\n    //             liquidity,\n    //             tmpTick,\n    //             tmpFeeGrowthGlobal0X128,\n    //             tmpFeeGrowthGlobal1X128,\n    //             tmpTicks\n    //         );\n    //     }\n    //     return result;\n    // }\n\n    // function arbitrage(ArbitrageTransaction[] calldata _arbitrageTransactions) external returns bool {\n    //     for (i=0; i<_arbitrageTransactions.length; i++) {\n    //         if (_arbitrageTransactions[i].SEND_Dex == 0) {\n    //             IUniswapV2Pair(_arbitrageTransactions[i].SEND_poolAddress).swap(\n    //                 address(this),\n\n    //             )\n    //         }\n    //     }\n    // }\n}\n"
    }
  }
}