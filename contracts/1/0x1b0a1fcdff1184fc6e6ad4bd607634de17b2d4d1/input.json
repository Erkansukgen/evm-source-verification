{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "HYFTCrowdSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    constructor() {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ninterface Token {\r\n    function tokensSold(address buyer, uint256 amount) external  returns (bool success);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function burn(uint256 _value) external returns (bool success);\r\n}\r\n\r\ncontract HYFTCrowdSale is Ownable{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public priceFactor;\r\n    uint256 public totalSold;\r\n    address public tokenAddress;\r\n    uint256 public startTime = 1608652800;\r\n    uint256 public endTime = 1609084800;\r\n    \r\n    uint256 public minimumBuyAmount = 10 ** 17;\r\n    address payable public walletAddress;\r\n    event TokensSold(address indexed to, uint256 amount);\r\n    \r\n    constructor() {\r\n        priceFactor = uint256(50);\r\n        walletAddress = 0xc14AdB0896D8c200D2E8f46790E575Ae60a51637;\r\n        tokenAddress = address(0x0);\r\n    }\r\n    \r\n    receive() external payable {\r\n        buy();\r\n    }\r\n    \r\n    function changeWallet (address payable _walletAddress) onlyOwner public {\r\n        walletAddress = _walletAddress;\r\n    }\r\n    \r\n    function setToken(address _tokenAddress) onlyOwner public {\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n    \r\n    function buy() public payable {\r\n        require((block.timestamp > startTime ) && (block.timestamp < endTime)  , \"HYFT Token Crowdsale is not active\");\r\n        uint256 weiValue = msg.value;\r\n        require(weiValue >= minimumBuyAmount, \"Minimum amount is 0.1 eth\");\r\n        uint256 amount = weiValue.mul(priceFactor);\r\n        Token token = Token(tokenAddress);\r\n        require(walletAddress.send(weiValue));\r\n        require(token.tokensSold(msg.sender, amount));\r\n        totalSold += amount;\r\n        emit TokensSold(msg.sender, amount);\r\n    }\r\n    \r\n    function burnUnsold() onlyOwner public {\r\n        require((block.timestamp > endTime), \"HYFT Token Crowdsale is still active\");\r\n        Token token = Token(tokenAddress);\r\n        uint256 amount = token.balanceOf(address(this));\r\n        token.burn(amount);\r\n    }\r\n    \r\n}"
    }
  }
}