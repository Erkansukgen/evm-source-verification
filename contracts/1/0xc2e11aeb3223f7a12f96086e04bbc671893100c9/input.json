{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Untitled.sol":{"content":"pragma solidity ^0.6.0;\n\ninterface publicCalls {\n  function GenesisDestroyAmountCount (  ) external view returns ( uint256 );\n  function GenesisDestroyAmountCountSet ( uint256 _GenesisDestroyAmountCount ) external;\n  function GenesisDestroyCountStake (  ) external view returns ( uint256 );\n  function GenesisDestroyCountStakeSet ( uint256 _GenesisDestroyCountStake ) external;\n  function GenesisDestroyed (  ) external view returns ( uint256 );\n  function GenesisDestroyedSet ( uint256 _GenesisDestroyed ) external;\n  function NormalAddressBuyPricePerMNE ( address ) external view returns ( uint256 );\n  function NormalAddressBuyPricePerMNESet ( address _address, uint256 _NormalAddressBuyPricePerMNE ) external;\n  function NormalAddressFeeCount (  ) external view returns ( uint256 );\n  function NormalAddressFeeCountSet ( uint256 _NormalAddressFeeCount ) external;\n  function NormalAddressSalesCount (  ) external view returns ( uint256 );\n  function NormalAddressSalesCountSet ( uint256 _NormalAddressSalesCount ) external;\n  function NormalAddressSalesPriceCount (  ) external view returns ( uint256 );\n  function NormalAddressSalesPriceCountSet ( uint256 _NormalAddressSalesPriceCount ) external;\n  function NormalBalanceImported (  ) external view returns ( uint256 );\n  function NormalBalanceImportedSet ( uint256 _NormalBalanceImported ) external;\n  function NormalImportedAmountCount (  ) external view returns ( uint256 );\n  function NormalImportedAmountCountSet ( uint256 _NormalImportedAmountCount ) external;\n  function allowAddressToDestroyGenesis ( address ) external view returns ( address );\n  function allowAddressToDestroyGenesisSet ( address _address, address _allowAddressToDestroyGenesis ) external;\n  function allowReceiveGenesisTransfers ( address ) external view returns ( bool );\n  function allowReceiveGenesisTransfersSet ( address _address, bool _allowReceiveGenesisTransfers ) external;\n  function allowed ( address, address ) external view returns ( uint256 );\n  function allowedSet ( address _address, address _spender, uint256 _amount ) external;\n  function amountOfGenesisToBuyStakes (  ) external view returns ( uint256 );\n  function amountOfGenesisToBuyStakesSet ( address _from, uint256 _amountOfGenesisToBuyStakes ) external;\n  function amountOfGenesisToTransferStakes (  ) external view returns ( uint256 );\n  function amountOfGenesisToTransferStakesSet ( address _from, uint256 _amountOfGenesisToTransferStakes ) external;\n  function amountOfMNEForToken (  ) external view returns ( uint256 );\n  function amountOfMNEForTokenICO (  ) external view returns ( uint256 );\n  function amountOfMNEForTokenICOSet ( address _from, uint256 _amountOfMNEForTokenICO ) external;\n  function amountOfMNEForTokenSet ( address _from, uint256 _amountOfMNEForToken ) external;\n  function amountOfMNEToBuyStakes (  ) external view returns ( uint256 );\n  function amountOfMNEToBuyStakesSet ( address _from, uint256 _amountOfMNEToBuyStakes ) external;\n  function amountOfMNEToTransferStakes (  ) external view returns ( uint256 );\n  function amountOfMNEToTransferStakesSet ( address _from, uint256 _amountOfMNEToTransferStakes ) external;\n  function availableBalance (  ) external view returns ( uint256 );\n  function availableBalanceSet ( uint256 _availableBalance ) external;\n  function balances ( address ) external view returns ( uint256 );\n  function balancesSet ( address _address, uint256 _balances ) external;\n  function buyStakeGenesisCount (  ) external view returns ( uint256 );\n  function buyStakeGenesisCountSet ( uint256 _buyStakeGenesisCount ) external;\n  function buyStakeMNECount (  ) external view returns ( uint256 );\n  function buyStakeMNECountSet ( uint256 _buyStakeMNECount ) external;\n  function ethFeeForSellerLevel1 (  ) external view returns ( uint256 );\n  function ethFeeForSellerLevel1Set ( address _from, uint256 _ethFeeForSellerLevel1 ) external;\n  function ethFeeForToken (  ) external view returns ( uint256 );\n  function ethFeeForTokenICO (  ) external view returns ( uint256 );\n  function ethFeeForTokenICOSet ( address _from, uint256 _ethFeeForTokenICO ) external;\n  function ethFeeForTokenSet ( address _from, uint256 _ethFeeForToken ) external;\n  function ethFeeToBuyLevel1 (  ) external view returns ( uint256 );\n  function ethFeeToBuyLevel1Set ( address _from, uint256 _ethFeeToBuyLevel1 ) external;\n  function ethFeeToUpgradeToLevel2 (  ) external view returns ( uint256 );\n  function ethFeeToUpgradeToLevel2Set ( address _from, uint256 _ethFeeToUpgradeToLevel2 ) external;\n  function ethFeeToUpgradeToLevel3 (  ) external view returns ( uint256 );\n  function ethFeeToUpgradeToLevel3Set ( address _from, uint256 _ethFeeToUpgradeToLevel3 ) external;\n  function ethPercentFeeGenesisExchange (  ) external view returns ( uint256 );\n  function ethPercentFeeGenesisExchangeSet ( address _from, uint256 _ethPercentFeeGenesisExchange ) external;\n  function ethPercentFeeNormalExchange (  ) external view returns ( uint256 );\n  function ethPercentFeeNormalExchangeSet ( address _from, uint256 _ethPercentFeeNormalExchange ) external;\n  function ethPercentStakeExchange (  ) external view returns ( uint256 );\n  function ethPercentStakeExchangeSet ( address _from, uint256 _ethPercentStakeExchange ) external;\n  function genesisAddressCount (  ) external view returns ( uint256 );\n  function genesisAddressCountSet ( uint256 _genesisAddressCount ) external;\n  function genesisAddressesForSaleLevel1Index ( address ) external view returns ( uint256 );\n  function genesisAddressesForSaleLevel1IndexSet ( address _address, uint256 _genesisAddressesForSaleLevel1Index ) external;\n  function genesisAddressesForSaleLevel2Index ( address ) external view returns ( uint256 );\n  function genesisAddressesForSaleLevel2IndexSet ( address _address, uint256 _genesisAddressesForSaleLevel2Index ) external;\n  function genesisAddressesForSaleLevel3Index ( address ) external view returns ( uint256 );\n  function genesisAddressesForSaleLevel3IndexSet ( address _address, uint256 _genesisAddressesForSaleLevel3Index ) external;\n  function genesisBuyPrice ( address ) external view returns ( uint256 );\n  function genesisBuyPriceSet ( address _address, uint256 _genesisBuyPrice ) external;\n  function genesisCallerAddress (  ) external view returns ( address );\n  function genesisCallerAddressSet ( address _genesisCallerAddress ) external;\n  function genesisInitialSupply ( address ) external view returns ( uint256 );\n  function genesisInitialSupplySet ( address _address, uint256 _genesisInitialSupply ) external;\n  function genesisRewardPerBlock (  ) external view returns ( uint256 );\n  function genesisSalesCount (  ) external view returns ( uint256 );\n  function genesisSalesCountSet ( uint256 _genesisSalesCount ) external;\n  function genesisSalesPriceCount (  ) external view returns ( uint256 );\n  function genesisSalesPriceCountSet ( uint256 _genesisSalesPriceCount ) external;\n  function genesisSupplyPerAddress (  ) external view returns ( uint256 );\n  function genesisTransfersCount (  ) external view returns ( uint256 );\n  function genesisTransfersCountSet ( uint256 _genesisTransfersCount ) external;\n  function initialBlockCount (  ) external view returns ( uint256 );\n  function initialBlockCountPerAddress ( address ) external view returns ( uint256 );\n  function initialBlockCountPerAddressSet ( address _address, uint256 _initialBlockCountPerAddress ) external;\n  function initialBlockCountSet ( uint256 _initialBlockCount ) external;\n  function isGenesisAddress ( address ) external view returns ( uint8 );\n  function isGenesisAddressForSale ( address ) external view returns ( bool );\n  function isGenesisAddressForSaleSet ( address _address, bool _isGenesisAddressForSale ) external;\n  function isGenesisAddressSet ( address _address, uint8 _isGenesisAddress ) external;\n  function isNormalAddressForSale ( address ) external view returns ( bool );\n  function isNormalAddressForSaleSet ( address _address, bool _isNormalAddressForSale ) external;\n  function level2ActivationsFromLevel1Count (  ) external view returns ( uint256 );\n  function level2ActivationsFromLevel1CountSet ( uint256 _level2ActivationsFromLevel1Count ) external;\n  function level3ActivationsFromDevCount (  ) external view returns ( uint256 );\n  function level3ActivationsFromDevCountSet ( uint256 _level3ActivationsFromDevCount ) external;\n  function level3ActivationsFromLevel1Count (  ) external view returns ( uint256 );\n  function level3ActivationsFromLevel1CountSet ( uint256 _level3ActivationsFromLevel1Count ) external;\n  function level3ActivationsFromLevel2Count (  ) external view returns ( uint256 );\n  function level3ActivationsFromLevel2CountSet ( uint256 _level3ActivationsFromLevel2Count ) external;\n  function maxBlocks (  ) external view returns ( uint256 );\n  function mneBurned (  ) external view returns ( uint256 );\n  function mneBurnedSet ( uint256 _mneBurned ) external;\n  function normalAddressesForSaleIndex ( address ) external view returns ( uint256 );\n  function normalAddressesForSaleIndexSet ( address _address, uint256 _normalAddressesForSaleIndex ) external;\n  function overallSupply (  ) external view returns ( uint256 );\n  function overallSupplySet ( uint256 _overallSupply ) external;\n  function ownerGenesis (  ) external view returns ( address );\n  function ownerGenesisBuys (  ) external view returns ( address );\n  function ownerMain (  ) external view returns ( address );\n  function ownerNormalAddress (  ) external view returns ( address );\n  function ownerStakeBuys (  ) external view returns ( address );\n  function ownerStakes (  ) external view returns ( address );\n  function ownerTokenService (  ) external view returns ( address );\n  function setOwnerGenesis (  ) external;\n  function setOwnerGenesisBuys (  ) external;\n  function setOwnerMain (  ) external;\n  function setOwnerNormalAddress (  ) external;\n  function setOwnerStakeBuys (  ) external;\n  function setOwnerStakes (  ) external;\n  function setOwnerTokenService (  ) external;\n  function setupRunning (  ) external view returns ( bool );\n  function setupRunningSet ( bool _setupRunning ) external;\n  function stakeBalances ( address ) external view returns ( uint256 );\n  function stakeBalancesSet ( address _address, uint256 _stakeBalances ) external;\n  function stakeBuyPrice ( address ) external view returns ( uint256 );\n  function stakeBuyPriceSet ( address _address, uint256 _stakeBuyPrice ) external;\n  function stakeDecimals (  ) external view returns ( uint256 );\n  function stakeDecimalsSet ( address _from, uint256 _stakeDecimals ) external;\n  function stakeHoldersImported (  ) external view returns ( uint256 );\n  function stakeHoldersImportedSet ( uint256 _stakeHoldersImported ) external;\n  function stakeHoldersListIndex ( address ) external view returns ( uint256 );\n  function stakeHoldersListIndexSet ( address _address, uint256 _stakeHoldersListIndex ) external;\n  function stakeMneBurnCount (  ) external view returns ( uint256 );\n  function stakeMneBurnCountSet ( uint256 _stakeMneBurnCount ) external;\n  function stakeMneTransferBurnCount (  ) external view returns ( uint256 );\n  function stakeMneTransferBurnCountSet ( uint256 _stakeMneTransferBurnCount ) external;\n  function stakesForSaleIndex ( address ) external view returns ( uint256 );\n  function stakesForSaleIndexSet ( address _address, uint256 _stakesForSaleIndex ) external;\n  function tokenCreated ( address, uint256 ) external view returns ( address );\n  function tokenCreatedSet ( address _address, address _tokenCreated ) external;\n  function tokenICOCreated ( address, uint256 ) external view returns ( address );\n  function tokenICOCreatedSet ( address _address, address _tokenICOCreated ) external;\n  function totalMaxAvailableAmount (  ) external view returns ( uint256 );\n  function totalMaxAvailableAmountSet ( uint256 _totalMaxAvailableAmount ) external;\n  function totalPaidStakeHolders (  ) external view returns ( uint256 );\n  function totalPaidStakeHoldersSet ( uint256 _totalPaidStakeHolders ) external;\n  function transferStakeGenesisCount (  ) external view returns ( uint256 );\n  function transferStakeGenesisCountSet ( uint256 _transferStakeGenesisCount ) external;\n  function transferStakeMNECount (  ) external view returns ( uint256 );\n  function transferStakeMNECountSet ( uint256 _transferStakeMNECount ) external;\n}\n\ninterface publicArrays {  \n  function Level1TradeHistoryAmountETH ( uint256 ) external view returns ( uint256 );\n  function Level1TradeHistoryAmountETHFee ( uint256 ) external view returns ( uint256 );\n  function Level1TradeHistoryAmountETHFeeLength (  ) external view returns ( uint256 len );\n  function Level1TradeHistoryAmountETHFeeSet ( uint256 _Level1TradeHistoryAmountETHFee ) external;\n  function Level1TradeHistoryAmountETHLength (  ) external view returns ( uint256 len );\n  function Level1TradeHistoryAmountETHSet ( uint256 _Level1TradeHistoryAmountETH ) external;\n  function Level1TradeHistoryAmountMNE ( uint256 ) external view returns ( uint256 );\n  function Level1TradeHistoryAmountMNELength (  ) external view returns ( uint256 len );\n  function Level1TradeHistoryAmountMNESet ( uint256 _Level1TradeHistoryAmountMNE ) external;\n  function Level1TradeHistoryBuyer ( uint256 ) external view returns ( address );\n  function Level1TradeHistoryBuyerLength (  ) external view returns ( uint256 len );\n  function Level1TradeHistoryBuyerSet ( address _Level1TradeHistoryBuyer ) external;\n  function Level1TradeHistoryDate ( uint256 ) external view returns ( uint256 );\n  function Level1TradeHistoryDateLength (  ) external view returns ( uint256 len );\n  function Level1TradeHistoryDateSet ( uint256 _Level1TradeHistoryDate ) external;\n  function Level1TradeHistorySeller ( uint256 ) external view returns ( address );\n  function Level1TradeHistorySellerLength (  ) external view returns ( uint256 len );\n  function Level1TradeHistorySellerSet ( address _Level1TradeHistorySeller ) external;\n  function Level2TradeHistoryAmountETH ( uint256 ) external view returns ( uint256 );\n  function Level2TradeHistoryAmountETHFee ( uint256 ) external view returns ( uint256 );\n  function Level2TradeHistoryAmountETHFeeLength (  ) external view returns ( uint256 len );\n  function Level2TradeHistoryAmountETHFeeSet ( uint256 _Level2TradeHistoryAmountETHFee ) external;\n  function Level2TradeHistoryAmountETHLength (  ) external view returns ( uint256 len );\n  function Level2TradeHistoryAmountETHSet ( uint256 _Level2TradeHistoryAmountETH ) external;\n  function Level2TradeHistoryAmountMNE ( uint256 ) external view returns ( uint256 );\n  function Level2TradeHistoryAmountMNELength (  ) external view returns ( uint256 len );\n  function Level2TradeHistoryAmountMNESet ( uint256 _Level2TradeHistoryAmountMNE ) external;\n  function Level2TradeHistoryAvailableAmountMNE ( uint256 ) external view returns ( uint256 );\n  function Level2TradeHistoryAvailableAmountMNELength (  ) external view returns ( uint256 len );\n  function Level2TradeHistoryAvailableAmountMNESet ( uint256 _Level2TradeHistoryAvailableAmountMNE ) external;\n  function Level2TradeHistoryBuyer ( uint256 ) external view returns ( address );\n  function Level2TradeHistoryBuyerLength (  ) external view returns ( uint256 len );\n  function Level2TradeHistoryBuyerSet ( address _Level2TradeHistoryBuyer ) external;\n  function Level2TradeHistoryDate ( uint256 ) external view returns ( uint256 );\n  function Level2TradeHistoryDateLength (  ) external view returns ( uint256 len );\n  function Level2TradeHistoryDateSet ( uint256 _Level2TradeHistoryDate ) external;\n  function Level2TradeHistorySeller ( uint256 ) external view returns ( address );\n  function Level2TradeHistorySellerLength (  ) external view returns ( uint256 len );\n  function Level2TradeHistorySellerSet ( address _Level2TradeHistorySeller ) external;\n  function Level3TradeHistoryAmountETH ( uint256 ) external view returns ( uint256 );\n  function Level3TradeHistoryAmountETHFee ( uint256 ) external view returns ( uint256 );\n  function Level3TradeHistoryAmountETHFeeLength (  ) external view returns ( uint256 len );\n  function Level3TradeHistoryAmountETHFeeSet ( uint256 _Level3TradeHistoryAmountETHFee ) external;\n  function Level3TradeHistoryAmountETHLength (  ) external view returns ( uint256 len );\n  function Level3TradeHistoryAmountETHSet ( uint256 _Level3TradeHistoryAmountETH ) external;\n  function Level3TradeHistoryAmountMNE ( uint256 ) external view returns ( uint256 );\n  function Level3TradeHistoryAmountMNELength (  ) external view returns ( uint256 len );\n  function Level3TradeHistoryAmountMNESet ( uint256 _Level3TradeHistoryAmountMNE ) external;\n  function Level3TradeHistoryAvailableAmountMNE ( uint256 ) external view returns ( uint256 );\n  function Level3TradeHistoryAvailableAmountMNELength (  ) external view returns ( uint256 len );\n  function Level3TradeHistoryAvailableAmountMNESet ( uint256 _Level3TradeHistoryAvailableAmountMNE ) external;\n  function Level3TradeHistoryBuyer ( uint256 ) external view returns ( address );\n  function Level3TradeHistoryBuyerLength (  ) external view returns ( uint256 len );\n  function Level3TradeHistoryBuyerSet ( address _Level3TradeHistoryBuyer ) external;\n  function Level3TradeHistoryDate ( uint256 ) external view returns ( uint256 );\n  function Level3TradeHistoryDateLength (  ) external view returns ( uint256 len );\n  function Level3TradeHistoryDateSet ( uint256 _Level3TradeHistoryDate ) external;\n  function Level3TradeHistorySeller ( uint256 ) external view returns ( address );\n  function Level3TradeHistorySellerLength (  ) external view returns ( uint256 len );\n  function Level3TradeHistorySellerSet ( address _Level3TradeHistorySeller ) external;\n  function MNETradeHistoryAmountETH ( uint256 ) external view returns ( uint256 );\n  function MNETradeHistoryAmountETHFee ( uint256 ) external view returns ( uint256 );\n  function MNETradeHistoryAmountETHFeeLength (  ) external view returns ( uint256 len );\n  function MNETradeHistoryAmountETHFeeSet ( uint256 _MNETradeHistoryAmountETHFee ) external;\n  function MNETradeHistoryAmountETHLength (  ) external view returns ( uint256 len );\n  function MNETradeHistoryAmountETHSet ( uint256 _MNETradeHistoryAmountETH ) external;\n  function MNETradeHistoryAmountMNE ( uint256 ) external view returns ( uint256 );\n  function MNETradeHistoryAmountMNELength (  ) external view returns ( uint256 len );\n  function MNETradeHistoryAmountMNESet ( uint256 _MNETradeHistoryAmountMNE ) external;\n  function MNETradeHistoryBuyer ( uint256 ) external view returns ( address );\n  function MNETradeHistoryBuyerLength (  ) external view returns ( uint256 len );\n  function MNETradeHistoryBuyerSet ( address _MNETradeHistoryBuyer ) external;\n  function MNETradeHistoryDate ( uint256 ) external view returns ( uint256 );\n  function MNETradeHistoryDateLength (  ) external view returns ( uint256 len );\n  function MNETradeHistoryDateSet ( uint256 _MNETradeHistoryDate ) external;\n  function MNETradeHistorySeller ( uint256 ) external view returns ( address );\n  function MNETradeHistorySellerLength (  ) external view returns ( uint256 len );\n  function MNETradeHistorySellerSet ( address _MNETradeHistorySeller ) external;\n  function StakeTradeHistoryBuyer ( uint256 ) external view returns ( address );\n  function StakeTradeHistoryBuyerLength (  ) external view returns ( uint256 len );\n  function StakeTradeHistoryBuyerSet ( address _StakeTradeHistoryBuyer ) external;\n  function StakeTradeHistoryDate ( uint256 ) external view returns ( uint256 );\n  function StakeTradeHistoryDateLength (  ) external view returns ( uint256 len );\n  function StakeTradeHistoryDateSet ( uint256 _StakeTradeHistoryDate ) external;\n  function StakeTradeHistoryETHFee ( uint256 ) external view returns ( uint256 );\n  function StakeTradeHistoryETHFeeLength (  ) external view returns ( uint256 len );\n  function StakeTradeHistoryETHFeeSet ( uint256 _StakeTradeHistoryETHFee ) external;\n  function StakeTradeHistoryETHPrice ( uint256 ) external view returns ( uint256 );\n  function StakeTradeHistoryETHPriceLength (  ) external view returns ( uint256 len );\n  function StakeTradeHistoryETHPriceSet ( uint256 _StakeTradeHistoryETHPrice ) external;\n  function StakeTradeHistoryMNEGenesisBurned ( uint256 ) external view returns ( uint256 );\n  function StakeTradeHistoryMNEGenesisBurnedLength (  ) external view returns ( uint256 len );\n  function StakeTradeHistoryMNEGenesisBurnedSet ( uint256 _StakeTradeHistoryMNEGenesisBurned ) external;\n  function StakeTradeHistorySeller ( uint256 ) external view returns ( address );\n  function StakeTradeHistorySellerLength (  ) external view returns ( uint256 len );\n  function StakeTradeHistorySellerSet ( address _StakeTradeHistorySeller ) external;\n  function StakeTradeHistoryStakeAmount ( uint256 ) external view returns ( uint256 );\n  function StakeTradeHistoryStakeAmountLength (  ) external view returns ( uint256 len );\n  function StakeTradeHistoryStakeAmountSet ( uint256 _StakeTradeHistoryStakeAmount ) external;\n  function deleteGenesisAddressesForSaleLevel1 (  ) external;\n  function deleteGenesisAddressesForSaleLevel2 (  ) external;\n  function deleteGenesisAddressesForSaleLevel3 (  ) external;\n  function deleteNormalAddressesForSale (  ) external;\n  function deleteStakeHoldersList (  ) external;\n  function deleteStakesForSale (  ) external;\n  function genesisAddressesForSaleLevel1 ( uint256 ) external view returns ( address );\n  function genesisAddressesForSaleLevel1Length (  ) external view returns ( uint256 len );\n  function genesisAddressesForSaleLevel1Set ( address _genesisAddressesForSaleLevel1 ) external;\n  function genesisAddressesForSaleLevel1SetAt ( uint256 i, address _address ) external;\n  function genesisAddressesForSaleLevel2 ( uint256 ) external view returns ( address );\n  function genesisAddressesForSaleLevel2Length (  ) external view returns ( uint256 len );\n  function genesisAddressesForSaleLevel2Set ( address _genesisAddressesForSaleLevel2 ) external;\n  function genesisAddressesForSaleLevel2SetAt ( uint256 i, address _address ) external;\n  function genesisAddressesForSaleLevel3 ( uint256 ) external view returns ( address );\n  function genesisAddressesForSaleLevel3Length (  ) external view returns ( uint256 len );\n  function genesisAddressesForSaleLevel3Set ( address _genesisAddressesForSaleLevel3 ) external;\n  function genesisAddressesForSaleLevel3SetAt ( uint256 i, address _address ) external;\n  function normalAddressesForSale ( uint256 ) external view returns ( address );\n  function normalAddressesForSaleLength (  ) external view returns ( uint256 len );\n  function normalAddressesForSaleSet ( address _normalAddressesForSale ) external;\n  function normalAddressesForSaleSetAt ( uint256 i, address _address ) external;\n  function ownerGenesis (  ) external view returns ( address );\n  function ownerGenesisBuys (  ) external view returns ( address );\n  function ownerMain (  ) external view returns ( address );\n  function ownerNormalAddress (  ) external view returns ( address );\n  function ownerStakeBuys (  ) external view returns ( address );\n  function ownerStakes (  ) external view returns ( address );\n  function setOwnerGenesis (  ) external;\n  function setOwnerGenesisBuys (  ) external;\n  function setOwnerMain (  ) external;\n  function setOwnerNormalAddress (  ) external;\n  function setOwnerStakeBuys (  ) external;\n  function setOwnerStakes (  ) external;\n  function stakeHoldersList ( uint256 ) external view returns ( address );\n  function stakeHoldersListAt ( uint256 i, address _address ) external;\n  function stakeHoldersListLength (  ) external view returns ( uint256 len );\n  function stakeHoldersListSet ( address _stakeHoldersList ) external;\n  function stakesForSale ( uint256 ) external view returns ( address );\n  function stakesForSaleLength (  ) external view returns ( uint256 len );\n  function stakesForSaleSet ( address _stakesForSale ) external;\n  function stakesForSaleSetAt ( uint256 i, address _address ) external;\n}\n\ninterface genesisCalls {\n  function AllowAddressToDestroyGenesis ( address _from, address _address ) external;\n  function AllowReceiveGenesisTransfers ( address _from ) external;\n  function BurnTokens ( address _from, uint256 mneToBurn ) external returns ( bool success );\n  function RemoveAllowAddressToDestroyGenesis ( address _from ) external;\n  function RemoveAllowReceiveGenesisTransfers ( address _from ) external;\n  function RemoveGenesisAddressFromSale ( address _from ) external;\n  function SetGenesisForSale ( address _from, uint256 weiPrice ) external;\n  function TransferGenesis ( address _from, address _to ) external;\n  function UpgradeToLevel2FromLevel1 ( address _address, uint256 weiValue ) external;\n  function UpgradeToLevel3FromDev ( address _address ) external;\n  function UpgradeToLevel3FromLevel1 ( address _address, uint256 weiValue ) external;\n  function UpgradeToLevel3FromLevel2 ( address _address, uint256 weiValue ) external;\n  function availableBalanceOf ( address _address ) external view returns ( uint256 Balance );\n  function balanceOf ( address _address ) external view returns ( uint256 balance );\n  function deleteAddressFromGenesisSaleList ( address _address ) external;\n  function isAnyGenesisAddress ( address _address ) external view returns ( bool success );\n  function isGenesisAddressLevel1 ( address _address ) external view returns ( bool success );\n  function isGenesisAddressLevel2 ( address _address ) external view returns ( bool success );\n  function isGenesisAddressLevel2Or3 ( address _address ) external view returns ( bool success );\n  function isGenesisAddressLevel3 ( address _address ) external view returns ( bool success );\n  function ownerGenesis (  ) external view returns ( address );\n  function ownerGenesisBuys (  ) external view returns ( address );\n  function ownerMain (  ) external view returns ( address );\n  function ownerNormalAddress (  ) external view returns ( address );\n  function ownerStakeBuys (  ) external view returns ( address );\n  function ownerStakes (  ) external view returns ( address );\n  function setGenesisCallerAddress ( address _caller ) external returns ( bool success );\n  function setOwnerGenesisBuys (  ) external;\n  function setOwnerMain (  ) external;\n  function setOwnerNormalAddress (  ) external;\n  function setOwnerStakeBuys (  ) external;\n  function setOwnerStakes (  ) external;\n  function BurnGenesisAddresses ( address _from, address[] calldata _genesisAddressesToBurn ) external;\n}\n\ninterface normalAddress {\n  function BuyNormalAddress ( address _from, address _address, uint256 _msgvalue ) external returns ( uint256 _totalToSend );\n  function RemoveNormalAddressFromSale ( address _address ) external;\n  function setBalanceNormalAddress ( address _from, address _address, uint256 balance ) external;\n  function SetNormalAddressForSale ( address _from, uint256 weiPricePerMNE ) external;\n  function setOwnerMain (  ) external;\n  function ownerMain (  ) external view returns ( address );\n}\n\ninterface stakes {\n  function RemoveStakeFromSale ( address _from ) external;\n  function SetStakeForSale ( address _from, uint256 priceInWei ) external;\n  function StakeTransferGenesis ( address _from, address _to, uint256 _value, address[] calldata _genesisAddressesToBurn ) external;\n  function StakeTransferMNE ( address _from, address _to, uint256 _value ) external returns ( uint256 _mneToBurn );\n  function ownerMain (  ) external view returns ( address );\n  function setBalanceStakes ( address _from, address _address, uint256 balance ) external;\n  function setOwnerMain (  ) external;\n}\n\ninterface stakeBuys {\n  function BuyStakeGenesis ( address _from, address _address, address[] calldata _genesisAddressesToBurn, uint256 _msgvalue ) external returns ( uint256 _feesToPayToSeller );\n  function BuyStakeMNE ( address _from, address _address, uint256 _msgvalue ) external returns ( uint256 _mneToBurn, uint256 _feesToPayToSeller );\n  function ownerMain (  ) external view returns ( address );\n  function setOwnerMain (  ) external;\n}\n\ninterface genesisBuys {\n  function BuyGenesisLevel1FromNormal ( address _from, address _address, uint256 _msgvalue ) external returns ( uint256 _totalToSend );\n  function BuyGenesisLevel2FromNormal ( address _from, address _address, uint256 _msgvalue ) external returns ( uint256 _totalToSend );\n  function BuyGenesisLevel3FromNormal ( address _from, address _address, uint256 _msgvalue ) external returns ( uint256 _totalToSend );\n  function ownerMain (  ) external view returns ( address );\n  function setOwnerMain (  ) external;\n}\n\ninterface tokenService {\n  function CreateToken ( address _from, uint256 _msgvalue ) external returns ( uint256 _mneToBurn, address _contract );\n  function CreateTokenICO ( address _from, uint256 _msgvalue ) external returns ( uint256 _mneToBurn, address _contract );\n  function ownerMain (  ) external view returns ( address );\n  function setOwnerMain (  ) external;\n}\n\ninterface baseTransfers {\n\tfunction setOwnerMain (  ) external;\n\tfunction transfer ( address _from, address _to, uint256 _value ) external;\n\tfunction transferFrom ( address _sender, address _from, address _to, uint256 _amount ) external returns ( bool success );\n\tfunction stopSetup ( address _from ) external returns ( bool success );\n\tfunction totalSupply (  ) external view returns ( uint256 TotalSupply );\n}\n\ninterface mneStaking {\n\tfunction startStaking(address _sender, uint256 _amountToStake, address[] calldata _addressList, uint256[] calldata uintList) external;\n}\n\ninterface luckyDraw {\n\tfunction BuyTickets(address _sender, uint256 _value, uint256[] calldata _max) external returns ( uint256 );\n}\n\ninterface externalService {\n\tfunction externalFunction(address _sender, uint256 _value, address[] calldata _addressList, uint256[] calldata _uintList) external returns ( uint256 );\n}\n\ninterface externalReceiver {\n\tfunction externalFunction(address _sender, uint256 _value, uint256 _mneAmount, address[] calldata _addressList, uint256[] calldata _uintList) external;\n}\n\ncontract Minereum { \nstring public name; \nstring public symbol; \nuint8 public decimals; \n\nevent Transfer(address indexed from, address indexed to, uint256 value);\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\nevent LogStakeHolderSends(address indexed to, uint balance, uint amountToSend);\nevent LogFailedStakeHolderSends(address indexed to, uint balance, uint amountToSend);\nevent TokenCreation(address indexed from, address contractAdd);\nevent TokenCreationICO(address indexed from, address  contractAdd);\nevent StakeTransfer(address indexed from, address indexed to, uint256 value);\n\npublicCalls public pc;\npublicArrays public pa;\ngenesisCalls public gn;\nnormalAddress public na;\nstakes public st;\nstakeBuys public stb;\ngenesisBuys public gnb;\ntokenService public tks;\nbaseTransfers public bst;\nmneStaking public mneStk;\nluckyDraw public lkd;\nexternalService public extS1;\nexternalService public extS2;\nexternalReceiver public extR1;\n\naddress public updaterAddress = 0x0000000000000000000000000000000000000000;\nfunction setUpdater() public {if (updaterAddress == 0x0000000000000000000000000000000000000000) updaterAddress = msg.sender; else revert();}\naddress public payoutOwner = 0x0000000000000000000000000000000000000000;\nbool public payoutBlocked = false;\naddress payable public secondaryPayoutAddress = 0x0000000000000000000000000000000000000000;\n\nconstructor(address _publicCallsAddress, address _publicArraysAddress, address _genesisCallsAddress, address _normalAddressAddress,\n address _stakesAddress, address _stakesBuysAddress,address _genesisBuysAddress, address _tokenServiceAddress, address _baseTransfersAddress) public {\nname = \"Minereum\"; \nsymbol = \"MNE\"; \ndecimals = 8; \nsetUpdater();\npc = publicCalls(_publicCallsAddress);\npc.setOwnerMain();\npa = publicArrays(_publicArraysAddress);\npa.setOwnerMain();\ngn = genesisCalls(_genesisCallsAddress);\ngn.setOwnerMain();\nna = normalAddress(_normalAddressAddress);\nna.setOwnerMain();\nst = stakes(_stakesAddress);\nst.setOwnerMain();\nstb = stakeBuys(_stakesBuysAddress);\nstb.setOwnerMain();\ngnb = genesisBuys(_genesisBuysAddress);\ngnb.setOwnerMain();\ntks = tokenService(_tokenServiceAddress);\ntks.setOwnerMain();\nbst = baseTransfers(_baseTransfersAddress);\nbst.setOwnerMain();\npc.initialBlockCountSet(block.number);\npc.overallSupplySet(0);\npc.genesisSalesCountSet(0);\npc.genesisSalesPriceCountSet(0);\npc.genesisTransfersCountSet(0);\npc.setupRunningSet(true);\npc.genesisCallerAddressSet(0x0000000000000000000000000000000000000000);\n}\n\nfunction reloadGenesis(address _address) public { if (msg.sender == updaterAddress)\t{gn = genesisCalls(_address); gn.setOwnerMain(); } else revert();}\nfunction reloadNormalAddress(address _address) public { if (msg.sender == updaterAddress)\t{na = normalAddress(_address); na.setOwnerMain(); } else revert();}\nfunction reloadStakes(address _address) public { if (msg.sender == updaterAddress)\t{st = stakes(_address); st.setOwnerMain(); } else revert();}\nfunction reloadStakeBuys(address _address) public { if (msg.sender == updaterAddress)\t{stb = stakeBuys(_address); stb.setOwnerMain(); } else revert();}\nfunction reloadGenesisBuys(address _address) public { if (msg.sender == updaterAddress)\t{gnb = genesisBuys(_address); gnb.setOwnerMain(); } else revert();}\nfunction reloadTokenService(address _address) public { if (msg.sender == updaterAddress)\t{tks = tokenService(_address); tks.setOwnerMain(); } else revert();}\nfunction reloadBaseTransfers(address _address) public { if (msg.sender == updaterAddress)\t{bst = baseTransfers(_address); bst.setOwnerMain(); } else revert();}\nfunction reloadPublicCalls(address _address, uint code) public { if (!(code == 1234)) revert();  if (msg.sender == updaterAddress)\t{pc = publicCalls(_address); pc.setOwnerMain();} else revert();}\nfunction reloadPublicArrays(address _address, uint code) public { if (!(code == 1234)) revert();  if (msg.sender == updaterAddress)\t{pa = publicArrays(_address); pa.setOwnerMain();} else revert();}\nfunction loadMNEStaking(address _address) public { if (msg.sender == updaterAddress)\t{mneStk = mneStaking(_address); } else revert();}\nfunction loadLuckyDraw(address _address) public { if (msg.sender == updaterAddress)\t{lkd = luckyDraw(_address); } else revert();}\n\nfunction externalService1(address _address) public { if (msg.sender == updaterAddress)\t{extS1 = externalService(_address); } else revert();}\nfunction externalService2(address _address) public { if (msg.sender == updaterAddress)\t{extS2 = externalService(_address); } else revert();}\n\nfunction externalReceiver1(address _address) public { if (msg.sender == updaterAddress)\t{extR1 = externalReceiver(_address); } else revert();}\n\n\nfunction setPayoutOwner() public\n{\n\tif(payoutOwner == 0x0000000000000000000000000000000000000000)\n\t\tpayoutOwner = msg.sender;\n\telse\n\t\trevert();\n}\n\nfunction setSecondaryPayoutAddress(address payable _address) public\n{\n\tif(msg.sender == payoutOwner)\n\t\tsecondaryPayoutAddress = _address;\n\telse\n\t\trevert();\n}\n\nfunction SetBlockPayouts(bool toBlock) public\n{\n\tif(msg.sender == payoutOwner)\n\t{\n\t\tpayoutBlocked = toBlock;\n\t}\n}\n\n\nfunction currentEthBlock() public view returns (uint256 blockNumber) \n{\n\treturn block.number;\n}\n\nfunction currentBlock() public view returns (uint256 blockNumber)\n{\n\treturn block.number - pc.initialBlockCount();\n}\n\nfunction availableBalanceOf(address _address) public view returns (uint256 Balance)\n{\n\treturn gn.availableBalanceOf(_address);\n}\n\nfunction totalSupply() public view returns (uint256 TotalSupply)\n{\t\n\treturn bst.totalSupply();\n}\n\nfunction transfer(address _to, uint256 _value)  public { \nif (_to == address(this)) revert('if (_to == address(this))');\nbst.transfer(msg.sender, _to, _value);\nemit Transfer(msg.sender, _to, _value); \n}\n\nfunction transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n) public returns (bool success) {\n\t\tbool result = bst.transferFrom(msg.sender, _from, _to, _amount);\n        if (result) emit Transfer(_from, _to, _amount);\n        return result;    \n}\n\nfunction approve(address _spender, uint256 _amount) public returns (bool success) {\n    pc.allowedSet(msg.sender,_spender, _amount);\n    emit Approval(msg.sender, _spender, _amount);\n    return true;\n}\n\nfunction allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n    return pc.allowed(_owner,_spender);\n}\n\nfunction balanceOf(address _address) public view returns (uint256 balance) {\n\treturn gn.balanceOf(_address);\n}\n\nfunction stakeBalanceOf(address _address) public view returns (uint256 balance) {\n\treturn pc.stakeBalances(_address);\n}\n\nfunction TransferGenesis(address _to) public {\n\temit Transfer(msg.sender, _to, balanceOf(msg.sender));\t\n\tif (_to == address(this)) revert('if (_to == address(this))');\t\n\tgn.TransferGenesis(msg.sender, _to);\t\n}\n\nfunction SetGenesisForSale(uint256 weiPrice) public {\t\n\tgn.SetGenesisForSale(msg.sender, weiPrice);\n}\n\nfunction AllowReceiveGenesisTransfers() public { \n\tgn.AllowReceiveGenesisTransfers(msg.sender);\n}\n\nfunction RemoveAllowReceiveGenesisTransfers() public { \n\tgn.RemoveAllowReceiveGenesisTransfers(msg.sender);\n}\n\nfunction RemoveGenesisAddressFromSale() public { \n\tgn.RemoveGenesisAddressFromSale(msg.sender);\n}\n\nfunction AllowAddressToDestroyGenesis(address _address) public  { \n\tgn.AllowAddressToDestroyGenesis(msg.sender, _address);\n}\n\nfunction RemoveAllowAddressToDestroyGenesis() public { \n\tgn.RemoveAllowAddressToDestroyGenesis(msg.sender);\n}\n\nfunction UpgradeToLevel2FromLevel1() public payable {\n\tgn.UpgradeToLevel2FromLevel1(msg.sender, msg.value);\n}\n\nfunction UpgradeToLevel3FromLevel1() public payable {\n\tgn.UpgradeToLevel3FromLevel1(msg.sender, msg.value);\n}\n\nfunction UpgradeToLevel3FromLevel2() public payable {\n\tgn.UpgradeToLevel3FromLevel2(msg.sender, msg.value);\n}\n\nfunction UpgradeToLevel3FromDev() public {\n\tgn.UpgradeToLevel3FromDev(msg.sender);\n}\n\nfunction UpgradeOthersToLevel2FromLevel1(address[] memory _addresses) public payable {\n\tuint count = _addresses.length;\n\tif (msg.value != (pc.ethFeeToUpgradeToLevel2()*count)) revert('(msg.value != pc.ethFeeToUpgradeToLevel2()*count)');\n\tuint i = 0;\n\twhile (i < count)\n\t{\n\t\tgn.UpgradeToLevel2FromLevel1(_addresses[i], pc.ethFeeToUpgradeToLevel2());\n\t\ti++;\n\t}\n}\n\nfunction UpgradeOthersToLevel3FromLevel1(address[] memory _addresses) public payable {\n\tuint count = _addresses.length;\n\tif (msg.value != ((pc.ethFeeToUpgradeToLevel2() + pc.ethFeeToUpgradeToLevel3())*count)) revert('(weiValue != ((msg.value + pc.ethFeeToUpgradeToLevel3())*count))');\n\tuint i = 0;\n\twhile (i < count)\n\t{\n\t\tgn.UpgradeToLevel3FromLevel1(_addresses[i], (pc.ethFeeToUpgradeToLevel2() + pc.ethFeeToUpgradeToLevel3()));\n\t\ti++;\n\t}\n}\n\nfunction UpgradeOthersToLevel3FromLevel2(address[] memory _addresses) public payable {\n\tuint count = _addresses.length;\n\tif (msg.value != (pc.ethFeeToUpgradeToLevel3()*count)) revert('(msg.value != (pc.ethFeeToUpgradeToLevel3()*count))');\n\tuint i = 0;\n\twhile (i < count)\n\t{\n\t\tgn.UpgradeToLevel3FromLevel2(_addresses[i], pc.ethFeeToUpgradeToLevel3());\n\t\ti++;\n\t}\n}\n\nfunction UpgradeOthersToLevel3FromDev(address[] memory _addresses) public {\n\tuint count = _addresses.length;\t\n\tuint i = 0;\n\twhile (i < count)\n\t{\n\t\tgn.UpgradeToLevel3FromDev(_addresses[i]);\n\t\ti++;\n\t}\n}\n\nfunction BuyGenesisAddress(address payable _address) public payable\n{\n\tif (gn.isGenesisAddressLevel1(_address))\n\t\tBuyGenesisLevel1FromNormal(_address);\n\telse if (gn.isGenesisAddressLevel2(_address))\n\t\tBuyGenesisLevel2FromNormal(_address);\n\telse if (gn.isGenesisAddressLevel3(_address))\n\t\tBuyGenesisLevel3FromNormal(_address);\n\telse\n\t\trevert('Address not for sale');\n}\n\nfunction SetNormalAddressForSale(uint256 weiPricePerMNE) public {\t\n\tna.SetNormalAddressForSale(msg.sender, weiPricePerMNE);\n}\n\nfunction RemoveNormalAddressFromSale() public\n{\n\tna.RemoveNormalAddressFromSale(msg.sender);\n}\n\nfunction BuyNormalAddress(address payable _address) public payable{\n\temit Transfer(_address, msg.sender, balanceOf(_address));\n\tuint256 feesToPayToSeller = na.BuyNormalAddress(msg.sender, address(_address), msg.value);\t\t\t\t\n\tif(!_address.send(feesToPayToSeller)) revert('(!_address.send(feesToPayToSeller))');\t\t\n}\n\nfunction setBalanceNormalAddress(address _address, uint256 _balance) public\n{\n\tna.setBalanceNormalAddress(msg.sender, _address, _balance);\n\temit Transfer(address(this), _address, _balance); \n}\n\nfunction ContractTransferAllFundsOut() public\n{\n\t//in case of hack, funds can be transfered out to another addresses and transferred to the stake holders from there\n\tif (payoutBlocked)\n\t\tif(!secondaryPayoutAddress.send(address(this).balance)) revert();\n}\n\nfunction PayoutStakeHolders() public {\n\trequire(msg.sender == tx.origin); //For security reasons this line is to prevent smart contract calls\n\tif (payoutBlocked) revert('Payouts Blocked'); //In case of hack, payouts can be blocked\n\tuint contractBalance = address(this).balance;\n\tif (!(contractBalance > 0)) revert('(!(contractBalance > 0))');\n\tuint i;\n\tuint max;\n\t\n\ti = 0;\n\tmax = pa.stakeHoldersListLength();\n\n\twhile (i < max)\n\t{\n\t\taddress payable add = payable(pa.stakeHoldersList(i));\n\t\tuint balance = pc.stakeBalances(add);\n\t\tuint amountToSend = contractBalance * balance / pc.stakeDecimals();\n\t\tif (amountToSend > 0)\n\t\t{\n\t\t\tif (!add.send(amountToSend))\n\t\t\t\temit LogFailedStakeHolderSends(add, balance, amountToSend);\n\t\t\telse\n\t\t\t{\n\t\t\t\tpc.totalPaidStakeHoldersSet(pc.totalPaidStakeHolders() + amountToSend);\t\t\t\t\n\t\t\t}\t\t\t\n\t\t}\n\t\ti++;\n\t}\n}\n\nfunction stopSetup() public returns (bool success)\n{\n\treturn bst.stopSetup(msg.sender);\n}\n\nfunction BurnTokens(uint256 mneToBurn) public returns (bool success) {\t\n\tgn.BurnTokens(msg.sender, mneToBurn);\n\temit Transfer(msg.sender, 0x0000000000000000000000000000000000000000, mneToBurn);\n\treturn true;\n}\n\nfunction SetStakeForSale(uint256 priceInWei) public\n{\t\n\tst.SetStakeForSale(msg.sender, priceInWei);\n}\n\nfunction RemoveStakeFromSale() public {\n\tst.RemoveStakeFromSale(msg.sender);\n}\n\nfunction StakeTransferMNE(address _to, uint256 _value) public {\n\tif (_to == address(this)) revert('if (_to == address(this))');\n\tBurnTokens(st.StakeTransferMNE(msg.sender, _to, _value));\n\temit StakeTransfer(msg.sender, _to, _value); \n}\n\nfunction BurnGenesisAddresses(address[] memory _genesisAddressesToBurn) public\n{\n\tuint i = 0;\t\n\twhile(i < _genesisAddressesToBurn.length)\n\t{\n\t\temit Transfer(_genesisAddressesToBurn[i], 0x0000000000000000000000000000000000000000, balanceOf(_genesisAddressesToBurn[i]));\n\t\ti++;\n\t}\n\tgn.BurnGenesisAddresses(msg.sender, _genesisAddressesToBurn);\t\n}\n\nfunction StakeTransferGenesis(address _to, uint256 _value, address[] memory _genesisAddressesToBurn) public {\n\tif (_to == address(this)) revert('if (_to == address(this))');\n\tuint i = 0;\t\n\twhile(i < _genesisAddressesToBurn.length)\n\t{\n\t\temit Transfer(_genesisAddressesToBurn[i], 0x0000000000000000000000000000000000000000, balanceOf(_genesisAddressesToBurn[i]));\n\t\ti++;\n\t}\n\tst.StakeTransferGenesis(msg.sender, _to, _value, _genesisAddressesToBurn);\t\n\temit StakeTransfer(msg.sender, _to, _value); \n}\n\nfunction setBalanceStakes(address _address, uint256 balance) public {\n\tst.setBalanceStakes(msg.sender, _address, balance);\n}\n\nfunction BuyGenesisLevel1FromNormal(address payable _address) public payable {\n\temit Transfer(_address, msg.sender, balanceOf(_address));\n\tuint256 feesToPayToSeller = gnb.BuyGenesisLevel1FromNormal(msg.sender, address(_address), msg.value);\n\tif(!_address.send(feesToPayToSeller)) revert('(!_address.send(feesToPayToSeller))');\t\t\t\t\n}\n\nfunction BuyGenesisLevel2FromNormal(address payable _address) public payable{\n\temit Transfer(_address, msg.sender, balanceOf(_address));\n\tuint256 feesToPayToSeller = gnb.BuyGenesisLevel2FromNormal(msg.sender, address(_address), msg.value);\t\n\tif(!_address.send(feesToPayToSeller)) revert('(!_address.send(feesToPayToSeller))');\t\n}\n\nfunction BuyGenesisLevel3FromNormal(address payable _address) public payable{\n\temit Transfer(_address, msg.sender, balanceOf(_address));\n\tuint256 feesToPayToSeller = gnb.BuyGenesisLevel3FromNormal(msg.sender, address(_address), msg.value);\t\n\tif(!_address.send(feesToPayToSeller)) revert('(!_address.send(feesToPayToSeller))');\t\t\n}\n\nfunction BuyStakeMNE(address payable _address) public payable {\n\tuint256 balanceToSend = pc.stakeBalances(_address);\n\t(uint256 mneToBurn, uint256 feesToPayToSeller) = stb.BuyStakeMNE(msg.sender, address(_address), msg.value);\n\tBurnTokens(mneToBurn);\n\tif(!_address.send(feesToPayToSeller)) revert('(!_address.send(feesToPayToSeller))');\t\n\temit StakeTransfer(_address, msg.sender, balanceToSend); \n}\n\nfunction BuyStakeGenesis(address payable _address, address[] memory _genesisAddressesToBurn) public payable {\n\tuint256 balanceToSend = pc.stakeBalances(_address);\n\tuint i = 0;\n\twhile(i < _genesisAddressesToBurn.length)\n\t{\n\t\temit Transfer(_genesisAddressesToBurn[i], 0x0000000000000000000000000000000000000000, balanceOf(_genesisAddressesToBurn[i]));\n\t\ti++;\n\t}\n\tuint256 feesToPayToSeller = stb.BuyStakeGenesis(msg.sender, address(_address), _genesisAddressesToBurn, msg.value);\n\tif(!_address.send(feesToPayToSeller)) revert();\t\t\n\temit StakeTransfer(_address, msg.sender, balanceToSend); \n}\n\nfunction CreateToken() public payable {\n\t(uint256 _mneToBurn, address tokenAdderss) = tks.CreateToken(msg.sender, msg.value);\n\tBurnTokens(_mneToBurn);\n\temit TokenCreation(msg.sender, tokenAdderss);\n}\n\nfunction CreateTokenICO() public payable {\n\t(uint256 _mneToBurn, address tokenAdderss) = tks.CreateTokenICO(msg.sender, msg.value);\n\tBurnTokens(_mneToBurn);\n\temit TokenCreationICO(msg.sender, tokenAdderss);\n}\n\nfunction Payment() public payable {\n\t\n}\n\nfunction BuyLuckyDrawTickets(uint256[] memory max) public payable {\n\tuint256 _mneToBurn = lkd.BuyTickets(msg.sender, msg.value, max);\n\tif (_mneToBurn > 0) BurnTokens(_mneToBurn);\t\n}\n\nfunction Staking(uint256 _amountToStake, address[] memory _addressList, uint256[] memory uintList) public {\n\tif (_amountToStake > 0)\n\t{\n\t\tbst.transfer(msg.sender, address(mneStk), _amountToStake);\n\t\temit Transfer(msg.sender, address(mneStk), _amountToStake); \n\t}\n\tmneStk.startStaking(msg.sender, _amountToStake, _addressList, uintList);\n}\n\nfunction isAnyGenesisAddress(address _address) public view returns (bool success) {\n\treturn gn.isAnyGenesisAddress(_address);\n}\n\nfunction isGenesisAddressLevel1(address _address) public view returns (bool success) {\n\treturn gn.isGenesisAddressLevel1(_address);\n}\n\nfunction isGenesisAddressLevel2(address _address) public view returns (bool success) {\n\treturn gn.isGenesisAddressLevel2(_address);\n}\n\nfunction isGenesisAddressLevel3(address _address) public view returns (bool success) {\n\treturn gn.isGenesisAddressLevel3(_address);\n}\n\nfunction isGenesisAddressLevel2Or3(address _address) public view returns (bool success) {\n\treturn gn.isGenesisAddressLevel2Or3(_address);\n}\n\nfunction registerAddresses(address[] memory _addressList) public {\n\tuint i = 0;\n\tif (pc.setupRunning() && msg.sender == pc.genesisCallerAddress())\n\t{\n\t\twhile(i < _addressList.length)\n\t\t{\n\t\t\temit Transfer(address(this), _addressList[i], gn.balanceOf(_addressList[i]));\n\t\t\ti++;\n\t\t}\n\t}\n\telse \n\t{\n\t\trevert();\n\t}\n}\n\nfunction ethFeeToUpgradeToLevel2Set(uint256 _ethFeeToUpgradeToLevel2) public {pc.ethFeeToUpgradeToLevel2Set(msg.sender, _ethFeeToUpgradeToLevel2);}\nfunction ethFeeToUpgradeToLevel3Set(uint256 _ethFeeToUpgradeToLevel3) public {pc.ethFeeToUpgradeToLevel3Set(msg.sender, _ethFeeToUpgradeToLevel3);}\nfunction ethFeeToBuyLevel1Set(uint256 _ethFeeToBuyLevel1) public {pc.ethFeeToBuyLevel1Set(msg.sender, _ethFeeToBuyLevel1);}\nfunction ethFeeForSellerLevel1Set(uint256 _ethFeeForSellerLevel1) public {pc.ethFeeForSellerLevel1Set(msg.sender, _ethFeeForSellerLevel1);}\nfunction ethFeeForTokenSet(uint256 _ethFeeForToken) public {pc.ethFeeForTokenSet(msg.sender, _ethFeeForToken);}\nfunction ethFeeForTokenICOSet(uint256 _ethFeeForTokenICO) public {pc.ethFeeForTokenICOSet(msg.sender, _ethFeeForTokenICO);}\nfunction ethPercentFeeGenesisExchangeSet(uint256 _ethPercentFeeGenesisExchange) public {pc.ethPercentFeeGenesisExchangeSet(msg.sender, _ethPercentFeeGenesisExchange);}\nfunction ethPercentFeeNormalExchangeSet(uint256 _ethPercentFeeNormalExchange) public {pc.ethPercentFeeNormalExchangeSet(msg.sender, _ethPercentFeeNormalExchange);}\nfunction ethPercentStakeExchangeSet(uint256 _ethPercentStakeExchange) public {pc.ethPercentStakeExchangeSet(msg.sender, _ethPercentStakeExchange);}\nfunction amountOfGenesisToBuyStakesSet(uint256 _amountOfGenesisToBuyStakes) public {pc.amountOfGenesisToBuyStakesSet(msg.sender, _amountOfGenesisToBuyStakes);}\nfunction amountOfMNEToBuyStakesSet(uint256 _amountOfMNEToBuyStakes) public {pc.amountOfMNEToBuyStakesSet(msg.sender, _amountOfMNEToBuyStakes);}\nfunction amountOfMNEForTokenSet(uint256 _amountOfMNEForToken) public {pc.amountOfMNEForTokenSet(msg.sender, _amountOfMNEForToken);}\nfunction amountOfMNEForTokenICOSet(uint256 _amountOfMNEForTokenICO) public {pc.amountOfMNEForTokenICOSet(msg.sender, _amountOfMNEForTokenICO);}\nfunction amountOfMNEToTransferStakesSet(uint256 _amountOfMNEToTransferStakes) public {pc.amountOfMNEToTransferStakesSet(msg.sender, _amountOfMNEToTransferStakes);}\nfunction amountOfGenesisToTransferStakesSet(uint256 _amountOfGenesisToTransferStakes) public {pc.amountOfGenesisToTransferStakesSet(msg.sender, _amountOfGenesisToTransferStakes);}\nfunction stakeDecimalsSet(uint256 _stakeDecimals) public {pc.stakeDecimalsSet(msg.sender, _stakeDecimals);}\n\n\nfunction ServiceFunction1(address[] memory _addressList, uint256[] memory _uintList) public payable {\n\tuint256 _mneToBurn = extS1.externalFunction(msg.sender, msg.value, _addressList, _uintList);\n\tif (_mneToBurn > 0) BurnTokens(_mneToBurn);\t\n}\n\nfunction ServiceFunction2(address[] memory _addressList, uint256[] memory _uintList) public payable {\n\tuint256 _mneToBurn = extS2.externalFunction(msg.sender, msg.value, _addressList, _uintList);\n\tif (_mneToBurn > 0) BurnTokens(_mneToBurn);\t\n}\n\n\nfunction ReceiverFunction1(uint256 _mneAmount, address[] memory _addressList, uint256[] memory _uintList, bool pay) public payable {\n\tif (_mneAmount > 0)\n\t{\n\t\tbst.transfer(msg.sender, address(extR1), _mneAmount);\n\t\temit Transfer(msg.sender, address(extR1), _mneAmount); \n\t}\n\textR1.externalFunction(msg.sender, msg.value, _mneAmount, _addressList, _uintList);\n\tif (pay && msg.value > 0) { if(!payable(address(extR1)).send(msg.value)) revert('eP'); }\t\n}\n}"}}}