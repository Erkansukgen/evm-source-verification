{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"localhost/RebasedSync.sol":{"content":"// SPDX-License-Identifier: MIT\n\n/*\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\npragma solidity ^0.6.0;\n\n\ninterface IRebasedPriceOracle {\n   function update() external;\n}\n\ninterface IBPool {\n      function gulp(address token) external;\n}\n\ninterface IUniswapV2Pair {\n    function sync() external;\n}\n\n/**\n * @title RebasedSync\n * @dev Helper functions for syncing the Oracle and notifying pools of balance changes.\n */\ncontract Sync {\n\n    IUniswapV2Pair constant UNISWAP = IUniswapV2Pair(0xa89004aA11CF28B34E125c63FBc56213fb663F70);\n    IBPool constant BALANCER_REB80WETH20 = IBPool(0x2961c01EB89D9af84c3859cE9E00E78efFcAB32F);\n    IRebasedPriceOracle oracle = IRebasedPriceOracle(0x30F3A87F95630B3bECCF353EEdEFc77800114d77);\n    \n    event OracleUpdated();\n\n    function syncAll() external {\n\n        // Update Oracle\n        \n        (bool success,) = address(oracle).call(abi.encodeWithSignature(\"update()\"));\n        \n        if (success) {\n            emit OracleUpdated();\n        }\n    \n       // Sync pools, revert if any of those calls fails.\n\n       UNISWAP.sync();\n       BALANCER_REB80WETH20.gulp(0xE6279E1c65DD41b30bA3760DCaC3CD8bbb4420D6);\n\n    } \n    \n}\n\n"}}}