{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/StrategyDai.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n\n//import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n//import \"@openzeppelin/contracts/math/SafeMath.sol\";\n//import \"@openzeppelin/contracts/math/Math.sol\";\n//\n//import \"../../../interface/IVault.sol\";\n//import \"../../../interface/USDT.sol\";\n//import \"../../../interface/Curve.sol\";\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n}\n\ninterface USDT {\n    function approve(address guy, uint256 wad) external;\n\n    function transfer(address _to, uint256 _value) external;\n\n    function transferFrom(address _from, address _to, uint256 _value) external;\n}\n\ninterface ICurveFi_4 {\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount) external;\n}\n\ninterface IVault {\n    function deposit(uint256) external;\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n}\n\nlibrary Math {\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\ncontract ToolUSDNMixed {\n    using SafeMath for uint256;\n\n    address public constant curve = 0x094d12e5b541784701FD8d65F11fc0598FBC6332;\n    // usdnCrv\n    address public constant want = 0x4f3E8F405CF5aFC05D68142F3783bDfE13811522;\n    // bUsdnCRV\n    address public constant bToken = 0x3855D251d8c154D173E8C59713dD6a618F2AF6d5;\n\n    // stablecoins\n    address public constant usdn = 0x674C6Ad92Fd080e4004b2312b45f796a192D27a0;\n    address public constant dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address public constant usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address public constant usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n\n    event Recycled(address indexed user, uint256 sentUsdn, uint256 sentDai, uint256 sentUsdc,\n        uint256 sentUsdt, uint256 sentWant, uint256 receivedBToken);\n\n    constructor() public {\n        IERC20(usdn).approve(curve, uint256(- 1));\n        IERC20(dai).approve(curve, uint256(- 1));\n        IERC20(usdc).approve(curve, uint256(- 1));\n        USDT(usdt).approve(curve, uint256(- 1));\n        IERC20(want).approve(bToken, uint256(- 1));\n    }\n\n    function recycleExactAmounts(address sender, uint256 _usdn, uint256 _dai, uint256 _usdc, uint256 _usdt, uint256 _want) internal {\n        if (_usdn > 0) {\n            IERC20(usdn).transferFrom(sender, address(this), _usdn);\n        }\n        if (_dai > 0) {\n            IERC20(dai).transferFrom(sender, address(this), _dai);\n        }\n        if (_usdc > 0) {\n            IERC20(usdc).transferFrom(sender, address(this), _usdc);\n        }\n        if (_usdt > 0) {\n            USDT(usdt).transferFrom(sender, address(this), _usdt);\n        }\n        if (_want > 0) {\n            IERC20(want).transferFrom(sender, address(this), _want);\n        }\n\n        uint256[4] memory depositAmounts = [_usdn, _dai, _usdc, _usdt];\n        if (_dai.add(_usdc).add(_usdt).add(_usdn) > 0) {\n            ICurveFi_4(curve).add_liquidity(depositAmounts, 0);\n        }\n\n        uint256 wantBalance = IERC20(want).balanceOf(address(this));\n        if (wantBalance > 0) {\n            IVault(bToken).deposit(wantBalance);\n        }\n\n        uint256 _bToken = IERC20(bToken).balanceOf(address(this));\n        if (_bToken > 0) {\n            IERC20(bToken).transfer(sender, _bToken);\n        }\n\n        assert(IERC20(bToken).balanceOf(address(this)) == 0);\n\n        emit Recycled(sender, _usdn, _dai, _usdc, _usdt, _want, _bToken);\n    }\n\n    function recycle() external {\n        uint256 _usdn = Math.min(IERC20(usdn).balanceOf(msg.sender), IERC20(usdn).allowance(msg.sender, address(this)));\n        uint256 _dai = Math.min(IERC20(dai).balanceOf(msg.sender), IERC20(dai).allowance(msg.sender, address(this)));\n        uint256 _usdc = Math.min(IERC20(usdc).balanceOf(msg.sender), IERC20(usdc).allowance(msg.sender, address(this)));\n        uint256 _usdt = Math.min(IERC20(usdt).balanceOf(msg.sender), IERC20(usdt).allowance(msg.sender, address(this)));\n        uint256 _want = Math.min(IERC20(want).balanceOf(msg.sender), IERC20(want).allowance(msg.sender, address(this)));\n\n        recycleExactAmounts(msg.sender, _usdn, _dai, _usdc, _usdt, _want);\n    }\n\n\n    function recycleExact(uint256 _usdn, uint256 _dai, uint256 _usdc, uint256 _usdt, uint256 _want) external {\n        recycleExactAmounts(msg.sender, _usdn, _dai, _usdc, _usdt, _want);\n    }\n}\n"
    }
  }
}