{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/Sniper.sol":{"content":"pragma solidity >=0.7.0 <0.9.0;\n\ninterface IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\ninterface IERC721 {\n    function mint(uint256 _mintAmount) external payable;\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n}\n\ncontract Sniper is IERC721Receiver {\n    address private immutable target;\n    address private immutable owner;\n\n    constructor(address _target) {\n        target = _target;\n        owner = msg.sender;\n    }\n\n    function snipe(uint256 count, uint256 ethPerMint) external payable {\n        for (uint256 i = 0; i < count; i++) {\n            IERC721(target).mint{ value: ethPerMint }(1);\n        }\n    }\n\n    function onERC721Received(\n        address operator,\n        address /* from */,\n        uint256 tokenId,\n        bytes calldata /* data */\n    ) external override returns (bytes4) {\n        require(msg.sender == target && operator == address(this));\n        IERC721(target).transferFrom(address(this), owner, tokenId);\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    function externalCall(\n        address to,\n        uint256 value,\n        bytes memory data\n    ) external {\n        require(msg.sender == owner);\n        (bool success, bytes memory returndata) = to.call{ value: value }(data);\n        require(success, string(returndata));\n    }\n}\n"}}}