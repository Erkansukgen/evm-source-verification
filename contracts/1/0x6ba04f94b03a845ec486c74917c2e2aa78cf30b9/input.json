{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/3_Ballot.sol": {
      "content": "pragma solidity 0.5.16;\r\n\r\n\r\ncontract owned {\r\n    address payable public owner;\r\n    address payable internal newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    //this flow is to prevent transferring ownership to wrong wallet by mistake\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n interface paxInterface\r\n {\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\r\n }\r\n\r\n\r\n\r\n\r\ncontract tempDist is owned{\r\n\r\n    address public paxTokenAddress;\r\n\r\n    uint eligibleCount;\r\n    uint totalDividendAmount;\r\n\r\n    function setEligibleCount(uint _eligibleCount) onlyOwner public returns(bool)\r\n    {\r\n        eligibleCount = _eligibleCount;\r\n        return true;\r\n    }\r\n\r\n    function setTotalDividendAmount(uint _totalDividendAmount) onlyOwner public returns(bool)\r\n    {\r\n        totalDividendAmount = _totalDividendAmount;\r\n        return true;\r\n    }\r\n\r\n\r\n    function changePAXaddress(address newPAXaddress) onlyOwner public returns(string memory){\r\n        //if owner makes this 0x0 address, then it will halt all the operation of the contract. This also serves as security feature.\r\n        //so owner can halt it in any problematic situation. Owner can then input correct address to make it all come back to normal.\r\n        paxTokenAddress = newPAXaddress;\r\n        return(\"PAX address updated successfully\");\r\n    }\r\n\r\n    function payToUser(address _user) onlyOwner public returns(bool)\r\n    {\r\n        uint amount = totalDividendAmount / eligibleCount;\r\n        require(paxInterface(paxTokenAddress).transfer(_user, amount),\"token transfer failed\");\r\n    }\r\n\r\n\r\n\r\n}"
    }
  }
}