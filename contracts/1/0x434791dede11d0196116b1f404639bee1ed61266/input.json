{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "War.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\ninterface Token {\r\n\tfunction allowance(address, address) external view returns (uint256);\r\n\tfunction balanceOf(address) external view returns (uint256);\r\n\tfunction transfer(address, uint256) external returns (bool);\r\n\tfunction transferFrom(address, address, uint256) external returns (bool);\r\n}\r\n\r\ncontract War {\r\n\r\n\tuint256 constant private SLOTS = 12;\r\n\tuint256 constant private TIME_PER_SLOT = 5 minutes;\r\n\tuint256 constant private ROUND_GAP = 60 minutes;\r\n\tuint256 constant private BUY_EXPONENT_BASE = 2; // x2 per buy\r\n\tuint256 constant private POT_FEE_PERCENT = 25; // 1/4 of buy\r\n\tuint256 constant private BURN_FEE_PERCENT = 10; // 1/10 of pot\r\n\tuint256 private initialCost;\r\n\r\n\tenum Status { READY, OPEN, CLOSED }\r\n\r\n\tuint256 public totalRounds;\r\n\tuint256 public roundEnd;\r\n\tuint256 public lastSlot;\r\n\taddress[SLOTS] public lastBuyers;\r\n\tuint256[SLOTS] public buys;\r\n\tToken public token;\r\n\taddress public owner;\r\n\taddress public burnAddress;\r\n\tmapping(address => bool) public whitelisted;\r\n\r\n\r\n\tevent RoundStarted(uint256 indexed round);\r\n\tevent SlotPurchased(uint256 indexed slot, address indexed buyer, uint256 cost);\r\n\tevent PotWon(uint256 indexed round, address indexed winner, uint256 amount);\r\n\r\n\r\n\tmodifier _onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\tconstructor(Token _token, uint256 _initialCost) {\r\n\t\ttoken = _token;\r\n\t\tinitialCost = _initialCost;\r\n\t\troundEnd = block.timestamp;\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tfunction setOwner(address _owner) external _onlyOwner {\r\n\t\towner = _owner;\r\n\t}\r\n\r\n\tfunction setBurnAddress(address _burnAddress) external _onlyOwner {\r\n\t\tburnAddress = _burnAddress;\r\n\t}\r\n\r\n\tfunction setWhitelisted(address _address, bool _isWhitelisted) external _onlyOwner {\r\n\t\twhitelisted[_address] = _isWhitelisted;\r\n\t}\r\n\r\n\tfunction buySlot(uint256 _index, uint256 _maxBuys) external {\r\n\t\trequire(msg.sender == tx.origin || whitelisted[msg.sender]);\r\n\t\tStatus _status = currentStatus();\r\n\t\trequire(_status != Status.CLOSED);\r\n\t\tif (_status == Status.READY) {\r\n\t\t\tuint256 _balance = token.balanceOf(address(this));\r\n\t\t\tif (_balance > 0) {\r\n\t\t\t\tif (burnAddress == address(0x0)) {\r\n\t\t\t\t\ttoken.transfer(lastBuyers[lastSlot], _balance);\r\n\t\t\t\t\temit PotWon(totalRounds, lastBuyers[lastSlot], _balance);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tuint256 _burnFee = _balance * BURN_FEE_PERCENT / 100;\r\n\t\t\t\t\ttoken.transfer(burnAddress, _burnFee);\r\n\t\t\t\t\ttoken.transfer(lastBuyers[lastSlot], _balance - _burnFee);\r\n\t\t\t\t\temit PotWon(totalRounds, lastBuyers[lastSlot], _balance - _burnFee);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdelete lastBuyers;\r\n\t\t\tdelete buys;\r\n\t\t\ttotalRounds++;\r\n\t\t\temit RoundStarted(totalRounds);\r\n\t\t}\r\n\t\trequire(_index < SLOTS);\r\n\t\t(uint256 _count, uint256 _price) = currentSlotPrice(_index);\r\n\t\trequire(_count <= _maxBuys);\r\n\t\tif (_count == 0) {\r\n\t\t\ttoken.transferFrom(msg.sender, address(this), _price);\r\n\t\t} else {\r\n\t\t\tuint256 _potFee = _price * POT_FEE_PERCENT / 100;\r\n\t\t\ttoken.transferFrom(msg.sender, address(this), _potFee);\r\n\t\t\ttoken.transferFrom(msg.sender, lastBuyers[_index], _price - _potFee);\r\n\t\t}\r\n\t\troundEnd = block.timestamp + slotTime(_index);\r\n\t\tlastSlot = _index;\r\n\t\tlastBuyers[_index] = msg.sender;\r\n\t\tbuys[_index]++;\r\n\t\temit SlotPurchased(_index, msg.sender, _price);\r\n\t}\r\n\r\n\r\n\tfunction currentPot() public view returns (uint256) {\r\n\t\treturn token.balanceOf(address(this));\r\n\t}\r\n\t\r\n\tfunction currentStatus() public view returns (Status) {\r\n\t\treturn block.timestamp < roundEnd ? Status.OPEN : block.timestamp < roundEnd + ROUND_GAP ? Status.CLOSED : Status.READY;\r\n\t}\r\n\r\n\tfunction currentSlotPrice(uint256 _index) public view returns (uint256 count, uint256 price) {\r\n\t\trequire(_index < SLOTS);\r\n\t\tcount = buys[_index];\r\n\t\tprice = initialCost * BUY_EXPONENT_BASE**count;\r\n\t}\r\n\r\n\tfunction slotTime(uint256 _index) public pure returns (uint256) {\r\n\t\treturn TIME_PER_SLOT * (_index + 1);\r\n\t}\r\n\r\n\tfunction allInfoFor(address _user) external view returns (uint256[5] memory compressedInfo, address[SLOTS] memory buyers, uint256[SLOTS] memory allBuys, uint256 userBalance, uint256 userAllowance) {\r\n\t\treturn (_compressedInfo(), lastBuyers, buys, token.balanceOf(_user), token.allowance(_user, address(this)));\r\n\t}\r\n\r\n\r\n\tfunction _compressedInfo() internal view returns (uint256[5] memory info) {\r\n\t\tinfo[0] = totalRounds;\r\n\t\tinfo[1] = currentPot();\r\n\t\tinfo[2] = roundEnd;\r\n\t\tinfo[3] = lastSlot;\r\n\t\tinfo[4] = initialCost;\r\n\t}\r\n}"
    }
  }
}