{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "DetailToken.sol": {
      "content": "pragma solidity >=0.4.22 <0.6.0;\r\n\r\nlibrary hitung {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n         c = a + b;\r\n         require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require( a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n         require(b > 0);\r\n         c = a / b;\r\n    }\r\n}\r\n contract Owned {\r\n     address public owner;\r\n     address public newOwner;\r\n     \r\n     event OwnershipTransferred(address indexed _from, address indexed _to);\r\n     \r\n     constructor() public {\r\n         owner = msg.sender;\r\n     }\r\n     \r\n     modifier onlyOwner {\r\n         require(msg.sender == owner);\r\n         _;\r\n     }\r\n     \r\n     function transferOwnership(address _newOwner) public onlyOwner {\r\n         newOwner = _newOwner;\r\n     }\r\n     function acceptOwnership() public {\r\n     require(msg.sender == newOwner);\r\n     emit OwnershipTransferred(owner, newOwner);\r\n     newOwner = address(0);\r\n     }\r\n }\r\n \r\n contract MineFarmSultanCrypto {\r\n     function totalSupply() public view returns (uint);\r\n     function balanceOf(address tokenOwner) public view returns (uint balance);\r\n     function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n     function transfer(address to, uint tokens) public returns (bool success);\r\n     function approve(address spender, uint tokens) public returns (bool success);\r\n     function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n     \r\n     event Transfer(address indexed from, address indexed to, uint tokens);\r\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n }\r\n \r\n contract DetailToken is MineFarmSultanCrypto, Owned {\r\n     using hitung for uint;\r\n     string public symbol;\r\n     string public name;\r\n     uint8 public decimals;\r\n     uint _totalSupply;\r\n     \r\n     mapping(address => uint) balances;\r\n     mapping(address => mapping(address => uint)) allowed;\r\n     \r\n     \r\n         constructor() public {\r\n         symbol = \"MFSC\";\r\n         name = \"Mine Farm Sultan Crypto\";\r\n         decimals = 18;\r\n         _totalSupply = 1000000 * 10**uint(decimals);\r\n         balances[0x963a90a012275C96e16Bc2c4323602a9d3c8e37a] = _totalSupply;\r\n         emit Transfer(address(0), 0x963a90a012275C96e16Bc2c4323602a9d3c8e37a, _totalSupply);\r\n}\r\n\r\n        function totalSupply() public view returns (uint) {\r\n            return _totalSupply.sub(balances[address(0)]);\r\n        }\r\n \r\n        function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n         return balances[tokenOwner];\r\n     }\r\n        function transfer( address to, uint tokens) public returns (bool success) {\r\n            balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n            balances[to] = balances[to].add(tokens);\r\n            emit Transfer(msg.sender, to, tokens);\r\n            return true;\r\n        }\r\n        \r\n        function approve(address spender, uint tokens) public returns (bool success) {\r\n            allowed[msg.sender][spender] = tokens;\r\n            emit Approval(msg.sender, spender, tokens);\r\n            return true;\r\n        }\r\n        \r\n        function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n        }\r\n        \r\n        function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n            return allowed[tokenOwner][spender];\r\n        }\r\n }"
    }
  }
}