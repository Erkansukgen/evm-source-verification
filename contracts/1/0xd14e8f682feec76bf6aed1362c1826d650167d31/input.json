{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/USDG.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.4.25 <=0.7.3;\n\n/* SafeMath functions */\n\ncontract SafeMath {\n    \n  function safeMul(uint256 a, uint256 b) pure internal returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) pure internal returns (uint256) {\n    assert(b > 0);\n    uint256 c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) pure internal returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) pure internal returns (uint256) {\n    uint256 c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  } \n\n}\n\ninterface IUSDG {\n    \n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    \n    \n    /**\n     * @dev burns 'amount' tokens from the total supply & from his address\n     * \n     */\n    \n    function burn(uint256 amount) external returns (bool);\n    \n    /**\n     * @dev mints 'amount' tokens from the 0 contract to the owner's address. This function has to be called by one\n     * of the three governors\n     */\n    \n    function mint(uint256 amount) external returns (bool);\n    \n     /**\n     * @dev adds 'New Owners or Governors' to the smart contract.\n     * Limite to three governors\n     */\n    \n    function addGovernor(address governor,uint256 index) external returns (bool);\n    \n}\n\ncontract USDG is SafeMath,IUSDG {\n    \n    string public constant name = \"Greyzdorf Dollar\";\n    string public constant symbol = \"USDG\";\n    uint256 public constant decimals = 18;\n    uint256 public override totalSupply;\n    address public owner;\n    address[3] public governors;\n\n    constructor(){\n        uint256 initalSupply = SafeMath.safeMul(20000000,10**18);\n        owner = msg.sender;\n        balanceOf[msg.sender]=initalSupply;\n        totalSupply+=initalSupply;\n        emit Transfer(address(0), owner, initalSupply);\n     }\n\n\n    mapping (address => uint256) public override balanceOf;\n    mapping(address => mapping(address => uint)) allowed;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Burn(address indexed from, uint256 value);\n    event Mint(address indexed from,address indexed to, uint256 value);\n\n    \n    function transfer(address _reciever, uint256 _value) public override returns (bool){\n         require(balanceOf[msg.sender]>_value);\n         balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender],_value);\n         balanceOf[_reciever] = SafeMath.safeAdd(balanceOf[_reciever],_value);\n         emit Transfer(msg.sender,_reciever,_value);\n         return true;\n    }\n    \n     function transferFrom( address _from, address _to, uint256 _amount )public override returns (bool) {\n     require( _to != address(0));\n     require(balanceOf[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\n     balanceOf[_from] = SafeMath.safeSub(balanceOf[_from],_amount);\n     allowed[_from][msg.sender] = SafeMath.safeSub(allowed[_from][msg.sender],_amount);\n     balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to],_amount);\n     emit Transfer(_from, _to, _amount);\n     return true;\n     }\n     \n     function burn(uint256 _value) public override returns(bool){\n         require(balanceOf[msg.sender]>=_value);\n         balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender],_value);\n         totalSupply = SafeMath.safeSub(totalSupply,_value);\n         emit Burn(msg.sender,_value);\n        emit Transfer(msg.sender,address(0),_value);\n         return true;\n    }\n    \n    function mint(uint256 _value) public override returns(bool){\n        require(msg.sender == governors[0] || msg.sender == governors[1] || msg.sender == governors[2],'Not Elligible to mint');\n        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender],_value);\n        totalSupply = SafeMath.safeAdd(totalSupply,_value);\n        emit Mint(address(0),msg.sender,_value);\n        emit Transfer(address(0),msg.sender,_value);\n        return true;\n    }\n     \n    function addGovernor(address _governor,uint256 _index) public override returns(bool){\n        require(msg.sender == owner);\n        governors[_index] = _governor;\n        return false;\n    } \n     \n    function approve(address _spender, uint256 _amount) public override returns (bool) {\n         require( _spender != address(0));\n         allowed[msg.sender][_spender] = _amount;\n         emit  Approval(msg.sender, _spender, _amount);\n         return true;\n     }\n     \n     function reverseApprove(address _spender, uint256 _amount) public returns (bool){\n        require( _spender != address(0));\n        if(SafeMath.safeSub(allowed[msg.sender][_spender],_amount) >= 0){\n        allowed[msg.sender][_spender] = SafeMath.safeSub(allowed[msg.sender][_spender],_amount);\n        emit  Approval(msg.sender, _spender, SafeMath.safeSub(allowed[msg.sender][_spender],_amount));\n        return true;\n        }\n        return false;\n     }\n     \n     \n     function allowance(address _owner, address _spender)public view override returns (uint256 remaining) {\n         require( _owner != address(0) && _spender != address(0));\n         return allowed[_owner][_spender];\n     }\n     \n}"}}}