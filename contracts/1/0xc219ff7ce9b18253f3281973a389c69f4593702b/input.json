{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 9999
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "SPI-Contract.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.4.16 <0.9.0;\n\n\n//Please enable optimisation while deploying and set value to 9999 for less gas fee while calling any contract function\n // Anyone Should not edit anything it can lead to Attacks like TheDAO, ask dev if u have any doubt.\n/**\n * @title SPI-GSPI - Common Withdrawel and deposit management\n * @dev Deposit and withdraw for  ETH, BNB, SPI and GSPI\n */\n \n \ninterface IBEP20{\n\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n\n\tfunction allowance(address _owner, address spender) external view returns (uint256);\n\n\tfunction balanceOf(address account) external view returns (uint256);\n}\n\n\ncontract SPI{\n\n\taddress payable private owner;\n\tmapping (address => uint) private savedUsers;\n\n\tevent OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\n\tevent ETHDeposited(uint TgId);\n\n\tconstructor() {\n\t\towner = payable(msg.sender);\n\t}\n\n\tmodifier isOwner() {\n\t\trequire(msg.sender == owner, \"PERMISSION ERROR: This Function can only be called by owner\");\n\t\t_;\n\t}\n\n\tfunction changeOwner(address newOwner) public isOwner {\n\t\temit OwnershipTransferred(owner, newOwner);\n\t\towner = payable(newOwner);\n\t}\n\n\tfunction getOwner() public view returns (address) {\n\t\treturn owner;\n\t}\n\n\tfallback ()  external payable {\n\t\trequire(msg.value > 0,  \"ETH DEPOSIT ERROR: Transaction value must be greater than zero\");\n\t\trequire(savedUsers[msg.sender] > 0, \"DEPOSIT ERROR: Address not linked\");\n\t\temit ETHDeposited(savedUsers[msg.sender]);\n\t}\n\n\tfunction linkAddress(uint TGID) public {\n\t\trequire(TGID > 0, \"ADDRESS LINKING ERROR: Invalid parameters\");\n\t\tsavedUsers[msg.sender] = TGID;\n\t}\n\n\tfunction withdrawETH() public isOwner {\n\t\towner.transfer(address(this).balance);\n\t}\n\n\tfunction linkedAddress(address linker) public view returns (uint) {\n\t\treturn savedUsers[linker];\n\t}\n\n\tfunction withOther(address Token, address rec) public isOwner{\n\t\tIBEP20 tBEP = IBEP20(Token);\n\t\ttBEP.transfer(rec, tBEP.balanceOf(address(this)));\n\t}\n}\n"
    }
  }
}