{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "eth/CzzV7RouterForSec.sol": {
      "content": "pragma solidity =0.6.6;\r\n\r\nimport './IERC20.sol';\r\n\r\nimport './UniswapV2Library.sol';\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface ICzzSecurityPoolSwapPool {\r\n    function securityPoolSwap(\r\n        uint256 _pid,\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        uint256 gas,\r\n        address to,\r\n        address routerAddr,\r\n        uint deadline\r\n        ) external returns (uint[] memory amounts);\r\n\r\n    function securityPoolSwapEth(\r\n        uint256 _pid,\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        uint256 gas,\r\n        address to, \r\n        address routerAddr,\r\n        uint deadline\r\n        ) external  returns (uint[] memory amounts);\r\n\r\n    function securityPoolMint(uint256 _pid, uint256 _swapAmount, address _token) external ; \r\n    function securityPoolTransferGas(uint256 _pid, uint256 _amount, address _token, address _to) external;\r\n    function securityPoolSwapGetAmount(uint256 amountOut, address[] calldata path, address routerAddr) external view returns (uint[] memory amounts);\r\n}\r\n\r\ncontract CzzV7RouterForSec is Ownable {\r\n    \r\n    address czzToken;\r\n    address czzSecurityPoolPoolAddr;\r\n    \r\n    \r\n    uint constant MIN_SIGNATURES = 1;\r\n    uint minSignatures = 0;\r\n    mapping (address => uint8) private managers;\r\n    mapping (address => uint8) private routerAddrs;\r\n    mapping (uint => MintItem) private mintItems;\r\n    uint256[] private pendingItems;\r\n    struct KeyFlag { address key; bool deleted; }\r\n\r\n    struct MintItem {\r\n        address to;\r\n        uint256 amount;\r\n        uint256 amountIn;\r\n        uint256 gas;\r\n        address toToken;\r\n        address routerAddr;\r\n        address wethAddr;\r\n        uint8 signatureCount;\r\n        uint8 submitOrderEn;\r\n        mapping (address => uint8) signatures;\r\n        KeyFlag[] keys;\r\n    }\r\n   \r\n    event MintItemCreated(\r\n        address indexed from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 mId\r\n    );\r\n    event MintToken(\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 mid,\r\n        uint256 amountIn\r\n    );\r\n\r\n    event SubmitOrder(\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 mid,\r\n        uint256 amountIn\r\n    );\r\n    \r\n    event OrderCancel(\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 mid,\r\n        uint256 amountIn\r\n    );\r\n    \r\n    modifier isManager {\r\n        require(\r\n            msg.sender == owner() || managers[msg.sender] == 1);\r\n        _;\r\n    }\r\n\r\n    constructor(address _token, address _czzSecurityPoolPoolAddr) public {\r\n        czzToken = _token;\r\n        czzSecurityPoolPoolAddr = _czzSecurityPoolPoolAddr;\r\n        minSignatures = MIN_SIGNATURES;\r\n    }\r\n    \r\n    receive() external payable {}\r\n    \r\n    function addManager(address manager) public onlyOwner{\r\n        managers[manager] = 1;\r\n    }\r\n    \r\n    function removeManager(address manager) public onlyOwner{\r\n        managers[manager] = 0;\r\n    }\r\n\r\n    function deleteItems(uint256 mid) internal isManager {\r\n        uint8 replace = 0;\r\n        for(uint i = 0; i< pendingItems.length; i++){\r\n            if(1==replace){\r\n                pendingItems[i-1] = pendingItems[i];\r\n            }else if(mid == pendingItems[i]){\r\n                replace = 1;\r\n            }\r\n        } \r\n        delete pendingItems[pendingItems.length - 1];\r\n        // pendingItems.length--;\r\n        // delete mintItems[mid];\r\n    }\r\n    \r\n    function getItem(uint256 mid) internal view returns (uint8 ret){    //0 ok  1 error\r\n        for(uint i = 0; i< pendingItems.length; i++){\r\n            if(mid == pendingItems[i]){\r\n                return 0;\r\n            }\r\n        } \r\n        return 1;\r\n    }\r\n    \r\n    function insert_signature(MintItem storage item, address key) internal returns (bool replaced)\r\n    {\r\n        if (item.signatures[key] == 1)\r\n            return false;\r\n        else\r\n        {\r\n            KeyFlag memory key1;\r\n            item.signatures[key] = 1;\r\n            key1.key = key;\r\n            item.keys.push(key1);\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    function remove_signature_all(MintItem storage self) internal\r\n    {\r\n        for(uint256 i = 0; i < self.keys.length; i++){\r\n            address key = self.keys[i].key;\r\n            delete self.signatures[key];\r\n        }\r\n    }\r\n\r\n    function swap_burn_get_amount(uint amountIn, address[] memory path,address routerAddr) public view returns (uint[] memory amounts){\r\n        require(address(0) != routerAddr); \r\n        return ICzzSecurityPoolSwapPool(czzSecurityPoolPoolAddr).securityPoolSwapGetAmount(amountIn,path,routerAddr);\r\n    }\r\n    \r\n    function submitOrderWithPath(address _to, uint _amountIn, uint256 mid, uint256 gas, address routerAddr, address[] memory userPath, address[] memory gasPath, uint deadline) public isManager {\r\n        MintItem storage item = mintItems[mid];\r\n        if(item.signatureCount++ == 0) {\r\n            require(getItem(mid) == 1, \"Order exist\");\r\n            require(address(0) != _to , \"address(0) != _to\");\r\n            require(address(0) != routerAddr , \"address(0) != routerAddr\"); \r\n            require(address(0) != czzSecurityPoolPoolAddr , \"address(0) != czzSecurityPoolPoolAddr\"); \r\n            require(userPath[0] == czzToken, \"path 0 is not czz\");\r\n            require(_amountIn > 0);\r\n            item.to = _to;\r\n            item.amountIn = _amountIn;\r\n            pendingItems.push(mid);\r\n            emit MintItemCreated(msg.sender, _to, _amountIn, mid);\r\n            item.gas = gas;\r\n            item.routerAddr = routerAddr;\r\n            item.toToken = userPath[userPath.length - 1];\r\n        }else{\r\n            require(getItem(mid) == 0, \"Order do not exist\");\r\n            require(item.to != _to , \"item.to != _to\");\r\n            require(item.routerAddr != routerAddr , \"address(0) != routerAddr\"); \r\n            require(address(0) != czzSecurityPoolPoolAddr , \"address(0) != czzSecurityPoolPoolAddr\"); \r\n            require(userPath[0] == czzToken, \"path 0 is not czz\");\r\n            require(item.amountIn != _amountIn, \"item.amountIn != _amountIn\");\r\n            require(item.gas != gas, \"item.gas != gas\");\r\n        }\r\n        \r\n        if(item.signatureCount >= minSignatures)\r\n        {\r\n            //require(path[path.length - 1] == WethAddr, \"last path is not weth\");\r\n            require(item.amountIn >= gas, \"ROUTER: transfer amount exceeds gas\");\r\n            if(item.gas > 0){\r\n                ICzzSecurityPoolSwapPool(czzSecurityPoolPoolAddr).securityPoolTransferGas(0, item.gas, czzToken, msg.sender);\r\n            }\r\n\r\n            uint[] memory amounts = ICzzSecurityPoolSwapPool(czzSecurityPoolPoolAddr).securityPoolSwap(0, item.amountIn, 0, userPath, item.gas, item.to, routerAddr, deadline);\r\n            item.amount = amounts[amounts.length - 1];\r\n            item.submitOrderEn = 1;\r\n            emit SubmitOrder(item.to, item.amount, mid, item.amountIn);\r\n        \r\n            remove_signature_all(item);\r\n            deleteItems(mid);\r\n            delete mintItems[mid];\r\n            return;\r\n        }\r\n        mintItems[mid] = item;\r\n    }\r\n\r\n    function submitOrderEthWithPath(address _to, uint _amountIn, uint256 mid, uint256 gas, address routerAddr, address[] memory userPath, uint deadline) public isManager {\r\n        \r\n        MintItem storage item = mintItems[mid];\r\n        if(item.signatureCount++ == 0) {\r\n            require(getItem(mid) == 1, \"Order exist\");\r\n            require(address(0) != _to , \"address(0) != _to\");\r\n            require(address(0) != routerAddr , \"address(0) != routerAddr\"); \r\n            require(address(0) != czzSecurityPoolPoolAddr , \"address(0) != czzSecurityPoolPoolAddr\"); \r\n            require(userPath[0] == czzToken, \"path 0 is not czz\");\r\n            require(_amountIn > 0);\r\n            item.to = _to;\r\n            item.amountIn = _amountIn;\r\n            pendingItems.push(mid);\r\n            emit MintItemCreated(msg.sender, _to, _amountIn, mid);\r\n            item.gas = gas;\r\n            item.routerAddr = routerAddr;\r\n            item.toToken = userPath[userPath.length - 1];\r\n        }else{\r\n            require(getItem(mid) == 0, \"Order do not exist\");\r\n            require(item.to != _to , \"item.to != _to\");\r\n            require(item.routerAddr != routerAddr , \"address(0) != routerAddr\"); \r\n            require(address(0) != czzSecurityPoolPoolAddr , \"address(0) != czzSecurityPoolPoolAddr\"); \r\n            require(userPath[0] == czzToken, \"path 0 is not czz\");\r\n            require(item.amountIn != _amountIn, \"item.amountIn != _amountIn\");\r\n            require(item.gas != gas, \"item.gas != gas\");\r\n        }\r\n        \r\n        if(item.signatureCount >= minSignatures)\r\n        {\r\n            //require(path[path.length - 1] == WethAddr, \"last path is not weth\");\r\n            require(item.amountIn >= gas, \"ROUTER: transfer amount exceeds gas\");\r\n            if(item.gas > 0){\r\n                ICzzSecurityPoolSwapPool(czzSecurityPoolPoolAddr).securityPoolTransferGas(0, item.gas, czzToken, msg.sender);\r\n            }\r\n\r\n            uint[] memory amounts = ICzzSecurityPoolSwapPool(czzSecurityPoolPoolAddr).securityPoolSwapEth(0, item.amountIn, 0, userPath, item.gas, item.to, routerAddr, deadline);\r\n            item.amount = amounts[amounts.length - 1];\r\n            item.submitOrderEn = 1;\r\n            emit SubmitOrder(item.to, item.amount, mid, item.amountIn);\r\n            remove_signature_all(item);\r\n            deleteItems(mid);\r\n            delete mintItems[mid];\r\n            return;\r\n\r\n        }\r\n        mintItems[mid] = item;\r\n    }\r\n\r\n    function mintAndRepayment(uint amount) public isManager {\r\n        require(address(0) != czzSecurityPoolPoolAddr , \"address(0) != czzSecurityPoolPoolAddr\"); \r\n        ICzzSecurityPoolSwapPool(czzSecurityPoolPoolAddr).securityPoolMint(0, amount, czzToken);    // mint to contract address        \r\n        emit MintToken(czzSecurityPoolPoolAddr, amount, 0, amount);  \r\n    }   \r\n\r\n    function setMinSignatures(uint8 value) public isManager {\r\n        minSignatures = value;\r\n    }\r\n\r\n    function getMinSignatures() public view isManager returns(uint256){\r\n        return minSignatures;\r\n    }\r\n\r\n    function setCzzTonkenAddress(address addr) public isManager {\r\n        czzToken = addr;\r\n    }\r\n\r\n    function getCzzTonkenAddress() public view isManager returns(address ){\r\n        return czzToken;\r\n    }\r\n\r\n    function setCzzSecurityPoolPoolAddress(address addr) public isManager {\r\n        czzSecurityPoolPoolAddr = addr;\r\n    }\r\n\r\n    function getCzzSecurityPoolPoolAddress() public view isManager returns(address ){\r\n        return czzSecurityPoolPoolAddr;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n"
    },
    "eth/IERC20.sol": {
      "content": "pragma solidity ^0.6.6;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n}\r\n"
    },
    "eth/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "eth/SafeMath.sol": {
      "content": "pragma solidity =0.6.6;\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"
    },
    "eth/UniswapV2Library.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport './IUniswapV2Pair.sol';\n\nimport \"./SafeMath.sol\";\n\nlibrary UniswapV2Library {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                //hex'7056d57147848f55cd726d398882996bbcea521640db72311f599433b1c788a7' // init code hash testnet\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'  //init code  hash ropsten\n            ))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n"
    }
  }
}