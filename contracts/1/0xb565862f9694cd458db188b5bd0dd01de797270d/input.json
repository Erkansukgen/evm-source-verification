{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/AAAAFactory.sol": {
      "content": "// Dependency file: contracts/libraries/TransferHelper.sol\n\n//SPDX-License-Identifier: MIT\n\n// pragma solidity >=0.6.0;\n\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n\n\n// Dependency file: contracts/libraries/SafeMath.sol\n\n\n// pragma solidity >=0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Dependency file: contracts/modules/Configable.sol\n\n// pragma solidity >=0.5.16;\npragma experimental ABIEncoderV2;\n\ninterface IConfig {\n    function developer() external view returns (address);\n    function platform() external view returns (address);\n    function factory() external view returns (address);\n    function mint() external view returns (address);\n    function token() external view returns (address);\n    function developPercent() external view returns (uint);\n    function share() external view returns (address);\n    function base() external view returns (address); \n    function governor() external view returns (address);\n    function getPoolValue(address pool, bytes32 key) external view returns (uint);\n    function getValue(bytes32 key) external view returns(uint);\n    function getParams(bytes32 key) external view returns(uint, uint, uint, uint); \n    function getPoolParams(address pool, bytes32 key) external view returns(uint, uint, uint, uint); \n    function wallets(bytes32 key) external view returns(address);\n    function setValue(bytes32 key, uint value) external;\n    function setPoolValue(address pool, bytes32 key, uint value) external;\n    function setParams(bytes32 _key, uint _min, uint _max, uint _span, uint _value) external;\n    function setPoolParams(bytes32 _key, uint _min, uint _max, uint _span, uint _value) external;\n    function initPoolParams(address _pool) external;\n    function isMintToken(address _token) external returns (bool);\n    function prices(address _token) external returns (uint);\n    function convertTokenAmount(address _fromToken, address _toToken, uint _fromAmount) external view returns (uint);\n    function DAY() external view returns (uint);\n    function WETH() external view returns (address);\n}\n\ncontract Configable {\n    address public config;\n    address public owner;\n\n    event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    function setupConfig(address _config) external onlyOwner {\n        config = _config;\n        owner = IConfig(config).developer();\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, 'OWNER FORBIDDEN');\n        _;\n    }\n    \n    modifier onlyDeveloper() {\n        require(msg.sender == IConfig(config).developer(), 'DEVELOPER FORBIDDEN');\n        _;\n    }\n    \n    modifier onlyPlatform() {\n        require(msg.sender == IConfig(config).platform(), 'PLATFORM FORBIDDEN');\n        _;\n    }\n\n    modifier onlyFactory() {\n        require(msg.sender == IConfig(config).factory(), 'FACTORY FORBIDDEN');\n        _;\n    }\n\n    modifier onlyGovernor() {\n        require(msg.sender == IConfig(config).governor(), 'Governor FORBIDDEN');\n        _;\n    }\n}\n\n// Dependency file: contracts/modules/ConfigNames.sol\n\n// pragma solidity >=0.5.16;\n\nlibrary ConfigNames {\n    //GOVERNANCE\n    bytes32 public constant PROPOSAL_VOTE_DURATION = bytes32('PROPOSAL_VOTE_DURATION');\n    bytes32 public constant PROPOSAL_EXECUTE_DURATION = bytes32('PROPOSAL_EXECUTE_DURATION');\n    bytes32 public constant PROPOSAL_CREATE_COST = bytes32('PROPOSAL_CREATE_COST');\n    bytes32 public constant STAKE_LOCK_TIME = bytes32('STAKE_LOCK_TIME');\n    bytes32 public constant MINT_AMOUNT_PER_BLOCK =  bytes32('MINT_AMOUNT_PER_BLOCK');\n    bytes32 public constant INTEREST_PLATFORM_SHARE =  bytes32('INTEREST_PLATFORM_SHARE');\n    bytes32 public constant CHANGE_PRICE_DURATION =  bytes32('CHANGE_PRICE_DURATION');\n    bytes32 public constant CHANGE_PRICE_PERCENT =  bytes32('CHANGE_PRICE_PERCENT');\n\n    // POOL\n    bytes32 public constant POOL_BASE_INTERESTS = bytes32('POOL_BASE_INTERESTS');\n    bytes32 public constant POOL_MARKET_FRENZY = bytes32('POOL_MARKET_FRENZY');\n    bytes32 public constant POOL_PLEDGE_RATE = bytes32('POOL_PLEDGE_RATE');\n    bytes32 public constant POOL_LIQUIDATION_RATE = bytes32('POOL_LIQUIDATION_RATE');\n    bytes32 public constant POOL_MINT_BORROW_PERCENT = bytes32('POOL_MINT_BORROW_PERCENT');\n    bytes32 public constant POOL_MINT_POWER = bytes32('POOL_MINT_POWER');\n    \n    //NOT GOVERNANCE\n    bytes32 public constant AAAA_USER_MINT = bytes32('AAAA_USER_MINT');\n    bytes32 public constant AAAA_TEAM_MINT = bytes32('AAAA_TEAM_MINT');\n    bytes32 public constant AAAA_REWAED_MINT = bytes32('AAAA_REWAED_MINT');\n    bytes32 public constant DEPOSIT_ENABLE = bytes32('DEPOSIT_ENABLE');\n    bytes32 public constant WITHDRAW_ENABLE = bytes32('WITHDRAW_ENABLE');\n    bytes32 public constant BORROW_ENABLE = bytes32('BORROW_ENABLE');\n    bytes32 public constant REPAY_ENABLE = bytes32('REPAY_ENABLE');\n    bytes32 public constant LIQUIDATION_ENABLE = bytes32('LIQUIDATION_ENABLE');\n    bytes32 public constant REINVEST_ENABLE = bytes32('REINVEST_ENABLE');\n    bytes32 public constant INTEREST_BUYBACK_SHARE =  bytes32('INTEREST_BUYBACK_SHARE');\n\n    //POOL\n    bytes32 public constant POOL_PRICE = bytes32('POOL_PRICE');\n\n    //wallet\n    bytes32 public constant TEAM = bytes32('team'); \n    bytes32 public constant SPARE = bytes32('spare');\n    bytes32 public constant REWARD = bytes32('reward');\n}\n\n// Dependency file: contracts/modules/BaseMintField.sol\n\n// pragma solidity >=0.5.16;\n// import \"contracts/libraries/SafeMath.sol\";\n// import \"contracts/libraries/TransferHelper.sol\";\n// import \"contracts/modules/Configable.sol\";\n// import \"contracts/modules/ConfigNames.sol\";\n\ninterface IERC20 {\n    function approve(address spender, uint value) external returns (bool);\n    function balanceOf(address owner) external view returns (uint);\n}\n\ncontract BaseMintField is Configable {\n    using SafeMath for uint;\n    \n    uint public mintCumulation;\n    \n    uint public totalLendProductivity;\n    uint public totalBorrowProducitivity;\n    uint public accAmountPerLend;\n    uint public accAmountPerBorrow;\n    \n    uint public totalBorrowSupply;\n    uint public totalLendSupply;\n    \n    struct UserInfo {\n        uint amount;     // How many tokens the user has provided.\n        uint rewardDebt; // Reward debt. \n        uint rewardEarn; // Reward earn and not minted\n        uint index;\n    }\n    \n    mapping(address => UserInfo) public lenders;\n    mapping(address => UserInfo) public borrowers;\n    \n    uint public totalShare;\n    uint public mintedShare;\n\n    event BorrowPowerChange (uint oldValue, uint newValue);\n    event InterestRatePerBlockChanged (uint oldValue, uint newValue);\n    event BorrowerProductivityIncreased (address indexed user, uint value);\n    event BorrowerProductivityDecreased (address indexed user, uint value);\n    event LenderProductivityIncreased (address indexed user, uint value);\n    event LenderProductivityDecreased (address indexed user, uint value);\n    event MintLender(address indexed user, uint userAmount);\n    event MintBorrower(address indexed user, uint userAmount);\n\n    // Update reward variables of the given pool to be up-to-date.\n    function _update() internal virtual {\n        uint256 reward = _currentReward();\n        totalShare += reward;\n        if (totalLendProductivity.add(totalBorrowProducitivity) == 0 || reward == 0) {\n            return;\n        }\n        \n        uint borrowReward = reward.mul(IConfig(config).getPoolValue(address(this), ConfigNames.POOL_MINT_BORROW_PERCENT)).div(10000);\n        uint lendReward = reward.sub(borrowReward);\n     \n        if(totalLendProductivity != 0 && lendReward > 0) {\n            totalLendSupply = totalLendSupply.add(lendReward);\n            accAmountPerLend = accAmountPerLend.add(lendReward.mul(1e12).div(totalLendProductivity));\n        }\n\n        if(totalBorrowProducitivity != 0 && borrowReward > 0) {\n            totalBorrowSupply = totalBorrowSupply.add(borrowReward);\n            accAmountPerBorrow = accAmountPerBorrow.add(borrowReward.mul(1e12).div(totalBorrowProducitivity));\n        }\n    }\n    \n    function _currentReward() internal virtual view returns (uint){\n        return mintedShare.add(IERC20(IConfig(config).token()).balanceOf(address(this))).sub(totalShare);\n    }\n    \n    // Audit borrowers's reward to be up-to-date\n    function _auditBorrower(address user) internal {\n        UserInfo storage userInfo = borrowers[user];\n        if (userInfo.amount > 0) {\n            uint pending = userInfo.amount.mul(accAmountPerBorrow).div(1e12).sub(userInfo.rewardDebt);\n            userInfo.rewardEarn = userInfo.rewardEarn.add(pending);\n            mintCumulation = mintCumulation.add(pending);\n            userInfo.rewardDebt = userInfo.amount.mul(accAmountPerBorrow).div(1e12);\n        }\n    }\n    \n    // Audit lender's reward to be up-to-date\n    function _auditLender(address user) internal {\n        UserInfo storage userInfo = lenders[user];\n        if (userInfo.amount > 0) {\n            uint pending = userInfo.amount.mul(accAmountPerLend).div(1e12).sub(userInfo.rewardDebt);\n            userInfo.rewardEarn = userInfo.rewardEarn.add(pending);\n            mintCumulation = mintCumulation.add(pending);\n            userInfo.rewardDebt = userInfo.amount.mul(accAmountPerLend).div(1e12);\n        }\n    }\n\n    function _increaseBorrowerProductivity(address user, uint value) internal returns (bool) {\n        require(value > 0, 'PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO');\n\n        UserInfo storage userInfo = borrowers[user];\n        _update();\n        _auditBorrower(user);\n\n        totalBorrowProducitivity = totalBorrowProducitivity.add(value);\n\n        userInfo.amount = userInfo.amount.add(value);\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerBorrow).div(1e12);\n        emit BorrowerProductivityIncreased(user, value);\n        return true;\n    }\n\n    function _decreaseBorrowerProductivity(address user, uint value) internal returns (bool) {\n        require(value > 0, 'INSUFFICIENT_PRODUCTIVITY');\n        \n        UserInfo storage userInfo = borrowers[user];\n        require(userInfo.amount >= value, \"FORBIDDEN\");\n        _update();\n        _auditBorrower(user);\n        \n        userInfo.amount = userInfo.amount.sub(value);\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerBorrow).div(1e12);\n        totalBorrowProducitivity = totalBorrowProducitivity.sub(value);\n\n        emit BorrowerProductivityDecreased(user, value);\n        return true;\n    }\n    \n    function _increaseLenderProductivity(address user, uint value) internal returns (bool) {\n        require(value > 0, 'PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO');\n\n        UserInfo storage userInfo = lenders[user];\n        _update();\n        _auditLender(user);\n\n        totalLendProductivity = totalLendProductivity.add(value);\n\n        userInfo.amount = userInfo.amount.add(value);\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerLend).div(1e12);\n        emit LenderProductivityIncreased(user, value);\n        return true;\n    }\n\n    // External function call \n    // This function will decreases user's productivity by value, and updates the global productivity\n    // it will record which block this is happenning and accumulates the area of (productivity * time)\n    function _decreaseLenderProductivity(address user, uint value) internal returns (bool) {\n        require(value > 0, 'INSUFFICIENT_PRODUCTIVITY');\n        \n        UserInfo storage userInfo = lenders[user];\n        require(userInfo.amount >= value, \"FORBIDDEN\");\n        _update();\n        _auditLender(user);\n        \n        userInfo.amount = userInfo.amount.sub(value);\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerLend).div(1e12);\n        totalLendProductivity = totalLendProductivity.sub(value);\n\n        emit LenderProductivityDecreased(user, value);\n        return true;\n    }\n    \n    function takeBorrowWithAddress(address user) public view returns (uint) {\n        UserInfo storage userInfo = borrowers[user];\n        uint _accAmountPerBorrow = accAmountPerBorrow;\n        if (totalBorrowProducitivity != 0) {\n            uint reward = _currentReward();\n            uint borrowReward = reward.mul(IConfig(config).getPoolValue(address(this), ConfigNames.POOL_MINT_BORROW_PERCENT)).div(10000);\n            \n            _accAmountPerBorrow = accAmountPerBorrow.add(borrowReward.mul(1e12).div(totalBorrowProducitivity));\n        }\n\n        return userInfo.amount.mul(_accAmountPerBorrow).div(1e12).sub(userInfo.rewardDebt).add(userInfo.rewardEarn);\n    }\n    \n    function takeLendWithAddress(address user) public view returns (uint) {\n        UserInfo storage userInfo = lenders[user];\n        uint _accAmountPerLend = accAmountPerLend;\n        if (totalLendProductivity != 0) {\n            uint reward = _currentReward();\n            uint lendReward = reward.sub(reward.mul(IConfig(config).getPoolValue(address(this), ConfigNames.POOL_MINT_BORROW_PERCENT)).div(10000)); \n            _accAmountPerLend = accAmountPerLend.add(lendReward.mul(1e12).div(totalLendProductivity));\n        }\n        return userInfo.amount.mul(_accAmountPerLend).div(1e12).sub(userInfo.rewardDebt).add(userInfo.rewardEarn);\n    }\n\n    function takeBorrowWithBlock() external view returns (uint, uint) {\n        uint earn = takeBorrowWithAddress(msg.sender);\n        return (earn, block.number);\n    }\n    \n    function takeLendWithBlock() external view returns (uint, uint) {\n        uint earn = takeLendWithAddress(msg.sender);\n        return (earn, block.number);\n    }\n\n    function takeAll() public view returns (uint) {\n        return takeBorrowWithAddress(msg.sender).add(takeLendWithAddress(msg.sender));\n    }\n\n    function takeAllWithBlock() external view returns (uint, uint) {\n        return (takeAll(), block.number);\n    }\n\n    function _mintBorrower() internal returns (uint) {\n        _update();\n        _auditBorrower(msg.sender); \n        if(borrowers[msg.sender].rewardEarn > 0) {\n            uint amount = borrowers[msg.sender].rewardEarn;\n            _mintDistribution(msg.sender, amount);\n            borrowers[msg.sender].rewardEarn = 0;\n            emit MintBorrower(msg.sender, amount);\n            return amount;\n        }\n    }\n    \n    function _mintLender() internal returns (uint) {\n        _update();\n        _auditLender(msg.sender);\n        if(lenders[msg.sender].rewardEarn > 0) {\n            uint amount = lenders[msg.sender].rewardEarn;\n            _mintDistribution(msg.sender, amount);\n            lenders[msg.sender].rewardEarn = 0;\n            emit MintLender(msg.sender, amount);\n            return amount;\n        }\n    }\n\n    // Returns how many productivity a user has and global has.\n    function getBorrowerProductivity(address user) external view returns (uint, uint) {\n        return (borrowers[user].amount, totalBorrowProducitivity);\n    }\n    \n    function getLenderProductivity(address user) external view returns (uint, uint) {\n        return (lenders[user].amount, totalLendProductivity);\n    }\n\n    // Returns the current gorss product rate.\n    function interestsPerBlock() external view returns (uint, uint) {\n        return (accAmountPerBorrow, accAmountPerLend);\n    }\n\n    function _mintDistribution(address user, uint amount) internal {\n        if(amount > 0) {\n           mintedShare += amount;\n           TransferHelper.safeTransfer(IConfig(config).token(), user, amount);\n        }\n    }\n}\n\n// Dependency file: contracts/AAAA.sol\n\n// pragma solidity >=0.5.16;\n// import \"contracts/libraries/TransferHelper.sol\";\n// import \"contracts/libraries/SafeMath.sol\";\n// import \"contracts/modules/Configable.sol\";\n// import \"contracts/modules/ConfigNames.sol\";\n// import \"contracts/modules/BaseMintField.sol\";\n\ninterface ICollateralStrategy {\n    function invest(address user, uint amount) external; \n    function withdraw(address user, uint amount) external;\n    function liquidation(address user) external;\n    function claim(address user, uint amount, uint total) external;\n    function exit(uint amount) external;\n    function migrate(address old) external;\n    function collateralToken() external returns (address);\n}\n\ninterface IAAAAMint {\n    function take() external view returns (uint);\n    function mint() external returns (uint);\n}\n\ncontract AAAAPool is Configable, BaseMintField\n{\n    using SafeMath for uint;\n\n    address public dev;\n    address public factory;\n    address public supplyToken;\n    uint public supplyDecimal;\n    address public collateralToken;\n    uint public collateralDecimal;\n\n    struct SupplyStruct {\n        uint amountSupply;\n        uint interestSettled;\n        uint liquidationSettled;\n\n        uint interests;\n        uint liquidation;\n    }\n\n    struct BorrowStruct {\n        uint index;\n        uint amountCollateral;\n        uint interestSettled;\n        uint amountBorrow;\n        uint interests;\n    }\n\n    struct LiquidationStruct {\n        uint amountCollateral;\n        uint liquidationAmount;\n        uint timestamp;\n    }\n\n    address[] public borrowerList;\n    uint public numberBorrowers;\n\n    mapping(address => SupplyStruct) public supplys;\n    mapping(address => BorrowStruct) public borrows;\n    mapping(address => LiquidationStruct []) public liquidationHistory;\n    mapping(address => uint) public liquidationHistoryLength;\n\n    uint public interestPerSupply;\n    uint public liquidationPerSupply;\n    uint public interestPerBorrow;\n\n    uint public totalLiquidation;\n    uint public totalLiquidationSupplyAmount;\n\n    uint public totalStake;\n    uint public totalBorrow;\n    uint public totalPledge;\n\n    uint public remainSupply;\n\n    uint public lastInterestUpdate;\n\n    address public collateralStrategy;\n\n    event Deposit(address indexed _user, uint _amount, uint _collateralAmount);\n    event Withdraw(address indexed _user, uint _supplyAmount, uint _collateralAmount, uint _interestAmount);\n    event Borrow(address indexed _user, uint _supplyAmount, uint _collateralAmount);\n    event Repay(address indexed _user, uint _supplyAmount, uint _collateralAmount, uint _interestAmount);\n    event Liquidation(address indexed _liquidator, address indexed _user, uint _supplyAmount, uint _collateralAmount);\n    event Reinvest(address indexed _user, uint _reinvestAmount);\n\n    function switchStrategy(address _collateralStrategy) external onlyPlatform\n    {\n        if(collateralStrategy != address(0) && totalPledge > 0)\n        {\n            ICollateralStrategy(collateralStrategy).exit(totalPledge);\n        }\n\n        if(_collateralStrategy != address(0))\n        {\n            require(ICollateralStrategy(_collateralStrategy).collateralToken() == collateralToken, \"AAAA: INVALID STRATEGY\");\n\n            if(totalPledge > 0) {\n                TransferHelper.safeTransfer(collateralToken, _collateralStrategy, totalPledge);\n            }\n            ICollateralStrategy(_collateralStrategy).migrate(collateralStrategy);\n        }\n\n        collateralStrategy = _collateralStrategy;\n    }\n\n    constructor() public \n    {\n        factory = msg.sender;\n    }\n\n    function init(address _supplyToken, address _collateralToken) external onlyFactory\n    {\n        supplyToken = _supplyToken;\n        collateralToken = _collateralToken;\n\n        lastInterestUpdate = block.number;\n    }\n\n    function updateInterests() internal\n    {\n        uint totalSupply = totalBorrow + remainSupply;\n        uint interestPerBlock = getInterests();\n\n        interestPerSupply = interestPerSupply.add(totalSupply == 0 ? 0 : interestPerBlock.mul(block.number - lastInterestUpdate).mul(totalBorrow).div(totalSupply));\n        interestPerBorrow = interestPerBorrow.add(interestPerBlock.mul(block.number - lastInterestUpdate));\n        lastInterestUpdate = block.number;\n    }\n\n    function getInterests() public view returns(uint interestPerBlock)\n    {\n        uint totalSupply = totalBorrow + remainSupply;\n        uint baseInterests = IConfig(config).getPoolValue(address(this), ConfigNames.POOL_BASE_INTERESTS);\n        uint marketFrenzy = IConfig(config).getPoolValue(address(this), ConfigNames.POOL_MARKET_FRENZY);\n        uint aDay = IConfig(config).DAY();\n        interestPerBlock = totalSupply == 0 ? 0 : baseInterests.add(totalBorrow.mul(marketFrenzy).div(totalSupply)).div(365 * aDay);\n    }\n\n    function updateLiquidation(uint _liquidation) internal\n    {\n        uint totalSupply = totalBorrow + remainSupply;\n        liquidationPerSupply = liquidationPerSupply.add(totalSupply == 0 ? 0 : _liquidation.mul(1e18).div(totalSupply));\n    }\n\n    function deposit(uint amountDeposit, address from) public onlyPlatform\n    {\n        require(amountDeposit > 0, \"AAAA: INVALID AMOUNT\");\n        uint amountIn = IERC20(supplyToken).balanceOf(address(this)).sub(remainSupply);\n        require(amountIn == amountDeposit, \"AAAA: INVALID AMOUNT\");\n\n        updateInterests();\n\n        uint addLiquidation = liquidationPerSupply.mul(supplys[from].amountSupply).div(1e18).sub(supplys[from].liquidationSettled);\n\n        supplys[from].interests = supplys[from].interests.add(interestPerSupply.mul(supplys[from].amountSupply).div(1e18).sub(supplys[from].interestSettled));\n        supplys[from].liquidation = supplys[from].liquidation.add(addLiquidation);\n\n        supplys[from].amountSupply = supplys[from].amountSupply.add(amountDeposit);\n        remainSupply = remainSupply.add(amountDeposit);\n        \n        totalStake = totalStake.add(amountDeposit);\n        _mintToPool();\n        _increaseLenderProductivity(from, amountDeposit);\n\n        supplys[from].interestSettled = interestPerSupply.mul(supplys[from].amountSupply).div(1e18);\n        supplys[from].liquidationSettled = liquidationPerSupply.mul(supplys[from].amountSupply).div(1e18);\n        emit Deposit(from, amountDeposit, addLiquidation);\n    }\n\n    function reinvest(address from) public onlyPlatform returns(uint reinvestAmount)\n    {\n        updateInterests();\n\n        uint addLiquidation = liquidationPerSupply.mul(supplys[from].amountSupply).div(1e18).sub(supplys[from].liquidationSettled);\n\n        supplys[from].interests = supplys[from].interests.add(interestPerSupply.mul(supplys[from].amountSupply).div(1e18).sub(supplys[from].interestSettled));\n        supplys[from].liquidation = supplys[from].liquidation.add(addLiquidation);\n\n        reinvestAmount = supplys[from].interests;\n\n        uint platformShare = reinvestAmount.mul(IConfig(config).getValue(ConfigNames.INTEREST_PLATFORM_SHARE)).div(1e18);\n        reinvestAmount = reinvestAmount.sub(platformShare);\n\n        supplys[from].amountSupply = supplys[from].amountSupply.add(reinvestAmount);\n        totalStake = totalStake.add(reinvestAmount);\n        supplys[from].interests = 0;\n\n        supplys[from].interestSettled = supplys[from].amountSupply == 0 ? 0 : interestPerSupply.mul(supplys[from].amountSupply).div(1e18);\n        supplys[from].liquidationSettled = supplys[from].amountSupply == 0 ? 0 : liquidationPerSupply.mul(supplys[from].amountSupply).div(1e18);\n\n        distributePlatformShare(platformShare);\n        _mintToPool();\n        if(reinvestAmount > 0) {\n           _increaseLenderProductivity(from, reinvestAmount); \n        }\n\n        emit Reinvest(from, reinvestAmount);\n    }\n\n    function distributePlatformShare(uint platformShare) internal \n    {\n        require(platformShare <= remainSupply, \"AAAA: NOT ENOUGH PLATFORM SHARE\");\n        if(platformShare > 0) {\n            uint buybackShare = IConfig(config).getValue(ConfigNames.INTEREST_BUYBACK_SHARE);\n            uint buybackAmount = platformShare.mul(buybackShare).div(1e18);\n            uint dividendAmount = platformShare.sub(buybackAmount);\n            if(dividendAmount > 0) TransferHelper.safeTransfer(supplyToken, IConfig(config).share(), dividendAmount);\n            if(buybackAmount > 0) TransferHelper.safeTransfer(supplyToken, IConfig(config).wallets(bytes32(\"team\")), buybackAmount);\n            remainSupply = remainSupply.sub(platformShare);\n        }\n    }\n\n    function withdraw(uint amountWithdraw, address from) public onlyPlatform returns(uint withdrawSupplyAmount, uint withdrawLiquidation)\n    {\n        require(amountWithdraw > 0, \"AAAA: INVALID AMOUNT\");\n        require(amountWithdraw <= supplys[from].amountSupply, \"AAAA: NOT ENOUGH BALANCE\");\n\n        updateInterests();\n\n        uint addLiquidation = liquidationPerSupply.mul(supplys[from].amountSupply).div(1e18).sub(supplys[from].liquidationSettled);\n\n        supplys[from].interests = supplys[from].interests.add(interestPerSupply.mul(supplys[from].amountSupply).div(1e18).sub(supplys[from].interestSettled));\n        supplys[from].liquidation = supplys[from].liquidation.add(addLiquidation);\n\n        withdrawLiquidation = supplys[from].liquidation.mul(amountWithdraw).div(supplys[from].amountSupply);\n        uint withdrawInterest = supplys[from].interests.mul(amountWithdraw).div(supplys[from].amountSupply);\n\n        uint platformShare = withdrawInterest.mul(IConfig(config).getValue(ConfigNames.INTEREST_PLATFORM_SHARE)).div(1e18);\n        uint userShare = withdrawInterest.sub(platformShare);\n\n        distributePlatformShare(platformShare);\n\n        uint withdrawLiquidationSupplyAmount = totalLiquidation == 0 ? 0 : withdrawLiquidation.mul(totalLiquidationSupplyAmount).div(totalLiquidation);\n        \n        if(withdrawLiquidationSupplyAmount < amountWithdraw.add(userShare))\n            withdrawSupplyAmount = amountWithdraw.add(userShare).sub(withdrawLiquidationSupplyAmount);\n        \n        require(withdrawSupplyAmount <= remainSupply, \"AAAA: NOT ENOUGH POOL BALANCE\");\n        require(withdrawLiquidation <= totalLiquidation, \"AAAA: NOT ENOUGH LIQUIDATION\");\n\n        remainSupply = remainSupply.sub(withdrawSupplyAmount);\n        totalLiquidation = totalLiquidation.sub(withdrawLiquidation);\n        totalLiquidationSupplyAmount = totalLiquidationSupplyAmount.sub(withdrawLiquidationSupplyAmount);\n        totalPledge = totalPledge.sub(withdrawLiquidation);\n\n        supplys[from].interests = supplys[from].interests.sub(withdrawInterest);\n        supplys[from].liquidation = supplys[from].liquidation.sub(withdrawLiquidation);\n        supplys[from].amountSupply = supplys[from].amountSupply.sub(amountWithdraw);\n        totalStake = totalStake.sub(amountWithdraw);\n\n        supplys[from].interestSettled = supplys[from].amountSupply == 0 ? 0 : interestPerSupply.mul(supplys[from].amountSupply).div(1e18);\n        supplys[from].liquidationSettled = supplys[from].amountSupply == 0 ? 0 : liquidationPerSupply.mul(supplys[from].amountSupply).div(1e18);\n\n        _mintToPool();\n        if(withdrawSupplyAmount > 0) {\n            TransferHelper.safeTransfer(supplyToken, msg.sender, withdrawSupplyAmount);\n        } \n\n        _decreaseLenderProductivity(from, amountWithdraw); \n\n        if(withdrawLiquidation > 0) {\n            if(collateralStrategy != address(0))\n            {\n                ICollateralStrategy(collateralStrategy).claim(from, withdrawLiquidation, totalLiquidation.add(withdrawLiquidation));   \n            }\n            TransferHelper.safeTransfer(collateralToken, msg.sender, withdrawLiquidation);\n        }\n        \n        emit Withdraw(from, withdrawSupplyAmount, withdrawLiquidation, withdrawInterest);\n    }\n\n    function borrow(uint amountCollateral, uint repayAmount, uint expectBorrow, address from) public onlyPlatform\n    {\n        uint amountIn = IERC20(collateralToken).balanceOf(address(this));\n        if(collateralStrategy == address(0))\n            amountIn = amountIn.sub(totalPledge);\n            \n        require(amountIn == amountCollateral, \"AAAA: INVALID AMOUNT\");\n\n        // if(amountCollateral > 0) TransferHelper.safeTransferFrom(collateralToken, from, address(this), amountCollateral);\n\n        updateInterests();\n        \n        uint pledgeRate = IConfig(config).getPoolValue(address(this), ConfigNames.POOL_PLEDGE_RATE);\n        uint maxAmount = IConfig(config).convertTokenAmount(collateralToken, supplyToken, borrows[from].amountCollateral.add(amountCollateral));\n\n        uint maximumBorrow = maxAmount.mul(pledgeRate).div(1e18);\n        // uint repayAmount = getRepayAmount(borrows[from].amountCollateral, from);\n\n        require(repayAmount + expectBorrow <= maximumBorrow, \"AAAA: EXCEED MAX ALLOWED\");\n        require(expectBorrow <= remainSupply, \"AAAA: INVALID BORROW\");\n\n        totalBorrow = totalBorrow.add(expectBorrow);\n        totalPledge = totalPledge.add(amountCollateral);\n        remainSupply = remainSupply.sub(expectBorrow);\n\n        if(collateralStrategy != address(0) && amountCollateral > 0)\n        {\n            IERC20(ICollateralStrategy(collateralStrategy).collateralToken()).approve(collateralStrategy, amountCollateral);\n            ICollateralStrategy(collateralStrategy).invest(from, amountCollateral); \n        }\n\n        if(borrows[from].index == 0)\n        {\n            borrowerList.push(from);\n            borrows[from].index = borrowerList.length;\n            numberBorrowers ++;\n        }\n\n        borrows[from].interests = borrows[from].interests.add(interestPerBorrow.mul(borrows[from].amountBorrow).div(1e18).sub(borrows[from].interestSettled));\n        borrows[from].amountCollateral = borrows[from].amountCollateral.add(amountCollateral);\n        borrows[from].amountBorrow = borrows[from].amountBorrow.add(expectBorrow);\n        borrows[from].interestSettled = interestPerBorrow.mul(borrows[from].amountBorrow).div(1e18);\n\n        _mintToPool();\n        if(expectBorrow > 0) {\n            TransferHelper.safeTransfer(supplyToken, msg.sender, expectBorrow);\n            _increaseBorrowerProductivity(from, expectBorrow);\n        } \n        \n        emit Borrow(from, expectBorrow, amountCollateral);\n    }\n\n    function repay(uint amountCollateral, address from) public onlyPlatform returns(uint repayAmount, uint repayInterest)\n    {\n        require(amountCollateral <= borrows[from].amountCollateral, \"AAAA: NOT ENOUGH COLLATERAL\");\n        require(amountCollateral > 0, \"AAAA: INVALID AMOUNT\");\n\n        uint amountIn = IERC20(supplyToken).balanceOf(address(this)).sub(remainSupply);\n\n        updateInterests();\n\n        borrows[from].interests = borrows[from].interests.add(interestPerBorrow.mul(borrows[from].amountBorrow).div(1e18).sub(borrows[from].interestSettled));\n\n        repayAmount = borrows[from].amountBorrow.mul(amountCollateral).div(borrows[from].amountCollateral);\n        repayInterest = borrows[from].interests.mul(amountCollateral).div(borrows[from].amountCollateral);\n\n        totalPledge = totalPledge.sub(amountCollateral);\n        totalBorrow = totalBorrow.sub(repayAmount);\n        \n        borrows[from].amountCollateral = borrows[from].amountCollateral.sub(amountCollateral);\n        borrows[from].amountBorrow = borrows[from].amountBorrow.sub(repayAmount);\n        borrows[from].interests = borrows[from].interests.sub(repayInterest);\n        borrows[from].interestSettled = borrows[from].amountBorrow == 0 ? 0 : interestPerBorrow.mul(borrows[from].amountBorrow).div(1e18);\n\n        remainSupply = remainSupply.add(repayAmount.add(repayInterest));\n\n        if(collateralStrategy != address(0))\n        {\n            ICollateralStrategy(collateralStrategy).withdraw(from, amountCollateral);\n        }\n        TransferHelper.safeTransfer(collateralToken, msg.sender, amountCollateral);\n        require(amountIn == repayAmount.add(repayInterest), \"AAAA: INVALID AMOUNT\");\n        // TransferHelper.safeTransferFrom(supplyToken, from, address(this), repayAmount.add(repayInterest));\n        \n        _mintToPool();\n        _decreaseBorrowerProductivity(from, repayAmount);\n\n        emit Repay(from, repayAmount, amountCollateral, repayInterest);\n    }\n\n    function liquidation(address _user, address from) public onlyPlatform returns(uint borrowAmount)\n    {\n        require(supplys[from].amountSupply > 0, \"AAAA: ONLY SUPPLIER\");\n\n        updateInterests();\n\n        borrows[_user].interests = borrows[_user].interests.add(interestPerBorrow.mul(borrows[_user].amountBorrow).div(1e18).sub(borrows[_user].interestSettled));\n\n        uint liquidationRate = IConfig(config).getPoolValue(address(this), ConfigNames.POOL_LIQUIDATION_RATE);\n        \n        // uint pledgePrice = IConfig(config).getPoolValue(address(this), ConfigNames.POOL_PRICE);\n        // uint collateralValue = borrows[_user].amountCollateral.mul(pledgePrice).div(1e18);\n        uint pledgeAmount = IConfig(config).convertTokenAmount(collateralToken, supplyToken, borrows[_user].amountCollateral);\n        uint pledgeRate = IConfig(config).getPoolValue(address(this), ConfigNames.POOL_PLEDGE_RATE);\n        uint collateralValue = pledgeAmount.mul(pledgeRate).div(1e18);\n        \n        uint expectedRepay = borrows[_user].amountBorrow.add(borrows[_user].interests);\n\n        require(expectedRepay >= collateralValue.mul(liquidationRate).div(1e18), 'AAAA: NOT LIQUIDABLE');\n\n        updateLiquidation(borrows[_user].amountCollateral);\n\n        totalLiquidation = totalLiquidation.add(borrows[_user].amountCollateral);\n        totalLiquidationSupplyAmount = totalLiquidationSupplyAmount.add(expectedRepay);\n        totalBorrow = totalBorrow.sub(borrows[_user].amountBorrow);\n\n        borrowAmount = borrows[_user].amountBorrow;\n\n        LiquidationStruct memory liq;\n        liq.amountCollateral = borrows[_user].amountCollateral;\n        liq.liquidationAmount = expectedRepay;\n        liq.timestamp = block.timestamp;\n        \n        liquidationHistory[_user].push(liq);\n        liquidationHistoryLength[_user] ++;\n        ICollateralStrategy(collateralStrategy).liquidation(_user);\n        \n        emit Liquidation(from, _user, borrows[_user].amountBorrow, borrows[_user].amountCollateral);\n\n        borrows[_user].amountCollateral = 0;\n        borrows[_user].amountBorrow = 0;\n        borrows[_user].interests = 0;\n        borrows[_user].interestSettled = 0;\n        \n        _mintToPool();\n        _decreaseBorrowerProductivity(_user, borrowAmount);\n    }\n\n    function getTotalAmount() external view returns (uint) {\n        return totalStake.add(totalBorrow);\n    }\n\n    function _mintToPool() internal {\n        if(IAAAAMint(IConfig(config).mint()).take() > 0) {\n            IAAAAMint(IConfig(config).mint()).mint();\n        }\n    }\n\n    function mint() external {\n        _mintToPool();\n        _mintLender();\n        _mintBorrower();\n    }\n\n    function _currentReward() internal override view returns (uint) {\n        uint remain = IAAAAMint(IConfig(config).mint()).take();\n        return remain.add(mintedShare).add(IERC20(IConfig(config).token()).balanceOf(address(this))).sub(totalShare);\n    }\n}\n\n// Root file: contracts/AAAAFactory.sol\n\npragma solidity >=0.5.16;\n\n// import \"contracts/AAAA.sol\";\n// import \"contracts/modules/Configable.sol\";\n\ninterface IAAAAPool {\n    function init(address supplyToken,  address collateralToken) external;\n    function setupConfig(address config) external;\n}\n\ninterface IAAAABallot {\n    function initialize(address creator, address pool, bytes32 name, uint value, uint reward, string calldata subject, string calldata content) external;\n    function setupConfig(address config) external;\n}\n\ncontract AAAAFactory is Configable{\n\n    event PoolCreated(address indexed lendToken, address indexed collateralToken, address indexed pool);\n    event BallotCreated(address indexed creator, address indexed pool, address indexed ballot, bytes32 name, uint value);\n\n    \n    address[] public allPools;\n    mapping(address => bool) public isPool;\n    mapping (address => mapping (address => address)) public getPool;\n    \n    address[] public allBallots;\n    bytes32 ballotByteCodeHash;\n\n    function createPool(address _lendToken, address _collateralToken) onlyDeveloper external returns (address pool) {\n        require(getPool[_lendToken][_collateralToken] == address(0), \"ALREADY CREATED\");\n        \n        bytes32 salt = keccak256(abi.encodePacked(_lendToken, _collateralToken));\n        bytes memory bytecode = type(AAAAPool).creationCode;\n        assembly {\n            pool := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        getPool[_lendToken][_collateralToken] = pool;\n            \n        allPools.push(pool);\n        isPool[pool] = true;\n        IConfig(config).initPoolParams(pool);\n        IAAAAPool(pool).setupConfig(config);\n        IAAAAPool(pool).init(_lendToken, _collateralToken);\n        \n        emit PoolCreated(_lendToken, _collateralToken, pool);\n        return pool;\n    }\n\n    function countPools() external view returns(uint) {\n        return allPools.length;\n    }\n    \n    function createBallot(\n        address _creator, \n        address _pool, \n        bytes32 _name, \n        uint _value, \n        uint _reward, \n        string calldata _subject, \n        string calldata _content, \n        bytes calldata _bytecode) onlyGovernor external returns (address ballot) \n    {\n        bytes32 salt = keccak256(abi.encodePacked(_creator, _value, _subject, block.number));\n        bytes memory bytecode = _bytecode;\n        require(keccak256(bytecode) == ballotByteCodeHash, \"INVALID BYTECODE.\");\n        \n        assembly {\n            ballot := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        allBallots.push(ballot);\n        IAAAABallot(ballot).setupConfig(config);\n        IAAAABallot(ballot).initialize(_creator, _pool, _name, _value, _reward, _subject, _content);\n        \n        emit BallotCreated(_creator, _pool, ballot, _name, _value);\n        return ballot;\n    }\n    \n    function countBallots() external view returns (uint){\n        return allBallots.length;\n    }\n\n    function changeBallotByteHash(bytes32 _hash) onlyDeveloper external {\n        ballotByteCodeHash = _hash;\n    }\n}"
    }
  }
}