{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/0_Contract.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.6.12;\n\n\ncontract Token {\n\nmapping(address => uint256) balances;\nmapping(address => mapping(address => uint256)) public allowance;\n\nuint256 public totalSupply = 1000000000000 * 10 **18;\nstring public name = \"Floki\";\nstring public symbol = \"FLK\";\nuint256 public decimals = 18;\n\nevent Transfer(address indexed from, address indexed to, uint256 value);\nevent Approval(address indexed owner, address indexed spender, uint256 value);\nconstructor () public {\nbalances [msg.sender] = totalSupply;\n}\n\nfunction balanceOf(address owner) public view returns(uint256) {\nreturn balances[owner];\n}\n\nfunction transfer(address to, uint256 value) public returns(bool){\nrequire(balanceOf(msg.sender) >= value, 'balance too low');\nbalances[to] += value;\nbalances[msg.sender] -= value;\nemit Transfer(msg.sender, to, value);\nreturn true;\n}\n\nfunction transferFrom(address from, address to, uint256 value) public returns(bool) {\nrequire(balanceOf(from) >= value, 'balanace toooo low');\nrequire(allowance[from][msg.sender] >= value, 'allowance too low');\nbalances[to] += value;\nemit Transfer(from, to, value);\nreturn true;\n}\nfunction approve(address spender, uint256 value) public returns(bool) {\nallowance[msg.sender][spender] = value;\nemit Approval(msg.sender, spender, value);\nreturn true;\n}\n\n}\n"
    }
  }
}