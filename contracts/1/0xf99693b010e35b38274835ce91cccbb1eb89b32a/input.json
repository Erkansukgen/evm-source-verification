{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/MTGYFaaS.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport './MTGYFaaSToken.sol';\nimport './MTGYSpend.sol';\n\n/**\n * @title MTGYFaaS (sMTGY)\n * @author Lance Whatley\n * @notice Implements the master FaaS contract to keep track of all tokens being added\n * to be staked and staking.\n */\ncontract MTGYFaaS {\n  ERC20 private _mtgy;\n  MTGYSpend private _spend;\n\n  address public creator;\n  uint256 public mtgyServiceCost = 100000 * 10**18;\n\n  // this is a mapping of tokenAddress => contractAddress[] that represents\n  // a particular address for the token that someone has put up\n  // to be staked and a list of contract addresses for the staking token\n  // contracts paying out stakers for the given token.\n  mapping(address => address[]) public tokensUpForStaking;\n  address[] public allFarmingContracts;\n  uint256 public totalStakingContracts;\n\n  // mapping of userAddress => contractAddress[] that provides all the\n  // user's sMTGY contracts they're staking tokens with\n  mapping(address => address[]) public userStakes;\n  address[] public allUsersStaking;\n\n  /**\n   * @notice The constructor for the staking master contract.\n   */\n  constructor(address _mtgyAddress, address _mtgySpendAddress) {\n    creator = msg.sender;\n    _mtgy = ERC20(_mtgyAddress);\n    _spend = MTGYSpend(_mtgySpendAddress);\n  }\n\n  function getAllFarmingContracts() public view returns (address[] memory) {\n    return allFarmingContracts;\n  }\n\n  function getTokensForStaking(address _tokenAddress)\n    public\n    view\n    returns (address[] memory)\n  {\n    return tokensUpForStaking[_tokenAddress];\n  }\n\n  function getUserStakingContracts(address _userAddress)\n    public\n    view\n    returns (address[] memory)\n  {\n    return userStakes[_userAddress];\n  }\n\n  function changeServiceCost(uint256 newCost) public {\n    require(msg.sender == creator, 'user needs to be the contract creator');\n    mtgyServiceCost = newCost;\n  }\n\n  function createNewTokenContract(\n    address _rewardsTokenAddy,\n    address _stakedTokenAddy,\n    uint256 _supply,\n    uint256 _perBlockAllocation,\n    uint256 _lockedUntilDate\n  ) public {\n    // pay the MTGY fee for using MTGYFaaS\n    _mtgy.transferFrom(msg.sender, address(this), mtgyServiceCost);\n    _mtgy.approve(address(_spend), mtgyServiceCost);\n    _spend.spendOnProduct(mtgyServiceCost);\n\n    // create new MTGYFaaSToken contract which will serve as the core place for\n    // users to stake their tokens and earn rewards\n    ERC20 _rewToken = ERC20(_rewardsTokenAddy);\n    MTGYFaaSToken _contract =\n      new MTGYFaaSToken(\n        'Moontography Staking Token',\n        'sMTGY',\n        _supply,\n        _rewardsTokenAddy,\n        _stakedTokenAddy,\n        msg.sender,\n        _perBlockAllocation,\n        _lockedUntilDate\n      );\n    allFarmingContracts.push(address(_contract));\n    tokensUpForStaking[_stakedTokenAddy].push(address(_contract));\n    totalStakingContracts++;\n\n    // Send the new contract all the tokens from the sending user to be staked and harvested\n    _rewToken.transferFrom(msg.sender, address(this), _supply);\n    _rewToken.transfer(address(_contract), _supply);\n  }\n\n  // function removeTokenContract(address _faasTokenAddy) public {\n  //   MTGYFaaSToken _contract = MTGYFaaSToken(_faasTokenAddy);\n  //   require(\n  //     msg.sender == _contract.tokenOwner(),\n  //     'user must be the original token owner to remove tokens'\n  //   );\n  //   require(\n  //     block.timestamp > _contract.lockedUntilDate() &&\n  //       _contract.lockedUntilDate() != 0,\n  //     'it must be after the locked time the user originally configured and not locked forever'\n  //   );\n\n  //   for (uint256 _i = 0; _i < allUsersStaking.length; _i++) {\n  //     _contract.harvestForUser(allUsersStaking[_i]);\n  //   }\n  //   _contract.removeStakeableTokens();\n  //   totalStakingContracts--;\n  // }\n\n  function userInd(address _addy) public view returns (int256) {\n    for (uint256 _i = 0; _i < allUsersStaking.length; _i++) {\n      if (allUsersStaking[_i] == _addy) {\n        return int256(_i);\n      }\n    }\n    return -1;\n  }\n\n  function addUserAsStaking(address _addy) public {\n    int256 ind = userInd(_addy);\n    if (ind == -1) {\n      allUsersStaking.push(_addy);\n    }\n  }\n\n  function removeUserAsStaking(address _addy) public {\n    int256 ind = userInd(_addy);\n    if (ind > -1) {\n      uint256 sind = uint256(ind);\n      delete allUsersStaking[sind];\n    }\n  }\n\n  function doesUserHaveContract(address _userAddress, address _stakingContract)\n    public\n    view\n    returns (bool)\n  {\n    for (uint256 _i = 0; _i < userStakes[_userAddress].length; _i++) {\n      if (userStakes[_userAddress][_i] == _stakingContract) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function addUserToContract(address _userAddress, address _stakingContract)\n    public\n  {\n    require(\n      msg.sender == _stakingContract,\n      'addUserToContract calling address must be staking contract'\n    );\n    MTGYFaaSToken _contract = MTGYFaaSToken(_stakingContract);\n    require(_contract.balanceOf(_userAddress) > 0);\n    userStakes[_userAddress].push(_stakingContract);\n  }\n\n  function removeContractFromUser(address _userAddress, address _stakingAddy)\n    public\n  {\n    require(\n      msg.sender == _stakingAddy,\n      'removeContractFromUser calling address must be staking contract'\n    );\n    MTGYFaaSToken _contract = MTGYFaaSToken(_stakingAddy);\n    require(_contract.balanceOf(_userAddress) == 0);\n    for (uint256 _i = 0; _i < userStakes[_userAddress].length; _i++) {\n      if (userStakes[_userAddress][_i] == _stakingAddy) {\n        delete userStakes[_userAddress][_i];\n      }\n    }\n  }\n}\n"
    },
    "contracts/MTGYFaaSToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\nimport './MTGYFaaS.sol';\n\n/**\n * @title MTGYFaaSToken (sMTGY)\n * @author Lance Whatley\n * @notice Represents a contract where a token owner has put her tokens up for others to stake and earn said tokens.\n */\ncontract MTGYFaaSToken is ERC20 {\n  using SafeMath for uint256;\n\n  address public creator;\n  address public tokenOwner;\n  uint256 public origTotSupply;\n  uint256 public curRewardsSupply;\n  address public rewardsTokenAddress;\n  address public stakedTokenAddress;\n  uint256 public totalTokensStaked;\n  uint256 public creationBlock;\n  uint256 public perBlockNum;\n  uint256 public lockedUntilDate;\n  bool public contractIsRemoved = false;\n\n  MTGYFaaS private _parentContract;\n  ERC20 private _rewardsToken;\n  ERC20 private _stakedToken;\n  address private constant _burner = 0x000000000000000000000000000000000000dEaD;\n\n  struct TokenHarvester {\n    address tokenAddy;\n    uint256 blockOriginallStaked;\n    uint256 blockLastHarvested;\n  }\n\n  struct BlockTokenTotal {\n    uint256 blockNumber;\n    uint256 totalTokens;\n  }\n\n  // mapping of userAddresses => tokenAddresses that can\n  // can be evaluated to determine for a particular user which tokens\n  // they are staking.\n  mapping(address => TokenHarvester) public tokenStakers;\n\n  BlockTokenTotal[] public blockTotals;\n\n  /**\n   * @notice The constructor for the Staking Token.\n   * @param _name Name of the staking token\n   * @param _symbol Name of the staking token symbol\n   * @param _rewardSupply The amount of tokens to mint on construction, this should be the same as the tokens provided by the creating user.\n   * @param _rewardsTokenAddy Contract address of token to be rewarded to users\n   * @param _stakedTokenAddy Contract address of token to be staked by users\n   * @param _originalTokenOwner Address of user putting up staking tokens to be staked\n   * @param _perBlockAmount Amount of tokens to be rewarded per block\n   * @param _lockedUntilDate Unix timestamp that the staked tokens will be locked. 0 means locked forever until all tokens are staked\n   */\n  constructor(\n    string memory _name,\n    string memory _symbol,\n    uint256 _rewardSupply,\n    address _rewardsTokenAddy,\n    address _stakedTokenAddy,\n    address _originalTokenOwner,\n    uint256 _perBlockAmount,\n    uint256 _lockedUntilDate\n  ) ERC20(_name, _symbol) {\n    require(\n      _perBlockAmount > uint256(0) && _perBlockAmount <= uint256(_rewardSupply),\n      'per block amount must be more than 0 and less than supply'\n    );\n\n    // A locked date of '0' corresponds to being locked forever until the supply has expired and been rewards to all stakers\n    require(\n      _lockedUntilDate > block.timestamp || _lockedUntilDate == 0,\n      'locked time must be after now or 0'\n    );\n\n    creationBlock = block.number;\n    creator = msg.sender;\n    origTotSupply = _rewardSupply;\n    curRewardsSupply = _rewardSupply;\n    tokenOwner = _originalTokenOwner;\n    rewardsTokenAddress = _rewardsTokenAddy;\n    stakedTokenAddress = _stakedTokenAddy;\n    perBlockNum = _perBlockAmount;\n    lockedUntilDate = _lockedUntilDate;\n    _parentContract = MTGYFaaS(creator);\n    _rewardsToken = ERC20(_rewardsTokenAddy);\n    _stakedToken = ERC20(_stakedTokenAddy);\n  }\n\n  function removeStakeableTokens() public {\n    require(msg.sender == creator, 'caller must be the contract creator');\n    _rewardsToken.transfer(tokenOwner, curRewardsSupply);\n    contractIsRemoved = true;\n  }\n\n  // function updateTimestamp(uint256 _newTime) public {\n  //   require(\n  //     msg.sender == tokenOwner,\n  //     'updateTimestamp user must be original token owner'\n  //   );\n  //   require(\n  //     _newTime > lockedUntilDate || _newTime == 0,\n  //     'you cannot change timestamp if it is before the locked time or was set to be locked forever'\n  //   );\n  //   lockedUntilDate = _newTime;\n  // }\n\n  function stakeTokens(uint256 _amount) public {\n    require(\n      getLastStakableBlock() > block.number,\n      'this farm is expired and no more stakers can be added'\n    );\n    if (balanceOf(msg.sender) > 0) {\n      harvestForUser(msg.sender);\n    }\n    _stakedToken.transferFrom(msg.sender, address(this), _amount);\n    if (totalSupply() == 0) {\n      creationBlock = block.number;\n    }\n    _mint(msg.sender, _amount);\n    tokenStakers[msg.sender] = TokenHarvester({\n      tokenAddy: address(_stakedToken),\n      blockOriginallStaked: block.number,\n      blockLastHarvested: block.number\n    });\n\n    _parentContract.addUserAsStaking(msg.sender);\n    if (!_parentContract.doesUserHaveContract(msg.sender, address(this))) {\n      _parentContract.addUserToContract(msg.sender, address(this));\n    }\n    _updNumStaked(_amount, 'add');\n  }\n\n  function unstakeTokens(uint256 _amount, bool shouldHarvest) public {\n    require(\n      _amount <= balanceOf(msg.sender),\n      'user can only unstake amount they have currently staked or less'\n    );\n\n    if (shouldHarvest) {\n      harvestForUser(msg.sender);\n    }\n\n    transfer(_burner, _amount);\n    require(\n      _stakedToken.transfer(msg.sender, _amount),\n      'unable to send user original tokens'\n    );\n    if (balanceOf(msg.sender) <= 0) {\n      _parentContract.removeUserAsStaking(msg.sender);\n      _parentContract.removeContractFromUser(msg.sender, address(this));\n      delete tokenStakers[msg.sender];\n    }\n\n    _updNumStaked(_amount, 'remove');\n  }\n\n  function harvestTokens() public returns (uint256) {\n    return _harvestTokens(msg.sender);\n  }\n\n  function harvestForUser(address _userAddy) public returns (uint256) {\n    require(\n      msg.sender == creator || msg.sender == _userAddy,\n      'can only harvest tokens for someone else if this was the contract creator'\n    );\n    return _harvestTokens(_userAddy);\n  }\n\n  function getLastStakableBlock() public view returns (uint256) {\n    return (origTotSupply.div(perBlockNum)).add(creationBlock);\n  }\n\n  function calcHarvestTot(address _userAddy) public view returns (uint256) {\n    TokenHarvester memory _staker = tokenStakers[_userAddy];\n\n    if (_staker.blockLastHarvested == block.number) {\n      return uint256(0);\n    }\n\n    uint256 _lastBl = block.number;\n    if (getLastStakableBlock() < _lastBl) {\n      _lastBl = getLastStakableBlock();\n    }\n\n    uint256 _tokensToHarvest = 0;\n    uint256 _stBlockInd = 0;\n    for (uint256 _ind = _stBlockInd; _ind < blockTotals.length; _ind++) {\n      uint256 _startBlock =\n        _max(_staker.blockLastHarvested, blockTotals[_ind].blockNumber);\n      uint256 _endBlock = block.number;\n      if (blockTotals[_ind].totalTokens == 0) {\n        continue;\n      } else if (blockTotals[_ind].totalTokens < balanceOf(_userAddy)) {\n        continue;\n      }\n\n      BlockTokenTotal memory _nextTotal = blockTotals[_ind];\n      if (_ind + 1 < blockTotals.length) {\n        _nextTotal = blockTotals[_ind + 1];\n        if (_nextTotal.blockNumber <= _staker.blockLastHarvested) {\n          continue;\n        }\n      }\n\n      if (_nextTotal.blockNumber != blockTotals[_ind].blockNumber) {\n        _endBlock = _nextTotal.blockNumber;\n      }\n\n      if (_lastBl <= _endBlock) {\n        _endBlock = _lastBl;\n      }\n\n      if (_startBlock >= _endBlock) {\n        continue;\n      }\n\n      // Solidity division is integer division, so you can't divide by a larger number\n      // and get anything other than 0. Need to do multiplication first then\n      // divide by the total.\n      // _tokensToHarvest += perBlockNum.mul(_endBlock - _startBlock).mul(\n      //   balanceOf(_userAddy).div(blockTotals[_ind].totalTokens)\n      // );\n      _tokensToHarvest += (_endBlock.sub(_startBlock)).mul(\n        (\n          balanceOf(_userAddy).mul(perBlockNum).div(\n            blockTotals[_ind].totalTokens\n          )\n        )\n      );\n\n      // if we are at the end of the farming period,\n      // there are no more tokens that can be earned\n      if (_lastBl <= _endBlock) {\n        break;\n      }\n    }\n    return _tokensToHarvest;\n  }\n\n  function _max(uint256 a, uint256 b) private pure returns (uint256) {\n    if (a > b) {\n      return a;\n    }\n    return b;\n  }\n\n  function _harvestTokens(address _userAddy) private returns (uint256) {\n    TokenHarvester memory _num = tokenStakers[_userAddy];\n    require(_num.blockOriginallStaked > 0, 'user must have tokens staked');\n\n    uint256 _diff = block.number - _num.blockLastHarvested;\n    require(_diff >= 0, 'must be after when the user last harvested');\n\n    uint256 _num2Trans = calcHarvestTot(_userAddy);\n    if (_num2Trans > 0) {\n      require(\n        _rewardsToken.transfer(_userAddy, _num2Trans),\n        'unable to send user their harvested tokens'\n      );\n      curRewardsSupply = curRewardsSupply.sub(_num2Trans);\n    }\n    tokenStakers[_userAddy].blockLastHarvested = block.number;\n    return _num2Trans;\n  }\n\n  // update the amount currently staked after a user harvests\n  function _updNumStaked(uint256 _amount, string memory _operation) private {\n    if (_compareStr(_operation, 'remove')) {\n      totalTokensStaked = totalTokensStaked - _amount;\n    } else {\n      totalTokensStaked = totalTokensStaked + _amount;\n    }\n\n    BlockTokenTotal memory newBlockTotal =\n      BlockTokenTotal({\n        blockNumber: block.number,\n        totalTokens: totalTokensStaked\n      });\n    blockTotals.push(newBlockTotal);\n  }\n\n  function _compareStr(string memory a, string memory b)\n    private\n    pure\n    returns (bool)\n  {\n    return (keccak256(abi.encodePacked((a))) ==\n      keccak256(abi.encodePacked((b))));\n  }\n}\n"
    },
    "contracts/MTGYSpend.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\n/**\n * @title MTGYSpend\n * @dev Logic for spending $MTGY on products in the moontography ecosystem.\n */\ncontract MTGYSpend {\n  ERC20 private _mtgy;\n\n  struct SpentInfo {\n    uint256 timestamp;\n    uint256 tokens;\n  }\n\n  address public creator;\n  address public constant burnWallet =\n    0x000000000000000000000000000000000000dEaD;\n  address public devWallet = 0x3A3ffF4dcFCB7a36dADc40521e575380485FA5B8;\n  address public rewardsWallet = 0x87644cB97C1e2Cc676f278C88D0c4d56aC17e838;\n  address public mtgyTokenAddy;\n\n  SpentInfo[] public spentTimestamps;\n  uint256 public totalSpent = 0;\n\n  event Spend(address indexed owner, uint256 value);\n\n  constructor(address _mtgyTokenAddy) {\n    creator = msg.sender;\n    mtgyTokenAddy = _mtgyTokenAddy;\n    _mtgy = ERC20(_mtgyTokenAddy);\n  }\n\n  function changeMtgyTokenAddy(address _mtgyAddy) public {\n    require(\n      msg.sender == creator,\n      'changeMtgyTokenAddy user must be contract creator'\n    );\n    mtgyTokenAddy = _mtgyAddy;\n    _mtgy = ERC20(_mtgyAddy);\n  }\n\n  function changeDevWallet(address _newDevWallet) public {\n    require(\n      msg.sender == creator,\n      'changeDevWallet user must be contract creator'\n    );\n    devWallet = _newDevWallet;\n  }\n\n  function changeRewardsWallet(address _newRewardsWallet) public {\n    require(\n      msg.sender == creator,\n      'changeRewardsWallet user must be contract creator'\n    );\n    rewardsWallet = _newRewardsWallet;\n  }\n\n  function getSpentByTimestamp() public view returns (SpentInfo[] memory) {\n    return spentTimestamps;\n  }\n\n  /**\n   * spendOnProduct: used by a moontography product for a user to spend their tokens on usage of a product\n   *   25% goes to dev wallet\n   *   25% goes to rewards wallet for rewards\n   *   50% burned\n   */\n  function spendOnProduct(uint256 _productCostTokens) public returns (bool) {\n    totalSpent += _productCostTokens;\n    spentTimestamps.push(\n      SpentInfo({ timestamp: block.timestamp, tokens: _productCostTokens })\n    );\n    uint256 _half = _productCostTokens / uint256(2);\n    uint256 _quarter = _half / uint256(2);\n\n    // 50% burn\n    _mtgy.transferFrom(msg.sender, burnWallet, _half);\n    // 25% rewards wallet\n    _mtgy.transferFrom(msg.sender, rewardsWallet, _quarter);\n    // 25% dev wallet\n    _mtgy.transferFrom(\n      msg.sender,\n      devWallet,\n      _productCostTokens - _half - _quarter\n    );\n    emit Spend(msg.sender, _productCostTokens);\n    return true;\n  }\n}\n"
    }
  }
}