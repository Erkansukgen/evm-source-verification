{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"EmiVamp.Full.sol":{"content":"// File: contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\n\npragma solidity ^0.6.0;\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n// File: contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\n\npragma solidity ^0.6.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256\n    );\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: contracts/libraries/Priviledgeable.sol\n\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.6.2;\n\n\nabstract contract Priviledgeable {\n    using SafeMath for uint256;\n    using SafeMath for uint256;\n\n    event PriviledgeGranted(address indexed admin);\n    event PriviledgeRevoked(address indexed admin);\n\n    modifier onlyAdmin() {\n        require(\n            _priviledgeTable[msg.sender],\n            \"Priviledgeable: caller is not the owner\"\n        );\n        _;\n    }\n\n    mapping(address => bool) private _priviledgeTable;\n\n    constructor() internal {\n        _priviledgeTable[msg.sender] = true;\n    }\n\n    function addAdmin(address _admin) external onlyAdmin returns (bool) {\n        require(_admin != address(0), \"Admin address cannot be 0\");\n        return _addAdmin(_admin);\n    }\n\n    function removeAdmin(address _admin) external onlyAdmin returns (bool) {\n        require(_admin != address(0), \"Admin address cannot be 0\");\n        _priviledgeTable[_admin] = false;\n        emit PriviledgeRevoked(_admin);\n\n        return true;\n    }\n\n    function isAdmin(address _who) external view returns (bool) {\n        return _priviledgeTable[_who];\n    }\n\n    //-----------\n    // internals\n    //-----------\n    function _addAdmin(address _admin) internal returns (bool) {\n        _priviledgeTable[_admin] = true;\n        emit PriviledgeGranted(_admin);\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/proxy/Initializable.sol\n\n// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !Address.isContract(address(this));\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// File: contracts/interfaces/IEmiswap.sol\n\n// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.6.0;\n\n\ninterface IEmiswapRegistry {\n    function pools(IERC20 token1, IERC20 token2)\n        external\n        view\n        returns (IEmiswap);\n\n    function isPool(address addr) external view returns (bool);\n\n    function deploy(IERC20 tokenA, IERC20 tokenB) external returns (IEmiswap);\n}\n\ninterface IEmiswap {\n    function fee() external view returns (uint256);\n\n    function tokens(uint256 i) external view returns (IERC20);\n\n    function deposit(\n        uint256[] calldata amounts,\n        uint256[] calldata minAmounts,\n        address referral\n    ) external payable returns (uint256 fairSupply);\n\n    function withdraw(uint256 amount, uint256[] calldata minReturns) external;\n\n    function getBalanceForAddition(IERC20 token)\n        external\n        view\n        returns (uint256);\n\n    function getBalanceForRemoval(IERC20 token) external view returns (uint256);\n\n    function getReturn(\n        IERC20 fromToken,\n        IERC20 destToken,\n        uint256 amount\n    ) external view returns (uint256 returnAmount);\n\n    function swap(\n        IERC20 fromToken,\n        IERC20 destToken,\n        uint256 amount,\n        uint256 minReturn,\n        address to,\n        address referral\n    ) external payable returns (uint256 returnAmount);\n\n    function initialize(IERC20[] calldata assets) external;\n}\n\n// File: contracts/interfaces/IEmiVoting.sol\n\n// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.6.2;\n\ninterface IEmiVoting {\n    function getVotingResult(uint256 _hash) external view returns (address);\n}\n\n// File: contracts/interfaces/IMooniswap.sol\n\ninterface IMooniswap {\n    function getTokens() external view returns (IERC20[] memory);\n\n    function withdraw(uint256 amount, uint256[] calldata minReturns) external;\n}\n\n// File: contracts/libraries/TransferHelper.sol\n\n// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: APPROVE_FAILED\"\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: TRANSFER_FAILED\"\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\n    }\n}\n\n// File: contracts/libraries/EmiswapLib.sol\n\n// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.6.0;\n\n\n\n\nlibrary EmiswapLib {\n    using SafeMath for uint256;\n    uint256 public constant FEE_DENOMINATOR = 1e18;\n\n    function previewSwapExactTokenForToken(\n        address factory,\n        address tokenFrom,\n        address tokenTo,\n        uint256 ammountFrom\n    ) internal view returns (uint256 ammountTo) {\n        IEmiswap pairContract =\n            IEmiswapRegistry(factory).pools(IERC20(tokenFrom), IERC20(tokenTo));\n\n        if (pairContract != IEmiswap(0)) {\n            ammountTo = pairContract.getReturn(\n                IERC20(tokenFrom),\n                IERC20(tokenTo),\n                ammountFrom\n            );\n        }\n    }\n\n    /**************************************************************************************\n     * get preview result of virtual swap by route of tokens\n     **************************************************************************************/\n    function previewSwapbyRoute(\n        address factory,\n        address[] memory path,\n        uint256 ammountFrom\n    ) internal view returns (uint256 ammountTo) {\n        for (uint256 i = 0; i < path.length - 1; i++) {\n            if (path.length >= 2) {\n                ammountTo = previewSwapExactTokenForToken(\n                    factory,\n                    path[i],\n                    path[i + 1],\n                    ammountFrom\n                );\n\n                if (i == (path.length - 2)) {\n                    return (ammountTo);\n                } else {\n                    ammountFrom = ammountTo;\n                }\n            }\n        }\n    }\n\n    function fee(address factory) internal view returns (uint256) {\n        return IEmiswap(factory).fee();\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(\n        address factory,\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal view returns (uint256 amountIn) {\n        require(amountOut > 0, \"EmiswapLibrary: INSUFFICIENT_OUTPUT_AMOUNT\");\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"EmiswapLibrary: INSUFFICIENT_LIQUIDITY\"\n        );\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\n        uint256 denominator =\n            reserveOut.sub(amountOut).mul(\n                uint256(1000000000000000000).sub(fee(factory)).div(1e15)\n            ); // 997\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(\n        address factory,\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal view returns (uint256 amountOut) {\n        if (amountIn == 0 || reserveIn == 0 || reserveOut == 0) {\n            return (0);\n        }\n\n        uint256 amountInWithFee =\n            amountIn.mul(\n                uint256(1000000000000000000).sub(fee(factory)).div(1e15)\n            ); //997\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = (denominator == 0 ? 0 : amountOut =\n            numerator /\n            denominator);\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(\n        address factory,\n        uint256 amountOut,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"EmiswapLibrary: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; i--) {\n            IEmiswap pairContract =\n                IEmiswapRegistry(factory).pools(\n                    IERC20(IERC20(path[i])),\n                    IERC20(path[i - 1])\n                );\n\n            uint256 reserveIn;\n            uint256 reserveOut;\n\n            if (address(pairContract) != address(0)) {\n                reserveIn = IEmiswap(pairContract).getBalanceForAddition(\n                    IERC20(path[i - 1])\n                );\n                reserveOut = IEmiswap(pairContract).getBalanceForRemoval(\n                    IERC20(path[i])\n                );\n            }\n\n            amounts[i - 1] = getAmountIn(\n                factory,\n                amounts[i],\n                reserveIn,\n                reserveOut\n            );\n        }\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(\n        address factory,\n        uint256 amountIn,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"EmiswapLibrary: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i = 0; i < path.length - 1; i++) {\n            IEmiswap pairContract =\n                IEmiswapRegistry(factory).pools(\n                    IERC20(IERC20(path[i])),\n                    IERC20(path[i + 1])\n                );\n\n            uint256 reserveIn;\n            uint256 reserveOut;\n\n            if (address(pairContract) != address(0)) {\n                reserveIn = IEmiswap(pairContract).getBalanceForAddition(\n                    IERC20(path[i])\n                );\n                reserveOut = IEmiswap(pairContract).getBalanceForRemoval(\n                    IERC20(path[i + 1])\n                );\n            }\n\n            amounts[i + 1] = getAmountOut(\n                factory,\n                amounts[i],\n                reserveIn,\n                reserveOut\n            );\n        }\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (uint256 amountB) {\n        require(amountA > 0, \"EmiswapLibrary: INSUFFICIENT_AMOUNT\");\n        require(\n            reserveA > 0 && reserveB > 0,\n            \"EmiswapLibrary: INSUFFICIENT_LIQUIDITY\"\n        );\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n}\n\n// File: contracts/EmiVamp.sol\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @dev Contract to convert liquidity from other market makers (Uniswap/Mooniswap) to our pairs.\n */\ncontract EmiVamp is Initializable, Priviledgeable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    struct LPTokenInfo {\n        address lpToken;\n        uint16 tokenType; // Token type: 0 - uniswap (default), 1 - mooniswap\n    }\n\n    // Info of each third-party lp-token.\n    LPTokenInfo[] public lpTokensInfo;\n\n\n string public codeVersion = \"EmiVamp v1.0-159-g102f789\";\n    address public ourFactory;\n    event Deposit(address indexed user, address indexed token, uint256 amount);\n\n    address public defRef;\n    address private _voting;\n\n    // !!!In updates to contracts set new variables strictly below this line!!!\n    //-----------------------------------------------------------------------------------\n\n    /**\n     * @dev Implementation of {UpgradeableProxy} type of constructors\n     */\n    function initialize(\n        address[] memory _lptokens,\n        uint8[] memory _types,\n        address _ourfactory,\n        address _ourvoting\n    ) public initializer {\n\n        require(_lptokens.length > 0, \"EmiVamp: length>0!\");\n        require(_lptokens.length == _types.length, \"EmiVamp: lengths!\");\n        require(_ourfactory != address(0), \"EmiVamp: factory!\");\n        require(_ourvoting != address(0), \"EmiVamp: voting!\");\n\n        for (uint256 i = 0; i < _lptokens.length; i++) {\n            lpTokensInfo.push(\n                LPTokenInfo({lpToken: _lptokens[i], tokenType: _types[i]})\n            );\n        }\n        ourFactory = _ourfactory;\n        defRef = address(0xdF3242dE305d033Bb87334169faBBf3b7d3D96c2);\n        _addAdmin(msg.sender);\n    }\n\n    /**\n     * @dev Returns length of LP-tokens private array\n     */\n    function lpTokensInfoLength() external view returns (uint256) {\n        return lpTokensInfo.length;\n    }\n\n    /**\n     *  @dev Returns pair base tokens\n     */\n    function lpTokenDetailedInfo(uint256 _pid)\n        external\n        view\n        returns (address, address)\n    {\n\n        require(_pid < lpTokensInfo.length, \"EmiVamp: Wrong lpToken idx\");\n\n        if (lpTokensInfo[_pid].tokenType == 0) {\n            // this is uniswap\n            IUniswapV2Pair lpToken = IUniswapV2Pair(lpTokensInfo[_pid].lpToken);\n            return (lpToken.token0(), lpToken.token1());\n        } else {\n            // this is mooniswap\n            IMooniswap lpToken = IMooniswap(lpTokensInfo[_pid].lpToken);\n            IERC20[] memory t = lpToken.getTokens();\n            return (address(t[0]), address(t[1]));\n        }\n    }\n\n    /**\n\n     * @dev Adds new entry to the list of convertible LP-tokens\n     */\n    function addLPToken(address _token, uint16 _tokenType)\n        external\n        onlyAdmin\n        returns (uint256)\n    {\n\n        require(_token != address(0), \"EmiVamp: Token address cannot be 0\");\n        require(_tokenType < 2, \"EmiVamp: Wrong type\");\n\n        for (uint256 i = 0; i < lpTokensInfo.length; i++) {\n            if (lpTokensInfo[i].lpToken == _token) {\n                return i;\n            }\n        }\n        lpTokensInfo.push(\n            LPTokenInfo({lpToken: _token, tokenType: _tokenType})\n        );\n        return lpTokensInfo.length;\n    }\n\n    /**\n     * @dev Remove entry from the list of convertible LP-tokens\n     */\n    function removeLPToken(uint256 _idx) external onlyAdmin {\n        require(_idx < lpTokensInfo.length, \"EmiVamp: wrong idx\");\n\n        delete lpTokensInfo[_idx];\n    }\n\n    /**\n     * @dev Change entry from the list of convertible LP-tokens\n     */\n    function changeLPToken(\n        uint256 _idx,\n        address _token,\n        uint16 _tokenType\n    ) external onlyAdmin {\n        require(_idx < lpTokensInfo.length, \"EmiVamp: wrong idx\");\n        require(_token != address(0), \"EmiVamp: token=0!\");\n        require(_tokenType < 2, \"EmiVamp: wrong tokenType\");\n\n        lpTokensInfo[_idx].lpToken = _token;\n        lpTokensInfo[_idx].tokenType = _tokenType;\n    }\n\n    /**\n     * @dev Change emifactory address\n     */\n    function changeFactory(uint256 _proposalId) external onlyAdmin {\n        address _newFactory;\n\n        _newFactory = IEmiVoting(_voting).getVotingResult(_proposalId);\n        require(_newFactory != address(0), \"EmiVamp: New factory address is wrong\");\n\n        ourFactory = _newFactory;\n    }\n\n    /**\n     * @dev Change default referrer address\n     */\n    function changeReferral(address _ref) external onlyAdmin {\n        defRef = _ref;\n    }\n\n    // Deposit LP tokens to us\n    /**\n     * @dev Main function that converts third-party liquidity (represented by LP-tokens) to our own LP-tokens\n     */\n    function deposit(uint256 _pid, uint256 _amount) public {\n        require(_pid < lpTokensInfo.length, \"EmiVamp: pool idx is wrong\");\n\n        if (lpTokensInfo[_pid].tokenType == 0) {\n            _depositUniswap(_pid, _amount);\n        } else if (lpTokensInfo[_pid].tokenType == 1) {\n            _depositMooniswap(_pid, _amount);\n        } else {\n            return;\n        }\n        emit Deposit(msg.sender, lpTokensInfo[_pid].lpToken, _amount);\n    }\n\n    /**\n     * @dev Actual function that converts third-party Uniswap liquidity (represented by LP-tokens) to our own LP-tokens\n     */\n    function _depositUniswap(uint256 _pid, uint256 _amount) internal {\n        IUniswapV2Pair lpToken = IUniswapV2Pair(lpTokensInfo[_pid].lpToken);\n\n        // check pair existance\n        IERC20 token0 = IERC20(lpToken.token0());\n        IERC20 token1 = IERC20(lpToken.token1());\n\n        // transfer to us\n        TransferHelper.safeTransferFrom(\n            address(lpToken),\n            address(msg.sender),\n            address(lpToken),\n            _amount\n        );\n\n        // get liquidity\n        (uint256 amountIn0, uint256 amountIn1) = lpToken.burn(address(this));\n\n        _addOurLiquidity(\n            address(token0),\n            address(token1),\n            amountIn0,\n            amountIn1,\n            msg.sender\n        );\n    }\n\n    function _addOurLiquidity(\n        address _token0,\n        address _token1,\n        uint256 _amount0,\n        uint256 _amount1,\n        address _to\n    ) internal {\n\n        (uint256 amountA, uint256 amountB) =\n            _addLiquidity(_token0, _token1, _amount0, _amount1);\n\n        IEmiswap pairContract =\n            IEmiswapRegistry(ourFactory).pools(\n                IERC20(_token0),\n                IERC20(_token1)\n            );\n\n        TransferHelper.safeApprove(_token0, address(pairContract), amountA);\n        TransferHelper.safeApprove(_token1, address(pairContract), amountB);\n\n        uint256[] memory amounts;\n        amounts = new uint256[](2);\n        uint256[] memory minAmounts;\n        minAmounts = new uint256[](2);\n\n        if (_token0 < _token1) {\n            amounts[0] = amountA;\n            amounts[1] = amountB;\n        } else {\n            amounts[0] = amountB;\n            amounts[1] = amountA;\n        }\n\n        uint256 liquidity =\n            IEmiswap(pairContract).deposit(amounts, minAmounts, defRef);\n        TransferHelper.safeTransfer(address(pairContract), _to, liquidity);\n\n        // return the change\n        if (amountA < _amount0) {\n\n            // consumed less tokens 0 than given\n            TransferHelper.safeTransfer(\n                _token0,\n                address(msg.sender),\n                _amount0.sub(amountA)\n            );\n        }\n\n\n        if (amountB < _amount1) {\n\n            // consumed less tokens 1 than given\n            TransferHelper.safeTransfer(\n                _token1,\n                address(msg.sender),\n                _amount1.sub(amountB)\n            );\n        }\n    }\n\n    /**\n     * @dev Actual function that converts third-party Mooniswap liquidity (represented by LP-tokens) to our own LP-tokens\n     */\n    function _depositMooniswap(uint256 _pid, uint256 _amount) internal {\n        IMooniswap lpToken = IMooniswap(lpTokensInfo[_pid].lpToken);\n        IERC20[] memory t = lpToken.getTokens();\n\n        // check pair existance\n        IERC20 token0 = IERC20(t[0]);\n        IERC20 token1 = IERC20(t[1]);\n\n        // transfer to us\n        TransferHelper.safeTransferFrom(\n            address(lpToken),\n            address(msg.sender),\n            address(this),\n            _amount\n        );\n\n        uint256 amountBefore0 = token0.balanceOf(address(this));\n        uint256 amountBefore1 = token1.balanceOf(address(this));\n\n        uint256[] memory minVals = new uint256[](2);\n\n        lpToken.withdraw(_amount, minVals);\n\n        // get liquidity\n        uint256 amount0 = token0.balanceOf(address(this)).sub(amountBefore0);\n        uint256 amount1 = token1.balanceOf(address(this)).sub(amountBefore1);\n\n        _addOurLiquidity(\n            address(token0),\n            address(token1),\n            amount0,\n            amount1,\n            msg.sender\n        );\n    }\n\n    /**\n    @dev Function check for LP token pair availability. Return _pid or 0 if none exists\n  */\n    function isPairAvailable(address _token0, address _token1)\n        public\n        view\n        returns (uint16)\n    {\n\n        require(_token0 != address(0), \"EmiVamp: wrong token0 address\");\n        require(_token1 != address(0), \"EmiVamp: wrong token1 address\");\n\n\n        for (uint16 i = 0; i < lpTokensInfo.length; i++) {\n            address t0 = address(0);\n            address t1 = address(0);\n\n            if (lpTokensInfo[i].tokenType == 0) {\n                IUniswapV2Pair lpt = IUniswapV2Pair(lpTokensInfo[i].lpToken);\n                t0 = lpt.token0();\n                t1 = lpt.token1();\n            } else if (lpTokensInfo[i].tokenType == 1) {\n                IMooniswap lpToken = IMooniswap(lpTokensInfo[i].lpToken);\n\n                IERC20[] memory t = lpToken.getTokens();\n\n                t0 = address(t[0]);\n                t1 = address(t[1]);\n            } else {\n                return 0;\n            }\n\n            if (\n                (t0 == _token0 && t1 == _token1) ||\n                (t1 == _token0 && t0 == _token1)\n            ) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n\n    // **** ADD LIQUIDITY ****\n    function _addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired\n    ) internal returns (uint256 amountA, uint256 amountB) {\n        IERC20 ERC20tokenA = IERC20(tokenA);\n        IERC20 ERC20tokenB = IERC20(tokenB);\n\n        IEmiswap pairContract =\n            IEmiswapRegistry(ourFactory).pools(ERC20tokenA, ERC20tokenB);\n        // create the pair if it doesn't exist yet\n        if (pairContract == IEmiswap(0)) {\n            pairContract = IEmiswapRegistry(ourFactory).deploy(\n                ERC20tokenA,\n                ERC20tokenB\n            );\n        }\n\n        uint256 reserveA = pairContract.getBalanceForAddition(ERC20tokenA);\n        uint256 reserveB = pairContract.getBalanceForRemoval(ERC20tokenB);\n\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (amountADesired, amountBDesired);\n        } else {\n            uint256 amountBOptimal =\n                EmiswapLib.quote(amountADesired, reserveA, reserveB);\n            if (amountBOptimal <= amountBDesired) {\n                require(\n                    amountBOptimal >= 0,\n                    \"EmiswapRouter: INSUFFICIENT_B_AMOUNT\"\n                );\n                (amountA, amountB) = (amountADesired, amountBOptimal);\n            } else {\n                uint256 amountAOptimal =\n                    EmiswapLib.quote(amountBDesired, reserveB, reserveA);\n                assert(amountAOptimal <= amountADesired);\n                require(\n                    amountAOptimal >= 0,\n                    \"EmiswapRouter: INSUFFICIENT_A_AMOUNT\"\n                );\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\n            }\n        }\n    }\n\n    /**\n     * @dev Owner can transfer out any accidentally sent ERC20 tokens\n     */\n    function transferAnyERC20Token(\n        address tokenAddress,\n        address beneficiary,\n        uint256 tokens\n    ) external onlyAdmin nonReentrant() returns (bool success) {\n        require(tokenAddress != address(0), \"EmiVamp: Token address cannot be 0\");\n        return IERC20(tokenAddress).transfer(beneficiary, tokens);\n    }\n}\n"}}}