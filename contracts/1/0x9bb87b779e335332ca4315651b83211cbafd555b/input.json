{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "IdentityProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.6.9;\r\n\r\n\r\ninterface IImplementationAuthority {\r\n    function getImplementation() external view returns(address);\r\n}\r\n\r\ncontract IdentityProxy {\r\n    address public implementationAuthority;\r\n\r\n    constructor(address _implementationAuthority, address initialManagementKey) public {\r\n        implementationAuthority = _implementationAuthority;\r\n\r\n        address logic = IImplementationAuthority(implementationAuthority).getImplementation();\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success,) = logic.delegatecall(abi.encodeWithSignature(\"initialize(address)\", initialManagementKey));\r\n        require(success, \"Initialization failed.\");\r\n    }\r\n\r\n    fallback() external payable {\r\n        address logic = IImplementationAuthority(implementationAuthority).getImplementation();\r\n\r\n        assembly { // solium-disable-line\r\n        calldatacopy(0x0, 0x0, calldatasize())\r\n        let success := delegatecall(sub(gas(), 10000), logic, 0x0, calldatasize(), 0, 0)\r\n        let retSz := returndatasize()\r\n        returndatacopy(0, 0, retSz)\r\n        switch success\r\n            case 0 {\r\n                revert(0, retSz)\r\n            }\r\n            default {\r\n                return(0, retSz)\r\n            }\r\n        }\r\n    }\r\n}"
    }
  }
}