{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Kuailian.sol": {
      "content": "pragma solidity 0.6.4;\n\n/**\n * @title Sending bulk transactions from the whitelisted wallets.\n */\ncontract BulkSender {\n\n    /**\n     * @dev Gets the list of addresses and the list of amounts to make bulk transactions.\n     * @param addresses - address[]\n     * @param amounts - uint256[]\n     */\n    function distribute(address[] calldata addresses, uint256[] calldata amounts) external payable  {\n        require(addresses.length > 0, \"BulkSender: the length of addresses should be greater than zero\");\n        require(amounts.length == addresses.length, \"BulkSender: the length of addresses is not equal the length of amounts\");\n\n        for (uint256 i; i < addresses.length; i++) {\n            uint256 value = amounts[i];\n            require(value > 0, \"BulkSender: the value should be greater then zero\");\n            address payable _to = address(uint160(addresses[i]));\n            _to.transfer(value);\n        }\n\n        require(address(this).balance == 0, \"All received funds must be transfered\");\n    }\n\n    fallback() external payable {\n        revert();\n    }\n}"
    }
  }
}