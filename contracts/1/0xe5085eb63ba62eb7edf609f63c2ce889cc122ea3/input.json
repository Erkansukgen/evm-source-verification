{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/YieldTokenFactory.sol": {
      "content": "// Sources flattened with hardhat v2.0.6 https://hardhat.org\n\n// File contracts/uniswapv2/libraries/TransferHelper.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n\n\n// File contracts/interfaces/IERC20.sol\n\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    // EIP 2612\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n\n\n// File contracts/uniswapv2/libraries/SafeMath.sol\n\n\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMathUniswap {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n\n\n// File contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\n\n\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n\n// File contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol\n\n\n\ninterface IUniswapV2ERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n\n\n// File contracts/SushiYieldToken.sol\n\n\n\n\n\n\ncontract SushiYieldToken {\n    using SafeMathUniswap for uint256;\n    using TransferHelper for address;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Mint(address indexed sender, uint256 amount);\n    event Burn(address indexed sender, uint256 amount, address indexed to);\n\n    /**\n     * @return address of YieldTokenFactory\n     */\n    address public factory;\n    /**\n     * @return address of lp token\n     */\n    address public lpToken;\n    /**\n     * @return data to be used when `mint`ing/`burn`ing\n     */\n    bytes public data;\n\n    string public name;\n    string public symbol;\n    uint8 public constant decimals = 18;\n    uint256 public totalSupply;\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    bytes32 public DOMAIN_SEPARATOR;\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    mapping(address => uint256) public nonces;\n\n    uint256 private unlocked = 1;\n    modifier lock() {\n        require(unlocked == 1, \"locked\");\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n\n    constructor() public {\n        factory = msg.sender;\n\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name)),\n                keccak256(bytes(\"1\")),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    function initialize(address _lpToken, bytes memory _data) external {\n        require(msg.sender == factory, \"forbidden\");\n        lpToken = _lpToken;\n        data = _data;\n\n        IUniswapV2Pair pair = IUniswapV2Pair(lpToken);\n        string memory symbol0 = IUniswapV2ERC20(pair.token0()).symbol();\n        string memory symbol1 = IUniswapV2ERC20(pair.token1()).symbol();\n        name = string(abi.encodePacked(symbol0, \"-\", symbol1, \" SushiSwap Yield Token\"));\n        symbol = string(abi.encodePacked(symbol0, \"-\", symbol1, \" SYD\"));\n    }\n\n    function _mint(address to, uint256 value) internal {\n        totalSupply = totalSupply.add(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint256 value) internal {\n        balanceOf[from] = balanceOf[from].sub(value);\n        totalSupply = totalSupply.sub(value);\n        emit Transfer(from, address(0), value);\n    }\n\n    function _approve(address owner, address spender, uint256 value) private {\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _transfer(address from, address to, uint256 value) private {\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint256 value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint256(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        require(deadline >= block.timestamp, \"expired\");\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"invalid-signature\");\n        _approve(owner, spender, value);\n    }\n\n    function mint(address to) external lock returns (uint256 amount) {\n        amount = IUniswapV2ERC20(lpToken).balanceOf(address(this));\n        require(amount > 0, \"insufficient-balance\");\n\n        (bool success,) = factory.delegatecall(abi.encodeWithSignature(\"deposit(bytes,uint256,address)\", data, amount, to));\n        require(success, \"failed-to-deposit\");\n\n        _mint(to, amount);\n\n        emit Mint(msg.sender, amount);\n    }\n\n    function burn(address to) external lock returns (uint256 amount) {\n        amount = balanceOf[address(this)];\n        require(amount > 0, \"insufficient-balance\");\n\n        (bool success,) = factory.delegatecall(abi.encodeWithSignature(\"withdraw(bytes,uint256,address)\", data, amount, to));\n        require(success, \"failed-to-withdraw\");\n\n        _burn(address(this), amount);\n\n        emit Burn(msg.sender, amount, to);\n    }\n}\n\n\n// File contracts/YieldTokenFactory.sol\n\n\n\n\n\ninterface IMasterChef {\n    struct PoolInfo {\n        address lpToken;\n        uint256 allocPoint;\n        uint256 lastRewardBlock;\n        uint256 accSushiPerShare;\n    }\n\n    function sushi() external view returns (address);\n\n    function poolInfo(uint256 index) external view returns (\n        address lpToken,\n        uint256 allocPoint,\n        uint256 lastRewardBlock,\n        uint256 accSushiPerShare\n    );\n\n    function deposit(uint256 pid, uint256 amount) external;\n\n    function withdraw(uint256 pid, uint256 amount) external;\n}\n\ncontract YieldTokenFactory {\n    using TransferHelper for address;\n\n    event YieldTokenCreated(uint256 pid, address token);\n\n    /**\n     * @return address of `MasterChef`\n     */\n    address public masterChef;\n\n    /**\n     * @return address of `SushiToken`\n     */\n    address public sushi;\n\n    /**\n     * @return address of `SushiYieldToken` for `pid`\n     */\n    mapping(uint256 => address) public getYieldToken;\n\n    constructor(address _masterChef) public {\n        masterChef = _masterChef;\n        sushi = IMasterChef(_masterChef).sushi();\n    }\n\n    /**\n     * @return init hash of `SushiYieldToken`\n     */\n    function yieldTokenCodeHash() external pure returns (bytes32) {\n        return keccak256(type(SushiYieldToken).creationCode);\n    }\n\n    /**\n     * @notice create a new `SushiYieldToken` for `pid`\n     *\n     * @return token created token's address\n     */\n    function createYieldToken(uint256 pid) external returns (address token) {\n        require(getYieldToken[pid] == address(0), \"already-created\");\n\n        bytes memory bytecode = type(SushiYieldToken).creationCode;\n        bytes memory data = abi.encode(masterChef, pid);\n        bytes32 salt = keccak256(data);\n        assembly {\n            token := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        (address lpToken,,,) = IMasterChef(masterChef).poolInfo(pid);\n        SushiYieldToken(token).initialize(lpToken, data);\n        getYieldToken[pid] = token;\n\n        emit YieldTokenCreated(pid, token);\n    }\n\n    /**\n     * @notice deposit lp token (meant to be `delegatecall`ed by `SushiYieldToken`)\n     *\n     * @param data encoded `pid`\n     * @param amount amount of lp tokens\n     * @param to receiver of sushi rewards\n     */\n    function deposit(bytes memory data, uint256 amount, address to) external {\n        (address _masterChef, uint256 pid) = abi.decode(data, (address, uint256));\n        (address lpToken,,,) = IMasterChef(_masterChef).poolInfo(pid);\n        lpToken.safeApprove(_masterChef, amount);\n        IMasterChef(_masterChef).deposit(pid, amount);\n        _transferBalance(sushi, to);\n    }\n\n    /**\n     * @notice withdraw lp tokens (meant to be `delegatecall`ed by `SushiYieldToken`)\n     *\n     * @param data encoded `pid`\n     * @param amount amount of lp tokens\n     * @param to receiver of lp tokens\n     */\n    function withdraw(bytes memory data, uint256 amount, address to) external {\n        (address _masterChef, uint256 pid) = abi.decode(data, (address, uint256));\n        (address lpToken,,,) = IMasterChef(_masterChef).poolInfo(pid);\n        IMasterChef(_masterChef).withdraw(pid, amount);\n        _transferBalance(lpToken, to);\n        _transferBalance(sushi, to);\n    }\n\n    function _transferBalance(address token, address to) internal {\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        if (balance > 0) {\n            token.safeTransfer(to, balance);\n        }\n    }\n}\n"
    }
  }
}