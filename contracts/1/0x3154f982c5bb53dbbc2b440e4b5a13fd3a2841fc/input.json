{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/staker.sol":{"content":"pragma solidity 0.6.12;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;}\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");}\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;}\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {return 0;}\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;}\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");}\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;}\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");}\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;}\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function mint(address account, uint256 amount) external;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface Uniswap {\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function WETH() external pure returns (address);\n}\n\ninterface Pool {\n    function primary() external view returns (address);\n}\n\ncontract Poolable {\n    address payable internal constant _POOLADDRESS = 0xF719a5ABcee4153588ab1Ce0b814fd729c510413;\n\n    function primary() private view returns (address) {\n        return Pool(_POOLADDRESS).primary();\n    }\n\n    modifier onlyPrimary() {\n        require(msg.sender == primary(), \"Caller is not primary\");\n        _;\n    }\n}\n\ncontract Staker is Poolable {\n    using SafeMath for uint256;\n\n    uint constant internal DECIMAL = 10**18;\n    uint constant public INF = 33136721748;\n    uint constant public LOCK = 14 days;\n\n    uint private _rewardValue = 10**18;\n    uint private _rewardTimeLock = 0;\n\n    mapping (address => uint256) public  timePooled;\n    mapping (address => uint256) private internalTime;\n    mapping (address => uint256) private LPTokenBalance;\n    mapping (address => uint256) private rewards;\n    mapping (address => uint256) private referralEarned;\n\n    address public tokenAddress;\n\n    address constant public UNIROUTER       = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address constant public FACTORY         = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n    address          public WETHAddress     = Uniswap(UNIROUTER).WETH();\n\n    bool private _started = false;\n\n    modifier onlyIfUnlocked() {\n        require(_started && _rewardTimeLock <= now, \"It has not been 14 days since start\");\n        _;\n    }\n\n    receive() external payable {\n        if(msg.sender != UNIROUTER) {\n            stake(address(0));\n        }\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    function started() public view returns (bool) {\n        return _started;\n    }\n\n    function start() public onlyPrimary {\n        require(!started(), \"Contract is already started\");\n        _started = true;\n    }\n\n    function lpToken() public view returns (address) {\n        return Uniswap(FACTORY).getPair(tokenAddress, WETHAddress);\n    }\n\n    function rewardValue() public view returns (uint) {\n        return _rewardValue;\n    }\n\n    function setTokenAddress(address input) public onlyPrimary {\n        require(!started(), \"Contract is already started\");\n        tokenAddress = input;\n    }\n\n    function updateRewardValue(uint input) public onlyPrimary {\n        require(!started(), \"Contract is already started\");\n        _rewardValue = input;\n    }\n\n    function stake(address payable ref) public payable {\n        require(started(), \"Contract should be started\");\n\n        if(_rewardTimeLock == 0) {\n            _rewardTimeLock = now + LOCK;\n        }\n\n        address staker = msg.sender;\n        if(ref != address(0)) {\n            referralEarned[ref] = referralEarned[ref] + ((address(this).balance * 5 / 100) * DECIMAL) / price();\n        }\n\n        sendValue(_POOLADDRESS, address(this).balance / 2);\n\n        address poolAddress = Uniswap(FACTORY).getPair(tokenAddress, WETHAddress);\n        uint ethAmount = IERC20(WETHAddress).balanceOf(poolAddress);\n        uint tokenAmount = IERC20(tokenAddress).balanceOf(poolAddress);\n\n        uint toMint = (address(this).balance.mul(tokenAmount)).div(ethAmount);\n        IERC20(tokenAddress).mint(address(this), toMint);\n\n        uint poolTokenAmountBefore = IERC20(poolAddress).balanceOf(address(this));\n\n        uint amountTokenDesired = IERC20(tokenAddress).balanceOf(address(this));\n        IERC20(tokenAddress).approve(UNIROUTER, amountTokenDesired );\n        Uniswap(UNIROUTER).addLiquidityETH{ value: address(this).balance }(tokenAddress, amountTokenDesired, 1, 1, address(this), INF);\n\n        uint poolTokenAmountAfter = IERC20(poolAddress).balanceOf(address(this));\n        uint poolTokenGot = poolTokenAmountAfter.sub(poolTokenAmountBefore);\n\n        rewards[staker] = rewards[staker].add(viewRecentRewardTokenAmount(staker));\n\n        timePooled[staker] = now;\n        internalTime[staker] = now;\n\n        LPTokenBalance[staker] = LPTokenBalance[staker].add(poolTokenGot);\n    }\n\n    function withdrawLPTokens(uint amount) public onlyIfUnlocked {\n        rewards[msg.sender] = rewards[msg.sender].add(viewRecentRewardTokenAmount(msg.sender));\n        LPTokenBalance[msg.sender] = LPTokenBalance[msg.sender].sub(amount);\n\n        address poolAddress = Uniswap(FACTORY).getPair(tokenAddress, WETHAddress);\n        IERC20(poolAddress).transfer(msg.sender, amount);\n\n        internalTime[msg.sender] = now;\n    }\n\n    function withdrawRewardTokens(uint amount) public onlyIfUnlocked {\n        rewards[msg.sender] = rewards[msg.sender].add(viewRecentRewardTokenAmount(msg.sender));\n        internalTime[msg.sender] = now;\n\n        uint removeAmount = rewardToEthtime(amount) / 2;\n        rewards[msg.sender] = rewards[msg.sender].sub(removeAmount);\n\n        IERC20(tokenAddress).mint(msg.sender, amount);\n    }\n\n    function withdrawReferralEarned(uint amount) public onlyIfUnlocked {\n        require(timePooled[msg.sender] != 0, \"You have to stake at least a little bit to withdraw referral rewards\");\n        referralEarned[msg.sender] = referralEarned[msg.sender].sub(amount);\n        IERC20(tokenAddress).mint(msg.sender, amount);\n    }\n\n    function viewRecentRewardTokenAmount(address who) internal view returns (uint) {\n        return viewRecentRewardTokenAmountByDuration(who, now.sub(internalTime[who]));\n    }\n\n    function viewRecentRewardTokenAmountByDuration(address who, uint duration) internal view returns (uint) {\n        return viewPooledEthAmount(who).mul(duration);\n    }\n\n    function viewRewardTokenAmount(address who) public view returns (uint) {\n        return earnRewardAmount(rewards[who].add(viewRecentRewardTokenAmount(who)) * 2);\n    }\n\n    function viewRewardTokenAmountByDuration(address who, uint duration) public view returns (uint) {\n        return earnRewardAmount(rewards[who].add(viewRecentRewardTokenAmountByDuration(who, duration)) * 2);\n    }\n\n    function viewLPTokenAmount(address who) public view returns (uint) {\n        return LPTokenBalance[who];\n    }\n\n    function viewPooledEthAmount(address who) public view returns (uint) {\n        address poolAddress = Uniswap(FACTORY).getPair(tokenAddress, WETHAddress);\n        uint ethAmount = IERC20(WETHAddress).balanceOf(poolAddress);\n\n        return (ethAmount.mul(viewLPTokenAmount(who))).div(IERC20(poolAddress).totalSupply());\n    }\n\n    function viewPooledTokenAmount(address who) public view returns (uint) {\n        address poolAddress = Uniswap(FACTORY).getPair(tokenAddress, WETHAddress);\n        uint tokenAmount = IERC20(tokenAddress).balanceOf(poolAddress);\n\n        return (tokenAmount.mul(viewLPTokenAmount(who))).div(IERC20(poolAddress).totalSupply());\n    }\n\n    function viewReferralEarned(address who) public view returns (uint) {\n        return referralEarned[who];\n    }\n\n    function viewRewardTimeLock() public view returns (uint) {\n        return _rewardTimeLock;\n    }\n\n    function price() public view returns (uint) {\n        address poolAddress = Uniswap(FACTORY).getPair(tokenAddress, WETHAddress);\n\n        uint ethAmount = IERC20(WETHAddress).balanceOf(poolAddress);\n        uint tokenAmount = IERC20(tokenAddress).balanceOf(poolAddress);\n\n        return (DECIMAL.mul(ethAmount)).div(tokenAmount);\n    }\n\n    function earnRewardAmount(uint ethTime) public view returns(uint) {\n        return (rewardValue().mul(ethTime)) / (31557600 * DECIMAL);\n    }\n\n    function rewardToEthtime(uint amount) internal view returns(uint) {\n        return (amount.mul(31557600 * DECIMAL)).div(rewardValue());\n    }\n}"}}}