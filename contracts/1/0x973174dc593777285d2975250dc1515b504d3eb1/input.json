{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/WXMRAddress.sol": {
      "content": "// File: contracts\\openzeppelin\\contracts\\GSN\\Context.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: contracts\\openzeppelin\\contracts\\access\\Ownable.sol\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        revert(\"Renouncing ownership is blocked\");\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: owner is 0x0 address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts\\lib\\Helpers.sol\n\npragma solidity >=0.6.0 <0.8.0;\n\nlibrary Helpers {\n    function genUnencodedIntAddress(\n        bytes1 netByte,\n        bytes32 pubSpend,\n        bytes32 pubView,\n        bytes8 pId\n    ) internal pure returns (bytes memory) {\n        bytes memory preAddr = abi.encodePacked(\n            netByte,\n            pubSpend,\n            pubView,\n            pId\n        );\n        bytes4 preAddrHash = bytes4(\n            keccak256(preAddr) &\n                0xffffffff00000000000000000000000000000000000000000000000000000000\n        );\n        return abi.encodePacked(preAddr, preAddrHash);\n    }\n\n    function padLeft(\n        bytes memory source,\n        bytes1 padChar,\n        uint8 maxLen\n    ) internal pure returns (bytes memory) {\n        uint256 sourceLen = source.length;\n        if (sourceLen >= maxLen) return source;\n\n        bytes memory res = new bytes(maxLen);\n        for (uint256 i = 0; i < maxLen; i++) {\n            if (i < sourceLen) res[i] = source[i];\n            else res[i] = padChar;\n        }\n\n        return res;\n    }\n\n    function padRight(\n        bytes memory source,\n        bytes1 padChar,\n        uint8 maxLen\n    ) internal pure returns (bytes memory) {\n        uint256 sourceLen = source.length;\n        if (sourceLen >= maxLen) return source;\n\n        bytes memory res = new bytes(maxLen);\n        for (uint256 i = 0; i < maxLen; i++) {\n            if (i < maxLen - sourceLen) res[i] = padChar;\n            else res[i] = source[i - (maxLen - sourceLen)];\n        }\n\n        return res;\n    }\n\n    function hashEquals(bytes memory left, bytes memory right)\n        internal\n        pure\n        returns (bool)\n    {\n        if (left.length != right.length) return false;\n        for (uint256 i = 0; i < left.length; i++)\n            if (uint8(left[i]) - uint8(right[i]) != 0) return false;\n        return true;\n    }\n\n    function toBytes(uint256 _i) internal pure returns (bytes memory) {\n        if (_i == 0) return \"0\";\n\n        uint256 j = _i;\n        uint256 len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint256 k = len - 1;\n        while (_i != 0) {\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\n            _i /= 10;\n        }\n        return bstr;\n    }\n\n    function random() internal view returns (uint8) {\n        return\n            uint8(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(block.timestamp, block.difficulty)\n                    )\n                ) % 0xFF\n            );\n    }\n\n    function random(uint256 height) internal view returns (bytes8) {\n        return\n            bytes8(\n                uint64(\n                    uint256(\n                        keccak256(\n                            abi.encodePacked(\n                                block.timestamp,\n                                block.difficulty,\n                                height\n                            )\n                        )\n                    ) % 0xFFFFFFFFFFFFFFFF\n                )\n            );\n    }\n}\n\n// File: contracts\\lib\\Monero.sol\n\npragma solidity >=0.6.0 <0.8.0;\n\n\nlibrary Monero {\n    using Helpers for bytes;\n    using Helpers for uint256;\n\n    uint8 constant full_block_size = 8;\n    uint8 constant full_encoded_block_size = 11;\n    bytes constant Alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n    bytes9 constant encoded_block_sizes = 0x000203050607090a0b;\n\n    function b58_encode(bytes memory data) internal pure returns (bytes memory) {\n        uint256 full_block_count = data.length / full_block_size;\n        uint256 last_block_size = data.length % full_block_size;\n\n        uint256 res_size = (full_block_count * full_encoded_block_size) +\n            uint8(encoded_block_sizes[last_block_size]);\n\n        bytes memory res = new bytes(res_size);\n\n        for (uint256 i = 0; i < res_size; ++i) {\n            res[i] = Alphabet[0];\n        }\n\n        for (uint256 i = 0; i < full_block_count; i++) {\n            res = encodeBlock(\n                subarray(\n                    data,\n                    i * full_block_size,\n                    i * full_block_size + full_block_size\n                ),\n                res,\n                i * full_encoded_block_size\n            );\n        }\n        if (last_block_size > 0) {\n            res = encodeBlock(\n                subarray(\n                    data,\n                    full_block_count * full_block_size,\n                    full_block_count * full_block_size + last_block_size\n                ),\n                res,\n                full_block_count * full_encoded_block_size\n            );\n        }\n\n        return res;\n    }\n\n    function b58_decode(bytes memory data) internal pure returns (bytes memory) {\n        require(data.length > 0, \"Invalid address length\");\n\n        uint256 full_block_count = data.length / full_encoded_block_size;\n        uint256 last_block_size = data.length % full_encoded_block_size;\n\n        int256 lbds = indexOf(encoded_block_sizes, uint8(last_block_size));\n\n        require(lbds > 0, \"Invalid encoded length\");\n        uint256 last_block_decoded_size = uint256(lbds);\n\n        uint256 res_size = full_block_count *\n            full_block_size +\n            last_block_decoded_size;\n\n        bytes memory res = new bytes(res_size);\n\n        for (uint256 i = 0; i < full_block_count; i++) {\n            res = decodeBlock(\n                subarray(\n                    data,\n                    i * full_encoded_block_size,\n                    i * full_encoded_block_size + full_encoded_block_size\n                ),\n                res,\n                i * full_block_size\n            );\n        }\n        if (last_block_size > 0) {\n            res = decodeBlock(\n                subarray(\n                    data,\n                    full_block_count * full_encoded_block_size,\n                    full_block_count * full_encoded_block_size + last_block_size\n                ),\n                res,\n                full_block_count * full_block_size\n            );\n        }\n\n        return res;\n    }\n\n    function encodeBlock(\n        bytes memory data,\n        bytes memory buf,\n        uint256 index\n    ) private pure returns (bytes memory) {\n        require(\n            data.length > 1 || data.length <= full_block_size,\n            \"Invalid block length\"\n        );\n\n        uint64 num = toUint64(data);\n\n        uint256 i = uint8(encoded_block_sizes[data.length]) - 1;\n\n        while (num > 0) {\n            uint256 remainder = num % Alphabet.length;\n            num = uint64(num / Alphabet.length);\n            buf[index + i] = Alphabet[remainder];\n            i--;\n        }\n        return buf;\n    }\n\n    function decodeBlock(\n        bytes memory data,\n        bytes memory buf,\n        uint256 index\n    ) private pure returns (bytes memory) {\n        require(\n            data.length > 1 && data.length <= full_encoded_block_size,\n            \"Invalid block length\"\n        );\n\n        int256 res = indexOf(encoded_block_sizes, uint8(data.length));\n        require(res > 0, \"Invalid encoded length\");\n\n        uint256 res_size = uint256(res);\n        uint256 res_num = 0;\n        uint256 order = 1;\n\n        for (uint256 i = data.length; i > 0; i--) {\n            int256 digit = indexOf(Alphabet, uint8(data[i - 1]));\n            require(digit >= 0, \"Invalid symbol\");\n\n            res_num = (order * uint8(digit)) + res_num;\n            require(res_num < 2**64, \"Overflow1\");\n            order = order * Alphabet.length;\n        }\n        if (res_size < full_block_size && 2**(8 * res_size) <= res_num)\n            revert(\"Overflow2 \");\n\n        for (uint256 i = res_size; i > 0; i--) {\n            buf[index + i - 1] = bytes1(uint8(res_num % 0x100));\n            res_num = res_num / 0x100;\n        }\n        return buf;\n    }\n\n    function validateHex(bytes memory xmrAddress, bytes3 netBytes) internal pure {\n        bytes1 _netByteStd = netBytes[0];\n        bytes1 _netByteInt = netBytes[1];\n        bytes1 _netByteSub = netBytes[2];\n\n        require(\n            xmrAddress.length == 69 || xmrAddress.length == 77,\n            \"Invalid address length\"\n        );\n        require(\n            xmrAddress[0] == _netByteStd ||\n                xmrAddress[0] == _netByteInt ||\n                xmrAddress[0] == _netByteSub,\n            \"Invalid network byte\"\n        );\n        require(\n            (xmrAddress.length == 69 &&\n                (xmrAddress[0] == _netByteStd ||\n                    xmrAddress[0] == _netByteSub)) ||\n                (xmrAddress.length == 77 && xmrAddress[0] == _netByteInt),\n            \"Invalid address type\"\n        );\n\n        bytes memory preAddr = slice(xmrAddress, 0, xmrAddress.length - 4);\n        bytes memory preHash = slice(xmrAddress, xmrAddress.length - 4, 4);\n        bytes memory calcHash = abi.encodePacked(\n            bytes4(\n                keccak256(preAddr) &\n                    0xffffffff00000000000000000000000000000000000000000000000000000000\n            )\n        );\n        require(hashEquals(preHash, calcHash), \"Invalid address hash\");\n    }\n\n    function encodeAddress(\n        bytes memory xmrAddress,\n        bytes3 netBytes,\n        bool validate\n    ) internal pure returns (bytes memory) {\n        if (validate) validateHex(xmrAddress, netBytes);\n        return b58_encode(xmrAddress);\n    }\n\n    function decodeAddress(\n        bytes memory xmrAddress,\n        bytes3 netBytes,\n        bool validate\n    ) internal pure returns (bytes memory) {\n        if (validate) validateHex(xmrAddress, netBytes);\n        return b58_encode(xmrAddress);\n    }\n\n    function toStringAmount(uint256 amount)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 amt = amount / 1000000000000;\n        uint256 rem = amount % 1000000000000;\n        string memory amts = string(amt.toBytes());\n        string memory rems = string(rem.toBytes().padRight(bytes1(\"0\"), 12));\n        return string(abi.encodePacked(amts, \".\", rems));\n    }\n\n    function slice(\n        bytes memory source,\n        uint256 start,\n        uint256 length\n    ) private pure returns (bytes memory) {\n        require(source.length >= start + length, \"Slice out of bounds\");\n\n        bytes memory tmpBytes = new bytes(length);\n        for (uint256 i = 0; i < length; i++) {\n            tmpBytes[i] = source[start + i];\n        }\n        return tmpBytes;\n    }\n\n    function hashEquals(bytes memory left, bytes memory right)\n        private\n        pure\n        returns (bool)\n    {\n        if (left.length != right.length) return false;\n        for (uint256 i = 0; i < left.length; i++)\n            if (uint8(left[i]) - uint8(right[i]) != 0) return false;\n        return true;\n    }\n\n    function toUint64(bytes memory _bytes) private pure returns (uint64) {\n        uint64 tempUint;\n        uint256 len = _bytes.length;\n        uint256 start = 8 - len;\n        assembly {\n            tempUint := mload(add(add(_bytes, len), start))\n        }\n        tempUint = tempUint >> (start * 8);\n        return tempUint;\n    }\n\n    function subarray(\n        bytes memory data,\n        uint256 begin,\n        uint256 end\n    ) private pure returns (bytes memory) {\n        bytes memory out = new bytes(end - begin);\n        for (uint256 i = 0; i < end - begin; i++) {\n            out[i] = data[i + begin];\n        }\n        return out;\n    }\n\n    function toBytes(bytes32 input) private pure returns (bytes memory) {\n        bytes memory output = new bytes(32);\n        for (uint8 i = 0; i < 32; i++) {\n            output[i] = input[i];\n        }\n        return output;\n    }\n\n    function equal(bytes memory one, bytes memory two)\n        private\n        pure\n        returns (bool)\n    {\n        if (!(one.length == two.length)) {\n            return false;\n        }\n        for (uint8 i = 0; i < one.length; i++) {\n            if (!(one[i] == two[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function truncate(uint8[] memory array, uint8 length)\n        private\n        pure\n        returns (uint8[] memory)\n    {\n        uint8[] memory output = new uint8[](length);\n        for (uint8 i = 0; i < length; i++) {\n            output[i] = array[i];\n        }\n        return output;\n    }\n\n    function reverse(uint8[] memory input)\n        private\n        pure\n        returns (uint8[] memory)\n    {\n        uint8[] memory output = new uint8[](input.length);\n        for (uint8 i = 0; i < input.length; i++) {\n            output[i] = input[input.length - 1 - i];\n        }\n        return output;\n    }\n\n    function toAlphabet(uint8[] memory indices)\n        private\n        pure\n        returns (bytes memory)\n    {\n        bytes memory output = new bytes(indices.length);\n        for (uint8 i = 0; i < indices.length; i++) {\n            output[i] = Alphabet[indices[i]];\n        }\n        return output;\n    }\n\n    function indexOf(bytes9 array, uint8 v) private pure returns (int256) {\n        for (uint256 i = 0; i < 9; i++) {\n            if (uint8(array[i]) == v) return int256(i);\n        }\n        return -1;\n    }\n\n    function indexOf(bytes memory array, uint8 v)\n        private\n        pure\n        returns (int256)\n    {\n        for (uint256 i = 0; i < array.length; i++) {\n            if (uint8(array[i]) == v) return int256(i);\n        }\n        return -1;\n    }\n\n    function random() internal view returns (uint8) {\n        return\n            uint8(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(block.timestamp, block.difficulty)\n                    )\n                ) % 0xFF\n            );\n    }\n\n    function random(uint256 height) internal view returns (bytes8) {\n        return\n            bytes8(\n                uint64(\n                    uint256(\n                        keccak256(\n                            abi.encodePacked(\n                                block.timestamp,\n                                block.difficulty,\n                                height\n                            )\n                        )\n                    ) % 0xFFFFFFFFFFFFFFFF\n                )\n            );\n    }\n}\n\n// File: contracts\\IWXMRAddress.sol\n\npragma solidity >=0.6.0 <0.8.0;\n\ninterface IWXMRAddress{\n    /**\n     * @dev Returns an account or integrated address\n     */\n    function getAddress() external returns (bytes memory xmrAddress);\n    function validateAddress(bytes memory xmrAddress, bool decode) external;\n    function b58_encode(bytes memory xmrAddress) external view returns(bytes memory);\n    function b58_decode(bytes memory xmrAddress) external view returns(bytes memory);\n    function encodeAddress(bytes memory xmrAddress) external view returns(bytes memory);\n    function decodeAddress(bytes memory xmrAddress) external view returns(bytes memory);\n}\n\n// File: contracts\\WXMRAddress.sol\n\npragma solidity >=0.6.0 <0.8.0;\n\n\n\ncontract WXMRAddress is Context, Ownable, IWXMRAddress {\n    address private _wxmr;\n\n    bytes3 private _netBytes;\n    bytes32 private _pubSpend;\n    bytes32 private _pubView;\n    uint256 private _intHeight;\n    bool private _intAddressEnabled = false;\n\n    bytes[] _xmrPool;\n\n    constructor (address wxmr) {\n        _wxmr = wxmr;\n    }\n    \n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyWxmr() {\n        require(_wxmr == _msgSender(), \"Ownable: caller is not WXMR\");\n        _;\n    }\n\n    /*\n     * @dev Function to set integrated addresses parameters\n     */\n    function setParameters(\n        bytes3 netBytes,\n        bytes32 pubSpend,\n        bytes32 pubView,\n        uint256 initialHeight,\n        bool intAddressEnabled\n    ) public onlyOwner {\n        _netBytes = netBytes;\n        _pubSpend = pubSpend;\n        _pubView = pubView;\n\n        if (initialHeight > 0)\n            _intHeight = initialHeight;\n\n        _intAddressEnabled = intAddressEnabled;\n        emit SetParameters(netBytes, pubSpend, pubView, intAddressEnabled);\n    }\n\n    /*\n     * @dev Function to get xmr addresses\n     */\n    function getAddress() override public onlyWxmr returns (bytes memory xmrAddress) {\n        if (_intAddressEnabled)\n            return getXmrIntegratedAddress();\n        return getXmrAddress();\n    }\n\n    /*\n     * @dev Function to validate xmr addresses\n     */\n    function validateAddress(bytes memory xmrAddress,bool decode) override public view onlyWxmr {\n        if (decode)\n            xmrAddress = Monero.b58_decode(xmrAddress);\n        Monero.validateHex(xmrAddress,_netBytes);\n    }\n     /*\n     * @dev Function to get address from pool\n     */\n    function getXmrAddress() private returns (bytes memory) {\n        require(_xmrPool.length > 0, \"No address available\");\n\n        bytes memory xmrAddress = _xmrPool[_xmrPool.length - 1];\n        _xmrPool.pop();\n        emit PoolSize(_xmrPool.length);\n\n        return xmrAddress;\n    }\n\n    /*\n     * @dev Function to get integrated address\n     */\n    function getXmrIntegratedAddress() private returns (bytes memory) {\n        _intHeight += Helpers.random();\n        bytes8 pId = Helpers.random(_intHeight);\n        return Helpers.genUnencodedIntAddress(\n            _netBytes[1],\n            _pubSpend,\n            _pubView,\n            pId\n        );\n    }\n\n    /**\n     * @dev Function get size of address pool\n     *     *\n     */\n    function getPoolSize() public view onlyOwner returns (uint256){\n        return _xmrPool.length;\n    }\n\n    /**\n     * @dev Function empty address pool\n     *     *\n     */\n    function flushPool() public onlyOwner{\n        _xmrPool = new bytes[](0);\n    }\n\n    /**\n     * @dev Function address to pool\n     *     *\n     */\n    function pushAddress(bytes memory xmrAddress) public onlyOwner{\n        _xmrPool.push(xmrAddress);\n        emit PoolSize(_xmrPool.length);\n    }\n\n    /**\n     * @dev Function base58 encode XMR address\n     *     *\n     */\n    function b58_encode(bytes memory xmrAddress) override public pure returns(bytes memory){\n        return Monero.b58_encode(xmrAddress);\n    }\n    \n    /**\n     * @dev Function base58 decode XMR address\n     *     *\n     */\n    function b58_decode(bytes memory xmrAddress) override public pure returns(bytes memory){\n        return Monero.b58_decode(xmrAddress);\n    }\n\n    /**\n     * @dev Function base58 encode XMR address with hash check\n     *     *\n     */\n    function encodeAddress(bytes memory xmrAddress) override public view returns(bytes memory){\n        return Monero.encodeAddress(xmrAddress, _netBytes, true);\n    }\n    \n    /**\n     * @dev Function base58 decode XMR address with hash check\n     *     *\n     */\n    function decodeAddress(bytes memory xmrAddress) override public view returns(bytes memory){\n        return Monero.decodeAddress(xmrAddress, _netBytes, true);\n    }\n\n    event PoolSize(uint256 entries);\n     /**\n     * @dev Emitted when setting contract parameters\n     */\n    event SetParameters(\n        bytes3 netBytes, \n        bytes32 pubSpend,\n        bytes32 pubView, \n        bool intAddressEnabled\n    );\n}\n"
    }
  }
}