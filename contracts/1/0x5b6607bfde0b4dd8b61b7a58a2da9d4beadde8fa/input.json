{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "bot8.sol": {
      "content": "\r\n//IUniswapV2Pair\r\npragma solidity >=0.6.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//this is the uniswap interface\r\n\r\npragma solidity ^0.6.6;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract ERC20WithoutTotalSupply is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//this is the ChiToken interface\r\ninterface IFreeFromUpTo {\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//this is the balancer interface\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\ninterface PoolInterface {\r\n    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\r\n    function swapExactAmountOut(address, uint, address, uint, uint) external returns (uint, uint);\r\n    function calcInGivenOut(uint, uint, uint, uint, uint, uint) external pure returns (uint);\r\n    function calcOutGivenIn(uint, uint, uint, uint, uint, uint) external pure returns (uint);\r\n    function getDenormalizedWeight(address) external view returns (uint);\r\n    function getBalance(address) external view returns (uint);\r\n    function getSwapFee() external view returns (uint);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function balanceOf(address) external view returns (uint);\r\n    function allowance(address, address) external view returns (uint);\r\n    function approve(address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface RegistryInterface {\r\n    function getBestPoolsWithLimit(address, address, uint) external view returns (address[] memory);\r\n}\r\n\r\ncontract ExchangeProxy is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct Pool {\r\n        address pool;\r\n        uint    tokenBalanceIn;\r\n        uint    tokenWeightIn;\r\n        uint    tokenBalanceOut;\r\n        uint    tokenWeightOut;\r\n        uint    swapFee;\r\n        uint    effectiveLiquidity;\r\n    }\r\n\r\n    struct Swap {\r\n        address pool;\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint    swapAmount; // tokenInAmount / tokenOutAmount\r\n        uint    limitReturnAmount; // minAmountOut / maxAmountIn\r\n        uint    maxPrice;\r\n    }\r\n\r\n    TokenInterface weth;\r\n    RegistryInterface registry;\r\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    uint private constant BONE = 10**18;\r\n\r\n    constructor(address _weth) public {\r\n        weth = TokenInterface(_weth);\r\n    }\r\n\r\n    function setRegistry(address _registry) external onlyOwner {\r\n        registry = RegistryInterface(_registry);\r\n    }\r\n\r\n    function batchSwapExactIn(\r\n        Swap[] memory swaps,\r\n        TokenInterface tokenIn,\r\n        TokenInterface tokenOut,\r\n        uint totalAmountIn,\r\n        uint minTotalAmountOut\r\n    )\r\n        public payable\r\n        returns (uint totalAmountOut)\r\n    {\r\n        transferFromAll(tokenIn, totalAmountIn);\r\n\r\n        for (uint i = 0; i < swaps.length; i++) {\r\n            Swap memory swap = swaps[i];\r\n            TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\r\n            PoolInterface pool = PoolInterface(swap.pool);\r\n\r\n            if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\r\n                SwapTokenIn.approve(swap.pool, 0);\r\n            }\r\n            SwapTokenIn.approve(swap.pool, swap.swapAmount);\r\n\r\n            (uint tokenAmountOut,) = pool.swapExactAmountIn(\r\n                                        swap.tokenIn,\r\n                                        swap.swapAmount,\r\n                                        swap.tokenOut,\r\n                                        swap.limitReturnAmount,\r\n                                        swap.maxPrice\r\n                                    );\r\n            totalAmountOut = tokenAmountOut.add(totalAmountOut);\r\n        }\r\n\r\n        require(totalAmountOut >= minTotalAmountOut, \"ERR_LIMIT_OUT\");\r\n\r\n        transferAll(tokenOut, totalAmountOut);\r\n        transferAll(tokenIn, getBalance(tokenIn));\r\n    }\r\n\r\n    function batchSwapExactOut(\r\n        Swap[] memory swaps,\r\n        TokenInterface tokenIn,\r\n        TokenInterface tokenOut,\r\n        uint maxTotalAmountIn\r\n    )\r\n        public payable\r\n        returns (uint totalAmountIn)\r\n    {\r\n        transferFromAll(tokenIn, maxTotalAmountIn);\r\n\r\n        for (uint i = 0; i < swaps.length; i++) {\r\n            Swap memory swap = swaps[i];\r\n            TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\r\n            PoolInterface pool = PoolInterface(swap.pool);\r\n\r\n            if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\r\n                SwapTokenIn.approve(swap.pool, 0);\r\n            }\r\n            SwapTokenIn.approve(swap.pool, swap.limitReturnAmount);\r\n\r\n            (uint tokenAmountIn,) = pool.swapExactAmountOut(\r\n                                        swap.tokenIn,\r\n                                        swap.limitReturnAmount,\r\n                                        swap.tokenOut,\r\n                                        swap.swapAmount,\r\n                                        swap.maxPrice\r\n                                    );\r\n            totalAmountIn = tokenAmountIn.add(totalAmountIn);\r\n        }\r\n        require(totalAmountIn <= maxTotalAmountIn, \"ERR_LIMIT_IN\");\r\n\r\n        transferAll(tokenOut, getBalance(tokenOut));\r\n        transferAll(tokenIn, getBalance(tokenIn));\r\n\r\n    }\r\n\r\n    function multihopBatchSwapExactIn(\r\n        Swap[][] memory swapSequences,\r\n        TokenInterface tokenIn,\r\n        TokenInterface tokenOut,\r\n        uint totalAmountIn,\r\n        uint minTotalAmountOut\r\n    )\r\n        public payable\r\n        returns (uint totalAmountOut)\r\n    {\r\n\r\n        transferFromAll(tokenIn, totalAmountIn);\r\n\r\n        for (uint i = 0; i < swapSequences.length; i++) {\r\n            uint tokenAmountOut;\r\n            for (uint k = 0; k < swapSequences[i].length; k++) {\r\n                Swap memory swap = swapSequences[i][k];\r\n                TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\r\n                if (k == 1) {\r\n                    // Makes sure that on the second swap the output of the first was used\r\n                    // so there is not intermediate token leftover\r\n                    swap.swapAmount = tokenAmountOut;\r\n                }\r\n\r\n                PoolInterface pool = PoolInterface(swap.pool);\r\n                if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\r\n                    SwapTokenIn.approve(swap.pool, 0);\r\n                }\r\n                SwapTokenIn.approve(swap.pool, swap.swapAmount);\r\n                (tokenAmountOut,) = pool.swapExactAmountIn(\r\n                                            swap.tokenIn,\r\n                                            swap.swapAmount,\r\n                                            swap.tokenOut,\r\n                                            swap.limitReturnAmount,\r\n                                            swap.maxPrice\r\n                                        );\r\n            }\r\n            // This takes the amountOut of the last swap\r\n            totalAmountOut = tokenAmountOut.add(totalAmountOut);\r\n        }\r\n\r\n        require(totalAmountOut >= minTotalAmountOut, \"ERR_LIMIT_OUT\");\r\n\r\n        transferAll(tokenOut, totalAmountOut);\r\n        transferAll(tokenIn, getBalance(tokenIn));\r\n\r\n    }\r\n\r\n    function multihopBatchSwapExactOut(\r\n        Swap[][] memory swapSequences,\r\n        TokenInterface tokenIn,\r\n        TokenInterface tokenOut,\r\n        uint maxTotalAmountIn\r\n    )\r\n        public payable\r\n        returns (uint totalAmountIn)\r\n    {\r\n\r\n        transferFromAll(tokenIn, maxTotalAmountIn);\r\n\r\n        for (uint i = 0; i < swapSequences.length; i++) {\r\n            uint tokenAmountInFirstSwap;\r\n            // Specific code for a simple swap and a multihop (2 swaps in sequence)\r\n            if (swapSequences[i].length == 1) {\r\n                Swap memory swap = swapSequences[i][0];\r\n                TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\r\n\r\n                PoolInterface pool = PoolInterface(swap.pool);\r\n                if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\r\n                    SwapTokenIn.approve(swap.pool, 0);\r\n                }\r\n                SwapTokenIn.approve(swap.pool, swap.limitReturnAmount);\r\n\r\n                (tokenAmountInFirstSwap,) = pool.swapExactAmountOut(\r\n                                        swap.tokenIn,\r\n                                        swap.limitReturnAmount,\r\n                                        swap.tokenOut,\r\n                                        swap.swapAmount,\r\n                                        swap.maxPrice\r\n                                    );\r\n            } else {\r\n                // Consider we are swapping A -> B and B -> C. The goal is to buy a given amount\r\n                // of token C. But first we need to buy B with A so we can then buy C with B\r\n                // To get the exact amount of C we then first need to calculate how much B we'll need:\r\n                uint intermediateTokenAmount; // This would be token B as described above\r\n                Swap memory secondSwap = swapSequences[i][1];\r\n                PoolInterface poolSecondSwap = PoolInterface(secondSwap.pool);\r\n                intermediateTokenAmount = poolSecondSwap.calcInGivenOut(\r\n                                        poolSecondSwap.getBalance(secondSwap.tokenIn),\r\n                                        poolSecondSwap.getDenormalizedWeight(secondSwap.tokenIn),\r\n                                        poolSecondSwap.getBalance(secondSwap.tokenOut),\r\n                                        poolSecondSwap.getDenormalizedWeight(secondSwap.tokenOut),\r\n                                        secondSwap.swapAmount,\r\n                                        poolSecondSwap.getSwapFee()\r\n                                    );\r\n\r\n                //// Buy intermediateTokenAmount of token B with A in the first pool\r\n                Swap memory firstSwap = swapSequences[i][0];\r\n                TokenInterface FirstSwapTokenIn = TokenInterface(firstSwap.tokenIn);\r\n                PoolInterface poolFirstSwap = PoolInterface(firstSwap.pool);\r\n                if (FirstSwapTokenIn.allowance(address(this), firstSwap.pool) < uint(-1)) {\r\n                    FirstSwapTokenIn.approve(firstSwap.pool, uint(-1));\r\n                }\r\n\r\n                (tokenAmountInFirstSwap,) = poolFirstSwap.swapExactAmountOut(\r\n                                        firstSwap.tokenIn,\r\n                                        firstSwap.limitReturnAmount,\r\n                                        firstSwap.tokenOut,\r\n                                        intermediateTokenAmount, // This is the amount of token B we need\r\n                                        firstSwap.maxPrice\r\n                                    );\r\n\r\n                //// Buy the final amount of token C desired\r\n                TokenInterface SecondSwapTokenIn = TokenInterface(secondSwap.tokenIn);\r\n                if (SecondSwapTokenIn.allowance(address(this), secondSwap.pool) < uint(-1)) {\r\n                    SecondSwapTokenIn.approve(secondSwap.pool, uint(-1));\r\n                }\r\n\r\n                poolSecondSwap.swapExactAmountOut(\r\n                                        secondSwap.tokenIn,\r\n                                        secondSwap.limitReturnAmount,\r\n                                        secondSwap.tokenOut,\r\n                                        secondSwap.swapAmount,\r\n                                        secondSwap.maxPrice\r\n                                    );\r\n            }\r\n            totalAmountIn = tokenAmountInFirstSwap.add(totalAmountIn);\r\n        }\r\n\r\n        require(totalAmountIn <= maxTotalAmountIn, \"ERR_LIMIT_IN\");\r\n\r\n        transferAll(tokenOut, getBalance(tokenOut));\r\n        transferAll(tokenIn, getBalance(tokenIn));\r\n\r\n    }\r\n\r\n    function smartSwapExactIn(\r\n        TokenInterface tokenIn,\r\n        TokenInterface tokenOut,\r\n        uint totalAmountIn,\r\n        uint minTotalAmountOut,\r\n        uint nPools\r\n    )\r\n        public payable\r\n        returns (uint totalAmountOut)\r\n    {\r\n        Swap[] memory swaps;\r\n        if (isETH(tokenIn)) {\r\n          (swaps,) = viewSplitExactIn(address(weth), address(tokenOut), totalAmountIn, nPools);\r\n        } else if (isETH(tokenOut)){\r\n          (swaps,) = viewSplitExactIn(address(tokenIn), address(weth), totalAmountIn, nPools);\r\n        } else {\r\n          (swaps,) = viewSplitExactIn(address(tokenIn), address(tokenOut), totalAmountIn, nPools);\r\n        }\r\n\r\n        totalAmountOut = batchSwapExactIn(swaps, tokenIn, tokenOut, totalAmountIn, minTotalAmountOut);\r\n    }\r\n\r\n    function smartSwapExactOut(\r\n        TokenInterface tokenIn,\r\n        TokenInterface tokenOut,\r\n        uint totalAmountOut,\r\n        uint maxTotalAmountIn,\r\n        uint nPools\r\n    )\r\n        public payable\r\n        returns (uint totalAmountIn)\r\n    {\r\n        Swap[] memory swaps;\r\n        if (isETH(tokenIn)) {\r\n          (swaps,) = viewSplitExactOut(address(weth), address(tokenOut), totalAmountOut, nPools);\r\n        } else if (isETH(tokenOut)){\r\n          (swaps,) = viewSplitExactOut(address(tokenIn), address(weth), totalAmountOut, nPools);\r\n        } else {\r\n          (swaps,) = viewSplitExactOut(address(tokenIn), address(tokenOut), totalAmountOut, nPools);\r\n        }\r\n\r\n        totalAmountIn = batchSwapExactOut(swaps, tokenIn, tokenOut, maxTotalAmountIn);\r\n    }\r\n\r\n    function viewSplitExactIn(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint swapAmount,\r\n        uint nPools\r\n    )\r\n        public view\r\n        returns (Swap[] memory swaps, uint totalOutput)\r\n    {\r\n        address[] memory poolAddresses = registry.getBestPoolsWithLimit(tokenIn, tokenOut, nPools);\r\n\r\n        Pool[] memory pools = new Pool[](poolAddresses.length);\r\n        uint sumEffectiveLiquidity;\r\n        for (uint i = 0; i < poolAddresses.length; i++) {\r\n            pools[i] = getPoolData(tokenIn, tokenOut, poolAddresses[i]);\r\n            sumEffectiveLiquidity = sumEffectiveLiquidity.add(pools[i].effectiveLiquidity);\r\n        }\r\n\r\n        uint[] memory bestInputAmounts = new uint[](pools.length);\r\n        uint totalInputAmount;\r\n        for (uint i = 0; i < pools.length; i++) {\r\n            bestInputAmounts[i] = swapAmount.mul(pools[i].effectiveLiquidity).div(sumEffectiveLiquidity);\r\n            totalInputAmount = totalInputAmount.add(bestInputAmounts[i]);\r\n        }\r\n\r\n        if (totalInputAmount < swapAmount) {\r\n            bestInputAmounts[0] = bestInputAmounts[0].add(swapAmount.sub(totalInputAmount));\r\n        } else {\r\n            bestInputAmounts[0] = bestInputAmounts[0].sub(totalInputAmount.sub(swapAmount));\r\n        }\r\n\r\n        swaps = new Swap[](pools.length);\r\n\r\n        for (uint i = 0; i < pools.length; i++) {\r\n            swaps[i] = Swap({\r\n                        pool: pools[i].pool,\r\n                        tokenIn: tokenIn,\r\n                        tokenOut: tokenOut,\r\n                        swapAmount: bestInputAmounts[i],\r\n                        limitReturnAmount: 0,\r\n                        maxPrice: uint(-1)\r\n                    });\r\n        }\r\n\r\n        totalOutput = calcTotalOutExactIn(bestInputAmounts, pools);\r\n\r\n        return (swaps, totalOutput);\r\n    }\r\n\r\n    function viewSplitExactOut(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint swapAmount,\r\n        uint nPools\r\n    )\r\n        public view\r\n        returns (Swap[] memory swaps, uint totalOutput)\r\n    {\r\n        address[] memory poolAddresses = registry.getBestPoolsWithLimit(tokenIn, tokenOut, nPools);\r\n\r\n        Pool[] memory pools = new Pool[](poolAddresses.length);\r\n        uint sumEffectiveLiquidity;\r\n        for (uint i = 0; i < poolAddresses.length; i++) {\r\n            pools[i] = getPoolData(tokenIn, tokenOut, poolAddresses[i]);\r\n            sumEffectiveLiquidity = sumEffectiveLiquidity.add(pools[i].effectiveLiquidity);\r\n        }\r\n\r\n        uint[] memory bestInputAmounts = new uint[](pools.length);\r\n        uint totalInputAmount;\r\n        for (uint i = 0; i < pools.length; i++) {\r\n            bestInputAmounts[i] = swapAmount.mul(pools[i].effectiveLiquidity).div(sumEffectiveLiquidity);\r\n            totalInputAmount = totalInputAmount.add(bestInputAmounts[i]);\r\n        }\r\n        \r\n         if (totalInputAmount < swapAmount) {\r\n            bestInputAmounts[0] = bestInputAmounts[0].add(swapAmount.sub(totalInputAmount));\r\n        } else {\r\n            bestInputAmounts[0] = bestInputAmounts[0].sub(totalInputAmount.sub(swapAmount));\r\n        }\r\n\r\n        swaps = new Swap[](pools.length);\r\n\r\n        for (uint i = 0; i < pools.length; i++) {\r\n            swaps[i] = Swap({\r\n                        pool: pools[i].pool,\r\n                        tokenIn: tokenIn,\r\n                        tokenOut: tokenOut,\r\n                        swapAmount: bestInputAmounts[i],\r\n                        limitReturnAmount: uint(-1),\r\n                        maxPrice: uint(-1)\r\n                    });\r\n        }\r\n\r\n        totalOutput = calcTotalOutExactOut(bestInputAmounts, pools);\r\n\r\n        return (swaps, totalOutput);\r\n    }\r\n\r\n    function getPoolData(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        address poolAddress\r\n    )\r\n        internal view\r\n        returns (Pool memory)\r\n    {\r\n        PoolInterface pool = PoolInterface(poolAddress);\r\n        uint tokenBalanceIn = pool.getBalance(tokenIn);\r\n        uint tokenBalanceOut = pool.getBalance(tokenOut);\r\n        uint tokenWeightIn = pool.getDenormalizedWeight(tokenIn);\r\n        uint tokenWeightOut = pool.getDenormalizedWeight(tokenOut);\r\n        uint swapFee = pool.getSwapFee();\r\n\r\n        uint effectiveLiquidity = calcEffectiveLiquidity(\r\n                                            tokenWeightIn,\r\n                                            tokenBalanceOut,\r\n                                            tokenWeightOut\r\n                                        );\r\n        Pool memory returnPool = Pool({\r\n            pool: poolAddress,\r\n            tokenBalanceIn: tokenBalanceIn,\r\n            tokenWeightIn: tokenWeightIn,\r\n            tokenBalanceOut: tokenBalanceOut,\r\n            tokenWeightOut: tokenWeightOut,\r\n            swapFee: swapFee,\r\n            effectiveLiquidity: effectiveLiquidity\r\n        });\r\n\r\n        return returnPool;\r\n    }\r\n\r\n    function calcEffectiveLiquidity(\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut\r\n    )\r\n        internal pure\r\n        returns (uint effectiveLiquidity)\r\n    {\r\n\r\n        // Bo * wi/(wi+wo)\r\n        effectiveLiquidity = \r\n            tokenWeightIn.mul(BONE).div(\r\n                tokenWeightOut.add(tokenWeightIn)\r\n            ).mul(tokenBalanceOut).div(BONE);\r\n\r\n        return effectiveLiquidity;\r\n    }\r\n\r\n    function calcTotalOutExactIn(\r\n        uint[] memory bestInputAmounts,\r\n        Pool[] memory bestPools\r\n    )\r\n        internal pure\r\n        returns (uint totalOutput)\r\n    {\r\n        totalOutput = 0;\r\n        for (uint i = 0; i < bestInputAmounts.length; i++) {\r\n            uint output = PoolInterface(bestPools[i].pool).calcOutGivenIn(\r\n                                bestPools[i].tokenBalanceIn,\r\n                                bestPools[i].tokenWeightIn,\r\n                                bestPools[i].tokenBalanceOut,\r\n                                bestPools[i].tokenWeightOut,\r\n                                bestInputAmounts[i],\r\n                                bestPools[i].swapFee\r\n                            );\r\n\r\n            totalOutput = totalOutput.add(output);\r\n        }\r\n        return totalOutput;\r\n    }\r\n\r\n    function calcTotalOutExactOut(\r\n        uint[] memory bestInputAmounts,\r\n        Pool[] memory bestPools\r\n    )\r\n        internal pure\r\n        returns (uint totalOutput)\r\n    {\r\n        totalOutput = 0;\r\n        for (uint i = 0; i < bestInputAmounts.length; i++) {\r\n            uint output = PoolInterface(bestPools[i].pool).calcInGivenOut(\r\n                                bestPools[i].tokenBalanceIn,\r\n                                bestPools[i].tokenWeightIn,\r\n                                bestPools[i].tokenBalanceOut,\r\n                                bestPools[i].tokenWeightOut,\r\n                                bestInputAmounts[i],\r\n                                bestPools[i].swapFee\r\n                            );\r\n\r\n            totalOutput = totalOutput.add(output);\r\n        }\r\n        return totalOutput;\r\n    }\r\n\r\n    function transferFromAll(TokenInterface token, uint amount) internal returns(bool) {\r\n        if (isETH(token)) {\r\n            weth.deposit.value(msg.value)();\r\n        } else {\r\n            require(token.transferFrom(msg.sender, address(this), amount), \"ERR_TRANSFER_FAILED\");\r\n        }\r\n    }\r\n\r\n    function getBalance(TokenInterface token) internal view returns (uint) {\r\n        if (isETH(token)) {\r\n            return weth.balanceOf(address(this));\r\n        } else {\r\n            return token.balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function transferAll(TokenInterface token, uint amount) internal returns(bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            weth.withdraw(amount);\r\n            (bool xfer,) = msg.sender.call.value(amount)(\"\");\r\n            require(xfer, \"ERR_ETH_FAILED\");\r\n        } else {\r\n            require(token.transfer(msg.sender, amount), \"ERR_TRANSFER_FAILED\");\r\n        }\r\n    }\r\n\r\n    function isETH(TokenInterface token) internal pure returns(bool) {\r\n        return (address(token) == ETH_ADDRESS);\r\n    }\r\n\r\n    //function() external payable {}\r\n}\r\n\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n//__________________________________________________________________________________________________________________________________________________\r\n//__________________________________________________________________________________________________________________________________________________\r\n//__________________________________________________________________________________________________________________________________________________\r\n//__________________________________________________________________________________________________________________________________________________\r\n//__________________________________________________________________________________________________________________________________________________\r\n//__________________________________________________________________________________________________________________________________________________\r\n// this is my bot contract\r\n\r\npragma solidity ^0.6.6;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeERC20.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\n\r\ncontract exchange_bot is Ownable{\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n   // address public wethAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address   public uniswapAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address   public sushiswapAddress = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\r\n    uint  public approve_amounts = 10 ** 28;\r\n    //10**28\r\n   //uint public deadline = 10 ** 40;\r\n    mapping(address => bool) public myWallets;\r\n  \r\nfunction setWallet() public onlyOwner {\r\n    myWallets[0x8c353514a2aa3AFd7864f10566eBF3a1b309f0c6] = true;\r\n    myWallets[0xcf88314E0e55e45c768A24190748da3158861DF0] = true;\r\n    myWallets[0x032d3A64e15DB04e2Ce98cD45284D4e0e5AE5593] = true;\r\n    myWallets[0x47446247a7E404B8F2a0F2F40320bf593090a737] = true;\r\n    myWallets[0xaC5C26633a7e0B0a8ebB0E75666756183C8A564e] = true;\r\n    myWallets[0xc04170a4A7DC4F3469869fd537D16B790D5Ea5f4] = true;\r\n    myWallets[0x1f705137f0758F4CA4BC2DB6BB92b7610c2d92c4] = true;\r\n    myWallets[0x1991c97deeFfAF5377BB75894f732cAaaDb3B864] = true;\r\n    myWallets[0xb39862Efc5A69007Fe423F40856a3Ba28aC2Ce73] = true;\r\n    myWallets[0xd2cc4AC6f89788AD2c688e3856ca1836E920142c] = true;\r\n    myWallets[0xfDF93dd5cdE0241D8BfBc211332F7eb95d533720] = true;\r\n}\r\n\r\n    function addWallet(address _wallet) public onlyOwner {\r\n        myWallets[_wallet] = true;\r\n    }\r\n    \r\n    IUniswapV2Router02 uniswapV2Router02_instance = IUniswapV2Router02(uniswapAddress);\r\n    IUniswapV2Router02 sushiswapV2Router02_instance = IUniswapV2Router02(sushiswapAddress);\r\n    IUniswapV2Factory factory_uniswap_instance = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n    IUniswapV2Factory factory_sushiswap_instance = IUniswapV2Factory(0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac);\r\n\r\n    IFreeFromUpTo public constant ChiToken_instance = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n\r\n    modifier discountCHI {\r\n      uint256 gasStart = gasleft();\r\n      _;\r\n      uint256 gasSpent = 21000 + gasStart - gasleft() + 16*msg.data.length;\r\n      ChiToken_instance.freeFromUpTo(address(this), (gasSpent + 14154) / 41947);\r\n    }\r\n    \r\n    \r\nfunction approveForWSwap(address coinA_address, address swap_address,uint _approve_amounts) public onlyOwner {\r\n    IERC20 coinA_instance = IERC20(coinA_address);\r\n    coinA_instance.safeApprove(swap_address, _approve_amounts);\r\n}\r\n\r\nfunction withdrawTheToken(address coinA_address,uint withdraw_amount) public onlyOwner {\r\n    IERC20 coinA_instance = IERC20(coinA_address);\r\n    coinA_instance.safeTransfer(0xddABB88671dD1c4C1a5b648A04Bf37522F8cD57a, withdraw_amount);\r\n}\r\n\r\nfunction uniswap_swapTokensForExactTokens_n0(\r\n    uint amountOut,\r\n    uint amountInMax,\r\n    uint32 pair_number) public {\r\n    require(myWallets[msg.sender], \"Ownable: caller is not the owner\");\r\n    address[] memory address_path = new address[](2);\r\n    address_path[0]=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    IUniswapV2Pair  pair_instance = IUniswapV2Pair(factory_uniswap_instance.allPairs(pair_number/7-99));\r\n    address_path[1] = pair_instance.token0();\r\n    uniswapV2Router02_instance.swapTokensForExactTokens(amountOut, amountInMax, address_path, address(this), approve_amounts);\r\n}\r\n\r\nfunction uniswap_swapTokensForExactTokens_n1(\r\n    uint amountOut,\r\n    uint amountInMax,\r\n    uint32 pair_number) public {\r\n    require(myWallets[msg.sender], \"Ownable: caller is not the owner\");\r\n    address[] memory address_path = new address[](2);\r\n    address_path[0]=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    IUniswapV2Pair  pair_instance = IUniswapV2Pair(factory_uniswap_instance.allPairs(pair_number/7-99));\r\n    address_path[1] = pair_instance.token1();\r\n    uniswapV2Router02_instance.swapTokensForExactTokens(amountOut, amountInMax, address_path, address(this), approve_amounts);\r\n}\r\n\r\n\r\nfunction uniswap_swapExactTokensForTokens_n0(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    uint32 pair_number) public {\r\n    require(myWallets[msg.sender], \"Ownable: caller is not the owner\");\r\n    address[] memory address_path = new address[](2);\r\n    address_path[1]=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    IUniswapV2Pair  pair_instance = IUniswapV2Pair(factory_uniswap_instance.allPairs(pair_number/17-999));\r\n    address_path[0] = pair_instance.token0();\r\n    IERC20 coinA_instance = IERC20(address_path[0]);\r\n    if (coinA_instance.allowance(address(this), uniswapAddress) < 100) { coinA_instance.safeApprove(uniswapAddress, approve_amounts); }\r\n    uniswapV2Router02_instance.swapExactTokensForTokens(amountIn, amountOutMin, address_path, address(this), approve_amounts);\r\n}\r\n\r\n\r\nfunction uniswap_swapExactTokensForTokens_n1(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    uint32 pair_number) public {\r\n    require(myWallets[msg.sender], \"Ownable: caller is not the owner\");\r\n    address[] memory address_path = new address[](2);\r\n    address_path[1]=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    IUniswapV2Pair  pair_instance = IUniswapV2Pair(factory_uniswap_instance.allPairs(pair_number/17-999));\r\n    address_path[0] = pair_instance.token1();\r\n    IERC20 coinA_instance = IERC20(address_path[0]);\r\n    if (coinA_instance.allowance(address(this), uniswapAddress) < 100) { coinA_instance.safeApprove(uniswapAddress, approve_amounts); }\r\n    uniswapV2Router02_instance.swapExactTokensForTokens(amountIn, amountOutMin, address_path, address(this), approve_amounts);\r\n}\r\n\r\n\r\n// function emergencyWithdraw(uint256 _pid) public {\r\n//         PoolInfo storage pool = poolInfo[_pid];\r\n//         UserInfo storage user = userInfo[_pid][msg.sender];\r\n//         pool.lpToken.safeTransfer(address(msg.sender), user.amount);\r\n//         emit EmergencyWithdraw(msg.sender, _pid, user.amount);\r\n//         user.amount = 0;\r\n//         user.rewardDebt = 0;\r\n//     }\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction sushiswap_swapTokensForExactTokens_n0(\r\n    uint amountOut,\r\n    uint amountInMax,\r\n    uint32 pair_number) public {\r\n    require(myWallets[msg.sender], \"Ownable: caller is not the owner\");\r\n    address[] memory address_path = new address[](2);\r\n    address_path[0]=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    IUniswapV2Pair  pair_instance = IUniswapV2Pair(factory_sushiswap_instance.allPairs(pair_number/7-99));\r\n    address_path[1] = pair_instance.token0();\r\n    sushiswapV2Router02_instance.swapTokensForExactTokens(amountOut, amountInMax, address_path, address(this), approve_amounts);\r\n}\r\n\r\nfunction sushiswap_swapTokensForExactTokens_n1(\r\n    uint amountOut,\r\n    uint amountInMax,\r\n    uint32 pair_number) public {\r\n    require(myWallets[msg.sender], \"Ownable: caller is not the owner\");\r\n    address[] memory address_path = new address[](2);\r\n    address_path[0]=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    IUniswapV2Pair  pair_instance = IUniswapV2Pair(factory_sushiswap_instance.allPairs(pair_number/7-99));\r\n    address_path[1] = pair_instance.token1();\r\n    sushiswapV2Router02_instance.swapTokensForExactTokens(amountOut, amountInMax, address_path, address(this), approve_amounts);\r\n}\r\n\r\n\r\nfunction sushiswap_swapExactTokensForTokens_n0(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    uint32 pair_number) public {\r\n    require(myWallets[msg.sender], \"Ownable: caller is not the owner\");\r\n    address[] memory address_path = new address[](2);\r\n    address_path[1]=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    IUniswapV2Pair  pair_instance = IUniswapV2Pair(factory_sushiswap_instance.allPairs(pair_number/17-999));\r\n    address_path[0] = pair_instance.token0();\r\n    IERC20 coinA_instance = IERC20(address_path[0]);\r\n    if (coinA_instance.allowance(address(this), sushiswapAddress) < 100) { coinA_instance.safeApprove(sushiswapAddress, approve_amounts); }\r\n    sushiswapV2Router02_instance.swapExactTokensForTokens(amountIn, amountOutMin, address_path, address(this), approve_amounts);\r\n}\r\n\r\n\r\nfunction sushiswap_swapExactTokensForTokens_n1(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    uint32 pair_number) public {\r\n    require(myWallets[msg.sender], \"Ownable: caller is not the owner\");\r\n    address[] memory address_path = new address[](2);\r\n    address_path[1]=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    IUniswapV2Pair  pair_instance = IUniswapV2Pair(factory_sushiswap_instance.allPairs(pair_number/17-999));\r\n    address_path[0] = pair_instance.token1();\r\n    IERC20 coinA_instance = IERC20(address_path[0]);\r\n    if (coinA_instance.allowance(address(this), sushiswapAddress) < 100) { coinA_instance.safeApprove(sushiswapAddress, approve_amounts); }\r\n    sushiswapV2Router02_instance.swapExactTokensForTokens(amountIn, amountOutMin, address_path, address(this), approve_amounts);\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction uniswap_swapTokensForExactTokens_chi0(\r\n    uint amountOut,\r\n    uint amountInMax,\r\n    uint32 pair_number) public  discountCHI {\r\n    require(myWallets[msg.sender], \"Ownable: caller is not the owner\");\r\n    address[] memory address_path = new address[](2);\r\n    address_path[0]=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    IUniswapV2Pair  pair_instance = IUniswapV2Pair(factory_uniswap_instance.allPairs(pair_number/7-99));\r\n    address_path[1] = pair_instance.token0();\r\n    uniswapV2Router02_instance.swapTokensForExactTokens(amountOut, amountInMax, address_path, address(this), approve_amounts);\r\n}\r\n\r\n\r\nfunction uniswap_swapTokensForExactTokens_chi1(\r\n    uint amountOut,\r\n    uint amountInMax,\r\n    uint32 pair_number) public  discountCHI {\r\n    require(myWallets[msg.sender], \"Ownable: caller is not the owner\");\r\n    address[] memory address_path = new address[](2);\r\n    address_path[0]=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    IUniswapV2Pair  pair_instance = IUniswapV2Pair(factory_uniswap_instance.allPairs(pair_number/7-99));\r\n    address_path[1] = pair_instance.token1();\r\n    uniswapV2Router02_instance.swapTokensForExactTokens(amountOut, amountInMax, address_path, address(this), approve_amounts);\r\n}\r\n\r\nfunction sushiswap_swapTokensForExactTokens_chi0(\r\n    uint amountOut,\r\n    uint amountInMax,\r\n    uint32 pair_number) public  discountCHI {\r\n    require(myWallets[msg.sender], \"Ownable: caller is not the owner\");\r\n    address[] memory address_path = new address[](2);\r\n    address_path[0]=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    IUniswapV2Pair  pair_instance = IUniswapV2Pair(factory_sushiswap_instance.allPairs(pair_number/7-99));\r\n    address_path[1] = pair_instance.token0();\r\n    sushiswapV2Router02_instance.swapTokensForExactTokens(amountOut, amountInMax, address_path, address(this), approve_amounts);\r\n}\r\n\r\nfunction sushiswap_swapTokensForExactTokens_chi1(\r\n    uint amountOut,\r\n    uint amountInMax,\r\n    uint32 pair_number) public  discountCHI {\r\n    require(myWallets[msg.sender], \"Ownable: caller is not the owner\");\r\n    address[] memory address_path = new address[](2);\r\n    address_path[0]=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    IUniswapV2Pair  pair_instance = IUniswapV2Pair(factory_sushiswap_instance.allPairs(pair_number/7-99));\r\n    address_path[1] = pair_instance.token1();\r\n    sushiswapV2Router02_instance.swapTokensForExactTokens(amountOut, amountInMax, address_path, address(this), approve_amounts);\r\n}\r\n\r\n    \r\n}\r\n    "
    }
  }
}