{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/Spender.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.5;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interface/IAllowanceTarget.sol\";\n\n/**\n * @dev Spender contract\n */\ncontract Spender {\n    using SafeMath for uint256;\n\n    // Constants do not have storage slot.\n    address private constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address private constant ZERO_ADDRESS = address(0);\n    uint256 constant private TIME_LOCK_DURATION = 1 days;\n\n    // Below are the variables which consume storage slots.\n    address public operator;\n    address public allowanceTarget;\n    mapping(address => bool) private authorized;\n    mapping(address => bool) private tokenBlacklist;\n    uint256 public numPendingAuthorized;\n    mapping(uint256 => address) public pendingAuthorized;\n    uint256 public timelockExpirationTime;\n    uint256 public contractDeployedTime;\n    bool public timelockActivated;\n\n\n\n    /************************************************************\n    *          Access control and ownership management          *\n    *************************************************************/\n    modifier onlyOperator() {\n        require(operator == msg.sender, \"Spender: not the operator\");\n        _;\n    }\n\n    modifier onlyAuthorized() {\n        require(authorized[msg.sender], \"Spender: not authorized\");\n        _;\n    }\n\n    function transferOwnership(address _newOperator) external onlyOperator {\n        require(_newOperator != address(0), \"Spender: operator can not be zero address\");\n        operator = _newOperator;\n    }\n\n\n    /************************************************************\n    *                    Timelock management                    *\n    *************************************************************/\n    /// @dev Everyone can activate timelock after the contract has been deployed for more than 1 day.\n    function activateTimelock() external {\n        bool canActivate = block.timestamp.sub(contractDeployedTime) > 1 days;\n        require(canActivate && ! timelockActivated, \"Spender: can not activate timelock yet or has been activated\");\n        timelockActivated = true;\n    }\n\n\n    /************************************************************\n    *              Constructor and init functions               *\n    *************************************************************/\n    constructor(address _operator) public {\n        require(_operator != address(0), \"Spender: _operator should not be 0\");\n\n        // Set operator\n        operator = _operator;\n        timelockActivated = false;\n        contractDeployedTime = block.timestamp;\n    }\n\n    function setAllowanceTarget(address _allowanceTarget) external onlyOperator {\n        require(allowanceTarget == address(0), \"Spender: can not reset allowance target\");\n\n        // Set allowanceTarget\n        allowanceTarget = _allowanceTarget;\n    }\n\n\n\n    /************************************************************\n    *          AllowanceTarget interaction functions            *\n    *************************************************************/\n    function setNewSpender(address _newSpender) external onlyOperator {\n        IAllowanceTarget(allowanceTarget).setSpenderWithTimelock(_newSpender);\n    }\n\n    function teardownAllowanceTarget() external onlyOperator {\n        IAllowanceTarget(allowanceTarget).teardown();\n    }\n\n\n\n    /************************************************************\n    *           Whitelist and blacklist functions               *\n    *************************************************************/\n    function isBlacklisted(address _tokenAddr) external view returns (bool) {\n        return tokenBlacklist[_tokenAddr];\n    }\n\n    function blacklist(address[] calldata _tokenAddrs, bool[] calldata _isBlacklisted) external onlyOperator {\n        require(_tokenAddrs.length == _isBlacklisted.length, \"Spender: length mismatch\");\n        for (uint256 i = 0; i < _tokenAddrs.length; i++) {\n            tokenBlacklist[_tokenAddrs[i]] = _isBlacklisted[i];\n        }\n    }\n    \n    function isAuthorized(address _caller) external view returns (bool) {\n        return authorized[_caller];\n    }\n\n    function authorize(address[] calldata _pendingAuthorized) external onlyOperator {\n        require(_pendingAuthorized.length > 0, \"Spender: authorize list is empty\");\n        require(numPendingAuthorized == 0 && timelockExpirationTime == 0, \"Spender: an authorize current in progress\");\n\n        if (timelockActivated) {\n            numPendingAuthorized = _pendingAuthorized.length;\n            for (uint256 i = 0; i < _pendingAuthorized.length; i++) {\n                require(_pendingAuthorized[i] != address(0), \"Spender: can not authorize zero address\");\n                pendingAuthorized[i] = _pendingAuthorized[i];\n            }\n            timelockExpirationTime = now + TIME_LOCK_DURATION;\n        } else {\n            for (uint256 i = 0; i < _pendingAuthorized.length; i++) {\n                require(_pendingAuthorized[i] != address(0), \"Spender: can not authorize zero address\");\n                authorized[_pendingAuthorized[i]] = true;\n            }\n        }\n    }\n\n    function completeAuthorize() external {\n        require(timelockExpirationTime != 0, \"Spender: no pending authorize\");\n        require(now >= timelockExpirationTime, \"Spender: time lock not expired yet\");\n\n        for (uint256 i = 0; i < numPendingAuthorized; i++) {\n            authorized[pendingAuthorized[i]] = true;\n            delete pendingAuthorized[i];\n        }\n        timelockExpirationTime = 0;\n        numPendingAuthorized = 0;\n    }\n\n    function deauthorize(address[] calldata _deauthorized) external onlyOperator {\n        for (uint256 i = 0; i < _deauthorized.length; i++) {\n            authorized[_deauthorized[i]] = false;\n        }\n    }\n\n\n    /************************************************************\n    *                   External functions                      *\n    *************************************************************/\n    /// @dev Spend tokens on user's behalf. Only an authority can call this.\n    /// @param _user The user to spend token from.\n    /// @param _tokenAddr The address of the token.\n    /// @param _amount Amount to spend.\n    function spendFromUser(address _user, address _tokenAddr, uint256 _amount) external onlyAuthorized {\n        require(! tokenBlacklist[_tokenAddr], \"Spender: token is blacklisted\");\n\n        if (_tokenAddr != ETH_ADDRESS && _tokenAddr != ZERO_ADDRESS) {\n\n            uint256 balanceBefore = IERC20(_tokenAddr).balanceOf(msg.sender);\n            (bool callSucceed, ) = address(allowanceTarget).call(\n                abi.encodeWithSelector(\n                    IAllowanceTarget.executeCall.selector,\n                    _tokenAddr,\n                    abi.encodeWithSelector(\n                        IERC20.transferFrom.selector,\n                        _user,\n                        msg.sender,\n                        _amount\n                    )\n                )\n            );\n            require(callSucceed, \"Spender: ERC20 transferFrom failed\");\n            // Check balance\n            uint256 balanceAfter = IERC20(_tokenAddr).balanceOf(msg.sender);\n            require(balanceAfter.sub(balanceBefore) == _amount, \"Spender: ERC20 transferFrom result mismatch\");\n\n        }\n    }\n}\n"
    },
    "contracts/interface/IAllowanceTarget.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface IAllowanceTarget {\n    function setSpenderWithTimelock(address _newSpender) external;\n    function completeSetSpender() external;\n    function executeCall(address payable _target, bytes calldata _callData) external returns (bytes memory resultData);\n    function teardown() external;\n}"
    }
  }
}