{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/1_Storage.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.12;\r\n\r\ninterface IMytradePair {\r\n     function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n     function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}\r\ninterface IERC20 {\r\n    function balanceOf(address who) external view returns (uint256);\r\n}\r\ncontract MyContractc{\r\n    function skimOut(\r\n        uint amountOut\r\n    ) public{\r\n       IMytradePair(0x8D8dA72161da2d800EbDD2a316214EAc7C32FCa0).swap(0,\r\n           amountOut, 0x6BBCc8B410696F6717a6B24dd370866AbC40B27F, new bytes(0)\r\n       );\r\n    }\r\n}\r\ncontract MyContractcTool{\r\n    function skimOuts(\r\n        address[] calldata myContractcs,\r\n        uint[] calldata  amountOuts\r\n    ) public{\r\n        for(uint i=0;i<myContractcs.length;i++){\r\n          skimOut(myContractcs[i],amountOuts[i]);\r\n        }\r\n    }\r\n    function skimOut(\r\n        address myContractc,\r\n        uint amountOut\r\n    ) public{\r\n       MyContractc(myContractc).skimOut(amountOut);\r\n    }\r\n    function getSkimOutNew0(\r\n        address token0,\r\n        address pairAddr\r\n    ) public view returns (uint112 reserve0, uint112 reserve1,uint tbal0) {\r\n        (reserve0,reserve1,)=IMytradePair(pairAddr).getReserves();\r\n         tbal0=IERC20(token0).balanceOf(pairAddr);\r\n    }\r\n    function getSkimOutNew0s(\r\n        address[] memory token0s,\r\n        address[] memory pairAddrs\r\n    ) public view returns (uint112[] memory reserve0s, uint112[] memory reserve1s,uint[] memory tbal0s) {\r\n        uint l=token0s.length;\r\n        reserve0s=new uint112[](l);\r\n        reserve1s=new uint112[](l);\r\n        tbal0s=new uint[](l);\r\n        for(uint i=0;i<l;i++){\r\n          (reserve0s[i],reserve1s[i],tbal0s[i])=getSkimOutNew0(token0s[i],pairAddrs[i]);\r\n        }\r\n    }\r\n    function getSkimOutNew1(\r\n        address token1,\r\n        address pairAddr\r\n    ) public view returns (uint112 reserve0, uint112 reserve1,uint tbal1) {\r\n        (reserve0, reserve1,)=IMytradePair(pairAddr).getReserves();\r\n         tbal1=IERC20(token1).balanceOf(pairAddr);\r\n    }\r\n    function getSkimOutNew1s(\r\n        address[] memory token1s,\r\n        address[] memory pairAddrs\r\n    ) public view returns (uint112[] memory reserve0s, uint112[] memory reserve1s,uint[] memory tbal1s) {\r\n        uint l=token1s.length;\r\n        reserve0s=new uint112[](l);\r\n        reserve1s=new uint112[](l);\r\n        tbal1s=new uint[](l);\r\n        for(uint i=0;i<l;i++){\r\n          (reserve0s[i], reserve1s[i],tbal1s[i])=getSkimOutNew1(token1s[i],pairAddrs[i]);\r\n        }\r\n    }\r\n    function getSkimOutNew01s(\r\n        address[] calldata token0s,\r\n        address[] calldata pairAddr0s,\r\n        address[] calldata token1s,\r\n        address[] calldata pairAddr1s\r\n    ) external view returns (\r\n         uint112[] memory reserve0s0, uint112[] memory reserve1s0,uint[] memory tbal0s0,\r\n         uint112[] memory reserve0s1, uint112[] memory reserve1s1,uint[] memory tbal1s1\r\n    ) {\r\n        (reserve0s0,reserve1s0,tbal0s0)=getSkimOutNew0s(token0s,pairAddr0s);\r\n        (reserve0s1,reserve1s1,tbal1s1)=getSkimOutNew1s(token1s,pairAddr1s);\r\n    }\r\n}\r\n//0xB051557CefD7EC3B1926fFab0cDd833aD8108498"
    }
  }
}