{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"ERC20Token.sol":{"content":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public isOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract StandardToken {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    function totalSupply() public constant returns (uint256 supply) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] = balances[_to].add(_value);\r\n            balances[_from] = balances[_from].sub(_value);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Token is StandardToken, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    string public version = '1.0';\r\n    uint256 public totalCoin;\r\n    uint8 public decimals;\r\n    uint8 public exchangeRate;\r\n\r\n    event TokenNameChanged(string indexed previousName, string indexed newName);\r\n    event TokenSymbolChanged(string indexed previousSymbol, string indexed newSymbol);\r\n    event ExhangeRateChanged(uint8 indexed previousRate, uint8 indexed newRate);\r\n\r\n    function ERC20Token() public {\r\n        decimals        = 18;\r\n        totalCoin       = 250000;                       // Total Supply of Coin\r\n        totalSupply     = totalCoin * 10**uint(decimals); // Total Supply of Coin\r\n        balances[owner] = totalSupply;                    // Total Supply sent to Owner's Address\r\n        exchangeRate    = 250;                            // 250 Coins per ETH   (changable)\r\n        symbol          = \"UNB\";                       // Your Ticker Symbol  (changable)\r\n        name            = \"UNIBÃ–RS\";             // Your Coin Name      (changable)\r\n    }\r\n\r\n    function changeTokenName(string newName) public isOwner returns (bool success) {\r\n        TokenNameChanged(name, newName);\r\n        name = newName;\r\n        return true;\r\n    }\r\n\r\n    function changeTokenSymbol(string newSymbol) public isOwner returns (bool success) {\r\n        TokenSymbolChanged(symbol, newSymbol);\r\n        symbol = newSymbol;\r\n        return true;\r\n    }\r\n\r\n    function changeExhangeRate(uint8 newRate) public isOwner returns (bool success) {\r\n        ExhangeRateChanged(exchangeRate, newRate);\r\n        exchangeRate = newRate;\r\n        return true;\r\n    }\r\n\r\n    function () public payable {\r\n        fundTokens();\r\n    }\r\n\r\n    function fundTokens() public payable {\r\n        require(msg.value > 0);\r\n        uint256 tokens = msg.value.mul(exchangeRate);\r\n        require(balances[owner].sub(tokens) > 0);\r\n        balances[msg.sender] = balances[msg.sender].add(tokens);\r\n        balances[owner] = balances[owner].sub(tokens);\r\n        Transfer(msg.sender, owner, msg.value);\r\n        forwardFunds();\r\n    }\r\n\r\n    function forwardFunds() internal {\r\n        owner.transfer(msg.value);\r\n    }\r\n\r\n    function approveAndCall(\r\n        address _spender,\r\n        uint256 _value,\r\n        bytes _extraData\r\n    ) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        if(!_spender.call(\r\n            bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))),\r\n            msg.sender,\r\n            _value,\r\n            this,\r\n            _extraData\r\n        )) { revert(); }\r\n        return true;\r\n    }\r\n\r\n}"}}}