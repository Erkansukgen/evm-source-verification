{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/DexnesPresaleAndLiquidityLock.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n}\n\ninterface IUniswapV2Router02 {\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n}\n\n// Long live and prosper...\ncontract DexnesPresaleAndLiquidityLock {\n\n    using SafeMath for uint256;\n\n    IUniswapV2Router02 internal constant UNISWAP = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\n    struct WhitelistInfo {\n        uint256 whitelisted;\n        uint256 boughtAmount;\n    }\n\n    uint256 public startTimestamp = 1605535200; // 11/16/2020 @ 2:00pm (UTC)\n    uint256 public endTimestamp = startTimestamp.add(1 days); // ends after a day\n    uint256 public lockDuration = 31 days; // liquidity locked for 31 days\n\n    IERC20 public dnesToken = IERC20(address(0xD1706eAf3C60b69942F29b683D857e01428c459F)); // dexnes token\n    address public dexnesCaptain = address(0xA34757fC1e8EAD538C4ef2Ef23286517A7a9d0a7); // staking contract\n\n    uint256 public locked;\n    uint256 public unlockTimestamp;\n\n    uint256 public maxAllowed = 3 ether;\n    uint256 public liquidityPercentage = 75;\n    uint256 public weiRaised;\n\n    address[] internal buyers;\n    mapping(address => WhitelistInfo) public whitelist;\n\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function addToWhitelist(address[100] calldata _addresses) public {\n        require(msg.sender == owner, \"Caller is not owner\");\n\n        for (uint i = 0; i < _addresses.length; i++) {\n            address addy = _addresses[i];\n            if (addy != address(0)) {\n                whitelist[addy] = WhitelistInfo(1, 0);\n            }\n        }\n    }\n\n    function unlockLiquidity(IERC20 _uniLpToken) public {\n        require(locked == 1, \"Liquidity is not yet locked\");\n        require(isClosed(), \"Liqudity cannot be unlocked as the presale is not yet closed\");\n        require(block.timestamp >= unlockTimestamp, \"Liqudity cannot be unlocked as the block timestamp is before the unlock timestamp\");\n\n        _uniLpToken.transfer(owner, _uniLpToken.balanceOf(address(this)));\n    }\n\n    // adds liquidity to uniswap (ratio is 1.5 eth = 1 dnes)\n    // 75% of the raised eth will be put into liquidity pool\n    // 25% of the raised eth will be used for marketing\n    // unsold tokens will be sent to the mining pool\n    function lockLiquidity() public {\n        require(locked == 0, \"Liquidity is already locked\");\n        require(isClosed(), \"Presale is either still open or not yet opened\");\n\n        locked = 1;\n        unlockTimestamp = block.timestamp.add(lockDuration);\n\n        addLiquidity();\n        distributeTokensToBuyers();\n\n        payable(owner).transfer(address(this).balance);\n\n        dnesToken.transfer(dexnesCaptain, dnesToken.balanceOf(address(this)));\n    }\n\n    function addLiquidity() internal {\n        uint256 ethForLiquidity = weiRaised.mul(liquidityPercentage).div(100);\n        uint256 tokenForLiquidity = ethForLiquidity.div(150).mul(100);\n\n        dnesToken.approve(address(UNISWAP), tokenForLiquidity);\n\n        UNISWAP.addLiquidityETH\n        {value : ethForLiquidity}\n        (\n            address(dnesToken),\n            tokenForLiquidity,\n            0,\n            0,\n            address(this),\n            block.timestamp + 100000000\n        );\n    }\n\n    function distributeTokensToBuyers() internal {\n        for (uint i = 0; i < buyers.length; i++) {\n            address buyer = buyers[i];\n            uint256 tokens = whitelist[buyer].boughtAmount;\n\n            if (tokens > 0) {\n                dnesToken.transfer(buyer, tokens);\n            }\n        }\n    }\n\n    function isOpen() public view returns (bool) {\n        return !isClosed() && block.timestamp >= startTimestamp;\n    }\n\n    function isClosed() public view returns (bool) {\n        return block.timestamp >= endTimestamp;\n    }\n\n    function buyTokens() payable public {\n        require(isOpen(), \"Presale is either already closed or not yet open\");\n        require(whitelist[msg.sender].whitelisted == 1, \"Address is not included in the whitelist\");\n        require(dnesToken.balanceOf(address(this)) >= msg.value, \"Contract does not have enough token balance\");\n\n        uint256 boughtAmount = whitelist[msg.sender].boughtAmount.add(msg.value);\n        require(boughtAmount <= maxAllowed, \"Whitelisted address can only buy a maximum of 3 ether\");\n\n        buyers.push(msg.sender);\n        whitelist[msg.sender].boughtAmount = boughtAmount;\n        weiRaised = weiRaised.add(msg.value);\n\n        dnesToken.transfer(msg.sender, msg.value);\n    }\n\n    receive() external payable {\n        buyTokens();\n    }\n}"}}}