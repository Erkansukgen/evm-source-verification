{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Untitled.sol":{"content":"interface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\t\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function balanceOf(address owner) external view returns (uint);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n}\r\n\r\ncontract sender {\r\n\r\n\taddress private owner;\r\n\taddress private trader;\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tfunction settrader(address adr) external {\r\n\t    require(msg.sender == owner);\r\n\t    trader = adr;\r\n\t}\r\n\r\n\tfunction dotrade(uint amountOutMin, address[] calldata path, uint deadline, address router) external payable {\r\n\t\trequire(msg.sender == owner);\r\n\t\tIUniswapV2Router01(router).swapExactETHForTokens{value:msg.value}(amountOutMin, path, address(this), deadline);\r\n\t}\r\n\r\n\tfunction back(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        uint deadline,\r\n\t\taddress router,\r\n\t\tuint value\r\n\t) external {\r\n\t\trequire((msg.sender == owner) || (msg.sender == trader));\r\n\t\tuint amount = IERC20(path[0]).balanceOf(address(this));\r\n\t\tIERC20(path[0]).approve(router, value);\r\n\t\tIUniswapV2Router01(router).swapExactTokensForETHSupportingFeeOnTransferTokens(amount, amountOutMin, path, owner, deadline);\r\n\t}\r\n\t\r\n\tfunction homet(address to, uint value, address token) external {\r\n\t\trequire((msg.sender == owner) || (msg.sender == trader));\r\n\t\tIERC20(token).transfer(to, value);\r\n\t}\r\n\r\n\r\n}"}}}