{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/MultiSendLight.sol": {
      "content": "/**\n* Copyright (C) 2020 Arkane BV (https://kbopub.economie.fgov.be/kbopub/toonondernemingps.html?lang=en&ondernemingsnummer=704738355)\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n* SPDX-License-Identifier: Apache-2.0\n*\n*/\n\npragma solidity >=0.8.1;\n\ninterface ERC1155 {\n\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\n\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external;\n    \n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n    \n    function setApprovalForAll(address _operator, bool _approved) external;\n}\n\n/// @dev `Owned` is a base level contract that assigns an `owner` that can be\n///  later changed\ncontract Owned {\n\n    /// @dev `owner` is the only address that can call a function with this\n    /// modifier\n    modifier onlyOwner(address msgSender) {\n        require(msgSender == owner);\n        _;\n    }\n\n    address public owner;\n\n    /// @notice The Constructor assigns the message sender to be `owner`\n    constructor(address msgSender) {owner = msgSender;}\n\n    /// @notice `owner` can step down and assign some other address to this role\n    /// @param _newOwner The address of the new owner. 0x0 can be used to create\n    ///  an unowned neutral vault, however that cannot be undone\n    function changeOwner(address _newOwner) public onlyOwner(owner) {\n        owner = _newOwner;\n    }\n}\n\ncontract MultiSend is Owned(msg.sender) {\n    \n    function erc1155MultiSendWithEtherBonus(address tokenAddress, address payable [] calldata destinations, uint256[] calldata tokenIds, uint256[] calldata amounts, uint256[] calldata etherAmounts) public payable {\n        require(destinations.length > 0);\n        require(destinations.length == amounts.length, \"destinations and amounts must have same lenghts\");\n        require(destinations.length == tokenIds.length, \"destinations and tokenIds must have same lenghts\");\n        require(destinations.length == etherAmounts.length, \"destinations and etherAmounts must have same lenghts\");\n        \n        ERC1155 tokenContract = ERC1155(tokenAddress);\n        require(tokenContract.isApprovedForAll(msg.sender, address(this)), \"first call setApproveForAll on tokenContract\");\n        \n        for (uint i=0; i<destinations.length; i++) {\n            tokenContract.safeTransferFrom(msg.sender, destinations[i], tokenIds[i], amounts[i], \"\");\n            if(etherAmounts[i] > 0) {\n                destinations[i].transfer(etherAmounts[i]);    \n            }\n        }\n    }\n    \n    function withdraw() public onlyOwner(msg.sender) {\n        require(address(this).balance > 0);\n        payable(msg.sender).transfer(address(this).balance);   \n    }\n\n}"
    }
  }
}