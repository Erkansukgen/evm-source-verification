{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Main.sol": {
      "content": "pragma solidity ^0.6.8;\npragma experimental ABIEncoderV2;\n\n//SPDX-License-Identifier: BSD-3-Clause\n//Copyright (c) 2020 Joshua Herron. All rights reserved.\n\nstruct Post {\n    address author;\n    string title;\n    string content;\n}\n\nstruct Comment {\n    address author;\n    string content;\n}\n\ncontract API {\n    Post[] public posts;\n    mapping (address => uint256[]) public userposts;\n    mapping (uint256 => Comment[]) public postcomments;\n    \n    function newPost(string memory title, string memory content) public returns (uint256 postid) {\n        posts.push(Post (msg.sender, title, content));\n        userposts[msg.sender].push(posts.length-1);\n        return (posts.length-1);\n    }\n    \n    function getPost(uint256 postid) public view returns (address author, string memory title, string memory content, address[] memory, string[] memory) {\n        author = posts[postid].author;\n        title = posts[postid].title;\n        content = posts[postid].content;\n        Comment[] memory comments = postcomments[postid];\n        uint256 commlength = comments.length;\n        address[] memory commentauthors = new address[](commlength);\n        string[] memory commentcontents = new string[](commlength);\n        for (uint256 i = 0; i < comments.length; i++) {\n            commentauthors[i] = comments[i].author;\n            commentcontents[i] = comments[i].content;\n        }\n        return (author, title, content, commentauthors, commentcontents);\n    }\n    \n    function newComment(uint256 postid, string memory content) public returns (bool done) {\n        postcomments[postid].push(Comment (msg.sender, content));\n        return (true);\n    }\n    \n    function getPosts(uint256 offset) public view returns (uint256[] memory, address[] memory, string[] memory, string[] memory) {\n        if (posts.length > 0) {\n            uint256 arrlength;\n            if (posts.length >= 20) {\n                arrlength = 20;\n            } else {\n                arrlength = posts.length;\n            }\n            uint256[] memory postids = new uint256[](arrlength);\n            address[] memory authors = new address[](arrlength);\n            string[] memory titles = new string[](arrlength);\n            string[] memory contents = new string[](arrlength);\n            uint256 length = posts.length-offset-1;\n            uint256 min;\n            if (length >= 19) {\n                min = length-19;\n            } else {\n                min = 0;\n            }\n            for (uint256 i = min; i <= length; i++) {\n                postids[length-i] = i;\n                authors[length-i] = posts[i].author;\n                titles[length-i] = posts[i].title;\n                contents[length-i] = posts[i].content;\n            }\n            return (postids, authors, titles, contents);\n        } else {\n            uint256[] memory postids = new uint256[](0);\n            address[] memory authors = new address[](0);\n            string[] memory titles = new string[](0);\n            string[] memory contents = new string[](0);\n            return (postids, authors, titles, contents);\n        }\n    }\n    \n    function getUserPosts(address user) public view returns (uint256[] memory, string[] memory, string[] memory) {\n        uint256 userpostcount = userposts[user].length;\n        uint256[] memory postids = new uint256[](userpostcount);\n        string[] memory titles = new string[](userpostcount);\n        string[] memory contents = new string[](userpostcount);\n        postids = userposts[user];\n        for (uint256 i = 0; i < postids.length; i++) {\n            titles[i] = posts[postids[i]].title;\n            contents[i] = posts[postids[i]].content;\n        }\n        return (postids, titles, contents);\n    }\n}"
    }
  }
}