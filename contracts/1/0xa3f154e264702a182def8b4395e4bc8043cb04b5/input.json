{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/Free2.sol": {
      "content": "// SPDX-License-Identifier: CC0\n\n\n/*\n /$$$$$$$$ /$$$$$$$  /$$$$$$$$ /$$$$$$$$        /$$$$$$\n| $$_____/| $$__  $$| $$_____/| $$_____/       /$$__  $$\n| $$      | $$  \\ $$| $$      | $$            |__/  \\ $$\n| $$$$$   | $$$$$$$/| $$$$$   | $$$$$           /$$$$$$/\n| $$__/   | $$__  $$| $$__/   | $$__/          /$$____/\n| $$      | $$  \\ $$| $$      | $$            | $$\n| $$      | $$  | $$| $$$$$$$$| $$$$$$$$      | $$$$$$$$\n|__/      |__/  |__/|________/|________/      |________/\n\n\n\n /$$\n| $$\n| $$$$$$$  /$$   /$$\n| $$__  $$| $$  | $$\n| $$  \\ $$| $$  | $$\n| $$  | $$| $$  | $$\n| $$$$$$$/|  $$$$$$$\n|_______/  \\____  $$\n           /$$  | $$\n          |  $$$$$$/\n           \\______/\n  /$$$$$$  /$$$$$$$$ /$$$$$$$$ /$$    /$$ /$$$$$$ /$$$$$$$$ /$$$$$$$\n /$$__  $$|__  $$__/| $$_____/| $$   | $$|_  $$_/| $$_____/| $$__  $$\n| $$  \\__/   | $$   | $$      | $$   | $$  | $$  | $$      | $$  \\ $$\n|  $$$$$$    | $$   | $$$$$   |  $$ / $$/  | $$  | $$$$$   | $$$$$$$/\n \\____  $$   | $$   | $$__/    \\  $$ $$/   | $$  | $$__/   | $$____/\n /$$  \\ $$   | $$   | $$        \\  $$$/    | $$  | $$      | $$\n|  $$$$$$/   | $$   | $$$$$$$$   \\  $/    /$$$$$$| $$$$$$$$| $$\n \\______/    |__/   |________/    \\_/    |______/|________/|__/\n\n\nCC0 2021\n*/\n\n\npragma solidity ^0.8.11;\n\n \ninterface IFree {\n  function mint(uint256 collectionId, address to) external;\n  function ownerOf(uint256 tokenId) external returns (address owner);\n  function tokenIdToCollectionId(uint256 tokenId) external returns (uint256 collectionId);\n  function appendAttributeToToken(uint256 tokenId, string memory attrKey, string memory attrValue) external;\n}\n\n// 0x4f857a92269dc9b42edb7fab491679decb46e848\ninterface INVCMinter {\n  function usedIOUs(uint256 iouId) external returns (bool used);\n}\n\ninterface IIOU {\n  function ownerOf(uint256 tokenId) external returns (address owner);\n}\n\ninterface IFree1 {\n  function free0TokenIdUsed(uint256 tokenId) external returns (bool used);\n}\n\ncontract Free2 {\n  IFree public immutable free;\n  IFree1 public immutable free1Contract;\n  INVCMinter public immutable nvcMinter;\n  IIOU public immutable iouContract;\n\n  mapping (uint256 => bool) public usedIOUs;\n  mapping(uint256 => bool) public free0TokenIdUsed;\n\n  constructor(address freeAddr, address free1Addr, address iouAddr, address nvcMinterAddr) {\n    free = IFree(freeAddr);\n    free1Contract = IFree1(free1Addr);\n    nvcMinter = INVCMinter(nvcMinterAddr);\n    iouContract = IIOU(iouAddr);\n  }\n\n  function claim(uint256 iouId, uint256 free0TokenId) public {\n    require(iouContract.ownerOf(iouId) == msg.sender, 'You must be the owner of this IOU');\n    require(nvcMinter.usedIOUs(iouId), 'You must use an IOU that has minted a NVC');\n    require(!usedIOUs[iouId], 'This IOU has already minted a Free2');\n\n    require(free.ownerOf(free0TokenId) == msg.sender, 'You must be the owner of this Free0');\n    require(free.tokenIdToCollectionId(free0TokenId) == 0, 'Invalid Free0');\n    require(\n      free1Contract.free0TokenIdUsed(free0TokenId) == true,\n      'You must use a Free0 that has already minted a Free1'\n\n    );\n    require(!free0TokenIdUsed[free0TokenId], 'This Free0 has already been used to mint a Free2');\n    free.appendAttributeToToken(free0TokenId, 'Used For Free2 Mint', 'true');\n\n\n    usedIOUs[iouId] = true;\n    free0TokenIdUsed[free0TokenId] = true;\n\n    free.mint(2, msg.sender);\n  }\n}\n\n"
    }
  }
}