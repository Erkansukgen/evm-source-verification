{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"SigRelayer.sol":{"content":"pragma solidity ^0.8.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n// SigRelayer for https://uni.vote\r\ncontract SigRelayer {\r\n\tbytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\tbytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\tbytes32 public constant BALLOT_TYPEHASH = keccak256(\"Ballot(uint256 proposalId,uint8 support)\");\r\n\tuint256 public constant CHAIN_ID = 1; /// Change to appropriate chain before deployment\r\n\t\r\n\taddress public immutable owner;\r\n\taddress public immutable tokenAddress;\r\n\taddress public governorAddress;\r\n\t\r\n\r\n\tconstructor(address governorAddress_, address tokenAddress_) public {\r\n\t\tgovernorAddress = governorAddress_;\r\n\t\ttokenAddress = tokenAddress_;\r\n\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tfunction setGovernor(address governorAddress_) public  {\r\n\t\trequire(msg.sender == owner);\r\n\r\n\t\tgovernorAddress = governorAddress_;\t\r\n\t}\r\n\r\n\tfunction relayBySigs(DelegationSig[] memory s1, VoteSig[] memory s2) public {\r\n\t\tfor (uint i = 0; i < s1.length; i++) {\r\n\t\t\tDelegationSig memory sig = s1[i];\r\n\t\t\ttokenAddress.call(abi.encodeWithSignature(\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\", sig.delegatee, sig.nonce, sig.expiry, sig.v, sig.r, sig.s));\r\n\t\t}\r\n\t\tfor (uint i = 0; i < s2.length; i++) {\r\n\t\t\tVoteSig memory sig = s2[i];\r\n\t\t\tgovernorAddress.call(abi.encodeWithSignature(\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\", sig.proposalId,sig.support,sig.v,sig.r,sig.s));\r\n\t\t}\r\n\t}\r\n\r\n  \tstruct DelegationSig {\r\n\t    address delegatee;\r\n\t    uint nonce;\r\n\t    uint expiry;\r\n\t    uint8 v;\r\n\t    bytes32 r;\r\n\t    bytes32 s;\r\n  \t}\r\n  \tstruct VoteSig {\r\n  \t\tuint proposalId;\r\n  \t\tuint8 support;\r\n  \t\tuint8 v;\r\n  \t\tbytes32 r;\r\n  \t\tbytes32 s;\r\n  \t}\r\n}"}}}