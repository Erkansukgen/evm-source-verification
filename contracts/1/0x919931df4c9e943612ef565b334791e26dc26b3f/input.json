{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/qualification.sol": {
      "content": "// File: contracts/IQLF.sol\n\n/**\n * @author          Yisi Liu\n * @contact         yisiliu@gmail.com\n * @author_time     01/06/2021\n**/\n\npragma solidity >= 0.6.0;\n\ninterface IQLF {\n    /**\n     * @dev Returns if the given address is qualified, implemented on demand.\n     */\n    function ifQualified (address testee) external view returns (bool);\n\n    /**\n     * @dev Logs if the given address is qualified, implemented on demand.\n     */\n    function logQualified (address testee) external;\n\n    /**\n     * @dev Emit when `ifQualified` is called to decide if the given `address`\n     * is `qualified` according to the preset rule by the contract creator and \n     * the current block `number` and the current block `timestamp`.\n     */\n    event Qualification(bool qualified, uint256 number, uint256 timestamp);\n}\n\n// File: contracts/qualification.sol\n\n/**\n * @author          Yisi Liu\n * @contact         yisiliu@gmail.com\n * @author_time     01/06/2021\n**/\n\npragma solidity >= 0.6.0;\n\n\ncontract QLF is IQLF {\n    string private name;\n    uint256 private creation_time;\n\n    constructor (string memory _name) public {\n        name = _name;\n        creation_time = block.timestamp;\n    }\n\n    function get_name() public view returns (string memory) {\n        return name;\n    }\n\n    function get_creation_time() public view returns (uint256) {\n        return creation_time;\n    }\n\n    function ifQualified(address testee) public view override returns (bool) {\n        bool qualified = true;\n        return qualified;\n    } \n\n    function logQualified(address testee) public override {\n        bool qualified = true;\n        emit Qualification(qualified, block.number, block.timestamp);\n    } \n}\n"
    }
  }
}