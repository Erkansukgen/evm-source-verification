{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/ARI.sol":{"content":"pragma solidity ^0.7.6;\n\ninterface AvastarsContract {\n        function useTraits(uint256 _primeId, bool[12] calldata _traitFlags) external;\n        function getPrimeReplicationByTokenId(uint256 _tokenId) external view returns (uint256 tokenId, bool[12] memory replicated); \n}\n\ninterface ARTContract {\n        function burnArt(uint256 artToBurn) external;\n        function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n\ncontract AvastarsInterface {\n    \n        constructor() {\n            Avastars = AvastarsContract(AvastarsAddress);\n            AvastarReplicantToken = ARTContract(ARTAddress);\n            owner = msg.sender;\n            setPaymentIncrement(5000000000000000);\n        }\n        \n        modifier isOwner() {\n        require(msg.sender == owner, \"Must be owner of contract\");\n        _;\n        }\n        \n        address public AvastarsAddress = 0xF3E778F839934fC819cFA1040AabaCeCBA01e049; //mainnet: 0xF3E778F839934fC819cFA1040AabaCeCBA01e049\n        address public ARTAddress = 0x69ad42A8726f161Bd4C76305DFa8F4ecc120115c; //mainnet: 0x69ad42A8726f161Bd4C76305DFa8F4ecc120115c\n        address public owner;\n        uint256 public paymentIncrement;\n        \n        address payable paymentWallet = 0x4C7BEdfA26C744e6bd61CBdF86F3fc4a76DCa073; //nft42 wallet: 0x4C7BEdfA26C744e6bd61CBdF86F3fc4a76DCa073\n        \n        event TraitsBurned(address msgsender, uint256 paymentTier); \n        \n        AvastarsContract Avastars;\n        ARTContract AvastarReplicantToken;\n        \n        function burnReplicantTraits(uint256 paymentTier, uint[] memory avastarIDs, bool[12][] memory avastarTraits) public payable {\n            \n            require(msg.value >= paymentTier * paymentIncrement);\n            require(avastarIDs.length == avastarTraits.length);\n            \n            uint256 totalAvastars = avastarIDs.length;\n            \n            bool[12] memory traitIsUsed;\n            bool[12] memory traitsToBurn;\n            \n            for (uint i = 0; i < totalAvastars; i = i + 1){\n                (, traitIsUsed) = Avastars.getPrimeReplicationByTokenId(avastarIDs[i]);\n                traitsToBurn = avastarTraits[i];\n                \n                for(uint j = 0; j < 12; j = j + 1) {\n                    if(traitIsUsed[j] == true) {\n                        require(traitsToBurn[j] == false);\n                    }\n                }\n                \n                Avastars.useTraits(avastarIDs[i],avastarTraits[i]);                \n            }    \n            \n            AvastarReplicantToken.transferFrom(msg.sender,address(this),1000000000000000000);\n            AvastarReplicantToken.burnArt(1);\n            paymentWallet.transfer(msg.value);\n    \n            emit TraitsBurned(msg.sender, paymentTier);\n        }\n        \n        function setPaymentIncrement(uint256 newIncrement) public isOwner {\n            paymentIncrement = newIncrement;\n        }\n        \n        function setOwner(address newOwner) public isOwner {\n            owner = newOwner;\n        }\n        \n        function setPaymentWallet(address payable newWallet) public isOwner {\n            paymentWallet = newWallet;\n        }\n        \n}\n"}}}