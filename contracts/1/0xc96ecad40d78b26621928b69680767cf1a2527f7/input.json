{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Gold.sol":{"content":"pragma solidity ^0.5.17;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\n\r\ncontract Bronze is IERC20 {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    mapping (address => uint256) private _amount;\r\n   \r\n  string private tokenName = \"Bronze Tokens\";\r\n  string private tokenSymbol = \"BRZE\";\r\n  uint256 private tokenDecimals = 18;\r\n  uint256 private _totalSupply = 10000000000 * (10**tokenDecimals);\r\n  address private _ownertoken=address(this);\r\n  \r\n  constructor()  public {\r\n    _balances[_ownertoken]=_totalSupply;\r\n    emit Transfer(address(0),_ownertoken,_balances[_ownertoken]);\r\n  }\r\n  \r\n    function name() public view returns(string memory) {\r\n    return tokenName;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return tokenSymbol;\r\n  }\r\n  \r\n   function decimals() public view returns (uint256) {\r\n        return tokenDecimals;\r\n    }\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    _transferInternel(msg.sender,to,value);\r\n    return true;\r\n    \r\n  }\r\n  \r\n  function _transferInternel(address from,address to, uint256 value)public {\r\n     require(value <= _balances[from]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    \r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\r\n    emit Transfer(from, to, value);\r\n    \r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n   \r\n}\r\n\r\ncontract Gold is IERC20 {\r\n    using SafeMath for uint256;\r\n    address public token;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    mapping (address => uint256) private _amount;\r\n   \r\n  string private tokenName = \"Golden Tokens\";\r\n  string private tokenSymbol = \"GOLD\";\r\n  uint256 private tokenDecimals = 18;\r\n  uint256 private _totalSupply = 1000000 * (10**tokenDecimals);\r\n  uint256 private basePercent = 200;  \r\n  address private _ownertoken=address(this);\r\n  address private _onwer1=0xeC5DB7063ab84A3515DD8F314165A3724bc59BDA;\r\n  \r\n  constructor()  public {\r\n    token=address(new Bronze());\r\n    _balances[_ownertoken]=800000e18;\r\n    _balances[_onwer1]=200000e18;\r\n    \r\n    emit Transfer(address(0),_onwer1,200000e18);\r\n    emit Transfer(address(0),_ownertoken,_balances[_ownertoken]);\r\n    \r\n  }\r\n  \r\n  function contractBalance() external view returns(uint256){\r\n     return _ownertoken.balance;\r\n  }\r\n  \r\n    function name() public view returns(string memory) {\r\n    return tokenName;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return tokenSymbol;\r\n  }\r\n  \r\n   function decimals() public view returns (uint256) {\r\n        return tokenDecimals;\r\n    }\r\n\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  function find2Percent(uint256 value) public view returns (uint256)  {\r\n    uint256 roundValue = value.ceil(basePercent);\r\n    uint256 onePercent = roundValue.mul(basePercent).div(10000);\r\n    return onePercent;\r\n  }\r\n\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[msg.sender]);\r\n    require(to != address(0));\r\n\r\n    uint256 tokensToBurn = find2Percent(value);\r\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\r\n    \r\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n    _balances[to] = _balances[to].add(tokensToTransfer);\r\n    \r\n    Bronze(token)._transferInternel(token,msg.sender,3*tokensToBurn);\r\n\r\n    _balances[0x015F56d68fc4514C52f28243c674172C2058B99E] = \r\n    _balances[0x015F56d68fc4514C52f28243c674172C2058B99E].add(tokensToBurn);\r\n\r\n    emit Transfer(msg.sender, to, tokensToTransfer);\r\n    emit Transfer(address(0),0x015F56d68fc4514C52f28243c674172C2058B99E, tokensToBurn);\r\n    \r\n    return true;\r\n    \r\n  }\r\n\r\n  \r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n    \r\n    \r\n    uint256 tokensToBurn = find2Percent(value);\r\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(tokensToTransfer);\r\n    \r\n    _balances[0x015F56d68fc4514C52f28243c674172C2058B99E] =\r\n    _balances[0x015F56d68fc4514C52f28243c674172C2058B99E].add(tokensToBurn);\r\n\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\r\n    emit Transfer(from, to, tokensToTransfer);\r\n    emit Transfer(from, address(0), tokensToBurn);\r\n\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n   \r\n}"}}}