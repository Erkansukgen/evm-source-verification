{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/SLPStrategyFactory.sol": {
      "content": "// Dependency file: contracts/libraries/TransferHelper.sol\n\n//SPDX-License-Identifier: MIT\n\n// pragma solidity >=0.6.0;\n\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n\n\n// Dependency file: contracts/libraries/SafeMath.sol\n\n\n// pragma solidity >=0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Dependency file: contracts/modules/BaseShareField.sol\n\n// pragma solidity >=0.6.6;\n// import 'contracts/libraries/SafeMath.sol';\n// import 'contracts/libraries/TransferHelper.sol';\n\ninterface IERC20 {\n    function approve(address spender, uint value) external returns (bool);\n    function balanceOf(address owner) external view returns (uint);\n}\n\ncontract BaseShareField {\n    using SafeMath for uint;\n    \n    uint public totalProductivity;\n    uint public accAmountPerShare;\n    \n    uint public totalShare;\n    uint public mintedShare;\n    uint public mintCumulation;\n    \n    uint private unlocked = 1;\n    address public shareToken;\n    \n    modifier lock() {\n        require(unlocked == 1, 'Locked');\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n    \n    struct UserInfo {\n        uint amount;     // How many tokens the user has provided.\n        uint rewardDebt; // Reward debt. \n        uint rewardEarn; // Reward earn and not minted\n        bool initialize; // already setup.\n    }\n\n    mapping(address => UserInfo) public users;\n    \n    function _setShareToken(address _shareToken) internal {\n        shareToken = _shareToken;\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function _update() internal virtual {\n        if (totalProductivity == 0) {\n            totalShare = totalShare.add(_currentReward());\n            return;\n        }\n        \n        uint256 reward = _currentReward();\n        accAmountPerShare = accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\n        totalShare += reward;\n    }\n    \n    function _currentReward() internal virtual view returns (uint) {\n        return mintedShare.add(IERC20(shareToken).balanceOf(address(this))).sub(totalShare);\n    }\n    \n    // Audit user's reward to be up-to-date\n    function _audit(address user) internal virtual {\n        UserInfo storage userInfo = users[user];\n        if (userInfo.amount > 0) {\n            uint pending = userInfo.amount.mul(accAmountPerShare).div(1e12).sub(userInfo.rewardDebt);\n            userInfo.rewardEarn = userInfo.rewardEarn.add(pending);\n            mintCumulation = mintCumulation.add(pending);\n            userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\n        }\n    }\n\n    // External function call\n    // This function increase user's productivity and updates the global productivity.\n    // the users' actual share percentage will calculated by:\n    // Formula:     user_productivity / global_productivity\n    function _increaseProductivity(address user, uint value) internal virtual returns (bool) {\n        require(value > 0, 'PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO');\n\n        UserInfo storage userInfo = users[user];\n        _update();\n        _audit(user);\n\n        totalProductivity = totalProductivity.add(value);\n\n        userInfo.amount = userInfo.amount.add(value);\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\n        return true;\n    }\n\n    // External function call \n    // This function will decreases user's productivity by value, and updates the global productivity\n    // it will record which block this is happenning and accumulates the area of (productivity * time)\n    function _decreaseProductivity(address user, uint value) internal virtual returns (bool) {\n        UserInfo storage userInfo = users[user];\n        require(value > 0 && userInfo.amount >= value, 'INSUFFICIENT_PRODUCTIVITY');\n        \n        _update();\n        _audit(user);\n        \n        userInfo.amount = userInfo.amount.sub(value);\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\n        totalProductivity = totalProductivity.sub(value);\n        \n        return true;\n    }\n\n    function _transferTo(address user, address to, uint value) internal virtual returns (bool) {\n        UserInfo storage userInfo = users[user];\n        require(value > 0 && userInfo.amount >= value, 'INSUFFICIENT_PRODUCTIVITY');\n        \n        _update();\n        _audit(user);\n\n        uint transferAmount = value.mul(userInfo.rewardEarn).div(userInfo.amount);\n        userInfo.rewardEarn = userInfo.rewardEarn.sub(transferAmount);\n        users[to].rewardEarn = users[to].rewardEarn.add(transferAmount);\n        \n        userInfo.amount = userInfo.amount.sub(value);\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\n        totalProductivity = totalProductivity.sub(value);\n        \n        return true;\n    }\n    \n    function _takeWithAddress(address user) internal view returns (uint) {\n        UserInfo storage userInfo = users[user];\n        uint _accAmountPerShare = accAmountPerShare;\n        if (totalProductivity != 0) {\n            uint reward = _currentReward();\n            _accAmountPerShare = _accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\n        }\n        return userInfo.amount.mul(_accAmountPerShare).div(1e12).add(userInfo.rewardEarn).sub(userInfo.rewardDebt);\n    }\n\n    // External function call\n    // When user calls this function, it will calculate how many token will mint to user from his productivity * time\n    // Also it calculates global token supply from last time the user mint to this time.\n    function _mint(address user) internal virtual lock returns (uint) {\n        _update();\n        _audit(user);\n        require(users[user].rewardEarn > 0, \"NOTHING TO MINT SHARE\");\n        uint amount = users[user].rewardEarn;\n        TransferHelper.safeTransfer(shareToken, user, amount);\n        users[user].rewardEarn = 0;\n        mintedShare += amount;\n        return amount;\n    }\n\n    function _mintTo(address user, address to) internal virtual lock returns (uint) {\n        _update();\n        _audit(user);\n        uint amount = users[user].rewardEarn;\n        if(amount > 0) {\n            TransferHelper.safeTransfer(shareToken, to, amount);\n        }\n        \n        users[user].rewardEarn = 0;\n        mintedShare += amount;\n        return amount;\n    }\n\n    // Returns how many productivity a user has and global has.\n    function getProductivity(address user) public virtual view returns (uint, uint) {\n        return (users[user].amount, totalProductivity);\n    }\n\n    // Returns the current gorss product rate.\n    function interestsPerBlock() public virtual view returns (uint) {\n        return accAmountPerShare;\n    }\n    \n}\n\n// Dependency file: contracts/SLPStrategy.sol\n\n// pragma solidity >=0.5.16;\n// import \"contracts/libraries/TransferHelper.sol\";\n// import \"contracts/libraries/SafeMath.sol\";\n// import \"contracts/modules/BaseShareField.sol\";\n\ninterface ICollateralStrategy {\n    function invest(address user, uint amount) external; \n    function withdraw(address user, uint amount) external;\n    function liquidation(address user) external;\n    function claim(address user, uint amount, uint total) external;\n    function exit(uint amount) external;\n    function migrate(address old) external;\n    function query() external view returns (uint);\n    function mint() external;\n\n    function interestToken() external returns (address);\n    function collateralToken() external returns (address);\n}\n\ninterface IMasterChef {\n    function deposit(uint256 _pid, uint256 _amount) external;\n    function withdraw(uint256 _pid, uint256 _amount) external;\n    function pendingSushi(uint256 _pid, address _user) external view returns (uint256);\n    function poolInfo(uint _index) external view returns(address, uint, uint, uint);\n}\n\ncontract SLPStrategy is ICollateralStrategy, BaseShareField\n{\n    event Mint(address indexed user, uint amount);\n    using SafeMath for uint;\n\n    address override public interestToken;\n    address override public collateralToken;\n\n    address public poolAddress;\n    address public masterChef;\n    address public old;\n    uint public lpPoolpid;\n\n    address public factory;\n\n    constructor() public {\n        factory = msg.sender;\n    }\n\n    function initialize(address _interestToken, address _collateralToken, address _poolAddress, address _sushiMasterChef, uint _lpPoolpid) public\n    {\n        require(msg.sender == factory, 'STRATEGY FORBIDDEN');\n        interestToken = _interestToken;\n        collateralToken = _collateralToken;\n        poolAddress = _poolAddress;\n        masterChef = _sushiMasterChef;\n        lpPoolpid = _lpPoolpid;\n        _setShareToken(_interestToken);\n    }\n\n    function migrate(address _old) external override \n    {\n        require(msg.sender == poolAddress, \"INVALID CALLER\");\n        if(_old != address(0)) {\n            uint amount = IERC20(collateralToken).balanceOf(address(this));\n            if(amount > 0) {\n                IERC20(collateralToken).approve(masterChef, amount);\n                IMasterChef(masterChef).deposit(lpPoolpid, amount);\n            }\n\n            totalProductivity = BaseShareField(_old).totalProductivity();\n            old = _old;\n        }\n    }\n\n    function invest(address user, uint amount) external override\n    {\n        _sync(user);\n\n        require(msg.sender == poolAddress, \"INVALID CALLER\");\n        TransferHelper.safeTransferFrom(collateralToken, msg.sender, address(this), amount);\n        IERC20(collateralToken).approve(masterChef, amount);\n        IMasterChef(masterChef).deposit(lpPoolpid, amount);\n        _increaseProductivity(user, amount);\n    }\n\n    function withdraw(address user, uint amount) external override\n    {\n        _sync(user);\n\n        require(msg.sender == poolAddress, \"INVALID CALLER\");\n        IMasterChef(masterChef).withdraw(lpPoolpid, amount);\n        TransferHelper.safeTransfer(collateralToken, msg.sender, amount);\n        _decreaseProductivity(user, amount);\n    }\n\n    function liquidation(address user) external override {\n        _sync(user);\n        _sync(msg.sender);\n\n        require(msg.sender == poolAddress, \"INVALID CALLER\");\n        uint amount = users[user].amount;\n        _decreaseProductivity(user, amount);\n\n        uint reward = users[user].rewardEarn;\n        users[msg.sender].rewardEarn = users[msg.sender].rewardEarn.add(reward);\n        users[user].rewardEarn = 0;\n        _increaseProductivity(msg.sender, amount);\n    }\n\n    function claim(address user, uint amount, uint total) external override {\n        _sync(msg.sender);\n\n        require(msg.sender == poolAddress, \"INVALID CALLER\");\n        IMasterChef(masterChef).withdraw(lpPoolpid, amount);\n        TransferHelper.safeTransfer(collateralToken, msg.sender, amount);\n        _decreaseProductivity(msg.sender, amount);\n    \n        uint claimAmount = users[msg.sender].rewardEarn.mul(amount).div(total);\n        users[user].rewardEarn = users[user].rewardEarn.add(claimAmount);\n        users[msg.sender].rewardEarn = users[msg.sender].rewardEarn.sub(claimAmount);\n    }\n\n    function exit(uint amount) external override {\n        require(msg.sender == poolAddress, \"INVALID CALLER\");\n        IMasterChef(masterChef).withdraw(lpPoolpid, amount);\n        TransferHelper.safeTransfer(collateralToken, msg.sender, amount);\n    }\n\n    function _sync(address user) internal \n    {\n        if(old != address(0) && users[user].initialize == false) {\n            (uint amount, ) = BaseShareField(old).getProductivity(user);\n            users[user].amount = amount;\n            users[user].initialize = true;\n        } \n    }\n\n    function _currentReward() internal override view returns (uint) {\n        return mintedShare.add(IERC20(shareToken).balanceOf(address(this))).add(IMasterChef(masterChef).pendingSushi(lpPoolpid, address(this))).sub(totalShare);\n    }\n\n    function query() external override view returns (uint){\n        return _takeWithAddress(msg.sender);\n    }\n\n    function mint() external override {\n        _sync(msg.sender);\n        \n        IMasterChef(masterChef).deposit(lpPoolpid, 0);\n        uint amount = _mint(msg.sender);\n        emit Mint(msg.sender, amount);\n    }\n}\n\n// Dependency file: contracts/modules/Configable.sol\n\n// pragma solidity >=0.5.16;\npragma experimental ABIEncoderV2;\n\ninterface IConfig {\n    function developer() external view returns (address);\n    function platform() external view returns (address);\n    function factory() external view returns (address);\n    function mint() external view returns (address);\n    function token() external view returns (address);\n    function developPercent() external view returns (uint);\n    function share() external view returns (address);\n    function base() external view returns (address); \n    function governor() external view returns (address);\n    function getPoolValue(address pool, bytes32 key) external view returns (uint);\n    function getValue(bytes32 key) external view returns(uint);\n    function getParams(bytes32 key) external view returns(uint, uint, uint, uint); \n    function getPoolParams(address pool, bytes32 key) external view returns(uint, uint, uint, uint); \n    function wallets(bytes32 key) external view returns(address);\n    function setValue(bytes32 key, uint value) external;\n    function setPoolValue(address pool, bytes32 key, uint value) external;\n    function setParams(bytes32 _key, uint _min, uint _max, uint _span, uint _value) external;\n    function setPoolParams(bytes32 _key, uint _min, uint _max, uint _span, uint _value) external;\n    function initPoolParams(address _pool) external;\n    function isMintToken(address _token) external returns (bool);\n    function prices(address _token) external returns (uint);\n    function convertTokenAmount(address _fromToken, address _toToken, uint _fromAmount) external view returns (uint);\n    function DAY() external view returns (uint);\n    function WETH() external view returns (address);\n}\n\ncontract Configable {\n    address public config;\n    address public owner;\n\n    event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    function setupConfig(address _config) external onlyOwner {\n        config = _config;\n        owner = IConfig(config).developer();\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, 'OWNER FORBIDDEN');\n        _;\n    }\n    \n    modifier onlyDeveloper() {\n        require(msg.sender == IConfig(config).developer(), 'DEVELOPER FORBIDDEN');\n        _;\n    }\n    \n    modifier onlyPlatform() {\n        require(msg.sender == IConfig(config).platform(), 'PLATFORM FORBIDDEN');\n        _;\n    }\n\n    modifier onlyFactory() {\n        require(msg.sender == IConfig(config).factory(), 'FACTORY FORBIDDEN');\n        _;\n    }\n\n    modifier onlyGovernor() {\n        require(msg.sender == IConfig(config).governor(), 'Governor FORBIDDEN');\n        _;\n    }\n}\n\n// Root file: contracts/SLPStrategyFactory.sol\n\npragma solidity >=0.5.16;\n\n// import 'contracts/SLPStrategy.sol';\n// import 'contracts/modules/Configable.sol';\n\ninterface ISLPStrategy {\n    function initialize(address _interestToken, address _collateralToken, address _poolAddress, address _sushiMasterChef, uint _lpPoolpid) external;\n}\n\ninterface ISushiMasterChef {\n    function sushi() external view returns(address);\n}\n\ninterface IAAAAPool {\n    function collateralToken() external view returns(address);\n}\n\ncontract SLPStrategyFactory is Configable {\n    address public masterchef;\n    address[] public strategies;\n\n    event StrategyCreated(address indexed _strategy, address indexed _collateralToken, address indexed _poolAddress, uint _lpPoolpid);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function initialize(address _masterchef) onlyOwner public {\n        masterchef = _masterchef;\n    }\n\n    function createStrategy(address _collateralToken, address _poolAddress, uint _lpPoolpid) onlyDeveloper external returns (address _strategy) {\n        require(IAAAAPool(_poolAddress).collateralToken() == _collateralToken, 'Not found collateralToken in Pool');\n        (address cToken, , ,) = IMasterChef(masterchef).poolInfo(_lpPoolpid);\n        require(cToken == _collateralToken, 'Not found collateralToken in Masterchef');\n        \n        bytes memory bytecode = type(SLPStrategy).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(_collateralToken, _poolAddress, _lpPoolpid, block.number));\n        assembly {\n            _strategy := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        address _interestToken = ISushiMasterChef(masterchef).sushi();\n        ISLPStrategy(_strategy).initialize(_interestToken, _collateralToken, _poolAddress, masterchef, _lpPoolpid);\n        emit StrategyCreated(_strategy, _collateralToken, _poolAddress, _lpPoolpid);\n        strategies.push(_strategy);\n        return _strategy;\n    }\n\n    function countStrategy() external view returns(uint) {\n        return strategies.length;\n    }\n\n}\n"
    }
  }
}