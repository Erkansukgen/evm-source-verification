{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"arbitrage-uniswap-sushiswap/contracts/Arbitrage.sol":{"content":"pragma solidity ^0.6.6;\n\nimport './UniswapV2Library.sol';\nimport './interfaces/IUniswapV2Router02.sol';\nimport './interfaces/IUniswapV2Pair.sol';\nimport './interfaces/IUniswapV2Factory.sol';\nimport './interfaces/IERC20.sol';\nimport './safemath.sol';\n\ncontract Arbitrage {\n  address factory;\n  IUniswapV2Router02 sushiRouter;\n  IUniswapV2Router02 uniRouter;\n  \n  address _factory; //=0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n  address _uniRouter; //=0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n  address _sushiRouter; //=0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506;\n  address _sushifactory; //= 0xc35DADB65012eC5796536bD9864eD8773aBc74C4;\n  address _DAI;\n  \n  address immutable admin;\n  event fback(address _sender, uint _amount0, uint _amount1);\n  event sentprofit(uint howmuch);\n  using SafeMath for uint;\n  \n  constructor() public {\n    admin=msg.sender;\n  }\n  \n  function setup(address _factoryL,address _uniRouterL, address _sushiRouterL,address _sushifactoryL,address DAIL) external returns (bool) {\n  _factory=_factoryL;\n  _uniRouter=_uniRouterL;\n  _sushiRouter=_sushiRouterL;\n  _sushifactory=_sushifactoryL;\n  _DAI=DAIL;\n  \n  factory = _factory;  \n  uniRouter = IUniswapV2Router02(_uniRouter);\n  sushiRouter = IUniswapV2Router02(_sushiRouter);\n  return true;\n  }\n  \n  function checksetup(address _factoryL,address _uniRouterL, address _sushiRouterL,address _sushifactoryL,address DAIL) external view returns (bool) {\n    return (_factory==_factoryL && \n            _uniRouter==_uniRouterL && \n            _sushiRouter==_sushiRouterL &&\n            _sushifactory==_sushifactoryL &&\n            _DAI==DAIL\n    );    \n  }\n  \n\n   function Time_call() private view returns (uint256){\n        return now+100;\n    }\n\n  \n  \n  function checkPayBack(uint _amount0,uint _amount1,uint ureserve0,uint ureserve1,uint sreserve0,uint sreserve1) external  pure returns (uint,uint){\n      require(_amount0 == 0 || _amount1 == 0);\n      \n       \n      uint amountRequired=uint(-1);\n      uint amountReceived=uint(-1);\n       \n      \n      if (_amount0>0)\n      {\n        amountRequired = UniswapV2Library.getAmountIn(_amount0, ureserve1,ureserve0);\n        amountReceived = UniswapV2Library.getAmountOut(_amount0,sreserve0,sreserve1);\n      }\n      else\n      {\n       amountRequired = UniswapV2Library.getAmountIn(_amount1, ureserve0,ureserve1);\n       amountReceived = UniswapV2Library.getAmountOut(_amount1,sreserve1,sreserve0);\n      \n      }\n     \n\n      return (amountRequired,amountReceived);\n  }\n  \n  function maxRequest(uint ureserve0,uint ureserve1,uint sreserve0,uint sreserve1) external pure returns (uint dir,uint rv){\n      \n       \n      uint amountRequired=uint(-1);\n      uint amountReceived=uint(-1);\n      uint maxDiff=0;\n      \n      uint _amount0=ureserve0;\n      uint _amount1=ureserve1;\n      \n      dir=2; rv=0;\n      \n      for (uint k=1;k<=100;k+=5)   \n        {\n          \n         amountRequired = UniswapV2Library.getAmountIn(_amount0.mul(k).div(100), ureserve1,ureserve0);\n         amountReceived = UniswapV2Library.getAmountOut(_amount0.mul(k).div(100),sreserve0,sreserve1);\n         //if (amountRequired>amountReceived) break;\n         if (amountReceived>amountRequired && (amountReceived-amountRequired)>maxDiff){\n                maxDiff= amountReceived-amountRequired;      \n                rv=_amount0.mul(k).div(100);\n                dir=0;\n           }\n        } \n      \n      for (uint k=1;k<=100;k+=5)\n      {\n          \n         amountRequired = UniswapV2Library.getAmountIn(_amount1.mul(k).div(100), ureserve0,ureserve1);\n         amountReceived = UniswapV2Library.getAmountOut(_amount1.mul(k).div(100),sreserve1,sreserve0);\n         //if (amountRequired>amountReceived) break;\n         if (amountReceived>amountRequired && (amountReceived-amountRequired)>maxDiff){\n                maxDiff= amountReceived-amountRequired;                 \n                rv=_amount1.mul(k).div(100);\n                dir=1;\n           }\n      \n      }\n  }\n  \n  \n function uniswapV2Call(address _sender, uint _amount0, uint _amount1, bytes calldata _data) external {\n  address[] memory path = new address[](2); \n  address[] memory path2 = new address[](2); \n  uint amountTokenBorrowed = _amount0 == 0 ? _amount1 : _amount0; \n  address token0 = IUniswapV2Pair(msg.sender).token0(); \n  address token1 = IUniswapV2Pair(msg.sender).token1(); \n  require(msg.sender == UniswapV2Library.pairFor(factory, token0, token1), 'Invalid Request');\n  require(_amount0 == 0 || _amount1 == 0);\n  \n  path[0] = _amount0 == 0 ? token1 : token0; \n  path[1] = _amount0 == 0 ? token0 : token1; \n  \n  path2[0] = _amount0 != 0 ? token1 : token0; \n  path2[1] = _amount0 != 0 ? token0 : token1; \n  IERC20 token = IERC20(_amount0 == 0 ? token1 : token0);\n  token.approve(address(sushiRouter), amountTokenBorrowed);\n  uint amountRequired = UniswapV2Library.getAmountsIn(factory, amountTokenBorrowed, path2)[0]; \n  uint amountReceived = sushiRouter.swapExactTokensForTokens( amountTokenBorrowed, amountRequired, path, address(this), Time_call())[1];\n  IERC20 outputToken = IERC20(_amount0 == 0 ? token0 : token1);\n  outputToken.transfer(msg.sender, amountRequired);   \n  //IntchangeDAI(_sender,token0,token1); se la metto crasha la transazione\n }\n \n \n function changeDAI(address token0,address token1) public returns (uint bal0,uint bal1) {\n     require(admin==msg.sender,'not allowed');\n     bal0=IERC20(token0).balanceOf(address(this));\n     bal1=IERC20(token1).balanceOf(address(this));\n     \n     address[] memory path = new address[](2);\n     if (bal0>0)\n     {\n     path[0]=token0;\n     path[1]=_DAI;\n     \n     IERC20(token0).approve(address(uniRouter), bal0);\n     uint amountReceived = uniRouter.swapExactTokensForTokens(bal0, 0, path, address(this), Time_call())[1];\n     }\n     if (bal1>0)\n     {\n     path[0]=token1;\n     path[1]=_DAI;\n     \n     IERC20(token1).approve(address(uniRouter), bal1);\n     uint amountReceived = uniRouter.swapExactTokensForTokens(bal1, 0, path, address(this), Time_call())[1];\n     }\n     \n     bal0=IERC20(_DAI).balanceOf(address(this));\n     if (bal0>0) IERC20(_DAI).transfer(msg.sender,bal0);\n }\n \n function checkDAI(address token0,address token1) public view returns (bool) {\n     require(admin==msg.sender,'not allowed');\n     uint bal0=IERC20(token0).balanceOf(address(this));\n     uint bal1=IERC20(token1).balanceOf(address(this));\n     return (bal0+bal1)>0;\n }\n \n  \n   \n  function toAsciiString(address x) internal pure returns (string memory) {\n    bytes memory s = new bytes(40);\n    for (uint i = 0; i < 20; i++) {\n        bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\n        bytes1 hi = bytes1(uint8(b) / 16);\n        bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\n        s[2*i] = char(hi);\n        s[2*i+1] = char(lo);            \n    }\n    return string(s);\n}\n\nfunction char(bytes1 b) internal pure returns (bytes1 c) {\n    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\n    else return bytes1(uint8(b) + 0x57);\n}\n\nfunction uintToString(uint v) internal pure returns (string memory str) {\n        uint maxlength = 100;\n        bytes memory reversed = new bytes(maxlength);\n        uint i = 0;\n        while (v != 0) {\n            uint remainder = v % 10;\n            v = v / 10;\n            reversed[i++] = byte(uint8(48 + remainder));\n        }\n        bytes memory s = new bytes(i + 1);\n        for (uint j = 0; j <= i; j++) {\n            s[j] = reversed[i - j];\n        }\n        str = string(s);\n    }\n  \n    \n}\n"},"arbitrage-uniswap-sushiswap/contracts/UniswapV2Library.sol":{"content":"pragma solidity >=0.5.0;\n\nimport './interfaces/IUniswapV2Pair.sol';\nimport './safemath.sol';\n \nlibrary UniswapV2Library {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n            ))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n"},"arbitrage-uniswap-sushiswap/contracts/interfaces/IERC20.sol":{"content":"pragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"},"arbitrage-uniswap-sushiswap/contracts/interfaces/IUniswapV2Factory.sol":{"content":"pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\n  function allPairs(uint) external view returns (address pair);\n  function allPairsLength() external view returns (uint);\n  function feeTo() external view returns (address);\n  function feeToSetter() external view returns (address);\n  function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n"},"arbitrage-uniswap-sushiswap/contracts/interfaces/IUniswapV2Pair.sol":{"content":"pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"},"arbitrage-uniswap-sushiswap/contracts/interfaces/IUniswapV2Router01.sol":{"content":"pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"arbitrage-uniswap-sushiswap/contracts/interfaces/IUniswapV2Router02.sol":{"content":"pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"arbitrage-uniswap-sushiswap/contracts/safemath.sol":{"content":"pragma solidity >=0.4.23;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}"}}}