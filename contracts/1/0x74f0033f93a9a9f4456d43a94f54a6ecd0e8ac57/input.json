{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/done.sol": {
      "content": "/*\n\nFranky is as spoopy as he is cute and he's looking to help everyone make some gains!\n\n2% marketing\n8% buyback\n\n1 trillion supply\n\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n}\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In, \n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\nabstract contract IERC20Extented is IERC20 {\n    function decimals() public view virtual returns (uint8);\n    function name() public view virtual returns (string memory);\n    function symbol() public view virtual returns (string memory);\n}\n\ncontract FrankenInu is Context, IERC20, IERC20Extented, Ownable {\n    using SafeMath for uint256;\n    string private constant _name = \"Franken Inu\";\n    string private constant _symbol = \"Franky\";\n    uint8 private constant _decimals = 9;\n    mapping(address => uint256) private balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => bool) private _isExcludedFromFee;\n    uint256 private constant _tTotal = 1000000000000 * 10**9;\n    uint256 private _tFeeTotal;\n\n    uint256 private _firstBlock;\n    uint256 private _botBlocks;\n\n    uint256 public _buybackFee = 80; \n    uint256 private _previousBuybackFee = _buybackFee;\n    uint256 public _marketingFee = 10; \n    uint256 private _previousMarketingFee = _marketingFee;\n    uint256 public _devFee = 10; \n    uint256 private _previousDevFee = _devFee;\n \n    uint256 public _marketingPercent = 20;\n    uint256 public _buybackPercent = 80;\n    \n    mapping(address => bool) private bots;\n    address payable private _marketingAddress = payable(0xc5181bdA608069bFE60B5B52D293aE84FA6db4C8);\n    address payable private _buybackAddress = payable(0x193c29646F749ACb902932943D308605A9D767C0);\n\n    IUniswapV2Router02 private uniswapV2Router;\n    address public uniswapV2Pair;\n    uint256 private _maxTxAmount;\n  \n    bool private tradingOpen = false;\n    bool private inSwap = false;\n\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\n    event PercentsUpdated(uint256 _marketingPercent, uint256 _buybackPercent);\n    event FeesUpdated(uint256 _buybackFee, uint256 _marketingFee, uint256 _devFee);\n    \n    modifier lockTheSwap {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n    constructor() {\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        uniswapV2Router = _uniswapV2Router;\n        _approve(address(this), address(uniswapV2Router), _tTotal);\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type(uint256).max);\n\n        _maxTxAmount = _tTotal; // start off transaction limit at 100% of total supply\n\n        balances[_msgSender()] = _tTotal;\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[_marketingAddress] = true;\n        _isExcludedFromFee[_buybackAddress] = true;\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function name() override public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() override public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() override public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public pure override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n    \n    function removeAllFee() private {\n        if (_marketingFee == 0 && _buybackFee == 0 && _devFee == 0) return;\n        _previousMarketingFee = _marketingFee;\n        _previousBuybackFee = _buybackFee;\n        _previousDevFee = _devFee;\n        \n        _marketingFee = 0;\n        _buybackFee = 0;\n        _devFee = 0;\n    }\n    \n    function restoreAllFee() private {\n        _marketingFee = _previousMarketingFee;\n        _buybackFee = _previousBuybackFee;\n        _devFee = _previousDevFee;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n   \n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n\n        if (from != owner() && to != owner()) {\n            require(tradingOpen);\n            require(amount <= _maxTxAmount);\n            \n            if (block.timestamp <= _firstBlock) { \n                require(amount <= _tTotal.div(1000));\n            }\n            \n            if (from == uniswapV2Pair && to != address(uniswapV2Router)) { \n                if (block.timestamp <= _firstBlock.add(_botBlocks)) {\n                    bots[to] = true;            \n                }\n            }\n            uint256 contractTokenBalance = balanceOf(address(this));\n            if (!inSwap && from != uniswapV2Pair && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) { \n                require(!bots[to] && !bots[from]); \n\n                if (contractTokenBalance > 0) {\n                    swapTokensForEth(contractTokenBalance);\n                }\n                \n                uint256 contractETHBalance = address(this).balance;\n                if (contractETHBalance > 0) {\n                    sendETHToFee(address(this).balance);\n                }\n            }\n        }\n\n        bool takeFee = true;\n        \n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\n            takeFee = false;\n        }\n        \n        _tokenTransfer(from, to, amount, takeFee);\n        \n        restoreAllFee();\n    }\n    \n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\n    }\n\n    function sendETHToFee(uint256 amount) private {\n        _marketingAddress.transfer(amount.mul(_marketingPercent).div(100));\n        _buybackAddress.transfer(amount.mul(_buybackPercent).div(100));\n    }\n    \n    function openTrading(uint256 botBlocks) external onlyOwner() {\n        _firstBlock = block.timestamp;\n        _botBlocks = botBlocks;\n        tradingOpen = true;\n    }\n\n    function manualswap() external {\n        require(_msgSender() == _marketingAddress);\n        uint256 contractBalance = balanceOf(address(this));\n        swapTokensForEth(contractBalance);\n    }\n\n    function manualsend() external {\n        require(_msgSender() == _marketingAddress);\n        uint256 contractETHBalance = address(this).balance;\n        sendETHToFee(contractETHBalance);\n    }\n\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool takeFee) private {\n        if (!takeFee) removeAllFee();\n        (uint256 tTransferAmount, uint256 tBuyback, uint256 tMarketing, uint256 tDev) = _getValues(tAmount);\n        balances[sender] = balances[sender].sub(tAmount);\n        balances[recipient] = balances[recipient].add(tTransferAmount);\n        _takeBuyback(tBuyback);\n        _takeMarketing(tMarketing);\n        _takeDev(tDev);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _takeBuyback(uint256 tBuyback) private {\n        balances[address(this)] = balances[address(this)].add(tBuyback);\n    }\n    \n    function _takeMarketing(uint256 tMarketing) private {\n        balances[address(this)] = balances[address(this)].add(tMarketing);\n    }\n    \n    function _takeDev(uint256 tDev) private {\n        balances[address(this)] = balances[address(this)].add(tDev);\n    }\n\n    receive() external payable {}\n\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {\n        uint256 tBuyback = tAmount.mul(_buybackFee).div(1000);\n        uint256 tMarketing = tAmount.mul(_marketingFee).div(1000);\n        uint256 tDev = tAmount.mul(_devFee).div(1000);\n        uint256 tTransferAmount = tAmount.sub(tBuyback).sub(tMarketing);\n        tTransferAmount -= tDev;\n        return (tTransferAmount, tBuyback, tMarketing, tDev);\n    }\n  \n    function excludeFromFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n  \n    function includeInFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n    function removeBot(address account) public onlyOwner() {\n        bots[account] = false;\n    }\n  \n    function addBot(address account) public onlyOwner() {\n        bots[account] = true;\n    }\n    \n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\n        require(maxTxPercent > 0, \"Amount must be greater than 0\");\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);\n        emit MaxTxAmountUpdated(_maxTxAmount);\n    }\n    \n    function setPercents(uint256 marketingPercent, uint256 buybackPercent) external onlyOwner() {\n        require(marketingPercent.add(buybackPercent) == 100, \"Sum of percents must equal 100\");\n        _marketingPercent = marketingPercent;\n        _buybackPercent = buybackPercent;\n        emit PercentsUpdated(_marketingPercent, _buybackPercent);\n    }\n    \n    function setTaxes(uint256 marketingFee, uint256 buybackFee, uint256 devFee) external onlyOwner() {\n        require(marketingFee.add(buybackFee).add(devFee) <= 1000, \"Sum of sell fees must be less than 1000\");\n        _marketingFee = marketingFee;\n        _buybackFee = buybackFee;\n        _devFee = devFee;\n        \n        _previousMarketingFee =  _marketingFee;\n        _previousBuybackFee = _buybackFee;\n        _previousDevFee = _devFee;\n        \n        emit FeesUpdated(_marketingFee, _buybackFee, _devFee);\n    }\n\n}\n\n"
    }
  }
}