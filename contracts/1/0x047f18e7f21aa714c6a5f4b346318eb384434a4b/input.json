{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "LogERC20.sol": {
      "content": "pragma solidity ^0.5.2;\r\n\r\ncontract ERC20Token {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n }\r\n\r\ncontract LogERC20 {\r\n\r\n    event hasBeenSent(\r\n        address sender,\r\n        address recipient,\r\n        string target,\r\n        uint256 amount,\r\n        address contractAddress\r\n    );\r\n\r\n    address public erc20ContractAddress;\r\n    address public bridgeWalletAddress;\r\n\r\n    constructor(address _erc20ContractAddress, address _bridgeWalletAddress ) public {\r\n       erc20ContractAddress = _erc20ContractAddress;\r\n       bridgeWalletAddress = _bridgeWalletAddress;\r\n    }\r\n\r\n    function logSendMemo(\r\n        uint256 amount,\r\n        string memory target\r\n    ) public {\r\n        ERC20Token token = ERC20Token(erc20ContractAddress);\r\n        require(token.transferFrom(msg.sender, bridgeWalletAddress, amount), \"ERC20 token transfer was unsuccessful\");\r\n        emit hasBeenSent(msg.sender, bridgeWalletAddress, target, amount, erc20ContractAddress);\r\n    }\r\n}"
    }
  }
}