{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "snapshot.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >= 0.8.0;\n\ncontract MaskTokenSnapshot {\n    address contract_creator;\n    uint256 block_height;\n    mapping(address => uint256) balanceOf;\n\n    modifier CreatorOnly {\n        require(msg.sender == contract_creator, \"Not Authorized\");\n        _;\n    }\n\n    constructor() {\n        contract_creator = msg.sender;\n        block_height = 0;\n    }\n\n    function batch_set_balance(\n        uint256 _block_height, address[] memory addrs, uint256[] memory balances\n    ) public CreatorOnly {\n        block_height = _block_height;\n        for (uint256 i = 0; i < addrs.length; i++) {\n            balanceOf[addrs[i]] = balances[i];\n        }\n    }\n\n    function get_balance(address addr) view public returns (uint256) {\n        return balanceOf[addr];\n    }\n\n    function _set_balance(address addr, uint256 balance) private {\n        balanceOf[addr] = balance;\n    }\n}"
    }
  }
}