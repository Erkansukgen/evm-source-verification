{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/KashiFlash.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\nlibrary DataTypes {\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n  struct ReserveData {\n    //stores the reserve configuration\n    ReserveConfigurationMap configuration;\n    //the liquidity index. Expressed in ray\n    uint128 liquidityIndex;\n    //variable borrow index. Expressed in ray\n    uint128 variableBorrowIndex;\n    //the current supply rate. Expressed in ray\n    uint128 currentLiquidityRate;\n    //the current variable borrow rate. Expressed in ray\n    uint128 currentVariableBorrowRate;\n    //the current stable borrow rate. Expressed in ray\n    uint128 currentStableBorrowRate;\n    uint40 lastUpdateTimestamp;\n    //tokens addresses\n    address aTokenAddress;\n    address stableDebtTokenAddress;\n    address variableDebtTokenAddress;\n    //address of the interest rate strategy\n    address interestRateStrategyAddress;\n    //the id of the reserve. Represents the position in the list of the active reserves\n    uint8 id;\n  }\n\n  struct ReserveConfigurationMap {\n    //bit 0-15: LTV\n    //bit 16-31: Liq. threshold\n    //bit 32-47: Liq. bonus\n    //bit 48-55: Decimals\n    //bit 56: Reserve is active\n    //bit 57: reserve is frozen\n    //bit 58: borrowing is enabled\n    //bit 59: stable rate borrowing enabled\n    //bit 60-63: reserved\n    //bit 64-79: reserve factor\n    uint256 data;\n  }\n\n  struct UserConfigurationMap {\n    uint256 data;\n  }\n\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\n}\n\n/**\n * @title IFlashLoanReceiver interface\n * @notice Interface for the Aave fee IFlashLoanReceiver.\n * @author Aave\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\n **/\ninterface IFlashLoanReceiver {\n    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool);\n\n    // function ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\n\n    // function LENDING_POOL() external view returns (ILendingPool);\n}\n\ninterface ILendingPoolAddressesProvider {}\n\ninterface ILendingPool {\n\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint256);\n\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n\n    function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata modes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    function repay(\n        address asset,\n        uint256 amount,\n        uint256 rateMode,\n        address onBehalfOf\n    ) external returns (uint256);\n\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    function borrow(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        uint16 referralCode,\n        address onBehalfOf\n    ) external;\n\n}\n\ninterface IUniswapV2Router02 {\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata data,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function factory() external pure returns (address);\n\n}\n\n\n// interface IERC20 {\n//     function balanceOf(address) external view returns (uint);\n//     function approve(address, uint256) external returns (bool);\n//     function transfer(address, uint) external returns (bool);\n//     function transferFrom(address, address, uint) external returns (bool);\n// }\n\n// Actually Tether\n// interface IERC20 {\n//     function balanceOf(address) external view returns (uint);\n//     function approve(address, uint256) external;\n//     function transfer(address, uint) external;\n//     function transferFrom(address, address, uint) external;\n// }\n\ninterface ISwapper {\n    /// @notice Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper.\n    /// Swaps it for at least 'amountToMin' of token 'to'.\n    /// Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer.\n    /// Returns the amount of tokens 'to' transferred to BentoBox.\n    /// (The BentoBox skim function will be used by the caller to get the swapped funds).\n    function swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        address recipient,\n        uint256 shareToMin,\n        uint256 shareFrom\n    ) external returns (uint256 extraShare, uint256 shareReturned);\n\n    /// @notice Calculates the amount of token 'from' needed to complete the swap (amountFrom),\n    /// this should be less than or equal to amountFromMax.\n    /// Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper.\n    /// Swaps it for exactly 'exactAmountTo' of token 'to'.\n    /// Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer.\n    /// Transfers allocated, but unused 'from' tokens within the BentoBox to 'refundTo' (amountFromMax - amountFrom).\n    /// Returns the amount of 'from' tokens withdrawn from BentoBox (amountFrom).\n    /// (The BentoBox skim function will be used by the caller to get the swapped funds).\n    function swapExact(\n        IERC20 fromToken,\n        IERC20 toToken,\n        address recipient,\n        address refundTo,\n        uint256 shareFromSupplied,\n        uint256 shareToExact\n    ) external returns (uint256 shareUsed, uint256 shareReturned);\n}\n\nstruct Rebase {\n    uint128 elastic;\n    uint128 base;\n}\n\ninterface Kashi {\n\n    function liquidate(\n        address[] calldata users,\n        uint256[] calldata maxBorrowParts,\n        address to,\n        ISwapper swapper,\n        bool open\n    ) external;\n\n    function accrue() external;\n\n    function masterContract() external view returns (address);\n\n    function asset() external view returns (address);\n\n    function collateral() external view returns (address);\n\n    function userCollateralShare(address) external view returns (uint256);\n\n    function userBorrowPart(address) external view returns (uint256);\n\n    function totalBorrow() external view returns (Rebase memory);\n\n}\n\ninterface BentoBox {\n\n    function setMasterContractApproval(\n        address user,\n        address masterContract,\n        bool approved,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function deposit(\n        IERC20 token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\n\n    function withdraw(\n        IERC20 token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\n\n    function balanceOf(address token_, address user_) external view returns (uint256);\n\n}\n\ncontract KashiFlash is IFlashLoanReceiver {\n\n    using SafeERC20 for IERC20;\n\n    address owner;\n\n    ILendingPool public LENDING_POOL = ILendingPool(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9);\n    BentoBox private immutable bentobox = BentoBox(0xF5BCE5077908a1b7370B9ae04AdC565EBd643966);\n\n    struct Swap {\n        address user;\n        address desiredAsset;\n        uint256 amountInExact;\n        uint256 amountOutMin;\n    }\n    Swap private _swap;\n\n    struct Liquidation {\n        address target;\n        address kashiAddr;\n        address collateral;\n        address asset;\n        uint ratioTop;\n        uint ratioBottom;\n        address router;\n        address[] collateralSwapPath;\n        uint repayAmount;\n    }\n    Liquidation private liq;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function setOwner(address newOwner) public {\n        require(msg.sender == owner);\n        owner = newOwner;\n    }\n\n    function createLiquidationInfo(\n        address target,\n        address kashiAddr,\n        address router,\n        uint repayAmountOverride,\n        address[] memory collateralSwapPath\n    ) internal {\n        if(collateralSwapPath.length == 0) {\n            collateralSwapPath[0] = Kashi(kashiAddr).collateral();\n            collateralSwapPath[1] = Kashi(kashiAddr).asset();\n        }\n\n        Kashi(kashiAddr).accrue();\n\n        Rebase memory totalBorrow = Kashi(kashiAddr).totalBorrow();\n        uint userBorrowAmountElastic = Kashi(kashiAddr).userBorrowPart(target) * totalBorrow.elastic / totalBorrow.base;\n        uint repayAmount = (repayAmountOverride > 0) ? repayAmountOverride : userBorrowAmountElastic;\n        liq = Liquidation({\n            target: target,\n            kashiAddr: kashiAddr, // has collateral and borrowed asset addresses\n            collateral: Kashi(kashiAddr).collateral(),\n            asset: Kashi(kashiAddr).asset(),\n            ratioTop: totalBorrow.elastic + 1,\n            ratioBottom: totalBorrow.base,\n            router: router,\n            collateralSwapPath: collateralSwapPath,\n            repayAmount: repayAmount\n        });\n    }\n\n    /**\n       Use an Aave flashloan to liquidate a Kashi position.\n       Take a flashloan in the Kashi borrowed asset.\n       Kashi liquidate(), which sends borrowed asset to BentoBox and receives collateral asset.\n       Swap collateral asset for borrowed asset.\n       Repay borrowed asset to Aave flashloan, keep the extra from the swap.\n\n       collateralSwapPath is the path to swap from the collateral asset to the borrowed asset, to repay the flashloan.\n       if left empty, we default to a two-step path.\n    **/\n    function liquidateWithFlashloan(\n        address target,\n        address kashiAddr,\n        address router,\n        uint repayAmountOverride, // optional (set as 0)\n        address[] memory collateralSwapPath // optional (set as [])\n    ) public {\n        createLiquidationInfo(target, kashiAddr, router, repayAmountOverride, collateralSwapPath);\n\n        // Take out flashloan\n        address[] memory assets = new address[](1);\n        assets[0] = Kashi(kashiAddr).asset();\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = liq.repayAmount;\n        uint256[] memory modes = new uint256[](1);\n        modes[0] = 0;\n\n        LENDING_POOL.flashLoan(\n            address(this),\n            assets,\n            amounts,\n            modes,\n            address(0x0), // onBehalfOf, not used here\n            bytes(\"0x0\"), // params, not used here\n            0 // referralCode\n        );\n    }\n\n    function liquidateWithUserFunds(\n        address target,\n        address kashiAddr,\n        address router,\n        uint repayAmount, // required\n        address[] memory collateralSwapPath\n    ) public {\n        address asset = Kashi(kashiAddr).asset();\n        IERC20(asset).transferFrom(msg.sender, address(this), repayAmount);\n        createLiquidationInfo(target, kashiAddr, router, repayAmount, collateralSwapPath);\n        doExecuteOperation(asset, repayAmount, 0, false);\n    }\n\n    /**\n       Receive a flashloan in the Kashi borrowed asset.\n       Approve and deposit that borrowed asset into BentoBox.\n       Kashi liquidate(), which moves the borrowed asset to a diff user in BentoBox and receives collateral asset.\n       Withdraw the collateral asset from BentoBox.\n       Swap collateral asset for borrowed asset.\n       Repay borrowed asset to Aave flashloan, keep the extra from the swap.\n     */\n    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) public override returns (bool) {\n        doExecuteOperation(assets[0], amounts[0], premiums[0], true);\n        return true;\n    }\n\n    function doExecuteOperation(\n        address asset,\n        uint amount,\n        uint premium,\n        bool isFlashloan\n    ) public {\n        // Edge case for Tether; requires setting approvals to 0 before changing\n        IERC20(asset).safeApprove(address(bentobox), 0);\n        IERC20(asset).safeApprove(address(bentobox), amount);\n        bentobox.deposit(\n            IERC20(asset),\n            address(this),\n            address(this),\n            amount,\n            0\n        );\n\n        uint collateralRetrieved;\n        {\n            address[] memory users = new address[](1);\n            users[0] = liq.target;\n\n            // This amount will be multipled by the elastic ratio within liquidate()\n            // So attempt to repay a slightly smaller borrow amount than we have money for\n            uint[] memory amountsMinusFees = new uint[](1);\n            amountsMinusFees[0] = ((amount * liq.ratioBottom / liq.ratioTop) - 1) * 1000 / 1000;\n\n            // We make it here\n            liquidate(\n                liq.kashiAddr,\n                users,\n                amountsMinusFees, // maxBorrowParts; matches the flashloan since that's what we're providing\n                address(this)\n            );\n\n            // require(false, \"Before withdraw\");\n            collateralRetrieved = bentobox.balanceOf(liq.collateral, address(this));\n            bentobox.withdraw(\n                IERC20(liq.collateral),\n                address(this),\n                address(this),\n                // collateralAmount,\n                collateralRetrieved,\n                0\n            );\n        }\n\n\n        // Swap collateral\n        {\n            uint loanPlusPremium = amount + premium;\n\n            {\n                uint bal = IERC20(liq.collateral).balanceOf(address(this));\n                require(bal >= collateralRetrieved, \"Insufficient input amount to swap\");\n\n                uint deadline = type(uint).max;\n                IERC20(liq.collateral).safeApprove(address(liq.router), 0);\n                IERC20(liq.collateral).safeApprove(address(liq.router), collateralRetrieved);\n                IUniswapV2Router02(liq.router).swapExactTokensForTokens(\n                    collateralRetrieved,\n                    loanPlusPremium,\n                    liq.collateralSwapPath,\n                    address(this),\n                    deadline\n                );\n            }\n\n            // Approve the LendingPool contract allowance to *pull* the owed amount\n            uint borrowBalance = IERC20(asset).balanceOf(address(this));\n            if (isFlashloan) {\n                IERC20(asset).safeApprove(address(LENDING_POOL), 0);\n                IERC20(asset).safeApprove(address(LENDING_POOL), loanPlusPremium);\n                require(borrowBalance >= loanPlusPremium, \"Not enough tokens to repay flashloan\");\n                // uint surplus = borrowBalance - loanPlusPremium;\n                IERC20(asset).safeTransfer(owner, borrowBalance - loanPlusPremium);\n            } else {\n                require(borrowBalance >= loanPlusPremium, \"Not enough tokens to repay user\");\n                IERC20(asset).safeTransfer(owner, borrowBalance);\n            }\n        }\n\n        // Remove the swap information from storage\n        delete liq;\n    }\n\n    // Precondition: the borrowed asset is in BentoBox owned by this contract\n    function liquidate(\n        address kashiAddr,\n        address[] memory users,\n        uint256[] memory maxBorrowParts,\n        address to\n    ) public {\n        address collateral = Kashi(kashiAddr).collateral();\n        address borrow = Kashi(kashiAddr).asset();\n        // uint collateralBalanceBefore = Kashi(kashiAddr).userCollateralShare(address(this));\n        uint collateralBalanceBefore = bentobox.balanceOf(collateral, address(this));\n        uint borrowBalanceBefore = bentobox.balanceOf(borrow, address(this));\n\n\n        bentobox.setMasterContractApproval(\n            address(this),\n            Kashi(kashiAddr).masterContract(),\n            true,\n            0,\n            0x0,\n            0x0\n        );\n\n        Rebase memory totalBorrow = Kashi(kashiAddr).totalBorrow();\n        require(borrowBalanceBefore >= maxBorrowParts[0], \"Don't have enough to repay the borrow\");\n        Kashi(kashiAddr).liquidate(\n            users,\n            maxBorrowParts,\n            address(this),\n            ISwapper(address(0x0)),\n            true\n        );\n\n        // uint collateralBalanceAfter = Kashi(kashiAddr).userCollateralShare(address(this));\n        uint collateralBalanceAfter = bentobox.balanceOf(collateral, address(this));\n        uint borrowBalanceAfter = bentobox.balanceOf(borrow, address(this));\n        require(collateralBalanceAfter > collateralBalanceBefore, \"BentoBox balance did not increase after liquidation\");\n    }\n\n}"}}}