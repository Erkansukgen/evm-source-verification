{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Create2.sol": {
      "content": "pragma solidity ^0.5.0;\r\n\r\ncontract Create2 {\r\n    /**\r\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\r\n     * will be deployed can be known in advance via {computeAddress}. Note that\r\n     * a contract cannot be deployed twice using the same salt.\r\n     */\r\n    function deploy(bytes32 salt, bytes memory bytecode) public returns (address) {\r\n        address addr;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            addr := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\r\n        }\r\n        require(addr != address(0), \"Create2: Failed on deploy\");\r\n        return addr;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the `bytecode`\r\n     * or `salt` will result in a new destination address.\r\n     */\r\n    function computeAddress(bytes32 salt, bytes memory bytecode) public view returns (address) {\r\n        return computeAddress(salt, bytecode, address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\r\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\r\n     */\r\n    function computeAddress(bytes32 salt, bytes memory bytecodeHash, address deployer) public pure returns (address) {\r\n        bytes32 bytecodeHashHash = keccak256(bytecodeHash);\r\n        bytes32 _data = keccak256(\r\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHashHash)\r\n        );\r\n        return address(bytes20(_data << 96));\r\n    }\r\n}"
    }
  }
}