{"language":"Solidity","settings":{"evmVersion":"istanbul","libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/contract.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.3;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n}\r\n\r\ninterface IERC20Token {\r\n    function totalSupply() external view returns (uint256);\r\n    function transfer(address to, uint256 value) external  returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256 );\r\n}\r\n\r\ninterface ApproveAndCallFallback { \r\n    function receiveApproval(address from, uint256 value, address token, bytes calldata data) external returns (bool); \r\n}\r\n\r\ninterface ApproveStakeFallback { \r\n    function createStake(address _wallet, uint8 _timeFrame, uint256 _value) external returns (bool); \r\n}\r\n\r\ncontract Ownable {\r\n    address private owner;\r\n    \r\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender; \r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\ncontract StandardToken is IERC20Token {\r\n    \r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public _totalSupply;\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    function totalSupply() override public view returns (uint256 supply) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) override virtual public returns (bool success) {\r\n        require(_to != address(0x0));\r\n\t\trequire(_value >= 0); \r\n\t\trequire(balances[msg.sender] >= _value);\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) override virtual public returns (bool success) {\r\n        require(_to != address(0x0));\r\n\t\trequire(_value >= 0); \r\n\t\trequire(balances[_from] >= _value);\r\n\t\trequire(allowed[_from][msg.sender] >= _value);\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\temit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) override public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) override public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) override public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n}\r\n\r\ncontract CPTToken is Ownable, StandardToken {\r\n\r\n    using SafeMath for uint256;\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n    address public stakeContract;\r\n    address public crowdSaleContract;\r\n    uint256 public soldTokensUnlockTime;\r\n    mapping (address => uint256) frozenBalances;\r\n    mapping (address => uint256) timelock;\r\n    \r\n    event Burn(address indexed from, uint256 value);\r\n    event StakeContractSet(address indexed contractAddress);\r\n    \r\n    constructor() {\r\n        name = \"Capiteum\";\r\n        decimals = 18;\r\n        symbol = \"CPT\";\r\n        stakeContract = address(0x0);\r\n        crowdSaleContract = 0xc0B18EE109212791079aaa7011fa5d770Cf26fDc;  \r\n\r\n        address teamWallet =  0x4607951Bf1A2263715cC3842F3f2Fd83f1fafDeE;\r\n        address teamWalletUnlocked = 0x387720d79D675ae815a9A47F7418b8701538b9D9;          \r\n\r\n        address privateSaleWallet = 0x572D4Dd0bf45293744762d3E85211C8ba2C284D7;        \r\n        address marketingWallet = 0x19544E83cb66855dFeEF638474438f9dA51FA192;          \r\n        address exchangesLiquidity = 0x48887F49140614312ea1cBB6C27aeDb1ED18F248;       \r\n        address stakeWallet = 0x44b3E70145D13a946f9edCFcadBc013864Db8A3f;              \r\n        uint256 teamReleaseTime = 1614102946;                       \r\n        uint256 marketingReleaseTime = 1606939200;                  \r\n        uint256 stakesReleaseTime = 1607385600;\r\n\r\n        balances[teamWallet] = 1500 ether;\r\n        emit Transfer(address(0x0), teamWallet, (1500 ether));\r\n        frozenBalances[teamWallet] = 1500 ether;\r\n        timelock[teamWallet] = teamReleaseTime;\r\n\r\n        balances[teamWalletUnlocked] = 1500 ether;\r\n        emit Transfer(address(0x0), teamWalletUnlocked, (1500 ether));\r\n        \r\n        balances[stakeWallet] = 7500 ether;\r\n        emit Transfer(address(0x0), address(stakeWallet), (7500 ether));\r\n        frozenBalances[stakeWallet] = 7500 ether;\r\n        timelock[stakeWallet] = stakesReleaseTime;\r\n        \r\n        balances[marketingWallet] = 2000 ether;\r\n        emit Transfer(address(0x0), address(marketingWallet), (2000 ether));\r\n        frozenBalances[marketingWallet] = 1000 ether;\r\n        timelock[marketingWallet] = marketingReleaseTime;\r\n        \r\n        balances[privateSaleWallet] = 1500 ether;\r\n        emit Transfer(address(0x0), address(privateSaleWallet), (1500 ether));\r\n        \r\n        balances[crowdSaleContract] = 5000 ether;\r\n        emit Transfer(address(0x0), address(crowdSaleContract), (5000 ether));\r\n\r\n        balances[exchangesLiquidity] = 9000 ether;\r\n        emit Transfer(address(0x0), address(exchangesLiquidity), (9000 ether));\r\n\r\n        _totalSupply = 28000 ether;\r\n        \r\n        soldTokensUnlockTime = 1606950405;\r\n\r\n    }\r\n    \r\n    function frozenBalanceOf(address _owner) public view returns (uint256 balance) {\r\n        return frozenBalances[_owner];\r\n    }\r\n    \r\n    function unlockTimeOf(address _owner) public view returns (uint256 time) {\r\n        return timelock[_owner];\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) override public  returns (bool success) {\r\n        require(isAllowedTx(msg.sender, _value));\r\n        return super.transfer(_to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) override public returns (bool success) {\r\n        require(isAllowedTx(msg.sender, _value));\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    \r\n    function setStakeContract(address _contractAddress) onlyOwner public {\r\n        stakeContract = _contractAddress;\r\n        emit StakeContractSet(_contractAddress);\r\n    }\r\n    \r\n    function setCrowdSaleContract(address _contractAddress) onlyOwner public {\r\n        crowdSaleContract = _contractAddress;\r\n    }\r\n    \r\n    function isAllowedTx(address sender, uint256 amount) private returns (bool isAllowed) {\r\n        if (timelock[sender] > block.timestamp) {\r\n            return isBalanceFree(sender, amount);\r\n        } else {\r\n            if (frozenBalances[sender] > 0) frozenBalances[sender] = 0;\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    function isBalanceFree(address sender, uint256 amount) private view returns (bool isfree) {\r\n        if (amount <= (balances[sender] - frozenBalances[sender])) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n\t\trequire(_value >= 0); \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveStake(uint8 period, uint256 tokens) public returns (bool success) {\r\n        require(stakeContract != address(0x0));\r\n        allowed[msg.sender][stakeContract] = tokens;\r\n        emit Approval(msg.sender, stakeContract, tokens);\r\n        require(ApproveStakeFallback(stakeContract).createStake(msg.sender, period, tokens));\r\n        return true;\r\n    }\r\n    \r\n    function approveAndCall(address spender, uint256 tokens, bytes memory data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        require(ApproveAndCallFallback(spender).receiveApproval(msg.sender, tokens, address(this), data));\r\n        return true;\r\n    }\r\n    \r\n    function tokensSold(address buyer, uint256 amount) public returns (bool success) {\r\n        require(msg.sender == crowdSaleContract);\r\n        frozenBalances[buyer] += amount;\r\n        if (timelock[buyer] == 0 ) timelock[buyer] = soldTokensUnlockTime;\r\n        return super.transfer(buyer, amount);\r\n    }\r\n}"}}}