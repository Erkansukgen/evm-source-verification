{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol":{"content":"pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"},"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol":{"content":"pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"},"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol":{"content":"pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol":{"content":"pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"tresure/Tresure.sol":{"content":"/**\r\nTokenomics:\r\n\r\n- Buy side taxes:\r\n    - 10% of each buy goes to reflections.\r\n- Sell side taxes:\r\n    - 5% of each sell to our proprietary trading algorithm; and\r\n    - 5% to the liquidity pool.\r\n- You do the marketing\r\n\r\nDistribution of profits from farming:\r\n\r\n- 50% reflected back to token holders.\r\n- 35% reflected back to farming pool.\r\n- 15% to team and advisors.\r\n\r\nWebsite:\r\nhttps://pepeclauscapital.com\r\n\r\nTelegram:\r\nhttps://t.me/PepeClausCapital\r\n\r\nTwitter:\r\nhttps://twitter.com/PepeClausC\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\r\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\r\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\";\r\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\r\n\r\n// Contract implementation\r\ncontract PEPECLAUS is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    // standard variables\r\n    string private _name = \"PEPECLAUS\";\r\n    string private _symbol = \"PCC\";\r\n    uint8 private _decimals = 18;\r\n\r\n    // baseline token construction\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _totalTokenSupply = 1 * 10**12 * 10**_decimals;\r\n    uint256 private _totalReflections = (MAX - (MAX % _totalTokenSupply));\r\n    uint256 private _totalTaxesReflectedToHodlers;\r\n    uint256 private _totalTaxesSentToTreasury;\r\n    mapping(address => uint256) private _reflectionsOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    // taxes and fees\r\n    address payable public _treasuryAddress;\r\n    uint256 private _currentTaxForReflections = 10; // modified depending on context of tx\r\n    uint256 private _currentTaxForTreasury = 10; // modified depending on context of tx\r\n    uint256 public _fixedTaxForReflections = 10; // unchanged save by owner transaction\r\n    uint256 public _fixedTaxForTreasury = 10; // unchanged save by owner transaction\r\n\r\n    // tax exempt addresses\r\n    mapping(address => bool) private _isExcludedFromTaxes;\r\n\r\n    // uniswap matters -- n.b. we are married to this particular uniswap v2 pair\r\n    // contract will not survive as is and will require migration if a new pool\r\n    // is stood up on sushiswap, uniswapv3, etc.\r\n    address private uniDefault = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    bool private _inSwap = false;\r\n    address public immutable uniswapV2Pair;\r\n\r\n    // minimum tokens to initiate a swap\r\n    uint256 private _minimumTokensToSwap = 10 * 10**3 * 10**_decimals;\r\n\r\n    modifier lockTheSwap() {\r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n\r\n    constructor(address payable treasuryAddress, address router) {\r\n        require(\r\n            (treasuryAddress != address(0)),\r\n            \"Give me the treasury address\"\r\n        );\r\n        _treasuryAddress = treasuryAddress;\r\n        _reflectionsOwned[_msgSender()] = _totalReflections;\r\n\r\n        // connect to uniswap router\r\n        if (router == address(0)) {\r\n            router = uniDefault;\r\n        }\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);\r\n\r\n        // setup uniswap pair\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        // Exclude owner, treasury, and this contract from fee\r\n        _isExcludedFromTaxes[owner()] = true;\r\n        _isExcludedFromTaxes[address(this)] = true;\r\n        _isExcludedFromTaxes[_treasuryAddress] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalTokenSupply);\r\n    }\r\n\r\n    // recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {\r\n        return;\r\n    }\r\n\r\n    // We expose this function to modify the address where the treasuryTax goes\r\n    function setTreasuryAddress(address payable treasuryAddress) external {\r\n        require(_msgSender() == _treasuryAddress, \"You cannot call this\");\r\n        require(\r\n            (treasuryAddress != address(0)),\r\n            \"Give me the treasury address\"\r\n        );\r\n        address _previousTreasuryAddress = _treasuryAddress;\r\n        _treasuryAddress = treasuryAddress;\r\n        _isExcludedFromTaxes[treasuryAddress] = true;\r\n        _isExcludedFromTaxes[_previousTreasuryAddress] = false;\r\n    }\r\n\r\n    // We allow the owner to set addresses that are unaffected by taxes\r\n    function excludeFromTaxes(address account, bool excluded)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _isExcludedFromTaxes[account] = excluded;\r\n    }\r\n\r\n    // We expose these functions to be able to modify the fees and tx amounts\r\n    function setReflectionsTax(uint256 tax) external onlyOwner {\r\n        require(tax >= 0 && tax <= 10, \"ERC20: tax out of band\");\r\n        _currentTaxForReflections = tax;\r\n        _fixedTaxForReflections = tax;\r\n    }\r\n\r\n    function setTreasuryTax(uint256 tax) external onlyOwner {\r\n        require(tax >= 0 && tax <= 10, \"ERC20: tax out of band\");\r\n        _currentTaxForTreasury = tax;\r\n        _fixedTaxForTreasury = tax;\r\n    }\r\n\r\n    // We expose these functions to be able to manual swap and send\r\n    function manualSend() external onlyOwner {\r\n        uint256 _contractETHBalance = address(this).balance;\r\n        _sendETHToTreasury(_contractETHBalance);\r\n    }\r\n\r\n    function manualSwap() external onlyOwner {\r\n        uint256 _contractBalance = balanceOf(address(this));\r\n        _swapTokensForEth(_contractBalance);\r\n    }\r\n\r\n    // public functions to do things\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    // used by smart contracts rather than users\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        uint256 currentRate = _getRate();\r\n        return _totalReflections.div(currentRate);\r\n    }\r\n\r\n    function isExcludedFromTaxes(address account) public view returns (bool) {\r\n        return _isExcludedFromTaxes[account];\r\n    }\r\n\r\n    function totalTaxesSentToReflections() public view returns (uint256) {\r\n        return tokensFromReflection(_totalTaxesReflectedToHodlers);\r\n    }\r\n\r\n    function totalTaxesSentToTreasury() public view returns (uint256) {\r\n        return tokensFromReflection(_totalTaxesSentToTreasury);\r\n    }\r\n\r\n    function getETHBalance() public view returns (uint256 balance) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokensFromReflection(_reflectionsOwned[account]);\r\n    }\r\n\r\n    function reflectionFromToken(\r\n        uint256 amountOfTokens,\r\n        bool deductTaxForReflections\r\n    ) public view returns (uint256) {\r\n        require(\r\n            amountOfTokens <= _totalTokenSupply,\r\n            \"Amount must be less than supply\"\r\n        );\r\n        if (!deductTaxForReflections) {\r\n            (uint256 reflectionsToDebit, , , ) = _getValues(amountOfTokens);\r\n            return reflectionsToDebit;\r\n        } else {\r\n            (, uint256 reflectionsToCredit, , ) = _getValues(amountOfTokens);\r\n            return reflectionsToCredit;\r\n        }\r\n    }\r\n\r\n    function tokensFromReflection(uint256 amountOfReflections)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            amountOfReflections <= _totalReflections,\r\n            \"ERC20: Amount too large\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return amountOfReflections.div(currentRate);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from 0 address\");\r\n        require(spender != address(0), \"ERC20: approve to 0 address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    // transfer function that sets up the context so that the\r\n    // _tokenTransfer function can do the accounting work\r\n    // to perform the transfer function\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amountOfTokens\r\n    ) private {\r\n        require(sender != address(0), \"ERC20: transfer from 0 address\");\r\n        require(recipient != address(0), \"ERC20: transfer to 0 address\");\r\n        require(amountOfTokens > 0, \"ERC20: Transfer more than zero\");\r\n\r\n        // if either side of transfer account belongs to _isExcludedFromTaxes\r\n        // account then remove the fee\r\n        bool takeFee = true;\r\n        if (_isExcludedFromTaxes[sender] || _isExcludedFromTaxes[recipient]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        // check if we're buy side or sell side in a swap; if buy side apply\r\n        // buy side taxes; if sell side then apply those taxes; duh\r\n        bool buySide = false;\r\n        if (sender == address(uniswapV2Pair)) {\r\n            buySide = true;\r\n        }\r\n\r\n        // based on context set the correct fee structure\r\n        if (!takeFee) {\r\n            _setNoFees();\r\n        } else if (buySide) {\r\n            _setBuySideFees();\r\n        } else {\r\n            _setSellSideFees();\r\n        }\r\n\r\n        // conduct the transfer\r\n        _tokenTransfer(sender, recipient, amountOfTokens);\r\n\r\n        // reset the fees for the next go around\r\n        _restoreAllFees();\r\n    }\r\n\r\n    // primary transfer function that does all the work\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amountOfTokens\r\n    ) private {\r\n        // when treasury transfers to the contract we automatically\r\n        // remove these reflections from pool such that all token hodlers\r\n        // benefit prorata and the treasury's reflections are removed.\r\n        //\r\n        // this allows for gas effective distribution of farming profits\r\n        // to be returned cleanly to all token hodlers.\r\n        //\r\n        // we do not emit a Transfer event here because it is not strictly\r\n        // speaking a transfer due to the lack of a recipient\r\n        if (sender == _treasuryAddress && recipient == address(this)) {\r\n            _manualReflect(amountOfTokens);\r\n            return;\r\n        }\r\n\r\n        // the below allows for a consolidated handling of the necessary\r\n        // math to support the possible transfer+tax combinations\r\n        (\r\n            uint256 reflectionsToDebit, // sender\r\n            uint256 reflectionsToCredit, // recipient\r\n            uint256 reflectionsToRemove, // to all the hodlers\r\n            uint256 reflectionsForTreasury // to treasury\r\n        ) = _getValues(amountOfTokens);\r\n\r\n        // take taxes -- this is not a tax free zone ser\r\n        _takeTreasuryTax(reflectionsForTreasury);\r\n        _takeReflectionTax(reflectionsToRemove);\r\n\r\n        // we potentially do any \"inline\" swapping after the taxes are taken\r\n        // so that we know if there's balance to take.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinTokenBalance = contractTokenBalance >= _minimumTokensToSwap;\r\n        if (!_inSwap && overMinTokenBalance && reflectionsForTreasury != 0) {\r\n            _swapTokensForEth(contractTokenBalance);\r\n        }\r\n        uint256 contractETHBalance = address(this).balance;\r\n        if (contractETHBalance > 0) {\r\n            _sendETHToTreasury(address(this).balance);\r\n        }\r\n\r\n        // debit the correct reflections from the sender's account and credit\r\n        // the correct number of reflections to the recipient's (accounting for\r\n        // taxes)\r\n        _reflectionsOwned[sender] = _reflectionsOwned[sender].sub(\r\n            reflectionsToDebit\r\n        );\r\n        _reflectionsOwned[recipient] = _reflectionsOwned[recipient].add(\r\n            reflectionsToCredit\r\n        );\r\n\r\n        // let the world know\r\n        emit Transfer(sender, recipient, reflectionsToCredit.div(_getRate()));\r\n    }\r\n\r\n    // allows for treasury to cleanly distribute earnings back to\r\n    // tokenhodlers pro rata\r\n    function _manualReflect(uint256 amountOfTokens) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 amountOfReflections = amountOfTokens.mul(currentRate);\r\n\r\n        // we remove the reflections from the treasury address and then\r\n        // burn them by removing them from the reflections pool thus\r\n        // reducing the denominator and \"distributing\" the reflections\r\n        // to all hodlers pro rata\r\n        _reflectionsOwned[_treasuryAddress] = _reflectionsOwned[\r\n            _treasuryAddress\r\n        ].sub(amountOfReflections);\r\n        _totalReflections = _totalReflections.sub(amountOfReflections);\r\n    }\r\n\r\n    // reflections are added to the balance of this contract and are\r\n    // subsequently swapped out with the uniswap pair within the same\r\n    // transaction; the resulting eth is transfered to the treasury.\r\n    //\r\n    // the below function is simple accounting which will not survive\r\n    // to the end of the transaction as long as the totaly amount of\r\n    // reflections taken by the tax are more than the _minimumTokensToSwap\r\n    //\r\n    // in the case where they are not more than _minimumTokensToSwap\r\n    // the tokens will not be swapped due to gas concerns and will simply\r\n    // accrue within the contract until the contract's acyc balance is\r\n    // more than _minimumTokensToSwap at which time the automatic swap\r\n    // will occur sending eth to the treasury.\r\n    function _takeTreasuryTax(uint256 reflectionsForTreasury) private {\r\n        _reflectionsOwned[address(this)] = _reflectionsOwned[address(this)].add(\r\n            reflectionsForTreasury\r\n        );\r\n        _totalTaxesSentToTreasury = _totalTaxesSentToTreasury.add(\r\n            reflectionsForTreasury\r\n        );\r\n    }\r\n\r\n    // reflections are \"reflected\" back to hodlers via a mechanism which\r\n    // seeks to simply remove the amount of the tax from the total reflection\r\n    // pool. since the token balance is a simple product of the amount of\r\n    // reflections a hodler has in their account to the ratio of all the\r\n    // reflections to the total token supply, removing reflections is a\r\n    // gas efficient way of applying a benefit to all hodlers pro rata as\r\n    // it lowers the denominator in the ratio thus increasing the result\r\n    // of the product. in other words, by removing reflections the\r\n    // numbers folks care about go up.\r\n    function _takeReflectionTax(uint256 reflectionsToRemove) private {\r\n        _totalReflections = _totalReflections.sub(reflectionsToRemove);\r\n        _totalTaxesReflectedToHodlers = _totalTaxesReflectedToHodlers.add(\r\n            reflectionsToRemove\r\n        );\r\n    }\r\n\r\n    // baking this in so deeply will mean if the uni v2 pool ever dries up\r\n    // then the contract will effectively stop functioning and it will need\r\n    // to be migrated\r\n    function _swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(_treasuryAddress),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _sendETHToTreasury(uint256 amount) private {\r\n        _treasuryAddress.transfer(amount);\r\n    }\r\n\r\n    // on buy side we collect tax and apply that to reflections; there is\r\n    // no tax taken for the treasury on the buy side\r\n    function _setBuySideFees() private {\r\n        _currentTaxForReflections = _fixedTaxForReflections;\r\n        _currentTaxForTreasury = 0;\r\n    }\r\n\r\n    // on sell side we collect tax and apply that to the treasury account;\r\n    // there is no sell side tax taken for reflections\r\n    function _setSellSideFees() private {\r\n        _currentTaxForReflections = 0;\r\n        _currentTaxForTreasury = _fixedTaxForTreasury;\r\n    }\r\n\r\n    // if a tax exempt address is transfering we turn off all the taxes\r\n    function _setNoFees() private {\r\n        _currentTaxForReflections = 0;\r\n        _currentTaxForTreasury = 0;\r\n    }\r\n\r\n    // once a transfer occurs we reset the taxes. this is strictly speaking\r\n    // not necessary due to the construction of the transfer function which\r\n    // will opinionated-ly always set the tax structure before performing\r\n    // the math (in the functions below). however, for reasons of super-\r\n    // stition it remains\r\n    function _restoreAllFees() private {\r\n        _currentTaxForReflections = _fixedTaxForReflections;\r\n        _currentTaxForTreasury = _fixedTaxForTreasury;\r\n    }\r\n\r\n    // this function is the primary math function which calculates the\r\n    // proper accounting to support a transfer based on the context of\r\n    // that transfer (buy side; sell side; tax free).\r\n    function _getValues(uint256 amountOfTokens)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        // given tokens split those out into what goes where (reflections,\r\n        // treasury, and recipient)\r\n        (\r\n            uint256 tokensToTransfer,\r\n            uint256 tokensForReflections,\r\n            uint256 tokensForTreasury\r\n        ) = _getTokenValues(amountOfTokens);\r\n\r\n        // given the proper split of tokens, turn those into reflections\r\n        // based on the current ratio of _tokenTokenSupply:_totalReflections\r\n        uint256 currentRate = _getRate();\r\n        uint256 reflectionsTotal = amountOfTokens.mul(currentRate);\r\n        uint256 reflectionsToTransfer = tokensToTransfer.mul(currentRate);\r\n        uint256 reflectionsToRemove = tokensForReflections.mul(currentRate);\r\n        uint256 reflectionsForTreasury = tokensForTreasury.mul(currentRate);\r\n\r\n        return (\r\n            reflectionsTotal,\r\n            reflectionsToTransfer,\r\n            reflectionsToRemove,\r\n            reflectionsForTreasury\r\n        );\r\n    }\r\n\r\n    // the golden and necssary function that allows us to calculate the\r\n    // ratio of total token supply to total reflections on which the\r\n    // entire token accounting infrastructure resides\r\n    function _getRate() private view returns (uint256) {\r\n        return _totalReflections.div(_totalTokenSupply);\r\n    }\r\n\r\n    // the below function calculates where tokens needs to go based on the\r\n    // inputted amount of tokens. n.b., this function does not work in\r\n    // reflections, those typically happen later in the processing when the\r\n    // token distribution calculated by this function is turned to reflections\r\n    // based on the golden ratio of total token supply to total reflections.\r\n    function _getTokenValues(uint256 amountOfTokens)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 tokensForReflections = amountOfTokens\r\n            .mul(_currentTaxForReflections)\r\n            .div(100);\r\n        uint256 tokensForTreasury = amountOfTokens\r\n            .mul(_currentTaxForTreasury)\r\n            .div(100);\r\n        uint256 tokensToTransfer = amountOfTokens.sub(tokensForReflections).sub(\r\n            tokensForTreasury\r\n        );\r\n        return (tokensToTransfer, tokensForReflections, tokensForTreasury);\r\n    }\r\n}"}}}