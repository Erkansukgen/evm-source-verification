{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"mrRipper2.sol":{"content":" pragma solidity ^0.7.5;\r\n // SPDX-License-Identifier: UNLICENCED\r\n\r\n// Addresses ---\r\naddress constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\naddress constant MKR_ADDRESS = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\r\naddress constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\naddress constant VOW_ADDRESS = 0xA950524441892A31ebddF91d3cEEFa04Bf454466;\r\naddress constant JUG_ADDRESS = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\naddress constant FLAP_ADDRESS = 0xC4269cC7acDEdC3794b221aA4D9205F564e27f0d;\r\naddress constant DAI_JOIN = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\r\n\r\n\r\n// Interfaces  -----------------------------------------------\r\ninterface Join {\r\n    function exit(address, uint) external;\r\n}\r\ninterface Jug {\r\n    function drip(bytes32) external returns (uint);\r\n}\r\ninterface Vat {\r\n    function hope(address) external;\r\n    function dai(address) external returns (uint);\r\n    function sin(address) external returns (uint);\r\n}\r\ninterface Vow {\r\n    function flap() external returns (uint);\r\n    function Sin() external returns (uint);\r\n    function Ash() external returns (uint);\r\n    function heal(uint256) external;\r\n\r\n}\r\ninterface ERC20 {\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n}\r\ninterface Flapper {\r\n    function tend(uint id, uint lot, uint bid) external;\r\n    function deal(uint id) external;\r\n    function kicks() external returns(uint);\r\n}\r\n\r\n\r\n// Owner and whitelist functionality ---------------------------------------------------------\r\ncontract Managed {\r\n\r\n    address payable public owner;\r\n    mapping(address => bool) public isWorker;\r\n\r\n    constructor(address payable _owner, address[] memory workers) {\r\n        owner = _owner;\r\n        for(uint i = 0; i < workers.length; i += 1){\r\n            isWorker[workers[i]] = true;\r\n        }\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"O\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyWorker(){\r\n         require(isWorker[msg.sender] || msg.sender == owner, \"W\");\r\n        _;\r\n    }\r\n\r\n    function addWorker(address w) public onlyOwner {\r\n        isWorker[w] = true;\r\n    }\r\n\r\n    function removeWorker(address w) public onlyOwner {\r\n        isWorker[w] = false;\r\n    }\r\n\r\n    function transferOwnership(address payable new_owner) public onlyOwner {\r\n        owner = new_owner;\r\n    }\r\n}\r\n\r\n\r\n// Main contract  ---------------------------------------------------------\r\ncontract MrRipper is Managed {\r\n\r\n    // Deployment parameters : \r\n    // _owner : 0x008Ca3a9C52e0F0d9Ee94d310D20d67399d44f6C\r\n    // workers : [\"0x008Ca3a9C52e0F0d9Ee94d310D20d67399d44f6C\",\"0x00173A1479EFe831EAB2b86e89990a46307746aF\"]\r\n\r\n    constructor(address payable _owner, address[] memory workers) Managed(_owner, workers) {\r\n        ERC20(MKR_ADDRESS).approve(FLAP_ADDRESS, 1e77); // Flapper is approved to take MKR from the contract\r\n        Vat(VAT_ADDRESS).hope(DAI_JOIN); // Joiner is authorized to take contract's DAI from the vat. Necessary for exit.\r\n    }\r\n\r\n    // Owner only functions\r\n    function withdrawToken(address token) public onlyOwner {\r\n        uint balance = ERC20(token).balanceOf(address(this));\r\n        ERC20(token).transfer(msg.sender, balance);\r\n    }\r\n\r\n    function exitAndWithdrawDAI() public onlyOwner {\r\n        uint amount = Vat(VAT_ADDRESS).dai(address(this)) / (10**27);\r\n        Join(DAI_JOIN).exit(address(this), amount);\r\n        withdrawToken(DAI_ADDRESS);\r\n    }\r\n\r\n    function multiKick(uint256 n) public onlyWorker {\r\n        for(uint i = 0; i < n; i += 1) {\r\n            // Kick auction and place bid\r\n            uint id = Vow(VOW_ADDRESS).flap();\r\n            Flapper(FLAP_ADDRESS).tend(id, 30000 * 1e45, 1);\r\n        }\r\n    }\r\n\r\n}\r\n"}}}