{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"SwapCollateralizedToOriginal.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.4;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n/**\n * @title IERC1363 Interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for a Payable Token contract as defined in\n *  https://eips.ethereum.org/EIPS/eip-1363\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /**\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\n     * @param recipient address The address which you want to transfer to\n     * @param amount uint256 The amount of tokens to be transferred\n     * @return true unless throwing\n     */\n    function transferAndCall(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\n     * @param recipient address The address which you want to transfer to\n     * @param amount uint256 The amount of tokens to be transferred\n     * @param data bytes Additional data with no specified format, sent in call to `recipient`\n     * @return true unless throwing\n     */\n    function transferAndCall(\n        address recipient,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n\n    /**\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\n     * @param sender address The address which you want to send tokens from\n     * @param recipient address The address which you want to transfer to\n     * @param amount uint256 The amount of tokens to be transferred\n     * @return true unless throwing\n     */\n    function transferFromAndCall(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\n     * @param sender address The address which you want to send tokens from\n     * @param recipient address The address which you want to transfer to\n     * @param amount uint256 The amount of tokens to be transferred\n     * @param data bytes Additional data with no specified format, sent in call to `recipient`\n     * @return true unless throwing\n     */\n    function transferFromAndCall(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n\n    /**\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     * and then call `onApprovalReceived` on spender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender address The address which will spend the funds\n     * @param amount uint256 The amount of tokens to be spent\n     */\n    function approveAndCall(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     * and then call `onApprovalReceived` on spender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender address The address which will spend the funds\n     * @param amount uint256 The amount of tokens to be spent\n     * @param data bytes Additional data with no specified format, sent in call to `spender`\n     */\n    function approveAndCall(\n        address spender,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}\n\n/**\n * @title IERC1363Receiver Interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for any contract that wants to support transferAndCall or transferFromAndCall\n *  from ERC1363 token contracts as defined in\n *  https://eips.ethereum.org/EIPS/eip-1363\n */\ninterface IERC1363Receiver {\n    /**\n     * @notice Handle the receipt of ERC1363 tokens\n     * @dev Any ERC1363 smart contract calls this function on the recipient\n     * after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\n     * transfer. Return of other than the magic value MUST result in the\n     * transaction being reverted.\n     * Note: the token contract address is always the message sender.\n     * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\n     * @param sender address The address which are token transferred from\n     * @param amount uint256 The amount of tokens transferred\n     * @param data bytes Additional data with no specified format\n     * @return `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))` unless throwing\n     */\n    function onTransferReceived(\n        address operator,\n        address sender,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @title IERC1363Spender Interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for any contract that wants to support approveAndCall\n *  from ERC1363 token contracts as defined in\n *  https://eips.ethereum.org/EIPS/eip-1363\n */\ninterface IERC1363Spender {\n    /**\n     * @notice Handle the approval of ERC1363 tokens\n     * @dev Any ERC1363 smart contract calls this function on the recipient\n     * after an `approve`. This function MAY throw to revert and reject the\n     * approval. Return of other than the magic value MUST result in the\n     * transaction being reverted.\n     * Note: the token contract address is always the message sender.\n     * @param sender address The address which called `approveAndCall` function\n     * @param amount uint256 The amount of tokens to be spent\n     * @param data bytes Additional data with no specified format\n     * @return `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))` unless throwing\n     */\n    function onApprovalReceived(\n        address sender,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165(account).supportsInterface.selector, interfaceId);\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\n        if (result.length < 32) return false;\n        return success && abi.decode(result, (bool));\n    }\n}\n\n/**\n * @title ERC1363Payable\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Implementation proposal of a contract that wants to accept ERC1363 payments\n */\ncontract ERC1363Payable is IERC1363Receiver, IERC1363Spender, ERC165, Context {\n    using ERC165Checker for address;\n\n    /**\n     * @dev Emitted when `amount` tokens are moved from one account (`sender`) to\n     * this by operator (`operator`) using {transferAndCall} or {transferFromAndCall}.\n     */\n    event TokensReceived(address indexed operator, address indexed sender, uint256 amount, bytes data);\n\n    /**\n     * @dev Emitted when the allowance of this for a `sender` is set by\n     * a call to {approveAndCall}. `amount` is the new allowance.\n     */\n    event TokensApproved(address indexed sender, uint256 amount, bytes data);\n\n    // The ERC1363 token accepted\n    IERC1363 private _acceptedToken;\n\n    /**\n     * @param acceptedToken_ Address of the token being accepted\n     */\n    constructor(IERC1363 acceptedToken_) {\n        require(address(acceptedToken_) != address(0), \"ERC1363Payable: acceptedToken is zero address\");\n\n        _acceptedToken = acceptedToken_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1363Receiver).interfaceId ||\n            interfaceId == type(IERC1363Spender).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /*\n     * @dev Note: remember that the token contract address is always the message sender.\n     * @param operator The address which called `transferAndCall` or `transferFromAndCall` function\n     * @param sender The address which are token transferred from\n     * @param amount The amount of tokens transferred\n     * @param data Additional data with no specified format\n     */\n    function onTransferReceived(\n        address operator,\n        address sender,\n        uint256 amount,\n        bytes memory data\n    ) public override returns (bytes4) {\n        require(_msgSender() == address(_acceptedToken), \"ERC1363Payable: acceptedToken is not message sender\");\n\n        emit TokensReceived(operator, sender, amount, data);\n\n        _transferReceived(operator, sender, amount, data);\n\n        return IERC1363Receiver(this).onTransferReceived.selector;\n    }\n\n    /*\n     * @dev Note: remember that the token contract address is always the message sender.\n     * @param sender The address which called `approveAndCall` function\n     * @param amount The amount of tokens to be spent\n     * @param data Additional data with no specified format\n     */\n    function onApprovalReceived(\n        address sender,\n        uint256 amount,\n        bytes memory data\n    ) public override returns (bytes4) {\n        require(_msgSender() == address(_acceptedToken), \"ERC1363Payable: acceptedToken is not message sender\");\n\n        emit TokensApproved(sender, amount, data);\n\n        _approvalReceived(sender, amount, data);\n\n        return IERC1363Spender(this).onApprovalReceived.selector;\n    }\n\n    /**\n     * @dev The ERC1363 token accepted\n     */\n    function acceptedToken() public view returns (IERC1363) {\n        return _acceptedToken;\n    }\n\n    /**\n     * @dev Called after validating a `onTransferReceived`. Override this method to\n     * make your stuffs within your contract.\n     * @param operator The address which called `transferAndCall` or `transferFromAndCall` function\n     * @param sender The address which are token transferred from\n     * @param amount The amount of tokens transferred\n     * @param data Additional data with no specified format\n     */\n    function _transferReceived(\n        address operator,\n        address sender,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        // optional override\n    }\n\n    /**\n     * @dev Called after validating a `onApprovalReceived`. Override this method to\n     * make your stuffs within your contract.\n     * @param sender The address which called `approveAndCall` function\n     * @param amount The amount of tokens to be spent\n     * @param data Additional data with no specified format\n     */\n    function _approvalReceived(\n        address sender,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        // optional override\n    }\n}\n\ncontract SwapCollateralizedToOriginal is ERC1363Payable {\n    IERC20 public originalToken_;\n    IERC20 public collateralizedToken_;\n    uint32 public interestBasisPoints_;\n    uint256 public unlockTimestamp_;\n    address public unlockAdmin_;\n    address public withdrawAdmin_;\n    address public collateralOwner_;\n    \n    event SetUnlockTimestamp(uint256 newUnlockTimestamp);\n    event WithdrawUnusedCollateral(address indexed to, uint256 amount);\n    event Swap(uint8 swapType, address indexed sender, uint256 collateralizedAmount, uint256 originalAmount);\n    \n    constructor(\n        address _originalToken,\n        address _collateralizedToken, // MUST be ERC1363 compliant\n        uint32  _interestBasisPoints,\n        uint256 _unlockTimestamp,\n        address _unlockAdmin,\n        address _withdrawAdmin,\n        address _collateralOwner) ERC1363Payable(IERC1363(_collateralizedToken)) {\n\n        //require(IERC20Metadata(address(_originalToken)).decimals() == IERC20Metadata(address(_collateralizedToken)).decimals(), \"ERR_DECIMALS_MISMATCH\");\n\n        originalToken_ = IERC20(_originalToken);\n        collateralizedToken_ = IERC20(_collateralizedToken);\n        interestBasisPoints_ = _interestBasisPoints;\n        unlockTimestamp_ = _unlockTimestamp;\n        unlockAdmin_ = _unlockAdmin;\n        withdrawAdmin_ = _withdrawAdmin;\n        collateralOwner_ = _collateralOwner;\n        \n        emit SetUnlockTimestamp(_unlockTimestamp);\n    }\n    \n    function setUnlockTimestamp(uint256 _newUnlockTimestamp) external {\n        require(msg.sender == unlockAdmin_, \"ERR_AUTH\");\n        \n        unlockTimestamp_ = _newUnlockTimestamp;\n        \n        emit SetUnlockTimestamp(_newUnlockTimestamp);\n    }\n    \n    function withdrawUnusedCollateral(uint256 _amount) external {\n        require(msg.sender == withdrawAdmin_ || msg.sender == collateralOwner_, \"ERR_AUTH\");\n        \n        uint256 amount = _amount == 0 ? originalToken_.balanceOf(address(this)) : _amount;\n\n        originalToken_.transfer(collateralOwner_, amount);\n        \n        emit WithdrawUnusedCollateral(collateralOwner_, amount);\n    }\n    \n    function swap(uint256 _collateralizedAmount) external {\n        uint256 collateralizedAmount = _collateralizedAmount == 0\n            ? collateralizedToken_.allowance(msg.sender, address(this))\n            : _collateralizedAmount;\n\n        require(collateralizedAmount > 0, \"ERR_ZERO_AMOUNT\");\n        \n        collateralizedToken_.transferFrom(msg.sender, address(this), collateralizedAmount);\n        \n        _swapComplete(0, msg.sender, collateralizedAmount);\n    }\n    \n    function calcOriginalByCollateralized(uint256 _collateralizedAmount) public view returns (uint256) {\n        return _collateralizedAmount + ((_collateralizedAmount * interestBasisPoints_) / 10000);\n    }\n    \n    function calcCollateralizedByOriginal(uint256 _originalAmount) external view returns (uint256) {\n        return (_originalAmount * 10000) / (10000 + interestBasisPoints_);\n    }\n    \n    function _transferReceived(address /*_operator*/, address _sender, uint256 _collateralizedAmount, bytes memory/* _data*/) internal virtual override {\n        _swapComplete(1, _sender, _collateralizedAmount);\n    }\n    \n    function _swapComplete(uint8 _swapType, address _sender, uint256 _collateralizedAmount) private {\n        require(block.timestamp >= unlockTimestamp_, \"ERR_NOT_YET_UNLOCKED\");\n        \n        uint256 originalAmount = calcOriginalByCollateralized(_collateralizedAmount);\n        \n        originalToken_.transfer(_sender, originalAmount);\n        \n        emit Swap(_swapType, _sender, _collateralizedAmount, originalAmount);\n    }\n}"}}}