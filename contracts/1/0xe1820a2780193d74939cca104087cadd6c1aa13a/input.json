{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "CalcFab.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published\n// by the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity >=0.6.12;\n\ninterface Abacus {\n    // 1st arg: initial price               [ray]\n    // 2nd arg: seconds since auction start [seconds]\n    // returns: current auction price       [ray]\n    function price(uint256, uint256) external view returns (uint256);\n}\n\ncontract LinearDecrease is Abacus {\n\n    // --- Auth ---\n    mapping (address => uint256) public wards;\n    function rely(address usr) external auth { wards[usr] = 1; emit Rely(usr); }\n    function deny(address usr) external auth { wards[usr] = 0; emit Deny(usr); }\n    modifier auth {\n        require(wards[msg.sender] == 1, \"LinearDecrease/not-authorized\");\n        _;\n    }\n\n    // --- Data ---\n    uint256 public tau;  // Seconds after auction start when the price reaches zero [seconds]\n\n    // --- Events ---\n    event Rely(address indexed usr);\n    event Deny(address indexed usr);\n\n    event File(bytes32 indexed what, uint256 data);\n\n    // --- Init ---\n    constructor() public {\n        wards[msg.sender] = 1;\n        emit Rely(msg.sender);\n    }\n\n    // --- Administration ---\n    function file(bytes32 what, uint256 data) external auth {\n        if (what ==  \"tau\") tau = data;\n        else revert(\"LinearDecrease/file-unrecognized-param\");\n        emit File(what, data);\n    }\n\n    // --- Math ---\n    uint256 constant RAY = 10 ** 27;\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x * y;\n        require(y == 0 || z / y == x);\n        z = z / RAY;\n    }\n\n    // Price calculation when price is decreased linearly in proportion to time:\n    // tau: The number of seconds after the start of the auction where the price will hit 0\n    // top: Initial price\n    // dur: current seconds since the start of the auction\n    //\n    // Returns y = top * ((tau - dur) / tau)\n    //\n    // Note the internal call to mul multiples by RAY, thereby ensuring that the rmul calculation\n    // which utilizes top and tau (RAY values) is also a RAY value.\n    function price(uint256 top, uint256 dur) override external view returns (uint256) {\n        if (dur >= tau) return 0;\n        return rmul(top, mul(tau - dur, RAY) / tau);\n    }\n}\n\ncontract StairstepExponentialDecrease is Abacus {\n\n    // --- Auth ---\n    mapping (address => uint256) public wards;\n    function rely(address usr) external auth { wards[usr] = 1; emit Rely(usr); }\n    function deny(address usr) external auth { wards[usr] = 0; emit Deny(usr); }\n    modifier auth {\n        require(wards[msg.sender] == 1, \"StairstepExponentialDecrease/not-authorized\");\n        _;\n    }\n\n    // --- Data ---\n    uint256 public step; // Length of time between price drops [seconds]\n    uint256 public cut;  // Per-step multiplicative factor     [ray]\n\n    // --- Events ---\n    event Rely(address indexed usr);\n    event Deny(address indexed usr);\n\n    event File(bytes32 indexed what, uint256 data);\n\n    // --- Init ---\n    // @notice: `cut` and `step` values must be correctly set for\n    //     this contract to return a valid price\n    constructor() public {\n        wards[msg.sender] = 1;\n        emit Rely(msg.sender);\n    }\n\n    // --- Administration ---\n    function file(bytes32 what, uint256 data) external auth {\n        if      (what ==  \"cut\") require((cut = data) <= RAY, \"StairstepExponentialDecrease/cut-gt-RAY\");\n        else if (what == \"step\") step = data;\n        else revert(\"StairstepExponentialDecrease/file-unrecognized-param\");\n        emit File(what, data);\n    }\n\n    // --- Math ---\n    uint256 constant RAY = 10 ** 27;\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x * y;\n        require(y == 0 || z / y == x);\n        z = z / RAY;\n    }\n    // optimized version from dss PR #78\n    function rpow(uint256 x, uint256 n, uint256 b) internal pure returns (uint256 z) {\n        assembly {\n            switch n case 0 { z := b }\n            default {\n                switch x case 0 { z := 0 }\n                default {\n                    switch mod(n, 2) case 0 { z := b } default { z := x }\n                    let half := div(b, 2)  // for rounding.\n                    for { n := div(n, 2) } n { n := div(n,2) } {\n                        let xx := mul(x, x)\n                        if shr(128, x) { revert(0,0) }\n                        let xxRound := add(xx, half)\n                        if lt(xxRound, xx) { revert(0,0) }\n                        x := div(xxRound, b)\n                        if mod(n,2) {\n                            let zx := mul(z, x)\n                            if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n                            let zxRound := add(zx, half)\n                            if lt(zxRound, zx) { revert(0,0) }\n                            z := div(zxRound, b)\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // top: initial price\n    // dur: seconds since the auction has started\n    // step: seconds between a price drop\n    // cut: cut encodes the percentage to decrease per step.\n    //   For efficiency, the values is set as (1 - (% value / 100)) * RAY\n    //   So, for a 1% decrease per step, cut would be (1 - 0.01) * RAY\n    //\n    // returns: top * (cut ^ dur)\n    //\n    //\n    function price(uint256 top, uint256 dur) override external view returns (uint256) {\n        return rmul(top, rpow(cut, dur / step, RAY));\n    }\n}\n\n// While an equivalent function can be obtained by setting step = 1 in StairstepExponentialDecrease,\n// this continous (i.e. per-second) exponential decrease has be implemented as it is more gas-efficient\n// than using the stairstep version with step = 1 (primarily due to 1 fewer SLOAD per price calculation).\ncontract ExponentialDecrease is Abacus {\n\n    // --- Auth ---\n    mapping (address => uint256) public wards;\n    function rely(address usr) external auth { wards[usr] = 1; emit Rely(usr); }\n    function deny(address usr) external auth { wards[usr] = 0; emit Deny(usr); }\n    modifier auth {\n        require(wards[msg.sender] == 1, \"ExponentialDecrease/not-authorized\");\n        _;\n    }\n\n    // --- Data ---\n    uint256 public cut;  // Per-second multiplicative factor [ray]\n\n    // --- Events ---\n    event Rely(address indexed usr);\n    event Deny(address indexed usr);\n\n    event File(bytes32 indexed what, uint256 data);\n\n    // --- Init ---\n    // @notice: `cut` value must be correctly set for\n    //     this contract to return a valid price\n    constructor() public {\n        wards[msg.sender] = 1;\n        emit Rely(msg.sender);\n    }\n\n    // --- Administration ---\n    function file(bytes32 what, uint256 data) external auth {\n        if      (what ==  \"cut\") require((cut = data) <= RAY, \"ExponentialDecrease/cut-gt-RAY\");\n        else revert(\"ExponentialDecrease/file-unrecognized-param\");\n        emit File(what, data);\n    }\n\n    // --- Math ---\n    uint256 constant RAY = 10 ** 27;\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x * y;\n        require(y == 0 || z / y == x);\n        z = z / RAY;\n    }\n    // optimized version from dss PR #78\n    function rpow(uint256 x, uint256 n, uint256 b) internal pure returns (uint256 z) {\n        assembly {\n            switch n case 0 { z := b }\n            default {\n                switch x case 0 { z := 0 }\n                default {\n                    switch mod(n, 2) case 0 { z := b } default { z := x }\n                    let half := div(b, 2)  // for rounding.\n                    for { n := div(n, 2) } n { n := div(n,2) } {\n                        let xx := mul(x, x)\n                        if shr(128, x) { revert(0,0) }\n                        let xxRound := add(xx, half)\n                        if lt(xxRound, xx) { revert(0,0) }\n                        x := div(xxRound, b)\n                        if mod(n,2) {\n                            let zx := mul(z, x)\n                            if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n                            let zxRound := add(zx, half)\n                            if lt(zxRound, zx) { revert(0,0) }\n                            z := div(zxRound, b)\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // top: initial price\n    // dur: seconds since the auction has started\n    // cut: cut encodes the percentage to decrease per second.\n    //   For efficiency, the values is set as (1 - (% value / 100)) * RAY\n    //   So, for a 1% decrease per second, cut would be (1 - 0.01) * RAY\n    //\n    // returns: top * (cut ^ dur)\n    //\n    function price(uint256 top, uint256 dur) override external view returns (uint256) {\n        return rmul(top, rpow(cut, dur, RAY));\n    }\n}\n\n/// DssDeploy.sol\n\n// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity >=0.5.12; */\n\ncontract CalcFab {\n    function newLinearDecrease(address owner) public returns (LinearDecrease calc) {\n        calc = new LinearDecrease();\n        calc.rely(owner);\n        calc.deny(address(this));\n    }\n\n    function newStairstepExponentialDecrease(address owner) public returns (StairstepExponentialDecrease calc) {\n        calc = new StairstepExponentialDecrease();\n        calc.rely(owner);\n        calc.deny(address(this));\n    }\n\n    function newExponentialDecrease(address owner) public returns (ExponentialDecrease calc) {\n        calc = new ExponentialDecrease();\n        calc.rely(owner);\n        calc.deny(address(this));\n    }\n}\n"
    }
  }
}