{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/g.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.6;\r\nimport \"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\";\r\nimport \"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IERC20.sol\";\r\ncontract UniswapTokenSwap {\r\n   \r\n    address internal constant UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    \r\n    IUniswapV2Router02 public uniswapRouter;\r\n    address private _owner;\r\n    event chaxun(uint);\r\n    constructor() public {\r\n        _owner == msg.sender;\r\n        uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Caller is not the owner.\");\r\n        _;\r\n    }\r\n\r\n    function convertETHtoExactERC20(address _token, uint _amount) public payable {\r\n        uint deadline = now + 45;\r\n        uint256 amount = _amount;\r\n        address[] memory path = getPathFromETHtoERC20(_token);\r\n        uniswapRouter.swapETHForExactTokens{value: msg.value}(amount, path, address(this), deadline);\r\n        \r\n        //(bool success,) = di.call{value: address(this).balance}(\"\");\r\n        //require(success, \"refund failed\");\r\n    }\r\n\r\n    function convertExactERC20toETH(address _token, uint _amountIn, uint _amountOutMin) public payable {\r\n        uint deadline = now + 45;\r\n        uint256 amountIn = _amountIn;\r\n        uint256 amountOutMin = _amountOutMin ;\r\n        IERC20 token = IERC20(_token);\r\n        token.approve(UNISWAP_ROUTER_ADDRESS, amountIn);\r\n        address[] memory path = getPathFromERC20toETH(_token);\r\n        uniswapRouter.swapExactTokensForETH(amountIn, amountOutMin, path, address(this), deadline);\r\n        emit chaxun(address(this).balance);\r\n        (bool success,) = msg.sender.call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n\r\n\r\n    function getEstimatedETHforERC20(address _token, uint _amount) public view returns (uint) {\r\n        uint256 amount = _amount;\r\n        \r\n        uint[] memory estimated = uniswapRouter.getAmountsIn(amount, getPathFromETHtoERC20(_token));\r\n        return estimated[0];\r\n    }\r\n\r\n    function getPathFromETHtoERC20(address _token) private view returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapRouter.WETH();\r\n        path[1] = _token;\r\n        return path;\r\n    }\r\n\r\n    function getPathFromERC20toETH(address _token) private view returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = _token;\r\n        path[1] = uniswapRouter.WETH();\r\n        return path;\r\n    }\r\n\r\n       // fallback function\r\n    receive() payable external {}\r\n    function withdrawETH() external payable onlyOwner {\r\n        \r\n        msg.sender.transfer(address(this).balance);\r\n  \r\n    }\r\n\r\n    function withdrawERC20(IERC20 token) external payable onlyOwner {\r\n        token.transfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n}"},"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IERC20.sol":{"content":"pragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"},"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol":{"content":"pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol":{"content":"pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"}}}