{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/lambo.sol":{"content":"/*\n * @title: LAMBO\n * @website: lambotoken.finance\n * @telegram: @lambotokenofficial\n *   _        _______  _______  ______   _______\n * ( \\      (  ___  )(       )(  ___ \\ (  ___  )\n * | (      | (   ) || () () || (   ) )| (   ) |\n * | |      | (___) || || || || (__/ / | |   | |\n * | |      |  ___  || |(_)| ||  __ (  | |   | |\n * | |      | (   ) || |   | || (  \\ \\ | |   | |\n * | (____/\\| )   ( || )   ( || )___) )| (___) |\n * (_______/|/     \\||/     \\||/ \\___/ (_______)\n *\n * 1.5% burned with every transaction to inject nitrous oxide into our engines\n * On a mission to make 1 Lambo worth 1 Lamborghini\n */\n\n\n\npragma solidity ^0.7.1;\ninterface tokenRecipient {\n    function receiveApproval(address _from, uint256 _value, uint256 _extraData) external;\n}\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n  function balanceOf(address who) external view returns (uint256);\n  function allowance(address owner, address spender) external view returns (uint256);\n  function transfer(address to, uint256 value) external returns (bool);\n  function approve(address spender, uint256 value) external returns (bool);\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\nlibrary SafeMath { //Safe Maths\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n}\ncontract LAMBO is IERC20 {\n  using SafeMath for uint256;\n  mapping (address => uint256) private _balances;\n  mapping (address => mapping (address => uint256)) private _allowed;\n  string constant tokenName = \"LAMBOtoken.finance\";\n  string constant tokenSymbol = \"LAMBO\";\n  uint8  constant tokenDecimals = 18;\n  address addrOwner;\n  address payable payOwner;\n  uint256 private _totalSupply = 1000000000000000000000;\n  uint256 private constant _supplyCap = 2000000000000000000000;\n  uint256 public basePercent = 150;\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n  string private _description;\n  constructor() {\n    addrOwner = msg.sender;\n    _issue(addrOwner, _totalSupply);\n    _name = \"LAMBOtoken.finance\";\n    _symbol = \"LAMBO\";\n    _decimals = 18;\n    _description = \"On a mission to make 1 Lambo worth 1 Lamborghini.\";\n  }\n  function name() public view returns(string memory) {\n    return _name;\n  }\n  function symbol() public view returns(string memory) {\n    return _symbol;\n  }\n  function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == addrOwner);\n    _;\n  }\n   function supplyCap() public pure returns (uint256) {\n     return _supplyCap;\n   }\n  function totalSupply() public override view returns (uint256) {\n    return _totalSupply;\n  }\n  function balanceOf(address owner) public override view returns (uint256) {\n    return _balances[owner];\n  }\n  function allowance(address owner, address spender) public override view returns (uint256) {\n    return _allowed[owner][spender];\n  }\n  function slash(uint256 value) public view returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 slashValue = roundValue.mul(basePercent).div(10000); //Burn\n    return slashValue;\n  }\n  function transfer(address to, uint256 value) public override returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(to != address(0));\n    uint256 tokensToBurn = slash(value);  // Burn on transfer\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\n    _balances[to] = _balances[to].add(tokensToTransfer);\n    _totalSupply = _totalSupply.sub(tokensToBurn);\n    emit Transfer(msg.sender, to, tokensToTransfer);\n    emit Transfer(msg.sender, address(0), tokensToBurn);\n    return true;\n  }\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (\n    _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (\n    _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n  function _transfer(address from, address to, uint256 value) internal {\n    require(to != address(0));\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n  function approve(address spender, uint256 value) public override returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n  function transferFrom(address from, address to, uint256 value) public override returns (bool) {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n    _balances[from] = _balances[from].sub(value);\n    uint256 tokensToBurn = slash(value);  //Burn on transfer\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\n    _balances[to] = _balances[to].add(tokensToTransfer);\n    _totalSupply = _totalSupply.sub(tokensToBurn);\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    emit Transfer(from, to, tokensToTransfer);\n    emit Transfer(from, address(0), tokensToBurn);\n    return true;\n  }\n  function _issue(address account, uint256 amount) internal {\n    require(amount != 0);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n  function burn(uint256 amount) external {\n    _burn(msg.sender, amount);\n  }\n  function _burn(address account, uint256 amount) internal {\n    require(amount != 0);\n    require(amount <= _balances[account]);\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n  function burnFrom(address account, uint256 amount) external {\n    require(amount <= _allowed[account][msg.sender]);\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n    _burn(account, amount);\n  }\n  function _mint(address account, uint256 value) internal {\n    require(account != address(0));\n    require(totalSupply().add(value) <= _supplyCap);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n  function mint(address to, uint256 value) public onlyOwner returns (bool) {\n    _mint(to, value);\n    return true;\n  }\n  receive() external payable {\n  }\n  function withdrawTRX() public onlyOwner {\n    payOwner.transfer(address(this).balance);\n  }\n  function setOwner(address _newOwner) external onlyOwner {\n    require(_newOwner != address(0) && _newOwner != addrOwner);\n    addrOwner = _newOwner;\n  }\n} \n"}}}