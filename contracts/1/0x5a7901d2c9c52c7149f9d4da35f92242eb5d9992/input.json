{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/ProofOfExistence.sol":{"content":"pragma solidity ^0.6.0;\n\ncontract ProofOfExistence {\n    \n    struct Record {\n        uint mineTime;\n        uint blockNumber;\n    }\n  \n    mapping (bytes32 => Record) private proofs;\n    \n    event DocumentNotarized(\n        address from,\n        bytes32 hash,\n        uint mineTime,\n        uint blockNumber\n    );\n    \n    function notarize(bytes32 hash) public {\n        require(proofs[hash].mineTime == 0);\n        Record memory newRecord = Record(now, block.number);\n        proofs[hash] = newRecord;\n        emit DocumentNotarized(msg.sender, hash, newRecord.mineTime, newRecord.blockNumber);\n    }\n    \n    function getByHash(bytes32 hash) public view returns (uint, uint) {\n        return (proofs[hash].mineTime, proofs[hash].blockNumber);        \n    }\n}\n"}}}