{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"pool.sol":{"content":"/**\n *Submitted for verification at Etherscan.io on 2021-09-27\n*/\n\n// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\npragma abicoder v2;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n    function sqrrt(uint256 a) internal pure returns (uint c) {\n        if (a > 3) {\n            c = a;\n            uint b = add( div( a, 2), 1 );\n            while (b < c) {\n                c = b;\n                b = div( add( div( a, b ), b), 2 );\n            }\n        } else if (a != 0) {\n            c = 1;\n        }\n    }\n}\n\nlibrary Address {\n\n    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            if (returndata.length > 0) {\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n\n    function addressToString(address _address) internal pure returns(string memory) {\n        bytes32 _bytes = bytes32(uint256(_address));\n        bytes memory HEX = \"0123456789abcdef\";\n        bytes memory _addr = new bytes(42);\n\n        _addr[0] = '0';\n        _addr[1] = 'x';\n\n        for(uint256 i = 0; i < 20; i++) {\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\n        }\n\n        return string(_addr);\n\n    }\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ninterface IERC20 {\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    function mint( address to, uint amount ) external;\n\n    function burn( address from, uint amount ) external;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\ncontract StablePool {\n\n    using SafeMath for uint;\n    using SafeERC20 for IERC20;\n\n\n\n    /* ========== STRUCTS ========== */\n\n    struct PoolToken {\n        uint lowAP; // 5 decimals\n        uint highAP; // 5 decimals\n        bool accepting; // can send in (swap or add)\n        bool pushed; // pushed to poolTokens\n    }\n\n    struct Fee {\n        uint fee;\n        uint collected;\n        address collector;\n    }\n\n\n\n    /* ========== STATE VARIABLES ========== */\n\n    IERC20 public immutable shareToken; // represents 1 token in the pool\n\n    address[] public poolTokens; // tokens in pool\n    mapping( address => PoolToken ) public tokenInfo; // info for tokens in pool\n\n    uint public totalTokens; // total tokens in pool\n\n    Fee public fees;\n    \n    \n    \n    /* ========== CONSTRUCTOR ========== */\n    \n    constructor( address token ) {\n        require( token != address(0) );\n        shareToken = IERC20( token );\n    }\n\n\n\n    /* ========== EXCHANGE FUNCTIONS ========== */\n\n    // swap tokens and send outbound token to sender\n    function swap( address firstToken, uint amount, address secondToken ) external {\n        IERC20( firstToken ).safeTransferFrom( msg.sender, address(this), amount );\n\n        IERC20( secondToken ).safeTransfer( msg.sender, _swap( firstToken, amount, secondToken ) );\n    }\n\n    // swap tokens, specifying sender and receiver\n    // used by router for chain swaps\n    function swapThrough( \n        address from, \n        address to, \n        address firstToken, \n        uint amount, \n        address secondToken\n    ) external returns ( uint amount_ ) {\n        IERC20( firstToken ).safeTransferFrom( from, address(this), amount );\n\n        amount_ = _swap( firstToken, amount, secondToken );\n\n        IERC20( secondToken ).approve( to, amount_ );\n    }\n\n    // add token to pool as liquidity, returning share token\n    // rejects if token added will exit bounds\n    function add( address token, uint amount ) external {\n        totalTokens = totalTokens.add( amount ); // add amount to pool\n\n        require( amount <= maxCanAdd( token ), \"Exceeds limit in\" );\n\n        IERC20( token ).safeTransferFrom( msg.sender, address(this), amount ); // send token added\n\n        shareToken.mint( msg.sender, amount ); // mint pool token\n    }\n\n    // remove token from liquidity, burning share token\n    // rejects if token removed will exit bounds\n    function remove( address token, uint amount ) external {\n        shareToken.burn( msg.sender, amount ); // burn pool token\n\n        uint fee = amount.mul( fees.fee ).div( 1e4 ); // trading fee collected\n\n        require( amount.sub( fee ) <= maxCanRemove( token ), \"Exceeds limit out\" );\n\n        fees.collected = fees.collected.add( fee ); // add to total fees\n        totalTokens = totalTokens.sub( amount.sub( fee ) ); // remove amount from pool less fees\n\n        IERC20( token ).safeTransfer( msg.sender, amount.sub( fee ) ); // send token removed\n    }\n\n    // remove liquidity evenly across all tokens \n    function removeAll( uint amount ) external {\n        shareToken.burn( msg.sender, amount );\n\n        uint fee = amount.mul( fees.fee ).div( 1e4 ); // trading fee collected\n        fees.collected = fees.collected.add( fee ); // add to total fees\n\n        amount = amount.sub( fee );\n\n        for ( uint i = 0; i < poolTokens.length; i++ ) {\n            IERC20 token = IERC20( poolTokens[ i ] );\n\n            uint send = amount.mul( token.balanceOf( address(this) ) ).div( totalTokens );\n            token.safeTransfer( msg.sender, send );\n        }\n        totalTokens = totalTokens.sub( amount ); // remove amount from pool less fees\n    }\n\n    // send collected fees to collector\n    function collectFees( address token ) public {\n        if ( fees.collected > 0 ) {\n            totalTokens = totalTokens.sub( fees.collected );\n\n            IERC20( token ).safeTransfer( fees.collector, fees.collected );\n\n            fees.collected = 0;\n        }\n    }\n\n\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    // token swap logic\n    function _swap( address firstToken, uint amount, address secondToken ) internal returns ( uint ) {\n        require( amount <= maxCanAdd( firstToken ), \"Exceeds limit in\" );\n        require( amount <= maxCanRemove( secondToken ), \"Exceeds limit out\" );\n\n        uint fee = amount.mul( fees.fee ).div( 1e9 );\n\n        fees.collected = fees.collected.add( fee );\n        return amount.sub( fee );\n    }\n\n\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    // maximum number of token that can be added to pool\n    function maxCanAdd( address token ) public view returns ( uint ) {\n        uint maximum = totalTokens.mul( tokenInfo[ token ].highAP ).div( 1e5 );\n        uint balance = IERC20( token ).balanceOf( address(this) );\n        return maximum.sub( balance );\n    }\n\n    // maximum number of token that can be removed from pool\n    function maxCanRemove( address token ) public view returns ( uint ) {\n        uint minimum = totalTokens.mul( tokenInfo[ token ].lowAP ).div( 1e5 );\n        uint balance = IERC20( token ).balanceOf( address(this) );\n        return balance.sub( minimum );\n    }\n\n    // maximum size of trade from first token to second token\n    function maxSize( address firstToken, address secondToken ) public view returns ( uint ) {\n        return maxCanAdd( firstToken ).add( maxCanRemove( secondToken ) );\n    }\n\n\n\n     /* ========== POLICY FUNCTIONS ========== */\n\n    // change bounds of tokens in pool\n    function changeBound( address token, uint newHigh, uint newLow ) external {\n        tokenInfo[ token ].highAP = newHigh;\n        tokenInfo[ token ].lowAP = newLow;\n    }\n\n    // add new token to pool\n    // must call toggleAccept to activate token\n    function addToken( address token, uint lowAP, uint highAP ) external {\n        if ( !tokenInfo[ token ].pushed ) {\n            poolTokens.push( token );\n        }\n\n        tokenInfo[ token ] = PoolToken({\n            lowAP: lowAP,\n            highAP: highAP,\n            accepting: false,\n            pushed: true\n        });\n    }\n\n    // toggle whether to accept incoming token\n    // setting token to false will not allow swaps as incoming token or adds\n    function toggleAccept( address token ) external {\n        tokenInfo[ token ].accepting = !tokenInfo[ token ].accepting;\n    }\n     \n    // set fee taken on trades and fee collector\n    function setFee( uint newFee, address collector, address collectToken ) external {\n        require( collector != address(0) );\n\n        collectFees( collectToken ); // clear cache before changes\n\n        fees.fee = newFee;\n        fees.collector = collector;\n    }\n}"}}}