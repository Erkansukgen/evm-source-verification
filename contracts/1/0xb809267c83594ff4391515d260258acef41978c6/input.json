{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/AAAAPlatform.sol": {
      "content": "// Dependency file: contracts/modules/Configable.sol\n\n// SPDX-License-Identifier: MIT\n// pragma solidity >=0.5.16;\npragma experimental ABIEncoderV2;\n\ninterface IConfig {\n    function developer() external view returns (address);\n    function platform() external view returns (address);\n    function factory() external view returns (address);\n    function mint() external view returns (address);\n    function token() external view returns (address);\n    function developPercent() external view returns (uint);\n    function share() external view returns (address);\n    function base() external view returns (address); \n    function governor() external view returns (address);\n    function getPoolValue(address pool, bytes32 key) external view returns (uint);\n    function getValue(bytes32 key) external view returns(uint);\n    function getParams(bytes32 key) external view returns(uint, uint, uint, uint); \n    function getPoolParams(address pool, bytes32 key) external view returns(uint, uint, uint, uint); \n    function wallets(bytes32 key) external view returns(address);\n    function setValue(bytes32 key, uint value) external;\n    function setPoolValue(address pool, bytes32 key, uint value) external;\n    function setParams(bytes32 _key, uint _min, uint _max, uint _span, uint _value) external;\n    function setPoolParams(bytes32 _key, uint _min, uint _max, uint _span, uint _value) external;\n    function initPoolParams(address _pool) external;\n    function isMintToken(address _token) external returns (bool);\n    function prices(address _token) external returns (uint);\n    function convertTokenAmount(address _fromToken, address _toToken, uint _fromAmount) external view returns (uint);\n    function DAY() external view returns (uint);\n    function WETH() external view returns (address);\n}\n\ncontract Configable {\n    address public config;\n    address public owner;\n\n    event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    function setupConfig(address _config) external onlyOwner {\n        config = _config;\n        owner = IConfig(config).developer();\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, 'OWNER FORBIDDEN');\n        _;\n    }\n    \n    modifier onlyDeveloper() {\n        require(msg.sender == IConfig(config).developer(), 'DEVELOPER FORBIDDEN');\n        _;\n    }\n    \n    modifier onlyPlatform() {\n        require(msg.sender == IConfig(config).platform(), 'PLATFORM FORBIDDEN');\n        _;\n    }\n\n    modifier onlyFactory() {\n        require(msg.sender == IConfig(config).factory(), 'FACTORY FORBIDDEN');\n        _;\n    }\n\n    modifier onlyGovernor() {\n        require(msg.sender == IConfig(config).governor(), 'Governor FORBIDDEN');\n        _;\n    }\n}\n\n// Dependency file: contracts/modules/ConfigNames.sol\n\n// pragma solidity >=0.5.16;\n\nlibrary ConfigNames {\n    //GOVERNANCE\n    bytes32 public constant PROPOSAL_VOTE_DURATION = bytes32('PROPOSAL_VOTE_DURATION');\n    bytes32 public constant PROPOSAL_EXECUTE_DURATION = bytes32('PROPOSAL_EXECUTE_DURATION');\n    bytes32 public constant PROPOSAL_CREATE_COST = bytes32('PROPOSAL_CREATE_COST');\n    bytes32 public constant STAKE_LOCK_TIME = bytes32('STAKE_LOCK_TIME');\n    bytes32 public constant MINT_AMOUNT_PER_BLOCK =  bytes32('MINT_AMOUNT_PER_BLOCK');\n    bytes32 public constant INTEREST_PLATFORM_SHARE =  bytes32('INTEREST_PLATFORM_SHARE');\n    bytes32 public constant CHANGE_PRICE_DURATION =  bytes32('CHANGE_PRICE_DURATION');\n    bytes32 public constant CHANGE_PRICE_PERCENT =  bytes32('CHANGE_PRICE_PERCENT');\n\n    // POOL\n    bytes32 public constant POOL_BASE_INTERESTS = bytes32('POOL_BASE_INTERESTS');\n    bytes32 public constant POOL_MARKET_FRENZY = bytes32('POOL_MARKET_FRENZY');\n    bytes32 public constant POOL_PLEDGE_RATE = bytes32('POOL_PLEDGE_RATE');\n    bytes32 public constant POOL_LIQUIDATION_RATE = bytes32('POOL_LIQUIDATION_RATE');\n    bytes32 public constant POOL_MINT_BORROW_PERCENT = bytes32('POOL_MINT_BORROW_PERCENT');\n    bytes32 public constant POOL_MINT_POWER = bytes32('POOL_MINT_POWER');\n    \n    //NOT GOVERNANCE\n    bytes32 public constant AAAA_USER_MINT = bytes32('AAAA_USER_MINT');\n    bytes32 public constant AAAA_TEAM_MINT = bytes32('AAAA_TEAM_MINT');\n    bytes32 public constant AAAA_REWAED_MINT = bytes32('AAAA_REWAED_MINT');\n    bytes32 public constant DEPOSIT_ENABLE = bytes32('DEPOSIT_ENABLE');\n    bytes32 public constant WITHDRAW_ENABLE = bytes32('WITHDRAW_ENABLE');\n    bytes32 public constant BORROW_ENABLE = bytes32('BORROW_ENABLE');\n    bytes32 public constant REPAY_ENABLE = bytes32('REPAY_ENABLE');\n    bytes32 public constant LIQUIDATION_ENABLE = bytes32('LIQUIDATION_ENABLE');\n    bytes32 public constant REINVEST_ENABLE = bytes32('REINVEST_ENABLE');\n    bytes32 public constant INTEREST_BUYBACK_SHARE =  bytes32('INTEREST_BUYBACK_SHARE');\n\n    //POOL\n    bytes32 public constant POOL_PRICE = bytes32('POOL_PRICE');\n\n    //wallet\n    bytes32 public constant TEAM = bytes32('team'); \n    bytes32 public constant SPARE = bytes32('spare');\n    bytes32 public constant REWARD = bytes32('reward');\n}\n\n// Dependency file: contracts/libraries/SafeMath.sol\n\n\n// pragma solidity >=0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Dependency file: contracts/libraries/TransferHelper.sol\n\n\n// pragma solidity >=0.6.0;\n\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n\n\n// Root file: contracts/AAAAPlatform.sol\n\npragma solidity >=0.5.16;\n\n// import \"contracts/modules/Configable.sol\";\n// import \"contracts/modules/ConfigNames.sol\";\n// import \"contracts/libraries/SafeMath.sol\";\n// import \"contracts/libraries/TransferHelper.sol\";\n\ninterface IAAAAMint {\n    function increaseProductivity(address user, uint value) external returns (bool);\n    function decreaseProductivity(address user, uint value) external returns (bool);\n    function getProductivity(address user) external view returns (uint, uint);\n}\n\ninterface IWETH {\n    function deposit() external payable;\n    function withdraw(uint) external;\n}\n\ninterface IAAAAPool {\n    function deposit(uint _amountDeposit, address _from) external;\n    function withdraw(uint _amountWithdraw, address _from) external returns(uint, uint);\n    function borrow(uint _amountCollateral, uint _repayAmount, uint _expectBorrow, address _from) external;\n    function repay(uint _amountCollateral, address _from) external returns(uint, uint);\n    function liquidation(address _user, address _from) external returns (uint);\n    function reinvest(address _from) external returns(uint);\n\n    function switchStrategy(address _collateralStrategy) external;\n    function supplys(address user) external view returns(uint,uint,uint,uint,uint);\n    function borrows(address user) external view returns(uint,uint,uint,uint,uint);\n    function getTotalAmount() external view returns (uint);\n    function supplyToken() external view returns (address);\n    function interestPerBorrow() external view returns(uint);\n    function interestPerSupply() external view returns(uint);\n    function lastInterestUpdate() external view returns(uint);\n    function getInterests() external view returns(uint);\n    function totalBorrow() external view returns(uint);\n    function remainSupply() external view returns(uint);\n    function liquidationPerSupply() external view returns(uint);\n    function totalLiquidationSupplyAmount() external view returns(uint);\n    function totalLiquidation() external view returns(uint);\n}\n\ninterface IAAAAFactory {\n    function getPool(address _lendToken, address _collateralToken) external view returns (address);\n    function countPools() external view returns(uint);\n    function allPools(uint index) external view returns (address);\n}\n\ncontract AAAAPlatform is Configable {\n\n    using SafeMath for uint;\n    \n    uint private unlocked = 1;\n    modifier lock() {\n        require(unlocked == 1, 'Locked');\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n\n    receive() external payable {\n    }\n\n    function deposit(address _lendToken, address _collateralToken, uint _amountDeposit) external lock {\n        require(IConfig(config).getValue(ConfigNames.DEPOSIT_ENABLE) == 1, \"NOT ENABLE NOW\");\n        address pool = IAAAAFactory(IConfig(config).factory()).getPool(_lendToken, _collateralToken);\n        require(pool != address(0), \"POOL NOT EXIST\");\n        TransferHelper.safeTransferFrom(_lendToken, msg.sender, pool, _amountDeposit);\n        IAAAAPool(pool).deposit(_amountDeposit, msg.sender);\n        _updateProdutivity(pool);\n    }\n    \n    function depositETH(address _lendToken, address _collateralToken) external payable lock {\n        require(_lendToken == IConfig(config).WETH(), \"INVALID WETH POOL\");\n        require(IConfig(config).getValue(ConfigNames.DEPOSIT_ENABLE) == 1, \"NOT ENABLE NOW\");\n        address pool = IAAAAFactory(IConfig(config).factory()).getPool(_lendToken, _collateralToken);\n        require(pool != address(0), \"POOL NOT EXIST\");\n        \n        IWETH(IConfig(config).WETH()).deposit{value:msg.value}();\n        TransferHelper.safeTransfer(_lendToken, pool, msg.value);\n        IAAAAPool(pool).deposit(msg.value, msg.sender);\n        _updateProdutivity(pool);\n    }\n    \n    function withdraw(address _lendToken, address _collateralToken, uint _amountWithdraw) external lock {\n        require(IConfig(config).getValue(ConfigNames.WITHDRAW_ENABLE) == 1, \"NOT ENABLE NOW\");\n        address pool = IAAAAFactory(IConfig(config).factory()).getPool(_lendToken, _collateralToken);\n        require(pool != address(0), \"POOL NOT EXIST\");\n        (uint withdrawSupplyAmount, uint withdrawLiquidationAmount) = IAAAAPool(pool).withdraw(_amountWithdraw, msg.sender);\n\n        if(withdrawSupplyAmount > 0) _innerTransfer(_lendToken, msg.sender, withdrawSupplyAmount);\n        if(withdrawLiquidationAmount > 0) _innerTransfer(_collateralToken, msg.sender, withdrawLiquidationAmount);\n\n        _updateProdutivity(pool);\n    }\n    \n    function borrow(address _lendToken, address _collateralToken, uint _amountCollateral, uint _expectBorrow) external lock {\n        require(IConfig(config).getValue(ConfigNames.BORROW_ENABLE) == 1, \"NOT ENABLE NOW\");\n        address pool = IAAAAFactory(IConfig(config).factory()).getPool(_lendToken, _collateralToken);\n        require(pool != address(0), \"POOL NOT EXIST\");\n        if(_amountCollateral > 0) {\n            TransferHelper.safeTransferFrom(_collateralToken, msg.sender, pool, _amountCollateral);\n        }\n        \n        (, uint borrowAmountCollateral, , , ) = IAAAAPool(pool).borrows(msg.sender);\n        uint repayAmount = getRepayAmount(_lendToken, _collateralToken, borrowAmountCollateral, msg.sender);\n        IAAAAPool(pool).borrow(_amountCollateral, repayAmount, _expectBorrow, msg.sender);\n        if(_expectBorrow > 0) _innerTransfer(_lendToken, msg.sender, _expectBorrow);\n        _updateProdutivity(pool);\n    }\n    \n    function borrowTokenWithETH(address _lendToken, address _collateralToken, uint _expectBorrow) external payable lock {\n        require(_collateralToken == IConfig(config).WETH(), \"INVALID WETH POOL\");\n        require(IConfig(config).getValue(ConfigNames.BORROW_ENABLE) == 1, \"NOT ENABLE NOW\");\n        address pool = IAAAAFactory(IConfig(config).factory()).getPool(_lendToken, _collateralToken);\n        require(pool != address(0), \"POOL NOT EXIST\");\n        \n        if(msg.value > 0) {\n            IWETH(IConfig(config).WETH()).deposit{value:msg.value}();\n            TransferHelper.safeTransfer(_collateralToken, pool, msg.value);\n        }\n        \n        (, uint borrowAmountCollateral, , , ) = IAAAAPool(pool).borrows(msg.sender);\n        uint repayAmount = getRepayAmount(_lendToken, _collateralToken, borrowAmountCollateral, msg.sender);\n        IAAAAPool(pool).borrow(msg.value, repayAmount, _expectBorrow, msg.sender);\n        if(_expectBorrow > 0) _innerTransfer(_lendToken, msg.sender, _expectBorrow);\n        _updateProdutivity(pool);\n    }\n    \n    function repay(address _lendToken, address _collateralToken, uint _amountCollateral) external lock {\n        require(IConfig(config).getValue(ConfigNames.REPAY_ENABLE) == 1, \"NOT ENABLE NOW\");\n        address pool = IAAAAFactory(IConfig(config).factory()).getPool(_lendToken, _collateralToken);\n        require(pool != address(0), \"POOL NOT EXIST\");\n        uint repayAmount = getRepayAmount(_lendToken, _collateralToken, _amountCollateral, msg.sender);\n        \n        if(repayAmount > 0) {\n            TransferHelper.safeTransferFrom(_lendToken, msg.sender, pool, repayAmount);\n        }\n        \n        IAAAAPool(pool).repay(_amountCollateral, msg.sender);\n        _innerTransfer(_collateralToken, msg.sender, _amountCollateral);\n        _updateProdutivity(pool);\n    }\n\n    function repayETH(address _lendToken, address _collateralToken, uint _amountCollateral) payable lock external {\n        require(IConfig(config).getValue(ConfigNames.REPAY_ENABLE) == 1, \"NOT ENABLE NOW\");\n        require(_lendToken == IConfig(config).WETH(), \"INVALID WETH POOL\");\n\n        address pool = IAAAAFactory(IConfig(config).factory()).getPool(_lendToken, _collateralToken);\n        require(pool != address(0), \"POOL NOT EXIST\");\n        uint repayAmount = getRepayAmount(_lendToken, _collateralToken, _amountCollateral, msg.sender);\n\n        require(repayAmount <= msg.value, \"INVALID VALUE\");\n\n        if(repayAmount > 0) {\n            IWETH(IConfig(config).WETH()).deposit{value:repayAmount}();\n            TransferHelper.safeTransfer(_lendToken, pool, repayAmount);\n        }\n        \n        IAAAAPool(pool).repay(_amountCollateral, msg.sender);\n        _innerTransfer(_collateralToken, msg.sender, _amountCollateral);\n        if(msg.value > repayAmount) TransferHelper.safeTransferETH(msg.sender, msg.value.sub(repayAmount));\n\n        _updateProdutivity(pool);\n    }\n    \n    function liquidation(address _lendToken, address _collateralToken, address _user) external lock {\n        require(IConfig(config).getValue(ConfigNames.LIQUIDATION_ENABLE) == 1, \"NOT ENABLE NOW\");\n        address pool = IAAAAFactory(IConfig(config).factory()).getPool(_lendToken, _collateralToken);\n        require(pool != address(0), \"POOL NOT EXIST\");\n        IAAAAPool(pool).liquidation(_user, msg.sender);\n        _updateProdutivity(pool);\n    }\n\n    function reinvest(address _lendToken, address _collateralToken) external lock {\n        require(IConfig(config).getValue(ConfigNames.REINVEST_ENABLE) == 1, \"NOT ENABLE NOW\");\n        address pool = IAAAAFactory(IConfig(config).factory()).getPool(_lendToken, _collateralToken);\n        require(pool != address(0), \"POOL NOT EXIST\");\n        IAAAAPool(pool).reinvest(msg.sender);\n        _updateProdutivity(pool);\n    }\n    \n    function _innerTransfer(address _token, address _to, uint _amount) internal {\n        if(_token == IConfig(config).WETH()) {\n            IWETH(_token).withdraw(_amount);\n            TransferHelper.safeTransferETH(_to, _amount);\n        } else {\n            TransferHelper.safeTransfer(_token, _to, _amount);\n        }\n    }\n\n    function _updateProdutivity(address _pool) internal {\n        uint power = IConfig(config).getPoolValue(_pool, ConfigNames.POOL_MINT_POWER);\n        uint amount = IAAAAPool(_pool).getTotalAmount().mul(power).div(10000);\n        (uint old, ) = IAAAAMint(IConfig(config).mint()).getProductivity(_pool);\n        if(old > 0) {\n            IAAAAMint(IConfig(config).mint()).decreaseProductivity(_pool, old);\n        }\n        \n        address token = IAAAAPool(_pool).supplyToken();\n        uint baseAmount = IConfig(config).convertTokenAmount(token, IConfig(config).base(), amount);\n        if(baseAmount > 0) {\n            IAAAAMint(IConfig(config).mint()).increaseProductivity(_pool, baseAmount);\n        }\n    }\n\n    function getRepayAmount(address _lendToken, address _collateralToken, uint amountCollateral, address from) public view returns(uint repayAmount)\n    {\n        address pool = IAAAAFactory(IConfig(config).factory()).getPool(_lendToken, _collateralToken);\n        require(pool != address(0), \"POOL NOT EXIST\");\n\n        (, uint borrowAmountCollateral, uint interestSettled, uint amountBorrow, uint borrowInterests) = IAAAAPool(pool).borrows(from);\n\n        uint _interestPerBorrow = IAAAAPool(pool).interestPerBorrow().add(IAAAAPool(pool).getInterests().mul(block.number - IAAAAPool(pool).lastInterestUpdate()));\n        uint _totalInterest = borrowInterests.add(_interestPerBorrow.mul(amountBorrow).div(1e18).sub(interestSettled));\n\n        uint repayInterest = borrowAmountCollateral == 0 ? 0 : _totalInterest.mul(amountCollateral).div(borrowAmountCollateral);\n        repayAmount = borrowAmountCollateral == 0 ? 0 : amountBorrow.mul(amountCollateral).div(borrowAmountCollateral).add(repayInterest);\n    }\n\n    function getMaximumBorrowAmount(address _lendToken, address _collateralToken, uint amountCollateral) external view returns(uint amountBorrow)\n    {\n        address pool = IAAAAFactory(IConfig(config).factory()).getPool(_lendToken, _collateralToken);\n        require(pool != address(0), \"POOL NOT EXIST\");\n\n        uint pledgeAmount = IConfig(config).convertTokenAmount(_collateralToken, _lendToken, amountCollateral);\n        uint pledgeRate = IConfig(config).getPoolValue(address(pool), ConfigNames.POOL_PLEDGE_RATE);\n\n        amountBorrow = pledgeAmount.mul(pledgeRate).div(1e18);\n    }\n\n    function getLiquidationAmount(address _lendToken, address _collateralToken, address from) public view returns(uint liquidationAmount)\n    {\n        address pool = IAAAAFactory(IConfig(config).factory()).getPool(_lendToken, _collateralToken);\n        require(pool != address(0), \"POOL NOT EXIST\");\n\n        (uint amountSupply, , uint liquidationSettled, , uint supplyLiquidation) = IAAAAPool(pool).supplys(from);\n\n        liquidationAmount = supplyLiquidation.add(IAAAAPool(pool).liquidationPerSupply().mul(amountSupply).div(1e18).sub(liquidationSettled));\n    }\n\n    function getInterestAmount(address _lendToken, address _collateralToken, address from) public view returns(uint interestAmount)\n    {\n        address pool = IAAAAFactory(IConfig(config).factory()).getPool(_lendToken, _collateralToken);\n        require(pool != address(0), \"POOL NOT EXIST\");\n\n        uint totalBorrow = IAAAAPool(pool).totalBorrow();\n        uint totalSupply = totalBorrow + IAAAAPool(pool).remainSupply();\n        (uint amountSupply, uint interestSettled, , uint interests, ) = IAAAAPool(pool).supplys(from);\n        uint _interestPerSupply = IAAAAPool(pool).interestPerSupply().add(\n            totalSupply == 0 ? 0 : IAAAAPool(pool).getInterests().mul(block.number - IAAAAPool(pool).lastInterestUpdate()).mul(totalBorrow).div(totalSupply));\n\n        interestAmount = interests.add(_interestPerSupply.mul(amountSupply).div(1e18).sub(interestSettled));\n    }\n\n    function getWithdrawAmount(address _lendToken, address _collateralToken, address from) external view returns \n        (uint withdrawAmount, uint interestAmount, uint liquidationAmount)\n    {\n        address pool = IAAAAFactory(IConfig(config).factory()).getPool(_lendToken, _collateralToken);\n        require(pool != address(0), \"POOL NOT EXIST\");\n\n        uint _totalInterest = getInterestAmount(_lendToken, _collateralToken, from);\n        liquidationAmount = getLiquidationAmount(_lendToken, _collateralToken, from);\n\n        uint platformShare = _totalInterest.mul(IConfig(config).getValue(ConfigNames.INTEREST_PLATFORM_SHARE)).div(1e18);\n        interestAmount = _totalInterest.sub(platformShare);\n\n        uint totalLiquidation = IAAAAPool(pool).totalLiquidation();\n\n        uint withdrawLiquidationSupplyAmount = totalLiquidation == 0 ? 0 : \n            liquidationAmount.mul(IAAAAPool(pool).totalLiquidationSupplyAmount()).div(totalLiquidation);\n\n        (uint amountSupply, , , , ) = IAAAAPool(pool).supplys(from);            \n\n        if(withdrawLiquidationSupplyAmount > amountSupply.add(interestAmount))\n            withdrawAmount = 0;\n        else \n            withdrawAmount = amountSupply.add(interestAmount).sub(withdrawLiquidationSupplyAmount);\n    }\n\n    function switchStrategy(address _lendToken, address _collateralToken, address _collateralStrategy) external onlyDeveloper\n    {\n        address pool = IAAAAFactory(IConfig(config).factory()).getPool(_lendToken, _collateralToken);\n        require(pool != address(0), \"POOL NOT EXIST\");\n        IAAAAPool(pool).switchStrategy(_collateralStrategy);\n    }\n\n    function updatePoolParameter(address _lendToken, address _collateralToken, bytes32 _key, uint _value) external onlyDeveloper\n    {\n        address pool = IAAAAFactory(IConfig(config).factory()).getPool(_lendToken, _collateralToken);\n        require(pool != address(0), \"POOL NOT EXIST\");\n        IConfig(config).setPoolValue(pool, _key, _value);\n    }\n}\n"
    }
  }
}