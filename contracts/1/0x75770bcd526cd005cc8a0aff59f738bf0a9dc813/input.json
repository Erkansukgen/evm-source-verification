{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/newcontract.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract SnipSnap is Ownable {\r\n    event Deposit(uint256 moni);\r\n\r\n    event Bought(address adressBought, address tokenBought);\r\n\r\n    IUniswapV2Router02 internal uniswapRouter = IUniswapV2Router02(\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    );\r\n\r\n    address payable\r\n        internal adminWallet = 0x5884494B70e5b23941AAa9cEFE73Eda228dfbDeD;\r\n\r\n    mapping(address => uint256) whiteListedAdress;\r\n\r\n    address[] internal routerArr;\r\n\r\n    constructor() public {}\r\n\r\n    function deployMoni() external payable onlyOwner {\r\n        emit Deposit(msg.value);\r\n    }\r\n\r\n    function setNewDestionation(address newDest) external onlyOwner {\r\n        //0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 = WETH\r\n\r\n        routerArr = new address[](3);\r\n        routerArr[0] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n        routerArr[1] = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\r\n        routerArr[2] = newDest;\r\n    }\r\n\r\n    function authorize(address newUser) external onlyOwner {\r\n        whiteListedAdress[newUser] = 1;\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        //This will be used to send eth back to adminwallet\r\n        uint256 totalEth = address(this).balance;\r\n        adminWallet.transfer(totalEth);\r\n    }\r\n\r\n    function testSendMeEth() external {\r\n        //this will be used to test snipe\r\n        require(whiteListedAdress[msg.sender] == 1, \"yeah no\");\r\n        uint256 totalEth = address(this).balance;\r\n        adminWallet.transfer(totalEth);\r\n    }\r\n\r\n    function sendEth() external {\r\n        require(address(this).balance > 0 ,\"no monie sir\");\r\n        require(whiteListedAdress[msg.sender] == 1, \"yeah no, no whitelist\");\r\n\r\n        uint256 minAmount = 0;\r\n        uint256 untilWhen = now + 1 hours;\r\n        uint256 totalEth = address(this).balance;\r\n\r\n        uniswapRouter.swapExactETHForTokens.value(totalEth)(\r\n            minAmount,\r\n            routerArr,\r\n            adminWallet,\r\n            untilWhen\r\n        );\r\n        \r\n        emit Bought(msg.sender,routerArr[1]);\r\n    }\r\n}\r\n"}}}