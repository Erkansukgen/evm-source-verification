{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"BalancesHelper.sol":{"content":"pragma solidity ^0.8.2;\n\ninterface IERC20 {\n    function decimals() external view returns (uint8);\n\n    function symbol() external view returns (string memory);\n\n    function name() external view returns (string memory);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address spender, address owner)\n        external\n        view\n        returns (uint256);\n}\n\ninterface IOracle {\n    function getNormalizedValueUsdc(\n        address tokenAddress,\n        uint256 amount,\n        uint256 price\n    ) external view returns (uint256);\n\n    function getPriceUsdcRecommended(address tokenAddress)\n        external\n        view\n        returns (uint256);\n}\n\n/**\n * Static token data\n */\nstruct TokenMetadata {\n    address id; // Token address\n    string name; // Token name\n    string symbol; // Token symbol\n    uint8 decimals; // Token decimals\n}\n\ncontract BalancesHelper {\n    address public owner; // Owner can update storage slots\n    address public oracleAddress; // Oracle address\n\n    struct TokenBalance {\n        address tokenId; // Token address\n        uint256 priceUsdc; // Token price in USDC (6 decimals)\n        uint256 balance; // Token balance in underlying token\n        uint256 balanceUsdc; // Token balance value in USDC (6 decimals)\n    }\n\n    struct TokenPrice {\n        address tokenId; // Token address\n        uint256 priceUsdc; // Token price in USDC (6 decimals)\n    }\n\n    constructor(address _oracleAddress) {\n        owner = msg.sender;\n        oracleAddress = _oracleAddress;\n    }\n\n    /**\n     * Fetch token balances given an array of token addresses and account address\n     */\n    function tokensBalances(\n        address accountAddress,\n        address[] memory tokensAddresses\n    ) public view returns (TokenBalance[] memory) {\n        TokenBalance[] memory _tokensBalances =\n            new TokenBalance[](tokensAddresses.length);\n        for (\n            uint256 tokenIdx = 0;\n            tokenIdx < tokensAddresses.length;\n            tokenIdx++\n        ) {\n            address tokenAddress = tokensAddresses[tokenIdx];\n            IERC20 token = IERC20(tokenAddress);\n            uint256 balance = token.balanceOf(accountAddress);\n            uint256 priceUsdc =\n                IOracle(oracleAddress).getPriceUsdcRecommended(tokenAddress);\n            uint256 balanceUsdc =\n                IOracle(oracleAddress).getNormalizedValueUsdc(\n                    tokenAddress,\n                    balance,\n                    priceUsdc\n                );\n\n            _tokensBalances[tokenIdx] = TokenBalance({\n                tokenId: tokenAddress,\n                priceUsdc: priceUsdc,\n                balance: balance,\n                balanceUsdc: balanceUsdc\n            });\n        }\n        return _tokensBalances;\n    }\n\n    /**\n     * Fetch token prices given an array of token addresses\n     */\n    function tokensPrices(address[] memory tokensAddresses)\n        public\n        view\n        returns (TokenPrice[] memory)\n    {\n        TokenPrice[] memory _tokensPrices =\n            new TokenPrice[](tokensAddresses.length);\n        for (\n            uint256 tokenIdx = 0;\n            tokenIdx < tokensAddresses.length;\n            tokenIdx++\n        ) {\n            address tokenAddress = tokensAddresses[tokenIdx];\n            _tokensPrices[tokenIdx] = TokenPrice({\n                tokenId: tokenAddress,\n                priceUsdc: IOracle(oracleAddress).getPriceUsdcRecommended(\n                    tokenAddress\n                )\n            });\n        }\n        return _tokensPrices;\n    }\n\n    /**\n     * Fetch basic static token metadata\n     */\n    function tokensMetadata(address[] memory tokensAddresses)\n        public\n        view\n        returns (TokenMetadata[] memory)\n    {\n        TokenMetadata[] memory _tokensMetadata =\n            new TokenMetadata[](tokensAddresses.length);\n        for (\n            uint256 tokenIdx = 0;\n            tokenIdx < tokensAddresses.length;\n            tokenIdx++\n        ) {\n            address tokenAddress = tokensAddresses[tokenIdx];\n            IERC20 _token = IERC20(tokenAddress);\n            _tokensMetadata[tokenIdx] = TokenMetadata({\n                id: tokenAddress,\n                name: _token.name(),\n                symbol: _token.symbol(),\n                decimals: _token.decimals()\n            });\n        }\n        return _tokensMetadata;\n    }\n\n    function updateSlot(bytes32 slot, bytes32 value) external {\n        require(msg.sender == owner);\n        assembly {\n            sstore(slot, value)\n        }\n    }\n}\n"}}}