{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"NFT1155MarketV2.sol":{"content":"/***\r\n *    ██████╗ ███████╗ ██████╗  ██████╗ \r\n *    ██╔══██╗██╔════╝██╔════╝ ██╔═══██╗\r\n *    ██║  ██║█████╗  ██║  ███╗██║   ██║\r\n *    ██║  ██║██╔══╝  ██║   ██║██║   ██║\r\n *    ██████╔╝███████╗╚██████╔╝╚██████╔╝\r\n *    ╚═════╝ ╚══════╝ ╚═════╝  ╚═════╝ \r\n *    \r\n * https://dego.finance\r\n                                  \r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2020 dego\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/// File: @openzeppelin/contracts/math/Math.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/IERC165.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n// File: contracts/interface/IERC20.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    // add mint interface by dego\r\n    function mint(address account, uint amount) external;\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/library/SafeERC20.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/library/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    function initReentrancyStatus() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: contracts/interface/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: contracts/library/UniswapV2Library.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint256;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB)\r\n        internal\r\n        pure\r\n        returns (address token0, address token1)\r\n    {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB\r\n            ? (tokenA, tokenB)\r\n            : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        hex'ff',\r\n                        factory,\r\n                        keccak256(abi.encodePacked(token0, token1)),\r\n                        hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\r\n        (address token0, ) = sortTokens(tokenA, tokenB);\r\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\r\n            pairFor(factory, tokenA, tokenB)\r\n        )\r\n            .getReserves();\r\n        (reserveA, reserveB) = tokenA == token0\r\n            ? (reserve0, reserve1)\r\n            : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) internal pure returns (uint256 amountB) {\r\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\r\n        require(\r\n            reserveA > 0 && reserveB > 0,\r\n            'UniswapV2Library: INSUFFICIENT_LIQUIDITY'\r\n        );\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(\r\n            reserveIn > 0 && reserveOut > 0,\r\n            'UniswapV2Library: INSUFFICIENT_LIQUIDITY'\r\n        );\r\n        uint256 amountInWithFee = amountIn.mul(997);\r\n        uint256 numerator = amountInWithFee.mul(reserveOut);\r\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountIn) {\r\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(\r\n            reserveIn > 0 && reserveOut > 0,\r\n            'UniswapV2Library: INSUFFICIENT_LIQUIDITY'\r\n        );\r\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(\r\n        address factory,\r\n        uint256 amountIn,\r\n        address[] memory path\r\n    ) internal view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint256[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint256 i; i < path.length - 1; i++) {\r\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\r\n                factory,\r\n                path[i],\r\n                path[i + 1]\r\n            );\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(\r\n        address factory,\r\n        uint256 amountOut,\r\n        address[] memory path\r\n    ) internal view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint256[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint256 i = path.length - 1; i > 0; i--) {\r\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\r\n                factory,\r\n                path[i - 1],\r\n                path[i]\r\n            );\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/market/NFT1155MarketV2.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract NFT1155MarketV2 is ReentrancyGuard {\r\n\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    // --- Data ---\r\n    bool private initialized; // Flag of initialize data\r\n    \r\n    address public _governance;\r\n\r\n    mapping(address => bool) public _supportCurrency;\r\n\r\n    IERC20 public _dandy = IERC20(0x0);\r\n    bool public _isRewardSellerDandy = false;\r\n    bool public _isRewardBuyerDandy = false;\r\n    uint256 public _sellerRewardDandy = 1e15;\r\n    uint256 public _buyerRewardDandy = 1e15;\r\n\r\n    struct SalesObject {\r\n        uint256 id;\r\n        uint256 tokenId;\r\n        uint256 unitPrice;\r\n        uint8 status;\r\n        address payable seller;\r\n        IERC1155 nft;\r\n        uint256 amount;\r\n        uint256 initAmount;\r\n        address currency;\r\n        address[] buyers;\r\n    }\r\n\r\n    uint256 public _salesAmount = 0;\r\n\r\n    SalesObject[] _salesObjects;\r\n\r\n    mapping(address => bool) public _supportNft;\r\n\r\n    uint256 public _tipsFeeRate = 20;\r\n    uint256 public _baseRate = 1000;\r\n    address payable _tipsFeeWallet;\r\n\r\n    event eveSales(\r\n        uint256 indexed id, \r\n        uint256 tokenId,\r\n        address buyer, \r\n        uint256 price,\r\n        uint256 tipsFee,\r\n        uint256 sellAmount,\r\n        uint256 surplusAmount\r\n    );\r\n\r\n    event eveNewSales(\r\n        uint256 indexed id,\r\n        uint256 tokenId, \r\n        address seller, \r\n        address nft,\r\n        address buyer, \r\n        uint256 unitPrice,\r\n        uint256 amount,\r\n        address currency\r\n    );\r\n\r\n    event eveCancelSales(\r\n        uint256 indexed id,\r\n        uint256 tokenId\r\n    );\r\n\r\n    event eveNFTReceived(\r\n        address operator, \r\n        address from, \r\n        uint256 tokenId, \r\n        uint256 value,\r\n        bytes data\r\n    );\r\n\r\n    event eveSupportCurrency(\r\n        address currency, \r\n        bool support\r\n    );\r\n\r\n    event eveSupportNft(\r\n        address nft,\r\n        bool support\r\n    );\r\n\r\n    event GovernanceTransferred(\r\n        address indexed previousOwner, \r\n        address indexed newOwner\r\n    );\r\n\r\n    mapping(address => SupportBuyCurrency) public _supportBuyCurrency;\r\n\r\n    mapping(uint256=>uint256) public deflationBaseRates;\r\n    mapping(uint256=>address) public routers;\r\n    \r\n    struct SupportBuyCurrency {\r\n        bool status;\r\n        bool isDeflation;\r\n        uint256 deflationRate;\r\n    }\r\n    \r\n    event eveSupportBuyCurrency(\r\n        address currency, \r\n        bool status,\r\n        bool isDeflation,\r\n        uint256 deflationRate\r\n    );\r\n\r\n    event eveDeflationBaseRate(\r\n        uint256 deflationBaseRate\r\n    );\r\n\r\n    fallback() external {}\r\n    receive() payable external {}\r\n\r\n    // --- Init ---\r\n    function initialize(\r\n        address payable tipsFeeWallet,\r\n        uint256 minDurationTime,\r\n        uint256 tipsFeeRate,\r\n        uint256 baseRate,\r\n        IERC20 dandy\r\n    ) public {\r\n        require(!initialized, \"initialize: Already initialized!\");\r\n        _governance = msg.sender;\r\n        _tipsFeeWallet = tipsFeeWallet;\r\n        _tipsFeeRate = tipsFeeRate;\r\n        _baseRate = baseRate;\r\n        _dandy = dandy;\r\n        _isRewardSellerDandy = false;\r\n        _isRewardBuyerDandy = false;\r\n        _sellerRewardDandy = 1e15;\r\n        _buyerRewardDandy = 1e15;\r\n        initReentrancyStatus();\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyGovernance {\r\n        require(msg.sender == _governance, \"not governance\");\r\n        _;\r\n    }\r\n\r\n    function setGovernance(address governance)  public  onlyGovernance\r\n    {\r\n        require(governance != address(0), \"new governance the zero address\");\r\n        emit GovernanceTransferred(_governance, governance);\r\n        _governance = governance;\r\n    }\r\n\r\n\r\n    /**\r\n     * check address\r\n     */\r\n    modifier validAddress( address addr ) {\r\n        require(addr != address(0x0));\r\n        _;\r\n    }\r\n\r\n    modifier checkindex(uint index) {\r\n        require(index <= _salesObjects.length, \"overflow\");\r\n        _;\r\n    }\r\n\r\n    modifier checkSupportBuyCurrendy(address currency) {\r\n        SupportBuyCurrency memory supportBuyCurrency = _supportBuyCurrency[currency];\r\n        require(supportBuyCurrency.status == true, \"not support currency\");\r\n        _;\r\n    }\r\n\r\n    modifier mustNotSellingOut(uint index) {\r\n        require(index <= _salesObjects.length, \"overflow\");\r\n        SalesObject storage obj = _salesObjects[index];\r\n        require(obj.status == 0, \"sry, selling out\");\r\n        _;\r\n    }\r\n\r\n    modifier onlySalesOwner(uint index) {\r\n        require(index <= _salesObjects.length, \"overflow\");\r\n        SalesObject storage obj = _salesObjects[index];\r\n        require(obj.seller == msg.sender || msg.sender == _governance, \"author & governance\");\r\n        _;\r\n    }\r\n\r\n    function seize(IERC20 asset) external onlyGovernance returns (uint256 balance) {\r\n        balance = asset.balanceOf(address(this));\r\n        asset.safeTransfer(_governance, balance);\r\n    }\r\n\r\n    function addSupportNft(address nft) public onlyGovernance validAddress(nft) {\r\n        _supportNft[nft] = true;\r\n        emit eveSupportNft(nft, true);\r\n    }\r\n\r\n    function removeSupportNft(address nft) public onlyGovernance validAddress(nft) {\r\n        _supportNft[nft] = false;\r\n        emit eveSupportNft(nft, false);\r\n    }\r\n\r\n    function addSupportCurrency(address erc20) public onlyGovernance {\r\n        require(_supportCurrency[erc20] == false, \"the currency have support\");\r\n        _supportCurrency[erc20] = true;\r\n        emit eveSupportCurrency(erc20, true);\r\n    }\r\n\r\n    function removeSupportCurrency(address erc20) public onlyGovernance {\r\n        require(_supportCurrency[erc20], \"the currency can not remove\");\r\n        _supportCurrency[erc20] = false;\r\n        emit eveSupportCurrency(erc20, false);\r\n    }\r\n\r\n    function setSupportBuyCurrency(address erc20,bool status,bool isDeflation,uint256 deflationRate ) public onlyGovernance {\r\n        if (isDeflation) {\r\n            require(deflationRate >0, \"deflationRate 0\");\r\n        }\r\n        _supportBuyCurrency[erc20] = SupportBuyCurrency(status,isDeflation,deflationRate);\r\n        emit eveSupportBuyCurrency(erc20,status,isDeflation,deflationRate);\r\n    }\r\n\r\n    function setDeflationBaseRate(uint256 deflationRate_) public onlyGovernance {\r\n        deflationBaseRates[0] = deflationRate_;\r\n        emit eveDeflationBaseRate(deflationRate_);\r\n    }\r\n\r\n    function setIUniswapV2Router01(address router_) public onlyGovernance {\r\n        routers[0] = router_;\r\n    }\r\n\r\n\r\n    function setTipsFeeWallet(address payable wallet) public onlyGovernance {\r\n        _tipsFeeWallet = wallet;\r\n    }\r\n\r\n    function getSales(uint index) external view checkindex(index) returns(SalesObject memory) {\r\n        return _salesObjects[index];\r\n    }\r\n\r\n    function getSalesBuyers(uint index) external view checkindex(index) returns(address[] memory) {\r\n        SalesObject memory obj = _salesObjects[index];\r\n        address[] memory saleBuyers = new address[](obj.buyers.length);\r\n        saleBuyers = obj.buyers;\r\n        return saleBuyers;\r\n    }\r\n\r\n    function getSalesPrice(uint index)\r\n        external\r\n        view\r\n        checkindex(index)\r\n        returns (uint256)\r\n    {\r\n        SalesObject storage obj = _salesObjects[index];\r\n        return obj.unitPrice;\r\n    }\r\n\r\n    function setBaseRate(uint256 rate) external onlyGovernance {\r\n        _baseRate = rate;\r\n    }\r\n\r\n    function setTipsFeeRate(uint256 rate) external onlyGovernance {\r\n        _tipsFeeRate = rate;\r\n    }\r\n\r\n    \r\n    function cancelSales(uint index) external checkindex(index) onlySalesOwner(index) mustNotSellingOut(index) nonReentrant {\r\n        SalesObject storage obj = _salesObjects[index];\r\n        obj.status = 2;\r\n        obj.nft.safeTransferFrom(address(this), obj.seller, obj.tokenId, obj.amount, \"\");\r\n\r\n        emit eveCancelSales(index, obj.tokenId);\r\n    }\r\n\r\n    function startSales(uint256 _tokenId,\r\n                        uint256 _unitPrice,\r\n                        address _nft,\r\n                        uint256 _amount,\r\n                        address _currency)\r\n        external \r\n        nonReentrant\r\n        validAddress(_nft)\r\n        returns(uint)\r\n    {\r\n        uint256 tokenId = _tokenId;\r\n        uint256 unitPrice = _unitPrice;\r\n        address nft = _nft;\r\n        uint256 amount = _amount;\r\n        address currency = _currency;\r\n        require(tokenId != 0, \"invalid token\");\r\n        require(unitPrice >= 0, \"invalid price\");\r\n        require(_supportNft[nft] == true, \"cannot sales\");\r\n        require(_supportCurrency[currency] == true, \"not support currency\");\r\n\r\n        IERC1155(nft).safeTransferFrom(msg.sender, address(this), tokenId, amount, \"\");\r\n\r\n        _salesAmount++;\r\n        SalesObject memory obj;\r\n\r\n        obj.id = _salesAmount;\r\n        obj.tokenId = tokenId;\r\n        obj.seller = msg.sender;\r\n        obj.nft = IERC1155(nft);\r\n        obj.unitPrice = unitPrice;\r\n        obj.status = 0;\r\n        obj.amount = amount;\r\n        obj.initAmount = obj.amount;\r\n        obj.currency = currency;\r\n        \r\n        if (_salesObjects.length == 0) {\r\n            SalesObject memory zeroObj;\r\n            zeroObj.tokenId = 0;\r\n            zeroObj.seller = address(0x0);\r\n            zeroObj.nft = IERC1155(0x0);\r\n            zeroObj.unitPrice = unitPrice;\r\n            zeroObj.status = 2;\r\n            zeroObj.amount = 0;\r\n            zeroObj.currency = address(0x0);\r\n            _salesObjects.push(zeroObj);    \r\n        }\r\n\r\n        _salesObjects.push(obj);\r\n\r\n        if(_isRewardSellerDandy) {\r\n            _dandy.mint(msg.sender, _sellerRewardDandy);\r\n        }\r\n\r\n        emit eveNewSales(\r\n            obj.id, \r\n            tokenId, \r\n            msg.sender, \r\n            nft, \r\n            address(0x0), \r\n            unitPrice,\r\n            amount,\r\n            currency\r\n        );\r\n        return _salesAmount;\r\n    }\r\n\r\n    function buy(uint index,uint256 _amount, address currency_)\r\n        public\r\n        nonReentrant\r\n        mustNotSellingOut(index)\r\n        checkSupportBuyCurrendy(currency_)\r\n        payable \r\n    {\r\n        uint256 amount = _amount;\r\n        SalesObject storage obj = _salesObjects[index];\r\n        require (obj.amount >= amount, \"umm.....  It's too much\");\r\n        uint256 unitPrice = this.getSalesPrice(index);\r\n        uint256 price = unitPrice.mul(amount);\r\n        uint256 tipsFee = price.mul(_tipsFeeRate).div(_baseRate);\r\n        uint256 purchase = price.sub(tipsFee);\r\n        if (obj.currency == currency_){\r\n            if (obj.currency == address(0x0)) { \r\n                require (msg.value >= this.getSalesPrice(index), \"umm.....  your price is too low\");\r\n                uint256 returnBack = msg.value.sub(price);\r\n                if(returnBack > 0) {\r\n                    msg.sender.transfer(returnBack);\r\n                }\r\n                if(tipsFee > 0) {\r\n                    _tipsFeeWallet.transfer(tipsFee);\r\n                }\r\n                obj.seller.transfer(purchase);\r\n            } else {\r\n                IERC20(obj.currency).safeTransferFrom(msg.sender, _tipsFeeWallet, tipsFee);\r\n                IERC20(obj.currency).safeTransferFrom(msg.sender, obj.seller, purchase);\r\n            }\r\n        }else{\r\n            if (obj.currency == address(0x0)){\r\n                // uint256 ethAmount = 0;\r\n                // SupportBuyCurrency memory supportBuyCurrency = _supportBuyCurrency[currency_];\r\n                // if (supportBuyCurrency.isDeflation) {\r\n                //     ethAmount = exactTokenToEth(currency_, price);\r\n                // } else {\r\n                //     ethAmount = tokenToExactEth(currency_, price);\r\n                // }\r\n                uint256 ethAmount = tokenToEth(currency_, price);\r\n                require (ethAmount >= price, \"umm.....  your price is too low\");\r\n                uint256 returnBack = ethAmount.sub(price).add(msg.value);\r\n                if(returnBack > 0) {\r\n                    msg.sender.transfer(returnBack);\r\n                }\r\n                if(tipsFee > 0) {\r\n                    _tipsFeeWallet.transfer(tipsFee);\r\n                }\r\n                obj.seller.transfer(purchase);\r\n            }else{\r\n                // transfer\r\n                require(false, \"not support token\");\r\n            }\r\n        }\r\n        \r\n        \r\n        obj.nft.safeTransferFrom(address(this), msg.sender, obj.tokenId, amount, \"\");\r\n        \r\n        obj.buyers.push(msg.sender);\r\n        obj.amount = obj.amount.sub(amount);\r\n\r\n        if (obj.amount == 0) {\r\n            obj.status = 1;    \r\n        }\r\n\r\n        if(_isRewardBuyerDandy) {\r\n            _dandy.mint(msg.sender, _buyerRewardDandy);\r\n        }\r\n        // fire event\r\n        emit eveSales(\r\n            index, \r\n            obj.tokenId, \r\n            msg.sender, \r\n            price, \r\n            tipsFee, \r\n            amount, \r\n            obj.amount\r\n        );\r\n    }\r\n    function setDandyAddress(address addr) external onlyGovernance validAddress(addr) {\r\n        _dandy = IERC20(addr);\r\n    }\r\n\r\n    function setSellerRewardDandy(uint256 rewardDandy) public onlyGovernance {\r\n        _sellerRewardDandy = rewardDandy;\r\n    }\r\n\r\n    function setBuyerRewardDandy(uint256 rewardDandy) public onlyGovernance {\r\n        _buyerRewardDandy = rewardDandy;\r\n    }\r\n\r\n    function setIsRewardSellerDandy(bool isRewardSellerDandy) public onlyGovernance {\r\n        _isRewardSellerDandy = isRewardSellerDandy;\r\n    }\r\n\r\n    function setIsRewardBuyerDandy(bool isRewardBuyerDandy) public onlyGovernance {\r\n        _isRewardBuyerDandy = isRewardBuyerDandy;\r\n    }\r\n\r\n\r\n    function onERC1155Received(address operator, address from, uint256 tokenId, uint256 value, bytes calldata data) external returns (bytes4) {\r\n        //only receive the _nft staff\r\n        if(address(this) != operator) {\r\n            //invalid from nft\r\n            return 0;\r\n        }\r\n\r\n        //success\r\n        emit eveNFTReceived(operator, from, tokenId, value, data);\r\n        return bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"));\r\n    }\r\n\r\n    // function exactTokenToEth(address erc20Token_, uint256 amountOutMin) internal returns (uint256) {\r\n    //     address erc20Token = erc20Token_;\r\n    //     SupportBuyCurrency memory supportBuyCurrency = _supportBuyCurrency[erc20Token];\r\n\r\n    //     address[] memory path = new address[](2);\r\n    //     path[0] = erc20Token;\r\n    //     path[1] = getRouter().WETH();\r\n\r\n    //     uint256[] memory amounts = UniswapV2Library.getAmountsIn(getRouter().factory(), amountOutMin, path);\r\n    //     uint256 amountInMax = amounts[0];\r\n        \r\n    //     uint256 amountIn = amountInMax.mul(getDeflationBaseRate()).div(supportBuyCurrency.deflationRate).mul(getDeflationBaseRate()).div(supportBuyCurrency.deflationRate);\r\n    //     uint256 balanceBefore = IERC20(erc20Token).balanceOf(address(this));\r\n    //     IERC20(erc20Token).safeTransferFrom(msg.sender, address(this), amountIn);\r\n    //     uint256 balanceAfter = IERC20(erc20Token).balanceOf(address(this));\r\n    //     amountIn = balanceAfter.sub(balanceBefore);\r\n    //     IERC20(erc20Token).approve(address(getRouter()), amountIn);\r\n\r\n    //     uint256 ethBefore = address(this).balance;\r\n    //     // getRouter().swapExactTokensForETH(amountIn, amountOutMin, path, address(this), block.timestamp);\r\n    //     getRouter().swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, 0, path, address(this), block.timestamp);\r\n    //     uint256 ethAfter = address(this).balance;\r\n\r\n    //     uint256 balanceLast = IERC20(erc20Token).balanceOf(address(this));\r\n    //     uint256 supAmount = balanceLast.sub(balanceBefore);\r\n    //     if (supAmount>0){\r\n    //         IERC20(erc20Token).safeTransfer(msg.sender, supAmount);\r\n    //     }\r\n\r\n    //     return ethAfter.sub(ethBefore);\r\n    // }\r\n\r\n    // function tokenToExactEth(address erc20Token, uint256 amountOut) internal returns (uint256) {\r\n    //     address[] memory path = new address[](2);\r\n    //     path[0] = erc20Token;\r\n    //     path[1] = getRouter().WETH();\r\n       \r\n    //     uint256[] memory amounts = UniswapV2Library.getAmountsIn(getRouter().factory(), amountOut, path);\r\n    //     uint256 amountInMax = amounts[0];\r\n        \r\n    //     uint256 balanceBefore = IERC20(erc20Token).balanceOf(address(this));\r\n    //     IERC20(erc20Token).safeTransferFrom(msg.sender, address(this), amountInMax);\r\n    //     uint256 balanceAfter = IERC20(erc20Token).balanceOf(address(this));\r\n    //     amountInMax = balanceAfter.sub(balanceBefore);\r\n    //     IERC20(erc20Token).approve(address(getRouter()), amountInMax);\r\n\r\n    //     uint256 ethBefore = address(this).balance;\r\n    //     getRouter().swapTokensForExactETH(amountOut, amountInMax, path, address(this), block.timestamp);\r\n    //     uint256 ethAfter = address(this).balance;\r\n\r\n    //     uint256 balanceLast = IERC20(erc20Token).balanceOf(address(this));\r\n    //     uint256 supAmount = balanceLast.sub(balanceBefore);\r\n    //     if (supAmount>0){\r\n    //         IERC20(erc20Token).safeTransfer(msg.sender, supAmount);\r\n    //     }\r\n    //     return ethAfter.sub(ethBefore);\r\n    // }\r\n\r\n    function tokenToEth(address erc20Token, uint256 amountOut) private returns(uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = erc20Token;\r\n        path[1] = getRouter().WETH();\r\n       \r\n        uint256[] memory amounts = UniswapV2Library.getAmountsIn(getRouter().factory(), amountOut, path);\r\n        uint256 amountIn = amounts[0];\r\n        \r\n        SupportBuyCurrency memory supportBuyCurrency = _supportBuyCurrency[erc20Token];\r\n        if (supportBuyCurrency.isDeflation) {\r\n            amountIn = amountIn.mul(getDeflationBaseRate()).div(supportBuyCurrency.deflationRate).mul(getDeflationBaseRate()).div(supportBuyCurrency.deflationRate);\r\n        }\r\n\r\n        uint256 balanceBefore = IERC20(erc20Token).balanceOf(address(this));\r\n        IERC20(erc20Token).safeTransferFrom(msg.sender, address(this), amountIn);\r\n        uint256 balanceAfter = IERC20(erc20Token).balanceOf(address(this));\r\n        amountIn = balanceAfter.sub(balanceBefore);\r\n        IERC20(erc20Token).approve(address(getRouter()), amountIn);\r\n        \r\n        uint256 ethBefore = address(this).balance;\r\n        if (supportBuyCurrency.isDeflation) {\r\n            getRouter().swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, 0, path, address(this), block.timestamp);\r\n        } else {\r\n            getRouter().swapTokensForExactETH(amountOut, amountIn, path, address(this), block.timestamp);\r\n        }\r\n        uint256 ethAfter = address(this).balance;\r\n\r\n        uint256 balanceLast = IERC20(erc20Token).balanceOf(address(this));\r\n        uint256 supAmount = balanceLast.sub(balanceBefore);\r\n        if (supAmount>0){\r\n            IERC20(erc20Token).safeTransfer(msg.sender, supAmount);\r\n        }\r\n        return ethAfter.sub(ethBefore);\r\n    }\r\n\r\n    function getDeflationBaseRate() public view returns(uint256) {\r\n        return deflationBaseRates[0];\r\n    }\r\n\r\n    function getRouter() public view returns(IUniswapV2Router01) {\r\n        return IUniswapV2Router01(routers[0]);\r\n    }\r\n}"}}}