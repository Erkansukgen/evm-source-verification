{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/zebi/release/zebi_minterV1.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.6;\r\n\r\ninterface IToken {\r\n  function transfer(address _to, uint256 _value) external;\r\n  function transferFrom(address _from, address _to, uint256 _value) external;\r\n  function burn(uint256 _value) external returns (bool success);\r\n  function balanceOf(address _owner) external view returns (uint256 balance);\r\n  function approve(address _spender, uint256 _value) external ;\r\n  function decimals() external returns (uint8);\r\n  function mintToken(uint256 _mintedAmount) external returns (bool success) ;\r\n  function owner() external returns (address);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    \r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n  function factory() external view returns (address);\r\n  function token0() external view returns (address);\r\n  function token1() external view returns (address);\r\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ncontract MinterV1 {\r\n    address public router;\r\n    address public usd;\r\n    address public zebi;\r\n    address public pool;\r\n    address payable public share;\r\n    bool    public autoBurn;\r\n    mapping (address => address) public introducers;\r\n    uint public giftRate;\r\n    uint public protectionPrice;\r\n    \r\n    event SwapUsdToZebi(uint usdamount,uint zebiamount);\r\n    event SwapEthToZebi(uint ethamount,uint usdamount,uint zebiamount);\r\n    event MintByUsd(address user,uint usdamount,uint zebiamount);\r\n    event MintByEth(address user,uint ethamount,uint usdamount,uint zebiamount);\r\n    \r\n    /* Initializes contract*/\r\n    constructor () public {  \r\n        router = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        usd = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n        zebi = address(0x1A743Db7452d8B4D5621E59dD604Ed7CbA8d7ee8);\r\n        pool = address(msg.sender);\r\n        share = payable(address(msg.sender));\r\n        autoBurn = true;\r\n        protectionPrice = 10**6;\r\n        giftRate = 100;\r\n        IToken(usd).approve(router,10**36);\r\n        IToken(zebi).approve(router,10**36);\r\n    }\r\n\r\n    function setAutoBurn(bool _autoBurn) public{\r\n        require (msg.sender == IToken(zebi).owner()) ; \r\n        autoBurn = _autoBurn;\r\n    } \r\n    \r\n    function setGiftRate(uint _giftRate) public{   \r\n        require (msg.sender == IToken(zebi).owner()) ; \r\n        giftRate = _giftRate;\r\n    } \r\n    \r\n    function setProtectionPrice(uint _protectionPrice) public{   \r\n        require (msg.sender == IToken(zebi).owner() && protectionPrice >= 10**18) ; \r\n        protectionPrice = _protectionPrice;\r\n    }\r\n    \r\n    function setPool(address _pool) public{   \r\n        require (msg.sender == IToken(zebi).owner()) ; \r\n        pool = _pool;\r\n    } \r\n    \r\n    function setShare(address payable _share) public{\r\n        require (msg.sender == IToken(zebi).owner()) ; \r\n        share = _share;\r\n    }\r\n\r\n    function mintByUsd(uint _usdAmount,address _introducer) public returns (bool success) {\r\n        require(IToken(usd).balanceOf(msg.sender)>=_usdAmount,'Not enough money');\r\n        address pair = IUniswapV2Factory(IUniswapV2Router02(router).factory()).getPair(usd,zebi);\r\n        uint reserve0; \r\n        uint reserve1; \r\n        uint nTemp;\r\n        (reserve0, reserve1,nTemp) = IUniswapV2Pair(pair).getReserves();\r\n        (reserve0, reserve1) = usd == IUniswapV2Pair(pair).token0() ? (reserve0, reserve1) : (reserve1, reserve0); \r\n        require(reserve0 >= reserve1 * protectionPrice / 10**18,'Protection price error');\r\n        \r\n        if(introducers[msg.sender] == address(0x0) && _introducer != address(0x0) && _introducer != address(this))\r\n            introducers[msg.sender] = _introducer;\r\n        \r\n        uint _zebiAmount;\r\n        _zebiAmount = _usdAmount * reserve1 / reserve0 * 10000 / (10000 + giftRate);\r\n        IToken(usd).transferFrom(msg.sender,address(this),_usdAmount);\r\n        IToken(zebi).mintToken(_zebiAmount * 134 / 100 + _zebiAmount * giftRate / 10000);\r\n        uint amountA;\r\n        uint amountB;\r\n        amountA = _zebiAmount*34/100;\r\n        amountB = _usdAmount*34/100;\r\n        (amountA, amountB,nTemp) = IUniswapV2Router02(router).addLiquidity(zebi,usd,amountA,amountB,1,1,zebi,block.timestamp+100) ;\r\n        IToken(usd).transfer(pool,_usdAmount - amountB);\r\n        IToken(zebi).transfer(msg.sender,_zebiAmount * 134 / 100 - amountA);\r\n        \r\n        if(giftRate > 0 && introducers[msg.sender] != address(0x0) && IToken(zebi).balanceOf(address(this))>=_zebiAmount * giftRate / 10000)\r\n            IToken(zebi).transfer(introducers[msg.sender],_zebiAmount * giftRate / 10000);\r\n        \r\n        emit MintByUsd(msg.sender,_usdAmount,_zebiAmount);\r\n        return true;\r\n    }\r\n    \r\n    function mintByEth(address _introducer) payable public returns (bool success) {\r\n        uint256 _ethAmount = msg.value;\r\n        require(_ethAmount>0,'Not enough money');\r\n        address[] memory path = new address[](2);\r\n        path[0] = IUniswapV2Router02(router).WETH();\r\n        path[1] = address(usd);\r\n        uint[] memory amounts;\r\n        amounts = IUniswapV2Router02(router).swapExactETHForTokens{value:_ethAmount}(1,path,address(this),block.timestamp+100);\r\n        uint _usdAmount = amounts[1];\r\n        address pair = IUniswapV2Factory(IUniswapV2Router02(router).factory()).getPair(usd,zebi);\r\n        uint reserve0; \r\n        uint reserve1; \r\n        uint nTemp;\r\n        (reserve0, reserve1,nTemp) = IUniswapV2Pair(pair).getReserves();\r\n        (reserve0, reserve1) = usd == IUniswapV2Pair(pair).token0() ? (reserve0, reserve1) : (reserve1, reserve0); \r\n        require(reserve0 >= reserve1 * protectionPrice / 10**18,'Protection price error');\r\n        \r\n        if(introducers[msg.sender] == address(0x0) && _introducer != address(0x0) && _introducer != address(this))\r\n            introducers[msg.sender] = _introducer;\r\n        \r\n        uint _zebiAmount ;\r\n        _zebiAmount = _usdAmount * reserve1 / reserve0 * 10000 / (10000 + giftRate);\r\n        IToken(zebi).mintToken(_zebiAmount * 134 / 100 + _zebiAmount * giftRate / 10000);\r\n        uint amountA;\r\n        uint amountB;\r\n        amountA = _zebiAmount*34/100;\r\n        amountB = _usdAmount*34/100;\r\n        (amountA, amountB, nTemp) = IUniswapV2Router02(router).addLiquidity(zebi,usd,amountA,amountB,1,1,zebi,block.timestamp+100) ;\r\n        IToken(usd).transfer(pool,_usdAmount - amountB);\r\n        IToken(zebi).transfer(msg.sender,_zebiAmount * 134 / 100 - amountA);\r\n        \r\n        if(giftRate > 0 && introducers[msg.sender] != address(0x0) && IToken(zebi).balanceOf(address(this))>=_zebiAmount * giftRate / 10000)\r\n            IToken(zebi).transfer(introducers[msg.sender],_zebiAmount * giftRate / 10000);\r\n        \r\n        emit MintByEth(msg.sender,_ethAmount,_usdAmount,_zebiAmount);\r\n        return true;\r\n    }\r\n    \r\n    function swapUsdToZebi() public returns (uint[] memory amounts)\r\n    {\r\n        if(IToken(usd).balanceOf(address(this))>=10**uint(IToken(usd).decimals())){\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(usd);\r\n            path[1] = address(zebi);\r\n            amounts = IUniswapV2Router02(router).swapExactTokensForTokens(IToken(usd).balanceOf(address(this)),1,path,address(this),block.timestamp+100);\r\n            emit SwapUsdToZebi(amounts[0],amounts[1]);\r\n        }\r\n    }\r\n    \r\n    function swapEthToZebi() public payable returns (uint[] memory amounts)  \r\n    {\r\n        if(address(this).balance>=10**16){\r\n            address[] memory path = new address[](3);\r\n            path[0] = IUniswapV2Router02(router).WETH();\r\n            path[1] = address(usd);\r\n            path[2] = address(zebi);\r\n            amounts = IUniswapV2Router02(router).swapExactETHForTokens{value:address(this).balance}(1,path,address(this),block.timestamp+100);\r\n            emit SwapEthToZebi(amounts[0],amounts[1],amounts[2]);\r\n        }\r\n    }\r\n    \r\n    function burnZebi(uint _zebiAmount) public\r\n    {\r\n        if(IToken(zebi).balanceOf(address(this))>=10**18){\r\n            IToken(zebi).burn(_zebiAmount*8/10);\r\n            IToken(zebi).transfer(share, _zebiAmount - _zebiAmount*8/10);\r\n        }\r\n    }\r\n    \r\n    receive() external payable {\r\n        if(autoBurn && IToken(zebi).balanceOf(address(this)) >= 10**18 && msg.value >= 10**16)\r\n        {\r\n            burnZebi(IToken(zebi).balanceOf(address(this)) - 10**18);\r\n        }\r\n    }\r\n    \r\n    // transfer balance to share\r\n    function withdrawToken(address token, uint amount) public{\r\n      require(msg.sender == IToken(zebi).owner());\r\n      if (token == address(0x0)) \r\n        share.transfer(amount); \r\n      else \r\n        IToken(token).transfer(share, amount);\r\n    }\r\n}\r\n\r\n"
    }
  }
}