{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Untitled.sol": {
      "content": "pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n \r\ninterface EIP20Interface {\r\n    function transfer(address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n \r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n}\r\n \r\ninterface IFreeFromUpTo {\r\n    function freeFromUpTo(address from, uint256 value)\r\n        external\r\n        returns (uint256 freed);\r\n}\r\n \r\ncontract ChiGasSaver {\r\n    modifier saveGas(address payable sponsor) {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n        IFreeFromUpTo chi =\r\n            IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n        chi.freeFromUpTo(sponsor, (gasSpent + 14154) / 41947);\r\n    }\r\n}\r\n \r\ninterface IZAIS {\r\n    function balanceOfCoupons(address account, uint256 epoch)\r\n        external\r\n        view\r\n        returns (uint256);\r\n \r\n    function totalRedeemable() external view returns (uint256);\r\n \r\n    function advance() external;\r\n \r\n    function epoch() external view returns (uint256);\r\n \r\n    function epochTime() external view returns (uint256);\r\n \r\n    function commit(address candidate) external;\r\n}\r\n \r\ncontract Rebase is ChiGasSaver {\r\n    address internal constant ZAI = 0x4846239FDF4D4C1AEB26729fa064B0205acA90e1;\r\n \r\n    //Replace with your address\r\n    address payable internal constant recipient =\r\n        0x45767A4C3dfcCD084d5D4b8c320Ca0eeC884eCD3;\r\n \r\n    IZAIS private constant ZAIS =\r\n        IZAIS(0x8df74F25672adaE9866C4B33F1f906e05a3a5087);\r\n \r\n    function rebase() external saveGas(recipient) {\r\n        uint256 epoch = ZAIS.epochTime();\r\n        if (epoch > ZAIS.epoch()) {\r\n            ZAIS.advance();\r\n            withdraw(ZAI);\r\n        }\r\n    }\r\n \r\n    fallback() external payable {}\r\n \r\n    receive() external payable {}\r\n \r\n    function withdraw(address token) private {\r\n        EIP20Interface erc20 = EIP20Interface(token);\r\n        uint256 amount = erc20.balanceOf(address(this));\r\n        erc20.transfer(recipient, amount);\r\n    }\r\n}"
    }
  }
}