{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/TokenDefault.sol":{"content":"pragma solidity >=0.6.0 <0.8.0;\n  \n// SPDX-License-Identifier: MIT\n// @title ERC20 Token\n// @created_by  Avalon Blockchain Consulting\n\n/**\n * \n * @dev Operations with Overflow chechs.\n * \n **/\nlibrary Math { \n    \n    /**\n     * \n     * @dev Returnthe subtraction of two integers, reverting with message on overflow\n     * \n     **/\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n      require(b <= a, \"Subtraction overflow\");\n      return a - b;\n    }\n    \n    /**\n     * \n     * @dev Return the addition of two integers, reverting with message on overflow\n     * \n     **/\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n      uint256 c = a + b;\n      require(c >= a, \"Addition overflow\");\n      return c;\n    }\n    \n    /**\n     * \n     * @dev Return the multiplication of two two integers, reverting with message on overflow\n     * \n     **/\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"Multiplication overflow\");\n        return c;\n    }\n}\n\n/**\n * \n * @dev Contract that guarantees exclusive access to specific functions for the owner\n * \n * */\nabstract contract Ownable {\n    address private _owner;\n    address private _newOwner;\n    \n    event OwnerShipTransferred(address indexed oldOwner, address indexed newOwner);\n    \n    /**\n     * \n     * @dev Setting the deployer as the initial owner.\n     * \n     */\n     \n    constructor() {\n        _owner = msg.sender;\n        _newOwner = msg.sender;\n        emit OwnerShipTransferred(address(0), _owner);\n    }\n    \n     /**\n     * \n     * @dev Returns the address of the current owner.\n     * \n     */\n    \n    function owner() public view returns(address){\n        return _owner;\n    }\n    \n    /**\n     * \n     * @dev Reverting with message on overflow if called by any account other than the owner.\n     * \n     */\n    modifier onlyOwner(){\n        require(msg.sender == _owner, 'You are not the owner');\n        _;\n    }\n    \n    /**\n     * \n     * @dev Set new owner to transfer ownership, reverting with message on overflow if account is not the owner\n     * \n     */\n    function transferOwnership(address newOwner_) public onlyOwner{\n        require(newOwner_ != address(0), 'Invalid address');\n        _newOwner = newOwner_;\n    }\n    \n    /**\n     * \n     * @dev Accept ownership, reverting with message on overflow if account is not the new owner\n     * \n     */\n    function acceptOwnership()public{\n        require(msg.sender == _newOwner, 'You are not the new owner');\n        _transferOwnership(_newOwner);\n    }\n    \n    function _transferOwnership(address newOwner_) internal{\n        emit OwnerShipTransferred(_owner,newOwner_);\n        _owner = newOwner_;\n    }\n}\n\n/**\n * \n * @dev ERC20 Standard Interface as defined in the EIP.\n *\n */\n \ninterface IERC20 {\n    \n\n  function totalSupply() external view returns (uint256);\n  function balanceOf(address account) external view returns (uint256);\n  function transfer(address recipient, uint256 amount) external returns (bool);\n  function allowance(address owner, address spender) external view returns (uint256);\n  function approve(address spender, uint256 amount) external returns (bool);\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n  \n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * \n * @dev Implementation of the IERC20w.\n * \n **/\n\ncontract ERC20 is IERC20, Ownable{\n    using Math for uint256;\n    \n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowed;\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n    uint256 private _totalSupply;\n    \n    constructor (string memory name_, string memory symbol_, uint256 totalSupply_, uint8 decimals_)  {\n        _name = name_;\n        _symbol = symbol_;\n        _totalSupply = totalSupply_.mul(10 ** decimals_);\n        _decimals = decimals_;\n        _balances[msg.sender] = _balances[msg.sender].add(_totalSupply);\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n    \n    function name() public view returns (string memory) {\n        return _name;\n    }\n    \n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n    \n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n    \n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n    \n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n    \n    function transfer(address to, uint256 value) public override returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n    \n    function allowance(address owner, address spender) public override view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n    \n    function approve(address spender, uint256 value) public override returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n    \n    function transferFrom(address sender, address recipient, uint256 value) public override returns (bool) {\n        _transfer(sender, recipient, value);\n        _approve(sender, msg.sender, _allowed[sender][msg.sender].sub(value));\n        return true;\n    }\n    \n    \n    function _transfer(address from_, address to_, uint256 amount_) internal{\n        require(from_ != address(0), \"Sender Invalid address\");\n        require(to_ != address(0), \"Recipient Invalid Address\");\n        _balances[from_] = _balances[from_].sub(amount_);\n        _balances[to_] = _balances[to_].add(amount_);\n        emit Transfer(from_, to_, amount_);\n    }\n    \n    function _approve(address owner_, address spender_, uint256 amount_) internal{\n        require(owner_ != address(0), \"Approve from the zero address\");\n        require(spender_ != address(0), \"Approve to the zero address\");\n        _allowed[owner_][spender_] = amount_;\n        emit Approval(owner_, spender_, amount_);\n    }\n    \n    /**\n    * \n    * @dev Destroy Tokens from the caller, reverting with message on overflow if caller is not the contract owner\n    * \n    */\n   \n    function burn(uint256 value) public onlyOwner {\n        require(msg.sender != address(0), 'Invalid account address');\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        _totalSupply = _totalSupply.sub(value);\n        emit Transfer(msg.sender, address(0), value);\n    }\n\n    \n}"}}}