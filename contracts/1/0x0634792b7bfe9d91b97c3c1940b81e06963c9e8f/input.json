{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"assm.sol":{"content":"pragma solidity ^0.6.6;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\ninterface IUniswapRouter {\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract HPChecker {\r\n    \r\n    IUniswapRouter uniswapRouter;\r\n    \r\n    address WETH;\r\n    address _owner;\r\n    \r\n    constructor(address _UniswapRouter, address _WETH) public {\r\n        uniswapRouter = IUniswapRouter(_UniswapRouter); \r\n        WETH = _WETH;\r\n        _owner = msg.sender;\r\n    }\r\n    \r\n    modifier OwnerCheck(address _address) {\r\n        require(_address == _owner, \"Blocked\");\r\n        _;\r\n    }\r\n    \r\n    function changeAdd(address _router, address _weth) external OwnerCheck(msg.sender) {\r\n        uniswapRouter = IUniswapRouter(_router);\r\n        WETH = _weth;\r\n    }\r\n    \r\n    receive() external payable {}\r\n    \r\n    function check (address token) external payable {\r\n        address[] memory path = new address[](2); \r\n        path[0] = WETH; \r\n        path[1] = token; \r\n        uniswapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value : msg.value}(0, path, address(this), block.timestamp);\r\n        uint amount = IERC20(token).balanceOf(address(this)); \r\n        IERC20(token).approve(address(uniswapRouter), amount);\r\n        path[0] = token; \r\n        path[1] = WETH; \r\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(amount, 0, path, address(this), block.timestamp); \r\n    }\r\n}"}}}