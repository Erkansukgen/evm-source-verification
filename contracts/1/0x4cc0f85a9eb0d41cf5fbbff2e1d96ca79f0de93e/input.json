{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Smash.sol": {
      "content": "pragma solidity 0.6.0;\n\n// t.me/SmashFinance\n\n\nlibrary SafeMath {\n  /**\n  * @dev Multiplies two unsigned integers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n        return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0);\n    uint256 c = a / b;\n\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\ncontract Ownable {\n  address public _owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  constructor () public {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), msg.sender);\n  }\n\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  modifier onlyOwner() {\n    require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  function renounceOwnership() public virtual onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  function transferOwnership(address newOwner) public virtual onlyOwner {\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\ncontract SMASH is Ownable {\n  using SafeMath for uint256;\n\n  string public constant name = \"SmashFinance\";\n  string public constant symbol = \"SMASH\" ;\n  uint256 public constant decimals = 18;\n  uint256 private constant _maximumSupply = 1500 * 18 ** decimals;\n  uint256 public _stakingBurnTotal = 0;\n  uint256 public _totalSupply;\n\n \n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n\n  mapping(address => uint256) public _balanceOf;\n  mapping(address => mapping(address => uint256)) public allowance;\n\n  constructor() public override {\n    _owner = msg.sender;\n    _totalSupply = _maximumSupply;\n    _balanceOf[msg.sender] = _maximumSupply;\n    emit Transfer(address(0x0), msg.sender, _maximumSupply);\n  }\n\n  function totalSupply () public view returns (uint256) {\n    return _totalSupply; \n  }\n\n  function balanceOf (address who) public view returns (uint256) {\n    return _balanceOf[who];\n  }\n\n  function _transfer(address _from, address _to, uint256 _value) internal {\n    _balanceOf[_from] = _balanceOf[_from].sub(_value);\n    _balanceOf[_to] = _balanceOf[_to].add(_value);\n    emit Transfer(_from, _to, _value);\n  }\n\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    require(_balanceOf[msg.sender] >= _value);\n    _transfer(msg.sender, _to, _value);\n    return true;\n  }\n  function approve(address _spender, uint256 _value) public returns (bool success) {\n    require(_spender != address(0));\n    allowance[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n    require(_value <= _balanceOf[_from]);\n    require(_value <= allowance[_from][msg.sender]);\n    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n    _transfer(_from, _to, _value);\n    return true;\n  }\n}"
    }
  }
}