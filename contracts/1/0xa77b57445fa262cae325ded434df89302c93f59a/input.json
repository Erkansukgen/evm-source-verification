{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "BtrflyOhmBondingCalculator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface IUniswapV2ERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n}\r\n\r\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\r\n  function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n      uint112 reserve0,\r\n      uint112 reserve1,\r\n      uint32 blockTimestampLast\r\n    );\r\n\r\n  function token0() external view returns (address);\r\n\r\n  function token1() external view returns (address);\r\n}\r\n\r\ncontract BtrflyOhmBondingCalculator{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address immutable public BTRFLY;\r\n\r\n    constructor( address _BTRFLY ){\r\n      BTRFLY = _BTRFLY;\r\n    }\r\n    \r\n    function valuation(address _token, uint256 _amount) external view returns (uint256 value_){\r\n\r\n      address token0 = IUniswapV2Pair(_token).token0();\r\n\r\n      (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(_token).getReserves();\r\n\r\n      uint256 totalSupply = IUniswapV2Pair(_token).totalSupply();\r\n      uint256 reserve = token0 == BTRFLY ? reserve1 : reserve0;\r\n\r\n      return _amount.mul(reserve).div(totalSupply);\r\n\r\n    }\r\n\r\n  }"
    }
  }
}