{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/akc.sol": {
      "content": "contract Divine {\r\n    function purchase(uint256 dropId, uint256 amount) payable public {}\r\n}\r\ncontract DivineBot {\r\n    function f() public payable {\r\n        while (address(this).balance>=550000000000000000) {\r\n            try Divine(0x0774a3e01e3aDc40cCfF909b314B314a034431Aa).purchase{value:550000000000000000}(3,1) {}\r\n            catch {break;}\r\n        }\r\n    }\r\n    function nb712ygfbvg() public {\r\n        payable(0x0CA8A146D80287A5dF9bb673E5c85B25A669640F).transfer(address(this).balance);\r\n    }\r\n}\r\ncontract Controller {\r\n    address private caller;\r\n    address private owner=msg.sender;\r\n    constructor(address x) {\r\n        caller=x;\r\n    }\r\n    function sinwod2(address x) public {\r\n        require(msg.sender==owner);\r\n        caller=x;\r\n    }\r\n    function wndo2() public returns(address) {\r\n        return caller;\r\n    }\r\n}\r\n\r\ncontract MultiBot {\r\n    address private owner=msg.sender;\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n    function nb712ygfbvg() public {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n    function f(uint256 i,uint256 value) public {\r\n        assembly {\r\n            let ab := mload(0x40)\r\n            mstore(ab, 0x630DBE671F600052600060006004601c335AF433FF)\r\n            let addr := create2(value,add(ab,11),21,i)\r\n        }\r\n    }\r\n    function a() public payable {\r\n        payable(Controller(0xCA36747D88d62c9b5434a00823c327e7968B8778).wndo2()).delegatecall(abi.encodeWithSignature(\"f()\"));\r\n    }\r\n    function fd2wind(uint256 x, uint256 y,uint256 z) public payable {\r\n        for (uint i=0;i<x;i++) {\r\n            if (gasleft()>z) {f(y+i,address(this).balance);}\r\n            else return;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Monke {\r\n    function mint(uint8 _mintAmount) public payable {}\r\n    function setApprovalForAll(address operator, bool approved) public {}\r\n    function totalSupply() public returns(uint256) {}\r\n    function transferFrom(address from,address to,uint256 tokenId) public {}\r\n    uint8 public stage;\r\n    bool public paused;\r\n}\r\n\r\ncontract MonkeBot {\r\n    function f() public payable {\r\n        try Monke(0x9Bf252f97891b907F002F2887EfF9246e3054080).mint{value:150000000000000000}(3) {}\r\n        catch {}\r\n        Monke(0x9Bf252f97891b907F002F2887EfF9246e3054080).setApprovalForAll(0x830A8BDC36c611e347C7Dbac6D6431f9FD656a27,true);\r\n    }\r\n    function nb712ygfbvg() public {\r\n        payable(0x0CA8A146D80287A5dF9bb673E5c85B25A669640F).transfer(address(this).balance);\r\n    }\r\n}\r\n\r\ncontract MonkeRun {\r\n    uint256 private counter=1;\r\n    function nb712ygfbvg() public {\r\n        payable(0x0CA8A146D80287A5dF9bb673E5c85B25A669640F).transfer(address(this).balance);\r\n    }\r\n    function ie3ifw2fve() public payable {\r\n    \taddress x=0x9Bf252f97891b907F002F2887EfF9246e3054080;\r\n        require(Monke(x).stage()==4);\r\n        require(!Monke(x).paused());\r\n        uint256 xx=Monke(x).totalSupply();\r\n        uint a=9999-xx;\r\n        require(a>3&&a<9999,\"A\");\r\n        a=a/3;\r\n        uint256 y=address(this).balance/150000000000000000;\r\n        if (a>y) a=y;\r\n        MultiBot(payable(0x865518142c5A6925b9A2B4Ead261644E8e7d1AaD)).fd2wind{value:address(this).balance}(a,counter,500000);\r\n        require(Monke(x).totalSupply()>xx);\r\n        counter+=a;\r\n    }\r\n}\r\n/*contract MonkeTranser {\r\n    function f() public payable {\r\n        if (address(this).balance>=120000000000000000 && gasleft()>300000) {\r\n            try Monke(0x262f103bB7ab38C6E4DCD848586DfeBe0Bde2959).setApprovalForAll(address(0x262f103bB7ab38C6E4DCD848586DfeBe0Bde2959),true) {}\r\n            catch {}\r\n        }\r\n    }\r\n}*/\r\ncontract MonkeTransferMain {\r\n    address private x = msg.sender;\r\n    function f(address to,uint256[] memory tokenIds,address[] memory addresses) public payable {\r\n        require(msg.sender==x);\r\n        for (uint256 i=0;i<tokenIds.length;i++) {\r\n            Monke(0x9Bf252f97891b907F002F2887EfF9246e3054080).transferFrom(addresses[i],to,tokenIds[i]);\r\n        }\r\n    }\r\n}"
    }
  }
}