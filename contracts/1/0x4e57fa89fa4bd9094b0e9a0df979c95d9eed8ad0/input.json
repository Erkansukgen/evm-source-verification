{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"contracts/Mediator.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract FatherOfMediators {\n    address private owner;\n    address private payout;\n    address[] private managers;\n    address[] public mediators;\n\n    modifier isOwner(){\n        require(msg.sender == owner, \"For Owner only\");\n        _;\n    }\n    \n    modifier isOwnerOrManager(){\n        require(msg.sender == owner || isManager(msg.sender), \"For Owner or Manager only\");\n        _;\n    }\n    \n    function isManager(address item) internal view returns (bool) {\n        for (uint i=0; i<managers.length; i++) {\n            if (managers[i]==item){\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    function deployMediators(uint n) internal {\n        for (uint i=0; i<n; i++) {\n            Mediator mediator = new Mediator(address(this));\n            mediators.push(address(mediator));\n        }\n    }\n\n    constructor() {\n        owner = msg.sender;\n        payout = msg.sender;\n        deployMediators(1);\n    }\n    \n    function cloneMediators(uint n) external isOwnerOrManager {\n        for (uint i=0; i<n; i++) {\n            address clone = createClone(mediators[0]);\n            IMediator(clone).init(address(this));\n            mediators.push(clone);\n        }\n    }\n\n    function createClone(address target) internal returns (address result) {\n        bytes20 targetBytes = bytes20(target);\n        assembly {\n          let clone := mload(0x40)\n          mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n          mstore(add(clone, 0x14), targetBytes)\n          mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n          result := create(0, clone, 0x37)\n        }\n    }\n\n    function setOwner(address newOwner) external isOwner {\n        owner = newOwner;\n    }\n\n    function setPayout(address newPayout) external isOwner {\n        payout = newPayout;\n    }\n    \n    function setManagers(address[] calldata newManagers) external isOwner {\n        managers = newManagers;\n    }\n\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n\n    function getPayout() external view returns (address) {\n        return payout;\n    }\n    \n    function getManagers() external view returns (address[] memory) {\n        return managers;\n    }\n\n    function length() external view returns (uint) {\n        return mediators.length;\n    }\n\n    // function balanceOf(address token) external view returns (uint amount, uint count) {\n    //     IERC20 erc20 = IERC20(token);\n    //     for (uint i=0; i<mediators.length; i++) {\n    //         uint balance = erc20.balanceOf(mediators[i]);\n    //         if (balance > 0) {\n    //             amount += balance;\n    //             count += 1;\n    //         }\n    //     }\n    // }\n    \n    function poolERC20(address[] calldata tokens) external view returns (address[] memory pool, uint[] memory totals, uint count) {\n        address[] memory tmp = new address[](mediators.length);\n        for (uint i=0; i<mediators.length; i++) {\n            bool crossing = true;\n            for (uint j=0; j<tokens.length; j++) {\n                if (IERC20(tokens[j]).balanceOf(mediators[i]) == 0) {\n                    crossing = false;\n                    break;\n                }\n                \n            }\n            if (crossing) {\n                tmp[count] = mediators[i];\n                count += 1;\n            }\n        }\n        pool = new address[](count);\n        totals = new uint[](tokens.length);\n        for (uint i=0; i<count; i++) {\n            pool[i] = tmp[i];\n            for (uint j=0; j<tokens.length; j++) {\n                totals[j] += IERC20(tokens[j]).balanceOf(tmp[i]);\n            }\n        }\n    }\n\n    function poolETH() external view returns (address[] memory pool, uint total, uint count) {\n        address[] memory poolTmp = new address[](mediators.length);\n        for (uint i=0; i<mediators.length; i++) {\n            uint balance = mediators[i].balance;\n            if (balance > 0) {\n                poolTmp[count] = mediators[i];\n                total += balance;\n                count += 1;\n            }\n        }\n        pool = new address[](count);\n        for (uint i=0; i<count; i++) {\n            pool[i] = poolTmp[i];\n        }\n    }\n\n    function grabERC20(address token, address[] calldata childs) external isOwnerOrManager returns (uint[] memory amounts) {\n        amounts = new uint[](childs.length);\n        IERC20 erc20 = IERC20(token);\n        for (uint i=0; i<childs.length; i++) {\n            amounts[i] = erc20.balanceOf(childs[i]);\n            if (amounts[i] > 0) {\n                IMediator(childs[i]).withdrawERC20(token, payout, amounts[i]);\n            }\n        }\n    }\n    \n    // function grabERC20Batch(address[] calldata tokens, address[] calldata childs) external isOwnerOrManager returns (uint[] memory totals) {\n    //     totals = new uint[](tokens.length);\n    //     for (uint i=0; i<tokens.length; i++) {\n    //         IERC20 erc20 = IERC20(tokens[i]);\n    //         for (uint j=0; j<childs.length; j++) {\n    //             uint balance = erc20.balanceOf(childs[j]);\n    //             if (balance > 0) {\n    //                 totals[i] += balance;\n    //                 IMediator(childs[j]).withdrawERC20(tokens[i], payout, balance);\n    //             }\n    //         }\n    //     }\n    // }\n    \n    function grabERC20List(address[] calldata tokens, address[] calldata childs) external isOwnerOrManager returns (uint[] memory amounts) {\n        require(tokens.length == childs.length, \"Different arguments length\");\n        amounts = new uint[](tokens.length);\n        for (uint i=0; i<tokens.length; i++) {\n            amounts[i] = IERC20(tokens[i]).balanceOf(childs[i]);\n            IMediator(childs[i]).withdrawERC20(tokens[i], payout, amounts[i]);\n        }\n    }\n    \n    function grabETH(address[] calldata childs) external isOwnerOrManager returns (uint[] memory amounts) {\n        amounts = new uint[](childs.length);\n        for (uint i=0; i<childs.length; i++) {\n            amounts[i] = IMediator(childs[i]).withdrawETH(payout);\n        }\n    }\n\n}\n\n// interface IFatherOfMediators {\n    // function getPayout() external view returns (address payable);\n// }\n\ninterface IMediator {\n    function withdrawERC20(address token, address payout, uint amount) external;\n    function withdrawETH(address payout) external returns (uint amount);\n    function init(address a) external;\n}\n\ncontract Mediator {\n\n    address public father;\n\n    constructor(address a) {\n        father = a;\n    }\n\n    function init(address a) external {\n        require(father == address(0));\n        father = a;\n    }\n\n    modifier isFather(){\n        require(msg.sender == father, \"For Father only\");\n        _;\n    }\n\n    function withdrawERC20(address token, address payout, uint amount) external isFather {\n        SafeERC20.safeTransfer(IERC20(token), payout, amount);\n    }\n\n    function withdrawETH(address payable payout) external isFather returns (uint amount) {\n        amount = address(this).balance;\n        Address.sendValue(payout, amount);\n    }\n\n\n    receive() external payable {\n        // Address.sendValue(IFatherOfMediators(father).getPayout(), msg.value);\n    }\n}"}}}