{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/WLEVSURFClaimForwarder.sol": {
      "content": "\npragma solidity >=0.4.24 <0.7.0;\n\ninterface ILeviathan {\n  function tokensOfOwner(address owner) external view returns (uint256[] memory);  \n}\n\ninterface ILeviathanClaim {\n    function release(uint ID) external;\n}\n\ninterface IWLEV {\n    function checkClaim(uint ID) external view returns (uint256); \n}\n\ninterface IFreeFromUpTo {\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n}\n\ninterface IERC20 {\n    function balanceOf(address) external view returns (uint256);\n\tfunction transfer(address, uint256) external returns (bool);\n\tfunction transferFrom(address, address, uint256) external returns (bool);\n}\n\ncontract WLEVSURFClaimForwarder {\n    address private constant _leviathan = 0xeE52c053e091e8382902E7788Ac27f19bBdFeeDc;\n    address private constant _wlev = 0xA2482ccFF8432ee68b9A26a30fCDd2782Bd81BED;\n    address private constant _claim = 0xb4345a489e4aF3a33F81df5FB26E88fFeCEd6489;\n    \n    uint public lastNFTindex = 0;\n    \n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n    address internal _chi = 0x0000000000004946c0e9F43F4Dee607b0eF1fA1c;\n\n    modifier discountCHI {\n        uint256 gasStart = gasleft();\n        _;\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n        chi.freeFromUpTo(address(this), (gasSpent + 14154) / 41130);\n    }\n    \n    // Allows harpoons to dump CHI into this contract\n    function buyFor(uint256 _amount, address _user)\n    public returns (uint256) {\n        require(_amount > 0);\n\t\tIERC20(_chi).transferFrom(msg.sender, address(this), _amount);\n    }\n\n    function forwardAll(uint _minimum, uint _iterations)\n    external discountCHI {\n        uint256[] memory IDs = ILeviathan(_leviathan).tokensOfOwner(_wlev);\n        \n        if(lastNFTindex >= IDs.length)  // if the last NFT index is ever equal to or more than the length of the IDs returned, \n            lastNFTindex = 0;   // loop back to 0\n            \n        if(lastNFTindex + _iterations > IDs.length) // if the amount of iterations requested is more than the length of the IDs returned\n            _iterations = IDs.length - lastNFTindex;    // set the iterations to be the difference between the last NFT index and the length of IDs returned\n\n        for(uint x = lastNFTindex;x < lastNFTindex + _iterations; x++)                 // Loop through all NFTs owned by the WLEV contract (leviathans that are wrapped)\n            if(IWLEV(_wlev).checkClaim(IDs[x]) > _minimum)   // If the NFT is owed more than _minimum SURF tokens (saves gas if we skip claims not worth moving)\n                ILeviathanClaim(_claim).release(IDs[x]);    // Release the SURF tokens into WLEV, which then forwards it to the claim whenever another NFT is un/wrapped\n    }\n}\n\n//TODO: implement un/wrapping of leviathan held by contract, so claim forwarding + wLEV token logic is atomic (preventing OOG for users of the token)"
    }
  }
}