{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/Token.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n\npragma solidity ^0.8.7;\n\ncontract Token{\n    mapping(address => uint) public balances;\n    mapping(address => mapping(address => uint)) public allowance;\n    uint public decimals = 6;\n    uint public totalSupply = 1000000000 * 10 ** decimals;\n    string public name = \"Alter Shape Coin\";\n    string public symbol = \"ASC\";\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n\n    constructor(){\n        balances[msg.sender] = totalSupply;\n    }\n\n    function balanceOf(address owner) public view returns(uint){\n        return balances[owner];\n    }\n\n    function transfer(address to, uint value) public returns(bool){\n        require(balanceOf(msg.sender) >= value, 'balance too low');\n        balances[msg.sender] -= value;\n        balances[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) public returns(bool){\n        require(balanceOf(from) >= value, 'balance to low');\n        require(allowance[from][msg.sender] >= value, 'allow too low');\n        balances[from] -= value;\n        balances[to] += value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint value) public returns(bool){\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n}"
    }
  }
}