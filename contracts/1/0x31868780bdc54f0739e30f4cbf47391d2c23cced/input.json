{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/CounterAddrress.sol": {
      "content": "pragma solidity = 0.6.0;\n\n\n\ncontract CounterAddress\n{\n    address private     root;\n\taddress[] private\tmanager;\n\tuint8 private\t\tmanagerMin\t\t= 2;\n\tuint8 private\t\tmanagerMax\t\t= 10;\n\n\taddress[] private\tworker;\n\tuint8 private\t\tworkerMin\t\t= 3;\n\tuint8 private\t\tworkerMax\t\t= 10;\n\n\tstring private\t\tapiServer\t\t= \"\";\n\tuint8 private\t\tnoticeKind\t\t= 0;\n\tstring private\t\tnoticeMsg\t\t= \"\";\n\tuint private\t\tnoticeStart\t\t= 0;\n\tuint private\t\tnoticeEnd\t\t= 0;\n\tmapping (string => uint) private\tinfo;\n\tmapping (string => uint8) private\tidxKey;\n\n\n\n\tevent log300 ( address );\n\tevent log301 ( address );\n\tevent log302 ( address );\n\tevent log310 ( address );\n\tevent log311 ( address );\n\tevent log344 ( address, uint );\n\tevent log345 ( address, uint );\n\tevent log350 ( string );\n\tevent log351 ( uint16, string, uint, uint );\n\tevent log352 ( uint16, uint );\n\n\n\n\tconstructor () public\n\t{\n\t\tmanager.push ( msg.sender );\n\n\t\t//idxKey['newProtected']\t\t= uint8(1);\n\t\tidxKey['transfer']\t\t    \t= uint8(2);\n\t\tidxKey['changePeriod']\t    \t= uint8(3);\n\t\tidxKey['changeController']  \t= uint8(4);\n\t\tidxKey['changePeriodGas']   \t= uint8(10);\n\t\tidxKey['changeControllerGas']\t= uint8(11);\n\t}\n\n\n\n\tmodifier onlyInManager\n\t{\n\t    require ( getIndex(manager,msg.sender) < 255, \"CAMSG001\" );\n\t    _;\n\t}\n\tmodifier onlyInWorker\n\t{\n\t    require ( getIndex(worker,msg.sender) < 255, \"CAMSG002\" );\n\t    _;\n\t}\n\n\n\n\treceive () external payable {}\n\n\n\n\tfunction getRoot () external view returns ( address )                   { return root; }\n\tfunction getManagers () external view returns ( address[] memory )\t\t{ return manager; }\n\tfunction getWorkers () external view returns ( address[] memory )       { return worker; }\n\tfunction isWorker ( address _worker ) external view returns ( bool )    { return getIndex(worker,_worker) < 255; }\n\tfunction getIndex ( address[] memory _group, address _address  ) private pure returns ( uint8 )\n\t{\n\t\tfor ( uint8 i=0; i<_group.length; i++ )\n\t\t\tif ( _group[i] == _address ) return i;\n\t\treturn uint8(255);\n\t}\n\tfunction getNotice ( uint _now ) external view returns ( uint8, string memory, uint, uint )\n\t{\n\t\tif ( _now < noticeEnd ) return ( noticeKind, noticeMsg, noticeStart, noticeEnd );\n\t\telse                    return ( 0, \"\", 0, 0 );\n\t}\n\tfunction getApiServer () external view returns ( string memory )        { return apiServer; }\n\tfunction getInfo ( string calldata _key ) external view returns ( string memory, uint )\n\t{ return ( _key, info[_key] ); }\n\n\n\n\tfunction removeInArray ( address[] storage _group, uint8 _index ) private\n\t{\n\t    if ( _index < _group.length-1 )\n    \t    _group[_index] = _group[_group.length-1];\n\t    _group.pop();\n\t}\n\n\n\n\tfunction addManager ( address _manager ) external payable onlyInManager\n\t{\n\t\trequire ( manager.length < managerMax, \"CAMSG003\" );\n\t    require ( getIndex(manager,_manager) == 255, \"CAMSG004\" );\n\t\tmanager.push ( _manager );\n\t\temit log300 ( _manager );\n\t}\n\tfunction removeManager ( address _manager ) external payable onlyInManager\n\t{\n\t\trequire ( manager.length > managerMin, \"CAMSG005\" );\n\t\tuint8 idx = getIndex ( manager, _manager );\n\t    require ( idx < 255, \"CAMSG006\" );\n\t\tremoveInArray ( manager, idx );\n\t\temit log301 ( _manager );\n\t}\n\tfunction setRoot ( address _root ) external payable onlyInManager\n\t{\n\t\troot = _root;\n\t\temit log302 ( root );\n\t}\n\tfunction addWorker ( address _worker ) external payable onlyInManager\n\t{\n\t\trequire ( worker.length < workerMax, \"CAMSG007\" );\n\t    require ( getIndex(worker,_worker) == 255, \"CAMSG008\" );\n\t\tworker.push ( _worker );\n\t\temit log310 ( _worker );\n\t}\n\tfunction removeWorker ( address _worker ) external payable onlyInManager\n\t{\n\t\trequire ( worker.length > workerMin, \"CAMSG009\" );\n\t\tuint8 idx = getIndex ( worker, _worker );\n\t    require ( idx < 255, \"CAMSG010\" );\n        removeInArray ( worker, idx );\n\t\temit log311 ( _worker );\n\t}\n\n\n\n\tfunction chargeGas ( address _worker, uint _gas ) external payable onlyInWorker\n\t{\n\t    require ( getIndex(worker,_worker) < 255, \"CAMSG011\" );\n\t\t(bool _ret, bytes memory _message ) = payable(_worker).call.value ( _gas ) ( \"\" );\n\t\trequire ( _ret, string(_message) );\n\t\temit log344 ( _worker, _gas );\n\t}\n\tfunction saveEther () external payable onlyInManager\n\t{\n\t\tuint _balance = address(this).balance;\n\t\tuint _gas = worker.length * 1000000000000000000;\n\n\t\trequire ( _gas <= _balance, \"CAMSG012\" );\n\t\tuint amount = _balance - _gas;\n\n        address superAddr;\n        (,bytes memory _data) = root.staticcall ( abi.encodeWithSignature ( \"getAddress(string)\", \"superAddress\" ) );\n        assembly { superAddr := mload ( add ( _data, 32 ) ) }\n\n\t\t(bool _ret, bytes memory _message ) = payable(superAddr).call.value ( amount ) ( \"\" );\n\t\trequire ( _ret, string(_message) );\n\t\temit log345 ( superAddr, amount );\n\t}\n\n\n\n\tfunction setNotice ( uint8 _noticeKind, string calldata _noticeMsg, uint _noticeStart, uint _noticeEnd ) external payable onlyInManager\n\t{\n\t\tnoticeKind = _noticeKind;\n\t\tnoticeMsg = _noticeMsg;\n\t\tnoticeStart = _noticeStart;\n\t\tnoticeEnd = _noticeEnd;\n\t\temit log351 ( uint16(noticeKind), noticeMsg, noticeStart, noticeEnd );\n\t}\n\tfunction resetNotice () external payable onlyInManager\n\t{\n\t\tnoticeKind = 0;\n\t\tnoticeMsg = \"\";\n\t\tnoticeStart = 0;\n\t\tnoticeEnd = 0;\n\t\temit log351 ( uint16(0), \"\", 0, 0 );\n\t}\n\tfunction setApiServer ( string calldata _apiServer ) external payable onlyInManager\n\t{\n\t\tapiServer = _apiServer;\n\t\temit log350 ( apiServer );\n\t}\n\tfunction setInfo ( string calldata _key, uint _info ) external payable onlyInManager\n\t{\n\t\tinfo[_key] = _info;\n\t\temit log352 ( uint16(idxKey[_key]), info[_key] );\n\t}\n}\n"
    }
  }
}