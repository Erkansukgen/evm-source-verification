{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/CryptographIndexProxiedV1.sol":{"content":"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\npragma solidity 0.6.6;\n\nimport \"./VCProxy.sol\";\nimport \"./CryptographIndexV1.sol\";\n\n/// @author Guillaume Gonnaud 2019\n/// @title  Cryptograph Index Proxy Smart Contract\n/// @notice The proxied Index : this is this contract that will be instancied on the blockchain. Cast this as the logic contract to interact with it.\ncontract CryptographIndexProxiedV1 is VCProxy, CryptographIndexHeaderV1, CryptographIndexStorageInternalV1  {\n\n    constructor(uint256 _version, address _vc)  public\n    VCProxy(_version, _vc) //Call the VC proxy constructor so that we know where our logic code is\n    {\n        //Self intialize (nothing)\n    }\n\n    //No other logic code as it is all proxied\n\n}\n\n\n\n"},"browser/CryptographIndexV1.sol":{"content":"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\npragma solidity 0.6.6;\n\n/// @author Guillaume Gonnaud 2019\n/// @title Cryptoraph Indexer Header\n/// @notice Contain all the events emitted by the Cryptoraph Indexer\ncontract CryptographIndexHeaderV1 {\n}\n\n/// @author Guillaume Gonnaud 2019\n/// @title Cryptograph Indexer Storage Internal\n/// @notice Contain all the storage of the Cryptograph Indexer declared in a way that don't generate getters for Proxy use\ncontract CryptographIndexStorageInternalV1 {\n    bool internal initialized; //Bool to check if the index has been initialized\n    address internal factory; //The factory smart contract (proxy) that will publish the cryptographs\n    address[] internal cryptographs;\n    address[] internal communityCryptographs;\n    mapping (address => uint) internal editionSizes; //Set to 0 if unique (not edition)\n    mapping (address => uint) internal cryptographType; //0 = Unique, 1 = Edition, 2 = Minting\n    uint256 internal indexerLogicCodeIndex; //The index in the Version Control of the logic code\n\n    address internal ERC2665Lieutenant;\n}\n\n/// @author Guillaume Gonnaud 2019\n/// @title Cryptograph Indexer Storage Public\n/// @notice Contain all the storage of the Cryptograph Indexer declared in a way that generates getters for logic use\ncontract CryptographIndexStoragePublicV1 {\n    bool public initialized; //Bool to check if the index has been initialized\n    address public factory; //The factory smart contract (proxy) that will publish the cryptographs\n    address[] public cryptographs;\n    address[] public communityCryptographs;\n    mapping (address => uint) public editionSizes; //Set to 0 if unique (not edition)\n    mapping (address => uint) public cryptographType; //0 = Unique, 1 = Edition, 2 = Minting\n    uint256 public indexerLogicCodeIndex; //The index in the VC of the logic code\n\n    address public ERC2665Lieutenant;\n}\n\n"},"browser/VCProxy.sol":{"content":"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\npragma solidity 0.6.6;\n\n/* Based on a variation of https://blog.gnosis.pm/solidity-delegateproxy-contracts-e09957d0f201\nThis generic proxy is gonna ask a version control smart contract for its logic code instead\nof storing the remote address himself\n*/\n\n/*\nSmart contract only containing a public array named the same as VC so that the compiler call the proper\nfunction signature in our generic proxy\n*/\ncontract VersionControlStoragePublic {\n    address[] public code;\n}\n\n\n/*\nStorage stack of a proxy contract. VCproxy inherit this, as well as ALL logic contracts associated to a proxy for storage alignment reasons.\n*/\ncontract VCProxyData {\n    address internal vc; //Version Control Smart Contract Address\n    uint256 internal version; //The index of our logic code in the Version Control array.\n}\n\n\n/*\nLogic of a proxy contract. EVERY proxied contract inherit this\n*/\ncontract VCProxy is VCProxyData {\n    constructor(uint256 _version, address _vc) public {\n        version = _version;\n        vc = _vc;\n    }\n\n    fallback () virtual external payable {\n\n        address addr = VersionControlStoragePublic(vc).code(version);\n        assembly {\n            let freememstart := mload(0x40)\n            calldatacopy(freememstart, 0, calldatasize())\n            let success := delegatecall(not(0), addr, freememstart, calldatasize(), freememstart, 0)\n            returndatacopy(freememstart, 0, returndatasize())\n            switch success\n            case 0 { revert(freememstart, returndatasize()) }\n            default { return(freememstart, returndatasize()) }\n        }\n    }\n\n    \n    /// @notice Generic catch-all function that refuse payments to prevent accidental Eth burn.\n    receive() virtual external payable{\n       require(false, \"Do not send me Eth without a reason\");\n    }\n}"}}}