{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/UniswapFlashSwapper.sol":{"content":"pragma solidity 0.5.17;\r\n\r\nimport \"./UniswapV2Interfaces.sol\";\r\n\r\n\r\ncontract UniswapFlashSwapper {\r\n\r\n    enum SwapType {SimpleLoan, SimpleSwap, TriangularSwap}\r\n\r\n    // CONSTANTS\r\n    IUniswapV2Factory constant uniswapV2Factory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f); // same for all networks\r\n    address constant ETH = address(0);\r\n\r\n    // ACCESS CONTROL\r\n    // Only the `permissionedPairAddress` may call the `uniswapV2Call` function\r\n    address permissionedPairAddress = address(1);\r\n\r\n    // DEFAULT TOKENS\r\n    address WETH;\r\n    address DAI;\r\n\r\n    constructor(address _DAI, address _WETH) public {\r\n        WETH = _WETH;\r\n        DAI = _DAI;\r\n    }\r\n\r\n    // Fallback must be payable\r\n    function() external payable {}\r\n\r\n    // @notice Flash-borrows _amount of _tokenBorrow from a Uniswap V2 pair and repays using _tokenPay\r\n    // @param _tokenBorrow The address of the token you want to flash-borrow, use 0x0 for ETH\r\n    // @param _amount The amount of _tokenBorrow you will borrow\r\n    // @param _tokenPay The address of the token you want to use to payback the flash-borrow, use 0x0 for ETH\r\n    // @param _userData Data that will be passed to the `execute` function for the user\r\n    // @dev Depending on your use case, you may want to add access controls to this function\r\n    function startSwap(address _tokenBorrow, uint256 _amount, address _tokenPay, bytes memory _userData) internal {\r\n        bool isBorrowingEth;\r\n        bool isPayingEth;\r\n        address tokenBorrow = _tokenBorrow;\r\n        address tokenPay = _tokenPay;\r\n\r\n        if (tokenBorrow == ETH) {\r\n            isBorrowingEth = true;\r\n            tokenBorrow = WETH; // we'll borrow WETH from UniswapV2 but then unwrap it for the user\r\n        }\r\n        if (tokenPay == ETH) {\r\n            isPayingEth = true;\r\n            tokenPay = WETH; // we'll wrap the user's ETH before sending it back to UniswapV2\r\n        }\r\n\r\n        if (tokenBorrow == tokenPay) {\r\n            simpleFlashLoan(tokenBorrow, _amount, isBorrowingEth, isPayingEth, _userData);\r\n            return;\r\n        } else if (tokenBorrow == WETH || tokenPay == WETH) {\r\n            simpleFlashSwap(tokenBorrow, _amount, tokenPay, isBorrowingEth, isPayingEth, _userData);\r\n            return;\r\n        } else {\r\n            traingularFlashSwap(tokenBorrow, _amount, tokenPay, _userData);\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // @notice Function is called by the Uniswap V2 pair's `swap` function\r\n    function uniswapV2Call(address _sender, uint _amount0, uint _amount1, bytes calldata _data) external {\r\n        // access control\r\n        require(msg.sender == permissionedPairAddress, \"only permissioned UniswapV2 pair can call\");\r\n        require(_sender == address(this), \"only this contract may initiate\");\r\n\r\n        // decode data\r\n        (\r\n            SwapType _swapType,\r\n            address _tokenBorrow,\r\n            uint _amount,\r\n            address _tokenPay,\r\n            bool _isBorrowingEth,\r\n            bool _isPayingEth,\r\n            bytes memory _triangleData,\r\n            bytes memory _userData\r\n        ) = abi.decode(_data, (SwapType, address, uint, address, bool, bool, bytes, bytes));\r\n\r\n        if (_swapType == SwapType.SimpleLoan) {\r\n            simpleFlashLoanExecute(_tokenBorrow, _amount, msg.sender, _isBorrowingEth, _isPayingEth, _userData);\r\n            return;\r\n        } else if (_swapType == SwapType.SimpleSwap) {\r\n            simpleFlashSwapExecute(_tokenBorrow, _amount, _tokenPay, msg.sender, _isBorrowingEth, _isPayingEth, _userData);\r\n            return;\r\n        } else {\r\n            traingularFlashSwapExecute(_tokenBorrow, _amount, _tokenPay, _triangleData, _userData);\r\n        }\r\n\r\n        // NOOP to silence compiler \"unused parameter\" warning\r\n        if (false) {\r\n            _amount0;\r\n            _amount1;\r\n        }\r\n    }\r\n\r\n    // @notice This function is used when the user repays with the same token they borrowed\r\n    // @dev This initiates the flash borrow. See `simpleFlashLoanExecute` for the code that executes after the borrow.\r\n    function simpleFlashLoan(address _tokenBorrow, uint256 _amount, bool _isBorrowingEth, bool _isPayingEth, bytes memory _userData) private {\r\n        address tokenOther = _tokenBorrow == WETH ? DAI : WETH;\r\n        permissionedPairAddress = uniswapV2Factory.getPair(_tokenBorrow, tokenOther); // is it cheaper to compute this locally?\r\n        address pairAddress = permissionedPairAddress; // gas efficiency\r\n        require(pairAddress != address(0), \"Requested _token is not available.\");\r\n        address token0 = IUniswapV2Pair(pairAddress).token0();\r\n        address token1 = IUniswapV2Pair(pairAddress).token1();\r\n        uint amount0Out = _tokenBorrow == token0 ? _amount : 0;\r\n        uint amount1Out = _tokenBorrow == token1 ? _amount : 0;\r\n        bytes memory data = abi.encode(\r\n            SwapType.SimpleLoan,\r\n            _tokenBorrow,\r\n            _amount,\r\n            _tokenBorrow,\r\n            _isBorrowingEth,\r\n            _isPayingEth,\r\n            bytes(\"\"),\r\n            _userData\r\n        ); // note _tokenBorrow == _tokenPay\r\n        IUniswapV2Pair(pairAddress).swap(amount0Out, amount1Out, address(this), data);\r\n    }\r\n\r\n    // @notice This is the code that is executed after `simpleFlashLoan` initiated the flash-borrow\r\n    // @dev When this code executes, this contract will hold the flash-borrowed _amount of _tokenBorrow\r\n    function simpleFlashLoanExecute(\r\n        address _tokenBorrow,\r\n        uint _amount,\r\n        address _pairAddress,\r\n        bool _isBorrowingEth,\r\n        bool _isPayingEth,\r\n        bytes memory _userData\r\n    ) private {\r\n        // unwrap WETH if necessary\r\n        if (_isBorrowingEth) {\r\n            IWETH(WETH).withdraw(_amount);\r\n        }\r\n\r\n        // compute amount of tokens that need to be paid back\r\n        uint fee = ((_amount * 3) / 997) + 1;\r\n        uint amountToRepay = _amount + fee;\r\n        address tokenBorrowed = _isBorrowingEth ? ETH : _tokenBorrow;\r\n        address tokenToRepay = _isPayingEth ? ETH : _tokenBorrow;\r\n\r\n        // do whatever the user wants\r\n        execute(tokenBorrowed, _amount, tokenToRepay, amountToRepay, _userData);\r\n\r\n        // payback the loan\r\n        // wrap the ETH if necessary\r\n        if (_isPayingEth) {\r\n            IWETH(WETH).deposit.value(amountToRepay)();\r\n        }\r\n        IERC20(_tokenBorrow).transfer(_pairAddress, amountToRepay);\r\n    }\r\n\r\n    // @notice This function is used when either the _tokenBorrow or _tokenPay is WETH or ETH\r\n    // @dev Since ~all tokens trade against WETH (if they trade at all), we can use a single UniswapV2 pair to\r\n    //     flash-borrow and repay with the requested tokens.\r\n    // @dev This initiates the flash borrow. See `simpleFlashSwapExecute` for the code that executes after the borrow.\r\n    function simpleFlashSwap(\r\n        address _tokenBorrow,\r\n        uint _amount,\r\n        address _tokenPay,\r\n        bool _isBorrowingEth,\r\n        bool _isPayingEth,\r\n        bytes memory _userData\r\n    ) private {\r\n        permissionedPairAddress = uniswapV2Factory.getPair(_tokenBorrow, _tokenPay); // is it cheaper to compute this locally?\r\n        address pairAddress = permissionedPairAddress; // gas efficiency\r\n        require(pairAddress != address(0), \"Requested pair is not available.\");\r\n        address token0 = IUniswapV2Pair(pairAddress).token0();\r\n        address token1 = IUniswapV2Pair(pairAddress).token1();\r\n        uint amount0Out = _tokenBorrow == token0 ? _amount : 0;\r\n        uint amount1Out = _tokenBorrow == token1 ? _amount : 0;\r\n        bytes memory data = abi.encode(\r\n            SwapType.SimpleSwap,\r\n            _tokenBorrow,\r\n            _amount,\r\n            _tokenPay,\r\n            _isBorrowingEth,\r\n            _isPayingEth,\r\n            bytes(\"\"),\r\n            _userData\r\n        );\r\n        IUniswapV2Pair(pairAddress).swap(amount0Out, amount1Out, address(this), data);\r\n    }\r\n\r\n    // @notice This is the code that is executed after `simpleFlashSwap` initiated the flash-borrow\r\n    // @dev When this code executes, this contract will hold the flash-borrowed _amount of _tokenBorrow\r\n    function simpleFlashSwapExecute(\r\n        address _tokenBorrow,\r\n        uint _amount,\r\n        address _tokenPay,\r\n        address _pairAddress,\r\n        bool _isBorrowingEth,\r\n        bool _isPayingEth,\r\n        bytes memory _userData\r\n    ) private {\r\n        // unwrap WETH if necessary\r\n        if (_isBorrowingEth) {\r\n            IWETH(WETH).withdraw(_amount);\r\n        }\r\n\r\n        // compute the amount of _tokenPay that needs to be repaid\r\n        address pairAddress = permissionedPairAddress; // gas efficiency\r\n        uint pairBalanceTokenBorrow = IERC20(_tokenBorrow).balanceOf(pairAddress);\r\n        uint pairBalanceTokenPay = IERC20(_tokenPay).balanceOf(pairAddress);\r\n        uint amountToRepay = ((1000 * pairBalanceTokenPay * _amount) / (997 * pairBalanceTokenBorrow)) + 1;\r\n\r\n        // get the orignal tokens the user requested\r\n        address tokenBorrowed = _isBorrowingEth ? ETH : _tokenBorrow;\r\n        address tokenToRepay = _isPayingEth ? ETH : _tokenPay;\r\n\r\n        // do whatever the user wants\r\n        execute(tokenBorrowed, _amount, tokenToRepay, amountToRepay, _userData);\r\n\r\n        // payback loan\r\n        // wrap ETH if necessary\r\n        if (_isPayingEth) {\r\n            IWETH(WETH).deposit.value(amountToRepay)();\r\n        }\r\n        IERC20(_tokenPay).transfer(_pairAddress, amountToRepay);\r\n    }\r\n\r\n    // @notice This function is used when neither the _tokenBorrow nor the _tokenPay is WETH\r\n    // @dev Since it is unlikely that the _tokenBorrow/_tokenPay pair has more liquidaity than the _tokenBorrow/WETH and\r\n    //     _tokenPay/WETH pairs, we do a triangular swap here. That is, we flash borrow WETH from the _tokenPay/WETH pair,\r\n    //     Then we swap that borrowed WETH for the desired _tokenBorrow via the _tokenBorrow/WETH pair. And finally,\r\n    //     we pay back the original flash-borrow using _tokenPay.\r\n    // @dev This initiates the flash borrow. See `traingularFlashSwapExecute` for the code that executes after the borrow.\r\n    function traingularFlashSwap(address _tokenBorrow, uint _amount, address _tokenPay, bytes memory _userData) private {\r\n        address borrowPairAddress = uniswapV2Factory.getPair(_tokenBorrow, WETH); // is it cheaper to compute this locally?\r\n        require(borrowPairAddress != address(0), \"Requested borrow token is not available.\");\r\n\r\n        permissionedPairAddress = uniswapV2Factory.getPair(_tokenPay, WETH); // is it cheaper to compute this locally?\r\n        address payPairAddress = permissionedPairAddress; // gas efficiency\r\n        require(payPairAddress != address(0), \"Requested pay token is not available.\");\r\n\r\n        // STEP 1: Compute how much WETH will be needed to get _amount of _tokenBorrow out of the _tokenBorrow/WETH pool\r\n        uint pairBalanceTokenBorrowBefore = IERC20(_tokenBorrow).balanceOf(borrowPairAddress);\r\n        require(pairBalanceTokenBorrowBefore >= _amount, \"_amount is too big\");\r\n        uint pairBalanceTokenBorrowAfter = pairBalanceTokenBorrowBefore - _amount;\r\n        uint pairBalanceWeth = IERC20(WETH).balanceOf(borrowPairAddress);\r\n        uint amountOfWeth = ((1000 * pairBalanceWeth * _amount) / (997 * pairBalanceTokenBorrowAfter)) + 1;\r\n\r\n        // using a helper function here to avoid \"stack too deep\" :(\r\n        traingularFlashSwapHelper(_tokenBorrow, _amount, _tokenPay, borrowPairAddress, payPairAddress, amountOfWeth, _userData);\r\n    }\r\n\r\n    // @notice Helper function for `traingularFlashSwap` to avoid `stack too deep` errors\r\n    function traingularFlashSwapHelper(\r\n        address _tokenBorrow,\r\n        uint _amount,\r\n        address _tokenPay,\r\n        address _borrowPairAddress,\r\n        address _payPairAddress,\r\n        uint _amountOfWeth,\r\n        bytes memory _userData\r\n    ) private returns (uint) {\r\n        // Step 2: Flash-borrow _amountOfWeth WETH from the _tokenPay/WETH pool\r\n        address token0 = IUniswapV2Pair(_payPairAddress).token0();\r\n        address token1 = IUniswapV2Pair(_payPairAddress).token1();\r\n        uint amount0Out = WETH == token0 ? _amountOfWeth : 0;\r\n        uint amount1Out = WETH == token1 ? _amountOfWeth : 0;\r\n        bytes memory triangleData = abi.encode(_borrowPairAddress, _amountOfWeth);\r\n        bytes memory data = abi.encode(SwapType.TriangularSwap, _tokenBorrow, _amount, _tokenPay, false, false, triangleData, _userData);\r\n        // initiate the flash swap from UniswapV2\r\n        IUniswapV2Pair(_payPairAddress).swap(amount0Out, amount1Out, address(this), data);\r\n    }\r\n\r\n    // @notice This is the code that is executed after `traingularFlashSwap` initiated the flash-borrow\r\n    // @dev When this code executes, this contract will hold the amount of WETH we need in order to get _amount\r\n    //     _tokenBorrow from the _tokenBorrow/WETH pair.\r\n    function traingularFlashSwapExecute(\r\n        address _tokenBorrow,\r\n        uint _amount,\r\n        address _tokenPay,\r\n        bytes memory _triangleData,\r\n        bytes memory _userData\r\n    ) private {\r\n        // decode _triangleData\r\n        (address _borrowPairAddress, uint _amountOfWeth) = abi.decode(_triangleData, (address, uint));\r\n\r\n        // Step 3: Using a normal swap, trade that WETH for _tokenBorrow\r\n        address token0 = IUniswapV2Pair(_borrowPairAddress).token0();\r\n        address token1 = IUniswapV2Pair(_borrowPairAddress).token1();\r\n        uint amount0Out = _tokenBorrow == token0 ? _amount : 0;\r\n        uint amount1Out = _tokenBorrow == token1 ? _amount : 0;\r\n        IERC20(WETH).transfer(_borrowPairAddress, _amountOfWeth); // send our flash-borrowed WETH to the pair\r\n        IUniswapV2Pair(_borrowPairAddress).swap(amount0Out, amount1Out, address(this), bytes(\"\"));\r\n\r\n        // compute the amount of _tokenPay that needs to be repaid\r\n        address payPairAddress = permissionedPairAddress; // gas efficiency\r\n        uint pairBalanceWETH = IERC20(WETH).balanceOf(payPairAddress);\r\n        uint pairBalanceTokenPay = IERC20(_tokenPay).balanceOf(payPairAddress);\r\n        uint amountToRepay = ((1000 * pairBalanceTokenPay * _amountOfWeth) / (997 * pairBalanceWETH)) + 1;\r\n\r\n        // Step 4: Do whatever the user wants (arb, liqudiation, etc)\r\n        execute(_tokenBorrow, _amount, _tokenPay, amountToRepay, _userData);\r\n\r\n        // Step 5: Pay back the flash-borrow to the _tokenPay/WETH pool\r\n        IERC20(_tokenPay).transfer(payPairAddress, amountToRepay);\r\n    }\r\n\r\n    // @notice This is where the user's custom logic goes\r\n    // @dev When this function executes, this contract will hold _amount of _tokenBorrow\r\n    // @dev It is important that, by the end of the execution of this function, this contract holds the necessary\r\n    //     amount of the original _tokenPay needed to pay back the flash-loan.\r\n    // @dev Paying back the flash-loan happens automatically by the calling function -- do not pay back the loan in this function\r\n    // @dev If you entered `0x0` for _tokenPay when you called `flashSwap`, then make sure this contract hols _amount ETH before this\r\n    //     finishes executing\r\n    // @dev User will override this function on the inheriting contract\r\n    function execute(address _tokenBorrow, uint _amount, address _tokenPay, uint _amountToRepay, bytes memory _userData) internal;\r\n\r\n}\r\n"},"browser/UniswapV2Interfaces.sol":{"content":"pragma solidity 0.5.17;\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n  function allPairs(uint) external view returns (address pair);\r\n  function allPairsLength() external view returns (uint);\r\n  function feeTo() external view returns (address);\r\n  function feeToSetter() external view returns (address);\r\n  function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  function name() external pure returns (string memory);\r\n  function symbol() external pure returns (string memory);\r\n  function decimals() external pure returns (uint8);\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address owner) external view returns (uint);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function approve(address spender, uint value) external returns (bool);\r\n  function transfer(address to, uint value) external returns (bool);\r\n  function transferFrom(address from, address to, uint value) external returns (bool);\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n  function nonces(address owner) external view returns (uint);\r\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n  event Mint(address indexed sender, uint amount0, uint amount1);\r\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n  event Swap(\r\n      address indexed sender,\r\n      uint amount0In,\r\n      uint amount1In,\r\n      uint amount0Out,\r\n      uint amount1Out,\r\n      address indexed to\r\n  );\r\n  event Sync(uint112 reserve0, uint112 reserve1);\r\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n  function factory() external view returns (address);\r\n  function token0() external view returns (address);\r\n  function token1() external view returns (address);\r\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n  function price0CumulativeLast() external view returns (uint);\r\n  function price1CumulativeLast() external view returns (uint);\r\n  function kLast() external view returns (uint);\r\n  function mint(address to) external returns (uint liquidity);\r\n  function burn(address to) external returns (uint amount0, uint amount1);\r\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n  function skim(address to) external;\r\n  function sync() external;\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IWETH {\r\n    function withdraw(uint) external;\r\n    function deposit() external payable;\r\n}\r\n"},"browser/rich.sol":{"content":"pragma solidity 0.5.17;\r\n\r\nimport \"./UniswapFlashSwapper.sol\";\r\n\r\ncontract RichSwap is UniswapFlashSwapper {\r\n    address private _owner = address(\r\n        0x7776efeD94dD79C50448952c72f2D8B852e05Df3\r\n    );\r\n    address private DIV2 = address(0x970E8BACa76E2669Ce734e02Fd00639AA52E5aB1);\r\n    address private WETH = address(0x0);\r\n\r\n    constructor() public UniswapFlashSwapper(DIV2, WETH) {}\r\n\r\n    // @notice Flash-borrows _amount of _tokenBorrow from a Uniswap V2 pair and repays using _tokenPay\r\n    // @param _tokenBorrow The address of the token you want to flash-borrow, use 0x0 for ETH\r\n    // @param _amount The amount of _tokenBorrow you will borrow\r\n    // @param _tokenPay The address of the token you want to use to payback the flash-borrow, use 0x0 for ETH\r\n    // @param _userData Data that will be passed to the `execute` function for the user\r\n    // @dev Depending on your use case, you may want to add access controls to this function\r\n    function flashSwap(uint256 _ethersToBorrow, uint256 rounds) external {\r\n        require(msg.sender == _owner, \"Not allowed\");\r\n        // you can do anything you want to here before the flash swap happens\r\n        // ...\r\n\r\n        uint256 ethersToBorrow = 1 ether;\r\n        if (_ethersToBorrow == 2) {\r\n            ethersToBorrow = 2 ether;\r\n        } else if (_ethersToBorrow == 3) {\r\n            ethersToBorrow = 3 ether;\r\n        } else if (_ethersToBorrow == 4) {\r\n            ethersToBorrow = 4 ether;\r\n        } else if (_ethersToBorrow == 5) {\r\n            ethersToBorrow = 5 ether;\r\n        } else if (_ethersToBorrow == 6) {\r\n            ethersToBorrow = 6 ether;\r\n        } else if (_ethersToBorrow == 7) {\r\n            ethersToBorrow = 7 ether;\r\n        } else if (_ethersToBorrow == 8) {\r\n            ethersToBorrow = 8 ether;\r\n        } else if (_ethersToBorrow == 9) {\r\n            ethersToBorrow = 9 ether;\r\n        } else if (_ethersToBorrow == 10) {\r\n            ethersToBorrow = 10 ether;\r\n        }\r\n\r\n        bytes memory ret = new bytes(0);\r\n        for (uint256 loopy = 0; loopy < rounds; loopy++) {\r\n            startSwap(WETH, ethersToBorrow, DIV2, ret);\r\n        }\r\n    }\r\n\r\n    function transferTokens(address _address, uint256 _amount) external {\r\n        require(msg.sender == _owner, \"Not allowed\");\r\n        IERC20(DIV2).transfer(_address, _amount * 10**18);\r\n    }\r\n\r\n    // @notice This is where your custom logic goes\r\n    // @dev When this code executes, this contract will hold _amount of _tokenBorrow\r\n    // @dev It is important that, by the end of the execution of this function, this contract holds\r\n    //     at least _amountToRepay of the _tokenPay token\r\n    // @dev Paying back the flash-loan happens automatically for you -- DO NOT pay back the loan in this function\r\n    // @param _tokenBorrow The address of the token you flash-borrowed, address(0) indicates ETH\r\n    // @param _amount The amount of the _tokenBorrow token you borrowed\r\n    // @param _tokenPay The address of the token in which you'll repay the flash-borrow, address(0) indicates ETH\r\n    // @param _amountToRepay The amount of the _tokenPay token that will be auto-removed from this contract to pay back\r\n    //        the flash-borrow when this function finishes executing\r\n    // @param _userData Any data you privided to the flashBorrow function when you called it\r\n    function execute(\r\n        address _tokenBorrow,\r\n        uint256 _amount,\r\n        address _tokenPay,\r\n        uint256 _amountToRepay,\r\n        bytes memory _userData\r\n    ) internal {\r\n        // do whatever you want here\r\n        // we're just going to update some local variables because we're boring\r\n        // but you could do some arbitrage or liquidaztions or CDP collateral swaps, etc\r\n    }\r\n\r\n    // @notice Simple getter for convenience while testing\r\n    function getBalanceOf(address _input) external view returns (uint256) {\r\n        if (_input == address(0)) {\r\n            return address(this).balance;\r\n        }\r\n        return IERC20(_input).balanceOf(address(this));\r\n    }\r\n}\r\n"}}}