{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "CryptoSkullsAPI.sol": {
      "content": "pragma solidity 0.4.24;\r\n\r\ncontract CryptoSkulls {\r\n    \r\n    function supportsInterface(bytes4) public pure returns (bool) {}\r\n    function name() public pure returns (string) {}\r\n    function getApproved(uint) public pure returns (uint) {}\r\n    function totalSupply() public pure returns (uint) {}\r\n    function tokenOfOwnerByIndex(address, uint) public pure returns (uint) {}\r\n    function tokenByIndex(uint) public pure returns (uint) {}\r\n    function imageHash() public pure returns (string) {}\r\n    function ownerOf(uint) public pure returns (address) {}\r\n    function balanceOf(address) public pure returns (uint) {}\r\n    function owner() public pure returns (address) {}\r\n    function isOwner() public pure returns (bool) {}\r\n    function symbol() public pure returns (string) {}\r\n    function isApprovedForAll(address, address) public pure returns (bool) {}\r\n\r\n}\r\n\r\ncontract CryptoSkullsAPI {\r\n    modifier onlyAuthor {\r\n        require(msg.sender == author);\r\n        _;\r\n    }\r\n    \r\n    CryptoSkulls pullContract;\r\n    \r\n    address public author;\r\n    address public tokenAddress;\r\n    string public imageHash;\r\n    string public imageHashURI;\r\n    string public tokenURI;\r\n   \r\n    constructor() public {\r\n        author = msg.sender;\r\n        tokenAddress = 0xc1Caf0C19A8AC28c41Fe59bA6c754e4b9bd54dE9;\r\n        imageHashURI = 'https://ipfs.io/ipfs/QmXVHusfnw2vK3VMQinasuQXpcwUHEBauDwnWGrCoJ6dgy';\r\n        tokenURI = 'https://gateway.ethswarm.org/files/cd8633ae1ee6c310366e72154f22edfca28ab87bbda7a2282d33cf7e2426c585';\r\n        pullContract = CryptoSkulls(tokenAddress);   \r\n        emit _UpdateContract(tokenAddress, imageHashURI, tokenURI);\r\n    }\r\n          \r\n    \r\n    function killContract() public onlyAuthor { \r\n        selfdestruct(author); \r\n    }\r\n    \r\n    function transferOwnership(address _author) public onlyAuthor { \r\n        author = _author; \r\n        \r\n        emit _transferOwnership(msg.sender, _author);\r\n    }\r\n    \r\n    \r\n    function updateContract(address _tokenAddress,  string _imageHashURI, string _tokenURI) public onlyAuthor { \r\n        tokenAddress = _tokenAddress;\r\n        imageHashURI = _imageHashURI;\r\n        tokenURI = _tokenURI;\r\n        pullContract = CryptoSkulls(_tokenAddress);\r\n        emit _UpdateContract(_tokenAddress, _imageHashURI, _tokenURI);\r\n    }\r\n    \r\n      \r\n    function supportsInterface(bytes4 interfaceId ) constant public returns (bool) {\r\n        return pullContract.supportsInterface(interfaceId);\r\n    }\r\n    \r\n    function name() constant public returns (string) {\r\n        return pullContract.name();\r\n    }\r\n    \r\n    function getApproved(uint tokenId) constant public returns (uint) {\r\n        return pullContract.getApproved(tokenId);\r\n    }\r\n    \r\n    function totalSupply() constant public returns (uint) {\r\n        return pullContract.totalSupply();\r\n    }\r\n    \r\n    function tokenOfOwnerByIndex(address owner, uint index) constant public returns (uint) {\r\n        return pullContract.tokenOfOwnerByIndex(owner, index);\r\n    }\r\n    \r\n    function tokenByIndex(uint index) constant public returns (uint) {\r\n        return pullContract.getApproved(index);\r\n    }\r\n    \r\n    function imageHash() constant public returns (string) {\r\n        return pullContract.imageHash();\r\n    }\r\n    \r\n    function ownerOf(uint tokenId) constant public returns (address) {\r\n        return pullContract.ownerOf(tokenId);\r\n    }\r\n    \r\n    function balanceOf(address owner) constant public returns (uint) {\r\n        return pullContract.balanceOf(owner);\r\n    }\r\n    \r\n    function owner(address) constant public returns (address) {\r\n        return pullContract.owner();\r\n    }\r\n    \r\n    function isOwner() constant public returns (bool) {\r\n        return pullContract.isOwner();\r\n    }\r\n    \r\n    function symbol() constant public returns (string) {\r\n        return pullContract.symbol();\r\n    }\r\n    \r\n    function isApprovedForAll(address owner, address operator) constant public returns (bool) {\r\n        return pullContract.isApprovedForAll(owner, operator);\r\n    }\r\n    \r\n    \r\nevent   _UpdateContract(address newTokenAddress, string newImageHashURI, string newTokenURI);\r\nevent   _transferOwnership(address oldAuthor, address newAuthor);\r\n    \r\n}"
    }
  }
}