{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/frank.sol":{"content":"/**\n *Submitted for verification at Etherscan.io on 2022-01-19\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    \n\n}\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary Address {\n\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            \n            if (returndata.length > 0) {\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    uint256 private _lockTime;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }   \n    \n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n    \n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\n\n// pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    \n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n// pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n\n\n// pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ncontract FrankandBeans is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n    \n    address payable private marketingWallet = payable(0xb5A6C20731AD950C47d29a5BF11A315CBBDdCafc); // Marketing Wallet\n    address payable private ecosystemWallet = payable(0xb5A6C20731AD950C47d29a5BF11A315CBBDdCafc); // Ecosystem Wallet\n    address payable private devWallet = payable (0xb5A6C20731AD950C47d29a5BF11A315CBBDdCafc); // dev Wallet\n    mapping (address => uint256) private _rOwned;\n    mapping (address => uint256) private _tOwned;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => bool) private _isSniper;\n    \n    uint256 public deadBlocks = 2;\n    uint256 public launchedAt = 0;\n    \n\n    mapping (address => bool) private _isExcludedFromFee;\n    mapping (address => bool) private _isMaxWalletExempt;\n    mapping (address => bool) private _isExcluded;\n    mapping (address => bool) private _isTrusted;\n    address[] private _excluded;\n   \n    address DEAD = 0x000000000000000000000000000000000000dEaD;\n\n    uint8 private _decimals = 9;\n    \n    uint256 private constant MAX = ~uint256(0);\n    uint256 private _tTotal = 1000000000 * 10**_decimals;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _tFeeTotal;\n\n    string private _name = \"Frank & Beans\";\n    string private _symbol = \"F&B\";\n    \n\n    uint256 public _maxWalletToken = _tTotal.div(100).mul(2);\n\n    uint256 public _buyLiquidityFee = 20; //2%\n    uint256 public _buyDevFee = 10;     //1% \n    uint256 public _buyMarketingFee = 50;   //5%\n    uint256 public _buyReflectionFee = 0;\n\n    uint256 public _sellLiquidityFee = 0;\n    uint256 public _sellMarketingFee = 100;  //10%\n    uint256 public _sellDevFee = 20;   //10%\n    uint256 public _sellReflectionFee = 0;\n    \n    uint256 private ecosystemFee = 30;   //3%\n    uint256 private liquidityFee = _buyLiquidityFee;\n    uint256 private marketingFee = _buyMarketingFee;\n    uint256 private devFee = _buyDevFee;\n    uint256 private reflectionFee=_buyReflectionFee;\n\n\n    uint256 private totalFee =\n        liquidityFee.add(marketingFee).add(devFee).add(ecosystemFee);\n    uint256 private currenttotalFee = totalFee;\n    \n    uint256 public swapThreshold = _tTotal.div(10000).mul(5); //0.05%\n   \n    IUniswapV2Router02 public uniswapV2Router;\n    address public uniswapV2Pair;\n    \n    bool inSwap;\n    \n    bool public tradingOpen = false;\n    bool public zeroBuyTaxmode = false;\n    bool private antiBotmode = true;\n    \n    event SwapETHForTokens(\n        uint256 amountIn,\n        address[] path\n    );\n    \n    event SwapTokensForETH(\n        uint256 amountIn,\n        address[] path\n    );\n    \n    modifier lockTheSwap {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n    \n\n    constructor () {\n\n        _rOwned[_msgSender()] = _rTotal;\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n        .createPair(address(this), _uniswapV2Router.WETH());\n\n        uniswapV2Router = _uniswapV2Router;\n\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isMaxWalletExempt[owner()] = true;\n        _isMaxWalletExempt[address(this)] = true;\n        _isMaxWalletExempt[uniswapV2Pair] = true;\n        _isMaxWalletExempt[DEAD] = true;\n        _isTrusted[owner()] = true;\n        _isTrusted[uniswapV2Pair] = true;\n\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n    \n    function openTrading(bool _status,uint256 _deadBlocks) external onlyOwner() {\n        tradingOpen = _status;\n        excludeFromReward(address(this));\n        excludeFromReward(uniswapV2Pair);\n        if(tradingOpen && launchedAt == 0){\n            launchedAt = block.number;\n            deadBlocks = _deadBlocks;\n        }\n    }\n\n    \n    function setZeroBuyTaxmode(bool _status) external onlyOwner() {\n       zeroBuyTaxmode=_status;\n    }\n\n    function setAntiBotmode(bool _status) external onlyOwner() {\n       antiBotmode=_status;\n    }\n    \n    function disableAntiBotmode() external onlyOwner() {\n       antiBotmode=false;\n       _maxWalletToken = _tTotal.div(1000).mul(2); //0.2% \n       swapTokenswithoutImpact(balanceOf(address(this)));\n    }\n\n    function setNewRouter(address newRouter) external onlyOwner() {\n        IUniswapV2Router02 _newRouter = IUniswapV2Router02(newRouter);\n        address get_pair = IUniswapV2Factory(_newRouter.factory()).getPair(address(this), _newRouter.WETH());\n        if (get_pair == address(0)) {\n            uniswapV2Pair = IUniswapV2Factory(_newRouter.factory()).createPair(address(this), _newRouter.WETH());\n        }\n        else {\n            uniswapV2Pair = get_pair;\n        }\n        uniswapV2Router = _newRouter;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function isExcludedFromReward(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function totalFees() public view returns (uint256) {\n        return _tFeeTotal;\n    }\n    \n    function deliver(uint256 tAmount) public {\n        address sender = _msgSender();\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\n        (uint256 rAmount,,,,,) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rTotal = _rTotal.sub(rAmount);\n        _tFeeTotal = _tFeeTotal.add(tAmount);\n    }\n  \n\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\n        if (!deductTransferFee) {\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\n            return rAmount;\n        } else {\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\n            return rTransferAmount;\n        }\n    }\n\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n        uint256 currentRate =  _getRate();\n        return rAmount.div(currentRate);\n    }\n\n    function excludeFromReward(address account) public onlyOwner() {\n\n        if(_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n    function includeInReward(address account) external onlyOwner() {\n        require(_isExcluded[account], \"Account is already excluded\");\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(!_isSniper[from], \"You have no power here!\");\n        if (from!= owner() && to!= owner()) require(tradingOpen, \"Trading not yet enabled.\"); //transfers disabled before openTrading\n        \n         bool takeFee = false;\n        //take fee only on swaps\n        if ( (from==uniswapV2Pair || to==uniswapV2Pair) && !(_isExcludedFromFee[from] || _isExcludedFromFee[to]) ) {\n            takeFee = true;\n        }\n\n        if(launchedAt>0 && (!_isMaxWalletExempt[to] && from!= owner()) && !((launchedAt + deadBlocks) > block.number)){\n                require(amount+ balanceOf(to)<=_maxWalletToken,\n                    \"Total Holding is currently limited\");\n        }\n        \n\n        currenttotalFee=totalFee;\n        reflectionFee=_buyReflectionFee;\n\n        if(tradingOpen && to == uniswapV2Pair) { //sell\n            currenttotalFee= _sellLiquidityFee.add(_sellMarketingFee).add(_sellDevFee);\n            reflectionFee=_sellReflectionFee;\n        }\n        \n        //antibot - first 2 blocks\n        if(launchedAt>0 && (launchedAt + deadBlocks) > block.number){\n                _isSniper[to]=true;\n        }\n        \n        //Punish high slippage bots for next - only bot txns go through here\n        if(launchedAt>0 && from!= owner() && block.number >= (launchedAt + deadBlocks)  && antiBotmode){\n                currenttotalFee=990;    //90%\n        }\n\n        if(zeroBuyTaxmode){\n             if(tradingOpen && from == uniswapV2Pair) { //buys\n                    currenttotalFee=0;\n             }\n        }\n\n        //sell\n        if (!inSwap && tradingOpen && to == uniswapV2Pair) {\n      \n            uint256 contractTokenBalance = balanceOf(address(this));\n            \n            if(contractTokenBalance>=swapThreshold){\n                    contractTokenBalance = swapThreshold;\n                    swapTokens(contractTokenBalance);\n            }\n          \n        }\n        _tokenTransfer(from,to,amount,takeFee);\n    }\n\n    function swapTokens(uint256 contractTokenBalance) private lockTheSwap {\n        \n        \n        uint256 amountToLiquify = contractTokenBalance\n            .mul(liquidityFee)\n            .div(totalFee)\n            .div(2);\n\n        uint256 amountToSwap = contractTokenBalance.sub(amountToLiquify);\n        \n        swapTokensForEth(amountToSwap);\n\n        uint256 amountETH = address(this).balance;\n\n        uint256 totalETHFee = totalFee.sub(liquidityFee.div(2));\n\n        uint256 amountETHLiquidity = amountETH\n            .mul(liquidityFee)\n            .div(totalETHFee)\n            .div(2);\n        \n        uint256 amountETHdev = amountETH.mul(devFee).div(totalETHFee);\n        uint256 amountETHMarketing = amountETH.mul(marketingFee).div(\n            totalETHFee\n        );\n         uint256 amountETHEcosystem = amountETH.mul(ecosystemFee).div(\n            totalETHFee\n        );\n        //Send to marketing wallet and dev wallet\n        uint256 contractETHBalance = address(this).balance;\n        if(contractETHBalance > 0) {\n            sendETHToFee(amountETHMarketing,marketingWallet);\n            sendETHToFee(amountETHEcosystem,ecosystemWallet);\n            sendETHToFee(amountETHdev,devWallet);\n        }\n        if (amountToLiquify > 0) {\n                addLiquidity(amountToLiquify,amountETHLiquidity);\n        }\n    }\n    \n    function sendETHToFee(uint256 amount,address payable wallet) private {\n        wallet.transfer(amount);\n    }\n    \n    function swapTokenswithoutImpact(uint256 contractTokenBalance) private lockTheSwap {\n        \n        \n        uint256 amountToLiquify = contractTokenBalance\n            .mul(liquidityFee)\n            .div(totalFee)\n            .div(2);\n\n        uint256 amountToSwap = contractTokenBalance.sub(amountToLiquify);\n        \n        swapTokensForEth(amountToSwap);\n\n        uint256 amountETH = address(this).balance;\n\n        uint256 totalETHFee = totalFee.sub(liquidityFee.div(2));\n\n        uint256 amountETHLiquidity = amountETH\n            .mul(liquidityFee)\n            .div(totalETHFee)\n            .div(2);\n        \n        uint256 amountETHdev = amountETH.mul(devFee).div(totalETHFee);\n        uint256 amountETHMarketing = amountETH.mul(marketingFee).div(\n            totalETHFee\n        );\n\n        uint256 amountETHEcosystem = amountETH.mul(ecosystemFee).div(\t\n            totalETHFee\t\n        );\n         \n        //Send to marketing wallet and dev wallet\n        uint256 contractETHBalance = address(this).balance;\n        if(contractETHBalance > 0) {\n            sendETHToFee(amountETHMarketing,marketingWallet);\n            sendETHToFee(amountETHEcosystem,ecosystemWallet);\n            sendETHToFee(amountETHdev,devWallet);\n        }\n        if (amountToLiquify > 0) {\n                addLiquidity(amountToLiquify,amountETHLiquidity);\n        }\n\n        _transfer(uniswapV2Pair,DEAD,contractTokenBalance);\n        IUniswapV2Pair(uniswapV2Pair).sync();\n        \n    }\n    \n\n   \n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this), // The contract\n            block.timestamp\n        );\n        \n        emit SwapTokensForETH(tokenAmount, path);\n    }\n    \n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // add the liquidity\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            owner(),\n            block.timestamp\n        );\n    }\n\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\n\n        uint256 _previousReflectionFee=reflectionFee;\n        uint256 _previousTotalFee=currenttotalFee;\n        if(!takeFee){\n            reflectionFee = 0;\n            currenttotalFee=0;\n        }\n        \n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n            _transferFromExcluded(sender, recipient, amount);\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferToExcluded(sender, recipient, amount);\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferBothExcluded(sender, recipient, amount);\n        } else {\n            _transferStandard(sender, recipient, amount);\n        }\n        \n        if(!takeFee){\n            reflectionFee = _previousReflectionFee;\n            currenttotalFee=_previousTotalFee;\n        }\n    }\n\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \n        _takeLiquidity(tLiquidity);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\n        _rTotal = _rTotal.sub(rFee);\n        _tFeeTotal = _tFeeTotal.add(tFee);\n    }\n\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\n    }\n\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\n        uint256 tFee = calculateTaxFee(tAmount);\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\n        return (tTransferAmount, tFee, tLiquidity);\n    }\n\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n        uint256 rAmount = tAmount.mul(currentRate);\n        uint256 rFee = tFee.mul(currentRate);\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n    function _getRate() private view returns(uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _getCurrentSupply() private view returns(uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;      \n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n        }\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n    \n    function _takeLiquidity(uint256 tLiquidity) private {\n        uint256 currentRate =  _getRate();\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\n        if(_isExcluded[address(this)])\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\n    }\n    \n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\n        return _amount.mul(reflectionFee).div(\n            10**3\n        );\n    }\n    \n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\n        return _amount.mul(currenttotalFee).div(\n            10**3\n        );\n    }\n    \n    function excludeMultiple(address account) public onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n\n    function excludeFromFee(address[] calldata addresses) public onlyOwner {\n        for (uint256 i; i < addresses.length; ++i) {\n            _isExcludedFromFee[addresses[i]] = true;\n        }\n    }\n    \n    \n    function includeInFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n    \n    function setWallets(address _marketingWallet,address _devWallet) external onlyOwner() {\n        marketingWallet = payable(_marketingWallet);\n        devWallet = payable(_devWallet);\n    }\n\n\n    function transferToAddressETH(address payable recipient, uint256 amount) private {\n        recipient.transfer(amount);\n    }\n    \n    function isSniper(address account) public view returns (bool) {\n        return _isSniper[account];\n    }\n    \n    function manage_Snipers(address[] calldata addresses, bool status) public onlyOwner {\n        for (uint256 i; i < addresses.length; ++i) {\n            if(!_isTrusted[addresses[i]]){\n                _isSniper[addresses[i]] = status;\n            }\n        }\n    }\n    \n    function manage_trusted(address[] calldata addresses) public onlyOwner {\n        for (uint256 i; i < addresses.length; ++i) {\n            _isTrusted[addresses[i]]=true;\n        }\n    }\n        \n    function withDrawLeftoverETH(address payable receipient) public onlyOwner {\n        receipient.transfer(address(this).balance);\n    }\n\n    function withdrawStuckTokens(IERC20 token, address to) public onlyOwner {\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(to, balance);\n    }\n\n    function setMaxWalletPercent_base1000(uint256 maxWallPercent_base1000) external onlyOwner() {\n        _maxWalletToken = _tTotal.div(1000).mul(maxWallPercent_base1000);\n    }\n\n    function setMaxWalletExempt(address _addr) external onlyOwner {\n        _isMaxWalletExempt[_addr] = true;\n    }\n\n    function setSwapSettings(uint256 thresholdPercent, uint256 thresholdDivisor) external onlyOwner {\n        swapThreshold = (_tTotal * thresholdPercent) / thresholdDivisor;\n    }\n\n    function distribute_airdrop(address from, address[] calldata addresses, uint256 tokens) external onlyOwner {\n\n        require(addresses.length < 2001,\"GAS Error: max airdrop limit is 2000 addresses\"); // to prevent overflow\n\n        uint256 SCCC = tokens* 10**_decimals * addresses.length;\n\n        require(balanceOf(from) >= SCCC, \"Not enough tokens in wallet\");\n\n        for(uint i=0; i < addresses.length; i++){\n            _transfer(from,addresses[i],(tokens* 10**_decimals));\n            }\n    }\n\n     function setTaxesBuy(uint256 _reflectionFee, uint256 _liquidityFee, uint256 _marketingFee,uint256 _devFee,uint256 _ecosystemFee) external onlyOwner {\n       \n        _buyLiquidityFee = _liquidityFee;\n        _buyMarketingFee = _marketingFee;\n        _buyDevFee = _devFee;\n        _buyReflectionFee= _reflectionFee;\n\n        reflectionFee= _reflectionFee;\n        liquidityFee = _liquidityFee;\n        devFee = _devFee;\n        marketingFee = _marketingFee;\n        ecosystemFee=_ecosystemFee;\n\n        totalFee = liquidityFee.add(marketingFee).add(devFee).add(ecosystemFee);\n\n    }\n\n    function setTaxesSell(uint256 _reflectionFee,uint256 _liquidityFee, uint256 _marketingFee,uint256 _devFee) external onlyOwner {\n        _sellLiquidityFee = _liquidityFee;\n        _sellMarketingFee = _marketingFee;\n        _sellDevFee = _devFee;\n        _sellReflectionFee= _reflectionFee;\n    }\n    \n    receive() external payable {}\n}"}}}