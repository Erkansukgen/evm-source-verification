{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/BridgeAdmin.sol": {
      "content": "// Sources flattened with hardhat v2.5.0 https://hardhat.org\n\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.1.0\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// File contracts/insured-bridge/interfaces/BridgePoolInterface.sol\n\n\npragma solidity ^0.8.0;\n\ninterface BridgePoolInterface {\n    function l1Token() external view returns (IERC20);\n\n    function changeAdmin(address newAdmin) external;\n}\n\n\n// File contracts/insured-bridge/interfaces/BridgeAdminInterface.sol\n\n\npragma solidity ^0.8.0;\n\n/**\n * @notice Helper view methods designed to be called by BridgePool contracts.\n */\ninterface BridgeAdminInterface {\n    event SetDepositContracts(\n        uint256 indexed chainId,\n        address indexed l2DepositContract,\n        address indexed l2MessengerContract\n    );\n    event SetCrossDomainAdmin(uint256 indexed chainId, address indexed newAdmin);\n    event SetRelayIdentifier(bytes32 indexed identifier);\n    event SetOptimisticOracleLiveness(uint32 indexed liveness);\n    event SetProposerBondPct(uint64 indexed proposerBondPct);\n    event WhitelistToken(uint256 chainId, address indexed l1Token, address indexed l2Token, address indexed bridgePool);\n    event SetMinimumBridgingDelay(uint256 indexed chainId, uint64 newMinimumBridgingDelay);\n    event DepositsEnabled(uint256 indexed chainId, address indexed l2Token, bool depositsEnabled);\n    event BridgePoolsAdminTransferred(address[] bridgePools, address indexed newAdmin);\n\n    function finder() external view returns (address);\n\n    struct DepositUtilityContracts {\n        address depositContract; // L2 deposit contract where cross-chain relays originate.\n        address messengerContract; // L1 helper contract that can send a message to the L2 with the mapped network ID.\n    }\n\n    function depositContracts(uint256) external view returns (DepositUtilityContracts memory);\n\n    struct L1TokenRelationships {\n        mapping(uint256 => address) l2Tokens; // L2 Chain Id to l2Token address.\n        address bridgePool;\n    }\n\n    function whitelistedTokens(address, uint256) external view returns (address l2Token, address bridgePool);\n\n    function optimisticOracleLiveness() external view returns (uint32);\n\n    function proposerBondPct() external view returns (uint64);\n\n    function identifier() external view returns (bytes32);\n}\n\n\n// File contracts/insured-bridge/interfaces/MessengerInterface.sol\n\n\npragma solidity ^0.8.0;\n\n/**\n * @notice Sends cross chain messages to contracts on a specific L2 network. The `relayMessage` implementation will\n * differ for each L2.\n */\ninterface MessengerInterface {\n    function relayMessage(\n        address target,\n        address userToRefund,\n        uint256 l1CallValue,\n        uint256 gasLimit,\n        uint256 gasPrice,\n        uint256 maxSubmissionCost,\n        bytes memory message\n    ) external payable;\n}\n\n\n// File contracts/oracle/interfaces/IdentifierWhitelistInterface.sol\n\n\npragma solidity ^0.8.0;\n\n/**\n * @title Interface for whitelists of supported identifiers that the oracle can provide prices for.\n */\ninterface IdentifierWhitelistInterface {\n    /**\n     * @notice Adds the provided identifier as a supported identifier.\n     * @dev Price requests using this identifier will succeed after this call.\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\n     */\n    function addSupportedIdentifier(bytes32 identifier) external;\n\n    /**\n     * @notice Removes the identifier from the whitelist.\n     * @dev Price requests using this identifier will no longer succeed after this call.\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\n     */\n    function removeSupportedIdentifier(bytes32 identifier) external;\n\n    /**\n     * @notice Checks whether an identifier is on the whitelist.\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\n     * @return bool if the identifier is supported (or not).\n     */\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool);\n}\n\n\n// File contracts/oracle/interfaces/FinderInterface.sol\n\n\npragma solidity ^0.8.0;\n\n/**\n * @title Provides addresses of the live contracts implementing certain interfaces.\n * @dev Examples are the Oracle or Store interfaces.\n */\ninterface FinderInterface {\n    /**\n     * @notice Updates the address of the contract that implements `interfaceName`.\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\n     * @param implementationAddress address of the deployed contract that implements the interface.\n     */\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\n\n    /**\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\n     * @param interfaceName queried interface.\n     * @return implementationAddress address of the deployed contract that implements the interface.\n     */\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\n}\n\n\n// File contracts/oracle/implementation/Constants.sol\n\n\npragma solidity ^0.8.0;\n\n/**\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\n */\nlibrary OracleInterfaces {\n    bytes32 public constant Oracle = \"Oracle\";\n    bytes32 public constant IdentifierWhitelist = \"IdentifierWhitelist\";\n    bytes32 public constant Store = \"Store\";\n    bytes32 public constant FinancialContractsAdmin = \"FinancialContractsAdmin\";\n    bytes32 public constant Registry = \"Registry\";\n    bytes32 public constant CollateralWhitelist = \"CollateralWhitelist\";\n    bytes32 public constant OptimisticOracle = \"OptimisticOracle\";\n    bytes32 public constant Bridge = \"Bridge\";\n    bytes32 public constant GenericHandler = \"GenericHandler\";\n    bytes32 public constant SkinnyOptimisticOracle = \"SkinnyOptimisticOracle\";\n}\n\n\n// File contracts/common/interfaces/AddressWhitelistInterface.sol\n\n\npragma solidity ^0.8.0;\n\ninterface AddressWhitelistInterface {\n    function addToWhitelist(address newElement) external;\n\n    function removeFromWhitelist(address newElement) external;\n\n    function isOnWhitelist(address newElement) external view returns (bool);\n\n    function getWhitelist() external view returns (address[] memory);\n}\n\n\n// File contracts/common/implementation/Lockable.sol\n\n\npragma solidity ^0.8.0;\n\n/**\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\n */\ncontract Lockable {\n    bool private _notEntered;\n\n    constructor() {\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\n        // refund coming into effect.\n        _notEntered = true;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\n     * function that does the actual state modification.\n     */\n    modifier nonReentrant() {\n        _preEntranceCheck();\n        _preEntranceSet();\n        _;\n        _postEntranceReset();\n    }\n\n    /**\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\n     */\n    modifier nonReentrantView() {\n        _preEntranceCheck();\n        _;\n    }\n\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\n    // then call `_postEntranceReset()`.\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\n    function _preEntranceCheck() internal view {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n    }\n\n    function _preEntranceSet() internal {\n        // Any calls to nonReentrant after this point will fail\n        _notEntered = false;\n    }\n\n    function _postEntranceReset() internal {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _notEntered = true;\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/Context.sol@v4.1.0\n\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\n// File @openzeppelin/contracts/access/Ownable.sol@v4.1.0\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n// File contracts/insured-bridge/BridgeAdmin.sol\n\n\npragma solidity ^0.8.0;\n\n\n\n\n\n\n\n\n/**\n * @notice Administrative contract deployed on L1 that has implicit references to all L2 DepositBoxes.\n * @dev This contract is\n * responsible for making global variables accessible to BridgePool contracts, which house passive liquidity and\n * enable relaying of L2 deposits.\n * @dev The owner of this contract can also call permissioned functions on registered L2 DepositBoxes.\n */\ncontract BridgeAdmin is BridgeAdminInterface, Ownable, Lockable {\n    // Finder used to point to latest OptimisticOracle and other DVM contracts.\n    address public override finder;\n\n    // This contract can relay messages to any number of L2 DepositBoxes, one per L2 network, each identified by a\n    // unique network ID. To relay a message, both the deposit box contract address and a messenger contract address\n    // need to be stored. The messenger implementation differs for each L2 because L1 --> L2 messaging is non-standard.\n    // The deposit box contract originate the deposits that can be fulfilled by BridgePool contracts on L1.\n    mapping(uint256 => DepositUtilityContracts) private _depositContracts;\n\n    // L1 token addresses are mapped to their canonical token address on L2 and the BridgePool contract that houses\n    // relay liquidity for any deposits of the canonical L2 token.\n    mapping(address => L1TokenRelationships) private _whitelistedTokens;\n\n    // Set upon construction and can be reset by Owner.\n    uint32 public override optimisticOracleLiveness;\n    uint64 public override proposerBondPct;\n    bytes32 public override identifier;\n\n    // Add this modifier to methods that are expected to bridge messages to a L2 Deposit contract, which\n    // will cause unexpected behavior if the deposit or messenger helper contract isn't set and valid.\n    modifier canRelay(uint256 chainId) {\n        _validateDepositContracts(\n            _depositContracts[chainId].depositContract,\n            _depositContracts[chainId].messengerContract\n        );\n        _;\n    }\n\n    /**\n     * @notice Construct the Bridge Admin\n     * @param _finder DVM finder to find other UMA ecosystem contracts.\n     * @param _optimisticOracleLiveness Timeout that all bridging actions from L2->L1 must wait for a OptimisticOracle response.\n     * @param _proposerBondPct Percentage of the bridged amount that a relayer must put up as a bond.\n     * @param _identifier Identifier used when querying the OO for a cross bridge transfer action.\n     */\n    constructor(\n        address _finder,\n        uint32 _optimisticOracleLiveness,\n        uint64 _proposerBondPct,\n        bytes32 _identifier\n    ) {\n        finder = _finder;\n        require(address(_getCollateralWhitelist()) != address(0), \"Invalid finder\");\n        _setOptimisticOracleLiveness(_optimisticOracleLiveness);\n        _setProposerBondPct(_proposerBondPct);\n        _setIdentifier(_identifier);\n    }\n\n    /**************************************\n     *        ADMIN FUNCTIONS             *\n     **************************************/\n\n    /**\n     * @notice Sets a price identifier to use for relayed deposits. BridgePools reads the identifier from this contract.\n     * @dev Can only be called by the current owner.\n     * @param _identifier New identifier to set.\n     */\n    function setIdentifier(bytes32 _identifier) public onlyOwner nonReentrant() {\n        _setIdentifier(_identifier);\n    }\n\n    /**\n     * @notice Sets challenge period for relayed deposits. BridgePools will read this value from this contract.\n     * @dev Can only be called by the current owner.\n     * @param liveness New OptimisticOracle liveness period to set for relay price requests.\n     */\n    function setOptimisticOracleLiveness(uint32 liveness) public onlyOwner nonReentrant() {\n        _setOptimisticOracleLiveness(liveness);\n    }\n\n    /**\n     * @notice Sets challenge period for relayed deposits. BridgePools will read this value from this contract.\n     * @dev Can only be called by the current owner.\n     * @param _proposerBondPct New OptimisticOracle proposer bond % to set for relay price requests. 1e18 = 100%.\n     */\n    function setProposerBondPct(uint64 _proposerBondPct) public onlyOwner nonReentrant() {\n        _setProposerBondPct(_proposerBondPct);\n    }\n\n    /**\n     * @notice Associates the L2 deposit and L1 messenger helper addresses with an L2 network ID.\n     * @dev Only callable by the current owner.\n     * @param chainId L2 network ID to set addresses for.\n     * @param depositContract Address of L2 deposit contract.\n     * @param messengerContract Address of L1 helper contract that relays messages to L2.\n     */\n    function setDepositContract(\n        uint256 chainId,\n        address depositContract,\n        address messengerContract\n    ) public onlyOwner nonReentrant() {\n        _validateDepositContracts(depositContract, messengerContract);\n        _depositContracts[chainId].depositContract = depositContract;\n        _depositContracts[chainId].messengerContract = messengerContract;\n        emit SetDepositContracts(chainId, depositContract, messengerContract);\n    }\n\n    /**\n     * @notice Enables the current owner to transfer ownership of a set of owned bridge pools to a new owner.\n     * @dev Only callable by the current owner.\n     * @param bridgePools array of bridge pools to transfer ownership.\n     * @param newAdmin new admin contract to set ownership to.\n     */\n    function transferBridgePoolAdmin(address[] memory bridgePools, address newAdmin) public onlyOwner nonReentrant() {\n        for (uint8 i = 0; i < bridgePools.length; i++) {\n            BridgePoolInterface(bridgePools[i]).changeAdmin(newAdmin);\n        }\n        emit BridgePoolsAdminTransferred(bridgePools, newAdmin);\n    }\n\n    /**************************************************\n     *        CROSSDOMAIN ADMIN FUNCTIONS             *\n     **************************************************/\n\n    /**\n     * @notice Set new contract as the admin address in the L2 Deposit contract.\n     * @dev Only callable by the current owner.\n     * @dev msg.value must equal to l1CallValue.\n     * @param chainId L2 network ID where Deposit contract is deployed.\n     * @param admin New admin address to set on L2.\n     * @param l1CallValue Amount of ETH to include in msg.value. Used to pay for L2 fees, but its exact usage varies\n     * depending on the L2 network that this contract sends a message to.\n     * @param l2Gas Gas limit to set for relayed message on L2.\n     * @param l2GasPrice Gas price bid to set for relayed message on L2.\n     * @param maxSubmissionCost: Arbitrum only: fee deducted from L2 sender's balance to pay for L2 gas.\n     */\n    function setCrossDomainAdmin(\n        uint256 chainId,\n        address admin,\n        uint256 l1CallValue,\n        uint256 l2Gas,\n        uint256 l2GasPrice,\n        uint256 maxSubmissionCost\n    ) public payable onlyOwner canRelay(chainId) nonReentrant() {\n        require(admin != address(0), \"Admin cannot be zero address\");\n        _relayMessage(\n            _depositContracts[chainId].messengerContract,\n            l1CallValue,\n            _depositContracts[chainId].depositContract,\n            msg.sender,\n            l2Gas,\n            l2GasPrice,\n            maxSubmissionCost,\n            abi.encodeWithSignature(\"setCrossDomainAdmin(address)\", admin)\n        );\n        emit SetCrossDomainAdmin(chainId, admin);\n    }\n\n    /**\n     * @notice Sets the minimum time between L2-->L1 token withdrawals in the L2 Deposit contract.\n     * @dev Only callable by the current owner.\n     * @dev msg.value must equal to l1CallValue.\n     * @param chainId L2 network ID where Deposit contract is deployed.\n     * @param minimumBridgingDelay the new minimum delay.\n     * @param l1CallValue Amount of ETH to include in msg.value. Used to pay for L2 fees, but its exact usage varies\n     * depending on the L2 network that this contract sends a message to.\n     * @param l2Gas Gas limit to set for relayed message on L2.\n     * @param l2GasPrice Gas price bid to set for relayed message on L2.\n     * @param maxSubmissionCost: Arbitrum only: fee deducted from L2 sender's balance to pay for L2 gas.\n     */\n    function setMinimumBridgingDelay(\n        uint256 chainId,\n        uint64 minimumBridgingDelay,\n        uint256 l1CallValue,\n        uint256 l2Gas,\n        uint256 l2GasPrice,\n        uint256 maxSubmissionCost\n    ) public payable onlyOwner canRelay(chainId) nonReentrant() {\n        _relayMessage(\n            _depositContracts[chainId].messengerContract,\n            l1CallValue,\n            _depositContracts[chainId].depositContract,\n            msg.sender,\n            l2Gas,\n            l2GasPrice,\n            maxSubmissionCost,\n            abi.encodeWithSignature(\"setMinimumBridgingDelay(uint64)\", minimumBridgingDelay)\n        );\n        emit SetMinimumBridgingDelay(chainId, minimumBridgingDelay);\n    }\n\n    /**\n     * @notice Owner can pause/unpause L2 deposits for a tokens.\n     * @dev Only callable by Owner of this contract. Will set the same setting in the L2 Deposit contract via the cross\n     * domain messenger.\n     * @dev msg.value must equal to l1CallValue.\n     * @param chainId L2 network ID where Deposit contract is deployed.\n     * @param l2Token address of L2 token to enable/disable deposits for.\n     * @param depositsEnabled bool to set if the deposit box should accept/reject deposits.\n     * @param l1CallValue Amount of ETH to include in msg.value. Used to pay for L2 fees, but its exact usage varies\n     * depending on the L2 network that this contract sends a message to.\n     * @param l2Gas Gas limit to set for relayed message on L2.\n     * @param l2GasPrice Gas price bid to set for relayed message on L2.\n     * @param maxSubmissionCost: Arbitrum only: fee deducted from L2 sender's balance to pay for L2 gas.\n     */\n    function setEnableDeposits(\n        uint256 chainId,\n        address l2Token,\n        bool depositsEnabled,\n        uint256 l1CallValue,\n        uint256 l2Gas,\n        uint256 l2GasPrice,\n        uint256 maxSubmissionCost\n    ) public payable onlyOwner canRelay(chainId) nonReentrant() {\n        _relayMessage(\n            _depositContracts[chainId].messengerContract,\n            l1CallValue,\n            _depositContracts[chainId].depositContract,\n            msg.sender,\n            l2Gas,\n            l2GasPrice,\n            maxSubmissionCost,\n            abi.encodeWithSignature(\"setEnableDeposits(address,bool)\", l2Token, depositsEnabled)\n        );\n        emit DepositsEnabled(chainId, l2Token, depositsEnabled);\n    }\n\n    /**\n     * @notice Privileged account can associate a whitelisted token with its linked token address on L2. The linked L2\n     * token can thereafter be deposited into the Deposit contract on L2 and relayed via the BridgePool contract.\n     * @dev msg.value must equal to l1CallValue.\n     * @dev This method is also used to to update the address of the bridgePool within a BridgeDepositBox through the\n     * re-whitelisting of a previously whitelisted token to update the address of the bridge pool in the deposit box.\n     * @dev Only callable by Owner of this contract. Also initiates a cross-chain call to the L2 Deposit contract to\n     * whitelist the token mapping.\n     * @param chainId L2 network ID where Deposit contract is deployed.\n     * @param l1Token Address of L1 token that can be used to relay L2 token deposits.\n     * @param l2Token Address of L2 token whose deposits are fulfilled by `l1Token`.\n     * @param bridgePool Address of BridgePool which manages liquidity to fulfill L2-->L1 relays.\n     * @param l1CallValue Amount of ETH to include in msg.value. Used to pay for L2 fees, but its exact usage varies\n     * depending on the L2 network that this contract sends a message to.\n     * @param l2Gas Gas limit to set for relayed message on L2.\n     * @param l2GasPrice Gas price bid to set for relayed message on L2.\n     * @param maxSubmissionCost: Arbitrum only: fee deducted from L2 sender's balance to pay for L2 gas.\n     */\n    function whitelistToken(\n        uint256 chainId,\n        address l1Token,\n        address l2Token,\n        address bridgePool,\n        uint256 l1CallValue,\n        uint256 l2Gas,\n        uint256 l2GasPrice,\n        uint256 maxSubmissionCost\n    ) public payable onlyOwner canRelay(chainId) nonReentrant() {\n        require(bridgePool != address(0), \"BridgePool cannot be zero address\");\n        require(l2Token != address(0), \"L2 token cannot be zero address\");\n        require(_getCollateralWhitelist().isOnWhitelist(address(l1Token)), \"L1Token token not whitelisted\");\n\n        require(address(BridgePoolInterface(bridgePool).l1Token()) == l1Token, \"Bridge pool has different L1 token\");\n\n        // Braces to resolve Stack too deep compile error\n        {\n            L1TokenRelationships storage l1TokenRelationships = _whitelistedTokens[l1Token];\n            l1TokenRelationships.l2Tokens[chainId] = l2Token; // Set the L2Token at the index of the chainId.\n            l1TokenRelationships.bridgePool = bridgePool;\n        }\n\n        _relayMessage(\n            _depositContracts[chainId].messengerContract,\n            l1CallValue,\n            _depositContracts[chainId].depositContract,\n            msg.sender,\n            l2Gas,\n            l2GasPrice,\n            maxSubmissionCost,\n            abi.encodeWithSignature(\"whitelistToken(address,address,address)\", l1Token, l2Token, bridgePool)\n        );\n        emit WhitelistToken(chainId, l1Token, l2Token, bridgePool);\n    }\n\n    /**************************************\n     *           VIEW FUNCTIONS           *\n     **************************************/\n    function depositContracts(uint256 chainId) external view override returns (DepositUtilityContracts memory) {\n        return _depositContracts[chainId];\n    }\n\n    function whitelistedTokens(address l1Token, uint256 chainId)\n        external\n        view\n        override\n        returns (address l2Token, address bridgePool)\n    {\n        return (_whitelistedTokens[l1Token].l2Tokens[chainId], _whitelistedTokens[l1Token].bridgePool);\n    }\n\n    /**************************************\n     *        INTERNAL FUNCTIONS          *\n     **************************************/\n\n    function _getIdentifierWhitelist() private view returns (IdentifierWhitelistInterface) {\n        return\n            IdentifierWhitelistInterface(\n                FinderInterface(finder).getImplementationAddress(OracleInterfaces.IdentifierWhitelist)\n            );\n    }\n\n    function _getCollateralWhitelist() private view returns (AddressWhitelistInterface) {\n        return\n            AddressWhitelistInterface(\n                FinderInterface(finder).getImplementationAddress(OracleInterfaces.CollateralWhitelist)\n            );\n    }\n\n    function _setIdentifier(bytes32 _identifier) private {\n        require(_getIdentifierWhitelist().isIdentifierSupported(_identifier), \"Identifier not registered\");\n        identifier = _identifier;\n        emit SetRelayIdentifier(identifier);\n    }\n\n    function _setOptimisticOracleLiveness(uint32 liveness) private {\n        // The following constraints are copied from a similar function in the OptimisticOracle contract:\n        // - https://github.com/UMAprotocol/protocol/blob/dd211c4e3825fe007d1161025a34e9901b26031a/packages/core/contracts/oracle/implementation/OptimisticOracle.sol#L621\n        require(liveness < 5200 weeks, \"Liveness too large\");\n        require(liveness > 0, \"Liveness cannot be 0\");\n        optimisticOracleLiveness = liveness;\n        emit SetOptimisticOracleLiveness(optimisticOracleLiveness);\n    }\n\n    function _setProposerBondPct(uint64 _proposerBondPct) private {\n        proposerBondPct = _proposerBondPct;\n        emit SetProposerBondPct(proposerBondPct);\n    }\n\n    function _validateDepositContracts(address depositContract, address messengerContract) private pure {\n        require(\n            (depositContract != address(0)) && (messengerContract != address(0)),\n            \"Invalid deposit or messenger contract\"\n        );\n    }\n\n    // Send msg.value == l1CallValue to Messenger, which can then use it in any way to execute cross domain message.\n    function _relayMessage(\n        address messengerContract,\n        uint256 l1CallValue,\n        address target,\n        address user,\n        uint256 l2Gas,\n        uint256 l2GasPrice,\n        uint256 maxSubmissionCost,\n        bytes memory message\n    ) private {\n        require(l1CallValue == msg.value, \"Wrong number of ETH sent\");\n        MessengerInterface(messengerContract).relayMessage{ value: l1CallValue }(\n            target,\n            user,\n            l1CallValue,\n            l2Gas,\n            l2GasPrice,\n            maxSubmissionCost,\n            message\n        );\n    }\n}\n"
    }
  }
}