{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/floor2020.sol":{"content":"// SPDX-License-Identifier: UNCLICENSED\r\npragma solidity ^0.7.6;\r\n\r\ninterface GandhijiMain {\r\n    function buy(address _referredBy)  external payable returns(uint256);\r\n    function transfer(address _toAddress, uint256 _amountOfTokens)  external;\r\n    function myDividends(bool _includeReferralBonus) external returns (uint256);\r\n    function calculateTokensReceived(uint256 _ethereumToSpend)  external returns (uint256);\r\n}\r\n\r\ncontract Floor {\r\n    GandhijiMain public GandhijiMainContract = GandhijiMain(0x167cB3F2446F829eb327344b66E271D1a7eFeC9A);\r\n    address public distributeContract = 0x0D34cf81Db1F84EE6A0e7cC4A7ca6DB5F782474A;\r\n    uint256 public dividendsToTransfer;\r\n    uint256 public floorDividends;\r\n\r\n    receive() external payable { msg.value; }\r\n    \r\n    function buy() public payable {\r\n        GandhijiMainContract.buy{value: address(this).balance}(msg.sender);\r\n    }\r\n \r\n    function transferDividends() public\r\n    {\r\n        getTokenAmount(); \r\n        GandhijiMainContract.transfer(distributeContract, dividendsToTransfer);\r\n        GandhijiMainContract.buy{value: address(this).balance}(msg.sender);\r\n    }\r\n    \r\n    function getFloorDividends() public returns(uint256) {\r\n        floorDividends = GandhijiMainContract.myDividends(false);\r\n        return floorDividends;\r\n    }\r\n    \r\n    function getTokenAmount() public returns(bool)\r\n    {\r\n        getFloorDividends();\r\n        dividendsToTransfer= GandhijiMainContract.calculateTokensReceived(floorDividends);\r\n        return true;\r\n    }\r\n}"}}}