{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "DrillBaseAuthority.sol": {
      "content": "// hevm: flattened sources of src/DrillBaseAuthority.sol\r\npragma solidity >=0.6.7 <0.7.0;\r\n\r\n////// src/DrillBaseAuthority.sol\r\n/* pragma solidity ^0.6.7; */\r\n\r\ncontract DrillBaseAuthority {\r\n\tmapping(address => bool) public whiteList;\r\n\r\n\tconstructor(address[] memory _whitelists) public {\r\n\t\tfor (uint256 i = 0; i < _whitelists.length; i++) {\r\n\t\t\twhiteList[_whitelists[i]] = true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction canCall(\r\n\t\taddress _src,\r\n\t\taddress, /* _dst */\r\n\t\tbytes4 _sig\r\n\t) public view returns (bool) {\r\n\t\treturn\r\n\t\t\t(whiteList[_src] &&\r\n\t\t\t\t_sig ==\r\n\t\t\t\tbytes4(\r\n\t\t\t\t\tkeccak256(\r\n\t\t\t\t\t\t\"createDrill(uint16,address)\"\r\n\t\t\t\t\t)\r\n\t\t\t\t)) ||\r\n\t\t\t(whiteList[_src] &&\r\n\t\t\t\t_sig == bytes4(keccak256(\"destroyDrill(address,uint256)\")));\r\n\t}\r\n}"
    }
  }
}