{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/MetaCoinSwap_v7.sol":{"content":"pragma solidity >=0.4.22 <0.7.0;\r\n\r\n\r\n\r\n/*\r\nimport './UniswapV2Library.sol';\r\n\r\n\r\nimport './lib/IUniswapV1Factory.sol';\r\nimport './lib/IUniswapV1Exchange.sol';\r\nimport './lib/IUniswapV2Router01.sol';\r\nimport './lib/IERC20.sol';\r\nimport './lib/IWETH.sol';\r\n\r\nimport './lib/IUniswapV2Callee.sol';\r\n\r\n*/\r\n\r\nimport './UniswapV2Interfaces_v7.sol';\r\nimport './trustfund_v7.sol';\r\nimport './SafeMath.sol';\r\n\r\n\r\n\r\n\r\n\r\ncontract MetaCoinSwap is TransferableTrustFundAccount {\r\n\r\n    \r\n   using SafeMath for uint;\r\n\r\n    enum SwapType {SimpleLoan, SimpleSwap, TriangularSwap} \r\n    \r\n    address token;\r\n    address weth;\r\n    address factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f; // same for all networks\r\n    address uni_pair;\r\n\r\n    uint256 amount;\r\n\r\n    IUniswapV1Factory  ifactoryV1;  //V1 factory contract instance\r\n    IWETH  iWETH; //WETH contract instance\r\n\r\n  \r\n  \r\n    //  router = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n    //we support token-ETH swapping in this version\r\n    event V2Swap ( address tokenBorrow, address tokenTrading, address weth,address uni_pair,uint256 amountBorrow,uint256 amountETH);\r\n    event swap_info (address uni_pair, uint amountBorrow, uint amountETH, address borrower);\r\n    event V2SwapCallback_2 (address sender, address tokenForTrade, address path, uint256 amountToken, uint256 amountETH);\r\n    event Callback_status (bool success, uint256 amountReceived, uint256 amountRequired);\r\n    \r\n    constructor( uint256 _amount) public\r\n    {\r\n        \r\n      owner = msg.sender;\r\n      amount = _amount;\r\n\r\n          //default trading pair USDC-WETH\r\n      token = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48); //''USDC'\r\n      weth = address (0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);//weth address\r\n      iWETH =  IWETH(weth);\r\n\r\n\r\n    }\r\n    /* copy from UniswapV2Library.sol */\r\n    //Utility UniswapV2Blirary function used by UniSwapV2 pair interface\r\n    function sortTokens(address tokenA, address tokenB) internal  returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address tokenA, address tokenB) internal returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\r\n            ))));\r\n    }\r\n\r\n   \r\n    // @notice Flash-borrows _amount of _tokenBorrow from a Uniswap V2 pair and repays using _tokenPay\r\n    // @param _tokenBorrow The address of the token you want to flash-borrow, use 0x0 for ETH\r\n    // @param _amount The amount of _tokenBorrow you will borrow\r\n    // @param _tokenPay The address of the token you want to use to payback the flash-borrow, use 0x0 for ETH\r\n    // @param _userData Data that will be passed to the `execute` function for the user\r\n    // @dev Depending on your use case, you may want to add access controls to this function\r\n    function flashSwap(address _tokenBorrow, uint256 _amount) external {\r\n\r\n      assert(msg.sender == owner); \r\n      simpleFlashLoan(_tokenBorrow, _amount);\r\n        \r\n    }\r\n\r\n        // @notice This function is used when the user repays with the same token they borrowed\r\n    // @dev This initiates the flash borrow. See `simpleFlashLoanExecute` for the code that executes after the borrow.\r\n    function simpleFlashLoan(address _tokenBorrow, uint256 _amountBorrow) private {\r\n        \r\n    ifactoryV1 = IUniswapV1Factory(0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95);\r\n\r\n      \r\n       //address[] memory path = new address[](2);\r\n       \r\n       address token0 =_tokenBorrow;\r\n\r\n       uni_pair = pairFor(token0,weth);\r\n\r\n     //  uint amountBorrow = _amountBorrow;\r\n      // uint amountETH = 0;\r\n\r\n        address tokenA = IUniswapV2Pair(uni_pair).token0();\r\n        address tokenB = IUniswapV2Pair(uni_pair).token1();\r\n       \r\n       uint256 amount0 = tokenA == weth ? 0 :_amountBorrow;\r\n       uint256 amount1 = tokenA == weth ? _amountBorrow : 0;\r\n        //if user wish to borrow ETH, we will use default USDC-ETH trding pair \r\n      \r\n      /*\r\n       if (_tokenBorrow == address (0)) \r\n       { token0 = token; //USDC\r\n         amountETH = _amountBorrow;  \r\n         amountBorrow = 0; //USDC borrow =0;\r\n       }\r\n       else {\r\n         (token0 = _tokenBorrow);\r\n       }\r\n       */\r\n\r\n\r\n   //    uni_pair = UniswapV2Library.pairFor(factory, token0, address(iWETH)); // ensure V2 pair address is valid\r\n       \r\n  \r\n\r\n\r\n    \r\n       emit V2Swap ( _tokenBorrow, tokenA, weth,uni_pair,amount0, amount1);\r\n\r\n     //  require(uni_pair != address(0), \"Requested tokenBorrow-ETH is not available.\");\r\n\r\n\r\n   \r\n        \r\n          bytes memory data = abi.encode(\r\n            SwapType.SimpleLoan,\r\n         //   tokenA,\r\n          //  amountBorrow==0? amountETH:amountBorrow,\r\n          //  weth,\r\n          //  amountBorrow==0 ? true:false, //if borrow non ETH token, then, not borrowng ETH\r\n          //  amountETH==0 ? false:true, //use whatever borrowing, payback the same token\r\n            bytes(\"\")\r\n            //_userData\r\n          ); // note _tokenBorrow == _tokenPay\r\n        \r\n        IUniswapV2Pair iswap_instance = IUniswapV2Pair(uni_pair);\r\n        iswap_instance.swap (amount0, amount1, address(this), data);\r\n\r\n       //function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n        \r\n        emit swap_info (uni_pair, amount0, amount1, address(this));\r\n\r\n    }  \r\n  \r\n/*\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n*/\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address tokenA, address tokenB) internal  returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal  returns (uint amountIn) {\r\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n/*\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n*/\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn( uint amountOut, address[] memory path) internal  returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint i = path.length - 1; i > 0; i--) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(path[i - 1], path[i]);\r\n             amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    // needs to accept ETH from any V1 exchange and WETH. ideally this could be enforced, as in the router,\r\n    // but it's not possible because it requires a call to the v1 factory, which takes too much gas\r\n    //receive() external payable {}\r\n\r\n    // gets tokens/WETH via a V2 flash swap, swaps for the ETH/tokens on V1, repays V2, and keeps the rest!\r\n    \r\n\r\n\r\nfunction uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external  {\r\n        address[] memory path = new address[](2);\r\n        uint amountToken;\r\n        uint amountETH;\r\n        \r\n            \r\n            // scope for token{0,1}, avoids stack too deep errors\r\n        \r\n\r\n     \r\n    //    require(sender == address(this), \"only this contract may initiate\");  \r\n        \r\n        \r\n    \r\n        address token0;\r\n        address token1;\r\n\r\n        \r\n/*\r\n        if( msg.sender ==  pairFor(token0, token1) )\r\n        {\r\n                     token0 = IUniswapV2Pair(msg.sender).token0();\r\n                     token1 = IUniswapV2Pair(msg.sender).token1();\r\n         }\r\n         else\r\n         \r\n */        \r\n         {\r\n           // assert(msg.sender == owner); // pairFor(token0, token1)); // ensure that msg.sender is actually a V2 pair\r\n                     require(owner == msg.sender);\r\n                     token0 = token; //IUniswapV2Pair(msg.sender).token0();\r\n                     token1 = weth; //IUniswapV2Pair(msg.sender).token1();\r\n         }\r\n\r\n        \r\n        assert(amount0 == 0 || amount1 == 0); // this strategy is unidirectional\r\n        path[0] = amount0 == 0 ? token0 : token1;\r\n        path[1] = amount0 == 0 ? token1 : token0;\r\n        amountToken = token0 == weth ? amount1 : amount0;\r\n        amountETH = token0 == weth ? amount0 : amount1;\r\n        \r\n        \r\n        uint amountRequired = getAmountsIn(amountToken, path)[0];\r\n        uint amountReceived =0;    \r\n        //IUniswapV1Exchange iexchangeV1 = IUniswapV1Exchange(ifactoryV1.getExchange(address(itoken))); // get V1 exchange\r\n            \r\n        emit V2SwapCallback_2 (path[0], token0, path[1], amountToken, amountRequired);\r\n\r\n     //   assert(path[0] == address(iWETH) || path[1] == address(IWETH); // this strategy only works with a V2 WETH pair\r\n       // IERC20 itoken = IERC20(path[0] == weth ? path[1] : path[0]);\r\n    //    IUniswapV1Exchange iexchangeV1 = IUniswapV1Exchange(ifactoryV1.getExchange(address(itoken))); // get V1 exchange\r\n\r\n        if (amountToken > 0) {\r\n           // (uint minETH) = abi.decode(data, (uint)); // slippage parameter for V1, passed in by caller\r\n      //      itoken.approve(address(iexchangeV1), amountToken);\r\n          //  uint amountReceived =0;// iexchangeV1.tokenToEthSwapInput(amountToken, 0, uint(-1));\r\n            // uint amountRequired = getAmountsIn(amountToken, path)[0];\r\n            \r\n            \r\n        //    emit V2SwapCallback_2 (path[0], address(iexchangeV1), path[1], amountReceived, amountRequired);\r\n       \r\n            \r\n  //          assert(amountReceived > amountRequired); // fail if we didn't get enough ETH back to repay our flash loan\r\n  \r\n  \r\n          iWETH.deposit{value: amountRequired}();\r\n         //  assert(iWETH.transfer(msg.sender, amountRequired)); // return WETH to V2 pair\r\n  \r\n  \r\n        //    (bool success,) = sender.call{value: amountReceived - amountRequired}(new bytes(0)); // keep the rest! (ETH)\r\n          //  assert(success);\r\n        } \r\n        \r\n}    \r\n\r\n/*\r\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external  \r\n    {\r\n        \r\n        \r\n        address[] memory path = new address[](2);\r\n        uint amountToken;\r\n        uint amountETH;\r\n        \r\n       // ifactoryV1 = IUniswapV1Factory(0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95);\r\n     \r\n        //first, check the sender credential\r\n        assert(msg.sender == uni_pair); // ensure that msg.sender is actually a V2 pair\r\n        require(sender == address(this), \"only this contract may initiate\");   \r\n        \r\n        assert(amount0 == 0 || amount1 == 0); // this strategy is unidirectional\r\n    \r\n            \r\n        // scope for token{0,1}, avoids stack too deep errors\r\n        \r\n       address token0 = IUniswapV2Pair(msg.sender).token0();\r\n       address token1 =  IUniswapV2Pair(msg.sender).token1();\r\n       \r\n\r\n       \r\n        path[0] = amount0 == 0 ? token0 : token1;\r\n        path[1] = amount0 == 0 ? token1 : token0;\r\n    \r\n        \r\n    //    path[0] = token;\r\n     //   path[1] = weth;\r\n    \r\n    \r\n    \r\n    \r\n      amountToken = token0 == weth ? amount1 : amount0;\r\n      amountETH = token0 == weth ? amount0 : amount1;\r\n       \r\n\r\n        assert(path[0] == weth || path[1] == weth); // this strategy only works with a V2 WETH pair\r\n        IERC20 itoken = IERC20(path[0] == weth ? path[1] : path[0]);\r\n\r\n     //  IERC20 itoken = IERC20(token);\r\n  //     emit V2SwapCallback_2 (address(itoken),address(ifactoryV1) , path[1], amount0, amount1);\r\n\r\n      \r\n      \r\n      \r\n        // decode data\r\n        (\r\n            SwapType _swapType,\r\n            address _tokenBorrow,\r\n            uint _amount,\r\n            address _tokenPay,\r\n            bool _isBorrowingEth,\r\n            bool _isPayingEth\r\n\r\n        ) = abi.decode(data, (SwapType, address, uint, address, bool, bool));\r\n\r\n\r\n        IUniswapV1Exchange iexchangeV1 = IUniswapV1Exchange(ifactoryV1.getExchange(address(itoken))); // get V1 exchange\r\n        \r\n        emit V2SwapCallback_2 (token, address(itoken),address( iexchangeV1) , amountToken, amount1);\r\n\r\n    //    if (amount0 > 0) {\r\n\r\n          //  (uint minETH) = abi.decode(data, (uint)); // slippage parameter for V1, passed in by caller\r\n            \r\n            itoken.approve(address(iexchangeV1), amountToken);\r\n \r\n   //    emit V2SwapCallback_2 (token, address(itoken),address( iexchangeV1) , amount0, amount1);\r\n         \r\n         \r\n           uint amountReceived = iexchangeV1.tokenToEthSwapInput(amountToken, 0, uint(-1)); //token in, amount0, get ethout amountReceived\r\n           uint amountRequired = getAmountsIn(amountToken, path)[0]; //uniswapv2, out token amount0, required amountRequired in eth\r\n\r\n           assert(amountReceived + 1 >=amountRequired); // fail if we didn't get enough ETH back to repay our flash loan\r\n  \r\n  \r\n  \r\n        emit V2SwapCallback_2 (path[0], address(iexchangeV1), path[1], amountReceived, amountRequired);\r\n      \r\n            \r\n           iWETH.deposit{value: amountRequired}();\r\n           assert(iWETH.transfer(msg.sender, amountRequired)); // return WETH to V2 pair\r\n            (bool success,) = sender.call{value: amountReceived - amountRequired}(new bytes(0)); // keep the rest! (ETH)\r\n           // emit Callback_status (success, amountReceived, amountRequired);\r\n            \r\n\r\n            \r\n            \r\n     //       assert(success);\r\n        } else {\r\n\r\n //           (uint minTokens) = abi.decode(data, (uint)); // slippage parameter for V1, passed in by caller\r\n   //         iWETH.withdraw(amountETH);\r\n     //       uint amountReceived = iexchangeV1.ethToTokenSwapInput{value: amountETH}(minTokens, uint(-1));\r\n           // uint amountRequired = UniswapV2Library.getAmountsIn(factory, amountETH, path)[0];\r\n //           assert(amountReceived > amountRequired); // fail if we didn't get enough tokens back to repay our flash loan\r\n //           assert(itoken.transfer(msg.sender, amountRequired)); // return tokens to V2 pair\r\n//            assert(itoken.transfer(sender, amountReceived - amountRequired)); // keep the rest! (tokens)\r\n        } \r\n        \r\n        \r\n        \r\n\r\n    } \r\n   \r\n*/\r\n\r\n}\r\n"},"browser/SafeMath.sol":{"content":"pragma solidity 0.6.6;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n"},"browser/UniswapV2Interfaces_v7.sol":{"content":"pragma solidity 0.6.6;\r\n\r\n//pragma solidity 0.6.6;\r\n\r\ninterface IUniswapV2Factory {\r\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n  function allPairs(uint) external view returns (address pair);\r\n  function allPairsLength() external view returns (uint);\r\n  function feeTo() external view returns (address);\r\n  function feeToSetter() external view returns (address);\r\n  function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  function name() external pure returns (string memory);\r\n  function symbol() external pure returns (string memory);\r\n  function decimals() external pure returns (uint8);\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address owner) external view returns (uint);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function approve(address spender, uint value) external returns (bool);\r\n  function transfer(address to, uint value) external returns (bool);\r\n  function transferFrom(address from, address to, uint value) external returns (bool);\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n  function nonces(address owner) external view returns (uint);\r\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n  event Mint(address indexed sender, uint amount0, uint amount1);\r\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n  event Swap(\r\n      address indexed sender,\r\n      uint amount0In,\r\n      uint amount1In,\r\n      uint amount0Out,\r\n      uint amount1Out,\r\n      address indexed to\r\n  );\r\n  event Sync(uint112 reserve0, uint112 reserve1);\r\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n  function factory() external view returns (address);\r\n  function token0() external view returns (address);\r\n  function token1() external view returns (address);\r\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n  function price0CumulativeLast() external view returns (uint);\r\n  function price1CumulativeLast() external view returns (uint);\r\n  function kLast() external view returns (uint);\r\n  function mint(address to) external returns (uint liquidity);\r\n  function burn(address to) external returns (uint amount0, uint amount1);\r\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n  function skim(address to) external;\r\n  function sync() external;\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\n\r\n\r\ninterface IUniswapV1Factory {\r\n    function getExchange(address) external view returns (address);\r\n}\r\n/*\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n*/\r\n\r\ninterface IUniswapV1Exchange {\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function removeLiquidity(uint, uint, uint, uint) external returns (uint, uint);\r\n    function tokenToEthSwapInput(uint, uint, uint) external returns (uint);\r\n    function ethToTokenSwapInput(uint, uint) external payable returns (uint);\r\n}\r\n"},"browser/trustfund_v7.sol":{"content":"pragma solidity ^0.6.6;\r\n\r\ncontract TransferableTrustFundAccount {\r\n    address owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function withdrawAll() public {\r\n        require(owner == msg.sender);\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawAmount(uint256 amount) public {\r\n        require(owner == msg.sender);\r\n        require(address(this).balance >= amount);\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n  \r\n\r\n        event Received(address, uint);\r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    function transferAccount(address newAccount) public {\r\n    require(owner == msg.sender);\r\n    require(newAccount != address(0));\r\n    owner = newAccount;\r\n    }\r\n\r\n    function terminateAccount() public {\r\n    require(owner == msg.sender);\r\n    selfdestruct(msg.sender);\r\n    }\r\n}"}}}