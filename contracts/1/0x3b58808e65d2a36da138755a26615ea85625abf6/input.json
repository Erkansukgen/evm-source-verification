{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"SlykSimpleForwarder.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract SlykSimpleForwarder {\r\n  address payable target;\r\n\r\n  constructor(address payable _target) {\r\n      require(_target != address(0x0));\r\n      target = _target;\r\n  }\r\n\r\n  receive() external payable {\r\n    (bool result,) = target.call{value: msg.value}(\"\");\r\n    require(result);\r\n  }\r\n\r\n  function flush() public {\r\n    target.transfer(address(this).balance);\r\n  }\r\n\r\n  function flushToken(IERC20 token) public {\r\n    token.transfer(target, token.balanceOf(address(this)));\r\n  }\r\n}"}}}