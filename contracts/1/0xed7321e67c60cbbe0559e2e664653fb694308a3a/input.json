{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"profitSharing.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.4.0;\r\n\r\ncontract profitSharing{\r\n    \r\n    address public owner;\r\n    uint public allPercent;\r\n    uint decimals = (10 ** 6);\r\n    \r\n    struct Addresses {\r\n        address userAddress;\r\n        uint percent;\r\n    }\r\n    \r\n    Addresses[] public addresses;\r\n    Addresses[] newAddr;\r\n    uint public payBalance = 0;\r\n    \r\n    modifier isOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    event Deposit(address indexed from, uint value);\r\n    \r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function() external payable {\r\n        if(address(this).balance >= payBalance * decimals){\r\n            payAll();\r\n        }\r\n    }\r\n    \r\n    function getBalance() public view returns(uint){\r\n        return address(this).balance;\r\n    } \r\n    \r\n    function setPayBalance(uint _payBalance) public isOwner{\r\n        payBalance = _payBalance;\r\n    }\r\n    \r\n    function payAll() public isOwner payable{\r\n        uint j = 0;\r\n        uint allBalance = address(this).balance;\r\n        for (j = 0; j < addresses.length; j++) {\r\n            addresses[j].userAddress.transfer((allBalance * addresses[j].percent) / 100);\r\n        }\r\n        //if(address(this).balance > 0){\r\n        //    owner.transfer(address(this).balance);\r\n        //}\r\n    }\r\n    \r\n    function getCount() public view returns(uint) {\r\n        return addresses.length;\r\n    }\r\n    \r\n    function getAdresses(uint j) public view returns(uint num, address addr, uint per){\r\n        num = j;\r\n        addr = addresses[j].userAddress;\r\n        per = addresses[j].percent;\r\n    }\r\n    \r\n    function setAddresses(address _userAddr, uint percent) public isOwner{ \r\n        addresses.push(Addresses(_userAddr, percent));\r\n        allPercent += percent;\r\n    }\r\n    \r\n    function updateAddresses(address _userAddr, uint percent, uint num) public isOwner{\r\n        uint old = allPercent - addresses[num].percent;\r\n        addresses[num] = Addresses(_userAddr, percent);\r\n        allPercent = old + percent;\r\n    }\r\n    \r\n    function deleteAddresses(uint num) public isOwner{\r\n        uint i = 0;\r\n        for(i = 0; i < addresses.length; i++){\r\n            if(i != num){\r\n                newAddr.push(addresses[i]);\r\n            }\r\n        }\r\n        addresses.length = 0;\r\n        addresses = newAddr;\r\n    }\r\n}"}}}