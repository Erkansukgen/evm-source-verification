{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/h.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ncontract CheckThenSend {\r\n    function check32Thensend(address _target, bytes memory _payload, bytes32 _resultMatch) external payable {\r\n        _check32(_target, _payload, _resultMatch);\r\n        block.coinbase.call{value: msg.value}(new bytes(0));\r\n    }\r\n\r\n    function check32ThensendMulti(address[] memory _targets, bytes[] memory _payloads, bytes32[] memory _resultMatches) external payable {\r\n        require (_targets.length == _payloads.length);\r\n        require (_targets.length == _resultMatches.length);\r\n        for (uint256 i = 0; i < _targets.length; i++) {\r\n            _check32(_targets[i], _payloads[i], _resultMatches[i]);\r\n        }\r\n        block.coinbase.call{value: msg.value}(new bytes(0));\r\n    }\r\n\r\n    function checkThenSend(address _target, bytes memory _payload, bytes memory _resultMatch) external payable {\r\n        _checkBy(_target, _payload, _resultMatch);\r\n        block.coinbase.call{value: msg.value}(new bytes(0));\r\n    }\r\n\r\n    function checkThenSendMulti(address[] memory _targets, bytes[] memory _payloads, bytes[] memory _resultMatches) external payable {\r\n        require (_targets.length == _payloads.length);\r\n        require (_targets.length == _resultMatches.length);\r\n        for (uint256 i = 0; i < _targets.length; i++) {\r\n            _checkBy(_targets[i], _payloads[i], _resultMatches[i]);\r\n        }\r\n        block.coinbase.call{value: msg.value}(new bytes(0));\r\n    }\r\n\r\n    // ======== INTERNAL ========\r\n    \r\n    function _check32(address _target, bytes memory _payload, bytes32 _resultMatch) internal view {\r\n        (bool _success, bytes memory _response) = _target.staticcall(_payload);\r\n        require(_success, \"!success\");\r\n        require(_response.length >= 32, \"response less than 32 bytes\");\r\n        bytes32 _responseScalar;\r\n        assembly {\r\n            _responseScalar := mload(add(_response, 0x20))\r\n        }\r\n        require(_responseScalar == _resultMatch, \"response mismatch\");\r\n    }\r\n\r\n    function _checkBy(address _target, bytes memory _payload, bytes memory _resultMatch) internal view {\r\n        (bool _success, bytes memory _response) = _target.staticcall(_payload);\r\n        require(_success, \"!success\");\r\n        require(keccak256(_resultMatch) == keccak256(_response), \"response bytes mismatch\");\r\n    }\r\n}"}}}