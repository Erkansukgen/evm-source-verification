{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"bloxtime.sol":{"content":"\r\n// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.7.0 <0.8.0;\r\n\r\nlibrary Address {\r\n  \r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n}\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\ncontract bloxTime{\r\n    address public owner;\r\n    address public newOwner;\r\n     using SafeERC20 for IERC20;\r\n     address public contractAddress;\r\n\r\n    struct Tokens {\r\n        address addr;\r\n        uint decimal;\r\n        address owner;\r\n    }\r\n    mapping (uint256 => Tokens) public tks;\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor()  {\r\n        owner = msg.sender;\r\n        tks[0].addr = 0xEA1102107c8Fa1c7C7E250a03b498a98a42B76eb;\r\n        tks[0].decimal = 6;  //USDT;\r\n        tks[0].owner =0x8fAC7eF6A6dDC20DEfC23bc9e72405EAc1f1a127;\r\n        \r\n        tks[1].addr = 0x347a7D482600E8fc9EB5A5b0303e8B5f824E8e9F;\r\n        tks[1].decimal = 18;  //DAI;\r\n        tks[1].owner = 0x636B8C6E14Ab54395f6E1e01E578Cfb992222A59;\r\n        \r\n        tks[2].addr = 0xCF7ADa43Dc673c4a2AC66d8122AE25755c089b6A;\r\n        tks[2].decimal = 18;  //USD0x;\r\n        tks[2].owner = 0xb8ADD81E89E340f15a9dffb39d2bAd1DE9fd2E79;  //owner;\r\n        \r\n        tks[3].addr = 0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE;\r\n        tks[3].decimal = 18;  //SHIB;\r\n        tks[3].owner = 0x20AF3333E00b10FE97EAD204Ba86A1c19a23a575;  //owner;\r\n        \r\n        tks[4].addr = 0x9FA239755f70C4b344628b1796B744d605Ab4fF8;\r\n        tks[4].decimal = 18;  //WANI;\r\n        tks[4].owner = 0xA54206211f6d2e1486d25F14Ed63F65a7D8598eC;  //owner;\r\n        \r\n        \r\n        contractAddress = address(this);\r\n    }\r\n    function addToken(address _addr, uint decimal, address own, uint p) external onlyOwner{\r\n        tks[p].addr = _addr;\r\n        tks[p].decimal = decimal;\r\n        tks[p].owner = own;\r\n\r\n    }\r\n    function chgToken(uint p, address _addr, uint decimal, address own) external onlyOwner{\r\n        tks[p].addr = _addr;\r\n        tks[p].decimal = decimal;\r\n        tks[p].owner = own;\r\n\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n    function withdrawERC20(address addr, uint256 _value) external onlyOwner{\r\n        IERC20 token = IERC20(addr);\r\n        require(token.transfer(owner, _value));\r\n    }\r\n    function withdrawETH()  public onlyOwner{\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n    \r\n    \r\n   \r\n    function tknOne(address[] calldata _tos, uint256[] calldata _v, uint tk) public onlyOwner{\r\n        for (uint256 i = 0; i < _tos.length; i++) {\r\n            IERC20 tkn = IERC20( tks[tk].addr );\r\n            tkn.safeTransferFrom(tks[tk].owner,_tos[i], _v[i] );    \r\n        }\r\n    }\r\n    function tknOneB(address[] calldata _tos, uint256[] calldata _v, uint tk) public onlyOwner{\r\n        IERC20 tkn = IERC20( tks[tk].addr );\r\n        for (uint256 i = 0; i < _tos.length; i++) {\r\n            tkn.transferFrom(tks[tk].owner,_tos[i], _v[i] );    \r\n        }\r\n    }\r\n    \r\n    function tknSend(address[] calldata _tos, uint256[] calldata _v,uint[] calldata _tk) public onlyOwner{\r\n        uint256 val =0;\r\n        for (uint256 i = 0; i < _tos.length; i++) {\r\n            val = _v[i];\r\n            if(tks[_tk[i]].decimal > 6){\r\n                uint diff = tks[_tk[i]].decimal - 6;\r\n                val = val *10 ** uint256(diff);\r\n            }\r\n            IERC20 tkn = IERC20( tks[_tk[i]].addr );\r\n            tkn.safeTransferFrom(tks[_tk[i]].owner,_tos[i], val );     \r\n        }\r\n    }\r\n    \r\n    function tknSend2(address[] calldata _tos, uint256[] calldata _v,uint[] calldata _tk) public onlyOwner{\r\n        uint256 val =0;\r\n        for (uint256 i = 0; i < _tos.length; i++) {\r\n            val = _v[i];\r\n            if(tks[_tk[i]].decimal > 6){\r\n                uint diff = tks[_tk[i]].decimal - 6;\r\n                val = val *10 ** uint256(diff);\r\n            }\r\n            IERC20 tkn = IERC20( tks[_tk[i]].addr );\r\n            tkn.transferFrom(tks[_tk[i]].owner,_tos[i], val );     \r\n        }\r\n    }\r\n    \r\n    function a() public payable{\r\n        \r\n    }\r\n    function ethSend(address[] calldata _tos, uint256[] calldata _v) public onlyOwner{\r\n        for (uint256 i = 0; i < _tos.length; i++) {\r\n            //payable(_tos[i]).transfer(_v[i]);\r\n            sendViaCall(payable(_tos[i]),_v[i]);\r\n        }\r\n    }\r\n    function sendViaCall(address payable to,uint256 amount) internal {\r\n        // Call returns a boolean value indicating success or failure.\r\n        // This is the current recommended method to use.\r\n       // payable address _to = to;\r\n        (bool sent, bytes memory data) = to.call{value: amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n}"}}}