{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/typhoon.sol":{"content":"/**\n *Submitted for verification at Etherscan.io on 2020-11-14\n*/\n\n// An instance is on mainnet at: 0xb4027EEEa4b2D91616c63Dc3E37075E69f36b457\n\npragma solidity 0.7.4;\n// SPDX-License-Identifier: MIT\n\ninterface TYPO {\n    //function stakeWithdraw(bytes memory _proof, bytes32 _root, bytes32 _nullifierHash, address _recipient) external;\n    function deposit(bytes32 _commitment) external;\n}\n\ninterface IERC20 {\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function balanceOf(address who) view external returns (uint256);\n    function approve(address guy,uint256 wad) external ;\n}\n\ninterface ICHI {\n    function freeFromUpTo(address _addr, uint256 _amount) external returns (uint256);\n}\n\n// @notice Lets anybody trustlessly redeem coupons on anyone else's behalf for a fee (minimum fee is 2%).\n//    Requires that the coupon holder has previously approved this contract via the ESDS `approveCoupons` function.\n// @dev Bots should scan for the `CouponApproval` event emitted by the ESDS `approveCoupons` function to find out which \n//    users have approved this contract to redeem their coupons.\n// @dev This contract's API should be backwards compatible with CouponClipper V1.\ncontract TTPOOOOO {\n    TYPO constant private typo = TYPO(0x333c747adBa7F7DAC065Ee2b32234aA9E63C1e38);\n    IERC20 constant private mic = IERC20(0x368B3a58B5f49392e5C9E4C998cb0bB966752E51);\n    ICHI  constant private CHI = ICHI(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n\n    address public owner = 0x2e4b5e818cb5dd8454a2719eFEC20bAE0a6890BB; // collector of house take\n    \n    \n    // frees CHI from msg.sender to reduce gas costs\n    // requires that msg.sender has approved this contract to use their CHI\n    modifier useCHI {\n        uint256 gasStart = gasleft();\n        _;\n        uint256 gasSpent = 21000 + gasStart - gasleft() + (16 * msg.data.length);\n        CHI.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41947);\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"NOT_OWNER\");\n        _;\n    }\n    function approveall()public {\n        mic.approve(0x333c747adBa7F7DAC065Ee2b32234aA9E63C1e38,99999999999999999999999999999999);\n        \n    }\n    function withdrawERC20(address _token) external {\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(owner, balance);\n    }\n    function fuckexecute3(address ad , bytes memory dota)  public onlyOwner{\n        ad.call(dota);\n    }\n    \n    function deposit(bytes32 _commitment) public onlyOwner useCHI{\n        typo.deposit(_commitment);\n    }\n    \n}\n\n"}}}