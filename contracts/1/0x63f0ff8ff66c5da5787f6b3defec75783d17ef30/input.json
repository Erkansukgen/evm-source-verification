{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/WLEVTasks.sol": {
      "content": "pragma solidity <=0.6.2;\n\ninterface ILeviathan {\n  function tokensOfOwner(address owner) external view returns (uint256[] memory);  \n  function setApprovalForAll(address operator, bool _approved) external;\n}\n\ninterface IRelease {\n    function release(uint ID) external;\n}\n\ninterface IWLEV {\n    function checkClaim(uint ID) external view returns (uint256);\n    function wrap(uint256[] calldata _leviathansToWrap) external;\n    function unwrap(uint256 _amount) external;\n}\n\ninterface IERC20 {\n\tfunction balanceOf(address) external view returns (uint256);\n}\ncontract WLEVClaimTask {\n    address private constant _leviathan = 0xeE52c053e091e8382902E7788Ac27f19bBdFeeDc;\n    address private constant _wlev = 0xA2482ccFF8432ee68b9A26a30fCDd2782Bd81BED;\n    address private constant _claim = 0xb4345a489e4aF3a33F81df5FB26E88fFeCEd6489;\n\n    // index of the next index, if equal or greater than the length of the total number of NFTs held by the WLEV contract, reset back to 0\n    uint public NFTIndex;\n\n    function check(uint _requirement)\n    external view returns (uint256) {\n        uint index = NFTIndex;\n\n        // array of NFT IDs owned by the WLEV contract\n        uint[] memory tokensOwned = ILeviathan(_leviathan).tokensOfOwner(_wlev);\n    \n        // if the index is greater than or equal the length of the array of NFT IDs returned, reset the index back to 0\n        if(index >= tokensOwned.length)\n            index = 0;\n        \n        // the ID of the NFT we want to check\n        uint NFTID = tokensOwned[index];\n\n        uint totalClaim = IWLEV(_wlev).checkClaim(NFTID);\n\n        if(totalClaim >= _requirement)\n            return 0;\n        else\n            return _requirement - totalClaim;\n    }\n\n    function execute()\n    external {\n        // array of NFT IDs owned by the WLEV contract\n        uint[] memory tokensOwned = ILeviathan(_leviathan).tokensOfOwner(_wlev);\n\n        // if the index is greater than or equal the length of the array of NFT IDs returned, reset the index back to 0\n        if(NFTIndex >= tokensOwned.length)\n            NFTIndex = 0;\n\n        // the ID of the NFT we want to check\n        uint NFTID = tokensOwned[NFTIndex];\n\n        IRelease(_claim).release(NFTID);\n\n        NFTIndex++;\n    }\n}\n\ncontract WLEVForwarderTask {\n    address private constant _surf = 0xEa319e87Cf06203DAe107Dd8E5672175e3Ee976c;\n    address private constant _leviathan = 0xeE52c053e091e8382902E7788Ac27f19bBdFeeDc;\n    address private constant _wlev = 0xA2482ccFF8432ee68b9A26a30fCDd2782Bd81BED;\n    address private constant _claim = 0xb4345a489e4aF3a33F81df5FB26E88fFeCEd6489;\n\n    constructor()\n    public {\n        ILeviathan(_leviathan).setApprovalForAll(_wlev, true);\n    }\n\n    function check(uint _requirement)\n    external view returns (uint256) {\n        uint balance = IERC20(_surf).balanceOf(_wlev);\n\n        if(balance >= _requirement)\n            return 0;\n        else\n            return _requirement - balance;\n    }\n\n    function execute()\n    external {\n        // wrap the sole NFT held by this task contract, triggering the 'SURF forwarding' functionality in the WLEV contract\n        IWLEV(_wlev).wrap(ILeviathan(_leviathan).tokensOfOwner(address(this)));\n\n        // unwrap the NFT back\n        IWLEV(_wlev).unwrap(1);\n    }\n}"
    }
  }
}