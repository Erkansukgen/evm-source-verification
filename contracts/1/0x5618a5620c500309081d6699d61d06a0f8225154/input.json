{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"PPTreasury.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IPricingSessionFactory.sol\";\n\n/// @author Medici\n/// @title Treasury contract for Pricing Protocol\ncontract PpTreasury{\n    \n    uint public nftsPriced;\n    uint public profitGenerated;\n    uint public tokensClaimed;\n    address public pricingSessionFactory;\n    address public admin;\n    address public ppToken;\n    \n    //For testnet\n    bool public checkMaxValue;\n\n    /* ======== MAPPINGS ======== */\n    mapping(address => bool) public isChild;\n\n    //For testnet\n    mapping(address => uint) public pointsLost;\n    mapping(address => uint) public pointsGained;\n    mapping(address => bool) public whitelist;\n\n    /* ======== CONSTRUCTOR ======== */\n\n    constructor() {\n        admin = msg.sender;\n    }\n\n    /* ======== ADMIN FUNCTIONS ======== */\n\n    function setPPTokenAddress(address _ppToken) onlyAdmin external {\n        require(ppToken == address(0));\n        ppToken = _ppToken;\n    }\n\n    function withdraw(uint _amount) onlyAdmin external {\n        (bool sent, ) = payable(msg.sender).call{value: _amount}(\"\");\n        require(sent, \"Failed to send Ether\");\n    }\n\n    function setAdmin(address _newAdmin) onlyAdmin external {\n        admin = _newAdmin;\n    }\n\n    function setPricingFactory(address _pricingFactory) onlyAdmin external {\n        pricingSessionFactory = _pricingFactory;\n    }\n\n    //For testnet\n    function toggleMaxValue() onlyAdmin external {\n        checkMaxValue = !checkMaxValue;\n    }\n\n    //For testnet\n    function addToWhitelist(address user) onlyAdmin external {\n        whitelist[user] = true;\n    }\n\n    //For testnet\n    function removeFromWhiteList(address user) onlyAdmin external {\n        whitelist[user] = false;\n    }\n\n    /* ======== VIEW FUNCTIONS ======== */\n    \n    function checkWhitelist(address user) view external returns (bool){\n        return whitelist[user];\n    }\n\n    /* ======== CHILD FUNCTIONS ======== */\n    \n    function sendPPToken(address recipient, uint _amount) checkIsChild external {\n        IERC20(ppToken).transfer(recipient, _amount);\n        tokensClaimed += _amount;\n    }\n\n    /// @notice Allows validated child contract to update the profit generated value\n    function updateProfitGenerated(\n        uint _amount \n    ) checkIsChild external {\n        profitGenerated += _amount;\n    }\n    \n    /// @notice Allows validated child contract to update the amount of NFTs that have been priced\n    function updateNftPriced() checkIsChild external {\n        nftsPriced++;\n    }\n    \n    function addChild(address _child) isFactory external {\n        isChild[_child] = true;\n    }\n    \n    function removeChild(address _child) checkIsChild external {\n        isChild[_child] = false;\n    }\n\n    //For testnet\n    function updateUserPoints(address _user, uint _amountGained, uint _amountLost) isFactory external {\n        require(!checkMaxValue);\n        if(_amountGained > _amountLost) {\n            pointsGained[_user] += _amountGained;\n        }\n        else {\n            pointsLost[_user] += _amountLost;\n        }\n    }\n\n    /* ======== FALLBACKS ======== */\n\n    receive() external payable {}\n    fallback() external payable {}\n\n    /* ======== MODIFIERS ======== */\n\n    modifier onlyAdmin() {\n        require(admin == msg.sender);\n        _;\n    }\n    \n    modifier isFactory() {\n        require(msg.sender == pricingSessionFactory);\n        _;\n    }\n    \n    modifier checkIsChild() {\n        require(isChild[msg.sender]);\n        _;\n    }\n}\n"},"interfaces/IERC20.sol":{"content":"\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"interfaces/IPricingSessionFactory.sol":{"content":"pragma solidity ^0.8.0;\n\n/// @author Medici\n/// @title Used to interface with parent contract\ninterface IPricingSessionFactory {\n    function updateProfitsGenerated(uint _amount) external;\n    \n    function updateNftPriced() external;\n    \n    function updateUserSessions(address _recipient, address _contract) external;\n    \n    function setChildState(address _contract) external;\n    \n    function checkIsChild() external returns (bool);\n    \n    function sendPP(address recipient, uint _amount) external;\n    \n    function updateUserPoints(address _user, uint _amountGained, uint _amountLost) external;\n    \n    function updateRecentCompletedSession(address _nftAddress, uint _tokenid) external;\n}"}}}