{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/StakedTokenAuctionHouse.sol": {
      "content": "/// StakedTokenAuctionHouse.sol\n\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.7;\n\nabstract contract SAFEEngineLike {\n    function transferInternalCoins(address,address,uint256) virtual external;\n    function createUnbackedDebt(address,address,uint256) virtual external;\n}\nabstract contract TokenLike {\n    function transferFrom(address,address,uint256) virtual external returns (bool);\n    function transfer(address,uint) virtual external returns (bool);\n}\nabstract contract AccountingEngineLike {\n    function totalOnAuctionDebt() virtual external returns (uint256);\n    function cancelAuctionedDebtWithSurplus(uint256) virtual external;\n}\n\n/*\n* This thing lets you auction a token in exchange for system coins that are then used to settle bad debt\n*/\ncontract StakedTokenAuctionHouse {\n    // --- Auth ---\n    mapping (address => uint256) public authorizedAccounts;\n    /**\n     * @notice Add auth to an account\n     * @param account Account to add auth to\n     */\n    function addAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 1;\n        emit AddAuthorization(account);\n    }\n    /**\n     * @notice Remove auth from an account\n     * @param account Account to remove auth from\n     */\n    function removeAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 0;\n        emit RemoveAuthorization(account);\n    }\n    /**\n    * @notice Checks whether msg.sender can call an authed function\n    **/\n    modifier isAuthorized {\n        require(authorizedAccounts[msg.sender] == 1, \"StakedTokenAuctionHouse/account-not-authorized\");\n        _;\n    }\n\n    // --- Data ---\n    struct Bid {\n        // Bid size\n        uint256 bidAmount;                                                        // [rad]\n        // How many staked tokens are sold in an auction\n        uint256 amountToSell;                                                     // [wad]\n        // Who the high bidder is\n        address highBidder;\n        // When the latest bid expires and the auction can be settled\n        uint48  bidExpiry;                                                        // [unix epoch time]\n        // Hard deadline for the auction after which no more bids can be placed\n        uint48  auctionDeadline;                                                  // [unix epoch time]\n    }\n\n    // Bid data for each separate auction\n    mapping (uint256 => Bid) public bids;\n\n    // SAFE database\n    SAFEEngineLike public safeEngine;\n    // Staked token address\n    TokenLike public stakedToken;\n    // Accounting engine\n    address public accountingEngine;\n    // Token burner contract\n    address public tokenBurner;\n\n    uint256  constant ONE = 1.00E18;                                              // [wad]\n    // Minimum bid increase compared to the last bid in order to take the new one in consideration\n    uint256  public   bidIncrease = 1.05E18;                                      // [wad]\n    // Decrease in the min bid in case no one bid before\n    uint256  public   minBidDecrease = 0.95E18;                                   // [wad]\n    // The lowest possible value for the minimum bid\n    uint256  public   minBid = 1;                                                 // [rad]\n    // How long the auction lasts after a new bid is submitted\n    uint48   public   bidDuration = 3 hours;                                      // [seconds]\n    // Total length of the auction\n    uint48   public   totalAuctionLength = 2 days;                                // [seconds]\n    // Number of auctions started up until now\n    uint256  public   auctionsStarted = 0;\n    // Accumulator for all debt auctions currently not settled\n    uint256  public   activeStakedTokenAuctions;\n    // Flag that indicates whether the contract is still enabled or not\n    uint256  public   contractEnabled;\n\n    bytes32 public constant AUCTION_HOUSE_TYPE = bytes32(\"STAKED_TOKEN\");\n\n    // --- Events ---\n    event AddAuthorization(address account);\n    event RemoveAuthorization(address account);\n    event StartAuction(\n      uint256 indexed id,\n      uint256 auctionsStarted,\n      uint256 amountToSell,\n      uint256 amountToBid,\n      address indexed incomeReceiver,\n      uint256 indexed auctionDeadline,\n      uint256 activeStakedTokenAuctions\n    );\n    event ModifyParameters(bytes32 parameter, uint256 data);\n    event ModifyParameters(bytes32 parameter, address data);\n    event RestartAuction(uint256 indexed id, uint256 minBid, uint256 auctionDeadline);\n    event IncreaseBidSize(uint256 id, address highBidder, uint256 amountToBuy, uint256 bid, uint256 bidExpiry);\n    event SettleAuction(uint256 indexed id, uint256 bid);\n    event TerminateAuctionPrematurely(uint256 indexed id, address sender, address highBidder, uint256 bidAmount, uint256 activeStakedTokenAuctions);\n    event DisableContract(address sender);\n\n    // --- Init ---\n    constructor(address safeEngine_, address stakedToken_) public {\n        require(safeEngine_ != address(0x0), \"StakedTokenAuctionHouse/invalid_safe_engine\");\n        require(stakedToken_ != address(0x0), \"StakedTokenAuctionHouse/invalid_token\");\n        authorizedAccounts[msg.sender] = 1;\n        safeEngine      = SAFEEngineLike(safeEngine_);\n        stakedToken     = TokenLike(stakedToken_);\n        contractEnabled = 1;\n        emit AddAuthorization(msg.sender);\n    }\n\n    // --- Boolean Logic ---\n    function both(bool x, bool y) internal pure returns (bool z) {\n        assembly{ z := and(x, y)}\n    }\n    function either(bool x, bool y) internal pure returns (bool z) {\n        assembly{ z := or(x, y)}\n    }\n\n    // --- Math ---\n    function addUint48(uint48 x, uint48 y) internal pure returns (uint48 z) {\n        require((z = x + y) >= x, \"StakedTokenAuctionHouse/add-uint48-overflow\");\n    }\n    function addUint256(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x, \"StakedTokenAuctionHouse/add-uint256-overflow\");\n    }\n    function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"StakedTokenAuctionHouse/sub-underflow\");\n    }\n    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"StakedTokenAuctionHouse/mul-overflow\");\n    }\n    function minimum(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        if (x > y) { z = y; } else { z = x; }\n    }\n\n    // --- Admin ---\n    /**\n     * @notice Modify auction parameters\n     * @param parameter The name of the parameter modified\n     * @param data New value for the parameter\n     */\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\n        require(data > 0, \"StakedTokenAuctionHouse/null-data\");\n        require(contractEnabled == 1, \"StakedTokenAuctionHouse/contract-not-enabled\");\n\n        if (parameter == \"bidIncrease\") {\n          require(data > ONE, \"StakedTokenAuctionHouse/invalid-bid-increase\");\n          bidIncrease = data;\n        }\n        else if (parameter == \"bidDuration\") bidDuration = uint48(data);\n        else if (parameter == \"totalAuctionLength\") totalAuctionLength = uint48(data);\n        else if (parameter == \"minBidDecrease\") {\n          require(data < ONE, \"StakedTokenAuctionHouse/invalid-min-bid-decrease\");\n          minBidDecrease = data;\n        }\n        else if (parameter == \"minBid\") {\n          minBid = data;\n        }\n        else revert(\"StakedTokenAuctionHouse/modify-unrecognized-param\");\n        emit ModifyParameters(parameter, data);\n    }\n    /**\n     * @notice Modify an address parameter\n     * @param parameter The name of the oracle contract modified\n     * @param addr New contract address\n     */\n    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\n        require(addr != address(0), \"StakedTokenAuctionHouse/null-addr\");\n        require(contractEnabled == 1, \"StakedTokenAuctionHouse/contract-not-enabled\");\n        if (parameter == \"accountingEngine\") accountingEngine = addr;\n        else if (parameter == \"tokenBurner\") tokenBurner = addr;\n        else revert(\"StakedTokenAuctionHouse/modify-unrecognized-param\");\n        emit ModifyParameters(parameter, addr);\n    }\n\n    // --- Auction ---\n    /**\n     * @notice Start a new staked token auction\n     * @param amountToSell Amount of staked tokens to sell (wad)\n     */\n    function startAuction(\n        uint256 amountToSell,\n        uint256 systemCoinsRequested\n    ) external isAuthorized returns (uint256 id) {\n        require(contractEnabled == 1, \"StakedTokenAuctionHouse/contract-not-enabled\");\n        require(auctionsStarted < uint256(-1), \"StakedTokenAuctionHouse/overflow\");\n        require(accountingEngine != address(0), \"StakedTokenAuctionHouse/null-accounting-engine\");\n        require(both(amountToSell > 0, systemCoinsRequested > 0), \"StakedTokenAuctionHouse/null-amounts\");\n        require(systemCoinsRequested <= uint256(-1) / ONE, \"StakedTokenAuctionHouse/large-sys-coin-request\");\n\n        id = ++auctionsStarted;\n\n        bids[id].amountToSell     = amountToSell;\n        bids[id].bidAmount        = systemCoinsRequested;\n        bids[id].highBidder       = address(0);\n        bids[id].auctionDeadline  = addUint48(uint48(now), totalAuctionLength);\n\n        activeStakedTokenAuctions = addUint256(activeStakedTokenAuctions, 1);\n\n        // get staked tokens\n        require(stakedToken.transferFrom(msg.sender, address(this), amountToSell), \"StakedTokenAuctionHouse/cannot-transfer-staked-tokens\");\n\n        emit StartAuction(\n          id, auctionsStarted, amountToSell, systemCoinsRequested, accountingEngine, bids[id].auctionDeadline, activeStakedTokenAuctions\n        );\n    }\n    /**\n     * @notice Restart an auction if no bids were submitted for it\n     * @param id ID of the auction to restart\n     */\n    function restartAuction(uint256 id) external {\n        require(id <= auctionsStarted, \"StakedTokenAuctionHouse/auction-never-started\");\n        require(bids[id].auctionDeadline < now, \"StakedTokenAuctionHouse/not-finished\");\n        require(bids[id].bidExpiry == 0, \"StakedTokenAuctionHouse/bid-already-placed\");\n\n        uint256 newMinBid        = multiply(minBidDecrease, bids[id].bidAmount) / ONE;\n        newMinBid                = (newMinBid < minBid) ? minBid : newMinBid;\n\n        bids[id].bidAmount       = newMinBid;\n        bids[id].auctionDeadline = addUint48(uint48(now), totalAuctionLength);\n\n        emit RestartAuction(id, newMinBid, bids[id].auctionDeadline);\n    }\n    /**\n     * @notice Submit a higher system coin bid for the same amount of staked tokens\n     * @param id ID of the auction you want to submit the bid for\n     * @param amountToBuy Amount of staked tokens to buy (wad)\n     * @param bid New bid submitted (rad)\n     */\n    function increaseBidSize(uint256 id, uint256 amountToBuy, uint256 bid) external {\n        require(contractEnabled == 1, \"StakedTokenAuctionHouse/contract-not-enabled\");\n        require(bids[id].bidExpiry > now || bids[id].bidExpiry == 0, \"StakedTokenAuctionHouse/bid-already-expired\");\n        require(bids[id].auctionDeadline > now, \"StakedTokenAuctionHouse/auction-already-expired\");\n\n        require(amountToBuy == bids[id].amountToSell, \"StakedTokenAuctionHouse/not-matching-amount-bought\");\n        require(bid > bids[id].bidAmount, \"StakedTokenAuctionHouse/bid-not-higher\");\n        require(multiply(bid, ONE) > multiply(bidIncrease, bids[id].bidAmount), \"StakedTokenAuctionHouse/insufficient-increase\");\n\n        if (bids[id].highBidder == msg.sender) {\n            safeEngine.transferInternalCoins(msg.sender, address(this), subtract(bid, bids[id].bidAmount));\n        } else {\n            safeEngine.transferInternalCoins(msg.sender, address(this), bid);\n            if (bids[id].highBidder != address(0)) // not first bid\n                safeEngine.transferInternalCoins(address(this), bids[id].highBidder, bids[id].bidAmount);\n\n            bids[id].highBidder = msg.sender;\n        }\n\n        bids[id].bidAmount  = bid;\n        bids[id].bidExpiry  = addUint48(uint48(now), bidDuration);\n\n        emit IncreaseBidSize(id, msg.sender, amountToBuy, bid, bids[id].bidExpiry);\n    }\n    /**\n     * @notice Settle/finish an auction\n     * @param id ID of the auction to settle\n     */\n    function settleAuction(uint256 id) external {\n        require(contractEnabled == 1, \"StakedTokenAuctionHouse/not-live\");\n        require(both(bids[id].bidExpiry != 0, either(bids[id].bidExpiry < now, bids[id].auctionDeadline < now)), \"StakedTokenAuctionHouse/not-finished\");\n\n        // get the bid, the amount to sell and the high bidder\n        uint256 bid          = bids[id].bidAmount;\n        uint256 amountToSell = bids[id].amountToSell;\n        address highBidder   = bids[id].highBidder;\n\n        // clear storage\n        activeStakedTokenAuctions = subtract(activeStakedTokenAuctions, 1);\n        delete bids[id];\n\n        // transfer the surplus to the accounting engine\n        safeEngine.transferInternalCoins(address(this), accountingEngine, bid);\n\n        // clear as much bad debt as possible\n        uint256 totalOnAuctionDebt = AccountingEngineLike(accountingEngine).totalOnAuctionDebt();\n        AccountingEngineLike(accountingEngine).cancelAuctionedDebtWithSurplus(minimum(bid, totalOnAuctionDebt));\n\n        // transfer staked tokens to the high bidder\n        require(stakedToken.transfer(highBidder, amountToSell), \"StakedTokenAuctionHouse/failed-transfer\");\n\n        emit SettleAuction(id, activeStakedTokenAuctions);\n    }\n\n    // --- Shutdown ---\n    /**\n    * @notice Disable the auction house\n    */\n    function disableContract() external isAuthorized {\n        contractEnabled  = 0;\n        emit DisableContract(msg.sender);\n    }\n    /**\n     * @notice Terminate an auction prematurely\n     * @param id ID of the auction to terminate\n     */\n    function terminateAuctionPrematurely(uint256 id) external {\n        require(contractEnabled == 0, \"StakedTokenAuctionHouse/contract-still-enabled\");\n        require(bids[id].highBidder != address(0), \"StakedTokenAuctionHouse/high-bidder-not-set\");\n\n        // decrease amount of active auctions\n        activeStakedTokenAuctions = subtract(activeStakedTokenAuctions, 1);\n\n        // send the system coin bid back to the high bidder in case there was at least one bid\n        safeEngine.transferInternalCoins(address(this), bids[id].highBidder, bids[id].bidAmount);\n\n        // send the staked tokens to the token burner\n        require(stakedToken.transfer(tokenBurner, bids[id].amountToSell), \"StakedTokenAuctionHouse/failed-transfer\");\n\n        emit TerminateAuctionPrematurely(id, msg.sender, bids[id].highBidder, bids[id].bidAmount, activeStakedTokenAuctions);\n        delete bids[id];\n    }\n}"
    }
  }
}