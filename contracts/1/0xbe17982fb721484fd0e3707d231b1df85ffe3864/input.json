{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/StakingRewards.sol":{"content":"// SPDX-License-Identifier: MIT\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/math/Math.sol\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n// File: @openzeppelin/contracts/utils/EnumerableMap.sol\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMap {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct MapEntry {\n        bytes32 _key;\n        bytes32 _value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] _entries;\n\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n            map._entries.push(MapEntry({ _key: key, _value: value }));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = map._entries.length;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            MapEntry storage lastEntry = map._entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map._entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map._entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._entries.length;\n    }\n\n   /**\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n    *\n    * Note that there are no guarantees on the ordering of entries inside the\n    * array, and it may change when more entries are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\n\n        MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        return _get(map, key, \"EnumerableMap: nonexistent key\");\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     */\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint256(_get(map._inner, bytes32(key))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\n    }\n}\n\n// File: contracts/stakingNew1/IStakingRewards.sol\n\npragma solidity >=0.6.0 <0.8.0;\n\ninterface IStakingRewards {\n    // Views\n    function lastTimeRewardApplicable() external view returns (uint256);\n\n    function rewardPerEth(address[] calldata tokenList, uint256[] calldata prices,uint256[] calldata amountsIn) external view returns (uint256);\n\n    function earned(address account, address[] calldata tokenList, uint256[] calldata amountsIn) external view returns (uint256);\n\n    function totalETHSupply(address[] calldata tokenList, uint256[] calldata prices, uint256[] calldata amountsIn) external view returns (uint256);\n\n    function totalTokenSupply(address token) external view returns (uint256);\n\n    function getTokenValueForEth(address token) external view returns (uint256);\n\n    function forEthPrice(address token) external  view returns (uint256[] memory);\n\n    function balanceOfToken(address token, address account)\n        external\n        view\n        returns (uint256);\n\n    function getIssueCounter() external view returns (uint256);\n\n    // Mutative\n\n    function stake(address token, uint256 amount) external;\n\n    function stakeWithEth(uint256 amount) payable external;\n\n    function withdraw(\n        address token,\n        uint256 amount,\n        address recipient\n    ) external;\n\n    function getReward() external;\n}\n\n// File: contracts/stakingNew1/StakingRewards.sol\n\npragma solidity >=0.6.0 <0.8.0;\n\n\n\n\n\n\n\n/* ========== INTERFACE ==========  */\n\ninterface IStakingElection {\n    function stakingTokensList() external view returns (address[] memory);\n    function tokenDecimals(address _token) external view returns (uint8 decimals);\n}\n\ninterface IERC20Permit {\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function nonces(address owner) external view returns (uint256);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n\ninterface IUniswapV2Router02 {\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\ncontract ReentrancyGuard {\n    /// @dev counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    constructor() public {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(\n            localCounter == _guardCounter,\n            \"ReentrancyGuard: reentrant call\"\n        );\n    }\n}\n\nabstract contract RewardsDistributionRecipient {\n    address public rewardsDistribution;\n\n    function notifyRewardAmount() external virtual;\n\n    modifier onlyRewardsDistribution() {\n        require(\n            msg.sender == rewardsDistribution,\n            \"Caller is not RewardsDistribution contract\"\n        );\n        _;\n    }\n}\n\ncontract StakingRewards is\n    IStakingRewards,\n    RewardsDistributionRecipient,\n    ReentrancyGuard\n{\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\n\n    /* ========== STATE VARIABLES ========== */\n\n    EnumerableMap.UintToAddressMap private rewardsTokens;\n\n    address[8] public RewardToken;\n  \n    //0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n    address\n        public constant ROUTER02 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    // uniswap router02 address\n    address public immutable stakingElectionAddr;\n    // WETH address\n    address public immutable WETH;\n    \n    address public rewardPoolAddress;\n\n    //初始奖励\n    uint256 public immutable initialTotalreward;\n    //当前奖励\n    uint256 public currentTotalreward;\n    //计数器\n    uint256 private _issueCounter = 0;\n    //挖矿结束时间\n    uint256 public periodFinish = 0;\n    //产量/秒\n    uint256 public ethRewardRate = 0;\n    //挖矿周期\n    uint256 public constant rewardsDuration = 30 days;\n\n    uint256 public constant reductionDuration = 6;\n    //上次更新时间\n    uint256 public lastUpdateTime;\n\n    uint256 public constant REWARD_POOL_MULTIPLE = 13;\n    //质押挖矿比例\n    uint256 public constant STAKING_MULTIPLE = 85;\n    //结算时每个eth所能获得的奖励\n    mapping(address => uint256) public rewardPerTokenStored;\n    //可领取奖励\n    mapping(address => uint256) public rewards;\n    //各币种总额\n    mapping(address => uint256) private _totalTokenSupply;\n\n    //erc 20 balance\n    mapping(address => mapping(address => uint256)) private _tokenBalances;\n\n    mapping(address => mapping(address => uint256))\n        private _userRewardPerTokenPaid;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        uint256 _initialTotalreward,\n        address _rewardsDistribution,\n        address _WETH,\n        address _stakingElectionAddr\n    ) public {\n        initialTotalreward = _initialTotalreward;\n        rewardsDistribution = _rewardsDistribution;\n        stakingElectionAddr = _stakingElectionAddr;\n        WETH = _WETH;\n    }\n\n    fallback() external {}\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n    //开启奖池\n    function notifyRewardAmount()\n        external\n        override\n        onlyRewardsDistribution\n        updateReward(address(0))\n    {\n        //上期未结束，不可开启下一期\n        require(block.timestamp >= periodFinish, \"Time is not up\");\n        //本期奖励 【每六期减产30%】\n\n        uint256 reduceTimes = _issueCounter.div(reductionDuration);\n        currentTotalreward = initialTotalreward.mul(70**reduceTimes).div(\n            100**reduceTimes\n        );\n        //产量/秒\n        ethRewardRate = currentTotalreward.div(rewardsDuration);\n        //计数器 + 1\n        _issueCounter = _issueCounter.add(1);\n        emit Start(currentTotalreward, _issueCounter);\n\n        //每个币种的余额要大于本期奖励\n        uint256 balance;\n        for (uint256 i = 0; i < RewardToken.length; i++) {\n            balance = IERC20(RewardToken[i]).balanceOf(address(this));\n            require(balance >= currentTotalreward, \"Provided reward too high\");\n        }\n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp.add(rewardsDuration);\n    }\n\n    //质押eth\n    function stakeWithEth(uint256 amount)\n        external\n        override\n        payable\n        nonReentrant\n        updateReward(msg.sender)\n    {\n        require(amount > 0, \"Cannot stake 0\");\n        require(amount == msg.value, \"Transfer amount error\");\n        //换成weth\n        IWETH(WETH).deposit{value: amount}();\n        _totalTokenSupply[WETH] = _totalTokenSupply[WETH].add(amount);\n        _tokenBalances[WETH][msg.sender] = _tokenBalances[WETH][msg.sender].add(\n            amount\n        );\n        emit Staked(msg.sender, WETH, amount);\n    }\n\n    //其他币种质押\n    function stake(address token, uint256 amount)\n        external\n        override\n        nonReentrant\n        updateReward(msg.sender)\n    {\n        require(amount > 0, \"Cannot stake 0\");\n        _totalTokenSupply[token] = _totalTokenSupply[token].add(amount);\n        _tokenBalances[token][msg.sender] = _tokenBalances[token][msg.sender]\n            .add(amount);\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        emit Staked(msg.sender, token, amount);\n    }\n\n    function stakeWithPermit(\n        address token,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external nonReentrant updateReward(msg.sender) {\n        require(amount > 0, \"Cannot stake 0\");\n        _totalTokenSupply[token] = _totalTokenSupply[token].add(amount);\n        _tokenBalances[token][msg.sender] = _tokenBalances[token][msg.sender]\n            .add(amount);\n        // permit\n        IERC20Permit(address(token)).permit(\n            msg.sender,\n            address(this),\n            amount,\n            deadline,\n            v,\n            r,\n            s\n        );\n\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\n        emit Staked(msg.sender, token, amount);\n    }\n\n    //提现\n    function withdraw(\n        address token,\n        uint256 amount,\n        address recipient\n    ) external override nonReentrant updateReward(msg.sender) {\n        require(amount > 0, \"Cannot withdraw 0\");\n        _totalTokenSupply[token] = _totalTokenSupply[token].sub(amount);\n        _tokenBalances[token][msg.sender] = _tokenBalances[token][msg.sender]\n            .sub(amount);\n        IERC20(token).safeTransfer(recipient, amount);\n        emit Withdrawn(msg.sender, token, amount, recipient);\n    }\n\n    //领取奖励\n    function getReward() external override nonReentrant updateReward(msg.sender) {\n        uint256 reward = rewards[msg.sender];\n        if (reward > 0) {\n            rewards[msg.sender] = 0;\n            for (uint256 i = 0; i < RewardToken.length; i++) {\n                IERC20(RewardToken[i]).safeTransfer(msg.sender, reward);\n            }\n            emit RewardPaid(msg.sender, reward);\n        }\n    }\n\n    //设置奖励币种\n      function setRewardAddress(address[] calldata _rewardAddress)\n        external\n        onlyRewardsDistribution\n    {\n        require(_rewardAddress.length < 9, \"The length of the address list should be less than 9\");\n        for (uint256 i = 0; i < _rewardAddress.length; i++) {\n            RewardToken[i] = _rewardAddress[i];\n            emit SetRewardAddress(msg.sender, i, _rewardAddress[i]);\n        }\n    }\n\n\n   \n\n    function updateRewardPerToken(\n        address[] memory tokenList,\n        uint256[] memory prices,\n        uint256[] memory amountsIn\n    ) internal {\n        uint256 _rewardPerEth = rewardPerEth(tokenList, prices, amountsIn);\n        for (uint256 i = 0; i < tokenList.length; i++) {\n            rewardPerTokenStored[tokenList[i]] = rewardPerTokenStored[tokenList[i]]\n                .add(prices[i].mul(_rewardPerEth).div(1e18));\n        }\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier updateReward(address account) {\n        address[] memory tokenList = IStakingElection(stakingElectionAddr)\n            .stakingTokensList();\n        uint256[] memory amountsIn = new uint256[](tokenList.length);\n        uint256[] memory prices = new uint256[](tokenList.length);\n        for (uint256 i = 0; i < tokenList.length; i++) {\n            uint256[] memory price = forEthPrice(tokenList[i]);\n            amountsIn[i] = price[0];\n            prices[i] = price[1];\n        }\n        updateRewardPerToken(tokenList, prices, amountsIn);\n        lastUpdateTime = lastTimeRewardApplicable();\n        if (account != address(0)) {\n            uint256 reward = earned(account, tokenList, amountsIn);\n            for (uint256 i = 0; i < tokenList.length; i++) {\n                _userRewardPerTokenPaid[account][tokenList[i]] = rewardPerTokenStored[tokenList[i]];\n            }\n            rewards[account] = rewards[account].add(\n                reward.mul(STAKING_MULTIPLE).div(100)\n            );\n            rewards[rewardPoolAddress] = rewards[rewardPoolAddress].add(\n                reward.mul(REWARD_POOL_MULTIPLE).div(100)\n            );\n        }\n        _;\n    }\n\n    /*  ========== VIEWS ========== */\n\n    function totalTokenSupply(address token)\n        external\n        override\n        view\n        returns (uint256)\n    {\n        return _totalTokenSupply[token];\n    }\n\n    //换算成eth的总市值\n    function totalETHSupply(address[] memory tokenList, uint256[] memory prices, uint256[] memory amountsIn)\n        public\n        override\n        view\n        returns (uint256)\n    {\n        uint256 total = 0;\n        for (uint256 i = 0; i < tokenList.length; i++) {\n            if (_totalTokenSupply[tokenList[i]] > 0) {\n                total = total.add(\n                    prices[i].mul(_totalTokenSupply[tokenList[i]]).div(amountsIn[i])\n                );\n            }\n        }\n        return total;\n    }\n\n    //币种余额\n    function balanceOfToken(address token, address account)\n        external\n        override\n        view\n        returns (uint256)\n    {\n        return _tokenBalances[token][account];\n    }\n\n    //获取奖池计数\n    function getIssueCounter() external override view returns (uint256) {\n        if(_issueCounter == 0){\n            return 0;\n        }else{\n             return (_issueCounter - 1) / reductionDuration + 1;\n        }\n       \n    }\n\n    //奖励结算时间\n    function lastTimeRewardApplicable() public override view returns (uint256) {\n        return Math.min(block.timestamp, periodFinish);\n    }\n\n    //换算成eth价格  【1 ether】\n    function forEthPrice(address token) public override view returns (uint256[] memory) {\n        if (token == WETH) {\n            uint256[] memory prs = new uint256[](2);\n            prs[0] = 1e18;\n            prs[1] = 1e18;\n            return prs;\n        }\n        address[] memory path = new address[](2);\n        path[0] = token;\n        path[1] = WETH;\n        uint8 decimals = IStakingElection(stakingElectionAddr).tokenDecimals(token);\n        uint256 amountIn = 10 ** uint256(decimals);\n        uint256[] memory prices = IUniswapV2Router02(ROUTER02).getAmountsOut(\n            amountIn,\n            path\n        );\n        return prices;\n    }\n\n    //每个eth可获得的奖励\n    function rewardPerEth(address[] memory tokenList, uint256[] memory prices, uint256[] memory amountsIn)\n        public\n        override\n        view\n        returns (uint256)\n    {\n        uint256 totalETH = totalETHSupply(tokenList, prices, amountsIn);\n        if (totalETH == 0) {\n            return 0;\n        }\n        return\n            lastTimeRewardApplicable()\n                .sub(lastUpdateTime)\n                .mul(ethRewardRate)\n                .mul(1e18)\n                .div(totalETH);\n    }\n\n    //获取该币种换算成eth的市值\n    function getTokenValueForEth(address token)\n        external\n        override\n        view\n        returns (uint256)\n    {\n        uint256[] memory price = forEthPrice(token);\n        uint256 totalValue = price[1].mul(_totalTokenSupply[token]).div(price[0]);\n        return totalValue;\n    }\n\n    //结算奖励\n    function earned(address account, address[] memory tokenList, uint256[] memory amountsIn)\n        public\n        override\n        view\n        returns (uint256)\n    {\n        uint256 reward = 0;\n        for (uint256 i = 0; i < tokenList.length; i++) {\n            if (_tokenBalances[tokenList[i]][account] > 0) {\n                reward = reward.add(\n                    _tokenBalances[tokenList[i]][account]\n                        .mul(\n                        rewardPerTokenStored[tokenList[i]].sub(\n                            _userRewardPerTokenPaid[account][tokenList[i]]\n                        )\n                    )\n                        .div(amountsIn[i])\n                );\n            }\n        }\n        return reward;\n    }\n\n    function estimateReward(address user, address token) external view returns(uint256){\n        address[] memory tokenList = IStakingElection(stakingElectionAddr)\n            .stakingTokensList();\n        uint256[] memory amountsIn = new uint256[](tokenList.length);\n        uint256[] memory prices = new uint256[](tokenList.length);\n        for (uint256 i = 0; i < tokenList.length; i++) {\n            uint256[] memory price = forEthPrice(tokenList[i]);\n            amountsIn[i] = price[0];\n            prices[i] = price[1];\n        }\n        uint256 _rewardPerEth = rewardPerEth(tokenList, prices, amountsIn);\n        uint256[] memory curRewardPerToken = new uint256[](tokenList.length);\n        for (uint256 i = 0; i < tokenList.length; i++) {\n            curRewardPerToken[i] = rewardPerTokenStored[tokenList[i]]\n                .add(prices[i].mul(_rewardPerEth).div(1e18));\n        }\n        return calculation(tokenList, amountsIn, curRewardPerToken, user, token);\n    }\n\n    function calculation(address[] memory tokenList, uint256[] memory amountsIn, uint256[] memory curRewardPerToken, address user, address token) public view returns(uint256){\n        uint256 reward;\n        for (uint256 i = 0; i < tokenList.length; i++) {\n            if (_tokenBalances[tokenList[i]][user] > 0) {\n                if(token == address(0)){\n                    reward = reward.add(\n                    _tokenBalances[tokenList[i]][user]\n                        .mul(\n                        curRewardPerToken[i].sub(\n                            _userRewardPerTokenPaid[user][tokenList[i]]\n                        )\n                    ).div(amountsIn[i])\n                );\n                }else{\n                    if(token == tokenList[i]){\n                                            reward = reward.add(\n                    _tokenBalances[tokenList[i]][user]\n                        .mul(\n                        curRewardPerToken[i].sub(\n                            _userRewardPerTokenPaid[user][tokenList[i]]\n                        )\n                    ).div(amountsIn[i])\n                );\n                    }\n                }\n\n            }\n        }\n        return reward;\n    }\n\n\n    function setRewardPoolAddress(address _address) external onlyRewardsDistribution{\n        rewardPoolAddress = _address;\n        emit SetRewardPoolAddress(msg.sender, _address);\n    }\n\n\n    function userRewardPerTokenPaid(address user, address token)\n        external\n        view\n        returns (uint256)\n    {\n        return _userRewardPerTokenPaid[user][token];\n    }\n\n    /* ========== EVENTS ========== */\n\n    event Staked(address indexed user, address indexed token, uint256 amount);\n    event Withdrawn(\n        address indexed user,\n        address indexed token,\n        uint256 amount,\n        address recipient\n    );\n\n    event RewardPaid(address indexed user, uint256 reward);\n    event Start(uint256 reward, uint256 round);\n\n    event SetRewardAddress(\n        address indexed user,\n        uint256 rewardKey,\n        address rwardAddress\n    );\n\n    event SetOfficialAddress(address indexed user, address officialAddress);\n\n    event SetCommunityOperationAddress(\n        address indexed user,\n        address communityOperationAddress\n    );\n\n    event SetRewardPoolAddress(\n        address indexed user,\n        address rewardPoolAddress\n    );\n}\n"}}}