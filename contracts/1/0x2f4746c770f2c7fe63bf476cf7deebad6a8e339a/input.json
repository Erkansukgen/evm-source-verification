{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 1200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "localhost/contracts/CHIBurner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"./interfaces/ICHI.sol\";\n\ncontract CHIBurner {\n    address\n        public constant CHI_ADDRESS = 0x0000000000004946c0e9F43F4Dee607b0eF1fA1c;\n\n    ICHI public constant chi = ICHI(CHI_ADDRESS);\n\n    modifier discountCHI {\n        uint256 gasStart = gasleft();\n        _;\n\n        /*uint256 availableAmount = chi.balanceOf(msg.sender);\n        uint256 allowedAmount = chi.allowance(msg.sender, address(this));\n        if (allowedAmount < availableAmount) {\n            availableAmount = allowedAmount;\n        }\n        uint256 ourBalance = chi.balanceOf(address(this));\n\n        address sender;\n        if (ourBalance > availableAmount) {\n            sender = address(this);\n            ourBalance = availableAmount;\n        } else {\n            sender = msg.sender;\n        }\n\n        if (ourBalance > 0) {*/\n        uint256 gasLeft = gasleft();\n        uint256 gasSpent = 21000 + gasStart - gasLeft + 16 * msg.data.length;\n        //chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41947);\n        chi.freeUpTo((gasSpent + 14154) / 41947);\n        //}\n    }\n}\n"
    },
    "localhost/contracts/ValueHolder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"./interfaces/IUniswapV2Pair.sol\";\nimport \"./interfaces/IExternalPool.sol\";\n\nimport \"./interfaces/ISFToken.sol\";\nimport \"./interfaces/IWETH.sol\";\nimport \"./CHIBurner.sol\";\nimport \"./XChanger.sol\";\nimport \"./utils/SafeERC20.sol\";\n\ncontract ValueHolder is XChanger, CHIBurner {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    \n    mapping(uint256 => address) public uniPools;\n    mapping(uint256 => address) public externalPools;\n\n    uint256 public uniLen;\n    uint256 public extLen;\n\n    address public denominateTo;\n    address public holderAddress;\n    address public SFToken;\n\n    address public votedUniPool;\n    address public votedExtPool;\n    uint256 public votedFee; // 1% = 100\n    uint256 public votedChi; // number of Chi to hold\n\n    uint256 private constant fpNumbers = 1e8;\n    \n    event LogValueManagerUpdated(address Manager);\n    event LogVoterUpdated(address Voter);\n    event LogVotedExtPoolUpdated(address pool);\n    event LogVotedUniPoolUpdated(address pool);\n    event LogSFTokenUpdated(address _NewSFToken);\n    event LogFeeUpdated(uint256 newFee);\n    event LogFeeTaken(uint256 feeAmount);\n    event LogMintTaken(uint256 fromTokenAmount);\n    event LogBurnGiven(uint256 toTokenAmount);\n    event LogChiToppedUpdated(uint256 spendAmount);\n\n    address public ValueManager;\n    modifier onlyValueManager() {\n        require(msg.sender == ValueManager, \"Not Value Manager\");\n        _;\n    }\n\n    address public Voter;\n    modifier onlyVoter() {\n        require(msg.sender == Voter, \"Not Voter\");\n        _;\n    }\n\n    function init(\n        address _uniPool,\n        address _extPool,\n        address _sfToken\n    ) public {\n        XChanger.init();\n        uniLen = 0;\n        extLen = 0;\n        //0x3041CbD36888bECc7bbCBc0045E3B1f144466f5f UNI\n\n        uniPools[uniLen] = _uniPool;\n        uniLen++;\n\n        externalPools[extLen] = _extPool;\n        extLen++;\n\n        votedExtPool = _extPool;\n        votedUniPool = address(0);\n        emit LogVotedExtPoolUpdated(_extPool);\n\n        denominateTo = USDT_ADDRESS; //0xdAC17F958D2ee523a2206206994597C13D831ec7; // USDT\n        SFToken = _sfToken; //\n        ValueManager = msg.sender;\n        Voter = msg.sender;\n        holderAddress = ValueManager;\n        votedFee = 200;\n        votedChi = 20;\n    }\n\n    function setSFToken(address _NewSFToken) public onlyOwner {\n        SFToken = _NewSFToken;\n        emit LogSFTokenUpdated(_NewSFToken);\n    }\n\n    function setValueManager(address _ValueManager) external onlyOwner {\n        ValueManager = _ValueManager;\n        emit LogValueManagerUpdated(_ValueManager);\n    }\n\n    function setVoter(address _Voter) external onlyOwner {\n        Voter = _Voter;\n        emit LogVoterUpdated(_Voter);\n    }\n\n    function setVotedExtPool(address pool) public onlyVoter {\n        votedExtPool = pool;\n        emit LogVotedExtPoolUpdated(pool);\n    }\n\n    function setVotedUniPool(address pool) public onlyVoter {\n        votedUniPool = pool;\n        emit LogVotedUniPoolUpdated(pool);\n    }\n\n    function setVotedFee(uint256 _votedFee) public onlyVoter {\n        votedFee = _votedFee;\n        emit LogFeeUpdated(_votedFee);\n    }\n\n    function setVotedChi(uint256 _votedChi) public onlyVoter {\n        votedChi = _votedChi;\n    }\n\n    function topUpChi(address Token) public returns (uint256) {\n        uint256 currentChi = ICHI(CHI_ADDRESS).balanceOf(address(this));\n        if (currentChi < votedChi) {\n            //top up 1/2 votedChi\n            uint256 spendAmount = reverseQuote(\n                Token,\n                CHI_ADDRESS,\n                votedChi.div(2)\n            );\n            uint256 balance = IERC20(Token).balanceOf(address(this));\n            if (spendAmount > balance) {\n                spendAmount = balance;\n            }\n            \n            if (spendAmount > 0) {\n                swap(Token, CHI_ADDRESS, spendAmount, Exchange.UNI, false);\n                LogChiToppedUpdated(spendAmount);\n                return spendAmount;\n            } else {\n                return 0;\n            }\n        } else {\n            return 0;    \n        }\n    }\n\n    function mintQuote(\n        address fromToken,\n        uint256 amount\n    ) external view returns (uint256) {\n        if (votedExtPool != address(0)) {\n            address toToken = IExternalPool(votedExtPool).enterToken();\n\n            (uint256 returnAmount, ) = quote(\n                fromToken,\n                toToken,\n                amount,\n                exchange\n            );\n            \n            (returnAmount, ) = quote(\n                toToken,\n                denominateTo,\n                returnAmount,\n                exchange\n            );\n            \n            return returnAmount;\n        } else if (votedUniPool != address(0)) {\n            revert(\"not yet implemented\");\n        }\n    }\n\n    function mint(address fromToken, uint256 amount)\n        external\n        payable\n        discountCHI\n    {\n        if (fromToken != address(0)) {\n            IERC20 _fromToken = IERC20(fromToken);\n            require(\n                _fromToken.allowance(msg.sender, address(this)) >= amount,\n                \"Allowance is not enough\"\n            );\n            uint balanceBefore = _fromToken.balanceOf(address(this));\n            _fromToken.safeTransferFrom(msg.sender, address(this), amount);\n            //confirmed amount\n            amount = _fromToken.balanceOf(address(this)).sub(balanceBefore);\n        } else {\n            //convert to WETH\n            IWETH(WETH_ADDRESS).deposit{value: msg.value}();\n            amount = msg.value;\n            fromToken = WETH_ADDRESS;\n        }\n        \n        require(amount > 0, 'Mint does not make sense');\n        \n        emit LogMintTaken(amount);\n\n        amount = amount.sub(topUpChi(fromToken));\n\n        if (votedExtPool != address(0)) {\n            IExternalPool extPool = IExternalPool(votedExtPool);\n            address toToken = extPool.enterToken();\n\n            uint256 returnAmount = swap(\n                fromToken,\n                toToken,\n                amount,\n                Exchange.UNI,\n                false\n            );\n            IERC20 _toToken = IERC20(toToken);\n            \n            // we rebase before depositing token to pool as we dont want to count it yet\n            uint256 value = getTotalValue().add(1);\n            _rebase(value);\n\n            _toToken.safeTransfer(votedExtPool, returnAmount);\n\n            extPool.addPosition();\n            \n            // convert return amount to USDT (denominateTo)\n            (uint256 toMint, ) = quote(\n                toToken,\n                denominateTo,\n                returnAmount,\n                exchange\n            );\n\n            // mint that amount to sender\n            ISFToken(SFToken).mint(msg.sender, toMint);\n        } else if (votedUniPool != address(0)) {\n            revert(\"not yet implemented\");\n        }\n    }\n\n    function burn(address toToken, uint256 amount) external discountCHI {\n        if (votedExtPool != address(0)) {\n            ISFToken _SFToken = ISFToken(SFToken);\n            // get latest token value\n            \n            uint256 value = getTotalValue().add(1);\n            _rebase(value);\n            \n            // limit by existing balance\n            uint256 senderBalance = _SFToken.balanceOf(msg.sender);\n            if (senderBalance < amount) {\n                amount = senderBalance;\n            }\n\n            require(amount > 0, \"Not enough balance\");\n\n            IExternalPool extPool = IExternalPool(votedExtPool);\n            address poolToken = extPool.enterToken();\n\n            //get quote from sf token to pool token\n            // how much pool token (DAI) is needed to make this amount of denominateTo (USDT)\n            uint256 poolTokenWithdraw = reverseQuote(\n                poolToken,\n                denominateTo,\n                amount\n            );\n\n            require(\n                extPool.getTokenStaked() >= poolTokenWithdraw,\n                \"Not enough voted pool value to withdraw\"\n            );\n\n            uint256 feeTaken = poolTokenWithdraw.mul(votedFee).div(10000);\n            emit LogFeeTaken(feeTaken);\n            //discount with fee\n            //leave fee in the pool\n            poolTokenWithdraw = poolTokenWithdraw.sub(feeTaken);\n\n            //pull out pool tokens\n            extPool.exitPosition(poolTokenWithdraw);\n            //get them out from the pool here\n            uint256 returnPoolTokenAmount = extPool.transferTokenTo(\n                poolToken,\n                address(this),\n                poolTokenWithdraw\n            );\n            // topup with CHi\n            returnPoolTokenAmount = returnPoolTokenAmount.sub(\n                topUpChi(poolToken)\n            );\n            _SFToken.burn(msg.sender, amount);\n\n            if (toToken == address(0)) {\n                toToken = WETH_ADDRESS;\n            }\n\n            uint256 returnAmount = swap(\n                poolToken,\n                toToken,\n                returnPoolTokenAmount,\n                Exchange.UNI,\n                true\n            );\n\n            if (toToken != WETH_ADDRESS) {\n                IERC20(toToken).safeTransfer(msg.sender, returnAmount);\n            } else {\n                IWETH(WETH_ADDRESS).withdraw(returnAmount);\n                \n                //address whom = msg.sender;\n                //whom.sendValue(returnAmount);\n                msg.sender.transfer(returnAmount);\n            }\n\n            emit LogBurnGiven(returnAmount);\n        } else if (votedUniPool != address(0)) {\n            revert(\"not yet implemented\");\n        }\n    }\n\n    function _rebase(uint256 value) internal {\n        ISFToken SF = ISFToken(SFToken);\n        SF.rebase(value);\n    }\n    \n    function rebase() public discountCHI onlyValueManager {\n        uint256 value = getTotalValue().add(1);\n        _rebase(value);\n    }\n\n    function rebase(uint256 value) external onlyValueManager {\n        _rebase(value);\n    }\n\n    function getUniBalance(IUniswapV2Pair uniPool)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 uniBalance;\n        try uniPool.balanceOf(holderAddress) returns (uint256 uniBalanceHolder)\n        {\n            uniBalance = uniBalanceHolder.add(uniPool.balanceOf(address(this)));\n        } catch { }\n        \n        return uniBalance;\n    }\n\n    function getHolderPc(IUniswapV2Pair uniPool) public view returns (uint256) {\n        uint256 holderPc;\n        try uniPool.totalSupply() returns (uint256 uniTotalSupply)\n        {\n            holderPc = (getUniBalance(uniPool).mul(fpNumbers)).div(uniTotalSupply);    \n        } catch {}\n        \n        //uint256 uniTotalSupply = uniPool.totalSupply();\n        return holderPc;\n    }\n\n    function getUniReserve(IUniswapV2Pair uniPool)\n        public\n        view\n        returns (uint256, uint256)\n    {\n        uint256 holderPc = getHolderPc(uniPool);\n\n        uint256 myreserve0;\n        uint256 myreserve1;\n\n        try uniPool.getReserves() returns (uint112 reserve0, uint112 reserve1, uint32) {\n        \n            myreserve0 = (uint256(reserve0).mul(holderPc)).div(fpNumbers);\n            myreserve1 = (uint256(reserve1).mul(holderPc)).div(fpNumbers);\n    \n        } catch {}\n        \n         //= uniPool.getReserves();\n\n        \n        return (myreserve0, myreserve1);\n    }\n\n    function getExternalValue() public view returns (uint256) {\n        uint256 totalReserve = 0;\n        for (uint256 j = 0; j < extLen; j++) {\n            address extAddress = externalPools[j];\n            if (extAddress != address(0)) {\n                IExternalPool externalPool = IExternalPool(extAddress);\n\n                address poolToken = externalPool.enterToken();\n                // changing quotes to this contract instead\n                (uint256 addValue, ) = quote(poolToken, denominateTo, externalPool.getPoolValue(poolToken), exchange);\n                totalReserve = totalReserve.add(addValue);\n            }\n        }\n        return totalReserve;\n    }\n\n    function getDenominatedValue(IUniswapV2Pair uniPool)\n        public\n        view\n        returns (uint256, uint256)\n    {\n        (uint256 myreserve0, uint256 myreserve1) = getUniReserve(uniPool);\n\n        address token0 = uniPool.token0();\n        address token1 = uniPool.token1();\n\n        if (token0 != denominateTo) {\n            //get amount and convert to denominate addr;\n            if (token0 != SFToken) {\n                (myreserve0, ) = quote(uniPool.token0(), denominateTo, myreserve0, exchange);\n                \n            } else {\n                myreserve0 = 0;\n            }\n        }\n\n        if (uniPool.token1() != denominateTo) {\n            //get amount and convert to denominate addr;\n            if (token1 != SFToken) {\n                (myreserve1, ) = quote(uniPool.token1(), denominateTo, myreserve1, exchange);\n            } else {\n                myreserve1 = 0;\n            }\n        }\n        return (myreserve0, myreserve1);\n    }\n\n    function getTotalValue() public view returns (uint256) {\n        uint256 totalReserve = 0;\n\n        for (uint256 i = 0; i < uniLen; i++) {\n            address uniAddress = uniPools[i];\n            \n            if (uniAddress != address(0)) {\n                IUniswapV2Pair uniPool = IUniswapV2Pair(uniAddress);\n                (uint256 myreserve0, uint256 myreserve1) = getDenominatedValue(\n                    uniPool\n                );\n\n                totalReserve = totalReserve.add(myreserve0);\n                totalReserve = totalReserve.add(myreserve1);\n            }\n        }\n\n        totalReserve = totalReserve.add(getExternalValue());\n\n        return totalReserve;\n    }\n\n    function addUni(address pool) public onlyVoter {\n        uniPools[uniLen] = pool;\n        uniLen++;\n    }\n\n    function delUni(uint256 i) external onlyVoter {\n        uniPools[i] = address(0);\n    }\n\n    function addExt(address pool) public onlyVoter {\n        externalPools[extLen] = pool;\n        extLen++;\n    }\n\n    function delExt(uint256 i) external onlyVoter {\n        externalPools[i] = address(0);\n    }\n    \n    function setUniLen(uint256 i) external onlyVoter {\n        uniLen = i;\n    }\n    \n    function setExtLen(uint256 i) external onlyVoter {\n        extLen = i;\n    }\n}\n"
    },
    "localhost/contracts/XChanger.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"./access/Ownable.sol\";\nimport \"./interfaces/IOneSplit.sol\";\nimport \"./utils/SafeERC20.sol\";\nimport \"./interfaces/IUniRouter.sol\";\nimport \"./interfaces/ICurve.sol\";\n\ncontract XChanger is Ownable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    using SafeMath for int128;\n    \n    //address public constant oneSplitAddress = 0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E; #1split.eth\n    address public constant CURVE_ADDRESS = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;  // 3-pool DAI/USDC/USDT\n    address public constant ONESPLIT_ADDRESS = 0x50FDA034C0Ce7a8f7EFDAebDA7Aa7cA21CC1267e; //1proto.eth\n    address public constant UNIROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    \n    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address public constant USDC_ADDRESS = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address public constant USDT_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n    \n    \n    \n    mapping (address => int128) public curveIndex;\n    \n    //address constant SPLIT_ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    enum Exchange {UNI, ONESPLIT}\n    \n    Exchange public exchange;\n    \n    uint private constant slippageFee = 100; //100 = 1% slippage\n    uint private constant parts = 1;  // oneSplit parts, 1-100 affects gas usage\n\n    //0x6B175474E89094C44Da98b954EedeAC495271d0F DAI\n    //\n    //0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48 USDC\n    //\n    //  30000000000000000000\n    //  30000000\n\n    event NoDirectQuote(address, address);\n    event NoWETHQuote(address, address);\n    \n    bool private initialized;\n    \n\n    function init() virtual public {\n        require(!initialized, \"Is already been initialized\");\n        initialized = true;\n        exchange = Exchange.UNI;\n        Ownable.initialize(); // Do not forget this call!\n        \n        curveIndex[DAI_ADDRESS] = 1; // actual index is 1 less\n        curveIndex[USDC_ADDRESS] = 2;\n        curveIndex[USDT_ADDRESS] = 3;\n    }\n        \n    \n    function setExchange(Exchange _exchange) external onlyOwner {\n        exchange = _exchange;\n    }\n    \n        // to withdraw token from the contract\n    function transferTokenBack(address TokenAddress)\n        external\n        onlyOwner\n        returns (uint256)\n    {\n        IERC20 Token = IERC20(TokenAddress);\n        uint256 balance = Token.balanceOf(address(this));\n        if (balance > 0) {\n            Token.safeTransfer(msg.sender, balance);\n        }\n\n        uint256 ETHbalance = address(this).balance;\n        if (ETHbalance > 0) {\n            msg.sender.transfer(ETHbalance);\n        }\n\n        return balance;\n    }\n    \n    function swapSplit(\n        address fromToken,\n        address toToken,\n        uint256 amount,\n        uint256 flags,\n        bool slipProtect\n    ) internal returns (uint256) {\n        IERC20 _fromToken = IERC20(fromToken);\n        IERC20 _toToken = IERC20(toToken);\n        IOneSplit oneSplit = IOneSplit(ONESPLIT_ADDRESS);\n        (uint256 returnAmount0, uint256[] memory distribution) = oneSplit\n            .getExpectedReturn(_fromToken, IERC20(toToken), amount, parts, flags);\n\n        require(returnAmount0 > 0, \"ISplit has nothing to return\");\n\n        if (_fromToken.allowance(address(this), ONESPLIT_ADDRESS) != uint256(-1)) {\n            _fromToken.safeApprove(ONESPLIT_ADDRESS, uint256(-1));\n        }\n\n        uint256 returnAmount = oneSplit.swap(\n            _fromToken,\n            _toToken,\n            amount,\n            parts,\n            distribution,\n            flags\n        );\n        \n        if (slipProtect) {\n            uint256 feeSlippage = returnAmount.mul(slippageFee).div(10000);    \n            uint minAmount = returnAmount.sub(feeSlippage);\n            require (_toToken.balanceOf(address(this)) > minAmount, 'ISplit slippage is too high');\n        } \n\n        return returnAmount;\n    }\n\n    function getCurveIndex(address token) internal view returns (int128) {\n        // to avoid 'stack too deep' compiler issue\n        return curveIndex[token]-1;\n    }\n    \n    function swapOther(\n        address fromToken,\n        address toToken,\n        uint256 amount,\n        bool slipProtect\n    ) internal returns (uint256) {\n        //slippage protection 1% if enabled\n        uint minAmount = 0;\n\n        (uint256 returnAmount, address[] memory path) = quote(\n            fromToken,\n            toToken,\n            amount,\n            Exchange.UNI\n        );\n        \n        if (slipProtect) {\n                uint256 feeSlippage = returnAmount.mul(slippageFee).div(10000);    \n                minAmount = returnAmount.sub(feeSlippage);\n            } \n        \n        require(returnAmount > 0, \"Quote is wrong\");\n        \n        IERC20 _fromToken = IERC20(fromToken);\n        \n        if (path.length == 0) {\n            //using curve \n            \n            ICurveFiCurve curve = ICurveFiCurve(CURVE_ADDRESS);\n            \n            if (_fromToken.allowance(address(this), CURVE_ADDRESS) != uint256(-1)) {\n                _fromToken.safeApprove(CURVE_ADDRESS, uint256(-1));\n            }\n            \n            IERC20 _toToken = IERC20(toToken);\n            \n            uint startBalance = _toToken.balanceOf(address(this));\n            \n            // actual index is -1\n            curve.exchange(getCurveIndex(fromToken), getCurveIndex(toToken), amount, minAmount);\n            \n            return _toToken.balanceOf(address(this)) - startBalance;\n        } else {\n            // using Uni\n            IUniRouter UniswapV2Router02 = IUniRouter(UNIROUTER_ADDRESS);\n\n            if (_fromToken.allowance(address(this), UNIROUTER_ADDRESS) != uint256(-1)) {\n                _fromToken.safeApprove(UNIROUTER_ADDRESS, uint256(-1));\n            }\n            \n            uint256[] memory amounts = UniswapV2Router02.swapExactTokensForTokens(\n                amount,\n                minAmount,\n                path,\n                address(this),\n                block.timestamp);\n            \n            return amounts[path.length - 1];\n        }\n    }\n\n    function _getOneSplitExpReturn(\n        address fromToken,\n        address toToken,\n        uint256 amount\n    ) internal view returns (uint256) {\n        IERC20 fromIERC20 = IERC20(fromToken);\n        IERC20 toIERC20 = IERC20(toToken);\n        \n        IOneSplit oneSplit = IOneSplit(ONESPLIT_ADDRESS);\n        (uint256 returnAmount0, ) = oneSplit.getExpectedReturn(fromIERC20, toIERC20, amount, parts, 0x800000000000);\n\n        return returnAmount0;\n    }\n\n    function swap(\n        address fromToken,\n        address toToken,\n        uint256 amount,\n        Exchange useExchange,\n        bool slipProtect\n    ) public payable returns (uint256) {\n        if (fromToken == toToken) {\n            return amount; // nothing to change\n        }\n        uint256 result;\n        if (useExchange == Exchange.ONESPLIT) {\n            result = swapSplit(fromToken, toToken, amount, 0, slipProtect);\n        } else {\n            result = swapOther(fromToken, toToken, amount, slipProtect);\n        }\n        return result;\n    }\n\n    function quote(\n        address fromToken,\n        address toToken,\n        uint256 amount,\n        Exchange useExchange\n    ) public view returns (uint256, address[] memory) {\n        uint256 returnAmount;\n        address[] memory returnPath;\n\n        if (fromToken == toToken) {\n            //nothing to change\n            return (amount, returnPath);\n        }\n\n        if (useExchange == Exchange.ONESPLIT) {\n            returnAmount = _getOneSplitExpReturn(\n                fromToken,\n                toToken,\n                amount\n            );\n            return (returnAmount, returnPath);\n        } else {\n            // try n check curve first\n            uint256 returnCurve;\n            if (curveIndex[fromToken] > 0 && curveIndex[toToken] > 0)\n            {\n                ICurveFiCurve curve = ICurveFiCurve(CURVE_ADDRESS);\n                // actual index is -1 lower\n                returnCurve = curve.get_dy_underlying(getCurveIndex(fromToken), getCurveIndex(toToken), amount);\n            }\n            \n            address[] memory path = new address[](2);\n            path[0] = fromToken;\n            path[1] = toToken;\n\n            IUniRouter UniswapV2Router02 = IUniRouter(UNIROUTER_ADDRESS);\n\n            try UniswapV2Router02.getAmountsOut(amount, path) returns (\n                uint256[] memory amounts\n            ) {\n                if (amounts[1] > returnAmount) {\n                    returnAmount = amounts[1];\n                    returnPath = path;\n                }\n            } catch {}\n\n            if (toToken != WETH_ADDRESS) {\n                address[] memory pathWETH = new address[](3);\n                pathWETH[0] = fromToken;\n                pathWETH[1] = WETH_ADDRESS;\n                pathWETH[2] = toToken;\n\n                try UniswapV2Router02.getAmountsOut(amount, pathWETH) returns (\n                    uint256[] memory amountsWETH\n                ) {\n                    if (amountsWETH[2] > returnAmount) {\n                        returnAmount = amountsWETH[2];\n                        returnPath = pathWETH;\n                    }\n                } catch {}\n            }\n\n            if (returnCurve > returnAmount) {\n                return (returnCurve, new address[](0));\n            } else {\n                return (returnAmount, returnPath);\n            }\n        }\n    }\n\n    function reverseQuote(\n        address fromToken,\n        address toToken,\n        uint256 amount\n    ) public view returns (uint256) {\n        if (fromToken == toToken) {\n            //nothing to change\n            return amount;\n        }\n\n        address[] memory path = new address[](2);\n        path[0] = fromToken;\n        path[1] = toToken;\n\n        IUniRouter UniswapV2Router02 = IUniRouter(UNIROUTER_ADDRESS);\n\n        uint256 returnAmount = uint256(-1);\n        try UniswapV2Router02.getAmountsIn(amount, path) returns (\n            uint256[] memory amounts\n        ) {\n            if (amounts[0] < returnAmount) {\n                returnAmount = amounts[0];\n            }\n        } catch {}\n\n        if (toToken != WETH_ADDRESS) {\n            address[] memory pathWETH = new address[](3);\n            pathWETH[0] = fromToken;\n            pathWETH[1] = WETH_ADDRESS;\n            pathWETH[2] = toToken;\n\n            try UniswapV2Router02.getAmountsIn(amount, pathWETH) returns (\n                uint256[] memory amountsWETH\n            ) {\n                if (amountsWETH[0] < returnAmount) {\n                    returnAmount = amountsWETH[0];\n                }\n            } catch {}\n        }\n\n        return returnAmount;\n    }\n}\n"
    },
    "localhost/contracts/access/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"
    },
    "localhost/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"../access/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function initialize() public {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"
    },
    "localhost/contracts/interfaces/ICHI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ninterface ICHI {\n    function freeFromUpTo(address from, uint256 value)\n        external\n        returns (uint256);\n\n    function freeUpTo(uint256 value) external returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function mint(uint256 value) external;\n}\n"
    },
    "localhost/contracts/interfaces/ICurve.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nabstract contract ICurveFiCurve {\n    \n    function exchange (\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external virtual;\n\n    function get_dy_underlying(int128 i, int128 j, uint256 dx)\n        external virtual view returns (uint256 out);\n        \n    function get_dy(int128 i, int128 j, uint256 dx)\n        external virtual view\n        returns (uint256 out);\n\n}"
    },
    "localhost/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"
    },
    "localhost/contracts/interfaces/IExternalPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nabstract contract IExternalPool {\n    address public enterToken;\n\n    function getPoolValue(address denominator)\n        external\n        virtual\n        view\n        returns (uint256);\n\n    function getTokenStaked() external virtual view returns (uint256);\n\n    function addPosition() external virtual returns (uint256);\n\n    function exitPosition(uint256 amount) external virtual;\n\n    function transferTokenTo(\n        address TokenAddress,\n        address recipient,\n        uint256 amount\n    ) external virtual returns (uint256);\n}\n"
    },
    "localhost/contracts/interfaces/IOneSplit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\n//import \"openzeppelin-eth/contracts/token/ERC20/ERC20Detailed.sol\";\nimport \"./IERC20.sol\";\n\ninterface IOneSplit {\n    function getExpectedReturn(\n        IERC20 fromToken,\n        IERC20 destToken,\n        //address fromToken,\n        //address destToken,\n        uint256 amount,\n        uint256 parts,\n        uint256 flags // See constants in IOneSplit.sol\n    )\n        external\n        view\n        returns (uint256 returnAmount, uint256[] memory distribution);\n\n    function getExpectedReturnWithGas(\n        IERC20 fromToken,\n        IERC20 destToken,\n        uint256 amount,\n        uint256 parts,\n        uint256 flags, // See constants in IOneSplit.sol\n        uint256 destTokenEthPriceTimesGasPrice\n    )\n        external\n        view\n        returns(\n            uint256 returnAmount,\n            uint256 estimateGasAmount,\n            uint256[] memory distribution\n        );\n        \n    function swap(\n        IERC20 fromToken,\n        IERC20 destToken,\n        uint256 amount,\n        uint256 minReturn,\n        uint256[] calldata distribution,\n        uint256 flags\n    ) external payable returns (uint256 returnAmount);\n}\n"
    },
    "localhost/contracts/interfaces/ISFToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ninterface ISFToken {\n    function rebase(uint256 totalSupply) external;\n\n    function mint(address account, uint256 amount) external;\n\n    function burn(address account, uint256 amount) external;\n\n    function balanceOf(address account) external view returns (uint256);\n}\n"
    },
    "localhost/contracts/interfaces/IUniRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ninterface IUniRouter {\n    function swapExactTokensForTokens(\n      uint amountIn,\n      uint amountOutMin,\n      address[] calldata path,\n      address to,\n      uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n      external\n      payable\n      returns (uint[] memory amounts);\n\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n    \n}"
    },
    "localhost/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ninterface IUniswapV2Pair {\n    //event Approval(address indexed owner, address indexed spender, uint value);\n    //event Transfer(address indexed from, address indexed to, uint value);\n\n    //function name() external pure returns (string memory);\n    //function symbol() external pure returns (string memory);\n    //function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    //function allowance(address owner, address spender) external view returns (uint);\n\n    //function approve(address spender, uint value) external returns (bool);\n    //function transfer(address to, uint value) external returns (bool);\n    //function transferFrom(address from, address to, uint value) external returns (bool);\n\n    //function DOMAIN_SEPARATOR() external view returns (bytes32);\n    //function PERMIT_TYPEHASH() external pure returns (bytes32);\n    //function nonces(address owner) external view returns (uint);\n\n    //function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    //event Mint(address indexed sender, uint amount0, uint amount1);\n    //event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    /*event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    */\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n    /*\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n    */\n}\n"
    },
    "localhost/contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function withdraw(uint wad) external;\n}"
    },
    "localhost/contracts/utils/SafeERC20.sol": {
      "content": "\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\nimport \"../interfaces/IERC20.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\n\n\npragma solidity ^0.6.0;\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    }
  }
}