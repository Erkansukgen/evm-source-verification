{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "PairAddressesChecker.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\"\r\npragma solidity ^0.8.1;\r\n\r\ninterface IUniswapV2Factory {\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n}\r\n\r\ncontract PairAddressesChecker {\r\n    receive() external payable {\r\n        revert(\"PairAddressChecker does not accept payments\");\r\n    }\r\n    \r\n    function getPairsAddressesLength(address factory)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 length = IUniswapV2Factory(factory).allPairsLength();\r\n\r\n        return length;\r\n    }\r\n\r\n    function getPairsAddresses(address factory, uint256 start, uint256 end)\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        uint256 length = IUniswapV2Factory(factory).allPairsLength();\r\n        require(start<end, \"Start index must be smaller than End index\");\r\n        if(end<length)\r\n            length= end;\r\n        require(start<length, \"Start index must be smaller than Pairs Array length\");\r\n        address[] memory pairsAddresses = new address[](length-start);\r\n        for (uint256 i = start; i < length; i++) {\r\n            pairsAddresses[i-start] = IUniswapV2Factory(factory).allPairs(i);\r\n        }\r\n\r\n        return pairsAddresses;\r\n    }\r\n}\r\n"
    }
  }
}