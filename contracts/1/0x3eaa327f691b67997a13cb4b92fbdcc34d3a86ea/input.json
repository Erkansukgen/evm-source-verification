{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/witness.sol":{"content":"pragma solidity ^0.6.8;\n\npragma experimental ABIEncoderV2;\ncontract Witness {\n    \n    struct UploadEvent {\n        string prefHash;\n        string[] refHash;\n        string id;\n        string desc;\n        string data;\n    }\n    \n    UploadEvent[] public uploads;\n    \n    struct WitnessEvent {\n        string hash;\n        string pkHash;\n        string sig;\n    }\n    \n    WitnessEvent[] public witnesses;\n    \n    event onUpload(string prefHash, string[] refHash, string id, string desc, string data);\n    event onWitness(string hash, string pkHash, string sig);\n   \n    function upload(string memory prefHash, string[] memory refHash, string memory id, string memory desc, string memory data) public {\n        require(bytes(prefHash).length > 0);\n        require(bytes(id).length > 0);\n        require(bytes(desc).length > 0);\n        require(bytes(data).length > 0);\n        \n        uploads.push(UploadEvent(prefHash, refHash, id, desc, data));\n        \n        emit onUpload(prefHash, refHash, id, desc, data);\n    }\n    \n    function witness(string memory hash, string memory pkHash, string memory sig) public {\n        require(bytes(hash).length > 0);\n        require(bytes(pkHash).length > 0);\n        require(bytes(sig).length > 0);\n        \n        witnesses.push(WitnessEvent(hash, pkHash, sig));\n        \n        emit onWitness(hash, pkHash, sig);\n    }\n}"}}}