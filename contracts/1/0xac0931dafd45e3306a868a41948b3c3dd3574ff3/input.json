{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"KiptyGov.sol":{"content":"// File: node_modules\\@openzeppelin\\contracts\\utils\\Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\KriptyGob.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\ncontract KriptyGob is Ownable {\r\n\r\n    string public constant name = \"Kripty Governance Contract\";\r\n\r\n    function supportShortVotes() public pure returns (uint) { return 10000000; }\r\n\r\n    function proposalShortThreshold() public pure returns (uint) { return 500000; }\r\n\r\n    function votingDelay() public pure returns (uint) { return 86400; } //1 days in sec\r\n    function votingPeriod() public pure returns (uint) { return 259200; } //3 days in sec\r\n\r\n    KriptyInterface public Kripty;\r\n\r\n    uint public proposalCount;\r\n\r\n    struct Proposal {\r\n        uint id;\r\n        address proposer;\r\n        uint startDate;\r\n        uint endDate;\r\n        uint proVotes;\r\n        uint againsVotes;\r\n        bool canceled;\r\n        bool executed;\r\n        string description;\r\n        mapping (address => Receipt) receipts;\r\n        address[] keys;\r\n    }\r\n\r\n    struct Receipt {\r\n        bool hasVoted;\r\n        bool proVote;\r\n        uint votes;\r\n    }\r\n\r\n    enum ProposalState {\r\n        Pending,\r\n        Active,\r\n        Canceled,\r\n        Defeated,\r\n        Succeeded,\r\n        Expired,\r\n        Executed\r\n    }\r\n\r\n    mapping (uint => Proposal) public proposals;\r\n    mapping (address => uint) public lastestProposalIds;\r\n\r\n    event ProposalCreated(uint id, address proposer, uint startBlock, uint endBlock, string description);\r\n    event Vote(address voter, uint proposalId, bool proVote, uint votes);\r\n    event ProposalCanceled(uint id);\r\n    event ProposalExecuted(uint id);\r\n\r\n    constructor(address kripty_) public {\r\n        Kripty = KriptyInterface(kripty_);\r\n    }\r\n\r\n    function propose(string memory description_) public returns (uint) {\r\n        require(Kripty.balanceOf(msg.sender) >= proposalShortThreshold(), \"Proposer votes below proposal threshold\");\r\n\r\n        uint lastestProposalId = lastestProposalIds[msg.sender];\r\n        if (lastestProposalId != 0) {\r\n            ProposalState proposalState = state(lastestProposalId);\r\n            require(proposalState != ProposalState.Active, \"Found an active proposal from you\");\r\n            require(proposalState != ProposalState.Pending, \"Found a pending proposal from you\");\r\n        }\r\n        \r\n        uint startDate = block.timestamp + votingDelay();\r\n        uint endDate = startDate + votingPeriod();\r\n        proposalCount++;\r\n\r\n        proposals[proposalCount].id = proposalCount;\r\n        proposals[proposalCount].proposer = msg.sender;\r\n        proposals[proposalCount].startDate = startDate;\r\n        proposals[proposalCount].endDate = endDate;\r\n        proposals[proposalCount].proVotes = 0;\r\n        proposals[proposalCount].againsVotes = 0;\r\n        proposals[proposalCount].canceled = false;\r\n        proposals[proposalCount].executed = false;\r\n        proposals[proposalCount].description = description_;\r\n\r\n        lastestProposalIds[proposals[proposalCount].proposer] = proposals[proposalCount].id;\r\n        Kripty.burn(msg.sender, proposalShortThreshold());\r\n\r\n        emit ProposalCreated(proposals[proposalCount].id, msg.sender, startDate, endDate, description_);\r\n        return proposals[proposalCount].id;\r\n    }\r\n\r\n    function execute(uint proposalId) public payable onlyOwner() {\r\n        require(state(proposalId) != ProposalState.Defeated || state(proposalId) != ProposalState.Canceled, \"Votes below to aprove proposal\");\r\n        Proposal storage proposal = proposals[proposalId];\r\n\r\n        proposal.executed = true;\r\n\r\n        for(uint i = 0; i < proposal.keys.length ; i++){\r\n            Kripty.freezeAccount(proposal.keys[i] , false);\r\n        }\r\n\r\n        emit ProposalExecuted(proposalId);\r\n    }\r\n\r\n    function cancel(uint proposalId) public onlyOwner() {\r\n        require(state(proposalId) != ProposalState.Executed || state(proposalId) != ProposalState.Succeeded, \"The proposal has been executed\");\r\n\r\n        Proposal storage proposal = proposals[proposalId];\r\n        proposal.canceled = true;\r\n\r\n        for(uint i = 0; i < proposal.keys.length; i++){\r\n            Kripty.freezeAccount(proposal.keys[i] , false);\r\n        }\r\n\r\n        Kripty.mint(proposal.proposer , (proposalShortThreshold()*90)/100);\r\n\r\n        emit ProposalCanceled(proposalId);\r\n    }\r\n\r\n    function state(uint proposalId) public view returns (ProposalState) {\r\n        require(proposalCount >= proposalId && proposalId > 0, \"invalid proposal id\");\r\n        Proposal storage proposal = proposals[proposalId];\r\n        if (proposal.canceled) {\r\n            return ProposalState.Canceled;\r\n        } else if (block.timestamp <= proposal.startDate) {\r\n            return ProposalState.Pending;\r\n        } else if (block.number <= proposal.endDate) {\r\n            return ProposalState.Active;\r\n        } else if (proposal.proVotes <= proposal.againsVotes || proposal.proVotes < supportShortVotes()) {\r\n            return ProposalState.Defeated;\r\n        } else if (proposal.executed) {\r\n            return ProposalState.Executed;\r\n        } else if (block.timestamp >= proposal.endDate){\r\n            return ProposalState.Expired;\r\n        } else {\r\n            return ProposalState.Succeeded;\r\n        }\r\n    }\r\n\r\n    function vote(address voter, uint proposalId, bool support) public {\r\n        require(state(proposalId) == ProposalState.Active || state(proposalId) == ProposalState.Pending, \"Voting is closed\");\r\n        Proposal storage proposal = proposals[proposalId];\r\n        Receipt storage receipt = proposal.receipts[voter];\r\n        require(receipt.hasVoted == false , \"voter already voted\");\r\n        \r\n        uint votes = Kripty.balanceOf(voter);\r\n\r\n        if (support) {\r\n            proposal.proVotes += votes;\r\n        } else {\r\n            proposal.againsVotes += votes;\r\n        }\r\n        proposal.keys.push(voter);\r\n\r\n        receipt.hasVoted = true;\r\n        receipt.proVote = support;\r\n        receipt.votes = votes;\r\n\r\n        Kripty.freezeAccount(voter, true);\r\n\r\n        emit Vote(voter, proposalId, support, votes);\r\n\r\n    }\r\n \r\n}\r\n\r\ninterface KriptyInterface {\r\n        function balanceOf(address account) external view returns (uint);\r\n        function freezeAccount(address target, bool freeze) external;\r\n        function burn(address account, uint amount) external;\r\n        function mint(address account, uint amount) external;\r\n}\r\n"}}}