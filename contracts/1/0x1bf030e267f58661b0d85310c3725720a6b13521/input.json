{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "localhost/DTentryV2.sol": {
      "content": "pragma solidity >=0.5.0;\r\n\r\nimport \"./openzeppelin-contracts-3.0.1/access/Ownable.sol\";\r\nimport \"./openzeppelin-contracts-3.0.1/token/ERC20/IERC20.sol\";\r\nimport \"./openzeppelin-contracts-3.0.1/math/SafeMath.sol\";\r\n\r\nimport \"./IUniswapV2Router01.sol\";\r\nimport \"./IDDT.sol\";\r\n\r\ncontract DTentryV2 is Ownable{\r\n    using SafeMath for uint;\r\n    \r\n    uint256[] public halfvalue;\r\n    \r\n    IDDT public ddt;\r\n    IERC20 public dai;\r\n    IERC20 public usdc;\r\n    IUniswapV2Router01 public router;\r\n    \r\n    struct tokenspath {\r\n        address[] tokenpath;\r\n    }\r\n    mapping(string => tokenspath) mtokenspath;\r\n\r\n    constructor(address daiaddr,address usdcaddr,address ddtaddr,address routeraddr) public {\r\n        setdai(daiaddr);\r\n        setusdc(usdcaddr);\r\n        setddt(ddtaddr);\r\n        setrouter(routeraddr);\r\n        setwethdai();\r\n        setwethusdc();\r\n        setdaiweth();\r\n        setusdcweth();\r\n        setwethddt();\r\n        setdaiddt();\r\n        setusdcddt();\r\n        \r\n        halfvalue.push(10*10**26/2);\r\n    }\r\n    \r\n    function setddt(address ddtaddress) public onlyOwner {\r\n        ddt = IDDT(ddtaddress);\r\n    }\r\n \r\n    function setdai(address daiaddr) public onlyOwner {\r\n        dai = IERC20(daiaddr);\r\n    }\r\n    function setusdc(address usdcaddr) public onlyOwner {\r\n        usdc = IERC20(usdcaddr);\r\n    }\r\n\r\n    function setrouter(address routeraddr) public onlyOwner {\r\n        router = IUniswapV2Router01(routeraddr);\r\n        dai.approve(routeraddr,10 * 10 ** 34);\r\n        usdc.approve(routeraddr,10 * 10 ** 22);\r\n    }\r\n    \r\n    function setwethdai() public onlyOwner {\r\n        mtokenspath[\"wethdai\"].tokenpath = [router.WETH(),address(dai)];\r\n    }\r\n    function setwethusdc() public onlyOwner {\r\n        mtokenspath[\"wethusdc\"].tokenpath = [router.WETH(),address(usdc)];\r\n    }\r\n    function setdaiweth() public onlyOwner {\r\n        mtokenspath[\"daiweth\"].tokenpath = [address(dai),router.WETH()];\r\n    }\r\n    function setusdcweth() public onlyOwner {\r\n        mtokenspath[\"usdcweth\"].tokenpath = [address(usdc),router.WETH()];\r\n    }\r\n    function setwethddt() public onlyOwner {\r\n        mtokenspath[\"wethddt\"].tokenpath = [router.WETH(),address(ddt)];\r\n    }\r\n    function setdaiddt() public onlyOwner {\r\n        mtokenspath[\"daiddt\"].tokenpath = [address(dai),address(ddt)];\r\n    }\r\n    function setusdcddt() public onlyOwner {\r\n        mtokenspath[\"usdcddt\"].tokenpath = [address(usdc),address(ddt)];\r\n    }\r\n    \r\n\r\n    \r\n    \r\n    function _usehalfvalue() internal returns(uint256) {\r\n        uint256 tsupply = ddt.totalSupply();\r\n        uint256 curvalue = halfvalue[halfvalue.length-1];\r\n        if (curvalue >= 2) {\r\n            if ( tsupply < curvalue) {\r\n                halfvalue.push(curvalue/2);\r\n            }\r\n        \r\n            return halfvalue.length-1;\r\n        }\r\n        return 10*10**26;\r\n        \r\n    }\r\n    function _makeRandom(uint256 rint) internal returns(uint256) {\r\n        return uint256(keccak256(abi.encodePacked(rint,now,block.difficulty,msg.sender))) % 100;\r\n    }\r\n\r\n    \r\n    \r\n    function ethtodai(uint256 slap,address revicer) payable public {\r\n        require(slap >= 0 && slap <= 10, 'slap must >= 0 and <= 10.');\r\n        require(msg.value > 0 ether && msg.value <= 10000 ether, 'ETH value must > 0 ether and <= 10000 ether.');\r\n        uint256[] memory amounts = router.getAmountsOut(msg.value,mtokenspath[\"wethdai\"].tokenpath);\r\n        router.swapExactETHForTokens{value:msg.value}(amounts[1] / 100 * (100 - slap), mtokenspath[\"wethdai\"].tokenpath, revicer, now + 15 minutes);\r\n\r\n    }\r\n    \r\n    function ethtousdc(uint256 slap,address revicer) payable public {\r\n        require(slap >= 0 && slap <= 10, 'slap must >= 0 and <= 10.');\r\n        require(msg.value > 0 ether && msg.value <= 10000 ether, 'ETH value must > 0 ether and <= 10000 ether.');\r\n        uint256[] memory amounts = router.getAmountsOut(msg.value,mtokenspath[\"wethusdc\"].tokenpath);\r\n        router.swapExactETHForTokens{value:msg.value}(amounts[1] / 100 * (100 - slap), mtokenspath[\"wethusdc\"].tokenpath, revicer, now + 15 minutes);\r\n    }\r\n    \r\n     //must approve user's dai erc20 first\r\n    function daitoeth(uint256 amount,uint256 slap,address revicer) public {\r\n        require(slap >= 0 && slap <= 10, 'slap must >= 0 and <= 10.');\r\n        require(amount >= 0.01 * 10 ** 18&&amount <= 1000 * 10 ** 18, 'amount must >= 0.01 dai and <= 1000 dai');\r\n        dai.transferFrom(msg.sender, address(this), amount);\r\n        uint256[] memory amounts = router.getAmountsOut(amount,mtokenspath[\"daiweth\"].tokenpath);\r\n        router.swapExactTokensForETH(amount,amounts[1] / 100 * (100 - slap), mtokenspath[\"daiweth\"].tokenpath, revicer, now + 15 minutes);\r\n        uint256 mamount =  amount/(2**_usehalfvalue());\r\n        if (ddt.balanceOf(address(this)) >= mamount) {\r\n            ddt.approve(revicer, mamount);\r\n            ddt.transfer(revicer, mamount);\r\n        }\r\n    }\r\n      //must approve user's usdc erc20 first\r\n    function usdctoeth(uint256 amount,uint256 slap,address revicer) public {\r\n        require(slap >= 0 && slap <= 10, 'slap must >= 0 and <= 10.');\r\n        require(amount >= 0.01 * 10 ** 6&&amount <= 1000 * 10 ** 6, 'amount must >= 0.01 usdc and <= 1000 usdc');\r\n        usdc.transferFrom(msg.sender, address(this), amount);\r\n        uint256[] memory amounts = router.getAmountsOut(amount,mtokenspath[\"usdcweth\"].tokenpath);\r\n        router.swapExactTokensForETH(amount,amounts[1] / 100 * (100 - slap), mtokenspath[\"usdcweth\"].tokenpath, revicer, now + 15 minutes);\r\n        uint256 mamount =  amount*10**12/(2**_usehalfvalue());\r\n        if (ddt.balanceOf(address(this)) >= mamount) {\r\n            ddt.approve(revicer, mamount);\r\n            ddt.transfer(revicer, mamount);\r\n        }\r\n    }\r\n    \r\n    function ethtoddt(uint256 slap,address revicer) payable public {\r\n        require(slap >= 0 && slap <= 10, 'slap must >= 0 and <= 10.');\r\n        require(msg.value > 0 ether && msg.value <= 10 ether, 'ETH value must > 0 ether and <= 10 ether.');\r\n        uint256[] memory amounts = router.getAmountsOut(msg.value,mtokenspath[\"wethddt\"].tokenpath);\r\n        uint256[] memory boughts = router.swapExactETHForTokens{value:msg.value}(amounts[1] / 100 * (100 - slap), mtokenspath[\"wethddt\"].tokenpath, revicer, now + 15 minutes);\r\n        if (ddt.balanceOf(address(this)) >= boughts[1]) {\r\n            uint256 radio=_makeRandom(boughts[1]);\r\n            ddt.burn(boughts[1]/100*radio);\r\n            ddt.approve(revicer, boughts[1]/100*(100-radio));\r\n            ddt.transfer(revicer, boughts[1]/100*(100-radio));\r\n        }\r\n    }\r\n     //must approve user's dai erc20 first\r\n    function daitoddt(uint256 amount,uint256 slap,address revicer) public {\r\n        require(slap >= 0 && slap <= 10, 'slap must >= 0 and <= 10.');\r\n        require(amount >= 0.01 * 10 ** 18&&amount <= 100 * 10 ** 18, 'amount must >= 0.01 dai and <= 100 dai');\r\n        dai.transferFrom(msg.sender, address(this), amount);\r\n        uint256[] memory amounts = router.getAmountsOut(amount,mtokenspath[\"daiddt\"].tokenpath);\r\n        uint256[] memory boughts = router.swapExactTokensForTokens(amount,amounts[1] / 100 * (100 - slap), mtokenspath[\"daiddt\"].tokenpath, revicer, now + 15 minutes);\r\n        if (ddt.balanceOf(address(this)) >= boughts[1]) {\r\n            uint256 radio=_makeRandom(boughts[1]);\r\n            ddt.burn(boughts[1]/100*radio);\r\n            ddt.approve(revicer, boughts[1]/100*(100-radio));\r\n            ddt.transfer(revicer, boughts[1]/100*(100-radio));\r\n        }\r\n    }\r\n     //must approve user's usdc erc20 first\r\n    function usdctoddt(uint256 amount,uint256 slap,address revicer) public {\r\n        require(slap >= 0 && slap <= 10, 'slap must >= 0 and <= 10.');\r\n        require(amount >= 0.01 * 10 ** 6&&amount <= 100 * 10 ** 6, 'amount must >= 0.01 usdc and <= 100 usdc');\r\n        usdc.transferFrom(msg.sender, address(this), amount);\r\n        uint256[] memory amounts = router.getAmountsOut(amount,mtokenspath[\"usdcddt\"].tokenpath);\r\n        uint256[] memory boughts = router.swapExactTokensForTokens(amount,amounts[1] / 100 * (100 - slap), mtokenspath[\"usdcddt\"].tokenpath, revicer, now + 15 minutes);\r\n        if (ddt.balanceOf(address(this)) >= boughts[1]) {\r\n            uint256 radio=_makeRandom(boughts[1]);\r\n            ddt.burn(boughts[1]/100*radio);\r\n            ddt.approve(revicer, boughts[1]/100*(100-radio));\r\n            ddt.transfer(revicer, boughts[1]/100*(100-radio));\r\n        }\r\n    }\r\n    \r\n    \r\n}"
    },
    "localhost/IDDT.sol": {
      "content": "pragma solidity >=0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IDDT {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    \r\n    function burn(uint256 amount) external;\r\n    \r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"
    },
    "localhost/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n  function factory() external pure returns (address);\r\n  function WETH() external pure returns (address);\r\n\r\n  function addLiquidity(\r\n      address tokenA,\r\n      address tokenB,\r\n      uint amountADesired,\r\n      uint amountBDesired,\r\n      uint amountAMin,\r\n      uint amountBMin,\r\n      address to,\r\n      uint deadline\r\n  ) external returns (uint amountA, uint amountB, uint liquidity);\r\n  function addLiquidityETH(\r\n      address token,\r\n      uint amountTokenDesired,\r\n      uint amountTokenMin,\r\n      uint amountETHMin,\r\n      address to,\r\n      uint deadline\r\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n  function removeLiquidity(\r\n      address tokenA,\r\n      address tokenB,\r\n      uint liquidity,\r\n      uint amountAMin,\r\n      uint amountBMin,\r\n      address to,\r\n      uint deadline\r\n  ) external returns (uint amountA, uint amountB);\r\n  function removeLiquidityETH(\r\n      address token,\r\n      uint liquidity,\r\n      uint amountTokenMin,\r\n      uint amountETHMin,\r\n      address to,\r\n      uint deadline\r\n  ) external returns (uint amountToken, uint amountETH);\r\n  function removeLiquidityWithPermit(\r\n      address tokenA,\r\n      address tokenB,\r\n      uint liquidity,\r\n      uint amountAMin,\r\n      uint amountBMin,\r\n      address to,\r\n      uint deadline,\r\n      bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n  ) external returns (uint amountA, uint amountB);\r\n  function removeLiquidityETHWithPermit(\r\n      address token,\r\n      uint liquidity,\r\n      uint amountTokenMin,\r\n      uint amountETHMin,\r\n      address to,\r\n      uint deadline,\r\n      bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n  ) external returns (uint amountToken, uint amountETH);\r\n  function swapExactTokensForTokens(\r\n      uint amountIn,\r\n      uint amountOutMin,\r\n      address[] calldata path,\r\n      address to,\r\n      uint deadline\r\n  ) external returns (uint[] memory amounts);\r\n  function swapTokensForExactTokens(\r\n      uint amountOut,\r\n      uint amountInMax,\r\n      address[] calldata path,\r\n      address to,\r\n      uint deadline\r\n  ) external returns (uint[] memory amounts);\r\n  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n      external\r\n      payable\r\n      returns (uint[] memory amounts);\r\n  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n      external\r\n      returns (uint[] memory amounts);\r\n  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n      external\r\n      returns (uint[] memory amounts);\r\n  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n      external\r\n      payable\r\n      returns (uint[] memory amounts);\r\n\r\n  function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n  function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n  function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}"
    },
    "localhost/openzeppelin-contracts-3.0.1/GSN/Context.sol": {
      "content": "pragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n"
    },
    "localhost/openzeppelin-contracts-3.0.1/access/Ownable.sol": {
      "content": "pragma solidity ^0.6.0;\r\n\r\nimport \"../GSN/Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"
    },
    "localhost/openzeppelin-contracts-3.0.1/math/SafeMath.sol": {
      "content": "pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"
    },
    "localhost/openzeppelin-contracts-3.0.1/token/ERC20/IERC20.sol": {
      "content": "pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"
    }
  }
}