{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/PiraAdminModifier.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./interfaces/IPiraAdmin.sol\";\r\n\r\ncontract PiraAdminModifier {\r\n    address _piraAdminContractAddress;\r\n\r\n    constructor(address adminContract){\r\n        _piraAdminContractAddress = adminContract;\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        IPiraAdmin adminContract = IPiraAdmin(_piraAdminContractAddress);\r\n        require(adminContract.isAdmin(msg.sender), \"Only admins are allowed to call this method.\");\r\n        _;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IPiraAdmin.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.4;\r\n\r\ninterface IPiraAdmin {\r\n\r\n    function grant(address admin) external returns(bool);\r\n\r\n    function revoke(address admin) external returns(bool);\r\n\r\n    function isAdmin(address admin) external view returns(bool);\r\n\r\n    function getAdmins() external view returns(address[] memory);\r\n}"
    }
  }
}