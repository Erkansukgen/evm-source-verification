{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"ARCToken.sol":{"content":"pragma solidity ^0.4.12;\r\n \r\ncontract IMigrationContract {\r\n    function migrate(address addr, uint256 nas) returns (bool success);\r\n}\r\n \r\n/* taking ideas from FirstBlood token */\r\ncontract SafeMath {\r\n    /* function assert(bool assertion) internal { */\r\n    /*   if (!assertion) { */\r\n    /*     throw; */\r\n    /*   } */\r\n    /* }      // assert no longer needed once solidity is on 0.4.10 */\r\n \r\n \r\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n        uint256 z = x + y;\r\n        assert((z >= x) && (z >= y));\r\n        return z;\r\n    }\r\n \r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n        assert(x >= y);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }\r\n \r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n        uint256 z = x * y;\r\n        assert((x == 0)||(z/x == y));\r\n        return z;\r\n    }\r\n \r\n}\r\n \r\ncontract Token {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n \r\n \r\n/*  ERC 20 token */\r\ncontract StandardToken is Token {\r\n \r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n\t    require(_to != address(0));\r\n\t    require(_value <= balances[msg.sender]);\r\n\r\n\t    balances[msg.sender] -= _value;\r\n\t    balances[_to] += _value;\r\n\t    emit Transfer(msg.sender, _to, _value);\r\n\t    return true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n\t    require(_to != address(0));\r\n\t    require(_value <= balances[_from]);\r\n\t    require(_value <= allowed[_from][msg.sender]);\r\n\r\n\t    balances[_from] -= _value;\r\n\t    balances[_to] += _value;\r\n\t    allowed[_from][msg.sender] -= _value;\r\n\t    emit Transfer(_from, _to, _value);\r\n\t    return true;\r\n\t}\r\n \r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n \r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n \r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n \r\ncontract ARCToken is StandardToken, SafeMath {\r\n \r\n    // metadata\r\n    string  public constant name = \"ARChain\";\r\n    string  public constant symbol = \"ARC\";\r\n    uint256 public constant decimals = 18;\r\n    string  public version = \"1.0\";\r\n \r\n    // contracts\r\n    address public ethFundDeposit;          // deposit address for ETH for Nebulas Team.\r\n    address public newContractAddr;         // the new contract for nebulas token updates;\r\n \r\n    // crowdsale parameters\r\n    bool    public isFunding;                // switched to true in operational state\r\n    uint256 public fundingStartBlock;\r\n    uint256 public fundingStopBlock;\r\n \r\n    uint256 public currentSupply;           // current supply tokens for sell\r\n    uint256 public tokenRaised = 0;         // the number of total sold token\r\n    uint256 public tokenMigrated = 0;      // the number of total transferted token\r\n    uint256 public tokenExchangeRate = 625;              // 625 NAS tokens per 1 ETH\r\n \r\n    // events\r\n    event AllocateToken(address indexed _to, uint256 _value);    // allocate token for private sale;\r\n    event IssueToken(address indexed _to, uint256 _value);      // issue token for public sale;\r\n    event IncreaseSupply(uint256 _value);\r\n    event DecreaseSupply(uint256 _value);\r\n    event Migrate(address indexed _to, uint256 _value);\r\n \r\n    \r\n    function formatDecimals(uint256 _value) internal returns (uint256 ) {\r\n        return _value * 10 ** decimals;\r\n    }\r\n \r\n    // constructor\r\n    function ARCToken(\r\n        address _ethFundDeposit,\r\n        uint256 _currentSupply)\r\n    {\r\n        ethFundDeposit = _ethFundDeposit;\r\n \r\n        isFunding = false;                          //controls pre through crowdsale state\r\n        fundingStartBlock = 0;\r\n        fundingStopBlock = 0;\r\n \r\n        currentSupply = formatDecimals(_currentSupply);\r\n        totalSupply = formatDecimals(1000000000);\r\n        balances[msg.sender] = totalSupply;\r\n        if(currentSupply > totalSupply) throw;\r\n    }\r\n \r\n    modifier isOwner()  { require(msg.sender == ethFundDeposit); _; }\r\n \r\n    /// @dev set the token's tokenExchangeRate,\r\n    function setTokenExchangeRate(uint256 _tokenExchangeRate) isOwner external {\r\n        if (_tokenExchangeRate == 0) throw;\r\n        if (_tokenExchangeRate == tokenExchangeRate) throw;\r\n \r\n        tokenExchangeRate = _tokenExchangeRate;\r\n    }\r\n \r\n \r\n    /// @dev decrease the token's supply\r\n    function decreaseSupply (uint256 _value) isOwner external {\r\n        uint256 value = formatDecimals(_value);\r\n        if (value + tokenRaised > currentSupply) throw;\r\n \r\n        currentSupply = safeSubtract(currentSupply, value);\r\n        DecreaseSupply(value);\r\n    }\r\n \r\n   /// @dev turn on the funding state\r\n    function startFunding (uint256 _fundingStartBlock, uint256 _fundingStopBlock) isOwner external {\r\n        if (isFunding) throw;\r\n        if (_fundingStartBlock >= _fundingStopBlock) throw;\r\n        if (block.number >= _fundingStartBlock) throw;\r\n \r\n        fundingStartBlock = _fundingStartBlock;\r\n        fundingStopBlock = _fundingStopBlock;\r\n        isFunding = true;\r\n    }\r\n \r\n   /// @dev turn off the funding state\r\n    function stopFunding() isOwner external {\r\n        if (!isFunding) throw;\r\n        isFunding = false;\r\n    }\r\n \r\n     /// @dev set a new contract for recieve the tokens (for update contract)\r\n    function setMigrateContract(address _newContractAddr) isOwner external {\r\n        if (_newContractAddr == newContractAddr) throw;\r\n        newContractAddr = _newContractAddr;\r\n    }\r\n \r\n    /// @dev set a new owner.\r\n    function changeOwner(address _newFundDeposit) isOwner() external {\r\n        if (_newFundDeposit == address(0x0)) throw;\r\n        ethFundDeposit = _newFundDeposit;\r\n    }\r\n \r\n    /// sends the tokens to new contract\r\n    function migrate() external {\r\n        if(isFunding) throw;\r\n        if(newContractAddr == address(0x0)) throw;\r\n \r\n        uint256 tokens = balances[msg.sender];\r\n        if (tokens == 0) throw;\r\n \r\n        balances[msg.sender] = 0;\r\n        tokenMigrated = safeAdd(tokenMigrated, tokens);\r\n \r\n        IMigrationContract newContract = IMigrationContract(newContractAddr);\r\n        if (!newContract.migrate(msg.sender, tokens)) throw;\r\n \r\n        Migrate(msg.sender, tokens);               // log it\r\n    }\r\n \r\n    /// @dev sends ETH to Nebulas team\r\n    function transferETH() isOwner external {\r\n        if (this.balance == 0) throw;\r\n        if (!ethFundDeposit.send(this.balance)) throw;\r\n    }\r\n \r\n    /// @dev allocates NAS tokens to pre-sell address.\r\n    function allocateToken (address _addr, uint256 _eth) isOwner external {\r\n        if (_eth == 0) throw;\r\n        if (_addr == address(0x0)) throw;\r\n \r\n        uint256 tokens = safeMult(formatDecimals(_eth), tokenExchangeRate);\r\n        if (tokens + tokenRaised > currentSupply) throw;\r\n \r\n        tokenRaised = safeAdd(tokenRaised, tokens);\r\n        balances[_addr] += tokens;\r\n \r\n        AllocateToken(_addr, tokens);  \r\n    }\r\n \r\n    /// buys the tokens\r\n    function () payable {\r\n        if (!isFunding) throw;\r\n        if (msg.value == 0) throw;\r\n \r\n        if (block.number < fundingStartBlock) throw;\r\n        if (block.number > fundingStopBlock) throw;\r\n \r\n        uint256 tokens = safeMult(msg.value, tokenExchangeRate);\r\n        if (tokens + tokenRaised > currentSupply) throw;\r\n \r\n        tokenRaised = safeAdd(tokenRaised, tokens);\r\n        balances[msg.sender] += tokens;\r\n \r\n        IssueToken(msg.sender, tokens);  \r\n    }}"}}}