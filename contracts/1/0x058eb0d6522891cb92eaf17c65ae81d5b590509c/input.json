{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "DummyController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface erc20 {\n  function balanceOf(address) external view returns (uint256);\n\n  function transfer(address recipient, uint256 amount) external returns (bool);\n}\n\ninterface vault {\n  function claimInsurance() external;\n}\n\ncontract DummyController {\n  address constant token = 0xA64BD6C70Cb9051F6A9ba1F163Fdc07E0DfB5F84;\n  address constant governance = 0x2D407dDb06311396fE14D4b49da5F0471447d45C;\n  address constant aLink = 0x29E240CFD7946BA20895a7a02eDb25C210f9f324;\n  address constant usdcStrategy = 0x25fAcA21dd2Ad7eDB3a027d543e617496820d8d6;\n\n  mapping(address => address) public vaults;\n  mapping(address => address) public strategies;\n\n  constructor() {\n    vaults[usdcStrategy] = aLink;\n    strategies[aLink] = usdcStrategy;\n  }\n\n  function want(address _vault) external view returns (address) {\n    return 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n  }\n\n  function balanceOf(address _vault) external view returns (uint256) {\n    return 0;\n  }\n\n  function claimInsurance(address _vault) external {\n    vault(_vault).claimInsurance();\n    _safeTransfer(token, governance, erc20(token).balanceOf(address(this)));\n  }\n\n  function withdraw(address _token) external {\n    _safeTransfer(_token, governance, erc20(_token).balanceOf(address(this)));\n  }\n\n  function _safeTransfer(\n    address _token,\n    address to,\n    uint256 value\n  ) internal {\n    (bool success, bytes memory data) = _token.call(\n      abi.encodeWithSelector(erc20.transfer.selector, to, value)\n    );\n    require(success && (data.length == 0 || abi.decode(data, (bool))));\n  }\n}\n"
    }
  }
}