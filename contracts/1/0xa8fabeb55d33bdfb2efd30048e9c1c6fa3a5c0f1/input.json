{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.6;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"},"browser/ICycle.sol":{"content":"pragma solidity ^0.6.6;\nimport \"./IGroupSchema.sol\";\npragma experimental ABIEncoderV2;\n\ninterface ICycles is IGroupSchema {\n\n    function getCycles() external view returns (Cycle [] memory);\n\n    function getCyclesLength() external view returns (uint256);\n\n    function getCycleInfoByIndex(uint256 index)\n        external\n        view\n        returns (\n            uint256 id,\n            uint256 groupId,\n            uint256 numberOfDepositors,\n            uint256 cycleStartTimeStamp,\n            uint256 cycleDuration,\n            uint256 maximumSlots,\n            bool hasMaximumSlots,\n            uint256 cycleStakeAmount,\n            uint256 totalStakes,\n            uint256 stakesClaimed,\n            CycleStatus cycleStatus,\n            uint256 stakesClaimedBeforeMaturity\n        );\n\n    function getCycleInfoById(uint256 cycleId)\n        external\n        view\n        returns (\n            uint256 id,\n            uint256 groupId,\n            uint256 numberOfDepositors,\n            uint256 cycleStartTimeStamp,\n            uint256 cycleDuration,\n            uint256 maximumSlots,\n            bool hasMaximumSlots,\n            uint256 cycleStakeAmount,\n            uint256 totalStakes,\n            uint256 stakesClaimed,\n            CycleStatus cycleStatus,\n            uint256 stakesClaimedBeforeMaturity\n        );\n\n    function getCycleFinancialsByIndex(uint256 index)\n        external\n        view\n        returns (\n            uint256 cycleId,\n            uint256 underlyingTotalDeposits,\n            uint256 underlyingTotalWithdrawn,\n            uint256 underlyingBalance,\n            uint256 derivativeBalance,\n            uint256 underylingBalanceClaimedBeforeMaturity,\n            uint256 derivativeBalanceClaimedBeforeMaturity\n        );\n\n    function getCycleFinancialsByCycleId(uint256 cycleId)\n        external\n        view\n        returns (\n            uint256 underlyingTotalDeposits,\n            uint256 underlyingTotalWithdrawn,\n            uint256 underlyingBalance,\n            uint256 derivativeBalance,\n            uint256 underylingBalanceClaimedBeforeMaturity,\n            uint256 derivativeBalanceClaimedBeforeMaturity\n        );\n\n    function getCycleMember(uint256 index)\n        external\n        view\n        returns (\n            uint256 cycleId,\n            uint256 groupId,\n            address payable _address,\n            uint256 totalLiquidityAsPenalty,\n            uint256 numberOfCycleStakes,\n            uint256 stakesClaimed,\n            bool hasWithdrawn\n        );\n\n    function createCycleMember(\n        uint256 cycleId,\n        uint256 groupId,\n        address payable depositor,\n        uint256 totalLiquidityAsPenalty,\n        uint256 numberOfCycleStakes,\n        uint256 stakesClaimed,\n        bool hasWithdrawn\n    ) external;\n\n    function updateCycleMember(\n        uint256 cycleId,\n        uint256 totalLiquidityAsPenalty,\n        uint256 numberOfCycleStakes,\n        uint256 stakesClaimed,\n         address payable depositor,\n        bool hasWithdrawn\n    ) external;\n\n    function createCycle(\n        uint256 groupId,\n        uint256 numberOfDepositors,\n        uint256 startTimeStamp,\n        uint256 duration,\n        uint256 maximumSlots,\n        bool hasMaximumSlots,\n        uint256 cycleStakeAmount,\n        uint256 totalStakes,\n        uint256 stakesClaimed,\n        CycleStatus cycleStatus,\n        uint256 stakesClaimedBeforeMaturity\n    ) external returns (uint256);\n\n    function createCycleFinancials(\n        uint256 cycleId,\n        uint256 groupId,\n        uint256 underlyingTotalDeposits,\n        uint256 underlyingTotalWithdrawn,\n        uint256 underlyingBalance,\n        uint256 derivativeBalance,\n        uint256 underylingBalanceClaimedBeforeMaturity,\n        uint256 derivativeBalanceClaimedBeforeMaturity\n    ) external;\n\n    function updateCycle(\n        uint256 cycleId,\n        uint256 numberOfDepositors,\n        uint256 startTimeStamp,\n        uint256 duration,\n        uint256 maximumSlots,\n        uint256 cycleStakeAmount,\n        uint256 totalStakes,\n        uint256 stakesClaimed,\n         bool hasMaximumSlots,\n        CycleStatus cycleStatus,\n        uint256 stakesClaimedBeforeMaturity\n    ) external;\n\n    function updateCycleFinancials(\n        uint256 cycleId,\n        uint256 underlyingTotalDeposits,\n        uint256 underlyingTotalWithdrawn,\n        uint256 underlyingBalance,\n        uint256 derivativeBalance,\n        uint256 underylingBalanceClaimedBeforeMaturity,\n        uint256 derivativeBalanceClaimedBeforeMaturity\n    ) external;\n\n    function getCycleIndex(uint256 cycleId) external view returns (uint256);\n\n    function getCycleFinancialIndex(uint256 cycleId)\n        external\n        view\n        returns (uint256);\n\n    function getRecordIndexForCycleMembersIndexerByDepositor(\n        uint256 cycleId,\n        uint256 recordIndexLocation\n    ) external view returns (bool, uint256);\n\n    function getRecordIndexForCycleMembersIndexer(\n        address depositorAddress,\n        uint256 recordIndexLocation\n    ) external view returns (bool, uint256);\n\n    function getRecordIndexLengthForCycleMembers(uint256 cycleId)\n        external\n        view\n        returns (uint256);\n\n    function getRecordIndexLengthForGroupCycleIndexer(uint256 groupId)\n        external\n        view\n        returns (uint256);\n\n    function getRecordIndexLengthForCycleMembersByDepositor(\n        address depositorAddress\n    ) external view returns (uint256);\n\n    function getCycleMemberIndex(uint256 cycleId, address payable memberAddress)\n        external\n        view\n        returns (uint256);\n\n    function doesCycleMemberExist(uint256 cycleId, address depositor)\n        external\n        view\n        returns (bool);\n\n    function activateStorageOracle(address oracle) external;\n\n    function deactivateStorageOracle(address oracle) external;\n\n    function reAssignStorageOracle(address newOracle) external;\n}\n"},"browser/IDaiLendingService.sol":{"content":"pragma solidity 0.6.6;\n\ninterface IDaiLendingService {\n    function getPricePerFullShare() external view returns (uint256);\n\n    function save(uint256 amount) external;\n\n    function userShares() external view returns (uint256);\n\n    function userDaiBalance() external view returns (uint256);\n\n    function GetUserGrossRevenue() external view returns (uint256);\n\n    function GetNetRevenue() external view returns (uint256);\n\n    function GetUserDepositedDaiBalance() external view returns (uint256);\n\n    function Withdraw(uint256 amount) external;\n    \n    function WithdrawByShares(uint amount, uint sharesAmount) external;\n    \n    function GetDaiLendingAdapterAddress() external view returns (address);\n    \n    function WithdrawBySharesOnly(uint sharesAmount) external;\n}"},"browser/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.6;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"},"browser/IGroupSchema.sol":{"content":"pragma solidity 0.6.6;\n\ninterface IGroupSchema {\n    struct Group {\n        uint256 id;\n        string name;\n        string symbol;\n        bool exists;\n        address payable creatorAddress;\n    }\n\n    struct Cycle {\n        uint256 id;\n        uint256 groupId;\n        uint256 numberOfDepositors;\n        uint256 cycleStartTimeStamp;\n        uint256 cycleDuration;\n        uint256 maximumSlots;\n        uint256 cycleStakeAmount;\n        // represents the total stakes of every cycle member deposits\n        uint256 totalStakes;\n        //represents the total stakes of every cycle member withdrawal\n        uint256 stakesClaimed;\n        bool hasMaximumSlots;\n        bool exists;\n        CycleStatus cycleStatus;\n        // represents the number of cycle stakes that user's have cashed out on before the cycle has ended\n        uint256 stakesClaimedBeforeMaturity;\n    }\n\n    struct CycleFinancial {\n        bool exists;\n        uint256 cycleId;\n        //total underlying asset deposited into contract\n        uint256 underlyingTotalDeposits;\n        //total underlying asset that have been withdrawn by cycle members\n        uint256 underlyingTotalWithdrawn;\n        // underlying amount gotten after lending period has ended and shares have been reedemed for underlying asset;\n        uint256 underlyingBalance;\n        // lending shares representation of amount deposited in lending protocol\n        uint256 derivativeBalance;\n        // represents the total underlying crypto amount that has been cashed out before the cycle ended\n        uint256 underylingBalanceClaimedBeforeMaturity;\n        // represents the total derivative crypto amount that has been cashed out on before the cycle ended\n        uint256 derivativeBalanceClaimedBeforeMaturity;\n    }\n\n    struct CycleMember {\n        uint256 cycleId;\n        uint256 groupId;\n        uint256 totalLiquidityAsPenalty;\n        uint256 numberOfCycleStakes;\n        uint256 stakesClaimed;\n        bool exist;\n        address payable _address;\n        bool hasWithdrawn;\n    }\n\n    struct Member {\n        bool exists;\n        address payable _address;\n    }\n\n    struct GroupMember {\n        bool exists;\n        address payable _address;\n        uint256 groupId;\n    }\n\n    struct RecordIndex {\n        bool exists;\n        uint256 index;\n    }\n\n    enum CycleStatus {NOT_STARTED, ONGOING, ENDED}\n}\n"},"browser/IGroups.sol":{"content":"pragma solidity ^0.6.6;\nimport \"./IGroupSchema.sol\";\n\ninterface IGroups is IGroupSchema {\n\n    function getXendTokensReward(address payable receiverAddress)\n        external\n        view\n        returns (uint256);\n\n    function setXendTokensReward(address payable depositorAddress, uint256 amount)\n        external;\n    function getLengthOfTokenAddressesUsedInDeposit()\n        external\n        view\n        returns (uint256);\n\n    function incrementTokenDeposit(address tokenAddress, uint256 amount)\n        external\n        returns (uint256);\n\n    function decrementTokenDeposit(address tokenAddress, uint256 amount)\n        external\n        returns (uint256);\n\n    function getTokenDeposit(address tokenAddress)\n        external\n        view\n        returns (uint256);\n\n    function incrementEtherDeposit(uint256 amount) external returns (uint256);\n\n    function decrementEtherDeposit(uint256 amount) external returns (uint256);\n\n    function getEtherDeposit() external view returns (uint256);\n\n    function createMember(address payable depositor) external;\n\n    function getMember(address _address) external view returns (address);\n\n    function createGroup(\n        string calldata name,\n        string calldata symbol,\n        address groupCreator\n    ) external returns (uint256);\n\n    function updateGroup(\n        uint256 id,\n        string calldata name,\n        string calldata symbol,\n        address payable creatorAddress0\n    ) external;\n\n    function doesGroupExist(uint256 groupId) external view returns (bool);\n\n    function doesGroupExist(string calldata groupName)\n        external\n        view\n        returns (bool);\n\n    function doesMemberExist(address depositor) external view returns (bool);\n\n    function createGroupMember(uint256 groupId, address payable depositor)\n        external;\n\n    function getGroupMember(uint256 index)\n        external\n        view\n        returns (address payable _address, uint256 groupId);\n\n    function getGroupMembersDeepIndexer(uint256 groupId, address depositor)\n        external\n        view\n        returns (bool exists, uint256 index);\n\n    function getRecordIndexLengthForGroupMembersIndexer(uint256 groupId)\n        external\n        view\n        returns (uint256);\n\n    function getRecordIndexLengthForGroupMembersIndexerByDepositor(\n        address depositor\n    ) external view returns (uint256);\n\n    function getGroupMembersIndexer(uint256 groupId, uint256 indexerLocation)\n        external\n        view\n        returns (bool exist, uint256 index);\n\n    function getGroupMembersIndexerByDepositor(\n        address depositor,\n        uint256 indexerLocation\n    ) external view returns (bool exist, uint256 index);\n\n    function doesGroupMemberExist(uint256 groupId, address depositor)\n        external\n        view\n        returns (bool);\n\n    function getGroupIndexer(uint256 groupId)\n        external\n        view\n        returns (bool exist, uint256 index);\n\n    function getRecordIndexLengthForCreator(address groupCreator)\n        external\n        view\n        returns (uint256);\n\n    function getGroupForCreatorIndexer(\n        address groupCreator,\n        uint256 indexerLocation\n    ) external view returns (bool exist, uint256 index);\n\n    function getGroupIndexerByName(string calldata groupName)\n        external\n        view\n        returns (bool exist, uint256 index);\n\n    function getGroupById(uint256 groupId)\n        external\n        view\n        returns (\n            uint256,\n            string memory,\n            string memory,\n            address payable\n        );\n\n    function getGroupByIndex(uint256 index)\n        external\n        view\n        returns (\n            uint256,\n            string memory,\n            string memory,\n            address payable\n        );\n\n    function getGroupIndex(uint256 groupId) external view returns (uint256);\n\n    function activateStorageOracle(address oracle) external;\n\n    function deactivateStorageOracle(address oracle) external;\n\n    function reAssignStorageOracle(address newOracle) external;\n}\n"},"browser/IRewardConfig.sol":{"content":"pragma solidity 0.6.6;\n\n\ninterface IRewardConfig{\n\n    function CalculateIndividualSavingsReward(uint totalCycleTimeInSeconds, uint amountDeposited) external view returns(uint);\n\n    function CalculateCooperativeSavingsReward(uint totalCycleTimeInSeconds, uint amountDeposited) external view returns(uint);\n    \n    function CalculateEsusuReward(uint totalCycleTimeInSeconds, uint amountDeposited) external view returns(uint);\n}"},"browser/ISavingsConfig.sol":{"content":"pragma solidity ^0.6.6;\nimport './ISavingsConfigSchema.sol';\n\n\n\n\n\ninterface  ISavingsConfig is ISavingsConfigSchema {\n   \n    function getRuleSet(string calldata ruleKey) external returns (uint ,uint , uint ,  bool ,RuleDefinition );\n    function getRuleManager(string calldata ruleKey) external returns (address);\n    function changeRuleCreator(string calldata ruleKey, address newRuleManager) external;\n    function createRule(string calldata ruleKey, uint minimum, uint maximum, uint exact, RuleDefinition ruleDefinition) external;\n    function modifyRule(string calldata ruleKey, uint minimum, uint maximum, uint exact,  RuleDefinition  ruleDefinition ) external;\n    function disableRule(string calldata ruleKey) external;\n    function enableRule(string calldata ruleKey)  external;\n    \n   \n    \n}"},"browser/ISavingsConfigSchema.sol":{"content":"pragma solidity 0.6.6;\n\ninterface ISavingsConfigSchema {\n    struct RuleSet {\n        uint256 minimum;\n        uint256 maximum;\n        uint256 exact;\n        bool applies;\n        RuleDefinition ruleDefinition;\n        bool exists;\n    }\n\n    enum RuleDefinition {RANGE, VALUE}\n}\n"},"browser/ITreasury.sol":{"content":"pragma solidity ^0.6.6;\nimport \"./SafeMath.sol\";\nimport \"./Ownable.sol\";\nimport \"./IERC20.sol\";\n\ninterface ITreasury {\n    function depositToken(address token) external;\n\n    function getEtherBalance() external view returns (uint256);\n\n    function getTokenBalance(address token) external view returns (uint256);\n\n    function withdrawEthers(uint256 amount) external;\n\n    function withdrawTokens(address tokenAddress, uint256 amount) external;\n}\n"},"browser/IXendToken.sol":{"content":"pragma solidity 0.6.6;\n\ninterface IXendToken {\n    function mint(address payable recipient, uint256 amount) external;\n}\n"},"browser/Ownable.sol":{"content":"pragma solidity 0.6.6;\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\ncontract Ownable {\n    address payable public owner;\n\n    constructor() internal {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Unauthorized access to contract\");\n        _;\n    }\n\n    function transferOwnership(address payable newOwner) public onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n"},"browser/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"},"browser/SafeERC20.sol":{"content":"pragma solidity >=0.6.6;\n\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"},"browser/SafeMath.sol":{"content":"pragma solidity 0.6.6;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"browser/XendFinanceGroup_Yearn_V1.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.6;\nimport \"./ISavingsConfig.sol\";\nimport \"./ITreasury.sol\";\nimport \"./Ownable.sol\";\nimport \"./IGroups.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./ICycle.sol\";\nimport \"./IGroupSchema.sol\";\nimport \"./IDaiLendingService.sol\";\nimport \"./ReentrancyGuard.sol\";\nimport \"./IERC20.sol\";\nimport \"./Address.sol\";\nimport \"./IRewardConfig.sol\";\nimport \"./SafeMath.sol\";\nimport \"./IXendToken.sol\";\n\ncontract XendFinanceGroupContainer_Yearn_V1 is IGroupSchema {\n    struct CycleDepositResult {\n        Group group;\n        Member member;\n        GroupMember groupMember;\n        CycleMember cycleMember;\n        uint256 underlyingAmountDeposited;\n    }\n\n    struct WithdrawalResolution {\n        uint256 amountToSendToMember;\n        uint256 amountToSendToTreasury;\n    }\n\n    event XendTokenReward(uint256 date, address indexed member, uint256 amount);\n\n    event UnderlyingAssetDeposited(\n        uint256 indexed cycleId,\n        address payable indexed memberAddress,\n        uint256 groupId,\n        uint256 underlyingAmount,\n        address indexed tokenAddress\n    );\n\n    event DerivativeAssetWithdrawn(\n        uint256 indexed cycleId,\n        address payable indexed memberAddress,\n        uint256 underlyingAmount,\n        address tokenAddress\n    );\n\n    event GroupCreated(\n        uint256 indexed groupId,\n        address payable indexed groupCreator\n    );\n\n    event CycleCreated(\n        uint256 indexed cycleId,\n        uint256 maximumSlots,\n        bool hasMaximumSlots,\n        uint256 stakeAmount,\n        uint256 expectedCycleStartTimeStamp,\n        uint256 cycleDuration\n    );\n\n    event MemberJoinedCycle(\n        uint256 indexed cycleId,\n        address payable indexed memberAddress,\n        uint256 groupId\n    );\n\n    event MemberJoinedGroup(address payable memberAddress, uint256 groupId);\n\n    event CycleStartedEvent(\n        uint256 indexed cycleId,\n        uint256 indexed blockTimeStamp,\n        uint256 blockNumber,\n        uint256 totalDerivativeAmount,\n        uint256 totalUnderlyingAmount\n    );\n\n    IDaiLendingService lendingService;\n    IERC20 daiToken;\n    IGroups groupStorage;\n    ICycles cycleStorage;\n    ITreasury treasury;\n    ISavingsConfig savingsConfig;\n    IRewardConfig rewardConfig;\n    IXendToken xendToken;\n    IERC20 derivativeToken;\n\n    address LendingAdapterAddress;\n    address TokenAddress;\n    address TreasuryAddress;\n\n    uint256 _totalTokenReward;      //  This tracks the total number of token rewards distributed on the cooperative savings\n\n    uint256 _groupCreatorRewardPercent;\n\n    uint256 _feePrecision = 10;     //  This determines the lower limit of the fee to be charged. With precsion of 10, it means our fee can have a precision of 0.1% and above\n\n    string constant PERCENTAGE_PAYOUT_TO_USERS = \"PERCENTAGE_PAYOUT_TO_USERS\";\n    string constant PERCENTAGE_AS_PENALTY = \"PERCENTAGE_AS_PENALTY\";\n\n    string constant XEND_FINANCE_COMMISION_DIVISOR =\n        \"XEND_FINANCE_COMMISION_DIVISOR\";\n    string constant XEND_FINANCE_COMMISION_DIVIDEND =\n        \"XEND_FINANCE_COMMISION_DIVIDEND\";\n\n    bool isDeprecated;\n\n    modifier onlyNonDeprecatedCalls() {\n        require(!isDeprecated, \"Service contract has been deprecated\");\n        _;\n    }\n}\n\ncontract XendFinanceGroupHelpers is XendFinanceGroupContainer_Yearn_V1 {\n    function _updateGroup(Group memory group) internal {\n        uint256 index = _getGroupIndex(group.id);\n        groupStorage.updateGroup(\n            group.id,\n            group.name,\n            group.symbol,\n            group.creatorAddress\n        );\n    }\n\n    function _getGroupById(uint256 _groupId)\n        internal\n        view\n        returns (Group memory)\n    {\n        (\n            uint256 groupId,\n            string memory name,\n            string memory symbol,\n            address payable creatorAddress\n        ) = groupStorage.getGroupById(_groupId);\n\n        Group memory group = Group(groupId, name, symbol, true, creatorAddress);\n        return group;\n    }\n\n    function _getGroupByIndex(uint256 index)\n        internal\n        view\n        returns (Group memory)\n    {\n        (\n            uint256 groupId,\n            string memory name,\n            string memory symbol,\n            address payable creatorAddress\n        ) = groupStorage.getGroupByIndex(index);\n\n        Group memory group = Group(groupId, name, symbol, true, creatorAddress);\n        return group;\n    }\n\n    function _getGroupIndex(uint256 groupId) internal view returns (uint256) {\n        return groupStorage.getGroupIndex(groupId);\n    }\n\n    function _createMemberIfNotExist(address payable depositor)\n        internal\n        returns (Member memory)\n    {\n        Member memory member = _getMember(depositor, false);\n        return member;\n    }\n\n    function _createGroupMemberIfNotExist(\n        address payable depositor,\n        uint256 groupId\n    ) internal returns (GroupMember memory) {\n        GroupMember memory groupMember =\n            _getGroupMember(depositor, groupId, false);\n        return groupMember;\n    }\n\n    function _getMember(address payable depositor, bool throwOnNotFound)\n        internal\n        returns (Member memory)\n    {\n        bool memberExists = groupStorage.doesMemberExist(depositor);\n        if (throwOnNotFound) require(memberExists, \"Member not found\");\n\n        if (!memberExists) {\n            groupStorage.createMember(depositor);\n        }\n\n        return Member(true, depositor);\n    }\n\n    function _getGroupMember(\n        address payable depositor,\n        uint256 groupId,\n        bool throwOnNotFound\n    ) internal returns (GroupMember memory) {\n        bool groupMemberExists =\n            groupStorage.doesGroupMemberExist(groupId, depositor);\n\n        if (throwOnNotFound) require(groupMemberExists, \"Member not found\");\n\n        if (!groupMemberExists) {\n            groupStorage.createGroupMember(groupId, depositor);\n        }\n\n        return GroupMember(true, depositor, groupId);\n    }\n\n    function doesGroupExist(uint256 groupId) internal view returns (bool) {\n        return _doesGroupExist(groupId);\n    }\n\n    function doesGroupNameExist(uint256 groupName)\n        internal\n        view\n        returns (bool)\n    {\n        return _doesGroupExist(groupName);\n    }\n\n    function _doesGroupExist(uint256 groupId) internal view returns (bool) {\n        bool groupExist = groupStorage.doesGroupExist(groupId);\n\n        return groupExist;\n    }\n\n    function _doesGroupExist(string memory groupName)\n        internal\n        view\n        returns (bool)\n    {\n        bool groupExist = groupStorage.doesGroupExist(groupName);\n\n        return groupExist;\n    }\n\n    function _getGroup(uint256 groupId) internal view returns (Group memory) {\n        return _getGroupById(groupId);\n    }\n\n    modifier onlyGroupCreator(uint256 groupId) {\n        Group memory group = _getGroup(groupId);\n\n        require(\n            msg.sender == group.creatorAddress,\n            \"unauthorized access to contract\"\n        );\n        _;\n    }\n}\n\ncontract XendFinanceCycleHelpers is XendFinanceGroupHelpers {\n    using SafeMath for uint256;\n\n    using SafeERC20 for IERC20;\n\n    function _updateCycleMember(CycleMember memory cycleMember) internal {\n        cycleStorage.updateCycleMember(\n            cycleMember.cycleId,\n            cycleMember.totalLiquidityAsPenalty,\n            cycleMember.numberOfCycleStakes,\n            cycleMember.stakesClaimed,\n            cycleMember._address,\n            cycleMember.hasWithdrawn\n        );\n    }\n\n    function _validateCycleCreationActionValid(\n        uint256 groupId,\n        uint256 maximumsSlots,\n        bool hasMaximumSlots\n    ) internal {\n        bool doesGroupExist = doesGroupExist(groupId);\n\n        require(doesGroupExist, \"Group not found\");\n\n        if (hasMaximumSlots) {\n            require(maximumsSlots > 0, \"Maximum slot settings cannot be empty\");\n        }\n    }\n\n    function _getCycleGroup(uint256 cycleId)\n        internal\n        view\n        returns (Group memory)\n    {\n        Cycle memory cycle = _getCycleById(cycleId);\n\n        return _getGroupById(cycle.groupId);\n    }\n\n    function _getCycleById(uint256 cycleId)\n        internal\n        view\n        returns (Cycle memory)\n    {\n        (\n            uint256 id,\n            uint256 groupId,\n            uint256 numberOfDepositors,\n            uint256 cycleStartTimeStamp,\n            uint256 cycleDuration,\n            uint256 maximumSlots,\n            bool hasMaximumSlots,\n            uint256 cycleStakeAmount,\n            uint256 totalStakes,\n            uint256 stakesClaimed,\n            CycleStatus cycleStatus,\n            uint256 stakesClaimedBeforeMaturity\n        ) = cycleStorage.getCycleInfoById(cycleId);\n\n        Cycle memory cycleInfo =\n            Cycle(\n                id,\n                groupId,\n                numberOfDepositors,\n                cycleStartTimeStamp,\n                cycleDuration,\n                maximumSlots,\n                cycleStakeAmount,\n                totalStakes,\n                stakesClaimed,\n                hasMaximumSlots,\n                true,\n                cycleStatus,\n                stakesClaimedBeforeMaturity\n            );\n\n        return cycleInfo;\n    }\n\n    function _getCycleByIndex(uint256 index)\n        internal\n        view\n        returns (Cycle memory)\n    {\n        (\n            uint256 id,\n            uint256 groupId,\n            uint256 numberOfDepositors,\n            uint256 cycleStartTimeStamp,\n            uint256 cycleDuration,\n            uint256 maximumSlots,\n            bool hasMaximumSlots,\n            uint256 cycleStakeAmount,\n            uint256 totalStakes,\n            uint256 stakesClaimed,\n            CycleStatus cycleStatus,\n            uint256 stakesClaimedBeforeMaturity\n        ) = cycleStorage.getCycleInfoByIndex(index);\n\n        Cycle memory cycleInfo =\n            Cycle(\n                id,\n                groupId,\n                numberOfDepositors,\n                cycleStartTimeStamp,\n                cycleDuration,\n                maximumSlots,\n                cycleStakeAmount,\n                totalStakes,\n                stakesClaimed,\n                hasMaximumSlots,\n                true,\n                cycleStatus,\n                stakesClaimedBeforeMaturity\n            );\n\n        return cycleInfo;\n    }\n\n    function _getCycleFinancialByCycleId(uint256 cycleId)\n        internal\n        view\n        returns (CycleFinancial memory)\n    {\n        (\n            uint256 underlyingTotalDeposits,\n            uint256 underlyingTotalWithdrawn,\n            uint256 underlyingBalance,\n            uint256 derivativeBalance,\n            uint256 underylingBalanceClaimedBeforeMaturity,\n            uint256 derivativeBalanceClaimedBeforeMaturity\n        ) = cycleStorage.getCycleFinancialsByCycleId(cycleId);\n\n        return\n            CycleFinancial(\n                true,\n                cycleId,\n                underlyingTotalDeposits,\n                underlyingTotalWithdrawn,\n                underlyingBalance,\n                derivativeBalance,\n                underylingBalanceClaimedBeforeMaturity,\n                derivativeBalanceClaimedBeforeMaturity\n            );\n    }\n\n    function _getCycleFinancialByIndex(uint256 index)\n        internal\n        view\n        returns (CycleFinancial memory)\n    {\n        (\n            uint256 cycleId,\n            uint256 underlyingTotalDeposits,\n            uint256 underlyingTotalWithdrawn,\n            uint256 underlyingBalance,\n            uint256 derivativeBalance,\n            uint256 underylingBalanceClaimedBeforeMaturity,\n            uint256 derivativeBalanceClaimedBeforeMaturity\n        ) = cycleStorage.getCycleFinancialsByIndex(index);\n\n        return\n            CycleFinancial(\n                true,\n                cycleId,\n                underlyingTotalDeposits,\n                underlyingTotalWithdrawn,\n                underlyingBalance,\n                derivativeBalance,\n                underylingBalanceClaimedBeforeMaturity,\n                derivativeBalanceClaimedBeforeMaturity\n            );\n    }\n\n    function _getCycleIndex(uint256 cycleId) internal view returns (uint256) {\n        return cycleStorage.getCycleIndex(cycleId);\n    }\n\n    function _getCycleMemberIndex(\n        uint256 cycleId,\n        address payable memberAddress\n    ) internal view returns (uint256) {\n        return cycleStorage.getCycleMemberIndex(cycleId, memberAddress);\n    }\n\n    function _getCycleMember(address payable depositor, uint256 _cycleId)\n        internal\n        returns (CycleMember memory)\n    {\n        bool cycleMemberExists =\n            cycleStorage.doesCycleMemberExist(_cycleId, depositor);\n\n        require(cycleMemberExists, \"Cycle Member not found\");\n\n        uint256 index = _getCycleMemberIndex(_cycleId, depositor);\n\n        CycleMember memory cycleMember = _getCycleMember(index);\n        return cycleMember;\n    }\n\n    function _CreateCycleMember(CycleMember memory cycleMember) internal {\n        cycleStorage.createCycleMember(\n            cycleMember.cycleId,\n            cycleMember.groupId,\n            cycleMember._address,\n            cycleMember.totalLiquidityAsPenalty,\n            cycleMember.numberOfCycleStakes,\n            cycleMember.stakesClaimed,\n            cycleMember.hasWithdrawn\n        );\n    }\n\n    function _getCycleMember(uint256 index)\n        internal\n        view\n        returns (CycleMember memory)\n    {\n        (\n            uint256 cycleId,\n            uint256 groupId,\n            address payable _address,\n            uint256 totalLiquidityAsPenalty,\n            uint256 numberOfCycleStakes,\n            uint256 stakesClaimed,\n            bool hasWithdrawn\n        ) = cycleStorage.getCycleMember(index);\n\n        return\n            CycleMember(\n                cycleId,\n                groupId,\n                totalLiquidityAsPenalty,\n                numberOfCycleStakes,\n                stakesClaimed,\n                true,\n                _address,\n                hasWithdrawn\n            );\n    }\n\n    function _startCycle(Cycle memory cycle) internal {\n        cycle.cycleStatus = CycleStatus.ONGOING;\n        _updateCycle(cycle);\n    }\n\n    function _endCycle(Cycle memory cycle) internal {\n        cycle.cycleStatus = CycleStatus.ENDED;\n        _updateCycle(cycle);\n    }\n\n    function _updateCycle(Cycle memory cycle) internal {\n        cycleStorage.updateCycle(\n            cycle.id,\n            cycle.numberOfDepositors,\n            cycle.cycleStartTimeStamp,\n            cycle.cycleDuration,\n            cycle.maximumSlots,\n            cycle.cycleStakeAmount,\n            cycle.totalStakes,\n            cycle.stakesClaimed,\n            cycle.hasMaximumSlots,\n            cycle.cycleStatus,\n            cycle.stakesClaimedBeforeMaturity\n        );\n    }\n\n    function _updateCycleFinancials(CycleFinancial memory cycleFinancial)\n        internal\n    {\n        cycleStorage.updateCycleFinancials(\n            cycleFinancial.cycleId,\n            cycleFinancial.underlyingTotalDeposits,\n            cycleFinancial.underlyingTotalWithdrawn,\n            cycleFinancial.underlyingBalance,\n            cycleFinancial.derivativeBalance,\n            cycleFinancial.underylingBalanceClaimedBeforeMaturity,\n            cycleFinancial.derivativeBalanceClaimedBeforeMaturity\n        );\n    }\n\n    function _joinCycle(\n        uint256 cycleId,\n        uint256 numberOfStakes,\n        address payable depositorAddress\n    ) internal {\n        require(numberOfStakes > 0, \"Minimum stakes that can be acquired is 1\");\n\n        Group memory group = _getCycleGroup(cycleId);\n        Cycle memory cycle = _getCycleById(cycleId);\n        CycleFinancial memory cycleFinancial =\n            _getCycleFinancialByCycleId(cycleId);\n\n        bool didCycleMemberExistBeforeNow =\n            cycleStorage.doesCycleMemberExist(cycleId, depositorAddress);\n        bool didGroupMemberExistBeforeNow =\n            groupStorage.doesGroupMemberExist(group.id, depositorAddress);\n\n        _validateCycleDepositCriteriaAreMet(\n            cycle,\n            didCycleMemberExistBeforeNow\n        );\n\n        CycleDepositResult memory result =\n            _addDepositorToCycle(\n                cycleId,\n                cycle.cycleStakeAmount,\n                numberOfStakes,\n                depositorAddress\n            );\n\n        cycle = _updateCycleStakeDeposit(cycle, cycleFinancial, numberOfStakes);\n\n        emit UnderlyingAssetDeposited(\n            cycle.id,\n            depositorAddress,\n            result.group.id,\n            result.underlyingAmountDeposited,\n            TokenAddress\n        );\n\n        if (!didCycleMemberExistBeforeNow) {\n            cycle.numberOfDepositors = cycle.numberOfDepositors.add(1);\n\n            emit MemberJoinedCycle(cycleId, depositorAddress, result.group.id);\n        }\n\n        if (!didGroupMemberExistBeforeNow) {\n            emit MemberJoinedGroup(depositorAddress, result.group.id);\n        }\n\n        _updateCycle(cycle);\n    }\n\n    function _updateCycleStakeDeposit(\n        Cycle memory cycle,\n        CycleFinancial memory cycleFinancial,\n        uint256 numberOfCycleStakes\n    ) internal returns (Cycle memory) {\n        cycle.totalStakes = cycle.totalStakes.add(numberOfCycleStakes);\n\n        uint256 depositAmount = cycle.cycleStakeAmount.mul(numberOfCycleStakes);\n        cycleFinancial.underlyingTotalDeposits = cycleFinancial\n            .underlyingTotalDeposits\n            .add(depositAmount);\n        _updateCycleFinancials(cycleFinancial);\n        _updateTotalTokenDepositAmount(depositAmount);\n        return cycle;\n    }\n\n    function _updateTotalTokenDepositAmount(uint256 amount) internal {\n        groupStorage.incrementTokenDeposit(TokenAddress, amount);\n    }\n\n    function _validateCycleDepositCriteriaAreMet(\n        Cycle memory cycle,\n        bool didCycleMemberExistBeforeNow\n    ) internal view {\n        bool hasMaximumSlots = cycle.hasMaximumSlots;\n        if (hasMaximumSlots && !didCycleMemberExistBeforeNow) {\n            require(\n                cycle.numberOfDepositors < cycle.maximumSlots,\n                \"Maximum slot for depositors has been reached\"\n            );\n        }\n\n        require(\n            cycle.cycleStatus == CycleStatus.NOT_STARTED,\n            \"This cycle is not accepting deposits anymore\"\n        );\n    }\n\n    function _addDepositorToCycle(\n        uint256 cycleId,\n        uint256 cycleAmountForStake,\n        uint256 numberOfStakes,\n        address payable depositorAddress\n    ) internal returns (CycleDepositResult memory) {\n        Group memory group = _getCycleGroup(cycleId);\n\n        Member memory member = _createMemberIfNotExist(depositorAddress);\n        GroupMember memory groupMember =\n            _createGroupMemberIfNotExist(depositorAddress, group.id);\n\n        bool doesCycleMemberExist =\n            cycleStorage.doesCycleMemberExist(cycleId, depositorAddress);\n\n        CycleMember memory cycleMember =\n            CycleMember(\n                cycleId,\n                group.id,\n                0,\n                0,\n                0,\n                true,\n                depositorAddress,\n                false\n            );\n\n        if (doesCycleMemberExist) {\n            cycleMember = _getCycleMember(depositorAddress, cycleId);\n        }\n\n        uint256 underlyingAmount =\n            _processMemberDeposit(\n                numberOfStakes,\n                cycleAmountForStake,\n                depositorAddress\n            );\n\n        cycleMember = _saveMemberDeposit(\n            doesCycleMemberExist,\n            cycleMember,\n            numberOfStakes\n        );\n\n        CycleDepositResult memory result =\n            CycleDepositResult(\n                group,\n                member,\n                groupMember,\n                cycleMember,\n                underlyingAmount\n            );\n\n        return result;\n    }\n\n    function _saveMemberDeposit(\n        bool didCycleMemberExistBeforeNow,\n        CycleMember memory cycleMember,\n        uint256 numberOfCycleStakes\n    ) internal returns (CycleMember memory) {\n        cycleMember.numberOfCycleStakes = cycleMember.numberOfCycleStakes.add(\n            numberOfCycleStakes\n        );\n\n        if (didCycleMemberExistBeforeNow) _updateCycleMember(cycleMember);\n        else _CreateCycleMember(cycleMember);\n\n        return cycleMember;\n    }\n\n    function _processMemberDeposit(\n        uint256 numberOfStakes,\n        uint256 amountForStake,\n        address payable depositorAddress\n    ) internal returns (uint256 underlyingAmount) {\n        uint256 expectedAmount = numberOfStakes.mul(amountForStake);\n\n        address recipient = address(this);\n        uint256 amountTransferrable =\n            daiToken.allowance(depositorAddress, recipient);\n\n        require(\n            amountTransferrable > 0,\n            \"Approve an amount > 0 for token before proceeding\"\n        );\n        require(\n            amountTransferrable >= expectedAmount,\n            \"Token allowance does not cover stake claim\"\n        );\n\n            daiToken.safeTransferFrom(depositorAddress, recipient, expectedAmount);\n       \n\n        return expectedAmount;\n    }\n\n    function _endCycle(uint256 cycleId)\n        internal\n        returns (Cycle memory, CycleFinancial memory)\n    {\n        bool isCycleReadyToBeEnded = _isCycleReadyToBeEnded(cycleId);\n        require(isCycleReadyToBeEnded, \"Cycle is still ongoing\");\n\n        Cycle memory cycle = _getCycleById(cycleId);\n        CycleFinancial memory cycleFinancial =\n            _getCycleFinancialByCycleId(cycleId);\n\n        uint256 derivativeBalanceToWithdraw =\n            cycleFinancial.derivativeBalance.sub(\n                cycleFinancial.derivativeBalanceClaimedBeforeMaturity\n            );\n\n        derivativeToken.approve(\n            LendingAdapterAddress,\n            derivativeBalanceToWithdraw\n        );\n\n        uint256 underlyingAmount = _redeemLending(derivativeBalanceToWithdraw);\n\n        cycleFinancial.underlyingBalance = cycleFinancial.underlyingBalance.add(\n            underlyingAmount\n        );\n\n        cycle.cycleStatus = CycleStatus.ENDED;\n\n        return (cycle, cycleFinancial);\n    }\n\n    function _isCycleReadyToBeEnded(uint256 cycleId)\n        internal\n        view\n        returns (bool)\n    {\n        Cycle memory cycle = _getCycleById(cycleId);\n\n        if (cycle.cycleStatus != CycleStatus.ONGOING) return false;\n\n        uint256 currentTimeStamp = now;\n        uint256 cycleEndTimeStamp =\n            cycle.cycleStartTimeStamp + cycle.cycleDuration;\n\n        return currentTimeStamp >= cycleEndTimeStamp;\n    }\n\n    function _redeemLending(uint256 derivativeBalance)\n        internal\n        returns (uint256)\n    {\n        uint256 balanceBeforeWithdraw = lendingService.userDaiBalance();\n\n        lendingService.WithdrawBySharesOnly(derivativeBalance);\n\n        uint256 balanceAfterWithdraw = lendingService.userDaiBalance();\n\n        uint256 amountOfUnderlyingAssetWithdrawn =\n            balanceAfterWithdraw.sub(balanceBeforeWithdraw);\n\n        return amountOfUnderlyingAssetWithdrawn;\n    }\n\n    modifier onlyCycleCreatorOrMember(uint256 cycleId) {\n        Group memory group = _getCycleGroup(cycleId);\n\n        bool isCreatorOrMember = msg.sender == group.creatorAddress;\n\n        if (!isCreatorOrMember) {\n            uint256 index = _getCycleMemberIndex(cycleId, msg.sender);\n            CycleMember memory cycleMember = _getCycleMember(index);\n\n            isCreatorOrMember = cycleMember._address == msg.sender;\n        }\n\n        require(isCreatorOrMember, \"unauthorized access to contract\");\n        _;\n    }\n}\n\ncontract XendFinanceGroup_Yearn_V1 is\n    XendFinanceCycleHelpers,\n    ISavingsConfigSchema,\n    Ownable,\n    ReentrancyGuard\n{\n    using SafeMath for uint256;\n\n    using SafeERC20 for IERC20;\n\n    using Address for address payable;\n\n    constructor(\n        address lendingServiceAddress,\n        address tokenAddress,\n        address groupStorageAddress,\n        address cycleStorageAddress,\n        address treasuryAddress,\n        address savingsConfigAddress,\n        address rewardConfigAddress,\n        address xendTokenAddress,\n        address derivativeTokenAddress\n    ) public {\n        lendingService = IDaiLendingService(lendingServiceAddress);\n        daiToken = IERC20(tokenAddress);\n        groupStorage = IGroups(groupStorageAddress);\n        cycleStorage = ICycles(cycleStorageAddress);\n        treasury = ITreasury(treasuryAddress);\n        savingsConfig = ISavingsConfig(savingsConfigAddress);\n        rewardConfig = IRewardConfig(rewardConfigAddress);\n        xendToken = IXendToken(xendTokenAddress);\n        derivativeToken = IERC20(derivativeTokenAddress);\n        TokenAddress = tokenAddress;\n        TreasuryAddress = treasuryAddress;\n    }\n\n     function setGroupCreatorRewardPercent (uint256 percent) external onlyOwner {\n            _groupCreatorRewardPercent = percent;\n            \n        }\n\n          function UpdateFeePrecision(uint256 feePrecision) onlyOwner external{\n            _feePrecision = feePrecision;\n        }\n\n    function setAdapterAddress() external onlyOwner {\n        LendingAdapterAddress = lendingService.GetDaiLendingAdapterAddress();\n    }\n\n            function GetTotalTokenRewardDistributed() external view returns(uint256){\n            return _totalTokenReward;\n        }\n\n    function withdrawFromCycleWhileItIsOngoing(uint256 cycleId)\n        external\n        onlyNonDeprecatedCalls\n    {\n        address payable memberAddress = msg.sender;\n        _withdrawFromCycleWhileItIsOngoing(cycleId, memberAddress);\n    }\n\n    function _withdrawFromCycleWhileItIsOngoing(\n        uint256 cycleId,\n        address payable memberAddress\n    ) internal nonReentrant {\n        bool isCycleReadyToBeEnded = _isCycleReadyToBeEnded(cycleId);\n\n        require(\n            !isCycleReadyToBeEnded,\n            \"Cycle has already ended, use normal withdrawl route\"\n        );\n\n        Cycle memory cycle = _getCycleById(cycleId);\n        CycleFinancial memory cycleFinancial =\n            _getCycleFinancialByCycleId(cycleId);\n        \n\n        require(cycleStorage.doesCycleMemberExist(cycleId, memberAddress), \"You are not a member of this cycle\");\n\n       \n\n        CycleMember memory cycleMember = _getCycleMemberInfo(cycleId, memberAddress);\n\n\n        uint256 numberOfStakesByMember = cycleMember.numberOfCycleStakes;\n        //uint256 pricePerFullShare = lendingService.getPricePerFullShare();\n\n        // get's the worth of one stake of the cycle in the derivative amount e.g yDAI\n        uint256 derivativeAmountForStake =\n            cycleFinancial.derivativeBalance.div(cycle.totalStakes);\n\n        //get's how much of a crypto asset the user has deposited. e.g yDAI\n        uint256 derivativeBalanceForMember =\n            derivativeAmountForStake.mul(numberOfStakesByMember);\n\n        derivativeToken.approve(\n            LendingAdapterAddress,\n            derivativeBalanceForMember\n        );\n\n        //get's the crypto equivalent of a members derivative balance. Crytpo here refers to DAI. this is gotten after the user's ydai balance has been converted to dai\n        uint256 underlyingAmountThatMemberDepositIsWorth =\n            _redeemLending(derivativeBalanceForMember);\n\n        uint256 initialUnderlyingDepositByMember =\n            numberOfStakesByMember.mul(cycle.cycleStakeAmount);\n\n        //deduct charges for early withdrawal\n        uint256 amountToChargeAsPenalites =\n            _computeAmountToChargeAsPenalites(\n                underlyingAmountThatMemberDepositIsWorth\n            );\n\n        //deduct xend finance fees\n        uint256 amountToChargeAsFees =\n            _computeXendFinanceCommisions(\n                underlyingAmountThatMemberDepositIsWorth\n            );\n\n        uint256 totalDeductible =\n            amountToChargeAsPenalites.add(amountToChargeAsFees);\n\n        underlyingAmountThatMemberDepositIsWorth.sub(totalDeductible);\n\n        WithdrawalResolution memory withdrawalResolution =\n            _computeAmountToSendToParties(\n                initialUnderlyingDepositByMember,\n                underlyingAmountThatMemberDepositIsWorth\n            );\n\n        withdrawalResolution.amountToSendToTreasury = withdrawalResolution\n            .amountToSendToTreasury\n            .add(totalDeductible);\n\n        if (withdrawalResolution.amountToSendToTreasury > 0) {\n            daiToken.approve(\n                TreasuryAddress,\n                withdrawalResolution.amountToSendToTreasury\n            );\n            treasury.depositToken(TokenAddress);\n        }\n\n        require(\n            withdrawalResolution.amountToSendToMember > 0,\n            \"After deducting early withdrawal penalties and fees, there's nothing left for you\"\n        );\n        daiToken.safeTransfer(\n            cycleMember._address,\n            withdrawalResolution.amountToSendToMember\n        );\n\n        uint256 totalUnderlyingAmountSentOut =\n            withdrawalResolution.amountToSendToTreasury.add(\n                withdrawalResolution.amountToSendToMember);\n\n        cycle.stakesClaimedBeforeMaturity = cycle.stakesClaimedBeforeMaturity.add(numberOfStakesByMember);\n        cycleFinancial\n            .underylingBalanceClaimedBeforeMaturity = cycleFinancial\n            .underylingBalanceClaimedBeforeMaturity.add(totalUnderlyingAmountSentOut);\n        cycleFinancial\n            .derivativeBalanceClaimedBeforeMaturity = cycleFinancial\n            .derivativeBalanceClaimedBeforeMaturity.add(derivativeBalanceForMember);\n\n        cycleMember.hasWithdrawn = true;\n        cycleMember.stakesClaimed = cycleMember.stakesClaimed.add(numberOfStakesByMember);\n\n        _updateCycle(cycle);\n        _updateCycleMember(cycleMember);\n        _updateCycleFinancials(cycleFinancial);\n    }\n\n    function getDerivativeAmountForUserStake(\n        uint256 cycleId,\n        address payable memberAddress\n    ) external view returns (uint256) {\n        Cycle memory cycle = _getCycleById(cycleId);\n        CycleFinancial memory cycleFinancial =\n            _getCycleFinancialByCycleId(cycleId);\n        bool memberExistInCycle =\n            cycleStorage.doesCycleMemberExist(cycleId, memberAddress);\n\n        require(memberExistInCycle, \"You are not a member of this cycle\");\n\n        uint256 index = _getCycleMemberIndex(cycle.id, memberAddress);\n\n        CycleMember memory cycleMember = _getCycleMember(index);\n\n        uint256 numberOfStakesByMember = cycleMember.numberOfCycleStakes;\n\n        // get's the worth of one stake of the cycle in the derivative amount e.g yDAI\n        uint256 derivativeAmountForStake =\n            cycleFinancial.derivativeBalance.div(cycle.totalStakes);\n\n        //get's how much of a crypto asset the user has deposited. e.g yDAI\n        uint256 derivativeBalanceForMember =\n            derivativeAmountForStake.mul(numberOfStakesByMember);\n        return derivativeBalanceForMember;\n    }\n\n    function withdrawFromCycle(uint256 cycleId)\n        external\n        onlyNonDeprecatedCalls\n    {\n        address payable memberAddress = msg.sender;\n        uint256 amountToSendToMember =\n            _withdrawFromCycle(cycleId, memberAddress);\n        emit DerivativeAssetWithdrawn(\n            cycleId,\n            memberAddress,\n            amountToSendToMember,\n            TokenAddress\n        );\n    }\n\n    function withdrawFromCycle(uint256 cycleId, address payable memberAddress)\n        external\n        onlyNonDeprecatedCalls\n    {\n        uint256 amountToSendToMember =\n            _withdrawFromCycle(cycleId, memberAddress);\n\n        emit DerivativeAssetWithdrawn(\n            cycleId,\n            memberAddress,\n            amountToSendToMember,\n            TokenAddress\n        );\n    }\n\n    function _getCycleMemberInfo(uint256 cycleId, address payable memberAddress) internal returns (CycleMember memory) {\n\n        require(cycleStorage.doesCycleMemberExist(cycleId, memberAddress), \"You are not a member of this cycle\");\n\n        uint256 index = _getCycleMemberIndex(cycleId, memberAddress);\n        CycleMember memory cycleMember = _getCycleMember(index);\n\n        require(!cycleMember.hasWithdrawn, \"Funds have already been withdrawn\");\n\n        return cycleMember;\n    }\n\n    function _withdrawFromCycle(uint256 cycleId, address payable memberAddress)\n        internal\n        nonReentrant\n        returns (uint256 amountToSendToMember)\n    {\n        Cycle memory cycle;\n        CycleFinancial memory cycleFinancial;\n\n       \n            (cycle, cycleFinancial) = _endCycle(cycleId);\n       \n\n            \n    CycleMember memory cycleMember = _getCycleMemberInfo(cycleId, memberAddress);\n\n        //how many stakes a cycle member has\n        uint256 stakesHoldings = cycleMember.numberOfCycleStakes;\n\n        //getting the underlying asset amount that backs 1 stake amount\n        uint256 totalStakesLeftWhenTheCycleEnded =\n            cycle.totalStakes.sub(cycle.stakesClaimedBeforeMaturity);\n        uint256 underlyingAssetForStake =\n            cycleFinancial.underlyingBalance.div(\n                totalStakesLeftWhenTheCycleEnded\n            );\n\n        //cycle members stake amount current worth\n\n        uint256 underlyingAmountThatMemberDepositIsWorth =\n            underlyingAssetForStake.mul(stakesHoldings);\n\n        uint256 initialUnderlyingDepositByMember =\n            stakesHoldings.mul(cycle.cycleStakeAmount);\n\n      \n        \n        \n\n        //deduct xend finance fees\n        uint256 amountToChargeAsFees =\n            _computeXendFinanceCommisions(\n                underlyingAmountThatMemberDepositIsWorth\n            );\n\n        uint256 creatorReward =  amountToChargeAsFees.mul(_groupCreatorRewardPercent).div(_feePrecision.mul(100));\n\n        uint256 finalAmountToChargeAsFees = amountToChargeAsFees.sub(creatorReward);\n\n        underlyingAmountThatMemberDepositIsWorth = underlyingAmountThatMemberDepositIsWorth\n            .sub(finalAmountToChargeAsFees.add(creatorReward));\n\n        WithdrawalResolution memory withdrawalResolution =\n            _computeAmountToSendToParties(\n                initialUnderlyingDepositByMember,\n                underlyingAmountThatMemberDepositIsWorth\n            );\n\n        withdrawalResolution.amountToSendToTreasury = withdrawalResolution\n            .amountToSendToTreasury\n            .add(finalAmountToChargeAsFees);\n\n        if (withdrawalResolution.amountToSendToTreasury > 0) {\n            daiToken.approve(\n                TreasuryAddress,\n                withdrawalResolution.amountToSendToTreasury\n            );\n            treasury.depositToken(TokenAddress);\n            daiToken.safeTransfer(_getGroupCreator(cycle.groupId), creatorReward);\n        }\n\n        if (withdrawalResolution.amountToSendToMember > 0) {\n            daiToken.safeTransfer(\n                cycleMember._address,\n                withdrawalResolution.amountToSendToMember\n            );\n        }\n\n        uint256 totalUnderlyingAmountSentOut =\n            withdrawalResolution.amountToSendToTreasury.add(\n                withdrawalResolution.amountToSendToMember\n            );\n\n        cycle.stakesClaimed = cycle.stakesClaimed.add(stakesHoldings);\n        cycleFinancial.underlyingTotalWithdrawn = cycleFinancial\n            .underlyingTotalWithdrawn\n            .add(totalUnderlyingAmountSentOut);\n\n        cycleMember.hasWithdrawn = true;\n        cycleMember.stakesClaimed = cycleMember.stakesClaimed.add(\n            stakesHoldings\n        );\n        uint256 amountDeposited = cycle.cycleStakeAmount.mul(stakesHoldings);\n        _rewardUserWithTokens(\n            cycle.cycleDuration,\n            amountDeposited,\n            cycleMember._address\n        );\n\n        _updateCycle(cycle);\n        _updateCycleFinancials(cycleFinancial);\n        _updateCycleMember(cycleMember);\n\n        return withdrawalResolution.amountToSendToMember;\n    }\n\n    function _getGroupCreator(uint256 groupId) internal returns (address) {\n          Group memory group = _getGroup(groupId);\n\n        address groupCreator = group.creatorAddress;\n\n        return groupCreator;\n    }\n\n    function deprecateContract(address newServiceAddress)\n        external\n        onlyOwner\n        onlyNonDeprecatedCalls\n    {\n        isDeprecated = true;\n        groupStorage.reAssignStorageOracle(newServiceAddress);\n        cycleStorage.reAssignStorageOracle(newServiceAddress);\n        uint256 derivativeTokenBalance =\n            derivativeToken.balanceOf(address(this));\n        derivativeToken.safeTransfer(newServiceAddress, derivativeTokenBalance);\n    }\n\n    function _rewardUserWithTokens(\n        uint256 totalCycleTimeInSeconds,\n        uint256 amountDeposited,\n        address payable cycleMemberAddress\n    ) internal {\n        uint256 numberOfRewardTokens =\n            rewardConfig.CalculateCooperativeSavingsReward(\n                totalCycleTimeInSeconds,\n                amountDeposited\n            );\n\n        if (numberOfRewardTokens > 0) {\n            xendToken.mint(cycleMemberAddress, numberOfRewardTokens);\n            groupStorage.setXendTokensReward(\n                cycleMemberAddress,\n                numberOfRewardTokens\n            );\n\n              //  increase the total number of xend token rewards distributed\n            _totalTokenReward = _totalTokenReward.add(numberOfRewardTokens);\n            \n            emit XendTokenReward(now, cycleMemberAddress, numberOfRewardTokens);\n        }\n    }\n\n    function _computeAmountToChargeAsPenalites(uint256 worthOfMemberDepositNow)\n        internal\n        returns (uint256)\n    {\n        (\n            uint256 minimum,\n            uint256 maximum,\n            uint256 exact,\n            bool applies,\n            RuleDefinition ruleDefinition\n        ) = savingsConfig.getRuleSet(PERCENTAGE_AS_PENALTY);\n\n        require(applies, \"unsupported rule defintion for rule set\");\n\n        require(\n            ruleDefinition == RuleDefinition.VALUE,\n            \"unsupported rule defintion for penalty percentage rule set\"\n        );\n\n        require(\n            worthOfMemberDepositNow > 0,\n            \"member deposit really isn't worth much\"\n        );\n\n        uint256 amountToChargeAsPenalites =\n            worthOfMemberDepositNow.mul(exact).div(100);\n        return amountToChargeAsPenalites;\n    }\n\n    function _computeXendFinanceCommisions(uint256 worthOfMemberDepositNow)\n        internal\n        returns (uint256)\n    {\n        uint256 dividend = _getDividend();\n        uint256 divisor = _getDivisor();\n\n        require(\n            worthOfMemberDepositNow > 0,\n            \"member deposit really isn't worth much\"\n        );\n\n        return worthOfMemberDepositNow.mul(dividend).div(divisor).div(100);\n    }\n\n    function _getDivisor() internal returns (uint256) {\n        (\n            uint256 minimumDivisor,\n            uint256 maximumDivisor,\n            uint256 exactDivisor,\n            bool appliesDivisor,\n            RuleDefinition ruleDefinitionDivisor\n        ) = savingsConfig.getRuleSet(XEND_FINANCE_COMMISION_DIVISOR);\n\n        require(appliesDivisor, \"unsupported rule defintion for rule set\");\n\n        require(\n            ruleDefinitionDivisor == RuleDefinition.VALUE,\n            \"unsupported rule defintion for penalty percentage rule set\"\n        );\n        return exactDivisor;\n    }\n\n    function _getDividend() internal returns (uint256) {\n        (\n            uint256 minimumDividend,\n            uint256 maximumDividend,\n            uint256 exactDividend,\n            bool appliesDividend,\n            RuleDefinition ruleDefinitionDividend\n        ) = savingsConfig.getRuleSet(XEND_FINANCE_COMMISION_DIVIDEND);\n\n        require(appliesDividend, \"unsupported rule defintion for rule set\");\n\n        require(\n            ruleDefinitionDividend == RuleDefinition.VALUE,\n            \"unsupported rule defintion for penalty percentage rule set\"\n        );\n        return exactDividend;\n    }\n\n    //Determines how much we send to the treasury and how much we send to the member\n    function _computeAmountToSendToParties(\n        uint256 totalUnderlyingAmountMemberDeposited,\n        uint256 worthOfMemberDepositNow\n    ) internal returns (WithdrawalResolution memory) {\n        (\n            uint256 minimum,\n            uint256 maximum,\n            uint256 exact,\n            bool applies,\n            RuleDefinition ruleDefinition\n        ) = savingsConfig.getRuleSet(PERCENTAGE_PAYOUT_TO_USERS);\n\n        require(applies, \"unsupported rule defintion for rule set\");\n\n        require(\n            ruleDefinition == RuleDefinition.VALUE,\n            \"unsupported rule defintion for payout  percentage rule set\"\n        );\n\n        //ensures we send what the user's investment is currently worth when his original deposit did not appreciate in value\n        if (totalUnderlyingAmountMemberDeposited >= worthOfMemberDepositNow) {\n            return WithdrawalResolution(worthOfMemberDepositNow, 0);\n        } else {\n            uint256 maxAmountUserCanBePaid =\n                _getMaxAmountUserCanBePaidConsideringInterestLimit(\n                    exact,\n                    totalUnderlyingAmountMemberDeposited\n                );\n\n            if (worthOfMemberDepositNow > maxAmountUserCanBePaid) {\n                uint256 amountToSendToTreasury =\n                    worthOfMemberDepositNow.sub(maxAmountUserCanBePaid);\n                return\n                    WithdrawalResolution(\n                        maxAmountUserCanBePaid,\n                        amountToSendToTreasury\n                    );\n            } else {\n                return WithdrawalResolution(worthOfMemberDepositNow, 0);\n            }\n        }\n    }\n\n    function _getMaxAmountUserCanBePaidConsideringInterestLimit(\n        uint256 maxPayoutPercentage,\n        uint256 totalUnderlyingAmountMemberDeposited\n    ) internal returns (uint256) {\n        uint256 percentageConsideration = 100 + maxPayoutPercentage;\n        return\n            totalUnderlyingAmountMemberDeposited\n                .mul(percentageConsideration)\n                .div(100);\n    }\n\n    function getRecordIndexLengthForCycleMembers(uint256 cycleId)\n        external\n        view\n        onlyNonDeprecatedCalls\n        returns (uint256)\n    {\n        return cycleStorage.getRecordIndexLengthForCycleMembers(cycleId);\n    }\n\n    function getRecordIndexLengthForCycleMembersByDepositor(\n        address depositorAddress\n    ) external view onlyNonDeprecatedCalls returns (uint256) {\n        return\n            cycleStorage.getRecordIndexLengthForCycleMembersByDepositor(\n                depositorAddress\n            );\n    }\n\n    function getRecordIndexLengthForGroupMembers(uint256 groupId)\n        external\n        view\n        onlyNonDeprecatedCalls\n        returns (uint256)\n    {\n        return groupStorage.getRecordIndexLengthForGroupMembersIndexer(groupId);\n    }\n\n    function getRecordIndexLengthForGroupMembersByDepositor(\n        address depositorAddress\n    ) external view onlyNonDeprecatedCalls returns (uint256) {\n        return\n            groupStorage.getRecordIndexLengthForGroupMembersIndexerByDepositor(\n                depositorAddress\n            );\n    }\n\n    function getRecordIndexLengthForGroupCycles(uint256 groupId)\n        external\n        view\n        onlyNonDeprecatedCalls\n        returns (uint256)\n    {\n        return cycleStorage.getRecordIndexLengthForGroupCycleIndexer(groupId);\n    }\n\n    function getRecordIndexLengthForCreator(address groupCreator)\n        external\n        view\n        onlyNonDeprecatedCalls\n        returns (uint256)\n    {\n        return groupStorage.getRecordIndexLengthForCreator(groupCreator);\n    }\n\n    function getSecondsLeftForCycleToEnd(uint256 cycleId)\n        external\n        view\n        onlyNonDeprecatedCalls\n        returns (uint256)\n    {\n        Cycle memory cycle = _getCycleById(cycleId);\n        require(cycle.cycleStatus == CycleStatus.ONGOING);\n        uint256 cycleEndTimeStamp =\n            cycle.cycleStartTimeStamp.add(cycle.cycleDuration);\n\n        if (cycleEndTimeStamp >= now) return cycleEndTimeStamp.sub(now);\n        else return 0;\n    }\n\n    function getSecondsLeftForCycleToStart(uint256 cycleId)\n        external\n        view\n        onlyNonDeprecatedCalls\n        returns (uint256)\n    {\n        Cycle memory cycle = _getCycleById(cycleId);\n        require(cycle.cycleStatus == CycleStatus.NOT_STARTED);\n\n        if (cycle.cycleStartTimeStamp >= now)\n            return cycle.cycleStartTimeStamp.sub(now);\n        else return 0;\n    }\n\n    function getCycleFinancials(uint256 index)\n        external\n        view\n        onlyNonDeprecatedCalls\n        returns (\n            uint256 underlyingTotalDeposits,\n            uint256 underlyingTotalWithdrawn,\n            uint256 underlyingBalance,\n            uint256 derivativeBalance,\n            uint256 underylingBalanceClaimedBeforeMaturity,\n            uint256 derivativeBalanceClaimedBeforeMaturity\n        )\n    {\n        CycleFinancial memory cycleFinancial = _getCycleFinancialByIndex(index);\n\n        return (\n            cycleFinancial.underlyingTotalDeposits,\n            cycleFinancial.underlyingTotalWithdrawn,\n            cycleFinancial.underlyingBalance,\n            cycleFinancial.derivativeBalance,\n            cycleFinancial.underylingBalanceClaimedBeforeMaturity,\n            cycleFinancial.derivativeBalanceClaimedBeforeMaturity\n        );\n    }\n\n    function getCycleByIndex(uint256 index)\n        external\n        view\n        onlyNonDeprecatedCalls\n        returns (\n            uint256 id,\n            uint256 groupId,\n            uint256 numberOfDepositors,\n            uint256 cycleStartTimeStamp,\n            uint256 cycleDuration,\n            uint256 maximumSlots,\n            bool hasMaximumSlots,\n            uint256 cycleStakeAmount,\n            uint256 totalStakes,\n            uint256 stakesClaimed,\n            CycleStatus cycleStatus,\n            uint256 stakesClaimedBeforeMaturity\n        )\n    {\n        Cycle memory cycle = _getCycleByIndex(index);\n\n        return (\n            cycle.id,\n            cycle.groupId,\n            cycle.numberOfDepositors,\n            cycle.cycleStartTimeStamp,\n            cycle.cycleDuration,\n            cycle.maximumSlots,\n            cycle.hasMaximumSlots,\n            cycle.cycleStakeAmount,\n            cycle.totalStakes,\n            cycle.stakesClaimed,\n            cycle.cycleStatus,\n            cycle.stakesClaimedBeforeMaturity\n        );\n    }\n\n    function getCycleMember(uint256 index)\n        external\n        view\n        onlyNonDeprecatedCalls\n        returns (\n            uint256 cycleId,\n            uint256 groupId,\n            uint256 totalLiquidityAsPenalty,\n            uint256 numberOfCycleStakes,\n            uint256 stakesClaimed,\n            bool exist,\n            address payable _address,\n            bool hasWithdrawn\n        )\n    {\n        CycleMember memory cycleMember = _getCycleMember(index);\n        return (\n            cycleMember.cycleId,\n            cycleMember.groupId,\n            cycleMember.totalLiquidityAsPenalty,\n            cycleMember.numberOfCycleStakes,\n            cycleMember.stakesClaimed,\n            cycleMember.exist,\n            cycleMember._address,\n            cycleMember.hasWithdrawn\n        );\n    }\n\n    function activateCycle(uint256 cycleId)\n        external\n        onlyNonDeprecatedCalls\n        onlyCycleCreatorOrMember(cycleId)\n    {\n        Cycle memory cycle = _getCycleById(cycleId);\n        CycleFinancial memory cycleFinancial =\n            _getCycleFinancialByCycleId(cycleId);\n\n        uint256 currentTimeStamp = now;\n        require(\n            cycle.cycleStatus == CycleStatus.NOT_STARTED,\n            \"Cannot activate a cycle not in the 'NOT_STARTED' state\"\n        );\n        require(\n            cycle.numberOfDepositors > 0,\n            \"Cannot activate cycle that has no depositors\"\n        );\n\n        require(\n            cycle.cycleStartTimeStamp <= currentTimeStamp,\n            \"Cycle start time has not been reached\"\n        );\n\n        uint256 derivativeAmount =\n            _lendCycleDeposit(cycleFinancial.underlyingTotalDeposits);\n\n        cycleFinancial.derivativeBalance = cycleFinancial.derivativeBalance.add(\n            derivativeAmount\n        );\n\n        cycle.cycleStartTimeStamp = currentTimeStamp;\n        _startCycle(cycle);\n        _updateCycleFinancials(cycleFinancial);\n\n        emit CycleStartedEvent(\n            cycleId,\n            currentTimeStamp,\n            block.number,\n            derivativeAmount,\n            cycleFinancial.underlyingTotalDeposits\n        );\n    }\n\n    function endCycle(uint256 cycleId) external onlyNonDeprecatedCalls {\n        _endCycle(cycleId);\n    }\n\n    function _lendCycleDeposit(uint256 underlyingTotalDeposits)\n        internal\n        returns (uint256)\n    {\n        daiToken.approve(LendingAdapterAddress, underlyingTotalDeposits);\n\n        uint256 balanceBeforeDeposit = lendingService.userShares();\n\n        lendingService.save(underlyingTotalDeposits);\n\n        uint256 balanceAfterDeposit = lendingService.userShares();\n\n        return balanceAfterDeposit.sub(balanceBeforeDeposit);\n    }\n\n    function createGroup(string calldata name, string calldata symbol)\n        external\n        onlyNonDeprecatedCalls\n    {\n        _validateGroupNameAndSymbolIsAvailable(name, symbol);\n\n        uint256 groupId = groupStorage.createGroup(name, symbol, msg.sender);\n\n        emit GroupCreated(groupId, msg.sender);\n    }\n\n    function _validateGroupNameAndSymbolIsAvailable(\n        string memory name,\n        string memory symbol\n    ) internal {\n        bytes memory nameInBytes = bytes(name); // Uses memory\n        bytes memory symbolInBytes = bytes(symbol); // Uses memory\n\n        require(nameInBytes.length > 0, \"Group name cannot be empty\");\n        require(symbolInBytes.length > 0, \"Group sysmbol cannot be empty\");\n\n        require(\n            groupStorage.doesGroupExist(name),\n            \"Group name has already been used\"\n        );\n    }\n\n    function getGroupByIndex(uint256 index)\n        external\n        view\n        onlyNonDeprecatedCalls\n        returns (\n            bool exists,\n            uint256 id,\n            string memory name,\n            string memory symbol,\n            address payable creatorAddress\n        )\n    {\n        Group memory group = _getGroupByIndex(index);\n        return (\n            group.exists,\n            group.id,\n            group.name,\n            group.symbol,\n            group.creatorAddress\n        );\n    }\n\n    function getGroupById(uint256 _id)\n        external\n        view\n        onlyNonDeprecatedCalls\n        returns (\n            bool exists,\n            uint256 id,\n            string memory name,\n            string memory symbol,\n            address payable creatorAddress\n        )\n    {\n        Group memory group = _getGroupById(_id);\n        return (\n            group.exists,\n            group.id,\n            group.name,\n            group.symbol,\n            group.creatorAddress\n        );\n    }\n\n    //\n    function createCycle(\n        uint256 groupId,\n        uint256 startTimeStamp,\n        uint256 duration,\n        uint256 maximumSlots,\n        bool hasMaximumSlots,\n        uint256 cycleStakeAmount\n    ) external onlyNonDeprecatedCalls onlyGroupCreator(groupId) {\n        _validateCycleCreationActionValid(\n            groupId,\n            maximumSlots,\n            hasMaximumSlots\n        );\n\n        uint256 cycleId =\n            cycleStorage.createCycle(\n                groupId,\n                0,\n                startTimeStamp,\n                duration,\n                maximumSlots,\n                hasMaximumSlots,\n                cycleStakeAmount,\n                0,\n                0,\n                CycleStatus.NOT_STARTED,\n                0\n            );\n\n        cycleStorage.createCycleFinancials(cycleId, groupId, 0, 0, 0, 0, 0, 0);\n\n        emit CycleCreated(\n            cycleId,\n            maximumSlots,\n            hasMaximumSlots,\n            cycleStakeAmount,\n            startTimeStamp,\n            duration\n        );\n    }\n\n    function joinCycle(uint256 cycleId, uint256 numberOfStakes)\n        external\n        onlyNonDeprecatedCalls\n    {\n        address payable depositorAddress = msg.sender;\n        _joinCycle(cycleId, numberOfStakes, depositorAddress);\n    }\n}\n"}}}