{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"SimpleERC20Token.sol":{"content":"pragma solidity 0.5.7;\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// S.J.G.S.M. contract\r\n//\r\n// Symbol        : SJGSM\r\n// Name          : S.J.G.S.M.\r\n// Total supply  : 1962\r\n// Decimals      : 18\r\n//\r\n// (c) S.J.G.S.M. 2021. MIT Licence. https://sjgsm.es\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract SimpleERC20Token {\r\n    // Track how many tokens are owned by each address.\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    // Modify this section\r\n    string public name = \"S.J.G.S.M.\";\r\n    string public symbol = \"SJGSM\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 1962 * (uint256(10) ** decimals);\r\n    \r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    constructor() public {\r\n        // Initially assign all tokens to the contract's creator.\r\n        balanceOf[msg.sender] = 1962000000000000000000;\r\n        emit Transfer(address(0), msg.sender,1962000000000000000000);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= value);\r\n\r\n        balanceOf[msg.sender] -= value;  // deduct from sender's balance\r\n        balanceOf[to] += value;          // add to recipient's balance\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(value <= balanceOf[from]);\r\n        require(value <= allowance[from][msg.sender]);\r\n\r\n        balanceOf[from] -= value;\r\n        balanceOf[to] += value;\r\n        allowance[from][msg.sender] -= value;\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n}"}}}