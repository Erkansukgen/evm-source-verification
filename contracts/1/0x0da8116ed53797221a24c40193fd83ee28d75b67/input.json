{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"ManagedMultiWallet.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n  The wallet allows depositing/withdrawing funds to/from internal keyed storage.\r\n  For convenience keys in the storage are public \"address\"s, and access is controlled by\r\n  ownership of a corresponding private key.\r\n\r\n  Public APIs:\r\n    * put(address): To deposit money into a wallet keyed by |pub|.\r\n    * get(signature): To withdraw money from wallet |pub|,\r\n      sign sender's (your) wallet address by the |pub|'s private key.\r\n      Note that API expects r,s,v values (standard for 65 byte ecdsa secp256k1 signature).\r\n    * OWNER ONLY: rem(address): Clear wallet by sending money to the owner.\r\n*/\r\ncontract ManagedMultiWallet {\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    mapping(address => uint256) public wallets;\r\n    address public owner;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    function put(address _pub) external payable {\r\n        wallets[_pub] += msg.value;\r\n    }\r\n\r\n    function peek(address _pub) external view returns (uint256) {\r\n        return wallets[_pub];\r\n    }\r\n\r\n    // |r|, |s|, |v| are 32+32+1 bytes of 65 byte ecdsa secp256k1 signature\r\n    // |v| must be 27 or 28 (0x1b or 0x1c)\r\n    function get(\r\n        bytes32 _r,\r\n        bytes32 _s,\r\n        uint8 _v\r\n    ) external {\r\n        require(_v == 27 || _v == 28);\r\n        address signer = ecrecover(\r\n            bytes32(uint256(uint160(msg.sender))),\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n        require(signer != address(0) && wallets[signer] != 0);\r\n        payable(msg.sender).transfer(wallets[signer]);\r\n        wallets[signer] = 0;\r\n    }\r\n\r\n    function rem(address _pub) external onlyOwner {\r\n        require(wallets[_pub] != 0);\r\n        payable(owner).transfer(wallets[_pub]);\r\n        wallets[_pub] = 0;\r\n    }\r\n}"}}}