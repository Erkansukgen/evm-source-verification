{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Veis.sol":{"content":"pragma solidity >=0.5.0;\r\n\r\ncontract VEIS_DATA {\r\n    string public standard = 'veis.io';//veis.io\r\n    string public name = 'VEIS';//veis\r\n    string public symbol = 'VS';//veis\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 900000 ether;\r\n    uint256 public maxLeval=631;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n    address public admin;\r\n    address public computeContract;\r\n    \r\n    struct SYSTEM{\r\n        uint64 StarAngel;\r\n        uint64 StarLeval;\r\n        uint256 maxAirDrop;\r\n        uint256 alreadyBuy;\r\n        uint256 ObliterateTime;\r\n    }\r\n    struct USER{\r\n        uint64 id;\r\n        uint64 referee;\r\n        uint64 grade;\r\n        bool Airdrop;\r\n        uint256 totalInputEth;\r\n    }\r\n    \r\n    constructor () public{\r\n        admin=msg.sender;\r\n        sys.maxAirDrop = 70000 ether;\r\n        balanceOf[admin]=900000 ether;\r\n        sys.StarLeval = 1;\r\n    }\r\n    modifier OnlyCompute() {\r\n        require(msg.sender == computeContract,'only compute Contract');\r\n        _;\r\n    }\r\n    function setCompute(address compute)public{\r\n        require(msg.sender == admin,'msg.sender == admin');\r\n        computeContract =compute;\r\n    }\r\n    function setAdmin(address newAdmin)public{\r\n        require(msg.sender == admin,'msg.sender == admin');\r\n        admin = newAdmin;\r\n    }\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to !=address(0x0));\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    /*******************************************************************************************/\r\n    mapping(address =>USER)public StarAngels;\r\n    mapping(uint64 =>address)public StarAngelID;\r\n    SYSTEM public sys;\r\n    function issue(address addr,uint256 value)public OnlyCompute returns(uint256 ret){\r\n        uint256 v=value;\r\n        require(totalSupply + v > totalSupply,'totalSupply + v > totalSupply');\r\n        totalSupply += v;\r\n        balanceOf[addr]+=v;\r\n        return v;\r\n    }\r\n    function deleteVies(address addr,uint256 value)external OnlyCompute returns(bool ret){\r\n        require(balanceOf[addr] >= value,'Insufficient vies');\r\n        balanceOf[addr] -= value;\r\n        balanceOf[admin]+= (value /5);\r\n        totalSupply -= (value/5*4);\r\n        return true;\r\n    }\r\n    function sendAirdrop(address addr,uint256 value) external OnlyCompute returns(bool ret){\r\n        require(value <= sys.maxAirDrop,'Airdrop has been released over');\r\n        USER storage u=StarAngels[addr];\r\n        u.Airdrop =true;\r\n        issue(addr,value);\r\n        sys.maxAirDrop -= value;\r\n        return true;\r\n    }\r\n    function addAlreadyBuy(address user,uint256 addValue,uint256 eth) external OnlyCompute{\r\n        require(sys.alreadyBuy + addValue > sys.alreadyBuy);\r\n        sys.alreadyBuy += addValue;\r\n        StarAngels[user].totalInputEth += eth;\r\n    }\r\n    function upDataObliterateTime() external OnlyCompute{\r\n        sys.ObliterateTime = block.timestamp;\r\n    }\r\n    function setNextLeval()external OnlyCompute returns(uint64 leval){\r\n        if(sys.StarLeval == maxLeval)return 0;\r\n        sys.StarLeval++;\r\n        sys.alreadyBuy = 0;\r\n        if(sys.StarLeval % 50 == 0) sys.ObliterateTime = block.timestamp;\r\n    }\r\n    function setReferee(address user,uint64 referee)external OnlyCompute returns(uint64 ret){\r\n        StarAngels[user].referee = referee;\r\n        return referee;\r\n    }\r\n    function BecomeStarAngel(address user,uint64 referee,uint64 grade)external OnlyCompute returns(uint64 id,uint64 refree){\r\n        USER storage u =StarAngels[user];\r\n        if(u.id==0){\r\n            StarAngelID[++sys.StarAngel]=user;\r\n            u.referee = referee;\r\n            u.id = sys.StarAngel;\r\n        }\r\n        if(grade <= u.grade)return (0,0);\r\n        u.grade = grade;\r\n        return (u.id,u.referee);\r\n    }\r\n}\r\n\r\ncontract VEIS_COMPUTE{\r\n    VEIS_DATA public veisContract=VEIS_DATA(0x9a37DBea6a90A59b07357B0fA4921BB1B0e0205B);\r\n    address payable ColdPurse=0xc5dFeFA76322Ec570E36f0ABD61F702732bDca7E;\r\n    uint32[5] public airCount=[uint32(10000),15000,20000,15000,10000];\r\n    \r\n    address admin;\r\n    event OnAirDrop(address indexed addr,uint256 value);\r\n    event OnBecomeStarAngel(address indexed user,uint256 InputETH,uint64 id,uint64 refe);\r\n    event OnAllotETH(address indexed user,address indexed sour,uint256 eth);\r\n    event OnDerivation(address indexed user,uint256 InputETH,uint256 OutPutVies,uint256 refe);\r\n    event OnObliterate(address indexed user,uint256 eth,uint256 vies);//\r\n    event OnNextLeval(uint64 newLeval);\r\n    struct SYSTEM{\r\n        uint64 StarAngel;\r\n        uint64 StarLeval;\r\n        uint256 maxAirDrop;\r\n        uint256 alreadyBuy;\r\n        uint256 ObliterateTime;\r\n    }\r\n    struct USER{\r\n        uint64 id;\r\n        uint64 referee;\r\n        uint64 grade;\r\n        bool Airdrop;\r\n        uint256 totalInputEth;\r\n    }\r\n    fallback ()external payable{}\r\n    //function receive () external payable{}\r\n    constructor () public{\r\n        //ColdPurse =(msg.sender); //address(uint160(addr));\r\n        admin=msg.sender;\r\n    }\r\n    \r\n    \r\n    function setColdPurse(address addr)public{\r\n        require(msg.sender == admin,'only admin');\r\n        ColdPurse = address(uint160(addr));\r\n    }\r\n    function setDataComtrct(address addr)public{\r\n        require(msg.sender == admin,'only admin');\r\n        veisContract = VEIS_DATA(addr);\r\n    }\r\n    function setDefult()public{\r\n        veisContract.BecomeStarAngel(0x90420e8F26c58721bF8f4281653AC8d5DE20b94a,0,5);\r\n        veisContract.BecomeStarAngel(0x3Ef58D2f10774103D3F09c596818e2226c014918,1,5);\r\n        veisContract.BecomeStarAngel(0xfE2EcbA7D4bec7E0D9adA612AF552D49ce8D827e,2,5);\r\n        veisContract.BecomeStarAngel(0xAaEBFBf1B80e59ACC97FC153EA96D5124515628b,2,5);\r\n        veisContract.BecomeStarAngel(0xe285c9F242c73855d09D5AFf4Fde4A336F2E27fD,2,5);\r\n        veisContract.BecomeStarAngel(0xE549c730E29DD31E2723Cd9B3b362E9e5685F662,2,5);\r\n        veisContract.BecomeStarAngel(0x46252e1a9AdF43aE1a95ea9BD14C456F3F1742aa,2,5);\r\n    }\r\n\r\n    function allotETH(address addr,uint256 value,uint64 referee)internal{\r\n        USER memory u;\r\n        uint64 id=referee;\r\n        address star;\r\n        uint256 allot;\r\n        uint256 eth = value;\r\n        for(uint8 i=0;i<3;i++){\r\n            star = veisContract.StarAngelID(id);\r\n            (u.id,u.referee,u.grade,u.Airdrop,u.totalInputEth)=veisContract.StarAngels(star);\r\n            if(u.grade == 1)allot = 8;\r\n            else if(u.grade == 2) allot = 10;\r\n            else if(u.grade == 3) allot =12;\r\n            else if(u.grade == 4) allot = 16;\r\n            else if(u.grade == 5) allot =20;\r\n            \r\n            allot=eth * allot /100;\r\n            emit OnAllotETH(star,addr,allot);\r\n            address(uint160(star)).transfer(allot);\r\n            id=u.referee;\r\n            if(id == 0)break;\r\n            eth = eth / 2;\r\n        }\r\n        ColdPurse.transfer(address(this).balance);\r\n    }\r\n    function air_drop()public{\r\n        USER memory u;\r\n        (u.id,u.referee,u.grade,u.Airdrop,u.totalInputEth)=veisContract.StarAngels(msg.sender);\r\n        SYSTEM memory s;\r\n        (s.StarAngel,s.StarLeval,s.maxAirDrop,s.alreadyBuy,s.ObliterateTime)=veisContract.sys();\r\n        \r\n        require(!u.Airdrop,'already received airdrop');\r\n        uint256 eth=msg.sender.balance;\r\n        uint256 vies;\r\n        uint8 leval;\r\n        require(eth > 0.1 ether,'eth > 0.1 ether');\r\n        \r\n        if(eth >= 15 ether ){vies = 50 ether; leval = 4;}\r\n        else if(eth>=10 ether){vies = 30 ether;leval = 3;}\r\n        else if(eth >=5 ether){vies = 20 ether;leval = 2;}\r\n        else if(eth>=2 ether){vies = 10 ether;leval = 1;}\r\n        else if(eth >=0.1 ether){vies = 5 ether;}\r\n        \r\n        require(s.maxAirDrop > vies,'Airdrop has been released over');\r\n        require(airCount[leval]-- >1,'Airdrop has been over of this type');\r\n        veisContract.sendAirdrop(msg.sender,vies);\r\n        emit OnAirDrop(msg.sender,vies);\r\n    }\r\n    function Derivation(uint64 referee)public payable{\r\n        require(msg.value > 0 ,'Eth cannot be 0');\r\n        SYSTEM memory sys;\r\n        (sys.StarAngel,sys.StarLeval,sys.maxAirDrop,sys.alreadyBuy,sys.ObliterateTime)=veisContract.sys();\r\n        USER memory u;\r\n        (u.id,u.referee,u.grade,u.Airdrop,u.totalInputEth)=veisContract.StarAngels(msg.sender);\r\n        if(u.referee == 0){\r\n            require(referee > 0 && referee <= sys.StarAngel,'Incorrect recommendation code');\r\n            u.referee = referee;\r\n            veisContract.setReferee(msg.sender,referee);\r\n        }\r\n        uint256 eth = msg.value;\r\n        uint256 price =6 + sys.StarLeval*2;\r\n        uint256 LevalVies=sys.StarLeval * 100 ether;\r\n        require(sys.alreadyBuy < LevalVies,'Over total');\r\n        uint256 vies = eth *100000 / price;\r\n        if(vies + sys.alreadyBuy > LevalVies){\r\n            vies = LevalVies - sys.alreadyBuy;\r\n            eth = vies * price /100000;\r\n            (msg.sender).transfer(msg.value - eth);\r\n        }\r\n        veisContract.addAlreadyBuy(msg.sender,vies,eth);\r\n        allotETH(msg.sender,eth,u.referee);\r\n        veisContract.issue(msg.sender,vies);\r\n        emit OnDerivation(msg.sender,eth,vies,u.referee);\r\n        if(vies + sys.alreadyBuy >= LevalVies){\r\n            emit test(vies,sys.alreadyBuy,LevalVies,sys.StarLeval);\r\n            veisContract.setNextLeval();\r\n            emit OnNextLeval(sys.StarLeval+1);\r\n        }\r\n    }\r\n    event test(uint256 vies,uint256 alreadyBuy,uint256 LevalVies,uint256 StarLeval);\r\n    function BecomeStarAngel(uint64 referee)public {\r\n        USER memory u;\r\n        (u.id,u.referee,u.grade,u.Airdrop,u.totalInputEth)=veisContract.StarAngels(msg.sender);\r\n        uint256 eth = u.totalInputEth;\r\n        require(eth >= 0.1 ether,'Become Star Angel eth less 0.1');\r\n        uint64 grade;\r\n        if(eth >= 10 ether)grade = 5;\r\n        else if(eth >= 5 ether)grade = 4;\r\n        else if(eth >= 1 ether) grade =3;\r\n        else if(eth >= 0.5 ether)grade =2;\r\n        else if(eth >=0.1 ether) grade = 1;\r\n        \r\n        uint64 refe;\r\n        uint64 id;\r\n        (id,refe)=veisContract.BecomeStarAngel(msg.sender,referee,grade);\r\n        require(refe>0,'Incorrect references');\r\n        emit OnBecomeStarAngel(msg.sender,eth,id,refe);\r\n    }\r\n    function Obliterate(uint256 value)public{\r\n        require(value > 0,'Must be greater than 0');\r\n        require(value <= veisContract.balanceOf(msg.sender),'Insufficient vies');\r\n        SYSTEM memory sys;\r\n        (sys.StarAngel,sys.StarLeval,sys.maxAirDrop,sys.alreadyBuy,sys.ObliterateTime)=veisContract.sys();\r\n        \r\n        require(sys.ObliterateTime + 86400 >= block.timestamp);\r\n        uint64 leval=sys.StarLeval / 50 *50 ;\r\n        uint64 price = 6 +leval*2;\r\n        uint256 eth = value * price /100000;\r\n        require(eth <= address(this).balance,'Insufficient funds in fund pool');\r\n        require(veisContract.deleteVies(msg.sender,value),'Vanishing failure');\r\n        (msg.sender).transfer(eth);\r\n        emit OnObliterate(msg.sender,eth,value);\r\n    }\r\n    function destroy() public{\r\n        require(msg.sender == admin,'msg.sender == owner');\r\n        selfdestruct(msg.sender);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}}}