{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 9999
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Composite_Vaults/Eth_Usdc/CompositeVaultBptEthUsdc.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private initializing;\n\n    /**\n     * @dev Modifier to use in the initializer function of a contract.\n     */\n    modifier initializer() {\n        require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n        bool isTopLevelCall = !initializing;\n        if (isTopLevelCall) {\n            initializing = true;\n            initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function isConstructor() private view returns (bool) {\n        // extcodesize checks the size of the code stored in an address, and\n        // address returns the current address. Since the code is still not\n        // deployed when running a constructor, any checks on its code size will\n        // yield zero, making it an effective way to detect if a contract is\n        // under construction or not.\n        address self = address(this);\n        uint256 cs;\n        assembly { cs := extcodesize(self) }\n        return cs == 0;\n    }\n\n    // Reserved storage space to allow for layout changes in the future.\n    uint256[50] private ______gap;\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextUpgradeSafe is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n\n\n    }\n\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20MinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name, symbol);\n    }\n\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\n\n\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n\n    }\n\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n\n    uint256[44] private __gap;\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ninterface Converter {\n    function convert(address) external returns (uint);\n}\n\ninterface ICompositeVault {\n    function cap() external view returns (uint);\n    function getConverter() external view returns (address);\n    function getVaultMaster() external view returns (address);\n    function balance() external view returns (uint);\n    function tvl() external view returns (uint); // total dollar value\n    function token() external view returns (address);\n    function available() external view returns (uint);\n    function accept(address _input) external view returns (bool);\n\n    function earn() external;\n    function harvest(address reserve, uint amount) external;\n    function addNewCompound(uint, uint) external;\n\n    function withdraw_fee(uint _shares) external view returns (uint);\n    function calc_token_amount_deposit(address _input, uint _amount) external view returns (uint);\n    function calc_add_liquidity(uint _amount0, uint _amount1) external view returns (uint);\n    function calc_token_amount_withdraw(uint _shares, address _output) external view returns (uint);\n    function calc_remove_liquidity(uint _shares) external view returns (uint _amount0, uint _amount1);\n\n    function getPricePerFullShare() external view returns (uint);\n    function get_virtual_price() external view returns (uint); // average dollar value of vault share token\n\n    function deposit(address _input, uint _amount, uint _min_mint_amount) external returns (uint);\n    function depositFor(address _account, address _to, address _input, uint _amount, uint _min_mint_amount) external returns (uint _mint_amount);\n    function addLiquidity(uint _amount0, uint _amount1, uint _min_mint_amount) external returns (uint);\n    function addLiquidityFor(address _account, address _to, uint _amount0, uint _amount1, uint _min_mint_amount) external returns (uint _mint_amount);\n    function withdraw(uint _shares, address _output, uint _min_output_amount) external returns (uint);\n    function withdrawFor(address _account, uint _shares, address _output, uint _min_output_amount) external returns (uint _output_amount);\n\n    function harvestStrategy(address _strategy) external;\n    function harvestAllStrategies() external;\n}\n\ninterface IVaultMaster {\n    function bank(address) view external returns (address);\n    function isVault(address) view external returns (bool);\n    function isController(address) view external returns (bool);\n    function isStrategy(address) view external returns (bool);\n\n    function slippage(address) view external returns (uint);\n    function convertSlippage(address _input, address _output) view external returns (uint);\n\n    function valueToken() view external returns (address);\n    function govVault() view external returns (address);\n    function insuranceFund() view external returns (address);\n    function performanceReward() view external returns (address);\n\n    function govVaultProfitShareFee() view external returns (uint);\n    function gasFee() view external returns (uint);\n    function insuranceFee() view external returns (uint);\n\n    function withdrawalProtectionFee() view external returns (uint);\n}\n\ninterface IController {\n    function vault() external view returns (address);\n\n    function strategyLength() external view returns (uint);\n    function strategyBalance() external view returns (uint);\n\n    function getStrategyCount() external view returns(uint);\n    function strategies(uint _stratId) external view returns (address _strategy, uint _quota, uint _percent);\n    function getBestStrategy() external view returns (address _strategy);\n\n    function want() external view returns (address);\n\n    function balanceOf() external view returns (uint);\n    function withdraw_fee(uint _amount) external view returns (uint); // eg. 3CRV => pJar: 0.5% (50/10000)\n    function investDisabled() external view returns (bool);\n\n    function withdraw(uint) external returns (uint _withdrawFee);\n    function earn(address _token, uint _amount) external;\n\n    function harvestStrategy(address _strategy) external;\n    function harvestAllStrategies() external;\n}\n\ninterface ILpPairConverter {\n    function lpPair() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n\n    function accept(address _input) external view returns (bool);\n    function get_virtual_price() external view returns (uint);\n\n    function convert_rate(address _input, address _output, uint _inputAmount) external view returns (uint _outputAmount);\n    function calc_add_liquidity(uint _amount0, uint _amount1) external view returns (uint);\n    function calc_remove_liquidity(uint _shares) external view returns (uint _amount0, uint _amount1);\n\n    function convert(address _input, address _output, address _to) external returns (uint _outputAmount);\n    function add_liquidity(address _to) external returns (uint _outputAmount);\n    function remove_liquidity(address _to) external returns (uint _amount0, uint _amount1);\n}\n\nabstract contract CompositeVaultBase is ERC20UpgradeSafe, ICompositeVault {\n    using Address for address;\n    using SafeMath for uint;\n    using SafeERC20 for IERC20;\n\n    IERC20 public basedToken;\n\n    IERC20 public token0;\n    IERC20 public token1;\n\n    uint public min = 9500;\n    uint public constant max = 10000;\n\n    uint public earnLowerlimit = 1; // minimum to invest\n    uint public depositLimit = 0; // limit for each deposit (set 0 to disable)\n    uint private totalDepositCap = 0; // initial cap (set 0 to disable)\n\n    address public governance;\n    address public controller;\n\n    IVaultMaster vaultMaster;\n    ILpPairConverter public basedConverter; // converter for basedToken (SLP or BPT or UNI)\n\n    mapping(address => address) public converterMap; // non-core token => converter\n\n    bool public acceptContractDepositor = false;\n    mapping(address => bool) public whitelistedContract;\n    bool private _mutex;\n\n    // variable used for avoid the call of mint and redeem in the same tx\n    bytes32 private _minterBlock;\n\n    uint public totalPendingCompound;\n    uint public startReleasingCompoundBlk;\n    uint public endReleasingCompoundBlk;\n\n    function initialize(IERC20 _basedToken, IERC20 _token0, IERC20 _token1, IVaultMaster _vaultMaster) public initializer {\n        __ERC20_init(_getName(), _getSymbol());\n        basedToken = _basedToken;\n        token0 = _token0;\n        token1 = _token1;\n        vaultMaster = _vaultMaster;\n        governance = msg.sender;\n    }\n\n    function _getName() internal virtual view returns (string memory);\n\n    function _getSymbol() internal virtual view returns (string memory);\n\n    /**\n     * @dev Throws if called by a not-whitelisted contract while we do not accept contract depositor.\n     */\n    modifier checkContract(address _account) {\n        if (!acceptContractDepositor && !whitelistedContract[_account] && (_account != vaultMaster.bank(address(this)))) {\n            require(!address(_account).isContract() && _account == tx.origin, \"contract not support\");\n        }\n        _;\n    }\n\n    modifier _non_reentrant_() {\n        require(!_mutex, \"reentry\");\n        _mutex = true;\n        _;\n        _mutex = false;\n    }\n\n    function setAcceptContractDepositor(bool _acceptContractDepositor) external {\n        require(msg.sender == governance, \"!governance\");\n        acceptContractDepositor = _acceptContractDepositor;\n    }\n\n    function whitelistContract(address _contract) external {\n        require(msg.sender == governance, \"!governance\");\n        whitelistedContract[_contract] = true;\n    }\n\n    function unwhitelistContract(address _contract) external {\n        require(msg.sender == governance, \"!governance\");\n        whitelistedContract[_contract] = false;\n    }\n\n    function cap() external override view returns (uint) {\n        return totalDepositCap;\n    }\n\n    function getConverter() external override view returns (address) {\n        return address(basedConverter);\n    }\n\n    function getVaultMaster() external override view returns (address) {\n        return address(vaultMaster);\n    }\n\n    function accept(address _input) external override view returns (bool) {\n        return basedConverter.accept(_input);\n    }\n\n    function addNewCompound(uint _newCompound, uint _blocksToReleaseCompound) external override {\n        require(msg.sender == governance || vaultMaster.isStrategy(msg.sender), \"!authorized\");\n        if (_blocksToReleaseCompound == 0) {\n            totalPendingCompound = 0;\n            startReleasingCompoundBlk = 0;\n            endReleasingCompoundBlk = 0;\n        } else {\n            totalPendingCompound = pendingCompound().add(_newCompound);\n            startReleasingCompoundBlk = block.number;\n            endReleasingCompoundBlk = block.number.add(_blocksToReleaseCompound);\n        }\n    }\n\n    function pendingCompound() public view returns (uint) {\n        if (totalPendingCompound == 0 || endReleasingCompoundBlk <= block.number) return 0;\n        return totalPendingCompound.mul(endReleasingCompoundBlk.sub(block.number)).div(endReleasingCompoundBlk.sub(startReleasingCompoundBlk).add(1));\n    }\n\n    function balance() public override view returns (uint _balance) {\n        _balance = basedToken.balanceOf(address(this)).add(IController(controller).balanceOf()).sub(pendingCompound());\n    }\n\n    function tvl() public override view returns (uint) {\n        return balance().mul(basedConverter.get_virtual_price()).div(1e18);\n    }\n\n    function setMin(uint _min) external {\n        require(msg.sender == governance, \"!governance\");\n        min = _min;\n    }\n\n    function setGovernance(address _governance) external {\n        require(msg.sender == governance, \"!governance\");\n        governance = _governance;\n    }\n\n    function setController(address _controller) external {\n        require(msg.sender == governance, \"!governance\");\n        require(IController(_controller).want() == address(basedToken), \"!token\");\n        controller = _controller;\n    }\n\n    function setConverter(ILpPairConverter _converter) external {\n        require(msg.sender == governance, \"!governance\");\n        require(_converter.lpPair() == address(basedToken), \"!token\");\n        basedConverter = _converter;\n    }\n\n    function setConverterMap(address _token, address _converter) external {\n        require(msg.sender == governance, \"!governance\");\n        converterMap[_token] = _converter;\n    }\n\n    function setVaultMaster(IVaultMaster _vaultMaster) external {\n        require(msg.sender == governance, \"!governance\");\n        vaultMaster = _vaultMaster;\n    }\n\n    function setEarnLowerlimit(uint _earnLowerlimit) external {\n        require(msg.sender == governance, \"!governance\");\n        earnLowerlimit = _earnLowerlimit;\n    }\n\n    function setCap(uint _cap) external {\n        require(msg.sender == governance, \"!governance\");\n        totalDepositCap = _cap;\n    }\n\n    function setDepositLimit(uint _limit) external {\n        require(msg.sender == governance, \"!governance\");\n        depositLimit = _limit;\n    }\n\n    function token() public override view returns (address) {\n        return address(basedToken);\n    }\n\n    // Custom logic in here for how much the vault allows to be borrowed\n    // Sets minimum required on-hand to keep small withdrawals cheap\n    function available() public override view returns (uint) {\n        return basedToken.balanceOf(address(this)).mul(min).div(max);\n    }\n\n    function earn() public override {\n        if (controller != address(0)) {\n            IController _contrl = IController(controller);\n            if (!_contrl.investDisabled()) {\n                uint _bal = available();\n                if (_bal >= earnLowerlimit) {\n                    basedToken.safeTransfer(controller, _bal);\n                    _contrl.earn(address(basedToken), _bal);\n                }\n            }\n        }\n    }\n\n    // Only allows to earn some extra yield from non-core tokens\n    function earnExtra(address _token) external {\n        require(msg.sender == governance, \"!governance\");\n        require(converterMap[_token] != address(0), \"!converter\");\n        require(address(_token) != address(basedToken), \"token\");\n        require(address(_token) != address(this), \"share\");\n        uint _amount = IERC20(_token).balanceOf(address(this));\n        address _converter = converterMap[_token];\n        IERC20(_token).safeTransfer(_converter, _amount);\n        Converter(_converter).convert(_token);\n    }\n\n    function withdraw_fee(uint _shares) public override view returns (uint) {\n        return (controller == address(0)) ? 0 : IController(controller).withdraw_fee(_shares);\n    }\n\n    function calc_token_amount_deposit(address _input, uint _amount) external override view returns (uint) {\n        return basedConverter.convert_rate(_input, address(basedToken), _amount).mul(1e18).div(getPricePerFullShare());\n    }\n\n    function calc_add_liquidity(uint _amount0, uint _amount1) external override view returns (uint) {\n        return basedConverter.calc_add_liquidity(_amount0, _amount1).mul(1e18).div(getPricePerFullShare());\n    }\n\n    function _calc_shares_to_amount_withdraw(uint _shares) internal view returns (uint) {\n        uint _withdrawFee = withdraw_fee(_shares);\n        if (_withdrawFee > 0) {\n            _shares = _shares.sub(_withdrawFee);\n        }\n        uint _totalSupply = totalSupply();\n        return (_totalSupply == 0) ? _shares : (balance().mul(_shares)).div(_totalSupply);\n    }\n\n    function calc_token_amount_withdraw(uint _shares, address _output) external override view returns (uint) {\n        uint r = _calc_shares_to_amount_withdraw(_shares);\n        if (_output != address(basedToken)) {\n            r = basedConverter.convert_rate(address(basedToken), _output, r);\n        }\n        return r.mul(getPricePerFullShare()).div((1e18));\n    }\n\n    function calc_remove_liquidity(uint _shares) external override view returns (uint _amount0, uint _amount1) {\n        uint r = _calc_shares_to_amount_withdraw(_shares);\n        (_amount0, _amount1) = basedConverter.calc_remove_liquidity(r);\n        uint _getPricePerFullShare = getPricePerFullShare();\n        _amount0 = _amount0.mul(_getPricePerFullShare).div((1e18));\n        _amount1 = _amount1.mul(_getPricePerFullShare).div((1e18));\n    }\n\n    function deposit(address _input, uint _amount, uint _min_mint_amount) external override returns (uint) {\n        return depositFor(msg.sender, msg.sender, _input, _amount, _min_mint_amount);\n    }\n\n    function depositFor(address _account, address _to, address _input, uint _amount, uint _min_mint_amount) public override checkContract(_account) _non_reentrant_ returns (uint _mint_amount) {\n        uint _pool = balance();\n        require(totalDepositCap == 0 || _pool <= totalDepositCap, \">totalDepositCap\");\n        uint _before = basedToken.balanceOf(address(this));\n        if (_input == address(basedToken)) {\n            basedToken.safeTransferFrom(_account, address(this), _amount);\n        } else {\n            // require(basedConverter.convert_rate(_input, address(basedToken), _amount) > 0, \"rate=0\");\n            uint _before0 = token0.balanceOf(address(this));\n            uint _before1 = token1.balanceOf(address(this));\n            IERC20(_input).safeTransferFrom(_account, address(basedConverter), _amount);\n            basedConverter.convert(_input, address(basedToken), address(this));\n            uint _after0 = token0.balanceOf(address(this));\n            uint _after1 = token1.balanceOf(address(this));\n            if (_after0 > _before0) {\n                token0.safeTransfer(_account, _after0.sub(_before0));\n            }\n            if (_after1 > _before1) {\n                token1.safeTransfer(_account, _after1.sub(_before1));\n            }\n        }\n        uint _after = basedToken.balanceOf(address(this));\n        _amount = _after.sub(_before); // additional check for deflationary tokens\n        require(depositLimit == 0 || _amount <= depositLimit, \">depositLimit\");\n        require(_amount > 0, \"no token\");\n        _mint_amount = _deposit(_to, _pool, _amount);\n        require(_mint_amount >= _min_mint_amount, \"slippage\");\n    }\n\n    function addLiquidity(uint _amount0, uint _amount1, uint _min_mint_amount) external override returns (uint) {\n        return addLiquidityFor(msg.sender, msg.sender, _amount0, _amount1, _min_mint_amount);\n    }\n\n    function addLiquidityFor(address _account, address _to, uint _amount0, uint _amount1, uint _min_mint_amount) public override checkContract(_account) _non_reentrant_ returns (uint _mint_amount) {\n        require(msg.sender == _account || msg.sender == vaultMaster.bank(address(this)), \"!bank && !yourself\");\n        uint _pool = balance();\n        require(totalDepositCap == 0 || _pool <= totalDepositCap, \">totalDepositCap\");\n        uint _beforeToken = basedToken.balanceOf(address(this));\n        uint _before0 = token0.balanceOf(address(this));\n        uint _before1 = token1.balanceOf(address(this));\n        token0.safeTransferFrom(_account, address(basedConverter), _amount0);\n        token1.safeTransferFrom(_account, address(basedConverter), _amount1);\n        basedConverter.add_liquidity(address(this));\n        uint _afterToken = basedToken.balanceOf(address(this));\n        uint _after0 = token0.balanceOf(address(this));\n        uint _after1 = token1.balanceOf(address(this));\n        uint _totalDepositAmount = _afterToken.sub(_beforeToken); // additional check for deflationary tokens\n        require(depositLimit == 0 || _totalDepositAmount <= depositLimit, \">depositLimit\");\n        require(_totalDepositAmount > 0, \"no token\");\n        if (_after0 > _before0) {\n            token0.safeTransfer(_account, _after0.sub(_before0));\n        }\n        if (_after1 > _before1) {\n            token1.safeTransfer(_account, _after1.sub(_before1));\n        }\n        _mint_amount = _deposit(_to, _pool, _totalDepositAmount);\n        require(_mint_amount >= _min_mint_amount, \"slippage\");\n    }\n\n    function _deposit(address _mintTo, uint _pool, uint _amount) internal returns (uint _shares) {\n        if (totalSupply() == 0) {\n            _shares = _amount;\n        } else {\n            _shares = (_amount.mul(totalSupply())).div(_pool);\n        }\n\n        if (_shares > 0) {\n            earn();\n\n            _minterBlock = keccak256(abi.encodePacked(tx.origin, block.number));\n            _mint(_mintTo, _shares);\n        }\n    }\n\n    // Used to swap any borrowed reserve over the debt limit to liquidate to 'token'\n    function harvest(address reserve, uint amount) external override {\n        require(msg.sender == controller, \"!controller\");\n        require(reserve != address(basedToken), \"basedToken\");\n        IERC20(reserve).safeTransfer(controller, amount);\n    }\n\n    function harvestStrategy(address _strategy) external override {\n        require(msg.sender == governance || msg.sender == vaultMaster.bank(address(this)), \"!governance && !bank\");\n        IController(controller).harvestStrategy(_strategy);\n    }\n\n    function harvestAllStrategies() external override {\n        require(msg.sender == governance || msg.sender == vaultMaster.bank(address(this)), \"!governance && !bank\");\n        IController(controller).harvestAllStrategies();\n    }\n\n    function withdraw(uint _shares, address _output, uint _min_output_amount) external override returns (uint) {\n        return withdrawFor(msg.sender, _shares, _output, _min_output_amount);\n    }\n\n    // No rebalance implementation for lower fees and faster swaps\n    function withdrawFor(address _account, uint _shares, address _output, uint _min_output_amount) public override _non_reentrant_ returns (uint _output_amount) {\n        // Check that no mint has been made in the same block from the same EOA\n        require(keccak256(abi.encodePacked(tx.origin, block.number)) != _minterBlock, \"REENTR MINT-BURN\");\n\n        _output_amount = (balance().mul(_shares)).div(totalSupply());\n        _burn(msg.sender, _shares);\n\n        uint _withdrawalProtectionFee = vaultMaster.withdrawalProtectionFee();\n        if (_withdrawalProtectionFee > 0) {\n            uint _withdrawalProtection = _output_amount.mul(_withdrawalProtectionFee).div(10000);\n            _output_amount = _output_amount.sub(_withdrawalProtection);\n        }\n\n        // Check balance\n        uint b = basedToken.balanceOf(address(this));\n        if (b < _output_amount) {\n            uint _toWithdraw = _output_amount.sub(b);\n            uint _withdrawFee = IController(controller).withdraw(_toWithdraw);\n            uint _after = basedToken.balanceOf(address(this));\n            uint _diff = _after.sub(b);\n            if (_diff < _toWithdraw) {\n                _output_amount = b.add(_diff);\n            }\n            if (_withdrawFee > 0) {\n                _output_amount = _output_amount.sub(_withdrawFee, \"_output_amount < _withdrawFee\");\n            }\n        }\n\n        if (_output == address(basedToken)) {\n            require(_output_amount >= _min_output_amount, \"slippage\");\n            basedToken.safeTransfer(_account, _output_amount);\n        } else {\n            basedToken.safeTransfer(address(basedConverter), _output_amount);\n            uint _received = basedConverter.convert(address(basedToken), _output, msg.sender);\n            require(_received >= _min_output_amount, \"slippage\");\n            IERC20(_output).safeTransfer(_account, _received);\n        }\n    }\n\n    function getPricePerFullShare() public override view returns (uint) {\n        return (totalSupply() == 0) ? 1e18 : balance().mul(1e18).div(totalSupply());\n    }\n\n    // @dev average dollar value of vault share token\n    function get_virtual_price() external override view returns (uint) {\n        return basedConverter.get_virtual_price().mul(getPricePerFullShare()).div(1e18);\n    }\n\n    /**\n     * This function allows governance to take unsupported tokens out of the contract. This is in an effort to make someone whole, should they seriously mess up.\n     * There is no guarantee governance will vote to return these. It also allows for removal of airdropped tokens.\n     */\n    function governanceRecoverUnsupported(IERC20 _token, uint amount, address to) external {\n        require(msg.sender == governance, \"!governance\");\n        require(address(_token) != address(basedToken), \"token\");\n        require(address(_token) != address(this), \"share\");\n        _token.safeTransfer(to, amount);\n    }\n}\n\ncontract CompositeVaultBptEthUsdc is CompositeVaultBase {\n    function _getName() internal override view returns (string memory) {\n        return \"CompositeVault:BptEthUsdc\";\n    }\n\n    function _getSymbol() internal override view returns (string memory) {\n        return \"cvETH-USDC:BPT\";\n    }\n\n    event ExecuteTransaction(address indexed target, uint value, string signature, bytes data);\n\n    /**\n     * @dev This is from Timelock contract, the governance should be a Timelock contract before calling this emergency function\n     * Periodically we will need this to claim BAL (for idle fund stay in Vault and not transferred to Strategy\n     */\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data) public returns (bytes memory) {\n        require(msg.sender == governance, \"!governance\");\n\n        bytes memory callData;\n\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n        }\n\n        // solium-disable-next-line security/no-call-value\n        (bool success, bytes memory returnData) = target.call{value : value}(callData);\n        require(success, string(abi.encodePacked(_getName(), \"::executeTransaction: Transaction execution reverted.\")));\n\n        emit ExecuteTransaction(target, value, signature, data);\n\n        return returnData;\n    }\n}\n"
    }
  }
}