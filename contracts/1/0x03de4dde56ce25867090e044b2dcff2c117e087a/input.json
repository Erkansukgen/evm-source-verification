{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Untitled8.sol": {
      "content": "pragma solidity ^0.6.0;\r\n\r\nimport \"https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/math/SafeMath.sol\";\r\n\r\ncontract TreasureNew  {\r\n    using SafeMath for uint256;\r\n\r\n    address public owner;\r\n    uint256 public TIME_STEP = 15 minutes; \r\n\r\n    uint256 public BASE_NUM = 1000; \r\n\r\n    uint256 public rounds = 0;\r\n\r\n    address public lastwinner;\r\n\r\n    uint256 public lastTime; \r\n\r\n    uint256 public lastAmount;\r\n\r\n    address public currentAddress;\r\n\r\n    uint256 public currentAddressCount = 0;\r\n\r\n    uint256 public currentTime = 0;\r\n\r\n    uint256 public totalAmount; \r\n\r\n    uint256 public constant PERCENTS_DIVIDER = 1000; \r\n    uint256 public constant OWNER_PERCENT = 100; \r\n\r\n    mapping(address => uint256) public accountAmount;\r\n\r\n\r\n    event NewAward(address indexed user, uint256 amount, uint256 time);\r\n    event Involved(address indexed user, uint256 amount, uint256 time);\r\n\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function tokensTransfer() public payable{\r\n        uint256 Ticket_Amount = currentAddressCount.div(BASE_NUM).mul(1e15).add(1e15);\r\n        uint256 amount = msg.value;\r\n        address from = msg.sender;\r\n        if (amount == Ticket_Amount) {\r\n\r\n            totalAmount = totalAmount.add(amount);\r\n\r\n            accountAmount[from] = accountAmount[from].add(amount);\r\n\r\n            emit Involved(from, amount, block.timestamp);\r\n\r\n            if(currentAddressCount > 0 && block.timestamp.sub(currentTime) > TIME_STEP){\r\n\r\n                \r\n                uint256 sumAmount = address(this).balance.sub(amount);\r\n\r\n                uint256 ownerDividends = sumAmount.mul(OWNER_PERCENT).div(\r\n                    PERCENTS_DIVIDER\r\n                );\r\n\r\n                uint256 luckDividends = sumAmount.sub(ownerDividends);\r\n\r\n                address(uint160(currentAddress)).transfer(luckDividends);\r\n                address(uint160(owner)).transfer(ownerDividends);\r\n    \r\n                lastwinner = currentAddress;\r\n\r\n                lastTime = block.timestamp;\r\n\r\n                lastAmount = luckDividends;\r\n\r\n                rounds = rounds.add(1);\r\n\r\n                emit NewAward(currentAddress, luckDividends, block.timestamp);\r\n\r\n                currentAddressCount = 0;\r\n\r\n            }\r\n\r\n            currentAddress = from;\r\n            \r\n            currentTime = block.timestamp;\r\n\r\n            currentAddressCount = currentAddressCount.add(1);\r\n\r\n\r\n        } else {\r\n             address(uint160(from)).transfer(amount);\r\n        }\r\n    }\r\n\r\n\r\n    \r\n    function getTicketAmount() public view returns (uint256) {\r\n        return currentAddressCount.div(BASE_NUM).mul(1e15).add(1e15);\r\n    }\r\n\r\n    \r\n    function getCurrentAddressCount() public view returns (uint256) {\r\n        return currentAddressCount;\r\n    }\r\n\r\n    \r\n    function getTotalAmount() public view returns (uint256) {\r\n        return totalAmount;\r\n    }\r\n\r\n    \r\n    function getBalanceAmount() public view returns (uint256){\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function getAccountAmount(address _account) public view returns (uint256){\r\n        return accountAmount[_account];\r\n    }\r\n    \r\n    function getRounds() public view returns (uint256) {\r\n        return rounds;\r\n    }\r\n\r\n    \r\n    function getLastwinner() public view returns (address) {\r\n        return lastwinner;\r\n    }\r\n    \r\n    function getLastTime() public view returns (uint256) {\r\n        return lastTime;\r\n    }\r\n    \r\n    function getLastAmount() public view returns (uint256) {\r\n        return lastAmount;\r\n    }\r\n\r\n    \r\n    function getCurrentAddress() public view returns (address) {\r\n        return currentAddress;\r\n    }\r\n  \r\n    function getCurrentTime() public view returns (uint256) {\r\n        return currentTime;\r\n    }\r\n\r\n    function withdrawCFX() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        address(uint160(owner)).transfer(balance);\r\n    }\r\n\r\n    receive() external payable {}\r\n}"
    },
    "https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    }
  }
}