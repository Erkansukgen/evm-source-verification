{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "StakingLock.sol": {
      "content": "pragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract StakingLock {\r\n    uint256 public unlockAt;\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        unlockAt = now + 14 days;\r\n    }\r\n\r\n    function withdraw(address _token) external {\r\n        require(msg.sender == owner, \"Lock: Permission Denied\");\r\n        require(now > unlockAt, \"Lock: Tokens are still locked\");\r\n        uint256 amount = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(owner, amount);\r\n    }\r\n\r\n}"
    }
  }
}