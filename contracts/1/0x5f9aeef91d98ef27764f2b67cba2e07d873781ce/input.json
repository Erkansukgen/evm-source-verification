{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/crowdsale.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.3;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\ninterface Token {\r\n    function tokensSold(address buyer, uint256 amount) external  returns (bool success);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function burn(uint256 _value) external returns (bool success);\r\n}\r\n\r\ncontract CPTCrowdSale is Ownable{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public rate;\r\n    uint256 public totalSold;\r\n    address public tokenAddress;\r\n\r\n    uint256 internal constant START = 1606154146;\r\n    uint256 internal constant DAYS = 100; \r\n    \r\n    uint256 public minimumBuyAmount = 10 ** 17;\r\n    address payable public walletAddress;\r\n    event TokensSold(address indexed to, uint256 amount);\r\n\r\n    function isActive() internal view returns (bool) {\r\n        return (\r\n            block.timestamp >= START && \r\n            block.timestamp <= START.add(DAYS * 1 days)\r\n        );\r\n    }\r\n    \r\n    modifier IsSaleActive() {\r\n        assert(isActive());\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        rate = uint256(20);\r\n        walletAddress = 0x44b3E70145D13a946f9edCFcadBc013864Db8A3f;\r\n        tokenAddress = address(0x0);\r\n    }\r\n    \r\n    receive() external payable {\r\n        buy();\r\n    }\r\n    \r\n    function changeWallet (address payable _walletAddress) onlyOwner public {\r\n        walletAddress = _walletAddress;\r\n    }\r\n    \r\n    function setToken(address _tokenAddress) onlyOwner public {\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n    \r\n    function buy() public payable IsSaleActive{\r\n        uint256 weiValue = msg.value;\r\n        require(weiValue >= minimumBuyAmount);\r\n        uint256 amount = weiValue.mul(rate);\r\n        Token token = Token(tokenAddress);\r\n        require(walletAddress.send(weiValue));\r\n        require(token.tokensSold(msg.sender, amount));\r\n        totalSold += amount;\r\n        emit TokensSold(msg.sender, amount);\r\n    }\r\n    \r\n    function burnUnsold() onlyOwner public {\r\n        Token token = Token(tokenAddress);\r\n        uint256 amount = token.balanceOf(address(this));\r\n        token.burn(amount);\r\n    }\r\n    \r\n}"}}}