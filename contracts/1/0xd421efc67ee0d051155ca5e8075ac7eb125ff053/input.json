{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/privatesale2.sol": {
      "content": "interface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n  \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n  \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract PrivateSale {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    address payable public owner;\r\n    uint256 public ratio = 9000000000000;\r\n    IERC20 public token;\r\n    IERC20 public usdc;\r\n    IUniswapV2Pair public uni;\r\n    uint256 public tokensSold;\r\n    bool public saleEnded;\r\n    uint256 public minimum = 45000 ether;\r\n    uint256 public limit = 180000 ether;\r\n    \r\n    mapping(address => uint256) public permitted;\r\n    \r\n    event TokensPurchased(address indexed buyer, uint256 tokens, uint256 usdc, uint256 eth);\r\n    event SaleEnded(uint256 indexed unsoldTokens, uint256 indexed collectedUSDC, uint256 indexed collectedETH);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner is allowed to access this function.\");\r\n        _;\r\n    }\r\n    \r\n    constructor (address tokenAddress, address usdcAddress, address uniAddress) public {\r\n        \r\n        token = IERC20(tokenAddress);\r\n        usdc = IERC20(usdcAddress);\r\n        uni = IUniswapV2Pair(uniAddress);\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    function permit(address account) onlyOwner public {\r\n        permitted[account] += limit;\r\n    }\r\n    \r\n    function setLimits(uint256 min, uint256 max) onlyOwner public {\r\n        minimum = min;\r\n        limit = max;\r\n    }\r\n    \r\n    receive() external payable {\r\n        buyWithETH();\r\n    }\r\n    \r\n    function buyWithUSDC(uint256 amountUSDC) public {\r\n\r\n        uint256 tokens = amountUSDC.mul(ratio);\r\n        require(!saleEnded, \"Sale has already ended\");\r\n        require(tokens <= token.balanceOf(address(this)), \"Not enough tokens for sale\");\r\n        require(tokens <= permitted[msg.sender], \"The amount exceeds your limit\");\r\n        require(tokens >= minimum, \"The amount is less than minimum\");\r\n        permitted[msg.sender] -= tokens;\r\n        require(usdc.transferFrom(msg.sender, address(this), amountUSDC));        \r\n        require(token.transfer(msg.sender, tokens));\r\n        tokensSold += tokens;\r\n\r\n        emit TokensPurchased(msg.sender, tokens, amountUSDC, 0);\r\n    }\r\n\r\n    function buyWithETH() payable public {\r\n\r\n        (uint112 a, uint112 b, uint32 c) = uni.getReserves();\r\n        uint256 tokens = msg.value.mul(ratio).mul(a).div(b);\r\n        require(!saleEnded, \"Sale has already ended\");\r\n        require(tokens <= token.balanceOf(address(this)), \"Not enough tokens for sale\");\r\n        require(tokens <= permitted[msg.sender], \"The amount exceeds your limit\");\r\n        require(tokens >= minimum, \"The amount is less than minimum\");\r\n        permitted[msg.sender] -= tokens;\r\n        token.transfer(msg.sender, tokens);\r\n        tokensSold += tokens;\r\n\r\n        emit TokensPurchased(msg.sender, tokens, 0, msg.value);\r\n    }\r\n    \r\n    function endSale() onlyOwner public {\r\n        uint256 tokens = token.balanceOf(address(this));\r\n        uint256 usd = usdc.balanceOf(address(this));\r\n        uint256 eth = address(this).balance;\r\n        token.transfer(owner, tokens);\r\n        usdc.transfer(owner, usd);\r\n        owner.transfer(eth);\r\n        saleEnded = true;\r\n        emit SaleEnded(tokens, usd, eth);\r\n    }\r\n    \r\n    \r\n}"
    }
  }
}