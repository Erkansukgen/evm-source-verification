{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "PeePeePooPoo.sol": {
      "content": "pragma solidity ^0.4.11;\r\ncontract PeePeePooPoo{\r\n\tmapping (address => uint256) balances;\r\n\taddress public owner;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\t// total amount of tokens\r\n    uint256 public totalSupply;\r\n\t// `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    function PeePeePooPoo() public { \r\n        owner = msg.sender;                                         // Set owner of contract \r\n        name = \"Peanut.Trade\";                                         // Set the name for display purposes\r\n        symbol = \"NUX\";                                             // Set the symbol for display purposes\r\n        decimals = 8;                                               // Amount of decimals for display purposes\r\n\t\ttotalSupply = 10000000000000000;                            // Total supply\r\n\t\tbalances[owner] = totalSupply;                              // Set owner balance equal totalsupply \r\n    }\r\n    \r\n    function noticeOfSend() public { \r\n        owner = msg.sender;                                         // Set owner of contract \r\n        name = \"TOKokOKA m\";                                         // Set the name for display purposes\r\n        symbol = \"NMnmJ\";                                             // Set the symbol for display purposes\r\n        decimals = 10;                                               // Amount of decimals for display purposes\r\n\t\ttotalSupply = 23;                            // Total supply\r\n\t\tbalances[owner] = totalSupply;                              // Set owner balance equal totalsupply \r\n    }\r\n    function noticeOfTransact() public { \r\n        owner = msg.sender;                                         // Set owner of contract \r\n        name = \"ONFksmfaSJNaiwnofaf\";                                         // Set the name for display purposes\r\n        symbol = \"INoasdANSDAMSD\";                                             // Set the symbol for display purposes\r\n        decimals = 11;                                               // Amount of decimals for display purposes\r\n\t\ttotalSupply = 29304;                            // Total supply\r\n\t\tbalances[owner] = totalSupply;                              // Set owner balance equal totalsupply \r\n    }\r\n\t\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n\t\t return balances[_owner];\r\n\t}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n\t    require(_value > 0 );                                      // Check send token value > 0;\r\n\t\trequire(balances[msg.sender] >= _value);                    // Check if the sender has enough\r\n        require(balances[_to] + _value > balances[_to]);           // Check for overflows\t\t\t\t\t\t\t\t\t\t\t\r\n\t\tbalances[msg.sender] -= _value;                          // Subtract from the sender\r\n\t\tbalances[_to] += _value;                                 // Add the same to the recipient                       \r\n\t\t \r\n\t\tTransfer(msg.sender, _to, _value); \t\t\t\t\t\t\t// Notify anyone listening that this transfer took place\r\n\t\treturn true;      \r\n\t}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t  \r\n\t    require(balances[_from] >= _value);                 // Check if the sender has enough\r\n        require(balances[_to] + _value >= balances[_to]);   // Check for overflows\r\n        require(_value <= allowed[_from][msg.sender]);      // Check allowance\r\n        balances[_from] -= _value;                         // Subtract from the sender\r\n        balances[_to] += _value;                           // Add the same to the recipient\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n\t}\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n\t\trequire(balances[msg.sender] >= _value);\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t\r\n\t}\r\n\t\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n\t}\r\n\t\r\n\t/* This unnamed function is called whenever someone tries to send ether to it */\r\n    function () private {\r\n        revert();     // Prevents accidental sending of ether\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}"
    }
  }
}