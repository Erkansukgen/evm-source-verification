{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/contract.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\n\r\npragma solidity 0.6.11;\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n \r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ninterface token { function transfer(address receiver, uint amount) external; }\r\n\r\ncontract DistributeEth is Ownable{\r\n  event Message(string message);\r\n  \r\n  token tokenReward;\r\n  \r\n  address public addressOfTokenUsedAsReward;\r\n  function setTokenReward(address _addr) public onlyOwner {\r\n    tokenReward = token(_addr);\r\n    addressOfTokenUsedAsReward = _addr;\r\n  }\r\n  \r\n  function distributeTokens(address[] memory _addrs, uint[] memory _bals,string memory message) public onlyOwner{\r\n\t\temit Message(message);\r\n\t\tfor(uint i = 0; i < _addrs.length; ++i){\r\n\t\t\ttokenReward.transfer(_addrs[i],_bals[i]);\r\n\t\t}\r\n\t}\r\n  \r\n  function distributeEth(address payable[] memory _addrs, uint[] memory _bals, string memory message) public onlyOwner {\r\n    for(uint i = 0; i < _addrs.length; ++i) {\r\n        _addrs[i].transfer(_bals[i]);\r\n    }\r\n    emit Message(message);\r\n  }\r\n  \r\n  // accept ETH\r\n  receive () payable external {}\r\n\r\n  function withdrawEth(uint _value) public onlyOwner {\r\n    address(uint160(owner)).transfer(_value);\r\n  }\r\n  \r\n  function withdrawTokens(uint _amount) public onlyOwner {\r\n\ttokenReward.transfer(owner,_amount);\r\n  }\r\n}"
    }
  }
}