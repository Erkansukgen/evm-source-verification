{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/LeviathanCoreTask.sol": {
      "content": "pragma solidity <=0.6.2;\n\ninterface ILeviathan {\n  function tokensOfOwner(address owner) external view returns (uint256[] memory);  \n}\n\ninterface IRelease {\n    function release(uint ID) external;\n}\n\ninterface IWLEV {\n    function checkClaim(uint ID) external view returns (uint256); \n}\n\ncontract LeviathanCoreTask {\n    address private constant _leviathan = 0xeE52c053e091e8382902E7788Ac27f19bBdFeeDc;\n    address private constant _wlev = 0xA2482ccFF8432ee68b9A26a30fCDd2782Bd81BED;\n    address private constant _claim = 0xb4345a489e4aF3a33F81df5FB26E88fFeCEd6489;\n    address private constant _core = 0xceC62ebf1cd98b91556D84eebd5F8542E301b8b1;\n\n    uint256[] private _IDs;\n\n    function check(uint _requirement)\n    external view returns (uint256) {\n        uint totalClaim;\n\n        for(uint x = 0;x < _IDs.length; x++)\n            totalClaim += IWLEV(_wlev).checkClaim(_IDs[x]);\n\n        if(totalClaim >= _requirement)\n            return 0;\n        else\n            return _requirement - totalClaim;\n    }\n\n    function execute()\n    external {\n        for(uint x = 0;x < _IDs.length; x++)\n            if(IWLEV(_wlev).checkClaim(_IDs[x]) > 0)\n                IRelease(_claim).release(_IDs[x]);\n    }\n\n    function update()\n    external {\n        _IDs = ILeviathan(_leviathan).tokensOfOwner(_core);\n    }\n}"
    }
  }
}