{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/CTN.sol":{"content":"pragma solidity 0.6.4;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n    address public owner;\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) onlyOwner public {\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata  _extraData) external; }\n\ncontract CTNToken is Ownable {\n\n    uint256 public totalSupply;\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n\n    string public constant name = \"CETAN\";\n    string public constant symbol = \"CTN\";\n    uint32 public constant decimals = 18;\n\n    uint constant restrictedPercent = 40; //should never be set above 100\n \n    bool public mintingFinished = false;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n    event Burn(address indexed burner, uint256 value);\n\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender] - _value;\n        balances[_to] = balances[_to] + _value;\n        //assert(balances[_to] >= _value); no need to check, since mint has limited hardcap\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from] - _value;\n        balances[_to] = balances[_to] + _value;\n        //assert(balances[_to] >= _value); no need to check, since mint has limited hardcap\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        //NOTE: To prevent attack vectors like the one discussed here:\n        //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729,\n        //clients SHOULD make sure to create user interfaces in such a way\n        //that they set the allowance first to 0 before setting it to another value for the same spender.\n\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)  public returns (bool) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n\n    function mint(address _to, uint256 _value) onlyOwner canMint public returns (bool) {\n        require(_to != address(0));\n\n        uint restrictedTokens = _value * restrictedPercent / 100;\n        uint _amount = _value + restrictedTokens;\n        assert(_amount >= _value);\n\n        totalSupply = totalSupply + _amount;\n\n        assert(totalSupply >= _amount);\n\n        balances[msg.sender] = balances[msg.sender] + _amount;\n        assert(balances[msg.sender] >= _amount);\n        emit Mint(msg.sender, _amount);\n\n        transfer(_to, _value);\n        transfer(owner, restrictedTokens);\n        return true;\n    }\n\n    function finishMinting() onlyOwner public returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public returns (bool) {\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n        balances[msg.sender] = balances[msg.sender] - _value;\n        totalSupply = totalSupply - _value;\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from] - _value;\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\n        totalSupply = totalSupply - _value;\n        emit Burn(_from, _value);\n        return true;\n    }\n}    "}}}