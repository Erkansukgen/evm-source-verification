{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/claim.sol":{"content":"/**\n *Submitted for verification at BscScan.com on 2021-10-11\n*/\n\n//https://programtheblockchain.com/posts/2018/02/17/signing-and-verifying-messages-in-ethereum/\n\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.3;\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract TokenClaim {\n  address public admin;\n    \n    //user => claim round => claim status\n    mapping(address => mapping(uint256 => bool)) public userClaim;\n    mapping(address => bool) public isClaimed;\n    //user => refund status\n    mapping(address => bool) public userRefund;\n    \n    // token => claim round \n    uint256 public currentClaimRound;\n    \n  address public idoToken;\n  address public refundToken;\n  \n  uint256 public refundBlockNumber;\n  uint256 public claimStartAt;\n \n  bool public initialized; \n  \n  event EventClaimed(\n    address recipient,\n    uint amount,\n    uint date\n  );\n\n  event EventRefunded(\n    address recipient,\n    uint amount,\n    uint date\n  );\n\n  constructor(\n    address _idoToken, \n    address _refundToken,\n    uint256 _startClaimAt,\n    uint256 _refundBlockNumber\n  ) \n  {\n    admin = msg.sender; \n    refundToken = _refundToken;\n    idoToken = _idoToken;\n    refundBlockNumber = _refundBlockNumber;\n    claimStartAt = _startClaimAt;\n  }\n  \n\n  function setConfig(\n    address _newAdmin,\n    address _refundTk,\n    address _idoToken,\n    uint256 _refundBlock,\n    uint256 _claimTime,\n    uint256 _claimRound\n  ) \n    external \n  {\n    require(msg.sender == admin, 'only admin');\n    if (initialized == false) {\n        initialized = true;\n    }\n    \n    if (_newAdmin != address(0)) {\n        admin = _newAdmin;   \n    }\n    \n    if (_refundTk != address(0)) {\n        refundToken = _refundTk;    \n    }\n    \n    if (_idoToken != address(0)) {\n        idoToken = _idoToken;    \n    }\n    \n    if (_refundBlock > 0) {\n        refundBlockNumber = _refundBlock;        \n    }\n    \n    if (_claimTime > 0) {\n        claimStartAt = _claimTime;        \n    }\n    \n    if (_claimRound > 0 ){\n        currentClaimRound = _claimRound;\n    }\n  }\n\n  function emergencyWithdraw(\n    address _token, \n    address _to, \n    uint256 _amount\n  ) \n    external \n  {\n    require(msg.sender == admin,'Not allowed');\n    IERC20(_token).transfer(_to, _amount);\n  }\n\n  function claimTokens(\n    uint256 _amount,\n    uint256 _claimRound,\n    bytes calldata sig\n      ) \n    external \n  {\n    address recipient = msg.sender;\n    uint256 thisBal = IERC20(idoToken).balanceOf(address(this));\n    require(initialized == true, 'Not yet initialized');\n    require(claimStartAt > 0,'Claim has not started yet');\n    require(block.timestamp > claimStartAt,'Claim has not started yet');\n    require(recipient != address(0),'Invalid address');\n    // already refunded\n    require(userRefund[recipient] == false,'Refunded');\n    \n    bytes32 message = prefixed(keccak256(abi.encodePacked(\n      recipient, \n      _amount,\n      _claimRound,\n      address(this)\n    )));\n     // must be in whitelist \n    require(recoverSigner(message, sig) == admin , 'wrong signature');\n    require(currentClaimRound > 0 && _claimRound <= currentClaimRound,'Invalid claim round');\n    require(userClaim[recipient][_claimRound] == false,'Already claimed');\n    \n     if (thisBal > 0) {\n        userClaim[recipient][_claimRound] = true;\n        isClaimed[recipient] = true;\n        IERC20(idoToken).transfer(recipient, _amount);\n        \n        emit EventClaimed(\n          recipient,\n          _amount,\n          block.timestamp\n        );\n     } \n  }\n  \n  function checkRefund() external view returns(bool){\n      if(block.number < refundBlockNumber) {\n          return true;\n      }\n      \n      return false;\n  }\n  \n  function refund(\n    uint256 _amount,\n    bytes calldata sig\n      ) \n      external \n    {\n    address recipient = msg.sender;\n    uint256 thisBal = IERC20(refundToken).balanceOf(address(this));\n    require(initialized == true, 'Not yet initialized');\n    require(claimStartAt > 0,'Not yet started');\n    require(recipient != address(0),'Invalid address');\n     bytes32 message = prefixed(keccak256(abi.encodePacked(\n      recipient, \n      _amount,\n      address(this)\n    )));\n      // must be in whitelist \n    require(recoverSigner(message, sig) == admin , 'wrong signature');\n    require(block.number < refundBlockNumber, 'Refund is no longer allowed');\n    require(refundBlockNumber > 0, 'Not refundable');\n    require(userRefund[recipient] == false,'Refunded');\n    require(isClaimed[recipient] == false, 'Already claimed');\n    \n    if (thisBal > 0) {\n        userRefund[recipient] = true;\n        IERC20(refundToken).transfer(recipient, _amount);\n        emit EventRefunded(\n          recipient,\n          _amount,\n          block.timestamp\n        );   \n    }\n  }\n  \n  \n  function prefixed(bytes32 hash) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(\n      '\\x19Ethereum Signed Message:\\n32', \n      hash\n    ));\n  }\n\n  function recoverSigner(bytes32 message, bytes memory sig)\n    internal\n    pure\n    returns (address)\n  {\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n  \n    (v, r, s) = splitSignature(sig);\n  \n    return ecrecover(message, v, r, s);\n  }\n\n  function splitSignature(bytes memory sig)\n    internal\n    pure\n    returns (uint8, bytes32, bytes32)\n  {\n    require(sig.length == 65);\n  \n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n  \n    assembly {\n        // first 32 bytes, after the length prefix\n        r := mload(add(sig, 32))\n        // second 32 bytes\n        s := mload(add(sig, 64))\n        // final byte (first byte of the next 32 bytes)\n        v := byte(0, mload(add(sig, 96)))\n    }\n  \n    return (v, r, s);\n  }\n}"}}}