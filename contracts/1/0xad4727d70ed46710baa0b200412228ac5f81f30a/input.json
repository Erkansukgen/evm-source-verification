{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Staking.sol": {
      "content": "pragma solidity ^0.6.12;\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Buffalo Finance NEXT GENERATION DEFLATIONARY DEFI PLATFORM\r\n// Buffalo Finance is a useful, deflationary, next generation DeFi platform where users can easily stake, farm, lend/borrow, and swap crypto assets. Buffalo Finance Platform offers you a variety of facilities for keeping securely and managing your crypto assets, as well as high returns with advantageous rates for your assets.\r\n// Symbol       : BUFF\r\n// Name         : Buffalo Finance\r\n// Total supply : 100,000\r\n// www.buffalodefi.com\r\n// www.twitter.com/buffalo_finance\r\n// https://t.me/buffalofinanceann\r\n// https://t.me/buffalofinance\r\n// www.medium.com/@buffalofinance\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) whitelist;\r\n    event AddedToWhitelist(address indexed account);\r\n    event RemovedFromWhitelist(address indexed account);\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(isWhitelisted(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function addToWhitelist(address _address) public onlyOwner {\r\n        whitelist[_address] = true;\r\n        emit AddedToWhitelist(_address);\r\n    }\r\n\r\n    function removeFromWhitelist(address _address) public onlyOwner {\r\n        whitelist[_address] = false;\r\n        emit RemovedFromWhitelist(_address);\r\n    }\r\n\r\n    function isWhitelisted(address _address) public view returns(bool) {\r\n        return whitelist[_address];\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 is IERC20, Whitelist {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    uint256 _totalSupply;\r\n    uint256 INITIAL_SUPPLY = 100000e18; //available supply\r\n    uint256 BURN_RATE = 1; //burn every per txn\r\n\tuint256 SUPPLY_FLOOR = 50; // % of supply\r\n\tuint256 DEFLATION_START_TIME = now + 30 days;\r\n\r\n    string  _name;\r\n    string  _symbol;\r\n    uint8 _decimals;\r\n\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        \r\n\t\t_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n\t\t\r\n\t\tif(now >= DEFLATION_START_TIME){\r\n\t\t    uint256 _burnedAmount = amount * BURN_RATE / 100;\r\n    \t\tif (_totalSupply - _burnedAmount < INITIAL_SUPPLY * SUPPLY_FLOOR / 100 || isWhitelisted(sender)) {\r\n    \t\t\t_burnedAmount = 0;\r\n    \t\t}\r\n    \t\tif (_burnedAmount > 0) {\r\n    \t\t\t_totalSupply = _totalSupply.sub(_burnedAmount);\r\n    \t\t}\r\n    \t\tamount = amount.sub(_burnedAmount);\r\n\t\t}\r\n\t\t\r\n\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n\t\t\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n  \r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    \r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    \r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\ncontract Token is ERC20{\r\n\r\n// ----------------------------------------------------------------------------\r\n// Buffalo Finance NEXT GENERATION DEFLATIONARY DEFI PLATFORM\r\n// Buffalo Finance is a useful, deflationary, next generation DeFi platform where users can easily stake, farm, lend/borrow, and swap crypto assets. Buffalo Finance Platform offers you a variety of facilities for keeping securely and managing your crypto assets, as well as high returns with advantageous rates for your assets.\r\n// Symbol       : BUFF\r\n// Name         : Buffalo Finance\r\n// Total supply : 100,000\r\n// www.buffalodefi.com\r\n// www.twitter.com/buffalo_finance\r\n// https://t.me/buffalofinanceann\r\n// https://t.me/buffalofinance\r\n// www.medium.com/@buffalofinance\r\n// ----------------------------------------------------------------------------\r\n\r\n\tconstructor (string memory name, string memory symbol) public {\r\n        _name = \"Buffalo Finance\";\r\n        _symbol = \"BUFF\";\r\n        _decimals = 18;\r\n        _totalSupply = INITIAL_SUPPLY;\r\n        _balances[msg.sender] = _balances[msg.sender].add(INITIAL_SUPPLY);\r\n    }\r\n\r\n\t\r\n}\r\n\r\ncontract Staking is Ownable {\r\n\r\n// ----------------------------------------------------------------------------\r\n// Buffalo Finance NEXT GENERATION DEFLATIONARY DEFI PLATFORM\r\n// Buffalo Finance is a useful, deflationary, next generation DeFi platform where users can easily stake, farm, lend/borrow, and swap crypto assets. Buffalo Finance Platform offers you a variety of facilities for keeping securely and managing your crypto assets, as well as high returns with advantageous rates for your assets.\r\n// Symbol       : BUFF\r\n// Name         : Buffalo Finance\r\n// Total supply : 100,000\r\n// www.buffalodefi.com\r\n// www.twitter.com/buffalo_finance\r\n// https://t.me/buffalofinanceann\r\n// https://t.me/buffalofinance\r\n// www.medium.com/@buffalofinance\r\n// ----------------------------------------------------------------------------\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for Token;\r\n    using Address for address;\r\n\r\n    Token private token;\r\n    mapping(address => uint256) public _stakerTokenBalance;\r\n    uint private _totalTokenBalance;\r\n\r\n    // annual yield period\r\n    uint256 public constant DURATION = 365 days;\r\n    uint256 public constant MINIMUM_AMOUNT = 1e16;\r\n    uint256 public _pool_amount = 0;\r\n    mapping(address => uint256) public _stakerRewardRate;\r\n    mapping(address => uint256) public _stakerStakingProgram;\r\n    \r\n    bool public haveStarted = false;\r\n    mapping(address => uint256) public _stakerLastClaimTime;\r\n    mapping(address => uint256) public _stakerStakingTime;\r\n    mapping(address => uint256) public _stakerTokenRewards;\r\n    mapping(address => uint256) public _stakerTokenRewardsClaimed;\r\n\r\n    event Stake(address indexed from, uint amount);\r\n    event Withdraw(address indexed to, uint amount);\r\n    event Claim(address indexed to, uint amount);\r\n\r\n\r\n    constructor(address _token) public{\r\n        token = Token(_token);\r\n    }\r\n\r\n\r\n    function stake(uint program, uint amount) public shouldStarted {\r\n\r\n        require(_stakerStakingProgram[msg.sender] != 0, \"Withdraw your current program first\");\r\n        \r\n        _stakerStakingTime[msg.sender] = now;\r\n        _stakerStakingProgram[msg.sender] = program;\r\n\r\n        updateRewards(msg.sender);\r\n        \r\n        require(!address(msg.sender).isContract(), \"Please use your individual account.\");\r\n        require(amount >= MINIMUM_AMOUNT, \"Should stake at least 0.01 Token.\");\r\n        \r\n        token.safeTransferFrom(msg.sender, address(this), amount);\r\n        _totalTokenBalance = _totalTokenBalance.add(amount);\r\n        _stakerTokenBalance[msg.sender] = _stakerTokenBalance[msg.sender].add(amount);\r\n        _stakerLastClaimTime[msg.sender] = now;\r\n        \r\n        emit Stake(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw(uint amount) public shouldStarted {\r\n        updateRewards(msg.sender);\r\n        \r\n        require(amount <= _stakerTokenBalance[msg.sender] && _stakerTokenBalance[msg.sender] > 0, \"Bad withdraw.\");\r\n\r\n        if(_stakerStakingProgram[msg.sender] == 1){\r\n            require(now >= _stakerStakingTime[msg.sender] + 7 days, \"Early withdrawal available after 7 days and no reward.\");\r\n        }else if (_stakerStakingProgram[msg.sender] == 2){\r\n            require(now >= _stakerStakingTime[msg.sender] + 30 days, \"Early withdrawal available after 30 days and no reward.\");\r\n        }else if (_stakerStakingProgram[msg.sender] == 3){\r\n            require(now >= _stakerStakingTime[msg.sender] + 60 days, \"Early withdrawal available after 60 days and no reward.\");\r\n        }\r\n        \r\n        _totalTokenBalance = _totalTokenBalance.sub(amount);\r\n        _stakerTokenBalance[msg.sender] = _stakerTokenBalance[msg.sender].sub(amount);\r\n        _stakerTokenRewardsClaimed[msg.sender] = 0;\r\n        _stakerStakingProgram[msg.sender] = 0;\r\n        token.safeTransfer(msg.sender, amount);\r\n        \r\n        emit Withdraw(msg.sender, amount);\r\n    }\r\n\r\n    function claim(uint amount) public shouldStarted {\r\n        updateRewards(msg.sender);\r\n        \r\n        require( _stakerTokenRewards[msg.sender] > 0, \"Bad claim.\");\r\n        require( _pool_amount > 0, \"The Pool is Empty\");\r\n        \r\n        _stakerTokenRewards[msg.sender] = _stakerTokenRewards[msg.sender].sub(amount);\r\n        _stakerTokenRewardsClaimed[msg.sender] = _stakerTokenRewardsClaimed[msg.sender].add(amount);\r\n        _pool_amount = _pool_amount.sub(amount);\r\n        _stakerLastClaimTime[msg.sender] = now;\r\n        token.safeTransfer(msg.sender, amount);\r\n    \r\n        emit Claim(msg.sender, amount);\r\n    }\r\n\r\n    modifier shouldStarted() {\r\n        require(haveStarted == true, \"Have not started.\");\r\n        _;\r\n    }\r\n\r\n    function getRewardsAmountPerSeconds(address account) public view returns(uint256) {\r\n        return balanceOf(account).mul(_stakerRewardRate[msg.sender]).div(100)\r\n                .div(DURATION);\r\n    }\r\n    \r\n    function balanceOf(address account) public view returns(uint256) {\r\n        return _stakerTokenBalance[account];\r\n    }\r\n    \r\n    function getTotalRewardsAmount(address account) public view returns (uint256) {\r\n   \r\n        return block.timestamp.sub(_stakerStakingTime[account]).mul(getRewardsAmountPerSeconds(account));\r\n    }\r\n    \r\n    function updatePoolAmount(uint amount) public onlyOwner{\r\n        _pool_amount = _pool_amount.add(amount);\r\n    }\r\n\r\n\r\n    function updateRewards(address account) internal {\r\n        \r\n        if(_stakerStakingProgram[msg.sender] == 1 && now >= _stakerStakingTime[msg.sender] + 30 days){\r\n             _stakerRewardRate[msg.sender] = 35;\r\n        }else if(_stakerStakingProgram[msg.sender] == 2 && now >= _stakerStakingTime[msg.sender] + 90 days){\r\n            _stakerRewardRate[msg.sender] = 55;\r\n        }else if(_stakerStakingProgram[msg.sender] == 3 && now >= _stakerStakingTime[msg.sender] + 180 days){\r\n            _stakerRewardRate[msg.sender] = 75;\r\n        }\r\n\r\n        if (account != address(0)) {\r\n            _stakerTokenRewards[account] = getTotalRewardsAmount(account) - _stakerTokenRewardsClaimed[account];\r\n            //_stakerRewardPerTokenPaid[account] = rewardPerToken();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function startFarming() external onlyOwner {\r\n        updateRewards(address(0));\r\n        haveStarted = true;\r\n    }\r\n\r\n\r\n}"
    }
  }
}