{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/GasCoin.sol": {
      "content": "pragma solidity 0.6.4;\n\n//IERC20 Interface\ninterface ERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address, uint) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface Vether {\n    function burnTokensForMember(address token, uint amount, address member) external;\n}\n\n// Token Contract\ncontract GasCoin is ERC20 {\n\n    // Coin Defaults\n    string public name = \"Vether Gas Coin 1\";\n    string public symbol = \"VGC1\";\n    uint256 public decimals  = 18;\n    uint256 public override totalSupply  = (2 ** 256) - 1;\n\n    address public burnAddress;\n    address public vether;\n\n    uint public gasCycles;\n    mapping (address => uint) public gasPrice;\n    mapping(uint => string) public gasStorage;\n\n    // Mapping\n    mapping(address => uint256) public override balanceOf;\n    mapping(address => mapping(address => uint256)) public override allowance;\n\n    // Events\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // Minting event\n    constructor() public{\n        gasCycles = 5;\n        burnAddress = 0x0111011001100001011011000111010101100101;\n        vether = 0x31Bb711de2e457066c6281f231fb473FC5c2afd3;\n        allowance[address(this)][vether] = totalSupply;\n        balanceOf[address(this)] = totalSupply;\n        emit Transfer(address(0), address(this), totalSupply);\n    }\n    \n    // ERC20\n    function transfer(address to, uint256 value) public override returns (bool success) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    // ERC20\n    function approve(address spender, uint256 value) public override returns (bool success) {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    // ERC20\n    function transferFrom(address from, address to, uint256 value) public override returns (bool success) {\n        require(value <= allowance[from][msg.sender]);\n        allowance[from][msg.sender] -= value;\n        _transfer(from, to, value);\n        return true;\n    }\n\n    // Transfer function which includes the gas storage\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);    \n        balanceOf[_from] = balanceOf[_from] - _value;        \n        balanceOf[_to] = balanceOf[_to] + _value;\n\n        if (_to == burnAddress) {\n            for(uint i = 0; i < gasCycles; i++){\n                gasStorage[i]=\"GASSTORAGEGASSTORAGEGASTORAGEGASSTORAGEGASSTORAGEGASTORAGEGASSTORAGE\";\n            }\n        }\n        emit Transfer(_from, _to, _value);         \n    }\n\n    function mine() public {\n        Vether(vether).burnTokensForMember(address(this), 1, msg.sender);\n        resetGas();\n    }\n\n    function resetGas() public {\n        for(uint i = 0; i < gasCycles; i++){\n            gasStorage[i]=\"0\";\n        }\n    }\n    \n}"
    }
  }
}