{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "NFT.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.7;\n\n/***\n *     ______   __  __     ______        ______     ______     ______     __  __        __    __     ______     ______     __  __     __     __   __     ______    \n *    /\\__  _\\ /\\ \\_\\ \\   /\\  ___\\      /\\  ___\\   /\\  __ \\   /\\  ___\\   /\\ \\_\\ \\      /\\ \"-./  \\   /\\  __ \\   /\\  ___\\   /\\ \\_\\ \\   /\\ \\   /\\ \"-.\\ \\   /\\  ___\\   \n *    \\/_/\\ \\/ \\ \\  __ \\  \\ \\  __\\      \\ \\ \\____  \\ \\  __ \\  \\ \\___  \\  \\ \\  __ \\     \\ \\ \\-./\\ \\  \\ \\  __ \\  \\ \\ \\____  \\ \\  __ \\  \\ \\ \\  \\ \\ \\-.  \\  \\ \\  __\\   \n *       \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_____\\     \\ \\_____\\  \\ \\_\\ \\_\\  \\/\\_____\\  \\ \\_\\ \\_\\     \\ \\_\\ \\ \\_\\  \\ \\_\\ \\_\\  \\ \\_____\\  \\ \\_\\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_____\\ \n *        \\/_/   \\/_/\\/_/   \\/_____/      \\/_____/   \\/_/\\/_/   \\/_____/   \\/_/\\/_/      \\/_/  \\/_/   \\/_/\\/_/   \\/_____/   \\/_/\\/_/   \\/_/   \\/_/ \\/_/   \\/_____/ \n *                                                                                                                                                                 \n *   https://thecashmachine.io                                                             \n */\n\n/* Our lib imports. Mostly OpenZeppelin stuff */\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/* UniSwap - PancakeSwap interfaces, so we can store references to the pair, once created at construction time. */\ninterface IDEXFactory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IDEXRouter {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ninterface IDividendDistributor {\n    function changeToken(address newToken) external;\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\n    function setShare(address shareholder, uint256 amount) external;\n    function deposit() external payable;\n    function process(uint256 gas) external;\n}\n\ncontract DividendDistributor is IDividendDistributor {\n    using SafeMath for uint256;\n\n    address _token;\n\n    struct Share {\n        uint256 amount;\n        uint256 totalExcluded;\n        uint256 totalRealised;\n    }\n\n    //IERC20 TOKEN = IERC20(0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47); //Binance-pegged Cardano Token (ADA)\n    IERC20 TOKEN = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48); //Ropsten USDC\n    //address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n    address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    IDEXRouter router;\n\n    address[] shareholders;\n    mapping (address => uint256) shareholderIndexes;\n    mapping (address => uint256) shareholderClaims;\n\n    mapping (address => Share) public shares;\n\n    uint256 public totalShares;\n    uint256 public totalDividends;\n    uint256 public totalDistributed;\n    uint256 public dividendsPerShare;\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\n\n    uint256 public minPeriod = 5 minutes;\n    uint256 public minDistribution = 1 * (10 ** 18);\n\n    uint256 currentIndex;\n\n    bool initialized;\n    modifier initialization() {\n        require(!initialized);\n        _;\n        initialized = true;\n    }\n\n    modifier onlyToken() {\n        require(msg.sender == _token); _;\n    }\n\n    constructor (address _router) {\n        router = _router != address(0)\n            ? IDEXRouter(_router)\n            : IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n        _token = msg.sender;\n    }\n    \n    function changeToken(address newToken) external override onlyToken {\n        uint256 previousAmount = TOKEN.balanceOf(address(this));\n        require(totalDividends == 0 || previousAmount > 0, \"TCM DIVIDEND DISTRIBUTOR: Requires at least some of the initial token to calculate convertion rate.\");\n        \n        if (previousAmount > 0) {\n            address[] memory path = new address[](2);\n            path[0] = address(TOKEN);\n            path[1] = address(newToken);\n    \n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                previousAmount,\n                0,\n                path,\n                address(this),\n                block.timestamp\n            );\n        }\n        \n        TOKEN = IERC20(newToken);\n        \n        if (totalDividends > 0) {\n            uint256 amount = TOKEN.balanceOf(address(this));\n    \n            totalDividends = totalDividends.mul(amount).div(previousAmount);\n            dividendsPerShare = dividendsPerShare.mul(amount).div(previousAmount);\n        }\n    }\n\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {\n        minPeriod = _minPeriod;\n        minDistribution = _minDistribution * (10 ** 18);\n    }\n\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\n        if(shares[shareholder].amount > 0){\n            distributeDividend(shareholder);\n        }\n\n        if(amount > 0 && shares[shareholder].amount == 0){\n            addShareholder(shareholder);\n        }else if(amount == 0 && shares[shareholder].amount > 0){\n            removeShareholder(shareholder);\n        }\n\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\n        shares[shareholder].amount = amount;\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\n    }\n\n    function deposit() external payable override onlyToken {\n        uint256 balanceBefore = TOKEN.balanceOf(address(this));\n\n        address[] memory path = new address[](2);\n        path[0] = WETH;\n        path[1] = address(TOKEN);\n\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        uint256 amount = TOKEN.balanceOf(address(this)).sub(balanceBefore);\n\n        totalDividends = totalDividends.add(amount);\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\n    }\n\n    function process(uint256 gas) external override onlyToken {\n        uint256 shareholderCount = shareholders.length;\n\n        if(shareholderCount == 0) { return; }\n\n        uint256 gasUsed = 0;\n        uint256 gasLeft = gasleft();\n\n        uint256 iterations = 0;\n\n        while(gasUsed < gas && iterations < shareholderCount) {\n            if(currentIndex >= shareholderCount){\n                currentIndex = 0;\n            }\n\n            if(shouldDistribute(shareholders[currentIndex])){\n                distributeDividend(shareholders[currentIndex]);\n            }\n\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\n            gasLeft = gasleft();\n            currentIndex++;\n            iterations++;\n        }\n    }\n\n    function shouldDistribute(address shareholder) internal view returns (bool) {\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\n                && getUnpaidEarnings(shareholder) > minDistribution;\n    }\n\n    function distributeDividend(address shareholder) internal {\n        if(shares[shareholder].amount == 0){ return; }\n\n        uint256 amount = getUnpaidEarnings(shareholder);\n        if(amount > 0){\n            totalDistributed = totalDistributed.add(amount);\n            TOKEN.transfer(shareholder, amount);\n            shareholderClaims[shareholder] = block.timestamp;\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\n        }\n    }\n\n    function claimDividend() external {\n        distributeDividend(msg.sender);\n    }\n\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\n        if(shares[shareholder].amount == 0){ return 0; }\n\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\n\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\n\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\n    }\n\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\n    }\n\n    function addShareholder(address shareholder) internal {\n        shareholderIndexes[shareholder] = shareholders.length;\n        shareholders.push(shareholder);\n    }\n\n    function removeShareholder(address shareholder) internal {\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\n        shareholders.pop();\n    }\n}\n\ncontract TheCashMachine is IERC20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n    \n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\n    event BuybackMultiplierActive(uint256 duration);\n    event CallInvocationResults(bool success, bytes data);\n    \n    //address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n    address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\n    address ZERO = 0x0000000000000000000000000000000000000000;\n    string public currentlyServing = \"TUSD\";\n\n    string constant _name = \"The Cash Machine\";\n    string constant _symbol = \"TCM\";\n    uint8 constant _decimals = 6;\n\n    uint256 _totalSupply = 10000000000 * (10 ** _decimals); // 10 Billion\n    uint256 public _maxTxAmount = (_totalSupply * 1) / 100; // 1% of total supply\n    uint256 public _maxWalletSize = (_totalSupply * 2) / 100; // 2%\n    \n    uint256 public anti_sniper_blocks = 3;\n    bool public txLimitFailsafe = true;\n\n    mapping (address => uint256) _balances;\n    mapping (address => mapping (address => uint256)) _allowances;\n\n    mapping (address => bool) isFeeExempt;\n    mapping (address => bool) isTxLimitExempt;\n    mapping (address => bool) isDividendExempt;\n\n    uint256 liquidityFee = 0; //Used to be 200 == 2%\n    uint256 buybackFee = 0;\n    uint256 reflectionFee = 600;\n    uint256 marketingFee = 300;\n    uint256 totalFee = 1100;\n    uint256 feeDenominator = 10000;\n    uint256 public _sellMultiplierNumerator = 200;\n    uint256 public _sellMultiplierDenominator = 100;\n\n    address public autoLiquidityReceiver;\n    address public marketingFeeReceiver;\n\n    uint256 targetLiquidity = 30;\n    uint256 targetLiquidityDenominator = 100;\n\n    IDEXRouter public router;\n    address public pair;\n\n    uint256 public launchedAt;\n\n    uint256 buybackMultiplierTriggeredAt;\n    uint256 buybackMultiplierLength = 30 minutes;\n\n    bool public autoBuybackEnabled = false;\n    uint256 autoBuybackCap;\n    uint256 autoBuybackAccumulator;\n    uint256 autoBuybackAmount;\n    uint256 autoBuybackBlockPeriod;\n    uint256 autoBuybackBlockLast;\n\n    DividendDistributor distributor;\n    uint256 distributorGas = 500000;\n\n    bool public swapEnabled = true;\n    uint256 public swapThreshold = _totalSupply / 2000; // 0.05%\n    bool inSwap;\n    modifier swapping() { inSwap = true; _; inSwap = false; }\n\n    constructor(address AutoLiqLocker, address marketingWallet) {\n        //router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); //Pancake Router v2 (mainnet)\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //Uniswap V2 on Ropsten\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\n        _allowances[msg.sender][address(router)] = type(uint256).max;\n        _allowances[address(this)][address(router)] = type(uint256).max;\n\n        distributor = new DividendDistributor(address(router));\n\n        isFeeExempt[msg.sender] = true;\n        isTxLimitExempt[address(this)] = true;\n        isTxLimitExempt[msg.sender] = true;\n        isTxLimitExempt[address(router)] = true;\n        isDividendExempt[pair] = true;\n        isDividendExempt[address(this)] = true;\n        isDividendExempt[DEAD] = true;\n        isDividendExempt[ZERO] = true;\n        autoLiquidityReceiver = AutoLiqLocker;\n        marketingFeeReceiver = marketingWallet;\n\n        _balances[msg.sender] = _totalSupply;\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n\n    receive() external payable {}\n\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\n    function decimals() external pure returns (uint8) { return _decimals; }\n    function symbol() external pure returns (string memory) { return _symbol; }\n    function name() external pure returns (string memory) { return _name; }\n    function getOwner() external view returns (address) { return owner(); }\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function approveMax(address spender) external returns (bool) {\n        return approve(spender, type(uint256).max);\n    }\n\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        return _transferFrom(msg.sender, recipient, amount);\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        if(_allowances[sender][msg.sender] != type(uint256).max){\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\n        }\n\n        return _transferFrom(sender, recipient, amount);\n    }\n\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\n        \n        if(txLimitFailsafe){\n            checkTxLimit(sender, amount); //Will fail a require() if the tx amount is too large.\n        }\n        \n        if (recipient != pair && recipient != DEAD) {\n            require(isTxLimitExempt[recipient] || _balances[recipient] + amount <= _maxWalletSize, \"TCM: Recipient wallet will exceed max wallet size, blyat.\");\n        }\n\n        if(shouldSwapBack()){ swapBack(); }\n        if(shouldAutoBuyback()){ triggerAutoBuyback(); }\n\n        if(!launched() && recipient == pair){ require(_balances[sender] > 0); launch(); }\n\n        _balances[sender] = _balances[sender].sub(amount, \"TCM: Insufficient Balance, blyat.\");\n\n        uint256 amountReceived = shouldTakeFee(sender) ? takeFee(sender, recipient, amount) : amount;\n        _balances[recipient] = _balances[recipient].add(amountReceived);\n\n        if(!isDividendExempt[sender]){ try distributor.setShare(sender, _balances[sender]) {} catch {} }\n        if(!isDividendExempt[recipient]){ try distributor.setShare(recipient, _balances[recipient]) {} catch {} }\n\n        try distributor.process(distributorGas) {} catch {}\n\n        emit Transfer(sender, recipient, amountReceived);\n        return true;\n    }\n\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\n        _balances[sender] = _balances[sender].sub(amount, \"TCM: Insufficient Balance, blyat\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function checkTxLimit(address sender, uint256 amount) internal view {\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TCM: Max TX Limit Exceeded, cyka.\");\n    }\n\n    function shouldTakeFee(address sender) internal view returns (bool) {\n        return !isFeeExempt[sender];\n    }\n\n    function getTotalFee(bool selling) public view returns (uint256) {\n        if(launchedAt + anti_sniper_blocks >= block.number){ return feeDenominator.sub(1); }\n        if(selling){ return totalFee.mul(_sellMultiplierNumerator).div(_sellMultiplierDenominator); }\n        return totalFee;\n    }\n\n    function takeFee(address sender, address receiver, uint256 amount) internal returns (uint256) {\n        uint256 feeAmount = amount.mul(getTotalFee(receiver == pair)).div(feeDenominator);\n\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\n        emit Transfer(sender, address(this), feeAmount);\n\n        return amount.sub(feeAmount);\n    }\n\n    function shouldSwapBack() internal view returns (bool) {\n        return msg.sender != pair\n        && !inSwap\n        && swapEnabled\n        && _balances[address(this)] >= swapThreshold;\n    }\n\n    function swapBack() internal swapping {\n        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFee;\n        uint256 amountToLiquify = swapThreshold.mul(dynamicLiquidityFee).div(totalFee).div(2);\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\n\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = WETH;\n\n        uint256 balanceBefore = address(this).balance;\n\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            amountToSwap,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\n\n        uint256 totalBNBFee = totalFee.sub(dynamicLiquidityFee.div(2));\n\n        uint256 amountBNBLiquidity = amountBNB.mul(dynamicLiquidityFee).div(totalBNBFee).div(2);\n        uint256 amountBNBReflection = amountBNB.mul(reflectionFee).div(totalBNBFee);\n        uint256 amountBNBMarketing = amountBNB.mul(marketingFee).div(totalBNBFee);\n\n        try distributor.deposit{value: amountBNBReflection}() {} catch {}\n        \n        (bool success, bytes memory data) = payable(marketingFeeReceiver).call{value: amountBNBMarketing, gas: 30000}(\"\");\n        emit CallInvocationResults(success, data);\n\n        if(amountToLiquify > 0){\n            router.addLiquidityETH{value: amountBNBLiquidity}(\n                address(this),\n                amountToLiquify,\n                0,\n                0,\n                autoLiquidityReceiver,\n                block.timestamp\n            );\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\n        }\n    }\n\n    function shouldAutoBuyback() internal view returns (bool) {\n        return msg.sender != pair\n            && !inSwap\n            && autoBuybackEnabled\n            && autoBuybackBlockLast + autoBuybackBlockPeriod <= block.number\n            && address(this).balance >= autoBuybackAmount;\n    }\n\n    function triggerManualBuyback(uint256 amount, bool triggerBuybackMultiplier) external onlyOwner {\n        buyTokens(amount, DEAD);\n        if(triggerBuybackMultiplier){\n            buybackMultiplierTriggeredAt = block.timestamp;\n            emit BuybackMultiplierActive(buybackMultiplierLength);\n        }\n    }\n\n    function clearBuybackMultiplier() external onlyOwner {\n        buybackMultiplierTriggeredAt = 0;\n    }\n\n    function triggerAutoBuyback() internal {\n        buyTokens(autoBuybackAmount, DEAD);\n        autoBuybackBlockLast = block.number;\n        autoBuybackAccumulator = autoBuybackAccumulator.add(autoBuybackAmount);\n        if(autoBuybackAccumulator > autoBuybackCap){ autoBuybackEnabled = false; }\n    }\n\n    function buyTokens(uint256 amount, address to) internal swapping {\n        address[] memory path = new address[](2);\n        path[0] = WETH;\n        path[1] = address(this);\n\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\n            0,\n            path,\n            to,\n            block.timestamp\n        );\n    }\n\n    function setAutoBuybackSettings(bool _enabled, uint256 _cap, uint256 _amount, uint256 _period) external onlyOwner {\n        autoBuybackEnabled = _enabled;\n        autoBuybackCap = _cap;\n        autoBuybackAccumulator = 0;\n        autoBuybackAmount = _amount.div(100);\n        autoBuybackBlockPeriod = _period;\n        autoBuybackBlockLast = block.number;\n    }\n    \n    function setAntiSniperBlocks(uint256 blocks) public onlyOwner {\n        require(blocks <= 10, \"TCM: You're looking too far ahead for anti-sniping, cyka!\");\n        anti_sniper_blocks = blocks;\n    }\n    \n    function setTxLimitFailsafe(bool toggle) public onlyOwner {\n        txLimitFailsafe = toggle;\n    }\n\n    function launched() internal view returns (bool) {\n        return launchedAt != 0;\n    }\n\n    function launch() internal {\n        launchedAt = block.number;\n    }\n\n    function setTxLimit(uint256 numerator, uint256 divisor) external onlyOwner {\n        require(numerator > 0 && divisor > 0 && divisor <= 100000);\n        _maxTxAmount = _totalSupply.mul(numerator).div(divisor);\n    }\n    \n    function setReflectToken(address newToken) external onlyOwner {\n        require(newToken.isContract(), \"Enter valid contract address\");\n        distributor.changeToken(newToken);\n    }\n    \n    function setMaxWallet(uint256 numerator, uint256 divisor) external onlyOwner() {\n        require(numerator > 0 && divisor > 0 && divisor <= 100000);\n        _maxWalletSize = _totalSupply.mul(numerator).div(divisor);\n    }\n    \n    function setSellMultiplier(uint256 numerator, uint256 divisor) external onlyOwner() {\n        require(numerator > 0 && divisor > 0 && numerator / divisor <= 2);\n        _sellMultiplierNumerator = numerator;\n        _sellMultiplierDenominator = divisor;\n    }\n\n    function setIsDividendExempt(address holder, bool exempt) external onlyOwner {\n        require(holder != address(this) && holder != pair);\n        isDividendExempt[holder] = exempt;\n        if(exempt){\n            distributor.setShare(holder, 0);\n        }else{\n            distributor.setShare(holder, _balances[holder]);\n        }\n    }\n\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\n        isFeeExempt[holder] = exempt;\n    }\n\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\n        isTxLimitExempt[holder] = exempt;\n    }\n\n    function setFees(uint256 _liquidityFee, uint256 _buybackFee, uint256 _reflectionFee, uint256 _marketingFee, uint256 _feeDenominator) external onlyOwner {\n        liquidityFee = _liquidityFee;\n        buybackFee = _buybackFee;\n        reflectionFee = _reflectionFee;\n        marketingFee = _marketingFee;\n        totalFee = _liquidityFee.add(_buybackFee).add(_reflectionFee).add(_marketingFee);\n        feeDenominator = _feeDenominator;\n        require(totalFee < feeDenominator/4);\n    }\n\n    function setFeeReceivers(address _autoLiquidityReceiver, address _marketingFeeReceiver) external onlyOwner {\n        autoLiquidityReceiver = _autoLiquidityReceiver;\n        marketingFeeReceiver = _marketingFeeReceiver;\n    }\n\n    function setSwapBackSettings(bool _enabled, uint256 _denominator) external onlyOwner {\n        require(_denominator > 0);\n        swapEnabled = _enabled;\n        swapThreshold = _totalSupply.div(_denominator);\n    }\n\n    function setTargetLiquidity(uint256 _target, uint256 _denominator) external onlyOwner {\n        targetLiquidity = _target;\n        targetLiquidityDenominator = _denominator;\n    }\n\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external onlyOwner {\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\n    }\n\n    function setDistributorSettings(uint256 gas) external onlyOwner {\n        require(gas < 750000);\n        distributorGas = gas;\n    }\n\n    function getCirculatingSupply() public view returns (uint256) {\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\n    }\n\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\n        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\n    }\n\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\n        return getLiquidityBacking(accuracy) > target;\n    }\n\n}"
    }
  }
}