{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/NFTSHIRT CONTRACT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n///@author Hammad Ghazi\ncontract MyNftShirt {\n    address public owner;\n    event ShirtPurchased(\n        address indexed buyer,\n        uint256 indexed orderId,\n        uint256 indexed amount\n    );\n    constructor() {\n        owner = msg.sender;\n    }\n    function buy(uint256 _orderId) external payable {\n        emit ShirtPurchased(msg.sender, _orderId, msg.value);\n    }\n    function getBalance() external view returns(uint256){\n        return address(this).balance;\n    }\n    function withdrawETH() external {\n        require(msg.sender == owner, \"Caller not owner\");\n        (bool success, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(success, \"Transfer failed.\");\n    }\n}"
    }
  }
}