{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/arbsm.sol": {
      "content": "\n\npragma solidity >=0.4.26;\n\npragma experimental ABIEncoderV2;\n\ninterface IKyberNetworkProxy {\n    function maxGasPrice() external view returns(uint);\n    function getUserCapInWei(address user) external view returns(uint);\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns(uint);\n    function enabled() external view returns(bool);\n    function info(bytes32 id) external view returns(uint);\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view returns (uint expectedRate, uint slippageRate);\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount, uint minConversionRate, address walletId, bytes calldata  hint) external payable returns(uint);\n    function swapEtherToToken(ERC20 token, uint minRate) external payable returns (uint);\n    function swapTokenToEther(ERC20 token, uint tokenQty, uint minRate) external returns (uint);\n}\n\nabstract contract IUniswapExchange {\n    // Address of ERC20 token sold on this exchange\n    function tokenAddress() virtual external view returns (address token);\n    // Address of Uniswap Factory\n    function factoryAddress() virtual external view returns (address factory);\n    // Provide Liquidity\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) virtual external payable returns (uint256);\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) virtual external returns (uint256, uint256);\n    // Get Prices\n    function getEthToTokenInputPrice(uint256 eth_sold) virtual external view returns (uint256 tokens_bought);\n    function getEthToTokenOutputPrice(uint256 tokens_bought) virtual external view returns (uint256 eth_sold);\n    function getTokenToEthInputPrice(uint256 tokens_sold) virtual external view returns (uint256 eth_bought);\n    function getTokenToEthOutputPrice(uint256 eth_bought) virtual external view returns (uint256 tokens_sold);\n    // Trade ETH to ERC20\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) virtual external payable returns (uint256  tokens_bought);\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) virtual external payable returns (uint256  tokens_bought);\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) virtual external payable returns (uint256  eth_sold);\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) virtual external payable returns (uint256  eth_sold);\n    // Trade ERC20 to ETH\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) virtual external returns (uint256  eth_bought);\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) virtual external returns (uint256  eth_bought);\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) virtual external returns (uint256  tokens_sold);\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) virtual external returns (uint256  tokens_sold);\n    // Trade ERC20 to ERC20\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) virtual external returns (uint256  tokens_bought);\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) virtual external returns (uint256  tokens_bought);\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) virtual external returns (uint256  tokens_sold);\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) virtual external returns (uint256  tokens_sold);\n    // Trade ERC20 to Custom Pool\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) virtual external returns (uint256  tokens_bought);\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) virtual external returns (uint256  tokens_bought);\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) virtual external returns (uint256  tokens_sold);\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) virtual external returns (uint256  tokens_sold);\n    // ERC20 comaptibility for liquidity tokens\n    bytes32 public name;\n    bytes32 public symbol;\n    uint256 public decimals;\n    function transfer(address _to, uint256 _value) virtual external returns (bool);\n    function transferFrom(address _from, address _to, uint256 value) virtual external returns (bool);\n    function approve(address _spender, uint256 _value) virtual external returns (bool);\n    function allowance(address _owner, address _spender) virtual external view returns (uint256);\n    function balanceOf(address _owner) virtual external view returns (uint256);\n    function totalSupply() virtual external view returns (uint256);\n    // Never use\n    function setup(address token_addr) virtual external;\n}\ninterface IWETH {\n  function deposit() external payable;\n  function withdraw(uint wad) external;\n  function totalSupply() external view returns (uint);\n  function approve(address guy, uint wad) external returns (bool);\n  function transfer(address dst, uint wad) external returns (bool);\n  function transferFrom(address src, address dst, uint wad) external returns (bool);\n  //function() external payable;\n}\n\ninterface IUniswapFactory {\n    function createExchange(address token) external returns (address exchange);\n    function getExchange(address token) external view returns (address exchange);\n    function getToken(address exchange) external view returns (address token);\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\n    function initializeFactory(address template) external;\n}\n\n\n\n\n\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint supply);\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    function decimals() external view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\nabstract contract IERC20Token {\n    function name() public view returns (string memory) {this;}\n    function symbol() public view returns (string memory) {this;}\n    function decimals() public view returns (uint8) {this;}\n    function totalSupply() public view returns (uint256) {this;}\n    function balanceOf(address _owner) public view returns (uint256) {_owner; this;}\n    function allowance(address _owner, address _spender) public view returns (uint256) {_owner; _spender; this;}\n\n    function transfer(address _to, uint256 _value) virtual public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) virtual public returns (bool success);\n    function approve(address _spender, uint256 _value) virtual public returns (bool success);\n}\n\n/*interface OrFeedInterface {\n  function getExchangeRate ( string fromSymbol, string toSymbol, string  venue, uint256 amount ) external view returns ( uint256 );\n  function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\n  function getTokenAddress ( string  symbol ) external view returns ( address );\n  function getSynthBytes32 ( string  symbol ) external view returns ( bytes32 );\n  function getForexAddress ( string  symbol ) external view returns ( address );\n  function arb(address fundsReturnToAddress, address liquidityProviderContractAddress, string[] tokens,  uint256 amount, string[] exchanges) external payable returns (bool);\n}*/\n\ninterface OrFeedInterface {\n  function getExchangeRate ( string calldata fromSymbol, string calldata toSymbol, string calldata venue, uint256 amount ) external view returns ( uint256 );\n  function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\n  function getTokenAddress ( string calldata symbol ) external view returns ( address );\n  function getSynthBytes32 ( string calldata symbol ) external view returns ( bytes32 );\n  function getForexAddress ( string calldata symbol ) external view returns ( address );\n  function arb(address fundsReturnToAddress, address liquidityProviderContractAddress, string[]calldata tokens,  uint256 amount, string[] calldata exchanges) external payable returns (bool);\n  //function arb(address fundsReturnToAddress, address liquidityProviderContractAddress, string calldata, tokens,  uint256 amount, string[] exchanges) external payable returns (bool);\n//function arb(address fundsReturnToAddress, address liquidityProviderContractAddress, string calldata tokens,  uint256 amount, string calldata exchanges) external payable returns (bool);\n}\ninterface IContractRegistry {\n    function addressOf(bytes32 _contractName) external view returns (address);\n}\n\ninterface IBancorNetwork {\n    function getReturnByPath(address[] calldata  _path, uint256 _amount) external view returns (uint256, uint256);\n    function convert2(address[] calldata _path, uint256 _amount,\n        uint256 _minReturn,\n        address _affiliateAccount,\n        uint256 _affiliateFee\n    ) external payable returns (uint256);\n\n    function claimAndConvert2(\n        address[] calldata _path,\n        uint256 _amount,\n        uint256 _minReturn,\n        address _affiliateAccount,\n        uint256 _affiliateFee\n    ) external returns (uint256);\n}\ninterface IBancorNetworkPathFinder {\n    function generatePath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n}\n\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal view returns(uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal view returns(uint256) {\n        assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal view returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal view returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract flashIt{\n    \n    function executeOperation(\n        address _reserve,\n        uint256 _amount,\n        uint256 _fee,\n        bytes calldata  _params) external {\n\n\n    ERC20 theToken = ERC20(_reserve);\n\n        //place the arb you would like to perform below\n\n        OrFeedInterface orfeed= OrFeedInterface(0x8316B082621CFedAB95bf4a44a1d4B64a6ffc336);\n\n        //approve the token you are starting  (tokenOrder element 0 below)with (so that the orfeed contract perform its operations below )\n        theToken.approve(0x8316B082621CFedAB95bf4a44a1d4B64a6ffc336, 10000000000000000000000000000);\n        \n         //string[] memory tokenOrder = new string[](3);\n         //string[] memory exchangeOrder = new string[](3);\n         \n         string[] memory tokenOrder = new string[](2);\n         string[] memory exchangeOrder = new string[](2);\n         \n         tokenOrder[0]= \"DAI\";\n         //tokenOrder[1]= \"WETH\";\n         //tokenOrder[2]= \"SAI\";\n         \n         tokenOrder[1]= \"ETH\";\n         \n         \n         //exchangeOrder[0]= \"KYBER\";\n         //exchangeOrder[1]= \"KYBER\";\n         //exchangeOrder[2]= \"KYBER\";\n         \n         exchangeOrder[0]= \"BANCOR\";\n         exchangeOrder[1]= \"KYBER\";\n         \n         \n         \n        orfeed.arb((address(this)), (address(this)), tokenOrder, _amount, exchangeOrder);\n      \n        //transferFundsBackToPoolInternal(_reserve, _amount.add(_fee));\n        theToken.transfer(0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3, (_amount+ _fee));\n    \n    }\n}\n"
    }
  }
}