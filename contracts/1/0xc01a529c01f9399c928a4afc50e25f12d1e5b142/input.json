{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"DelegatedBalanceMapping.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.2;\n\ninterface ManagementList {\n    function isManager(address accountAddress) external returns (bool);\n}\n\ncontract Manageable {\n    ManagementList public managementList;\n\n    constructor(address _managementListAddress) {\n        managementList = ManagementList(_managementListAddress);\n    }\n\n    modifier onlyManagers() {\n        bool isManager = managementList.isManager(msg.sender);\n        require(isManager, \"ManagementList: caller is not a manager\");\n        _;\n    }\n}\n\ncontract DelegatedBalanceMapping is Manageable {\n    mapping(address => bool) public assetBalanceIsDelegated;\n\n    event DelegatedBalanceMappingUpdated(\n        address assetAddress,\n        bool delegationEnabled\n    );\n\n    constructor(address _managementListAddress)\n        Manageable(_managementListAddress)\n    {}\n\n    function updateDelegationStatusForAsset(\n        address tokenAddress,\n        bool delegationEnabled\n    ) public onlyManagers {\n        assetBalanceIsDelegated[tokenAddress] = delegationEnabled;\n        emit DelegatedBalanceMappingUpdated(tokenAddress, delegationEnabled);\n    }\n}\n"}}}