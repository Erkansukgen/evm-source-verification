{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/CrytopAlienBabesNFTICO.sol": {
      "content": "// File: contracts/utils/SafeMath.sol\n// SPDX-License-Identifier: MIT\n\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n            require(b <= a, errorMessage);\n            return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n            require(b > 0, errorMessage);\n            return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n            require(b > 0, errorMessage);\n            return a % b;\n    }\n}\n\n// File: contracts/ICryptoAlienBabes.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface ICryptoAlienBabes {\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n    **/\n    function balanceOf(address owner) external view returns (uint256 balance);\n \n    function walletOfOwner(address owner) external view returns (uint256[] memory);\n\n    function transferOwnership(address newOwner) external;\n\n    function renounceMinter() external;\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    function mint(address recipient, uint256 mintAmount) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// File: contracts/crowdsale/Crowdsale.sol\n\npragma solidity ^0.8.0;\n\n\n\n\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing investors to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conforms\n * the base architecture for crowdsales. It is *not* intended to be modified / overridden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n * behavior.\n */\ncontract Crowdsale is Context, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    // The token being sold\n    ICryptoAlienBabes private _token;\n\n    // Amount of wei raised\n    uint256 private _weiRaised;\n\n    // Address where funds are collected\n    address payable private _wallet;\n\n    // Private Sale price is 0.25ETH\n    uint256 internal _rate = 250000000000000000;\n\n    /**\n     * Event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param beneficiary who got the tokens\n     */\n    event TokensPurchased(\n        address indexed purchaser,\n        address indexed beneficiary,\n        uint256 mintAmount\n    );\n\n    /**\n     * @param __wallet Address where collected funds will be forwarded to\n     * @param __token Address of the token being sold\n     */\n    constructor(address payable __wallet, ICryptoAlienBabes __token) public {\n        require(\n            __wallet != address(0),\n            \"Crowdsale: wallet is the zero address\"\n        );\n        require(\n            address(__token) != address(0),\n            \"Crowdsale: token is the zero address\"\n        );\n\n        _wallet = __wallet;\n        _token = __token;\n    }\n\n    /**\n     * @return the token being sold.\n     */\n    function token() public view virtual returns (ICryptoAlienBabes) {\n        return _token;\n    }\n\n    /**\n     * @return the address where funds are collected.\n     */\n    function wallet() public view virtual returns (address payable) {\n        return _wallet;\n    }\n\n    /**\n     * @return the number of token units a buyer gets per wei.\n     */\n    function rate() public view virtual returns (uint256) {\n        return _rate;\n    }\n\n    /**\n     * @return the amount of wei raised.\n     */\n    function weiRaised() public view virtual returns (uint256) {\n        return _weiRaised;\n    }\n\n    /**\n     * @dev low level token purchase ***DO NOT OVERRIDE***\n     * This function has a non-reentrancy guard, so it shouldn't be called by\n     * another `nonReentrant` function.\n     * @param beneficiary Recipient of the token purchase\n     **/\n    function buyNFT(address beneficiary, uint256 mintAmount)\n        public\n        payable\n        nonReentrant\n    {\n        uint256 weiAmount = msg.value;\n        _preValidatePurchase(beneficiary, mintAmount, weiAmount);\n\n        // update state ETH Amount\n        _weiRaised = _weiRaised.add(weiAmount);\n\n        _processPurchase(beneficiary, mintAmount);\n        emit TokensPurchased(_msgSender(), beneficiary, mintAmount);\n\n        _updatePurchasingState(beneficiary, weiAmount);\n\n        _forwardFunds(beneficiary, weiAmount);\n        _postValidatePurchase(beneficiary, weiAmount);\n    }\n\n    /**\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\n     * etc.)\n     * @param beneficiary Address receiving the tokens\n     * @param mintAmount total no of tokens to be minted\n     * @param weiAmount no of ETH sent\n     */\n    function _preValidatePurchase(\n        address beneficiary,\n        uint256 mintAmount,\n        uint256 weiAmount\n    ) internal virtual {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /**\n     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\n     * tokens.\n     * @param beneficiary Address receiving the tokens\n     * @param mintAmount Total mint tokens\n     */\n    function _processPurchase(address beneficiary, uint256 mintAmount)\n        internal\n        virtual\n    {\n        _deliverTokens(beneficiary, mintAmount);\n    }\n\n    /**\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\n     * its tokens.\n     * @param beneficiary Address performing the token purchase\n     * @param mintAmount Total mint tokens\n     */\n    function _deliverTokens(address beneficiary, uint256 mintAmount) internal {\n        /*********** COMMENTED REQUIRE BECAUSE IT WAS RETURNING BOOLEAN AND WE WERE LISTENING FROM THE INTERFACE THAT IT WILL RETURN BOOLEAN BUT IT REVERTS OUR TRANSACTION**************** */\n        // Potentially dangerous assumption about the type of the token.\n        require(\n            token().mint(beneficiary, mintAmount),\n            \"Crowdsale: transfer failed\"\n        );\n    }\n\n    /**\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\n     * etc.)\n     * @param beneficiary Address receiving the tokens\n     * @param weiAmount Value in wei involved in the purchase\n     */\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount)\n        internal\n        virtual\n    {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /**\n     * @dev Determines how ETH is stored/forwarded on purchases.\n     */\n    function _forwardFunds(\n        address, /*beneficiary*/\n        uint256 /*weiAmount*/\n    ) internal virtual {\n        _wallet.transfer(msg.value);\n    }\n\n    /**\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\n     * conditions are not met.\n     * @param beneficiary Address performing the token purchase\n     * @param weiAmount Value in wei involved in the purchase\n     */\n    function _postValidatePurchase(address beneficiary, uint256 weiAmount)\n        internal\n        view\n        virtual\n    {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n}\n\n// File: contracts/roles/Roles.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\n// File: contracts/roles/WhitelistAdminRole.sol\n\npragma solidity ^0.8.0;\n\n\n\n/**\n * @title WhitelistAdminRole\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\n */\nabstract contract WhitelistAdminRole is Context {\n    using Roles for Roles.Role;\n\n    event WhitelistAdminAdded(address indexed account);\n    event WhitelistAdminRemoved(address indexed account);\n\n    Roles.Role private _whitelistAdmins;\n\n    constructor () internal {\n        _addWhitelistAdmin(_msgSender());\n    }\n\n    modifier onlyWhitelistAdmin() {\n        require(isWhitelistAdmin(_msgSender()), \"WhitelistAdminRole: caller does not have the WhitelistAdmin role\");\n        _;\n    }\n\n    function isWhitelistAdmin(address account) public view returns (bool) {\n        return _whitelistAdmins.has(account);\n    }\n\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\n        _addWhitelistAdmin(account);\n    }\n\n    function renounceWhitelistAdmin() public {\n        _removeWhitelistAdmin(_msgSender());\n    }\n\n    function _addWhitelistAdmin(address account) internal {\n        _whitelistAdmins.add(account);\n        emit WhitelistAdminAdded(account);\n    }\n\n    function _removeWhitelistAdmin(address account) internal {\n        _whitelistAdmins.remove(account);\n        emit WhitelistAdminRemoved(account);\n    }\n}\n\n// File: contracts/roles/WhitelistedRole.sol\n\npragma solidity ^0.8.0;\n\n\n\n\n/**\n * @title WhitelistedRole\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\n * it), and not Whitelisteds themselves.\n */\ncontract WhitelistedRole is Context, WhitelistAdminRole {\n    using Roles for Roles.Role;\n\n    event WhitelistedAdded(address indexed account);\n    event WhitelistedRemoved(address indexed account);\n\n    Roles.Role private _whitelisteds;\n\n    modifier onlyWhitelisted() {\n        require(isWhitelisted(_msgSender()), \"WhitelistedRole: caller does not have the Whitelisted role\");\n        _;\n    }\n\n    function isWhitelisted(address account) public view returns (bool) {\n        return _whitelisteds.has(account);\n    }\n\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\n        _addWhitelisted(account);\n    }\n\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\n        _removeWhitelisted(account);\n    }\n\n    function renounceWhitelisted() public {\n        _removeWhitelisted(_msgSender());\n    }\n\n    function _addWhitelisted(address account) internal {\n        _whitelisteds.add(account);\n        emit WhitelistedAdded(account);\n    }\n\n    function _removeWhitelisted(address account) internal {\n        _whitelisteds.remove(account);\n        emit WhitelistedRemoved(account);\n    }\n}\n\n// File: contracts/crowdsale/validation/TimedCrowdsale.sol\n\npragma solidity ^0.8.0;\n\n\n\n/**\n * @title TimedCrowdsale\n * @dev Crowdsale accepting contributions only within a time frame.\n */\nabstract contract TimedCrowdsale is Crowdsale {\n    using SafeMath for uint256;\n\n    uint256 internal _openingTime;\n    uint256 private _closingTime;\n    uint256 private _secondarySaleTime;\n\n    /**\n     * Event for crowdsale extending\n     * @param newClosingTime new closing time\n     * @param prevClosingTime old closing time\n     */\n    event TimedCrowdsaleExtended(uint256 prevClosingTime, uint256 newClosingTime);\n\n    /**\n     * @dev Reverts if not in crowdsale time range.\n     */\n    modifier onlyWhileOpen {\n        require(isOpen(), \"TimedCrowdsale: not open\");\n        _;\n    }\n\n    /**\n     * @dev Constructor, takes crowdsale opening and closing times.\n     * @param __openingTime Crowdsale opening time\n     * @param __closingTime Crowdsale closing time\n     * @param __secondarySaleTime Crowdsale secondary time\n     */\n    constructor (uint256 __openingTime, uint256 __secondarySaleTime, uint256 __closingTime) {\n        // solhint-disable-next-line not-rely-on-time\n        require(__openingTime >= block.timestamp, \"TimedCrowdsale: opening time is before current time\");\n        // solhint-disable-next-line max-line-length\n        require(__secondarySaleTime > __openingTime, \"TimedCrowdsale: opening time is not before secondary sale time\");\n        // solhint-disable-next-line max-line-length\n        require(__closingTime > __secondarySaleTime, \"TimedCrowdsale: secondary sale time is not before closing time\");\n\n        _openingTime = __openingTime;\n        _closingTime = __closingTime;\n        _secondarySaleTime = __secondarySaleTime;\n    }\n\n    /**\n     * @return the crowdsale opening time.\n     */\n    function openingTime() public view virtual returns (uint256) {\n        return _openingTime;\n    }\n\n    /**\n     * @return the crowdsale closing time.\n     */\n    function closingTime() public view virtual returns (uint256) {\n        return _closingTime;\n    }\n\n    /**\n     * @return the crowdsale secondary sale time.\n     */\n    function secondaryTime() public view virtual returns (uint256) {\n        return _secondarySaleTime;\n    }\n\n    /**\n     * @return true if the crowdsale is open, false otherwise.\n     */\n    function isOpen() public view virtual returns (bool) {\n        // solhint-disable-next-line not-rely-on-time\n        return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n    }\n\n    /**\n     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n     * @return Whether crowdsale period has elapsed\n     */\n    function hasClosed() public view virtual returns (bool) {\n        // solhint-disable-next-line not-rely-on-time\n        return block.timestamp > _closingTime;\n    }\n\n    /**\n     * @dev Extend crowdsale.\n     * @param newClosingTime Crowdsale closing time\n     */\n    function _extendTime(uint256 newClosingTime) internal virtual {\n        require(!hasClosed(), \"TimedCrowdsale: already closed\");\n        // solhint-disable-next-line max-line-length\n        require(newClosingTime > _closingTime, \"TimedCrowdsale: new closing time is before current closing time\");\n\n        emit TimedCrowdsaleExtended(_closingTime, newClosingTime);\n        _closingTime = newClosingTime;\n    }\n}\n\n// File: contracts/crowdsale/validation/CappedCrowdsale.sol\n\npragma solidity ^0.8.0;\n\n\n\n/**\n * @title CappedCrowdsale\n * @dev Crowdsale with a limit for total contributions.\n */\nabstract contract CappedCrowdsale is Crowdsale {\n    using SafeMath for uint256;\n\n    uint256 internal _cap;\n    uint256 internal _minted;\n\n    /**\n     * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n     * @param cap Max amount of wei to be contributed\n     */\n    constructor (uint256 cap) {\n        require(cap > 0, \"CappedCrowdsale: cap is 0\");\n        _cap = cap;\n    }\n\n    /**\n     * @return the cap of the crowdsale.\n     */\n    function cap() public view returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @return the minted of the crowdsale.\n     */\n    function minted() public view returns (uint256) {\n        return _minted;\n    }\n\n    /**\n     * @dev Checks whether the cap has been reached.\n     * @return Whether the cap was reached\n     */\n    function capReached() public view returns (bool) {\n        return _minted >= _cap;\n    }\n\n    function incrementMinted(uint256 amountOfTokens) internal virtual {\n        _minted +=  amountOfTokens;\n    }\n\n    function currentMinted() public view returns (uint256) {\n        return _minted;\n    }\n}\n\n// File: contracts/CryptoAlienBabesNFTICO.sol\n\n\npragma experimental ABIEncoderV2;\n\npragma solidity ^0.8.0;\n\n\n\n\n\n\n\n\ncontract CryptoAlienBabesNFTICO is\n    Crowdsale,\n    CappedCrowdsale,\n    TimedCrowdsale,\n    Ownable,\n    WhitelistedRole\n    {\n    using SafeMath for uint256;\n\n    /* Track investor contributions */\n    uint256 public investorHardCap = 1; // 1 NFT\n    mapping(address => uint256) public contributions;\n\n\n    /* Crowdsale Stages */\n    enum CrowdsaleStage {\n        PreICO,\n        ICO\n    }\n\n    /* Default to presale stage */\n    CrowdsaleStage public stage = CrowdsaleStage.PreICO;\n\n\n    constructor(\n        address payable _wallet,\n        ICryptoAlienBabes _token,\n        uint256 _cap,\n        uint256 _openingTime,\n        uint256 _secondaryTime,\n        uint256 _closingTime\n    )\n        public\n        Crowdsale(_wallet, _token)\n        CappedCrowdsale(_cap)\n        TimedCrowdsale(_openingTime, _secondaryTime, _closingTime)\n    {}\n\n    /**\n     * @dev Returns the amount contributed so far by a sepecific user.\n     * @param _beneficiary Address of contributor\n     * @return User contribution so far\n     */\n    function getUserContribution(address _beneficiary)\n        public\n        view\n        returns (uint256)\n    {\n        return contributions[_beneficiary];\n    }\n\n    /**\n     * @dev Extend parent behavior requiring purchase to respect investor min/max funding cap.\n     * @param _beneficiary Token purchaser\n     */\n    function _preValidatePurchase(\n        address _beneficiary,\n        uint256 mintAmount,\n        uint256 weiAmount\n    ) internal virtual override onlyWhileOpen {\n\n        // Check how many NFT are minted\n        incrementMinted(mintAmount);\n        require(currentMinted() <= _cap, \"CryptoAlienBabesNFTICO: cap exceeded\");\n        require(\n            weiAmount.div(mintAmount) == rate(),\n            \"CryptoAlienBabesNFTICO: Invalid ETH Amount\"\n        );\n\n        // Validate inputs\n        require(weiAmount != 0, \"CryptoAlienBabesNFTICO: ETH sent 0\");\n        require(\n            _beneficiary != address(0),\n            \"CryptoAlienBabesNFTICO: beneficiary zero address\"\n        );\n        \n\n        if (stage == CrowdsaleStage.PreICO) {\n            require(\n                isWhitelisted(_msgSender()),\n                \"CryptoAlienBabesNFTICO: Wallet Address is not WhiteListed\"\n            );\n        }\n\n        // Check max minting limit\n        uint256 _existingContribution = contributions[_beneficiary];\n        uint256 _newContribution = _existingContribution.add(mintAmount);\n        require(\n            _newContribution <= investorHardCap,\n            \"CryptoAlienBabesNFTICO: No of Mint MaxCap\"\n        );\n        contributions[_beneficiary] = _newContribution;\n\n        \n    }\n\n    function extendTime(uint256 closingTime) public virtual onlyOwner {\n        _extendTime(closingTime);\n    }\n\n    /**\n     * @dev If goal is Reached then change to change to ICO Stage\n     * etc.)\n     * @param _beneficiary Address receiving the tokens\n     * @param _weiAmount Value in wei involved in the purchase\n     */\n    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount)\n        internal\n        virtual\n        override\n    {    \n          if (block.timestamp >= secondaryTime() &&  stage == CrowdsaleStage.PreICO ) {\n            stage = CrowdsaleStage.ICO;\n            _rate = 250000000000000000; // 0.25ETH\n            _openingTime = secondaryTime(); // Set opening time to secondary time\n        }\n        super._updatePurchasingState(_beneficiary, _weiAmount);\n    }\n\n    /**\n     * @dev enables token transfers, called when owner calls finalize()\n     */\n    function finalization() public onlyOwner {\n        token().renounceMinter();\n    }\n}\n\n"
    }
  }
}