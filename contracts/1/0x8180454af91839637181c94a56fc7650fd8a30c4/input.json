{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/Executor.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface ChiToken {\r\n    function freeFromUpTo(address from, uint256 value) external;\r\n}\r\n\r\ncontract SwapExecutor {\r\n    ChiToken constant public chi = ChiToken(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n    \r\n    address private immutable owner;\r\n    \r\n    mapping(address => bool) private executors;\r\n    \r\n    IWETH private constant WETH = IWETH(0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyExecutor() {\r\n        require(executors[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    modifier discountCHI {\r\n    uint256 gasStart = gasleft();\r\n\r\n    _;\r\n\r\n    uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n    chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41947);\r\n  }\r\n    \r\n    constructor() {\r\n        owner = msg.sender;\r\n        executors[msg.sender] = true;\r\n    }\r\n    \r\n    receive() external payable {\r\n    }\r\n    \r\n    function whiteList(address _addr) external onlyOwner {\r\n        executors[_addr] = true;\r\n    }\r\n    \r\n    function withdrawETH(address payable _to, uint256 _amt) external onlyOwner {\r\n        _to.transfer(_amt);\r\n    }\r\n    \r\n    function withdrawERC20(address _token, uint256 _amt) external onlyOwner {\r\n        IERC20(_token).transfer(msg.sender, _amt);\r\n    }\r\n    \r\n    function approveERC20(address _token, address _contract) external onlyOwner{\r\n        IERC20(_token).approve(address(_contract), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n    }\r\n    \r\n    function addWETH(uint256 _amt) external onlyOwner{\r\n        WETH.deposit{value: _amt}();\r\n    }\r\n    \r\n     function removeWETH(uint256 _amt) external onlyOwner{\r\n        WETH.withdraw(_amt);\r\n    }\r\n    \r\n    function execute_single(address _target, bytes calldata _payload) external onlyExecutor{\r\n        (bool _success, bytes memory _result) = _target.call(_payload);\r\n        require(_success); _result;\r\n    }\r\n    \r\n    function execute_single_flashbots(address _target, bytes calldata _payload, uint256 _bribe) external onlyExecutor{\r\n        (bool _success, bytes memory _result) = _target.call(_payload);\r\n        require(_success); _result;\r\n        block.coinbase.transfer(_bribe);\r\n    }\r\n    \r\n    function execute_single_flashbots_chi(address _target, bytes calldata _payload, uint256 _bribe) external onlyExecutor discountCHI{\r\n        (bool _success, bytes memory _result) = _target.call(_payload);\r\n        require(_success); _result;\r\n        block.coinbase.transfer(_bribe);\r\n    }\r\n    \r\n    function execute_multi(address[] calldata _targets, bytes[] calldata _payloads) external onlyExecutor{\r\n       \r\n        for (uint256 i = 0; i < _targets.length; i++) {\r\n            (bool _success, bytes memory _response) = _targets[i].call(_payloads[i]);\r\n            require(_success); _response;\r\n        }\r\n        \r\n    }\r\n    \r\n    function execute_multi_flashbots(address[] calldata _targets, bytes[] calldata _payloads, uint256 _bribe) external onlyExecutor{\r\n       \r\n        for (uint256 i = 0; i < _targets.length; i++) {\r\n            (bool _success, bytes memory _response) = _targets[i].call(_payloads[i]);\r\n            require(_success); _response;\r\n        }\r\n        \r\n        block.coinbase.transfer(_bribe);\r\n    }\r\n    \r\n    function execute_multi_flashbots_chi(address[] calldata _targets, bytes[] calldata _payloads, uint256 _bribe) external onlyExecutor discountCHI{\r\n       \r\n        for (uint256 i = 0; i < _targets.length; i++) {\r\n            (bool _success, bytes memory _response) = _targets[i].call(_payloads[i]);\r\n            require(_success); _response;\r\n        }\r\n        \r\n        block.coinbase.transfer(_bribe);\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n}    "}}}