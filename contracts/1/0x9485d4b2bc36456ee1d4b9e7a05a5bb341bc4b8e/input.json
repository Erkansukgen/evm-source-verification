{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/SwapV3.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.11;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n\ncontract DepositWeth {\n\n    address private immutable _owner;\n    IWETH private WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\n    constructor() {\n        _owner = msg.sender;\n    }\n\n    function ROOT4146650865() external payable returns (uint256 amount) {\n        WETH.deposit{value : msg.value}();\n        return msg.value;\n    }\n\n    function getMeOut() public returns (bool success) {\n        require(msg.sender == _owner,\"Denied\");\n        ( success, ) = msg.sender.call{value: address(this).balance}(\"\");\n        return success;\n    }\n    \n    function getMeOut(IERC20 token) external {\n        require(msg.sender == _owner,\"Denied\");\n        token.transfer(msg.sender, token.balanceOf(address(this)));\n    }\n}"
    }
  }
}