{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/FaasPool/ValueLiquidProfitCollector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ninterface IBPool is IERC20 {\n    function version() external view returns(uint);\n    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\n\n    function swapExactAmountOut(address, uint, address, uint, uint) external returns (uint, uint);\n\n    function calcInGivenOut(uint, uint, uint, uint, uint, uint) external pure returns (uint);\n\n    function calcOutGivenIn(uint, uint, uint, uint, uint, uint) external pure returns (uint);\n\n    function getDenormalizedWeight(address) external view returns (uint);\n\n    function swapFee() external view returns (uint);\n\n    function setSwapFee(uint _swapFee) external;\n\n    function bind(address token, uint balance, uint denorm) external;\n\n    function rebind(address token, uint balance, uint denorm) external;\n\n    function finalize(\n        uint _swapFee,\n        uint _initPoolSupply,\n        address[] calldata _bindTokens,\n        uint[] calldata _bindDenorms\n    ) external;\n\n    function setPublicSwap(bool _publicSwap) external;\n    function setController(address _controller) external;\n    function setExchangeProxy(address _exchangeProxy) external;\n    function getFinalTokens() external view returns (address[] memory tokens);\n\n\n    function getTotalDenormalizedWeight() external view returns (uint);\n\n    function getBalance(address token) external view returns (uint);\n\n\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\n    function joinPoolFor(address account, uint rewardAmountOut, uint[] calldata maxAmountsIn) external;\n    function joinswapPoolAmountOut(address tokenIn, uint poolAmountOut, uint maxAmountIn) external returns (uint tokenAmountIn);\n\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\n    function exitswapPoolAmountIn(address tokenOut, uint poolAmountIn, uint minAmountOut) external returns (uint tokenAmountOut);\n    function exitswapExternAmountOut(address tokenOut, uint tokenAmountOut, uint maxPoolAmountIn) external returns (uint poolAmountIn);\n    function joinswapExternAmountIn(\n        address tokenIn,\n        uint tokenAmountIn,\n        uint minPoolAmountOut\n    ) external returns (uint poolAmountOut);\n    function finalizeRewardFundInfo(address _rewardFund, uint _unstakingFrozenTime) external;\n    function addRewardPool(IERC20 _rewardToken, uint256 _startBlock, uint256 _endRewardBlock, uint256 _rewardPerBlock,\n        uint256 _lockRewardPercent, uint256 _startVestingBlock, uint256 _endVestingBlock) external;\n}\n\ninterface IUniswapV2Router {\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory);\n\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n}\n\ninterface IFreeFromUpTo {\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n}\n\ninterface IBFactory {\n    function newBPool() external returns (IBPool);\n\n    function collect(address _token) external;\n}\n\n/**\n * @dev This contract will collect profit of ValueLiquid (sent to BFactory), convert to VALUE (if needed) and forward to GovVault for auto-compounding.\n */\ncontract ValueLiquidProfitCollector {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n\n    modifier discountCHI(uint8 flag) {\n        if ((flag & 0x1) == 0) {\n            _;\n        } else {\n            uint256 gasStart = gasleft();\n            _;\n            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\n        }\n    }\n\n    IUniswapV2Router public unirouter = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n    address public valueToken = address(0x49E833337ECe7aFE375e44F4E3e8481029218E5c);\n\n    address public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n    address public wbtc = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\n\n    address public usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n    address public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n\n    IBFactory public bFactory = IBFactory(0xEbC44681c125d63210a33D30C55FD3d37762675B);\n    address public govVault = address(0xceC03a960Ea678A2B6EA350fe0DbD1807B22D875);\n\n    address public insuranceFund; // VIP-10 (to compensate who lost during the exploit on Nov 14 2020)\n    uint256 public insuranceFee = 0; // percentage (over 10000)\n\n    address public governance;\n\n    mapping(address => address[]) public uniswapPaths; // [input -> VALUE] => uniswap_path\n    mapping(address => address) public vliquidPools; // [input -> VALUE] => value_liquid_pool\n\n    address[255] public supportedTokens;\n    uint256 public supportedTokenLength;\n\n    event CollectProfit(address token, uint256 tokenAmount, uint256 valueAmount);\n    event CollectInsurance(uint256 valueAmount);\n\n    constructor(address _valueToken) public {\n        if (_valueToken != address(0)) valueToken = _valueToken;\n        governance = msg.sender;\n\n        supportedTokenLength = 9;\n        supportedTokens[0] = valueToken;\n        supportedTokens[1] = weth;\n        supportedTokens[2] = wbtc;\n        supportedTokens[3] = usdc;\n        supportedTokens[4] = dai;\n        supportedTokens[5] = address(0x1B8E12F839BD4e73A47adDF76cF7F0097d74c14C); // VUSD\n        supportedTokens[6] = address(0xB0BFB1E2F72511cF8b4D004852E2054d7b9a76e1); // MIXS\n        supportedTokens[7] = address(0x7865af71cf0b288b4E7F654f4F7851EB46a2B7F8); // SNTVT\n        supportedTokens[8] = address(0x4981553e8CcF6Df916B36a2d6B6f8fC567628a51); // BNI\n\n        uniswapPaths[wbtc] = [wbtc, weth, valueToken];\n        uniswapPaths[dai] = [dai, weth, valueToken];\n\n        vliquidPools[weth] = address(0xbd63d492bbb13d081D680CE1f2957a287FD8c57c);\n        vliquidPools[usdc] = address(0x13ac88063f9A8eBAf2710E30FB2a1aE1f304b766);\n        vliquidPools[address(0x1B8E12F839BD4e73A47adDF76cF7F0097d74c14C)] = address(0x50007A6BF4a45374Aa5206C1aBbA88A1ffde1bAF); // VUSD\n        vliquidPools[address(0xB0BFB1E2F72511cF8b4D004852E2054d7b9a76e1)] = address(0xb9bcCC26fE0536E6476Aacc1dc97462B261b43d7); // MIXS\n        vliquidPools[address(0x7865af71cf0b288b4E7F654f4F7851EB46a2B7F8)] = address(0x7df0B0DBD00d06203a0D2232282E33a5d2E5D5B0); // SNTVT\n        vliquidPools[address(0x4981553e8CcF6Df916B36a2d6B6f8fC567628a51)] = address(0x809d6cbb321C29B1962d6f508a4FD4f564Ec7488); // BNI\n    }\n\n    function setGovernance(address _governance) external {\n        require(msg.sender == governance, \"!governance\");\n        governance = _governance;\n    }\n\n    function setBFactory(IBFactory _bFactory) external {\n        require(msg.sender == governance, \"!governance\");\n        bFactory = _bFactory;\n    }\n\n    function setGovVault(address _govVault) external {\n        require(msg.sender == governance, \"!governance\");\n        govVault = _govVault;\n    }\n\n    function setInsuranceFund(address _insuranceFund) public {\n        require(msg.sender == governance, \"!governance\");\n        insuranceFund = _insuranceFund;\n    }\n\n    function setInsuranceFee(uint256 _insuranceFee) public {\n        require(msg.sender == governance, \"!governance\");\n        require(_insuranceFee <= 5000, \"_insuranceFee over 50%\");\n        insuranceFee = _insuranceFee;\n    }\n\n    function addSupportedToken(address _token) external {\n        require(msg.sender == governance, \"!governance\");\n        require(supportedTokenLength < 255, \"exceed token length\");\n        supportedTokens[supportedTokenLength] = _token;\n        ++supportedTokenLength;\n    }\n\n    function removeSupportedToken(uint256 _index) external {\n        require(msg.sender == governance, \"!governance\");\n        require(_index < supportedTokenLength, \"out of range\");\n        supportedTokens[_index] = supportedTokens[supportedTokenLength - 1];\n        supportedTokens[supportedTokenLength - 1] = address(0);\n        --supportedTokenLength;\n    }\n\n    function setSupportedToken(uint256 _index, address _token) external {\n        require(msg.sender == governance, \"!governance\");\n        supportedTokens[_index] = _token;\n    }\n\n    function setSupportedTokenLength(uint256 _length) external {\n        require(msg.sender == governance, \"!governance\");\n        require(_length <= 255, \"exceed max length\");\n        supportedTokenLength = _length;\n    }\n\n    function setUnirouter(IUniswapV2Router _unirouter) external {\n        require(msg.sender == governance, \"!governance\");\n        unirouter = _unirouter;\n    }\n\n    function setUnirouterPath(address _input, address[] memory _path) external {\n        require(msg.sender == governance, \"!governance\");\n        uniswapPaths[_input] = _path;\n    }\n\n    function setBalancerPools(address _input, address _pool) external {\n        require(msg.sender == governance, \"!governance\");\n        vliquidPools[_input] = _pool;\n    }\n\n    function getExchangeRateToValue(address _token, uint256 _tokenAmount) public view returns (uint256 _valueAmount) {\n        if (_tokenAmount == 0) return 0;\n        address _pool = vliquidPools[_token];\n        if (_pool != address(0)) {// use balancer/vliquid\n            IBPool exPool = IBPool(_pool);\n\n            return exPool.calcOutGivenIn(\n                exPool.getBalance(_token),\n                exPool.getDenormalizedWeight(_token),\n                exPool.getBalance(valueToken),\n                exPool.getDenormalizedWeight(valueToken),\n                _tokenAmount,\n                exPool.swapFee()\n            );\n        } else {// use Uniswap\n\n            address[] memory path = uniswapPaths[_token];\n            if (path.length == 0) {\n                // path: _input -> valueToken\n                path = new address[](2);\n                path[0] = _token;\n                path[1] = valueToken;\n            }\n\n            uint[] memory amounts = unirouter.getAmountsOut(_tokenAmount, path);\n            return amounts[amounts.length - 1];\n        }\n    }\n\n    function getAvailableTokens()\n    external\n    view\n    returns (\n        address[] memory _tokens,\n        uint256[] memory _amounts,\n        uint256[] memory _values\n    )\n    {\n        _tokens = new address[](supportedTokenLength);\n        _amounts = new uint256[](supportedTokenLength);\n        _values = new uint256[](supportedTokenLength);\n        for (uint256 i = 0; i < supportedTokenLength; i++) {\n            address _stok = supportedTokens[i];\n            _tokens[i] = _stok;\n            uint256 _tokenAmt = IERC20(_stok).balanceOf(address(bFactory)).add(IERC20(_stok).balanceOf(address(this)));\n            _amounts[i] = _tokenAmt;\n            if (_stok == valueToken) {\n                _values[i] = _tokenAmt;\n            } else {\n                _values[i] = getExchangeRateToValue(_stok, _tokenAmt);\n            }\n        }\n    }\n\n    function collectProfit(address _token, uint8 flag) public discountCHI(flag) returns (uint256 _profit) {\n        bFactory.collect(_token);\n        uint256 _tokenBal = IERC20(_token).balanceOf(address(this));\n        if (_tokenBal > 0) {\n            if (_token == valueToken) {\n                // if token is VALUE, just forward to Gov Vault\n                _profit = _tokenBal;\n            } else {\n                // otherwise, convert to VALUE and forward to Gov Vault\n                _swapToValue(_token, _tokenBal);\n                _profit = IERC20(valueToken).balanceOf(address(this));\n            }\n        }\n        if (_profit > 0) {\n            if (insuranceFee > 0 && insuranceFund != address(0)) {\n                uint256 _insurance = _profit.mul(insuranceFee).div(10000);\n                _profit = _profit.sub(_insurance);\n                IERC20(valueToken).safeTransfer(insuranceFund, _insurance);\n                emit CollectInsurance(_insurance);\n            }\n            IERC20(valueToken).safeTransfer(govVault, _profit);\n            emit CollectProfit(_token, _tokenBal, _profit);\n        }\n    }\n\n    function _swapToValue(address _input, uint256 _amount) internal {\n        address _pool = vliquidPools[_input];\n        if (_pool != address(0)) {\n            // use balancer/vliquid\n            IERC20(_input).safeApprove(_pool, 0);\n            IERC20(_input).safeApprove(_pool, _amount);\n            IBPool(_pool).swapExactAmountIn(_input, _amount, valueToken, 1, type(uint256).max);\n        } else {// use Uniswap\n            // use Uniswap\n            address[] memory path = uniswapPaths[_input];\n            if (path.length == 0) {\n                // path: _input -> valueToken\n                path = new address[](2);\n                path[0] = _input;\n                path[1] = valueToken;\n            }\n            IERC20(_input).safeApprove(address(unirouter), 0);\n            IERC20(_input).safeApprove(address(unirouter), _amount);\n            unirouter.swapExactTokensForTokens(_amount, 1, path, address(this), now.add(1800));\n        }\n    }\n\n    /**\n     * This function allows governance to take unsupported tokens out of the contract. This is in an effort to make someone whole, should they seriously mess up.\n     * There is no guarantee governance will vote to return these. It also allows for removal of airdropped tokens.\n     */\n    function governanceRecoverUnsupported(IERC20 _token, uint256 amount, address to) external {\n        require(msg.sender == governance, \"!governance\");\n        _token.transfer(to, amount);\n    }\n}\n"
    }
  }
}