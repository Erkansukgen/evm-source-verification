{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "BNFYStaking.sol": {
      "content": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n\n\n\npragma solidity ^0.6.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/GSN/Context.sol\n\n\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: contracts/Ownable.sol\n\npragma solidity ^0.6.10;\n\n\ncontract Ownable is Context {\n\n    address payable public owner;\n\n    event TransferredOwnership(address _previous, address _next, uint256 _time);\n    event AddedPlatformAddress(address _platformAddress, uint256 _time);\n    event RemovedPlatformAddress(address _platformAddress, uint256 _time);\n\n    modifier onlyOwner() {\n        require(_msgSender() == owner, \"Owner only\");\n        _;\n    }\n\n    modifier onlyPlatform() {\n        require(platformAddress[_msgSender()] == true, \"Only Platform\");\n        _;\n    }\n\n    mapping(address => bool) platformAddress;\n\n    constructor() public {\n        owner = _msgSender();\n    }\n\n    // Function to transfer ownership\n    function transferOwnership(address payable _owner) public onlyOwner() {\n        address previousOwner = owner;\n        owner = _owner;\n        emit TransferredOwnership(previousOwner, owner, now);\n    }\n\n    // Function to add platform address\n    function addPlatformAddress(address _platformAddress) public onlyOwner() {\n        require(platformAddress[_platformAddress] == false, \"already platform address\");\n        platformAddress[_platformAddress] = true;\n\n        emit AddedPlatformAddress(_platformAddress, now);\n    }\n\n    // Function to remove platform address\n    function removePlatformAddress(address _platformAddress) public onlyOwner() {\n        require(platformAddress[_platformAddress] == true, \"not platform address\");\n        platformAddress[_platformAddress] = false;\n\n        emit RemovedPlatformAddress(_platformAddress, now);\n    }\n}\n\n// File: contracts/ROBOStaking.sol\n\n\n\npragma solidity ^0.6.10;\n\n\n\n\n\ninterface IROBOStakingNFT {\n    function nftTokenId(address _stakeholder) external view returns(uint id);\n    function revertNftTokenId(address _stakeholder, uint _tokenId) external;\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n    function balanceOf(address owner) external view returns (uint256 balance);\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n}\n\ncontract ROBOStaking is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    bool public safeguard;\n    struct NFT {\n        address _addressOfMinter;\n        uint _ROBODeposited;\n        bool _inCirculation;\n        uint _rewardDebt;\n    }\n\n    event StakeCompleted(address _staker, uint _amount, uint _tokenId, uint _totalStaked, uint _time);\n    event WithdrawCompleted(address _staker, uint _amount, uint _tokenId, uint _time);\n    event PoolUpdated(uint _blocksRewarded, uint _amountRewarded, uint _time);\n    event RewardsClaimed(address _staker, uint _rewardsClaimed, uint _tokenId, uint _time);\n    event RewardsCompounded(address _staker, uint _rewardsCompounded, uint _tokenId, uint _totalStaked, uint _time);\n    event MintedToken(address _staker, uint256 _tokenId, uint256 _time);\n\n    event TotalUnstaked(uint _total);\n\n    IERC20 public ROBOToken;\n    IROBOStakingNFT public StakingNFT;\n    address public rewardPool;\n    address public staking;\n    uint public dailyReward;\n    uint public accRoboPerShare;\n    uint public lastRewardBlock;\n    uint public totalStaked;\n\n    mapping(uint => NFT) public NFTDetails;\n\n    // Constructor will set the address of ROBO token and address of ROBO staking NFT\n    constructor(address _ROBOToken, address _StakingNFT, address _staking, address _rewardPool, uint _dailyReward) Ownable() public {\n        ROBOToken = IERC20(_ROBOToken);\n        StakingNFT = IROBOStakingNFT(_StakingNFT);\n        staking = _staking;\n        rewardPool = _rewardPool;\n\n        // Apr-05-2021 06:00:00 PM +UTC\n        lastRewardBlock = 6308868;\n\n        setDailyReward(_dailyReward);\n        accRoboPerShare;\n    }\n\n    // 28800 blocks in average day --- decimals * ROBO balance of rewardPool / blocks / 10000 * dailyReward (in hundredths of %) = rewardPerBlock\n    function getRewardPerBlock() public view returns(uint) {\n        return ROBOToken.balanceOf(rewardPool).mul(dailyReward).div(28800).div(10000);\n    }\n\n    // % of reward pool to be distributed each day --- in hundredths of % 30 == 0.3%\n    function setDailyReward(uint _dailyReward) public onlyOwner {\n        dailyReward = _dailyReward;\n    }\n\n    // Function that will get balance of a ROBO balance of a certain stake\n    function getNFTBalance(uint _tokenId) public view returns(uint _amountStaked) {\n        return NFTDetails[_tokenId]._ROBODeposited;\n    }\n\n    // Function that will check if a ROBO stake NFT is in circulation\n    function checkIfNFTInCirculation(uint _tokenId) public view returns(bool _inCirculation) {\n        return NFTDetails[_tokenId]._inCirculation;\n    }\n\n    // Function that returns NFT's pending rewards\n    function pendingRewards(uint _NFT) public view returns(uint) {\n        NFT storage nft = NFTDetails[_NFT];\n\n        uint256 _accRoboPerShare = accRoboPerShare;\n\n        if (block.number > lastRewardBlock && totalStaked != 0) {\n            uint256 blocksToReward = block.number.sub(lastRewardBlock);\n            uint256 roboReward = blocksToReward.mul(getRewardPerBlock());\n            _accRoboPerShare = _accRoboPerShare.add(roboReward.mul(1e18).div(totalStaked));\n        }\n\n        return nft._ROBODeposited.mul(_accRoboPerShare).div(1e18).sub(nft._rewardDebt);\n    }\n\n    // Get total rewards for all of user's ROBO nfts\n    function getTotalRewards(address _address) public view returns(uint) {\n        uint totalRewards;\n\n        for(uint i = 0; i < StakingNFT.balanceOf(_address); i++) {\n            uint _rewardPerNFT = pendingRewards(StakingNFT.tokenOfOwnerByIndex(_address, i));\n            totalRewards = totalRewards.add(_rewardPerNFT);\n        }\n\n        return totalRewards;\n    }\n\n    // Get total stake for all user's ROBO nfts\n    function getTotalBalance(address _address) public view returns(uint) {\n        uint totalBalance;\n\n        for(uint i = 0; i < StakingNFT.balanceOf(_address); i++) {\n            uint _balancePerNFT = getNFTBalance(StakingNFT.tokenOfOwnerByIndex(_address, i));\n            totalBalance = totalBalance.add(_balancePerNFT);\n        }\n\n        return totalBalance;\n    }\n\n    // Function that updates ROBO pool\n    function updatePool() public {\n        if (block.number <= lastRewardBlock) {\n            return;\n        }\n\n        if (totalStaked == 0) {\n            lastRewardBlock = block.number;\n            return;\n        }\n\n        uint256 blocksToReward = block.number.sub(lastRewardBlock);\n\n        uint256 roboReward = blocksToReward.mul(getRewardPerBlock());\n\n        //Approve roboReward here\n        ROBOToken.transferFrom(rewardPool, address(this), roboReward);\n\n        accRoboPerShare = accRoboPerShare.add(roboReward.mul(1e18).div(totalStaked));\n        lastRewardBlock = block.number;\n\n        emit PoolUpdated(blocksToReward, roboReward, now);\n    }\n\n    // Function that lets user stake ROBO\n    function stakeROBO(uint _amount) public {\n        require(!safeguard);\n        require(_amount > 0, \"Can not stake 0 ROBO\");\n        require(ROBOToken.balanceOf(_msgSender()) >= _amount, \"Do not have enough ROBO to stake\");\n\n        updatePool();\n\n        if(StakingNFT.nftTokenId(_msgSender()) == 0){\n             addStakeholder(_msgSender());\n        }\n\n        NFT storage nft = NFTDetails[StakingNFT.nftTokenId(_msgSender())];\n\n        if(nft._ROBODeposited > 0) {\n            uint _pendingRewards = nft._ROBODeposited.mul(accRoboPerShare).div(1e18).sub(nft._rewardDebt);\n\n            if(_pendingRewards > 0) {\n                ROBOToken.transfer(_msgSender(), _pendingRewards);\n                emit RewardsClaimed(_msgSender(), _pendingRewards, StakingNFT.nftTokenId(_msgSender()), now);\n            }\n        }\n\n        ROBOToken.transferFrom(_msgSender(), address(this), _amount);\n        nft._ROBODeposited = nft._ROBODeposited.add(_amount);\n        totalStaked = totalStaked.add(_amount);\n\n        nft._rewardDebt = nft._ROBODeposited.mul(accRoboPerShare).div(1e18);\n\n        emit StakeCompleted(_msgSender(), _amount, StakingNFT.nftTokenId(_msgSender()), nft._ROBODeposited, now);\n\n    }\n\n    function addStakeholder(address _stakeholder) private {\n        require(!safeguard);\n        (bool success, bytes memory data) = staking.call(abi.encodeWithSignature(\"mint(address)\", _stakeholder));\n        require(success == true, \"Mint call failed\");\n        NFTDetails[StakingNFT.nftTokenId(_msgSender())]._addressOfMinter = _stakeholder;\n        NFTDetails[StakingNFT.nftTokenId(_msgSender())]._inCirculation = true;\n    }\n\n    function addStakeholderExternal(address _stakeholder) external onlyPlatform() {\n        require(!safeguard);\n        (bool success, bytes memory data) = staking.call(abi.encodeWithSignature(\"mint(address)\", _stakeholder));\n        require(success == true, \"Mint call failed\");\n        NFTDetails[StakingNFT.nftTokenId(_stakeholder)]._addressOfMinter = _stakeholder;\n        NFTDetails[StakingNFT.nftTokenId(_stakeholder)]._inCirculation = true;\n    }\n\n    // Function that will allow user to claim rewards\n    function claimRewards(uint _tokenId) public {\n        require(!safeguard);\n        require(StakingNFT.ownerOf(_tokenId) == _msgSender(), \"User is not owner of token\");\n        require(NFTDetails[_tokenId]._inCirculation == true, \"Stake has already been withdrawn\");\n\n        updatePool();\n\n        NFT storage nft = NFTDetails[_tokenId];\n\n        uint _pendingRewards = nft._ROBODeposited.mul(accRoboPerShare).div(1e18).sub(nft._rewardDebt);\n        require(_pendingRewards > 0, \"No rewards to claim!\");\n\n        ROBOToken.transfer(_msgSender(), _pendingRewards);\n\n        nft._rewardDebt = nft._ROBODeposited.mul(accRoboPerShare).div(1e18);\n\n        emit RewardsClaimed(_msgSender(), _pendingRewards, _tokenId, now);\n    }\n\n    // Function that will add ROBO rewards to ROBO staking NFT\n    function compoundRewards(uint _tokenId) public {\n        require(!safeguard);\n        require(StakingNFT.ownerOf(_tokenId) == _msgSender(), \"User is not owner of token\");\n        require(NFTDetails[_tokenId]._inCirculation == true, \"Stake has already been withdrawn\");\n\n        updatePool();\n\n        NFT storage nft = NFTDetails[_tokenId];\n\n        uint _pendingRewards = nft._ROBODeposited.mul(accRoboPerShare).div(1e18).sub(nft._rewardDebt);\n        require(_pendingRewards > 0, \"No rewards to compound!\");\n\n        nft._ROBODeposited = nft._ROBODeposited.add(_pendingRewards);\n        totalStaked = totalStaked.add(_pendingRewards);\n\n        nft._rewardDebt = nft._ROBODeposited.mul(accRoboPerShare).div(1e18);\n\n        emit RewardsCompounded(_msgSender(), _pendingRewards, _tokenId, nft._ROBODeposited, now);\n    }\n\n    // Function that lets user claim all rewards from all their nfts\n    function claimAllRewards() public {\n        require(!safeguard);\n        require(StakingNFT.balanceOf(_msgSender()) > 0, \"User has no stake\");\n        for(uint i = 0; i < StakingNFT.balanceOf(_msgSender()); i++) {\n            uint _currentNFT = StakingNFT.tokenOfOwnerByIndex(_msgSender(), i);\n            claimRewards(_currentNFT);\n        }\n    }\n\n    // Function that lets user compound all rewards from all their nfts\n    function compoundAllRewards() public {\n        require(!safeguard);\n        require(StakingNFT.balanceOf(_msgSender()) > 0, \"User has no stake\");\n        for(uint i = 0; i < StakingNFT.balanceOf(_msgSender()); i++) {\n            uint _currentNFT = StakingNFT.tokenOfOwnerByIndex(_msgSender(), i);\n            compoundRewards(_currentNFT);\n        }\n    }\n\n    // Function that lets user unstake ROBO in system. 5% fee that gets redistributed back to reward pool\n    function unstakeROBO(uint _tokenId) public {\n        require(!safeguard);\n        // Require that user is owner of token id\n        require(StakingNFT.ownerOf(_tokenId) == _msgSender(), \"User is not owner of token\");\n        require(NFTDetails[_tokenId]._inCirculation == true, \"Stake has already been withdrawn\");\n\n        updatePool();\n\n        NFT storage nft = NFTDetails[_tokenId];\n\n        uint _pendingRewards = nft._ROBODeposited.mul(accRoboPerShare).div(1e18).sub(nft._rewardDebt);\n\n        uint amountStaked = getNFTBalance(_tokenId);\n        uint stakeAfterFees = amountStaked.div(100).mul(95);\n        uint userReceives = amountStaked.div(100).mul(95).add(_pendingRewards);\n\n        uint fee = amountStaked.div(100).mul(5);\n\n        uint beingWithdrawn = nft._ROBODeposited;\n        nft._ROBODeposited = 0;\n        nft._inCirculation = false;\n        totalStaked = totalStaked.sub(beingWithdrawn);\n        StakingNFT.revertNftTokenId(_msgSender(), _tokenId);\n\n        (bool success, bytes memory data) = staking.call(abi.encodeWithSignature(\"burn(uint256)\", _tokenId));\n        require(success == true, \"mint call failed\");\n\n        ROBOToken.transfer(_msgSender(), userReceives);\n        ROBOToken.transfer(rewardPool, fee);\n\n        emit WithdrawCompleted(_msgSender(), stakeAfterFees, _tokenId, now);\n        emit RewardsClaimed(_msgSender(), _pendingRewards, _tokenId, now);\n    }\n\n    // Function that will unstake every user's ROBO stake NFT for user\n    function unstakeAll() public {\n        require(!safeguard);\n        require(StakingNFT.balanceOf(_msgSender()) > 0, \"User has no stake\");\n\n        while(StakingNFT.balanceOf(_msgSender()) > 0) {\n            uint _currentNFT = StakingNFT.tokenOfOwnerByIndex(_msgSender(), 0);\n            unstakeROBO(_currentNFT);\n        }\n\n    }\n\n    // Will increment value of staking NFT when trade occurs\n    function incrementNFTValue (uint _tokenId, uint _amount) external onlyPlatform() {\n        require(!safeguard);\n        require(checkIfNFTInCirculation(_tokenId) == true, \"Token not in circulation\");\n        updatePool();\n\n        NFT storage nft = NFTDetails[_tokenId];\n\n        if(nft._ROBODeposited > 0) {\n            uint _pendingRewards = nft._ROBODeposited.mul(accRoboPerShare).div(1e18).sub(nft._rewardDebt);\n\n            if(_pendingRewards > 0) {\n                ROBOToken.transfer(StakingNFT.ownerOf(_tokenId), _pendingRewards);\n                emit RewardsClaimed(StakingNFT.ownerOf(_tokenId), _pendingRewards, _tokenId, now);\n            }\n        }\n\n        NFTDetails[_tokenId]._ROBODeposited =  NFTDetails[_tokenId]._ROBODeposited.add(_amount);\n\n        nft._rewardDebt = nft._ROBODeposited.mul(accRoboPerShare).div(1e18);\n    }\n\n    // Will decrement value of staking NFT when trade occurs\n    function decrementNFTValue (uint _tokenId, uint _amount) external onlyPlatform() {\n        require(!safeguard);\n        require(checkIfNFTInCirculation(_tokenId) == true, \"Token not in circulation\");\n        require(getNFTBalance(_tokenId) >= _amount, \"Not enough stake in NFT\");\n\n        updatePool();\n\n        NFT storage nft = NFTDetails[_tokenId];\n\n        if(nft._ROBODeposited > 0) {\n            uint _pendingRewards = nft._ROBODeposited.mul(accRoboPerShare).div(1e18).sub(nft._rewardDebt);\n\n            if(_pendingRewards > 0) {\n                ROBOToken.transfer(StakingNFT.ownerOf(_tokenId), _pendingRewards);\n                emit RewardsClaimed(StakingNFT.ownerOf(_tokenId), _pendingRewards, _tokenId, now);\n            }\n        }\n\n        NFTDetails[_tokenId]._ROBODeposited =  NFTDetails[_tokenId]._ROBODeposited.sub(_amount);\n\n        nft._rewardDebt = nft._ROBODeposited.mul(accRoboPerShare).div(1e18);\n    }\n    \n     function changeSafeguardStatus() onlyPlatform() public{\n        if (safeguard == false){\n            safeguard = true;\n        }\n        else{\n            safeguard = false;    \n        }\n    }\n\n}"
    }
  }
}