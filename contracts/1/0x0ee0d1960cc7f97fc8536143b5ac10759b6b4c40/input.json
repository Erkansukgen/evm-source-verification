{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/LIDOToken.sol":{"content":"pragma solidity ^0.6.0;\n\n// SPDX-License-Identifier: UNLICENSED\n\nabstract contract ERC20Interface {\n    function totalSupply() public virtual view returns (uint);\n    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\n    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\n    function transfer(address to, uint256 tokens) public virtual returns (bool success);\n    function approve(address spender, uint256 tokens) public virtual returns (bool success);\n    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n *\n*/\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function ceil(uint a, uint m) internal pure returns (uint r) {\n    return (a + m - 1) / m * m;\n  }\n}\n\n// Owned contract\ncontract Owned {\n    address payable public owner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address payable _newOwner) public onlyOwner {\n        owner = _newOwner;\n        emit OwnershipTransferred(msg.sender, _newOwner);\n    }\n}\n\ncontract LIDOFinance is ERC20Interface, Owned{\n    using SafeMath for uint256;\n    string public symbol = \"LIDO\";\n    string public  name = \"LIDO Finance\";\n    uint256 public decimals = 18;\n    uint256 _totalSupply = 5000000 * 10 ** decimals;\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n\n    // Constructor\n    constructor(address preSaleContract) public {\n        owner = msg.sender;\n        \n        balances[preSaleContract] = 5000000 * 10 ** (decimals);\n        emit Transfer(address(0), preSaleContract, 5000000 * 10 ** (decimals));\n        \n        balances[owner] = 0 * 10 ** (decimals);\n        emit Transfer(address(0), owner, 0 * 10 ** (decimals));\n    }\n\n    function totalSupply() public override view returns (uint256){\n       return _totalSupply;\n    }\n    \n    // Get the token balance for account `tokenOwner`\n    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\n        return balances[tokenOwner];\n    }\n\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    function transfer(address to, uint256 tokens) public override returns (bool success) {\n        // prevent transfer to 0x0, use burn instead\n        require(address(to) != address(0));\n        require(balances[msg.sender] >= tokens);\n        require(balances[to] + tokens >= balances[to]);\n        \n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender,to,tokens);\n        return true;\n    }\n\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    function approve(address spender, uint256 tokens) public override returns (bool success){\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender,spender,tokens);\n        return true;\n    }\n\n    // Transfer `tokens` from the `from` account to the `to` account\n    //\n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\n        require(tokens <= allowed[from][msg.sender]); //check allowance\n        require(balances[from] >= tokens);\n        require(balances[to] + tokens >= balances[to]);\n        \n        balances[from] = balances[from].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        emit Transfer(from,to,tokens);\n        return true;\n    }\n\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n    // @dev function that burns an amount of the token from caller account\n    // @param _amount The amount that will be burnt\n    // can be used from account owner\n    function burnTokens(uint256 _amount) external{\n        require(balances[msg.sender] >= _amount, \"Insufficient account balance\");\n        _totalSupply = _totalSupply.sub(_amount);\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        emit Transfer(msg.sender, address(0), _amount);\n    }    \n}"}}}