{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/3_Ballot.sol": {
      "content": "pragma solidity 0.6.12;\n\npragma experimental ABIEncoderV2;\n\n// This contract simply calls multiple targets sequentially, ensuring WETH balance before and after\n\ncontract FlashBotsMultiCall {\n    address private immutable owner;\n    address private immutable executor;\n\n    modifier onlyExecutor() {\n        require(msg.sender == executor);\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor(address _executor) public payable {\n        owner = msg.sender;\n        executor = _executor;\n    }\n\n    receive() external payable {\n    }\n\n    function transact(uint256 _ethAmountToCoinbase, address[] memory _targets, bytes[] memory _payloads) external onlyExecutor payable {\n        require (_targets.length == _payloads.length);\n        for (uint256 i = 0; i < _targets.length; i++) {\n            (bool _success, bytes memory _response) = _targets[i].call(_payloads[i]);\n            require(_success); _response;\n        }\n        if (_ethAmountToCoinbase > 0) {\n           block.coinbase.transfer(_ethAmountToCoinbase); \n        }\n    }\n\n    function call(address payable _to, uint256 _value, bytes calldata _data) external onlyOwner payable returns (bytes memory) {\n        require(_to != address(0));\n        (bool _success, bytes memory _result) = _to.call{value: _value}(_data);\n        require(_success);\n        return _result;\n    }\n}"
    }
  }
}