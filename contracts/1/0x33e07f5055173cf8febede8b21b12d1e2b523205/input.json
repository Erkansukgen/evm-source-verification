{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Proxy.sol": {
      "content": "pragma solidity ^0.7.0;\r\n\r\n/**\r\n* @title Proxy \r\n* @dev Etherland - ERC1822 Proxy contract implementation for ELAND ERC20\r\n* @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1822.md\r\n*/\r\ncontract Proxy {\r\n    constructor(bytes memory constructData, address contractLogic) {\r\n        assembly { \r\n            sstore(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7, contractLogic)\r\n        }\r\n        (bool success, bytes memory _ ) = contractLogic.delegatecall(constructData); \r\n        require(success, \"Construction failed\");\r\n    }\r\n\r\n    fallback() external payable {\r\n        assembly { \r\n            let contractLogic := sload(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7)\r\n            calldatacopy(0x0, 0x0, calldatasize())\r\n            let success := delegatecall(sub(gas(), 10000), contractLogic, 0x0, calldatasize(), 0, 0)\r\n            let retSz := returndatasize()\r\n            returndatacopy(0, 0, retSz)\r\n            switch success\r\n            case 0 {\r\n                revert(0, retSz)\r\n            }\r\n            default {\r\n                return(0, retSz)\r\n            }\r\n        }\r\n    }\r\n}"
    }
  }
}