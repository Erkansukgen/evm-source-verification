{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/CommitteeEnsResolver.sol":{"content":"\npragma solidity 0.6.12;\n\ninterface IContractRegistry {\n\tfunction getContract(string calldata contractName) external view returns (address);\n}\n\ninterface IElections {\n\tfunction getCommittee() external view returns (address[] memory committee, uint256[] memory weights, address[] memory orbsAddrs, bool[] memory certification, bytes4[] memory ips);\n}\n\ncontract CommitteeEnsResolver {\n\n    IContractRegistry   public orbsRegistry;\n    bytes32             public parentDomainNameHash;\n\n    constructor(address orbsRegistry_, bytes32 parentDomainNameHash_) public {\n        // set defaults\n        if (orbsRegistry_ == address(0)) {\n            orbsRegistry_ = 0xD859701C81119aB12A1e62AF6270aD2AE05c7AB3; // mainnet orbs V2 contracts registry\n        }\n    \n        if (parentDomainNameHash_ == bytes32(0)) {\n            parentDomainNameHash_ = 0xb30b0b22edc109e1bccfd9bf561963d8b0993b8de6025741af1fdd5bb75e1705; // committee.orbs.eth\n        }\n        \n        orbsRegistry = IContractRegistry(orbsRegistry_);\n        parentDomainNameHash = parentDomainNameHash_;\n    }\n\n    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\n        // only Ethereum address and text\n        return interfaceID == 0x3b3b57de || interfaceID == 0x59d1d43c || interfaceID == 0x01ffc9a7; \n    }\n\n    function addr(bytes32 nodeID) public view returns (address) {\n        IElections elections = IElections(orbsRegistry.getContract('elections'));\n        (address[] memory committee, , , , ) = elections.getCommittee();\n        \n        for (uint i = 0; i < committee.length; i++) {\n            if (nodeID == namehash(uintToString(i))) {\n                return committee[i];\n            }\n        }\n        return address(0);\n    }\n    \n    function text(bytes32 nodeID, string memory key) public view returns (string memory) {\n        if (keccak256(bytes(key)) != keccak256(bytes('url'))) {\n            return '';\n        }\n        \n        IElections elections = IElections(orbsRegistry.getContract('elections'));\n        (, , , , bytes4[] memory ips ) = elections.getCommittee();\n        \n        for (uint i = 0; i < ips.length; i++) {\n            if (nodeID == namehash(uintToString(i))) {\n                return string(abi.encodePacked(\n                    'http://', \n                    string(abi.encodePacked(byteToString(ips[i][0]), '.')), \n                    string(abi.encodePacked(byteToString(ips[i][1]), '.')), \n                    string(abi.encodePacked(byteToString(ips[i][2]), '.')), \n                    string(abi.encodePacked(byteToString(ips[i][3]), '/'))));\n            }\n        }\n        return '';\n        \n    }\n\n    function namehash(string memory label) internal view returns (bytes32) {\n        return keccak256(abi.encodePacked(parentDomainNameHash, keccak256(bytes(label))));\n    }\n    \n    function byteToString(byte v) internal pure returns (string memory str) {\n        return uintToString(uint8(v));\n    }\n    \n    function uintToString(uint v) internal pure returns (string memory str) {\n        if (v == 0) {\n            return '0';\n        }\n        \n        bytes memory reversed = new bytes(100);\n        uint len = 0;\n        while (v != 0) {\n            uint ls = v % 10;\n            v = v / 10;\n            reversed[len++] = byte(48 + uint8(ls));\n        }\n        bytes memory s = new bytes(len);\n        for (uint j = 0; j < len; j++) {\n            s[j] = reversed[len - 1 - j];\n        }\n        str = string(s);\n    }\n    \n}\n    "}}}