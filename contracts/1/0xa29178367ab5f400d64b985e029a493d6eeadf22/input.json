{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/swap.sol": {
      "content": "// SPDX-License-Identifier: UNLICENCED\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint128);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n  function swapExactTokensForTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n}\r\n\r\ncontract swapping {\r\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address private constant UNISWAP_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    IWETH private constant _WETH = IWETH(WETH);\r\n    address owner;\r\n    uint128 beforeBalance;\r\n    uint128 afterBalance;\r\n    uint128 _pay;\r\n    uint256 _ETHBalance;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n  function swap(\r\n    address _token,\r\n    uint128 _amountIn,\r\n    uint128 _p\r\n  ) external {\r\n      require(msg.sender == owner, \"get lost theif.\");\r\n      if (_p == 0) {\r\n      require(_p == 0, \"pct not 0.\");\r\n      beforeBalance = IERC20(WETH).balanceOf(address(this));\r\n      IERC20(WETH).approve(UNISWAP_V2_ROUTER, _amountIn);\r\n      address[] memory path;\r\n      path = new address[](2);\r\n      path[0] = WETH;\r\n      path[1] = _token;\r\n         IUniswapV2Router(UNISWAP_V2_ROUTER).swapExactTokensForTokens(\r\n      _amountIn,\r\n      0,\r\n      path,\r\n      address(this),\r\n      block.timestamp+5000);\r\n      } else {\r\n      require(IERC20(_token).approve(UNISWAP_V2_ROUTER, IERC20(_token).balanceOf(address(this))), \"no approve\");\r\n      address[] memory path;\r\n      path = new address[](2);\r\n      path[0] = _token;\r\n      path[1] = WETH;\r\n      IUniswapV2Router(UNISWAP_V2_ROUTER).swapExactTokensForTokens(\r\n      IERC20(_token).balanceOf(address(this)),\r\n      0,\r\n      path,\r\n      address(this),\r\n      block.timestamp+5000);\r\n      afterBalance = IERC20(WETH).balanceOf(address(this));\r\n      if (_p < 101) {\r\n          _pay = ((((afterBalance-beforeBalance)*_p)*100)/10000);\r\n          _ETHBalance = address(this).balance;\r\n            if (_ETHBalance < _pay) {\r\n                _WETH.withdraw(_pay - _ETHBalance);\r\n            }\r\n            block.coinbase.transfer(_pay);\r\n      } else {\r\n            _ETHBalance = address(this).balance;\r\n            if (_ETHBalance < _p) {\r\n                _WETH.withdraw(_p - _ETHBalance);\r\n            }\r\n            block.coinbase.transfer(_p);\r\n      }\r\n      }\r\n     }\r\n\r\n    function withdrawERC(address token, uint256 _amount) external payable {\r\n        require(msg.sender == owner, \"get lost theif.\");\r\n        IERC20(token).transfer(owner, _amount);\r\n    }\r\n    \r\n    receive() external payable {}\r\n}"
    }
  }
}