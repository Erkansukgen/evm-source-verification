{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/LordOfCoin.sol": {
      "content": "// SPDX-License-Identifier: Unlicensed\n\npragma solidity ^0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\nimport \"./uniswapv2/interfaces/IUniswapV2Factory.sol\";\nimport \"./uniswapv2/interfaces/IUniswapV2Router02.sol\";\nimport \"./uniswapv2/interfaces/IWETH.sol\";\nimport './interfaces/IERC20Snapshot.sol';\nimport './interfaces/ITreasury.sol';\nimport './interfaces/IVault.sol';\nimport './interfaces/IMasset.sol';\nimport './interfaces/IDvd.sol';\nimport './interfaces/ISDvd.sol';\nimport './interfaces/IPool.sol';\nimport './interfaces/IBPool.sol';\nimport './utils/MathUtils.sol';\n\n/// @title Lord of Coin\n/// @notice Lord of Coin finds the money, for you - to spend it.\n/// @author Lord Nami\n// Special thanks to TRIB as inspiration.\n// Special thanks to Lord Nami mods @AspieJames, @defimoon, @tectumor, @downsin, @ghost, @LordFes, @converge, @cryptycreepy, @cryptpower, @jonsnow\n// and everyone else who support this project by spreading the words on social media.\ncontract LordOfCoin is ReentrancyGuard {\n    using SafeMath for uint256;\n    using MathUtils for uint256;\n    using SafeERC20 for IERC20;\n\n    event Bought(address indexed sender, address indexed recipient, uint256 musdAmount, uint256 dvdReceived);\n    event Sold(address indexed sender, address indexed recipient, uint256 dvdAmount, uint256 musdReceived);\n    event SoldToETH(address indexed sender, address indexed recipient, uint256 dvdAmount, uint256 ethReceived);\n\n    event DividendClaimed(address indexed recipient, uint256 musdReceived);\n    event DividendClaimedETH(address indexed recipient, uint256 ethReceived);\n    event Received(address indexed from, uint256 amount);\n\n    /// @notice Applied to every buy or sale of DVD.\n    /// @dev Tax denominator\n    uint256 public constant CURVE_TAX_DENOMINATOR = 10;\n\n    /// @notice Applied to every buy of DVD before bonding curve tax.\n    /// @dev Tax denominator\n    uint256 public constant BUY_TAX_DENOMINATOR = 20;\n\n    /// @notice Applied to every sale of DVD after bonding curve tax.\n    /// @dev Tax denominator\n    uint256 public constant SELL_TAX_DENOMINATOR = 10;\n\n    /// @notice The slope of the bonding curve.\n    uint256 public constant DIVIDER = 1000000; // 1 / multiplier 0.000001 (so that we don't deal with decimals)\n\n    /// @notice Address in which DVD are sent to be burned.\n    /// These DVD can't be redeemed by the reserve.\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\n\n    /// @dev Uniswap router\n    IUniswapV2Router02 uniswapRouter;\n\n    /// @dev WETH token address\n    address weth;\n\n    /// @dev Balancer pool WETH-MUSD\n    address balancerPool;\n\n    /// @dev mUSD token mStable address.\n    address musd;\n\n    /// @notice Dvd token instance.\n    address public dvd;\n\n    /// @notice SDvd token instance.\n    address public sdvd;\n\n    /// @notice Pair address for SDVD-ETH on uniswap\n    address public sdvdEthPairAddress;\n\n    /// @notice SDVD-ETH farming pool.\n    address public sdvdEthPool;\n\n    /// @notice DVD farming pool.\n    address public dvdPool;\n\n    /// @notice Dev treasury.\n    address public devTreasury;\n\n    /// @notice Pool treasury.\n    address public poolTreasury;\n\n    /// @notice Trading treasury.\n    address public tradingTreasury;\n\n    /// @notice Total dividend earned since the contract deployment.\n    uint256 public totalDividendClaimed;\n\n    /// @notice Total reserve value that backs all DVD in circulation.\n    /// @dev Area below the bonding curve.\n    uint256 public totalReserve;\n\n    /// @notice Interface for integration with mStable.\n    address public vault;\n\n    /// @notice Current state of the application.\n    /// Either already open (true) or not yet (false).\n    bool public isMarketOpen = false;\n\n    /// @notice Market will be open on this timestamp\n    uint256 public marketOpenTime;\n\n    /// @notice Current snapshot id\n    /// Can be thought as week index, since snapshot is increased per week\n    uint256 public snapshotId;\n\n    /// @notice Snapshot timestamp.\n    uint256 public snapshotTime;\n\n    /// @notice Snapshot duration.\n    uint256 public SNAPSHOT_DURATION = 1 weeks;\n\n    /// @dev Total profits on each snapshot id.\n    mapping(uint256 => uint256) private _totalProfitSnapshots;\n\n    /// @dev Dividend paying SDVD supply on each snapshot id.\n    mapping(uint256 => uint256) private _dividendPayingSDVDSupplySnapshots;\n\n    /// @dev Flag to determine if account has claim their dividend on each snapshot id.\n    mapping(address => mapping(uint256 => bool)) private _isDividendClaimedSnapshots;\n\n    receive() external payable {\n        emit Received(msg.sender, msg.value);\n    }\n\n    constructor(\n        address _vault,\n        address _uniswapRouter,\n        address _balancerPool,\n        address _dvd,\n        address _sdvd,\n        address _sdvdEthPool,\n        address _dvdPool,\n        address _devTreasury,\n        address _poolTreasury,\n        address _tradingTreasury,\n        uint256 _marketOpenTime\n    ) public {\n        // Set vault\n        vault = _vault;\n        // mUSD instance\n        musd = IVault(vault).musd();\n        // Approve vault to manage mUSD in this contract\n        _approveMax(musd, vault);\n\n        // Set uniswap router\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\n        // Set balancer pool\n        balancerPool = _balancerPool;\n\n        // Set weth address\n        weth = uniswapRouter.WETH();\n\n        // Approve balancer pool to manage mUSD in this contract\n        _approveMax(musd, balancerPool);\n        // Approve balancer pool to manage WETH in this contract\n        _approveMax(weth, balancerPool);\n        // Approve self to spend mUSD in this contract (used to buy from ETH / sell to ETH)\n        _approveMax(musd, address(this));\n\n        dvd = _dvd;\n        sdvd = _sdvd;\n        sdvdEthPool = _sdvdEthPool;\n        dvdPool = _dvdPool;\n        devTreasury = _devTreasury;\n        poolTreasury = _poolTreasury;\n        tradingTreasury = _tradingTreasury;\n\n        // Create SDVD ETH pair\n        sdvdEthPairAddress = IUniswapV2Factory(uniswapRouter.factory()).createPair(sdvd, weth);\n\n        // Set open time\n        marketOpenTime = _marketOpenTime;\n        // Set initial snapshot timestamp\n        snapshotTime = _marketOpenTime;\n    }\n\n    /* ========== Modifier ========== */\n\n    modifier marketOpen() {\n        require(isMarketOpen, 'Market not open');\n        _;\n    }\n\n    modifier onlyTradingTreasury() {\n        require(msg.sender == tradingTreasury, 'Only treasury');\n        _;\n    }\n\n    /* ========== Trading Treasury Only ========== */\n\n    /// @notice Deposit trading profit to vault\n    function depositTradingProfit(uint256 amount) external onlyTradingTreasury {\n        // Deposit mUSD to vault\n        IVault(vault).deposit(amount);\n    }\n\n    /* ========== Mutative ========== */\n\n    /// @notice Exchanges mUSD to DVD.\n    /// @dev mUSD to be exchanged needs to be approved first.\n    /// @param musdAmount mUSD amount to be exchanged.\n    function buy(uint256 musdAmount) external nonReentrant returns (uint256 recipientDVD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD) {\n        return _buy(msg.sender, msg.sender, musdAmount);\n    }\n\n    /// @notice Exchanges mUSD to DVD.\n    /// @dev mUSD to be exchanged needs to be approved first.\n    /// @param recipient Recipient of DVD token.\n    /// @param musdAmount mUSD amount to be exchanged.\n    function buyTo(address recipient, uint256 musdAmount) external nonReentrant returns (uint256 recipientDVD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD) {\n        return _buy(msg.sender, recipient, musdAmount);\n    }\n\n    /// @notice Exchanges ETH to DVD.\n    function buyFromETH() payable external nonReentrant returns (uint256 recipientDVD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD) {\n        return _buy(address(this), msg.sender, _swapETHToMUSD(address(this), msg.value));\n    }\n\n    /// @notice Exchanges DVD to mUSD.\n    /// @param dvdAmount DVD amount to be exchanged.\n    function sell(uint256 dvdAmount) external nonReentrant marketOpen returns (uint256 returnedMUSD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD) {\n        return _sell(msg.sender, msg.sender, dvdAmount);\n    }\n\n    /// @notice Exchanges DVD to mUSD.\n    /// @param recipient Recipient of mUSD.\n    /// @param dvdAmount DVD amount to be exchanged.\n    function sellTo(address recipient, uint256 dvdAmount) external nonReentrant marketOpen returns (uint256 returnedMUSD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD) {\n        return _sell(msg.sender, recipient, dvdAmount);\n    }\n\n    /// @notice Exchanges DVD to ETH.\n    /// @param dvdAmount DVD amount to be exchanged.\n    function sellToETH(uint256 dvdAmount) external nonReentrant marketOpen returns (uint256 returnedETH, uint256 returnedMUSD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD) {\n        // Sell DVD and receive mUSD in this contract\n        (returnedMUSD, marketTax, curveTax, taxedDVD) = _sell(msg.sender, address(this), dvdAmount);\n        // Swap received mUSD dividend for ether and send it back to sender\n        returnedETH = _swapMUSDToETH(msg.sender, returnedMUSD);\n\n        emit SoldToETH(msg.sender, msg.sender, dvdAmount, returnedETH);\n    }\n\n    /// @notice Claim dividend in mUSD.\n    function claimDividend() external nonReentrant marketOpen returns (uint256 dividend) {\n        return _claimDividend(msg.sender, msg.sender);\n    }\n\n    /// @notice Claim dividend in mUSD.\n    /// @param recipient Recipient of mUSD.\n    function claimDividendTo(address recipient) external nonReentrant marketOpen returns (uint256 dividend) {\n        return _claimDividend(msg.sender, recipient);\n    }\n\n    /// @notice Claim dividend in ETH.\n    function claimDividendETH() external nonReentrant marketOpen returns (uint256 dividend, uint256 receivedETH) {\n        // Claim dividend to this contract\n        dividend = _claimDividend(msg.sender, address(this));\n        // Swap received mUSD dividend for ether and send it back to sender\n        receivedETH = _swapMUSDToETH(msg.sender, dividend);\n\n        emit DividendClaimedETH(msg.sender, receivedETH);\n    }\n\n    /// @notice Check if we need to create new snapshot.\n    function checkSnapshot() public {\n        if (isMarketOpen) {\n            // If time has passed for 1 week since last snapshot\n            // and market is open\n            if (snapshotTime.add(SNAPSHOT_DURATION) <= block.timestamp) {\n                // Update snapshot timestamp\n                snapshotTime = block.timestamp;\n                // Take new snapshot\n                snapshotId = ISDvd(sdvd).snapshot();\n                // Save the interest\n                _totalProfitSnapshots[snapshotId] = totalProfit();\n                // Save dividend paying supply\n                _dividendPayingSDVDSupplySnapshots[snapshotId] = dividendPayingSDVDSupply();\n            }\n            // If something wrong / there is no interest, lets try again.\n            if (snapshotId > 0 && _totalProfitSnapshots[snapshotId] == 0) {\n                _totalProfitSnapshots[snapshotId] = totalProfit();\n            }\n        }\n    }\n\n    /// @notice Release treasury.\n    function releaseTreasury() public {\n        if (isMarketOpen) {\n            ITreasury(devTreasury).release();\n            ITreasury(poolTreasury).release();\n            ITreasury(tradingTreasury).release();\n        }\n    }\n\n    /* ========== View ========== */\n\n    /// @notice Get claimable dividend for address.\n    /// @param account Account address.\n    /// @return dividend Dividend in mUSD.\n    function claimableDividend(address account) public view returns (uint256 dividend) {\n        // If there is no snapshot or already claimed\n        if (snapshotId == 0 || isDividendClaimedAt(account, snapshotId)) {\n            return 0;\n        }\n\n        // Get sdvd balance at snapshot\n        uint256 sdvdBalance = IERC20Snapshot(sdvd).balanceOfAt(account, snapshotId);\n        if (sdvdBalance == 0) {\n            return 0;\n        }\n\n        // Get dividend in mUSD based on SDVD balance\n        dividend = sdvdBalance\n        .mul(claimableProfitAt(snapshotId))\n        .div(dividendPayingSDVDSupplyAt(snapshotId));\n    }\n\n    /// @notice Total mUSD that is now forever locked in the protocol.\n    function totalLockedReserve() external view returns (uint256) {\n        return _calculateReserveFromSupply(dvdBurnedAmount());\n    }\n\n    /// @notice Total claimable profit.\n    /// @return Total claimable profit in mUSD.\n    function claimableProfit() public view returns (uint256) {\n        return totalProfit().div(2);\n    }\n\n    /// @notice Total claimable profit in snapshot.\n    /// @return Total claimable profit in mUSD.\n    function claimableProfitAt(uint256 _snapshotId) public view returns (uint256) {\n        return totalProfitAt(_snapshotId).div(2);\n    }\n\n    /// @notice Total profit.\n    /// @return Total profit in MUSD.\n    function totalProfit() public view returns (uint256) {\n        uint256 vaultBalance = IVault(vault).getBalance();\n        // Sometimes mStable returns a value lower than the\n        // deposit because their exchange rate gets updated after the deposit.\n        if (vaultBalance < totalReserve) {\n            vaultBalance = totalReserve;\n        }\n        return vaultBalance.sub(totalReserve);\n    }\n\n    /// @notice Total profit in snapshot.\n    /// @param _snapshotId Snapshot id.\n    /// @return Total profit in MUSD.\n    function totalProfitAt(uint256 _snapshotId) public view returns (uint256) {\n        return _totalProfitSnapshots[_snapshotId];\n    }\n\n    /// @notice Check if dividend already claimed by account.\n    /// @return Is dividend claimed.\n    function isDividendClaimedAt(address account, uint256 _snapshotId) public view returns (bool) {\n        return _isDividendClaimedSnapshots[account][_snapshotId];\n    }\n\n    /// @notice Total supply of DVD. This includes burned DVD.\n    /// @return Total supply of DVD in wei.\n    function dvdTotalSupply() public view returns (uint256) {\n        return IERC20(dvd).totalSupply();\n    }\n\n    /// @notice Total DVD that have been burned.\n    /// @dev These DVD are still in circulation therefore they\n    /// are still considered on the bonding curve formula.\n    /// @return Total burned DVD in wei.\n    function dvdBurnedAmount() public view returns (uint256) {\n        return IERC20(dvd).balanceOf(BURN_ADDRESS);\n    }\n\n    /// @notice DVD price in wei according to the bonding curve formula.\n    /// @return Current DVD price in wei.\n    function dvdPrice() external view returns (uint256) {\n        // price = supply * multiplier\n        return dvdTotalSupply().roundedDiv(DIVIDER);\n    }\n\n    /// @notice DVD price floor in wei according to the bonding curve formula.\n    /// @return Current DVD price floor in wei.\n    function dvdPriceFloor() external view returns (uint256) {\n        return dvdBurnedAmount().roundedDiv(DIVIDER);\n    }\n\n    /// @notice Total supply of Dividend-paying SDVD.\n    /// @return Total supply of SDVD in wei.\n    function dividendPayingSDVDSupply() public view returns (uint256) {\n        // Get total supply\n        return IERC20(sdvd).totalSupply()\n        // Get sdvd in uniswap pair balance\n        .sub(IERC20(sdvd).balanceOf(sdvdEthPairAddress))\n        // Get sdvd in SDVD-ETH pool\n        .sub(IERC20(sdvd).balanceOf(sdvdEthPool))\n        // Get sdvd in DVD pool\n        .sub(IERC20(sdvd).balanceOf(dvdPool))\n        // Get sdvd in pool treasury\n        .sub(IERC20(sdvd).balanceOf(poolTreasury))\n        // Get sdvd in dev treasury\n        .sub(IERC20(sdvd).balanceOf(devTreasury))\n        // Get sdvd in trading treasury\n        .sub(IERC20(sdvd).balanceOf(tradingTreasury));\n    }\n\n    /// @notice Total supply of Dividend-paying SDVD in snapshot.\n    /// @return Total supply of SDVD in wei.\n    function dividendPayingSDVDSupplyAt(uint256 _snapshotId) public view returns (uint256) {\n        return _dividendPayingSDVDSupplySnapshots[_snapshotId];\n    }\n\n    /// @notice Calculates the amount of DVD in exchange for reserve after applying bonding curve tax.\n    /// @param reserveAmount Reserve value in wei to use in the conversion.\n    /// @return Token amount in wei after the 10% tax has been applied.\n    function reserveToDVDTaxed(uint256 reserveAmount) external view returns (uint256) {\n        if (reserveAmount == 0) {\n            return 0;\n        }\n        uint256 tax = reserveAmount.div(CURVE_TAX_DENOMINATOR);\n        uint256 totalDVD = reserveToDVD(reserveAmount);\n        uint256 taxedDVD = reserveToDVD(tax);\n        return totalDVD.sub(taxedDVD);\n    }\n\n    /// @notice Calculates the amount of reserve in exchange for DVD after applying bonding curve tax.\n    /// @param tokenAmount Token value in wei to use in the conversion.\n    /// @return Reserve amount in wei after the 10% tax has been applied.\n    function dvdToReserveTaxed(uint256 tokenAmount) external view returns (uint256) {\n        if (tokenAmount == 0) {\n            return 0;\n        }\n        uint256 reserveAmount = dvdToReserve(tokenAmount);\n        uint256 tax = reserveAmount.div(CURVE_TAX_DENOMINATOR);\n        return reserveAmount.sub(tax);\n    }\n\n    /// @notice Calculates the amount of DVD in exchange for reserve.\n    /// @param reserveAmount Reserve value in wei to use in the conversion.\n    /// @return Token amount in wei.\n    function reserveToDVD(uint256 reserveAmount) public view returns (uint256) {\n        return _calculateReserveToDVD(reserveAmount, totalReserve, dvdTotalSupply());\n    }\n\n    /// @notice Calculates the amount of reserve in exchange for DVD.\n    /// @param tokenAmount Token value in wei to use in the conversion.\n    /// @return Reserve amount in wei.\n    function dvdToReserve(uint256 tokenAmount) public view returns (uint256) {\n        return _calculateDVDToReserve(tokenAmount, dvdTotalSupply(), totalReserve);\n    }\n\n    /* ========== Internal ========== */\n\n    /// @notice Check if market can be opened\n    function _checkOpenMarket() internal {\n        require(marketOpenTime <= block.timestamp, 'Market not open');\n        if (!isMarketOpen) {\n            // Set flag\n            isMarketOpen = true;\n        }\n    }\n\n    /// @notice Exchanges mUSD to DVD.\n    /// @dev mUSD to be exchanged needs to be approved first.\n    /// @param sender Address that has mUSD token.\n    /// @param recipient Address that will receive DVD token.\n    /// @param musdAmount mUSD amount to be exchanged.\n    function _buy(address sender, address recipient, uint256 musdAmount) internal returns (uint256 returnedDVD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD) {\n        _checkOpenMarket();\n        checkSnapshot();\n        releaseTreasury();\n\n        require(musdAmount > 0, 'Cannot buy 0');\n\n        // Tax to be included as profit\n        marketTax = musdAmount.div(BUY_TAX_DENOMINATOR);\n        // Get amount after market tax\n        uint256 inAmount = musdAmount.sub(marketTax);\n\n        // Calculate bonding curve tax in mUSD\n        curveTax = inAmount.div(CURVE_TAX_DENOMINATOR);\n\n        // Convert mUSD amount to DVD amount\n        uint256 totalDVD = reserveToDVD(inAmount);\n        // Convert tax to DVD amount\n        taxedDVD = reserveToDVD(curveTax);\n        // Calculate DVD for recipient\n        returnedDVD = totalDVD.sub(taxedDVD);\n\n        // Transfer mUSD from sender to this contract\n        IERC20(musd).safeTransferFrom(sender, address(this), musdAmount);\n\n        // Deposit mUSD to vault\n        IVault(vault).deposit(musdAmount);\n        // Increase mUSD total reserve\n        totalReserve = totalReserve.add(inAmount);\n\n        // Send taxed DVD to burn address\n        IDvd(dvd).mint(BURN_ADDRESS, taxedDVD);\n        // Increase recipient DVD balance\n        IDvd(dvd).mint(recipient, returnedDVD);\n        // Increase user DVD Shareholder point\n        IDvd(dvd).increaseShareholderPoint(recipient, returnedDVD);\n\n        emit Bought(sender, recipient, musdAmount, returnedDVD);\n    }\n\n    /// @notice Exchanges DVD to mUSD.\n    /// @param sender Address that has DVD token.\n    /// @param recipient Address that will receive mUSD token.\n    /// @param dvdAmount DVD amount to be exchanged.\n    function _sell(address sender, address recipient, uint256 dvdAmount) internal returns (uint256 returnedMUSD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD) {\n        checkSnapshot();\n        releaseTreasury();\n\n        require(dvdAmount <= IERC20(dvd).balanceOf(sender), 'Insufficient balance');\n        require(dvdAmount > 0, 'Cannot sell 0');\n        require(IDvd(dvd).shareholderPointOf(sender) >= dvdAmount, 'Insufficient shareholder points');\n\n        // Convert number of DVD amount that user want to sell to mUSD amount\n        uint256 reserveAmount = dvdToReserve(dvdAmount);\n        // Calculate tax in mUSD\n        curveTax = reserveAmount.div(CURVE_TAX_DENOMINATOR);\n        // Make sure fee is enough\n        require(curveTax >= 1, 'Insufficient tax');\n\n        // Get net amount\n        uint256 net = reserveAmount.sub(curveTax);\n\n        // Calculate taxed DVD\n        taxedDVD = _calculateReserveToDVD(\n            curveTax,\n            totalReserve.sub(reserveAmount),\n            dvdTotalSupply().sub(dvdAmount)\n        );\n\n        // Tax to be included as profit\n        marketTax = net.div(SELL_TAX_DENOMINATOR);\n        // Get musd amount for recipient\n        returnedMUSD = net.sub(marketTax);\n\n        // Decrease total reserve\n        totalReserve = totalReserve.sub(net);\n\n        // Reduce user DVD balance\n        IDvd(dvd).burn(sender, dvdAmount);\n        // Send taxed DVD to burn address\n        IDvd(dvd).mint(BURN_ADDRESS, taxedDVD);\n        // Decrease sender DVD Shareholder point\n        IDvd(dvd).decreaseShareholderPoint(sender, dvdAmount);\n\n        // Redeem mUSD from vault\n        IVault(vault).redeem(returnedMUSD);\n        // Send mUSD to recipient\n        IERC20(musd).safeTransfer(recipient, returnedMUSD);\n\n        emit Sold(sender, recipient, dvdAmount, returnedMUSD);\n    }\n\n    /// @notice Claim dividend in mUSD.\n    /// @param sender Address that has SDVD token.\n    /// @param recipient Address that will receive mUSD dividend.\n    function _claimDividend(address sender, address recipient) internal returns (uint256 dividend) {\n        checkSnapshot();\n        releaseTreasury();\n\n        // Get dividend in mUSD based on SDVD balance\n        dividend = claimableDividend(sender);\n        require(dividend > 0, 'No dividend');\n\n        // Set dividend as claimed\n        _isDividendClaimedSnapshots[sender][snapshotId] = true;\n\n        // Redeem mUSD from vault\n        IVault(vault).redeem(dividend);\n        // Send dividend mUSD to user\n        IERC20(musd).safeTransfer(recipient, dividend);\n\n        emit DividendClaimed(recipient, dividend);\n    }\n\n    /// @notice Swap ETH to mUSD in this contract.\n    /// @param amount ETH amount.\n    /// @return musdAmount returned mUSD amount.\n    function _swapETHToMUSD(address recipient, uint256 amount) internal returns (uint256 musdAmount) {\n        // Convert ETH to WETH\n        IWETH(weth).deposit{ value: amount }();\n        // Swap WETH to mUSD\n        (musdAmount,) = IBPool(balancerPool).swapExactAmountIn(weth, amount, musd, 0, uint256(-1));\n        // Send mUSD\n        if (recipient != address(this)) {\n            IERC20(musd).safeTransfer(recipient, musdAmount);\n        }\n    }\n\n    /// @notice Swap mUSD to ETH in this contract.\n    /// @param amount mUSD Amount.\n    /// @return ethAmount returned ETH amount.\n    function _swapMUSDToETH(address recipient, uint256 amount) internal returns (uint256 ethAmount) {\n        // Swap mUSD to WETH\n        (ethAmount,) = IBPool(balancerPool).swapExactAmountIn(musd, amount, weth, 0, uint256(-1));\n        // Convert WETH to ETH\n        IWETH(weth).withdraw(ethAmount);\n        // Send ETH\n        if (recipient != address(this)) {\n            payable(recipient).transfer(ethAmount);\n        }\n    }\n\n    /// @notice Approve maximum value to spender\n    function _approveMax(address tkn, address spender) internal {\n        uint256 max = uint256(- 1);\n        IERC20(tkn).safeApprove(spender, max);\n    }\n\n    /**\n     * Supply (s), reserve (r) and token price (p) are in a relationship defined by the bonding curve:\n     *      p = m * s\n     * The reserve equals to the area below the bonding curve\n     *      r = s^2 / 2\n     * The formula for the supply becomes\n     *      s = sqrt(2 * r / m)\n     *\n     * In solidity computations, we are using divider instead of multiplier (because its an integer).\n     * All values are decimals with 18 decimals (represented as uints), which needs to be compensated for in\n     * multiplications and divisions\n     */\n\n    /// @notice Computes the increased supply given an amount of reserve.\n    /// @param _reserveDelta The amount of reserve in wei to be used in the calculation.\n    /// @param _totalReserve The current reserve state to be used in the calculation.\n    /// @param _supply The current supply state to be used in the calculation.\n    /// @return _supplyDelta token amount in wei.\n    function _calculateReserveToDVD(\n        uint256 _reserveDelta,\n        uint256 _totalReserve,\n        uint256 _supply\n    ) internal pure returns (uint256 _supplyDelta) {\n        uint256 _reserve = _totalReserve;\n        uint256 _newReserve = _reserve.add(_reserveDelta);\n        // s = sqrt(2 * r / m)\n        uint256 _newSupply = MathUtils.sqrt(\n            _newReserve\n            .mul(2)\n            .mul(DIVIDER) // inverse the operation (Divider instead of multiplier)\n            .mul(1e18) // compensation for the squared unit\n        );\n\n        _supplyDelta = _newSupply.sub(_supply);\n    }\n\n    /// @notice Computes the decrease in reserve given an amount of DVD.\n    /// @param _supplyDelta The amount of DVD in wei to be used in the calculation.\n    /// @param _supply The current supply state to be used in the calculation.\n    /// @param _totalReserve The current reserve state to be used in the calculation.\n    /// @return _reserveDelta Reserve amount in wei.\n    function _calculateDVDToReserve(\n        uint256 _supplyDelta,\n        uint256 _supply,\n        uint256 _totalReserve\n    ) internal pure returns (uint256 _reserveDelta) {\n        require(_supplyDelta <= _supply, 'Token amount must be less than the supply');\n\n        uint256 _newSupply = _supply.sub(_supplyDelta);\n        uint256 _newReserve = _calculateReserveFromSupply(_newSupply);\n        _reserveDelta = _totalReserve.sub(_newReserve);\n    }\n\n    /// @notice Calculates reserve given a specific supply.\n    /// @param _supply The token supply in wei to be used in the calculation.\n    /// @return _reserve Reserve amount in wei.\n    function _calculateReserveFromSupply(uint256 _supply) internal pure returns (uint256 _reserve) {\n        // r = s^2 * m / 2\n        _reserve = _supply\n        .mul(_supply)\n        .div(DIVIDER) // inverse the operation (Divider instead of multiplier)\n        .div(2)\n        .roundedDiv(1e18);\n        // correction of the squared unit\n    }\n}"
    },
    "contracts/interfaces/IBPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\ninterface IBPool {\n\n    function isPublicSwap() external view returns (bool);\n\n    function isFinalized() external view returns (bool);\n\n    function isBound(address t) external view returns (bool);\n\n    function getNumTokens() external view returns (uint);\n\n    function getCurrentTokens() external view returns (address[] memory tokens);\n\n    function getFinalTokens() external view returns (address[] memory tokens);\n\n    function getDenormalizedWeight(address token) external view returns (uint);\n\n    function getTotalDenormalizedWeight() external view returns (uint);\n\n    function getNormalizedWeight(address token) external view returns (uint);\n\n    function getBalance(address token) external view returns (uint);\n\n    function getSwapFee() external view returns (uint);\n\n    function getController() external view returns (address);\n\n    function setSwapFee(uint swapFee) external;\n\n    function setController(address manager) external;\n\n    function setPublicSwap(bool public_) external;\n\n    function finalize() external;\n\n    function bind(address token, uint balance, uint denorm) external;\n\n    function rebind(address token, uint balance, uint denorm) external;\n\n    function unbind(address token) external;\n\n    function gulp(address token) external;\n\n    function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint spotPrice);\n\n    function getSpotPriceSansFee(address tokenIn, address tokenOut) external view returns (uint spotPrice);\n\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\n\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\n\n    function swapExactAmountIn(\n        address tokenIn,\n        uint tokenAmountIn,\n        address tokenOut,\n        uint minAmountOut,\n        uint maxPrice\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\n\n    function swapExactAmountOut(\n        address tokenIn,\n        uint maxAmountIn,\n        address tokenOut,\n        uint tokenAmountOut,\n        uint maxPrice\n    ) external returns (uint tokenAmountIn, uint spotPriceAfter);\n\n    function joinswapExternAmountIn(\n        address tokenIn,\n        uint tokenAmountIn,\n        uint minPoolAmountOut\n    ) external returns (uint poolAmountOut);\n\n    function joinswapPoolAmountOut(\n        address tokenIn,\n        uint poolAmountOut,\n        uint maxAmountIn\n    ) external returns (uint tokenAmountIn);\n\n    function exitswapPoolAmountIn(\n        address tokenOut,\n        uint poolAmountIn,\n        uint minAmountOut\n    ) external returns (uint tokenAmountOut);\n\n    function exitswapExternAmountOut(\n        address tokenOut,\n        uint tokenAmountOut,\n        uint maxPoolAmountIn\n    ) external returns (uint poolAmountIn);\n\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address whom) external view returns (uint);\n\n    function allowance(address src, address dst) external view returns (uint);\n\n    function approve(address dst, uint amt) external returns (bool);\n\n    function transfer(address dst, uint amt) external returns (bool);\n\n    function transferFrom(\n        address src, address dst, uint amt\n    ) external returns (bool);\n\n    function calcSpotPrice(\n        uint tokenBalanceIn,\n        uint tokenWeightIn,\n        uint tokenBalanceOut,\n        uint tokenWeightOut,\n        uint swapFee\n    ) external returns (uint spotPrice);\n\n    function calcOutGivenIn(\n        uint tokenBalanceIn,\n        uint tokenWeightIn,\n        uint tokenBalanceOut,\n        uint tokenWeightOut,\n        uint tokenAmountIn,\n        uint swapFee\n    ) external returns (uint tokenAmountOut);\n\n    function calcInGivenOut(\n        uint tokenBalanceIn,\n        uint tokenWeightIn,\n        uint tokenBalanceOut,\n        uint tokenWeightOut,\n        uint tokenAmountOut,\n        uint swapFee\n    ) external returns (uint tokenAmountIn);\n\n    function calcPoolOutGivenSingleIn(\n        uint tokenBalanceIn,\n        uint tokenWeightIn,\n        uint poolSupply,\n        uint totalWeight,\n        uint tokenAmountIn,\n        uint swapFee\n    ) external returns (uint poolAmountOut);\n\n    function calcSingleInGivenPoolOut(\n        uint tokenBalanceIn,\n        uint tokenWeightIn,\n        uint poolSupply,\n        uint totalWeight,\n        uint poolAmountOut,\n        uint swapFee\n    ) external returns (uint tokenAmountIn);\n\n    function calcSingleOutGivenPoolIn(\n        uint tokenBalanceOut,\n        uint tokenWeightOut,\n        uint poolSupply,\n        uint totalWeight,\n        uint poolAmountIn,\n        uint swapFee\n    ) external returns (uint tokenAmountOut);\n\n    function calcPoolInGivenSingleOut(\n        uint tokenBalanceOut,\n        uint tokenWeightOut,\n        uint poolSupply,\n        uint totalWeight,\n        uint tokenAmountOut,\n        uint swapFee\n    ) external returns (uint poolAmountIn);\n\n}"
    },
    "contracts/interfaces/IDvd.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IDvd is IERC20 {\n\n    function mint(address account, uint256 amount) external;\n\n    function burn(address account, uint256 amount) external;\n\n    function increaseShareholderPoint(address account, uint256 amount) external;\n\n    function decreaseShareholderPoint(address account, uint256 amount) external;\n\n    function shareholderPointOf(address account) external view returns (uint256);\n\n    function totalShareholderPoint() external view returns (uint256);\n\n}\n"
    },
    "contracts/interfaces/IERC20Snapshot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\ninterface IERC20Snapshot {\n\n    function balanceOfAt(address account, uint256 snapshotId) external view returns (uint256);\n\n    function totalSupplyAt(uint256 snapshotId) external view returns (uint256);\n\n}\n"
    },
    "contracts/interfaces/IMasset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\nimport { MassetStructs } from \"./MassetStructs.sol\";\n\n///\n/// @title IMasset\n/// @dev   (Internal) Interface for interacting with Masset\n///       VERSION: 1.0\n///       DATE:    2020-05-05\n\ninterface IMasset is MassetStructs {\n\n    /// @dev Calc interest\n    function collectInterest() external returns (uint256 massetMinted, uint256 newTotalSupply);\n\n    /// @dev Minting\n    function mint(address _basset, uint256 _bassetQuantity)\n        external returns (uint256 massetMinted);\n    function mintTo(address _basset, uint256 _bassetQuantity, address _recipient)\n        external returns (uint256 massetMinted);\n    function mintMulti(address[] calldata _bAssets, uint256[] calldata _bassetQuantity, address _recipient)\n        external returns (uint256 massetMinted);\n\n    /// @dev Swapping\n    function swap( address _input, address _output, uint256 _quantity, address _recipient)\n        external returns (uint256 output);\n    function getSwapOutput( address _input, address _output, uint256 _quantity)\n        external view returns (bool, string memory, uint256 output);\n\n    /// @dev Redeeming\n    function redeem(address _basset, uint256 _bassetQuantity)\n        external returns (uint256 massetRedeemed);\n    function redeemTo(address _basset, uint256 _bassetQuantity, address _recipient)\n        external returns (uint256 massetRedeemed);\n    function redeemMulti(address[] calldata _bAssets, uint256[] calldata _bassetQuantities, address _recipient)\n        external returns (uint256 massetRedeemed);\n    function redeemMasset(uint256 _mAssetQuantity, address _recipient) external;\n\n    /// @dev Setters for the Manager or Gov to update module info\n    function upgradeForgeValidator(address _newForgeValidator) external;\n\n    /// @dev Setters for Gov to set system params\n    function setSwapFee(uint256 _swapFee) external;\n\n    /// @dev Getters\n    function getBasketManager() external view returns(address);\n    function forgeValidator() external view returns (address);\n    function totalSupply() external view returns (uint256);\n    function swapFee() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\ninterface IPool {\n\n    function openFarm() external;\n\n    function distributeBonusRewards(uint256 amount) external;\n\n    function stake(uint256 amount) external;\n\n    function stakeTo(address recipient, uint256 amount) external;\n\n    function withdraw(uint256 amount) external;\n\n    function withdrawTo(address recipient, uint256 amount) external;\n\n    function claimReward() external;\n\n    function claimRewardTo(address recipient) external;\n\n}\n"
    },
    "contracts/interfaces/ISDvd.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface ISDvd is IERC20 {\n\n    function mint(address account, uint256 amount) external;\n\n    function burn(address account, uint256 amount) external;\n\n    function setMinter(address account, bool value) external;\n\n    function setNoFeeAddress(address account, bool value) external;\n\n    function setPairAddress(address _pairAddress) external;\n\n    function snapshot() external returns (uint256);\n\n    function syncPairTokenTotalSupply() external returns (bool isPairTokenBurned);\n\n}\n"
    },
    "contracts/interfaces/ITreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\ninterface ITreasury {\n\n    function release() external;\n\n}\n"
    },
    "contracts/interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\ninterface IVault {\n\n    function savingsContract() external view returns (address);\n\n    function musd() external view returns (address);\n\n    function deposit(uint256) external;\n\n    function redeem(uint256) external;\n\n    function getBalance() external view returns (uint256);\n\n}\n"
    },
    "contracts/interfaces/MassetStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\n//\n// @title   MassetStructs\n// @author  Stability Labs Pty. Ltd.\n// @notice  Structs used in the Masset contract and associated Libs\n\ninterface MassetStructs {\n\n    // Stores high level basket info\n    struct Basket {\n\n        // Array of Bassets currently active\n        Basset[] bassets;\n\n        // Max number of bAssets that can be present in any Basket\n        uint8 maxBassets;\n\n        // Some bAsset is undergoing re-collateralisation\n        bool undergoingRecol;\n\n        //\n        // In the event that we do not raise enough funds from the auctioning of a failed Basset,\n        // The Basket is deemed as failed, and is undercollateralised to a certain degree.\n        // The collateralisation ratio is used to calc Masset burn rate.\n        \n        bool failed;\n        uint256 collateralisationRatio;\n\n    }\n\n    // Stores bAsset info. The struct takes 5 storage slots per Basset\n    struct Basset {\n\n        // Address of the bAsset\n        address addr;\n\n        // Status of the basset, \n        BassetStatus status; // takes uint8 datatype (1 byte) in storage\n\n        // An ERC20 can charge transfer fee, for example USDT, DGX tokens.\n        bool isTransferFeeCharged; // takes a byte in storage\n\n        //\n        // 1 Basset * ratio / ratioScale == x Masset (relative value)\n        //      If ratio == 10e8 then 1 bAsset = 10 mAssets\n        //      A ratio is divised as 10^(18-tokenDecimals) * measurementMultiple(relative value of 1 base unit)\n        \n        uint256 ratio;\n\n        // Target weights of the Basset (100% == 1e18)\n        uint256 maxWeight;\n\n        // Amount of the Basset that is held in Collateral\n        uint256 vaultBalance;\n\n    }\n\n    // Status of the Basset - has it broken its peg?\n    enum BassetStatus {\n        Default,\n        Normal,\n        BrokenBelowPeg,\n        BrokenAbovePeg,\n        Blacklisted,\n        Liquidating,\n        Liquidated,\n        Failed\n    }\n\n    // Internal details on Basset\n    struct BassetDetails {\n        Basset bAsset;\n        address integrator;\n        uint8 index;\n    }\n\n    // All details needed to Forge with multiple bAssets\n    struct ForgePropsMulti {\n        bool isValid; // Flag to signify that forge bAssets have passed validity check\n        Basset[] bAssets;\n        address[] integrators;\n        uint8[] indexes;\n    }\n\n    // All details needed for proportionate Redemption\n    struct RedeemPropsMulti {\n        uint256 colRatio;\n        Basset[] bAssets;\n        address[] integrators;\n        uint8[] indexes;\n    }\n}\n"
    },
    "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: Unlicensed\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function migrator() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n    function setMigrator(address) external;\n}\n"
    },
    "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: Unlicensed\n\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"
    },
    "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: Unlicensed\n\npragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"
    },
    "contracts/uniswapv2/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: Unlicensed\n\npragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}"
    },
    "contracts/utils/MathUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.16 <0.7.0;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\n\nlibrary MathUtils {\n    using SafeMath for uint256;\n\n    /// @notice Calculates the square root of a given value.\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n        // else z = 0\n    }\n\n    /// @notice Rounds a division result.\n    function roundedDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, 'div by 0');\n\n        uint256 halfB = (b.mod(2) == 0) ? (b.div(2)) : (b.div(2).add(1));\n        return (a.mod(b) >= halfB) ? (a.div(b).add(1)) : (a.div(b));\n    }\n}\n"
    }
  }
}