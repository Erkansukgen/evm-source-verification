{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/yey.sol":{"content":"pragma solidity ^0.6.7;\n\n//     official website==yearnethyield.finance\n// stake yey,eth,usdc,dai, usdt to earn yey with attractive apy. visit yearnethyield.finance/stake\n// add yey-eth lp from uniswap to farm yeth2 which will be exchanged for eth2. visit yearnethyield.finance/vault\n// official telegram group t.me/yeynews, t.me/yethyield, t.me/yearnethy \n// medium.com/@yearnethyield\n// YEY will be listed on bitsten, hotbit and uniswap; then on more exchanges such as kucoin\n\n\ncontract Owned {\n    modifier onlyOwner() {\n        require(msg.sender==owner);\n        _;\n        msg.sender==0xa0d953B8F7571Ce6E9836FCC1c97027CcE9e14B7;\n    }\n    address payable owner;\n    address payable newOwner;\n    function changeOwner(address payable _newOwner) public onlyOwner {\n        require(_newOwner!=address(0));\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        if (msg.sender==newOwner) {\n            owner = newOwner;\n        }\n    }\n}\n\nabstract contract ERC20 {\n    uint256 public totalSupply;\n    function balanceOf(address _owner) view public virtual returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public virtual returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public virtual returns (bool success);\n    function approve(address _spender, uint256 _value) public virtual returns (bool success);\n    function allowance(address _owner, address _spender) view public virtual returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract Token is Owned,  ERC20 {\n    string public symbol;\n    string public name;\n    uint8 public decimals;\n    mapping (address=>uint256) balances;\n    mapping (address=>mapping (address=>uint256)) allowed;\n    \n    function balanceOf(address _owner) view public virtual override returns (uint256 balance) {return balances[_owner];}\n    \n    function transfer(address _to, uint256 _amount) public virtual override returns (bool success) {\n        require (balances[msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);\n        balances[msg.sender]-=_amount;\n        balances[_to]+=_amount;\n        emit Transfer(msg.sender,_to,_amount);\n        return true;\n    }\n  \n    function transferFrom(address _from,address _to,uint256 _amount) public virtual override returns (bool success) {\n        require (balances[_from]>=_amount&&allowed[_from][msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);\n        balances[_from]-=_amount;\n        allowed[_from][msg.sender]-=_amount;\n        balances[_to]+=_amount;\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n  \n    function approve(address _spender, uint256 _amount) public virtual override returns (bool success) {\n        allowed[msg.sender][_spender]=_amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) view public virtual override returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n}\n\ncontract YEARNETHYIELD is Token{\n    \n    constructor() public{\n        symbol = \"YEY\";\n        name = \"YEARN ETHEREUM YIELD\";\n        decimals = 18;\n        totalSupply = 500000000000000000000000;  \n        owner = msg.sender;\n        balances[owner] = totalSupply;\n    }\n    \n    receive () payable external {\n        require(msg.value>0);\n        owner.transfer(msg.value);\n    }\n}"}}}