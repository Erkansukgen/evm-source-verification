{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/LeviathanCoreTaskV2.sol":{"content":"pragma solidity <=0.6.2;\n\ninterface ILeviathan {\n  function tokensOfOwner(address owner) external view returns (uint256[] memory);  \n}\n\ninterface IRelease {\n    function release(uint ID) external;\n}\n\ninterface IWLEV {\n    function checkClaim(uint ID) external view returns (uint256); \n}\n\ncontract LeviathanCoreTaskV2 {\n    address private constant _leviathan = 0xeE52c053e091e8382902E7788Ac27f19bBdFeeDc;\n    address private constant _wlev = 0xA2482ccFF8432ee68b9A26a30fCDd2782Bd81BED;\n    address private constant _claim = 0xb4345a489e4aF3a33F81df5FB26E88fFeCEd6489;\n\n    mapping(uint => uint[3]) public stackMap;\n\n    // task rotates through 11 'stacks', 3 leviathans each\n    uint public stackID;\n\n    constructor()\n    public {\n        stackMap[0] = [280, 281, 282];\n\n        stackMap[1] = [283, 284, 285];\n\n        stackMap[2] = [286, 287, 288];\n\n        stackMap[3] = [289, 135, 276];\n\n        stackMap[4] = [277, 278, 279];\n\n        stackMap[5] = [290, 291, 292];\n\n        stackMap[6] = [294, 295, 296];\n\n        stackMap[7] = [273, 297, 274];\n\n        stackMap[8] = [298, 275, 299];\n\n        stackMap[9] = [300, 301, 311];\n\n        stackMap[10] = [316, 331, 332];\n    }\n\n    function check(uint _requirement)\n    external view returns (uint256) {\n        uint[3] memory IDstack = stackMap[stackID];\n\n        uint totalClaim;\n\n        for(uint x = 0;x < 3; x++)\n            totalClaim += IWLEV(_wlev).checkClaim(IDstack[x]);\n\n        if(totalClaim >= _requirement)\n            return 0;\n        else\n            return _requirement - totalClaim;\n    }\n\n    function execute()\n    external {\n        uint[3] memory IDstack = stackMap[stackID];\n\n        for(uint x = 0;x < 3; x++)\n            if(IWLEV(_wlev).checkClaim(IDstack[x]) > 0)\n                IRelease(_claim).release(IDstack[x]);\n\n        stackID++;\n\n        if(stackID > 10)\n            stackID = 0;\n    }\n}"}}}