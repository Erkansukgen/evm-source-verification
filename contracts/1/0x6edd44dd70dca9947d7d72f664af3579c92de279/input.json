{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"flatten/ArkenDex.sol":{"content":"// SPDX-License-Identifier: MIT\n// Sources flattened with hardhat v2.5.0 https://hardhat.org\n\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.1.0\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.1.0\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n\n// File @openzeppelin/contracts/utils/Context.sol@v4.1.0\n\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.1.0\n\n\npragma solidity ^0.8.0;\n\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n\n// File @openzeppelin/contracts/utils/Address.sol@v4.1.0\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.1.0\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.1.0\n\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\n\n// File contracts/interfaces/UniswapRouterV2.sol\n\n\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Router {\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n}\n\n\n// File contracts/interfaces/BakeryRouterV2.sol\n\n\npragma solidity ^0.8.0;\n\ninterface IBakeryV2Router {\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactBNBForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactTokensForBNB(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n}\n\n\n// File contracts/interfaces/DODOV2Proxy.sol\n\n\npragma solidity ^0.8.0;\n\ninterface IDODOV2Proxy {\n    function dodoSwapV2ETHToToken(\n        address toToken,\n        uint256 minReturnAmount,\n        address[] memory dodoPairs,\n        uint256 directions,\n        bool isIncentive,\n        uint256 deadLine\n    ) external payable returns (uint256 returnAmount);\n\n    function dodoSwapV2TokenToETH(\n        address fromToken,\n        uint256 fromTokenAmount,\n        uint256 minReturnAmount,\n        address[] memory dodoPairs,\n        uint256 directions,\n        bool isIncentive,\n        uint256 deadLine\n    ) external returns (uint256 returnAmount);\n\n    function dodoSwapV2TokenToToken(\n        address fromToken,\n        address toToken,\n        uint256 fromTokenAmount,\n        uint256 minReturnAmount,\n        address[] memory dodoPairs,\n        uint256 directions,\n        bool isIncentive,\n        uint256 deadLine\n    ) external returns (uint256 returnAmount);\n\n    function dodoSwapV1(\n        address fromToken,\n        address toToken,\n        uint256 fromTokenAmount,\n        uint256 minReturnAmount,\n        address[] memory dodoPairs,\n        uint256 directions,\n        bool isIncentive,\n        uint256 deadLine\n    ) external payable returns (uint256 returnAmount);\n}\n\n\n// File contracts/interfaces/VyperSwap.sol\n\n\npragma solidity ^0.8.0;\n\ninterface IVyperSwap {\n    function exchange(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external;\n}\n\n\n// File contracts/interfaces/VyperUnderlyingSwap.sol\n\n\npragma solidity ^0.8.0;\n\ninterface IVyperUnderlyingSwap {\n    function exchange(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external;\n\n    function exchange_underlying(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external;\n}\n\n\n// File contracts/interfaces/DoppleSwap.sol\n\n\npragma solidity ^0.8.0;\n\ninterface IDoppleSwap {\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\n\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n}\n\n\n// File contracts/ArkenDex.sol\n\n\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\n\n\n// import 'hardhat/console.sol';\n\n\n\n\n\n\ncontract ArkenDex {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    uint256 public constant DEADLINE = 2**256 - 1;\n    IERC20 constant ETHER_ERC20 =\n        IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    enum RouterInterface {\n        UNISWAP,\n        BAKERY,\n        VYPER,\n        VYPER_UNDERLYING,\n        DOPPLE,\n        DODO_V2,\n        DODO_V1\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    struct TradeRoute {\n        address[] paths;\n        address[] dodoPairs;\n        uint256 dodoDirection;\n        address dexAddr;\n        RouterInterface dexInterface;\n        uint256 part;\n    }\n\n    struct MultiSwapDesctiption {\n        IERC20 srcToken;\n        IERC20 dstToken;\n        TradeRoute[] routes;\n        uint256 amountIn;\n        uint256 amountOutMin;\n        address payable to;\n    }\n\n    event Swapped(\n        address srcToken,\n        address dstToken,\n        uint256 amountIn,\n        uint256 returnAmount\n    );\n\n    event UpdateVyper(address dexAddr, address[] tokens);\n\n    event Received(address sender, uint256 amount);\n\n    receive() external payable {\n        emit Received(msg.sender, msg.value);\n    }\n\n    address public ownerAddress;\n    address payable public feeWalletAddress;\n    address dodoApproveAddress;\n    IERC20 wrapperEtherERC20;\n    mapping(address => mapping(address => int128)) vyperCoinsMap;\n\n    modifier onlyOwner() {\n        require(msg.sender == ownerAddress, 'Not owner');\n        _;\n    }\n\n    struct VyperConstructor {\n        address[] dexAddress;\n        address[][] tokenAddress;\n    }\n\n    constructor(\n        address payable _feeWalletAddress,\n        address _owner,\n        IERC20 _wrappedEther,\n        address _dodoApproveAddress,\n        VyperConstructor memory _vyperParams\n    ) {\n        ownerAddress = _owner;\n        wrapperEtherERC20 = _wrappedEther;\n        feeWalletAddress = _feeWalletAddress;\n        dodoApproveAddress = _dodoApproveAddress;\n        _initializeVyper(_vyperParams);\n    }\n\n    function _initializeVyper(VyperConstructor memory params) private {\n        address[] memory dexAddrs = params.dexAddress;\n        address[][] memory tokenAddrs = params.tokenAddress;\n        require(\n            dexAddrs.length == tokenAddrs.length,\n            'vyper params dexAddress and tokenAddress and tokenIndex has to be the same length'\n        );\n        for (uint32 i = 0; i < dexAddrs.length; i++) {\n            for (int128 j = 0; uint128(j) < tokenAddrs[i].length; j++) {\n                vyperCoinsMap[dexAddrs[i]][tokenAddrs[i][uint128(j)]] = j;\n            }\n        }\n    }\n\n    /**\n     * External Functions\n     */\n    function updateVyper(address dexAddress, address[] calldata tokens)\n        external\n        onlyOwner\n    {\n        for (int128 j = 0; uint128(j) < tokens.length; j++) {\n            vyperCoinsMap[dexAddress][tokens[uint128(j)]] = j;\n        }\n        emit UpdateVyper(dexAddress, tokens);\n    }\n\n    function multiTrade(MultiSwapDesctiption memory desc)\n        external\n        payable\n        returns (uint256 returnAmount, uint256 blockNumber)\n    {\n        IERC20 dstToken = desc.dstToken;\n        IERC20 srcToken = desc.srcToken;\n        (returnAmount, blockNumber) = _trade(desc);\n        if (ETHER_ERC20 == desc.dstToken) {\n            (bool sent, ) = desc.to.call{value: returnAmount}('');\n            require(sent, 'Failed to send Ether');\n        } else {\n            dstToken.safeTransfer(msg.sender, returnAmount);\n        }\n        emit Swapped(\n            address(srcToken),\n            address(dstToken),\n            desc.amountIn,\n            returnAmount\n        );\n    }\n\n    function testTransfer(MultiSwapDesctiption memory desc)\n        external\n        payable\n        returns (uint256 returnAmount, uint256 blockNumber)\n    {\n        IERC20 dstToken = desc.dstToken;\n        (returnAmount, blockNumber) = _trade(desc);\n        uint256 beforeAmount = dstToken.balanceOf(msg.sender);\n        dstToken.safeTransfer(msg.sender, returnAmount);\n        uint256 afterAmount = dstToken.balanceOf(msg.sender);\n        uint256 got = afterAmount - beforeAmount;\n        require(got == returnAmount, 'ArkenTester: Has Tax');\n    }\n\n    function getVyperData(address dexAddress, address token)\n        external\n        view\n        returns (int128)\n    {\n        return vyperCoinsMap[dexAddress][token];\n    }\n\n    /**\n     * Trade Logic\n     */\n\n    function _trade(MultiSwapDesctiption memory desc)\n        internal\n        returns (uint256 returnAmount, uint256 blockNumber)\n    {\n        require(desc.amountIn > 0, 'Amount-in needs to be more than zero');\n        blockNumber = block.number;\n\n        IERC20 srcToken = desc.srcToken;\n\n        if (ETHER_ERC20 == desc.srcToken) {\n            require(msg.value == desc.amountIn, 'Value not match amountIn');\n        } else {\n            uint256 allowance = srcToken.allowance(msg.sender, address(this));\n            require(allowance >= desc.amountIn, 'Allowance not enough');\n            srcToken.safeTransferFrom(msg.sender, address(this), desc.amountIn);\n        }\n\n        TradeRoute[] memory routes = desc.routes;\n        uint256 srcTokenAmount;\n\n        for (uint256 i = 0; i < routes.length; i++) {\n            TradeRoute memory route = routes[i];\n            IERC20 startToken = ERC20(route.paths[0]);\n            IERC20 endToken = ERC20(route.paths[route.paths.length - 1]);\n            if (ETHER_ERC20 == startToken) {\n                srcTokenAmount = address(this).balance;\n            } else {\n                srcTokenAmount = startToken.balanceOf(address(this));\n            }\n            uint256 inputAmount = srcTokenAmount.mul(route.part).div(100000000); // 1% = 10^6\n            require(\n                route.part <= 100000000,\n                'Route percentage can not exceed 100000000'\n            );\n            // uint256[] memory amounts;\n            if (route.dexInterface == RouterInterface.BAKERY) {\n                // amounts =\n                _tradeIBakery(\n                    startToken,\n                    endToken,\n                    inputAmount,\n                    0,\n                    route.paths,\n                    address(this),\n                    route.dexAddr\n                );\n            } else if (route.dexInterface == RouterInterface.VYPER) {\n                // amounts =\n                _tradeVyper(\n                    startToken,\n                    endToken,\n                    inputAmount,\n                    0,\n                    route.dexAddr\n                );\n            } else if (route.dexInterface == RouterInterface.VYPER_UNDERLYING) {\n                // amounts =\n                _tradeVyperUnderlying(\n                    startToken,\n                    endToken,\n                    inputAmount,\n                    0,\n                    route.dexAddr\n                );\n            } else if (route.dexInterface == RouterInterface.DOPPLE) {\n                // amounts =\n                _tradeDopple(\n                    startToken,\n                    endToken,\n                    inputAmount,\n                    0,\n                    route.dexAddr\n                );\n            } else if (route.dexInterface == RouterInterface.DODO_V2) {\n                // DODO doesn't allow zero min amount\n                // amount =\n                _tradeIDODOV2(\n                    startToken,\n                    endToken,\n                    inputAmount,\n                    1,\n                    route.dodoPairs,\n                    route.dodoDirection,\n                    route.dexAddr\n                );\n            } else if (route.dexInterface == RouterInterface.DODO_V1) {\n                // DODO doesn't allow zero min amount\n                // amount =\n                _tradeIDODOV1(\n                    startToken,\n                    endToken,\n                    inputAmount,\n                    1,\n                    route.dodoPairs,\n                    route.dodoDirection,\n                    route.dexAddr\n                );\n            } else {\n                // amounts =\n                _tradeIUniswap(\n                    startToken,\n                    endToken,\n                    inputAmount,\n                    0,\n                    route.paths,\n                    address(this),\n                    route.dexAddr\n                );\n            }\n            // for (uint256 idx = 0; idx < amounts.length; idx++) {\n            //     console.log('\\tamount[%d]: %d', idx, amounts[idx]);\n            // }\n        }\n\n        if (ETHER_ERC20 == desc.dstToken) {\n            returnAmount = address(this).balance;\n        } else {\n            returnAmount = desc.dstToken.balanceOf(address(this));\n        }\n\n        returnAmount = _collectFee(returnAmount, desc.dstToken);\n        // console.log(\n        //     'after fee: %d ,, out min: %d',\n        //     returnAmount,\n        //     desc.amountOutMin\n        // );\n        require(\n            returnAmount >= desc.amountOutMin,\n            'Return amount is not enough'\n        );\n    }\n\n    /**\n     * Internal Functions\n     */\n\n    function _collectFee(uint256 amount, IERC20 token)\n        private\n        returns (\n            uint256 // remaining amount to swap\n        )\n    {\n        uint256 fee = amount.div(1000); // 0.1%\n        // console.log('fee: %s from %s on %s', fee, amount, address(token));\n        require(fee < amount, 'Fee exceeds amount');\n        if (ETHER_ERC20 == token) {\n            feeWalletAddress.transfer(fee);\n        } else {\n            token.safeTransfer(feeWalletAddress, fee);\n        }\n        return amount.sub(fee);\n    }\n\n    function _tradeIUniswap(\n        IERC20 _src,\n        IERC20 _dest,\n        uint256 inputAmount,\n        uint256 minOutputAmount,\n        address[] memory paths,\n        address to,\n        address dexAddr\n    ) private returns (uint256[] memory amounts) {\n        IUniswapV2Router uniRouter = IUniswapV2Router(dexAddr);\n        if (_src == ETHER_ERC20) {\n            // ETH => TOKEN\n            if (paths[0] == address(ETHER_ERC20)) {\n                paths[0] = address(wrapperEtherERC20);\n            }\n            amounts = uniRouter.swapExactETHForTokens{value: inputAmount}(\n                minOutputAmount,\n                paths,\n                to,\n                DEADLINE\n            );\n        } else if (_dest == ETHER_ERC20) {\n            // TOKEN => ETH\n            if (paths[paths.length - 1] == address(ETHER_ERC20)) {\n                paths[paths.length - 1] = address(wrapperEtherERC20);\n            }\n            _src.safeApprove(dexAddr, inputAmount);\n            amounts = uniRouter.swapExactTokensForETH(\n                inputAmount,\n                minOutputAmount,\n                paths,\n                to,\n                DEADLINE\n            );\n        } else {\n            // TOKEN => TOKEN\n            _src.safeApprove(dexAddr, inputAmount);\n            amounts = uniRouter.swapExactTokensForTokens(\n                inputAmount,\n                minOutputAmount,\n                paths,\n                to,\n                DEADLINE\n            );\n        }\n    }\n\n    function _tradeIDODOV2(\n        IERC20 _src,\n        IERC20 _dest,\n        uint256 inputAmount,\n        uint256 minOutputAmount,\n        address[] memory dodoPairs,\n        uint256 direction,\n        address dexAddr\n    ) private returns (uint256 amount) {\n        IDODOV2Proxy dodoProxy = IDODOV2Proxy(dexAddr);\n        if (_src == ETHER_ERC20) {\n            // ETH => TOKEN\n            amount = dodoProxy.dodoSwapV2ETHToToken{value: inputAmount}(\n                address(_dest),\n                minOutputAmount,\n                dodoPairs,\n                direction,\n                false,\n                DEADLINE\n            );\n        } else if (_dest == ETHER_ERC20) {\n            // TOKEN => ETH\n            _src.safeApprove(dodoApproveAddress, inputAmount);\n            amount = dodoProxy.dodoSwapV2TokenToETH(\n                address(_src),\n                inputAmount,\n                minOutputAmount,\n                dodoPairs,\n                direction,\n                false,\n                DEADLINE\n            );\n        } else {\n            // TOKEN => TOKEN\n            _src.safeApprove(dodoApproveAddress, inputAmount);\n            amount = dodoProxy.dodoSwapV2TokenToToken(\n                address(_src),\n                address(_dest),\n                inputAmount,\n                minOutputAmount,\n                dodoPairs,\n                direction,\n                false,\n                DEADLINE\n            );\n        }\n    }\n\n    function _tradeIDODOV1(\n        IERC20 _src,\n        IERC20 _dest,\n        uint256 inputAmount,\n        uint256 minOutputAmount,\n        address[] memory dodoPairs,\n        uint256 direction,\n        address dexAddr\n    ) private returns (uint256 amount) {\n        IDODOV2Proxy dodoProxy = IDODOV2Proxy(dexAddr);\n        IERC20 src = _src;\n        IERC20 dest = _dest;\n        if (_src != ETHER_ERC20) {\n            _src.safeApprove(dodoApproveAddress, inputAmount);\n        }\n        // console.log('dodo v1 addr: %s , %s', address(src), address(dest));\n        // console.log('dodo v1 amt: %d , %d', inputAmount, minOutputAmount);\n        amount = dodoProxy.dodoSwapV1(\n            address(src),\n            address(dest),\n            inputAmount,\n            minOutputAmount,\n            dodoPairs,\n            direction,\n            false,\n            DEADLINE\n        );\n        // console.log('dodo v1 amount: %d', amount);\n    }\n\n    function _tradeIBakery(\n        IERC20 _src,\n        IERC20 _dest,\n        uint256 inputAmount,\n        uint256 minOutputAmount,\n        address[] memory paths,\n        address to,\n        address dexAddr\n    ) private returns (uint256[] memory amounts) {\n        IBakeryV2Router bakeryRouter = IBakeryV2Router(dexAddr);\n        if (_src == ETHER_ERC20) {\n            // ETH => TOKEN\n            if (paths[0] == address(ETHER_ERC20)) {\n                paths[0] = address(wrapperEtherERC20);\n            }\n            amounts = bakeryRouter.swapExactBNBForTokens{value: inputAmount}(\n                minOutputAmount,\n                paths,\n                to,\n                DEADLINE\n            );\n        } else if (_dest == ETHER_ERC20) {\n            // TOKEN => ETH\n            if (paths[paths.length - 1] == address(ETHER_ERC20)) {\n                paths[paths.length - 1] = address(wrapperEtherERC20);\n            }\n            _src.safeApprove(dexAddr, inputAmount);\n            amounts = bakeryRouter.swapExactTokensForBNB(\n                inputAmount,\n                minOutputAmount,\n                paths,\n                to,\n                DEADLINE\n            );\n        } else {\n            // TOKEN => TOKEN\n            _src.safeApprove(dexAddr, inputAmount);\n            amounts = bakeryRouter.swapExactTokensForTokens(\n                inputAmount,\n                minOutputAmount,\n                paths,\n                to,\n                DEADLINE\n            );\n        }\n    }\n\n    function _tradeVyper(\n        IERC20 _src,\n        IERC20 _dest,\n        uint256 inputAmount,\n        uint256 minOutputAmount,\n        address dexAddr\n    ) private {\n        IVyperSwap vyperSwap = IVyperSwap(dexAddr);\n        _src.safeApprove(dexAddr, inputAmount);\n        int128 tokenIndexFrom = vyperCoinsMap[dexAddr][address(_src)];\n        // console.log('tokenIndexFrom: %d', uint128(tokenIndexFrom));\n        int128 tokenIndexTo = vyperCoinsMap[dexAddr][address(_dest)];\n        // console.log('tokenIndexTo: %d', uint128(tokenIndexTo));\n        vyperSwap.exchange(\n            tokenIndexFrom,\n            tokenIndexTo,\n            inputAmount,\n            minOutputAmount\n        );\n    }\n\n    function _tradeVyperUnderlying(\n        IERC20 _src,\n        IERC20 _dest,\n        uint256 inputAmount,\n        uint256 minOutputAmount,\n        address dexAddr\n    ) private {\n        IVyperUnderlyingSwap vyperSwap = IVyperUnderlyingSwap(dexAddr);\n        _src.safeApprove(dexAddr, inputAmount);\n        int128 tokenIndexFrom = vyperCoinsMap[dexAddr][address(_src)];\n        // console.log('tokenIndexFrom: %d', uint128(tokenIndexFrom));\n        int128 tokenIndexTo = vyperCoinsMap[dexAddr][address(_dest)];\n        // console.log('tokenIndexTo: %d', uint128(tokenIndexTo));\n        vyperSwap.exchange_underlying(\n            tokenIndexFrom,\n            tokenIndexTo,\n            inputAmount,\n            minOutputAmount\n        );\n    }\n\n    function _tradeDopple(\n        IERC20 _src,\n        IERC20 _dest,\n        uint256 inputAmount,\n        uint256 minOutputAmount,\n        address dexAddr\n    ) private returns (uint256 amount) {\n        IDoppleSwap doppleSwap = IDoppleSwap(dexAddr);\n        _src.safeApprove(dexAddr, inputAmount);\n        // console.log('getTokenIndex: %s %s', address(_src), address(_dest));\n        uint8 tokenIndexFrom = doppleSwap.getTokenIndex(address(_src));\n        // console.log('tokenIndexFrom: %d', uint128(tokenIndexFrom));\n        uint8 tokenIndexTo = doppleSwap.getTokenIndex(address(_dest));\n        // console.log('tokenIndexTo: %d', uint128(tokenIndexTo));\n        amount = doppleSwap.swap(\n            tokenIndexFrom,\n            tokenIndexTo,\n            inputAmount,\n            minOutputAmount,\n            DEADLINE\n        );\n    }\n}\n"}}}