{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Composite_Vaults/Eth_Usdc/SushiswapLpPairConverter_EthUsdc.2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ninterface IUniswapV2Router {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable\n    returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n// a library for performing various math operations\nlibrary Math {\n    function min(uint x, uint y) internal pure returns (uint z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n\ninterface Balancer {\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\n    function swapExactAmountIn(\n        address tokenIn,\n        uint tokenAmountIn,\n        address tokenOut,\n        uint minAmountOut,\n        uint maxPrice\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\n    function swapExactAmountOut(\n        address tokenIn,\n        uint maxAmountIn,\n        address tokenOut,\n        uint tokenAmountOut,\n        uint maxPrice\n    ) external returns (uint tokenAmountIn, uint spotPriceAfter);\n    function joinswapExternAmountIn(address tokenIn, uint tokenAmountIn, uint minPoolAmountOut) external returns (uint poolAmountOut);\n    function exitswapPoolAmountIn(address tokenOut, uint poolAmountIn, uint minAmountOut) external returns (uint tokenAmountOut);\n    function getBalance(address token) external view returns (uint);\n    function totalSupply() external view returns (uint256);\n    function getTotalDenormalizedWeight() external view returns (uint);\n    function getNormalizedWeight(address token) external view returns (uint);\n    function getDenormalizedWeight(address token) external view returns (uint);\n}\n\ninterface OneSplitAudit {\n    function swap(\n        address fromToken,\n        address destToken,\n        uint256 amount,\n        uint256 minReturn,\n        uint256[] calldata distribution,\n        uint256 flags\n    )\n        external\n        payable\n        returns(uint256 returnAmount);\n\n    function getExpectedReturn(\n        address fromToken,\n        address destToken,\n        uint256 amount,\n        uint256 parts,\n        uint256 flags // See constants in IOneSplit.sol\n    )\n        external\n        view\n        returns(\n            uint256 returnAmount,\n            uint256[] memory distribution\n        );\n}\n\ninterface ILpPairConverter {\n    function lpPair() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n\n    function accept(address _input) external view returns (bool);\n    function get_virtual_price() external view returns (uint);\n\n    function convert_rate(address _input, address _output, uint _inputAmount) external view returns (uint _outputAmount);\n    function calc_add_liquidity(uint _amount0, uint _amount1) external view returns (uint);\n    function calc_remove_liquidity(uint _shares) external view returns (uint _amount0, uint _amount1);\n\n    function convert(address _input, address _output, address _to) external returns (uint _outputAmount);\n    function add_liquidity(address _to) external returns (uint _outputAmount);\n    function remove_liquidity(address _to) external returns (uint _amount0, uint _amount1);\n}\n\ninterface IVaultMaster {\n    function bank(address) view external returns (address);\n    function isVault(address) view external returns (bool);\n    function isController(address) view external returns (bool);\n    function isStrategy(address) view external returns (bool);\n\n    function slippage(address) view external returns (uint);\n    function convertSlippage(address _input, address _output) view external returns (uint);\n\n    function valueToken() view external returns (address);\n    function govVault() view external returns (address);\n    function insuranceFund() view external returns (address);\n    function performanceReward() view external returns (address);\n\n    function govVaultProfitShareFee() view external returns (uint);\n    function gasFee() view external returns (uint);\n    function insuranceFee() view external returns (uint);\n\n    function withdrawalProtectionFee() view external returns (uint);\n}\n\nlibrary ConverterHelper {\n    using SafeMath for uint;\n    using SafeERC20 for IERC20;\n    function bmul(uint a, uint b)\n    internal pure\n    returns (uint)\n    {\n        uint c0 = a * b;\n        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\n        uint c1 = c0 + (1e18 / 2);\n        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\n        uint c2 = c1 / 1e18;\n        return c2;\n    }\n\n    function bdiv(uint a, uint b)\n    internal pure\n    returns (uint)\n    {\n        require(b != 0, \"ERR_DIV_ZERO\");\n        uint c0 = a * 1e18;\n        require(a == 0 || c0 / a == 1e18, \"ERR_DIV_INTERNAL\");\n        // bmul overflow\n        uint c1 = c0 + (b / 2);\n        require(c1 >= c0, \"ERR_DIV_INTERNAL\");\n        //  badd require\n        uint c2 = c1 / b;\n        return c2;\n    }\n\n    function calculateAddBptLiquidity(Balancer _balPool,\n        address _token0, address _token1,\n        uint _amount0, uint _amount1) internal view returns (uint _poolAmountOut) {\n        require(_amount0 > 0 && _amount1 > 0, \"Insufficient liquidity amount\");\n        uint _balTotalSupply = _balPool.totalSupply();\n        uint _balToken0Amount = _balPool.getBalance(_token0);\n        uint _balToken1Amount = _balPool.getBalance(_token1);\n        uint _poolOutByAmount0 = bdiv(bmul(_amount0, _balTotalSupply), _balToken0Amount);\n        uint _poolOutByAmount1 = bdiv(bmul(_amount1, _balTotalSupply), _balToken1Amount);\n        //        uint _poolOutByAmount0 = bmul(bdiv(_amount0, _balToken0Amount), _balTotalSupply);\n        //        uint _poolOutByAmount1 = bmul(bdiv(_amount1, _balToken1Amount), _balTotalSupply);\n        return bmul(Math.min(_poolOutByAmount0, _poolOutByAmount1), 1e18 - 1e10);\n    }\n\n    function calculateRemoveBptLiquidity(Balancer _balPool, uint _poolAmountIn,\n        address _token0, address _token1\n    ) internal view returns (uint _amount0, uint _amount1) {\n        uint _balTotalSupply = _balPool.totalSupply();\n        uint _balToken0Amount = _balPool.getBalance(_token0);\n        uint _balToken1Amount = _balPool.getBalance(_token1);\n        _amount0 = bdiv(bmul(_balToken0Amount, _poolAmountIn), _balTotalSupply);\n        _amount1 = bdiv(bmul(_balToken1Amount, _poolAmountIn), _balTotalSupply);\n    }\n\n    function calculateAddUniLpLiquidity(IUniswapV2Pair _pair, uint _amount0, uint _amount1) internal view returns (uint) {\n        uint _pairTotalSupply = _pair.totalSupply();\n        uint _reserve0 = 0;\n        uint _reserve1 = 0;\n        (_reserve0, _reserve1,) = _pair.getReserves();\n        return Math.min(_amount0.mul(_pairTotalSupply) / _reserve0, _amount1.mul(_pairTotalSupply) / _reserve1);\n    }\n\n    function calculateRemoveUniLpLiquidity(IUniswapV2Pair _pair, uint _shares) internal view returns (uint _amount0, uint _amount1) {\n        uint _pairSupply = _pair.totalSupply();\n        uint _reserve0 = 0;\n        uint _reserve1 = 0;\n        (_reserve0, _reserve1,) = _pair.getReserves();\n        _amount0 = _shares.mul(_reserve0).div(_pairSupply);\n        _amount1 = _shares.mul(_reserve1).div(_pairSupply);\n        return (_amount0, _amount1);\n    }\n\n    function skim(address _token, address _to) internal returns (uint) {\n        uint _amount = IERC20(_token).balanceOf(address(this));\n        if (_amount > 0) {\n            IERC20(_token).safeTransfer(_to, _amount);\n        }\n        return _amount;\n    }\n\n    function addUniLpLiquidity(IUniswapV2Router _router, IUniswapV2Pair _pair, address _to) internal returns (uint _outputAmount) {\n        address _token0 = _pair.token0();\n        address _token1 = _pair.token1();\n        uint _amount0 = IERC20(_token0).balanceOf(address(this));\n        uint _amount1 = IERC20(_token1).balanceOf(address(this));\n        require(_amount0 > 0 && _amount1 > 0, \"Insufficient liquidity amount\");\n        (,, _outputAmount) = _router.addLiquidity(_token0, _token1, _amount0, _amount1, 0, 0, _to, block.timestamp + 1);\n        skim(_token0, _to);\n        skim(_token1, _to);\n    }\n\n    function removeBptLiquidity(Balancer _pool) internal returns (uint _poolAmountIn) {\n        uint[] memory _minAmountsOut = new uint[](2);\n        _poolAmountIn = _pool.balanceOf(address(this));\n        require(_poolAmountIn > 0, \"Insufficient liquidity amount\");\n        _pool.exitPool(_poolAmountIn, _minAmountsOut);\n    }\n\n    function removeUniLpLiquidity(IUniswapV2Router _router, IUniswapV2Pair _pair, address _to) internal returns (uint _amount0, uint _amount1) {\n        uint _liquidityAmount = _pair.balanceOf(address(this));\n        require(_liquidityAmount > 0, \"Insufficient liquidity amount\");\n        return _router.removeLiquidity(_pair.token0(), _pair.token1(), _liquidityAmount, 0, 0, _to, block.timestamp + 1);\n    }\n\n    function convertRateUniToUniInternal(address _input, address _output, uint _inputAmount) internal view returns (uint) {\n        IUniswapV2Pair _inputPair = IUniswapV2Pair(_input);\n        IUniswapV2Pair _outputPair = IUniswapV2Pair(_output);\n        uint _amount0;\n        uint _amount1;\n        (_amount0, _amount1) = calculateRemoveUniLpLiquidity(_inputPair, _inputAmount);\n        return calculateAddUniLpLiquidity(_outputPair, _amount0, _amount1);\n    }\n\n    function convertUniToUniLp(address _input, address _output, IUniswapV2Router _inputRouter, IUniswapV2Router _outputRouter, address _to) internal returns (uint) {\n        IUniswapV2Pair _inputPair = IUniswapV2Pair(_input);\n        IUniswapV2Pair _outputPair = IUniswapV2Pair(_output);\n        removeUniLpLiquidity(_inputRouter, _inputPair, address(this));\n        return addUniLpLiquidity(_outputRouter, _outputPair, _to);\n    }\n\n    function convertUniLpToBpt(address _input, address _output, IUniswapV2Router _inputRouter, address _to) internal returns (uint) {\n        IUniswapV2Pair _inputPair = IUniswapV2Pair(_input);\n        Balancer _balPool = Balancer(_output);\n        address _token0 = _inputPair.token0();\n        address _token1 = _inputPair.token1();\n        uint _amount0;\n        uint _amount1;\n        (_amount0, _amount1) = removeUniLpLiquidity(_inputRouter, _inputPair, address(this));\n        uint _balPoolAmountOut = calculateAddBptLiquidity(_balPool, _token0, _token1, _amount0, _amount1);\n        uint _outputAmount = addBalancerLiquidity(_balPool, _balPoolAmountOut, _to);\n        skim(_token0, _to);\n        skim(_token1, _to);\n        return _outputAmount;\n    }\n\n    function convertBPTToUniLp(address _input, address _output, IUniswapV2Router _outputRouter, address _to) internal returns (uint) {\n        removeBptLiquidity(Balancer(_input));\n        IUniswapV2Pair _outputPair = IUniswapV2Pair(_output);\n        return addUniLpLiquidity(_outputRouter, _outputPair, _to);\n    }\n\n    function convertRateUniLpToBpt(address _input, address _lpBpt, uint _inputAmount) internal view returns (uint) {\n        IUniswapV2Pair _inputPair = IUniswapV2Pair(_input);\n        uint _amount0;\n        uint _amount1;\n        (_amount0, _amount1) = calculateRemoveUniLpLiquidity(_inputPair, _inputAmount);\n        return calculateAddBptLiquidity(Balancer(_lpBpt), _inputPair.token0(), _inputPair.token1(), _amount0, _amount1);\n    }\n\n    function convertRateBptToUniLp(address _lpBpt, address _output, uint _inputAmount) internal view returns (uint) {\n        IUniswapV2Pair _outputPair = IUniswapV2Pair(_output);\n        uint _amount0;\n        uint _amount1;\n        (_amount0, _amount1) = calculateRemoveBptLiquidity(Balancer(_lpBpt), _inputAmount, _outputPair.token0(), _outputPair.token1());\n        return calculateAddUniLpLiquidity(_outputPair, _amount0, _amount1);\n    }\n\n    function addBalancerLiquidity(Balancer _pool, uint _poolAmountOut, address _to) internal returns (uint _outputAmount) {\n        uint[] memory _maxAmountsIn = new uint[](2);\n        _maxAmountsIn[0] = type(uint256).max;\n        _maxAmountsIn[1] = type(uint256).max;\n        _pool.joinPool(_poolAmountOut, _maxAmountsIn);\n        return skim(address(_pool), _to);\n    }\n}\n\ninterface IDecimals {\n    function decimals() external view returns (uint8);\n}\n\nabstract contract BaseConverter is ILpPairConverter {\n    using SafeMath for uint;\n    using SafeERC20 for IERC20;\n\n    address public governance;\n\n    IUniswapV2Router public uniswapRouter = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n    IUniswapV2Router public sushiswapRouter = IUniswapV2Router(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\n\n    address public lpUni;\n    address public lpSlp;\n    address public lpBpt;\n\n    // To calculate virtual_price (dollar value)\n    OneSplitAudit public oneSplitAudit = OneSplitAudit(0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E);\n    IERC20 public tokenUSDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n\n    uint private unlocked = 1;\n    uint public preset_virtual_price = 0;\n\n    modifier lock() {\n        require(unlocked == 1, 'Converter: LOCKED');\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n\n    constructor (\n        IUniswapV2Router _uniswapRouter,\n        IUniswapV2Router _sushiswapRouter,\n        address _lpUni, address _lpSlp, address _lpBpt,\n        OneSplitAudit _oneSplitAudit,\n        IERC20 _usdc\n    ) public {\n        if (address(_uniswapRouter) != address(0)) uniswapRouter = _uniswapRouter;\n        if (address(_sushiswapRouter) != address(0)) sushiswapRouter = _sushiswapRouter;\n\n        lpUni = _lpUni;\n        lpSlp = _lpSlp;\n        lpBpt = _lpBpt;\n\n        address token0_ = IUniswapV2Pair(lpUni).token0();\n        address token1_ = IUniswapV2Pair(lpUni).token1();\n\n        IERC20(lpUni).safeApprove(address(uniswapRouter), type(uint256).max);\n        IERC20(token0_).safeApprove(address(uniswapRouter), type(uint256).max);\n        IERC20(token1_).safeApprove(address(uniswapRouter), type(uint256).max);\n\n        IERC20(lpSlp).safeApprove(address(sushiswapRouter), type(uint256).max);\n        IERC20(token0_).safeApprove(address(sushiswapRouter), type(uint256).max);\n        IERC20(token1_).safeApprove(address(sushiswapRouter), type(uint256).max);\n\n        IERC20(token0_).safeApprove(address(lpBpt), type(uint256).max);\n        IERC20(token1_).safeApprove(address(lpBpt), type(uint256).max);\n\n        if (address(_oneSplitAudit) != address(0)) oneSplitAudit = _oneSplitAudit;\n        if (address(_usdc) != address(0)) tokenUSDC = _usdc;\n\n        governance = msg.sender;\n    }\n\n    function getName() public virtual pure returns (string memory);\n\n    function setGovernance(address _governance) public {\n        require(msg.sender == governance, \"!governance\");\n        governance = _governance;\n    }\n\n    function approveForSpender(IERC20 _token, address _spender, uint _amount) external {\n        require(msg.sender == governance, \"!governance\");\n        _token.safeApprove(_spender, _amount);\n    }\n\n    function set_preset_virtual_price(uint _preset_virtual_price) public {\n        require(msg.sender == governance, \"!governance\");\n        preset_virtual_price = _preset_virtual_price;\n    }\n\n    /**\n     * This function allows governance to take unsupported tokens out of the contract. This is in an effort to make someone whole, should they seriously mess up.\n     * There is no guarantee governance will vote to return these. It also allows for removal of airdropped tokens.\n     */\n    function governanceRecoverUnsupported(IERC20 _token, uint256 amount, address to) external {\n        require(msg.sender == governance, \"!governance\");\n        _token.transfer(to, amount);\n    }\n}\n\ncontract SushiswapLpPairConverter_EthUsdc is BaseConverter {\n    // lpUni = 0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc\n    // lpSlp = 0x397FF1542f962076d0BFE58eA045FfA2d347ACa0\n    // lpBpt = 0x8a649274E4d777FFC6851F13d23A86BBFA2f2Fbf\n    constructor (\n        IUniswapV2Router _uniswapRouter,\n        IUniswapV2Router _sushiswapRouter,\n        address _lpUni, address _lpSlp, address _lpBpt,\n        OneSplitAudit _oneSplitAudit,\n        IERC20 _usdc\n    ) public BaseConverter(_uniswapRouter, _sushiswapRouter, _lpUni, _lpSlp, _lpBpt, _oneSplitAudit, _usdc) {\n    }\n\n    function getName() public override pure returns (string memory) {\n        return \"SushiswapLpPairConverter:EthUsdc\";\n    }\n\n    function lpPair() external override view returns (address) {\n        return lpSlp;\n    }\n\n    function token0() public override view returns (address) {\n        return IUniswapV2Pair(lpSlp).token0();\n    }\n\n    function token1() public override view returns (address) {\n        return IUniswapV2Pair(lpSlp).token1();\n    }\n\n    function accept(address _input) external override view returns (bool) {\n        return (_input == lpUni) || (_input == lpSlp) || (_input == lpBpt);\n    }\n\n    function get_virtual_price() external override view returns (uint) {\n        if (preset_virtual_price > 0) return preset_virtual_price;\n        IUniswapV2Pair _pair = IUniswapV2Pair(lpSlp);\n        uint _totalSupply = _pair.totalSupply();\n        IDecimals _token0 = IDecimals(_pair.token0());\n        uint _reserve0 = 0;\n        (_reserve0,,) = _pair.getReserves();\n        uint _amount = uint(10) ** _token0.decimals();\n        // 0.1% pool\n        if (_amount > _reserve0.div(1000)) {\n            _amount = _reserve0.div(1000);\n        }\n        uint _returnAmount;\n        (_returnAmount,) = oneSplitAudit.getExpectedReturn(address(_token0), address(tokenUSDC), _amount, 1, 0);\n        // precision 1e18\n        return _returnAmount.mul(2).mul(_reserve0).div(_amount).mul(10 ** 30).div(_totalSupply);\n    }\n\n    function convert_rate(address _input, address _output, uint _inputAmount) external override view returns (uint _outputAmount) {\n        if (_input == _output) return 1;\n        if (_inputAmount == 0) return 0;\n        if ((_input == lpSlp && _output == lpUni) || (_input == lpUni && _output == lpSlp)) {// convert UNI <-> SLP\n            return ConverterHelper.convertRateUniToUniInternal(_input, _output, _inputAmount);\n        }\n        if (_input == lpSlp && _output == lpBpt) {// convert SLP -> BPT\n            return ConverterHelper.convertRateUniLpToBpt(_input, _output, _inputAmount);\n        }\n        if (_input == lpBpt && _output == lpSlp) {// convert BPT -> SLP\n            return ConverterHelper.convertRateBptToUniLp(_input, _output, _inputAmount);\n        }\n        revert(\"Not supported\");\n    }\n\n    function calc_add_liquidity(uint _amount0, uint _amount1) external override view returns (uint) {\n        return ConverterHelper.calculateAddUniLpLiquidity(IUniswapV2Pair(lpSlp), _amount0, _amount1);\n    }\n\n    function calc_remove_liquidity(uint _shares) external override view returns (uint _amount0, uint _amount1) {\n        return ConverterHelper.calculateRemoveUniLpLiquidity(IUniswapV2Pair(lpSlp), _shares);\n    }\n\n    function convert(address _input, address _output, address _to) external lock override returns (uint _outputAmount) {\n        require(_input != _output, \"same asset\");\n        if (_input == lpUni && _output == lpSlp) {// convert UNI -> SLP\n            return ConverterHelper.convertUniToUniLp(_input, _output, uniswapRouter, sushiswapRouter, _to);\n        }\n        if (_input == lpSlp && _output == lpUni) {// convert SLP -> SLP\n            return ConverterHelper.convertUniToUniLp(_input, _output, sushiswapRouter, uniswapRouter, _to);\n        }\n        if (_input == lpSlp && _output == lpBpt) {// convert SLP -> BPT\n            return ConverterHelper.convertUniLpToBpt(_input, _output, sushiswapRouter, _to);\n        }\n        if (_input == lpBpt && _output == lpSlp) {// convert BPT -> SLP\n            return ConverterHelper.convertBPTToUniLp(_input, _output, sushiswapRouter, _to);\n        }\n        revert(\"Not supported\");\n    }\n\n    function add_liquidity(address _to) external lock override returns (uint _outputAmount) {\n        return ConverterHelper.addUniLpLiquidity(sushiswapRouter, IUniswapV2Pair(lpSlp), _to);\n    }\n\n    function remove_liquidity(address _to) external lock override returns (uint _amount0, uint _amount1) {\n        return ConverterHelper.removeUniLpLiquidity(sushiswapRouter, IUniswapV2Pair(lpSlp), _to);\n    }\n}\n"
    }
  }
}