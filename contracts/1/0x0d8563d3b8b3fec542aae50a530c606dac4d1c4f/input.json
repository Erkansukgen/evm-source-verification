{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Arbitrum_Messenger.sol":{"content":"// Sources flattened with hardhat v2.5.0 https://hardhat.org\n\n// File contracts/external/avm/interfaces/iArbitrum_Inbox.sol\n\n// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.0;\n\n// Retryable tickets are the Arbitrum protocolâ€™s canonical method for passing generalized messages from Ethereum to\n// Arbitrum. A retryable ticket is an L2 message encoded and delivered by L1; if gas is provided, it will be executed\n// immediately. If no gas is provided or the execution reverts, it will be placed in the L2 retry buffer,\n// where any user can re-execute for some fixed period (roughly one week).\n// Retryable tickets are created by calling Inbox.createRetryableTicket.\n// More details here: https://developer.offchainlabs.com/docs/l1_l2_messages#ethereum-to-arbitrum-retryable-tickets\n\ninterface iArbitrum_Inbox {\n    function createRetryableTicketNoRefundAliasRewrite(\n        address destAddr,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 maxGas,\n        uint256 gasPriceBid,\n        bytes calldata data\n    ) external payable returns (uint256);\n}\n\n\n// File contracts/insured-bridge/avm/Arbitrum_CrossDomainEnabled.sol\n\n// Copied logic from https://github.com/makerdao/arbitrum-dai-bridge/blob/34acc39bc6f3a2da0a837ea3c5dbc634ec61c7de/contracts/l1/L1CrossDomainEnabled.sol\n// with a change to the solidity version.\n\nabstract contract Arbitrum_CrossDomainEnabled {\n    iArbitrum_Inbox public immutable inbox;\n\n    /**\n     * @param _inbox Contract that sends generalized messages to the Arbitrum chain.\n     */\n    constructor(address _inbox) {\n        inbox = iArbitrum_Inbox(_inbox);\n    }\n\n    // More details about retryable ticket parameters here: https://developer.offchainlabs.com/docs/l1_l2_messages#parameters\n    // This function will not apply aliassing to the `user` address on L2.\n    // Note: If `l1CallValue > 0`, then this contract must contain at least that much ETH to send as msg.value to the\n    // inbox.\n    function sendTxToL2NoAliassing(\n        address target, // Address where transaction will initiate on L2.\n        address user, // Address where excess gas is credited on L2.\n        uint256 l1CallValue, // msg.value deposited to `user` on L2.\n        uint256 maxSubmissionCost, // Amount of ETH allocated to pay for base submission fee. The user is charged this\n        // fee to cover the storage costs of keeping their retryable ticket's calldata in the retry buffer. This should\n        // also cover the `l2CallValue`, but we set that to 0. This amount is proportional to the size of `data`.\n        uint256 maxGas, // Gas limit for immediate L2 execution attempt.\n        uint256 gasPriceBid, // L2 gas price bid for immediate L2 execution attempt.\n        bytes memory data // ABI encoded data to send to target.\n    ) internal returns (uint256) {\n        // createRetryableTicket API: https://developer.offchainlabs.com/docs/sol_contract_docs/md_docs/arb-bridge-eth/bridge/inbox#createretryableticketaddress-destaddr-uint256-l2callvalue-uint256-maxsubmissioncost-address-excessfeerefundaddress-address-callvaluerefundaddress-uint256-maxgas-uint256-gaspricebid-bytes-data-%E2%86%92-uint256-external\n        // - address destAddr: destination L2 contract address\n        // - uint256 l2CallValue: call value for retryable L2 message\n        // - uint256 maxSubmissionCost: Max gas deducted from user's L2 balance to cover base submission fee\n        // - address excessFeeRefundAddress: maxgas x gasprice - execution cost gets credited here on L2\n        // - address callValueRefundAddress: l2CallValue gets credited here on L2 if retryable txn times out or gets cancelled\n        // - uint256 maxGas: Max gas deducted from user's L2 balance to cover L2 execution\n        // - uint256 gasPriceBid: price bid for L2 execution\n        // - bytes data: ABI encoded data of L2 message\n        uint256 seqNum =\n            inbox.createRetryableTicketNoRefundAliasRewrite{ value: l1CallValue }(\n                target,\n                0, // we always assume that l2CallValue = 0\n                maxSubmissionCost,\n                user,\n                user,\n                maxGas,\n                gasPriceBid,\n                data\n            );\n        return seqNum;\n    }\n}\n\n\n// File contracts/insured-bridge/interfaces/MessengerInterface.sol\n\n\n/**\n * @notice Sends cross chain messages to contracts on a specific L2 network. The `relayMessage` implementation will\n * differ for each L2.\n */\ninterface MessengerInterface {\n    function relayMessage(\n        address target,\n        address userToRefund,\n        uint256 l1CallValue,\n        uint256 gasLimit,\n        uint256 gasPrice,\n        uint256 maxSubmissionCost,\n        bytes memory message\n    ) external payable;\n}\n\n\n// File @openzeppelin/contracts/utils/Context.sol@v4.1.0\n\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\n// File @openzeppelin/contracts/access/Ownable.sol@v4.1.0\n\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n// File contracts/insured-bridge/avm/Arbitrum_Messenger.sol\n\n\n\n\n/**\n * @notice Sends cross chain messages Arbitrum L2 network.\n * @dev This contract's owner should be set to the BridgeAdmin deployed on the same L1 network so that only the\n * BridgeAdmin can call cross-chain administrative functions on the L2 DepositBox via this messenger.\n * @dev This address will be the sender of any L1 --> L2 retryable tickets, so it should be set as the cross domain\n * owner for L2 contracts that expect to receive cross domain messages.\n */\ncontract Arbitrum_Messenger is Ownable, Arbitrum_CrossDomainEnabled, MessengerInterface {\n    event RelayedMessage(\n        address indexed from,\n        address indexed to,\n        uint256 indexed seqNum,\n        address userToRefund,\n        uint256 l1CallValue,\n        uint256 gasLimit,\n        uint256 gasPrice,\n        uint256 maxSubmissionCost,\n        bytes data\n    );\n\n    /**\n     * @param _inbox Contract that sends generalized messages to the Arbitrum chain.\n     */\n    constructor(address _inbox) Arbitrum_CrossDomainEnabled(_inbox) {}\n\n    /**\n     * @notice Sends a message to an account on L2. If this message reverts on l2 for any reason it can either be\n     * resent on L1, or redeemed on L2 manually. To learn more see how \"retryable tickets\" work on Arbitrum\n     * https://developer.offchainlabs.com/docs/l1_l2_messages#parameters\n     * @param target The intended recipient on L2.\n     * @param userToRefund User on L2 to refund extra fees to.\n     * @param l1CallValue Amount of ETH deposited to `target` contract on L2. Used to pay for L2 submission fee and\n     * l2CallValue. This will usually be > 0.\n     * @param gasLimit The gasLimit for the receipt of the message on L2.\n     * @param gasPrice Gas price bid for L2 execution.\n     * @param maxSubmissionCost: Max gas deducted from user's L2 balance to cover base submission fee.\n     * This amount is proportional to the size of `data`.\n     * @param message The data to send to the target (usually calldata to a function with\n     *  `onlyFromCrossDomainAccount()`)\n     */\n    function relayMessage(\n        address target,\n        address userToRefund,\n        uint256 l1CallValue,\n        uint256 gasLimit,\n        uint256 gasPrice,\n        uint256 maxSubmissionCost,\n        bytes memory message\n    ) external payable override onlyOwner {\n        // Since we know the L2 target's address in advance, we don't need to alias an L1 address.\n        uint256 seqNumber =\n            sendTxToL2NoAliassing(target, userToRefund, l1CallValue, maxSubmissionCost, gasLimit, gasPrice, message);\n        emit RelayedMessage(\n            msg.sender,\n            target,\n            seqNumber,\n            userToRefund,\n            l1CallValue,\n            gasLimit,\n            gasPrice,\n            maxSubmissionCost,\n            message\n        );\n    }\n}"}}}