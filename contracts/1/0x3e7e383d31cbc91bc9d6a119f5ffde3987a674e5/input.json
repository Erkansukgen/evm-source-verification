{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/candleopricepredict.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal virtual view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    // function _msgData() internal virtual view returns (bytes memory) {\r\n    //     this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    //     return msg.data;\r\n    // }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    // function renounceOwnership() public virtual onlyOwner {\r\n    //     emit OwnershipTransferred(_owner, address(0));\r\n    //     _owner = address(0);\r\n    // }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n    uint256 private _statusOther;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n        _statusOther = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrantOther() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_statusOther != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _statusOther = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _statusOther = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n\r\n\r\n            bytes32 accountHash\r\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    // using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\ncontract CandleoMoney is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    address payable feesReceiver;\r\n    uint256 public gamefee = 1000;\r\n    // IERC20 public _token;\r\n    bool public biddingStatus = true;\r\n\r\n    struct PlayersBid {\r\n        address payable player;\r\n        uint256 bid;\r\n        uint256 bidTime;\r\n    }\r\n\r\n    struct PlayersSlotInfo {\r\n        uint256 slot;\r\n        uint256 position;\r\n    }\r\n\r\n    struct GameSlot {\r\n        uint256 amount; // eg. slot amount is 10 token\r\n        uint256 minPlayer; // eg. min 10 player\r\n        uint256 PlayerLimit; //eg. max 20 player\r\n        uint256 DateSlot; //in TimeStamp\r\n        uint256 playersCounts; // count of players registered\r\n        uint256 winningBid;\r\n        uint256 actualAmount;\r\n        uint256 bidBefore;\r\n        address payable winner;\r\n        uint256 amountWon;\r\n        bool isRefunded;\r\n        bool isActive;\r\n        // mapping(uint256 => address) BidderAddress;\r\n    }\r\n\r\n    mapping(uint256 => uint256) public GamePlaySlot; // slot date=> no of slots\r\n\r\n    mapping(uint256 => mapping(uint256 => GameSlot)) public GamePlay; // datewise slotList\r\n\r\n    mapping(uint256 => mapping(uint256 => mapping(uint256 => PlayersBid)))\r\n        private Bidders; // biddate,slotno,playerno = > bidder details like address, bid value and bidding Time\r\n\r\n    mapping(address => mapping(uint256 => uint256)) private playerSlotCount; //_msgSender, date, => no. of slot\r\n\r\n    mapping(address => mapping(uint256 => mapping(uint256 => PlayersSlotInfo)))\r\n        private playerinfo; //_msgSender, date, slot => GameSlotNo, playerno/positionm\r\n\r\n    // constructor(IERC20 token, address _feesReceiver) public {\r\n    constructor(address payable _feesReceiver) public {\r\n        // _token = token;\r\n        feesReceiver = _feesReceiver;\r\n    }\r\n\r\n    function createGameSlot(\r\n        uint256 _amount,\r\n        uint256 _PlayerLimit,\r\n        uint256 _playdate,\r\n        uint256 _minPlayerCount,\r\n        uint256 _bidBefore\r\n    ) external onlyOwner returns (bool) {\r\n        uint256 tslot = GamePlaySlot[_playdate];\r\n\r\n        GamePlay[_playdate][tslot] = GameSlot({\r\n            amount: _amount,\r\n            minPlayer: _minPlayerCount,\r\n            PlayerLimit: _PlayerLimit,\r\n            DateSlot: _playdate,\r\n            playersCounts: 0,\r\n            winningBid: 0,\r\n            actualAmount: 0,\r\n            bidBefore: _bidBefore,\r\n            winner: address(0),\r\n            amountWon: 0,\r\n            isRefunded: false,\r\n            isActive: true\r\n        });\r\n        GamePlaySlot[_playdate] += 1;\r\n        return true;\r\n    }\r\n\r\n    function allowBidding(bool _status) external onlyOwner returns (bool) {\r\n        // require(\r\n        //     feesReceiver != address(0),\r\n        //     \"Interracting token addresses are not yet configured\"\r\n        // );\r\n        biddingStatus = _status;\r\n        return true;\r\n    }\r\n\r\n    function setTokenAddresses(address payable _feesReceiver)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _feesReceiver != address(0),\r\n            \"Invalid addresses format are not supported\"\r\n        );\r\n        // _token = _tokenAddr;\r\n        feesReceiver = _feesReceiver;\r\n        return true;\r\n    }\r\n\r\n    function setGameFee(uint256 _gameFee) external onlyOwner returns (bool) {\r\n        gamefee = _gameFee;\r\n        return true;\r\n    }\r\n\r\n    function bidBTC(\r\n        uint256 _date,\r\n        uint256 _slot,\r\n        uint256 _bid\r\n    ) internal returns (bool) {\r\n        GameSlot storage Slot = GamePlay[_date][_slot];\r\n        require(Slot.playersCounts < Slot.PlayerLimit, \"Slot is not available\");\r\n        Bidders[_date][_slot][Slot.playersCounts] = PlayersBid({\r\n            player: _msgSender(),\r\n            bid: _bid,\r\n            bidTime: block.timestamp\r\n        });\r\n        playerinfo[_msgSender()][_date][playerSlotCount[_msgSender()][_date]] = PlayersSlotInfo({\r\n            slot: _slot,\r\n            position: Slot.playersCounts\r\n        });\r\n        Slot.playersCounts += 1;\r\n        // playerinfo[_msgSender()][_date][playerSlotCount[_msgSender()][_date]] = (Slot\r\n        //     .playersCounts - 1);\r\n        playerSlotCount[_msgSender()][_date] += 1;\r\n        return true;\r\n    }\r\n\r\n    function bidBTCPay(\r\n        uint256 _date,\r\n        uint256 _slot,\r\n        uint256 _bid\r\n    ) external payable nonReentrant returns (bool) {\r\n        GameSlot storage Slot = GamePlay[_date][_slot];\r\n        uint256 slotAmount = Slot.amount;\r\n        require(biddingStatus == true, \"Bidding is not yet Started\");\r\n        require(\r\n            Slot.isActive == true && Slot.bidBefore > block.timestamp,\r\n            \"Bidding is Closed\"\r\n        );\r\n        require(msg.value >= slotAmount && slotAmount > 0);\r\n        // require(_token.allowance(_msgSender(), address(this)) >= slotAmount);\r\n        // _token.safeTransferFrom(_msgSender(), address(this), slotAmount);\r\n\r\n        bidBTC(_date, _slot, _bid);\r\n        return true;\r\n    }\r\n\r\n    function winnerSelection(\r\n        address payable _winner,\r\n        uint256 _winningBid,\r\n        uint256 _actualAmount,\r\n        uint256 _slot,\r\n        uint256 _date\r\n    ) external nonReentrant onlyOwner returns (bool) {\r\n        GameSlot storage Slot = GamePlay[_date][_slot];\r\n        require(Slot.isActive == true, \"Wrong Slot or Winner already Selected\");\r\n        require(\r\n            Slot.minPlayer <= Slot.playersCounts,\r\n            \"minimum players not registered\"\r\n        );\r\n        Slot.winner = _winner;\r\n        Slot.winningBid = _winningBid;\r\n        Slot.actualAmount = _actualAmount;\r\n        Slot.isActive = false;\r\n        uint256 winningAmount = (Slot.amount) * (Slot.playersCounts);\r\n        uint256 fee = (winningAmount * gamefee).div(1e4);\r\n        winningAmount = winningAmount.sub(fee);\r\n        Slot.amountWon = winningAmount;\r\n        // _token.safeTransfer(feesReceiver, fee);\r\n        // _token.safeTransfer(_msgSender(), winningAmount);\r\n        feesReceiver.transfer(fee);\r\n        _winner.transfer(winningAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function refundAll(uint256 _slot, uint256 _date)\r\n        external\r\n        nonReentrant\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        GameSlot storage Slot = GamePlay[_date][_slot];\r\n        uint256 winningAmount = (Slot.amount) * (Slot.playersCounts);\r\n        require(address(this).balance >= winningAmount, \"Insufficient Balance\");\r\n        require(\r\n            Slot.isRefunded == false && Slot.isActive == true,\r\n            \"Slot already Redunded or Winner already Selected\"\r\n        );\r\n        require(\r\n            Slot.minPlayer > Slot.playersCounts,\r\n            \"Can't Refund, minimum players already registered\"\r\n        );\r\n        uint256 playersCount = Slot.playersCounts;\r\n        Slot.isRefunded = true;\r\n        Slot.isActive == false;\r\n        for (uint256 i = 0; i < playersCount; i++) {\r\n            address payable bidderAddress = Bidders[_date][_slot][i].player;\r\n            // _token.safeTransfer(bidderAddress, Slot.amount);\r\n            bidderAddress.transfer(Slot.amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transferAnyERC20Tokens(\r\n        IERC20 _tokenAddr,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        require(\r\n            _tokenAddr.balanceOf(address(this)) >= _amount,\r\n            \"Tokens not available\"\r\n        );\r\n        _tokenAddr.safeTransfer(_to, _amount);\r\n    }\r\n\r\n    function playerSlotCountUser(uint256 _slotDate)\r\n        external\r\n        view\r\n        returns (uint256 noOfSlot)\r\n    {\r\n        return playerSlotCount[_msgSender()][_slotDate];\r\n    }\r\n\r\n    function playerinfoUser(uint256 _slotDate, uint256 _slot)\r\n        external\r\n        view\r\n        returns (uint256 slot, uint256 position)\r\n    {\r\n        return (\r\n            playerinfo[_msgSender()][_slotDate][_slot].slot,\r\n            playerinfo[_msgSender()][_slotDate][_slot].position\r\n        );\r\n    }\r\n\r\n    function BiddersUser(\r\n        uint256 _slotDate,\r\n        uint256 _slot,\r\n        uint256 _position\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address player,\r\n            uint256 bid,\r\n            uint256 bidTime\r\n        )\r\n    {\r\n        require(\r\n            _msgSender() == Bidders[_slotDate][_slot][_position].player,\r\n            \"Invalid Player\"\r\n        );\r\n        return (\r\n            Bidders[_slotDate][_slot][_position].player,\r\n            Bidders[_slotDate][_slot][_position].bid,\r\n            Bidders[_slotDate][_slot][_position].bidTime\r\n        );\r\n    }\r\n\r\n    function BiddersAll(\r\n        uint256 _slotDate,\r\n        uint256 _slot,\r\n        uint256 _position\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address player,\r\n            uint256 bid,\r\n            uint256 bidTime\r\n        )\r\n    {\r\n        require(\r\n            GamePlay[_slotDate][_slot].bidBefore < block.timestamp,\r\n            \"biding is not yet closed\"\r\n        );\r\n        return (\r\n            Bidders[_slotDate][_slot][_position].player,\r\n            Bidders[_slotDate][_slot][_position].bid,\r\n            Bidders[_slotDate][_slot][_position].bidTime\r\n        );\r\n    }\r\n\r\n    function withdrawAnyEther() public onlyOwner {\r\n        _msgSender().transfer(address(this).balance);\r\n    }\r\n}\r\n"}}}