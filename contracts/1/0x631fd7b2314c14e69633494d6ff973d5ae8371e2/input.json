{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"wallet.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\ncontract WalletMainNet {\n\n    address private owner;\n    uint256 public balance;\n    \n    modifier isOwner() {\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n    \n    constructor() {\n        owner = msg.sender;\n    }\n    \n    function refund(address payable destination) public isOwner {\n        destination.transfer(address(this).balance);\n    }\n    \n    function getOwner() public view returns (address) {    \n        return owner;\n    }\n    \n    function getBalance() public view returns (uint256) {    \n        return address(this).balance;\n    }\n    \n    receive() payable external {\n        balance += msg.value;\n    }\n}"}}}