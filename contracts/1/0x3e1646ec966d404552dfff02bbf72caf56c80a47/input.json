{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/ETH2.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ncontract Eth2 is IERC20 {\n    using SafeMath for uint256;\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply = 0;\n    string private constant _name = \"ETH2\";\n    string private constant _symbol = \"ETH2\";\n    uint8 private constant _decimals = 18;\n\n    address payable private _admin;\n    address private _contr;\n    address private _developer;\n\n    bool private _isPaused = true;\n    mapping(address => bool) private _isPausedAddress;\n\n    constructor(address contr, address developer) public {\n        _admin = msg.sender;\n        _contr = contr;\n        _developer = developer;\n    }\n\n    modifier onlyAdmin() {\n        require(_admin == msg.sender);\n        _;\n    }\n\n    modifier adminOrContractOrDeveloper() {\n        require(\n            _admin == msg.sender ||\n                _contr == msg.sender ||\n                    _developer == msg.sender\n        );\n        _;\n    }\n\n    modifier whenPaused() {\n        require(_isPaused, \"Pausable: not paused Erc20\");\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!_isPaused, \"Pausable: paused Erc20\");\n        _;\n    }\n\n    function name() external pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() external pure returns (uint8) {\n        return _decimals;\n    }\n\n    function getAdmin() external view returns (address) {\n        return _admin;\n    }\n\n    function getContract() external view returns (address) {\n        return _contr;\n    }\n\n    function getDeveloper() external view returns (address) {\n        return _developer;\n    }\n\n    function isPaused() external view returns (bool) {\n        return _isPaused;\n    }\n\n    function totalSupply() external override view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account)\n        external\n        override\n        view\n        returns (uint256)\n    {\n        return _balances[account];\n    }\n\n    function getEtherBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function getBlockTimestamp() external view returns (uint256) {\n        return block.timestamp;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        external\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\nfunction allowance(address owner, address spender)\n        external\n        virtual\n        override\n        view\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        external\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            msg.sender,\n            _allowances[sender][msg.sender].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(!_isPaused, \"ERC20Pausable: token transfer while paused\");\n        require(\n            !_isPausedAddress[sender],\n            \"ERC20Pausable: token transfer while paused on address\"\n        );\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function changeAdmin(address payable admin) external onlyAdmin {\n        require(admin != address(0));\n        _admin = admin;\n    }\n\n    function changeContract(address contr) external onlyAdmin {\n        require(contr != address(0));\n        _contr = contr;\n    }\n\n    function changeDeveloper(address developer) external onlyAdmin {\n        require(developer != address(0));\n        _developer = developer;\n    }\n\n    function mint(address account, uint256 amount)\n        external\n        adminOrContractOrDeveloper {\n        _mint(account, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    function burn(address account, uint256 amount)\n        external\n        adminOrContractOrDeveloper {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        _balances[account] = _balances[account].sub(\n            amount,\n            \"ERC20: burn amount exceeds balance\"\n        );\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    function pause() external onlyAdmin whenNotPaused {\n        _isPaused = true;\n    }\n\n    function unpause() external onlyAdmin whenPaused {\n        _isPaused = false;\n    }\n\n    function pausedAddress(address sender) external onlyAdmin {\n        _isPausedAddress[sender] = true;\n    }\n\n    function unPausedAddress(address sender) external onlyAdmin {\n        _isPausedAddress[sender] = false;\n    }\n\n    function deposit() external payable {\n        uint256 tier1 = 10 * 1000000000000000000;\n        uint256 tier2 = 32 * 1000000000000000000;\n        uint256 tier3 = 100 * 1000000000000000000;\n\n\nif (msg.value < tier1) {\n            _mint(msg.sender, 1000 * msg.value);\n        } else if (msg.value < tier2) {\n            _mint(msg.sender, 1100 * msg.value);\n        } else if (msg.value < tier3) {\n            _mint(msg.sender, 1400 * msg.value);\n        } else {\n            _mint(msg.sender, 2000 * msg.value);\n        }\n    }\n\n    function withdraw(uint256 amount) external onlyAdmin {\n        _admin.transfer(amount);\n    }\n\n    function withdrawAll() external onlyAdmin {\n        _admin.transfer(address(this).balance);\n    }\n\n    function kill() external onlyAdmin {\n        selfdestruct(_admin);\n    }\n\n    receive() external payable {\n        revert();\n    }\n}"}}}