{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n\npragma solidity ^0.8.2;\n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/ImagineCoin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/*\n  /$$$$$$  /$$$$$$$$ /$$$$$$$$ /$$    /$$ /$$$$$$ /$$$$$$$$ /$$$$$$$\n /$$__  $$|__  $$__/| $$_____/| $$   | $$|_  $$_/| $$_____/| $$__  $$\n| $$  \\__/   | $$   | $$      | $$   | $$  | $$  | $$      | $$  \\ $$\n|  $$$$$$    | $$   | $$$$$   |  $$ / $$/  | $$  | $$$$$   | $$$$$$$/\n \\____  $$   | $$   | $$__/    \\  $$ $$/   | $$  | $$__/   | $$____/\n /$$  \\ $$   | $$   | $$        \\  $$$/    | $$  | $$      | $$\n|  $$$$$$/   | $$   | $$$$$$$$   \\  $/    /$$$$$$| $$$$$$$$| $$\n \\______/    |__/   |________/    \\_/    |______/|________/|__/\n\n\n*/\n\nimport \"./IERC20.sol\";\n\npragma solidity ^0.8.2;\n\n\ncontract ImagineCoin is IERC20 {\n  mapping(address => uint256) private _balances;\n  mapping(address => mapping(address => uint256)) private _allowances;\n\n  string private _name;\n  string private _symbol;\n  uint256 private _totalSupply;\n\n  address public owner;\n\n  uint256 constant public pricePerTokenInWei = 100000000000000;\n  uint256 constant public maxTokens = 1000000000000000000000000;\n\n  event ImagineMint(address indexed caller, uint256 amount, uint256 transactionValue);\n  event ImagineBurn(address indexed caller, uint256 amount);\n  event ImagineTransfer(address indexed caller, address indexed from, address indexed to, uint256 value);\n  event ImagineApprove(address indexed caller, address indexed spender, uint256 value);\n\n  event ProjectEvent(address indexed poster, string indexed eventType, string content);\n\n  constructor() {\n    _name = 'ImagineCoin';\n    _symbol = 'IMG';\n\n    owner = msg.sender;\n  }\n\n  // Getters\n\n  function name() public view virtual returns (string memory) {\n    return _name;\n  }\n\n  function symbol() public view virtual returns (string memory) {\n    return _symbol;\n  }\n\n  function decimals() public view virtual returns (uint8) {\n    return 18;\n  }\n\n  function totalSupply() public view virtual override returns (uint256) {\n    return _totalSupply;\n  }\n\n  // balanceOf and allowance should be ignored\n  function balanceOf(address account) public view virtual override returns (uint256) {\n    return _balances[account];\n  }\n\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\n    return _allowances[owner][spender];\n  }\n\n  // Contract events\n\n  function mint(uint256 amount) public payable returns (bool) {\n    emit ImagineMint(msg.sender, amount, msg.value);\n    payable(owner).transfer(msg.value);\n    return true;\n  }\n\n  function burn(uint256 amount) public returns (bool) {\n    emit ImagineBurn(msg.sender, amount);\n    return true;\n  }\n\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n    emit ImagineTransfer(msg.sender, msg.sender, recipient, amount);\n    return true;\n  }\n\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\n    ImagineApprove(msg.sender, spender, amount);\n    return true;\n  }\n\n  function transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    emit ImagineTransfer(msg.sender, sender, recipient, amount);\n    return true;\n  }\n\n  // Administrative Functions\n\n  function transferOwnership(address newOwner) external {\n    require(msg.sender == owner, \"Only owner can transfer ownership\");\n    owner = newOwner;\n  }\n\n  function emitProjectEvent(string memory _eventType, string memory _content) public {\n    require(msg.sender == owner, \"Only owner can emit project events\");\n    emit ProjectEvent(msg.sender, _eventType, _content);\n  }\n\n}"
    }
  }
}