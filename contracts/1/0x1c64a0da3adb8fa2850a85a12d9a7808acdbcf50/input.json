{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"EchoToken.sol":{"content":"pragma solidity ^0.4.18;\r\n\r\n\r\n\r\ncontract ERC20Basic {\r\n\r\n  function totalSupply() public view returns (uint256);  // totalSupply - 总发行量\r\n\r\n  function balanceOf(address who) public view returns (uint256);  // 余额\r\n\r\n  function transfer(address to, uint256 value) public returns (bool);  // 交易\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);  // 交易事件\r\n\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    if (a == 0) {\r\n\r\n      return 0;\r\n\r\n    }\r\n\r\n    uint256 c = a * b;\r\n\r\n    assert(c / a == b);\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n  /**\r\n\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n\r\n  */\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\r\n    uint256 c = a / b;\r\n\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n \r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    assert(b <= a);\r\n\r\n    return a - b;\r\n\r\n  }\r\n\r\n \r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    uint256 c = a + b;\r\n\r\n    assert(c >= a);\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256);  // 获取被授权令牌余额,获取 _owner 地址授权给 _spender 地址可以转移的令牌的余额\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);  // A账户-》B账户的转账\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);  // 授权，允许 _spender 地址从你的账户中转移 _value 个令牌到任何地方\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);  // 授权事件\r\n\r\n}\r\n\r\n/**\r\n\r\n* @title Basic token\r\n\r\n* @dev Basic version of StandardToken, with no allowances.\r\n\r\n*/\r\n\r\ncontract BasicToken is ERC20Basic {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances; \r\n\r\n  uint256 totalSupply_;  \r\n\r\n\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n\r\n    return totalSupply_;\r\n\r\n  }\r\n\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n\r\n    require(_to != address(0));  // 无效地址\r\n\r\n    require(_value <= balances[msg.sender]);  // 转账账户余额大于转账数目\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);  // 转账账户余额=账户余额-转账金额\r\n\r\n    balances[_to] = balances[_to].add(_value); // 接收账户的余额=原先账户余额+账金额\r\n\r\n    emit Transfer(msg.sender, _to, _value);  // 转账\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n\r\n    return balances[_owner];  // 查询合约调用者的余额\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\r\n    require(_to != address(0)); // 到达B账户的地址不能为无效地址\r\n\r\n    require(_value <= balances[_from]);  // 转账账户余额大于转账金额\r\n\r\n    require(_value <= allowed[_from][msg.sender]);  // 允许_from地址转账给 _to地址\r\n\r\n    balances[_from] = balances[_from].sub(_value); \r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);  // 允许转账的余额\r\n\r\n    emit Transfer(_from, _to, _value);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n\r\n    emit Approval(msg.sender, _spender, _value);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n\r\n    return allowed[_owner][_spender];\r\n\r\n  }\r\n\r\n  \r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n \r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n\r\n    if (_subtractedValue > oldValue) {\r\n\r\n      allowed[msg.sender][_spender] = 0;\r\n\r\n    } else {\r\n\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\r\n    }\r\n\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract EchoToken is StandardToken {\r\n\r\n    string public constant name = \"EchoToken\";\r\n\r\n    string public constant symbol = \"Echo\";\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public constant INITIAL_SUPPLY = (10 ** 9) * (10 ** uint256(decimals));\r\n\r\n    /**\r\n\r\n    * @dev Constructor that gives msg.sender all of existing tokens.\r\n\r\n    */\r\n\r\n    constructor() public {\r\n\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n\r\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n\r\n    }\r\n\r\n}"}}}