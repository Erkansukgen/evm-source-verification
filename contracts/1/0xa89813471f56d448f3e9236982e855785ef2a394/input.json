{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "LvlUpstaking.sol": {
      "content": "pragma solidity ^0.8.6;\r\n// SPDX-License-Identifier:MIT\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract stakingContract {\r\n    using SafeMath for uint256;\r\n\r\n    address public owner;\r\n    IERC20 public token1;\r\n    IERC20 public token2;\r\n\r\n    uint256 public basePercent = 10;\r\n    uint256 public percentDivider = 1000;\r\n    uint256 public minTokenForReward = 1000000000e9;\r\n    uint256 public timeStep = 24 hours;\r\n\r\n    uint256 public totalUsers;\r\n    uint256 public totalInvested;\r\n    uint256 public totalWithdrawn;\r\n    uint256 public totalDeposits;\r\n\r\n    struct Deposit {\r\n        uint256 amount;\r\n        uint256 withdrawn;\r\n        uint256 start;\r\n    }\r\n\r\n    struct User {\r\n        Deposit[] deposits;\r\n        uint256 checkpoint;\r\n    }\r\n\r\n    mapping(address => User) internal users;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    event Newbie(address user);\r\n    event NewDeposit(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n\r\n    event UnStaked(address indexed user, uint256 totalAmount);\r\n\r\n    constructor(\r\n        address _owner,\r\n        address _token1,\r\n        address _token2\r\n    ) {\r\n        owner = _owner;\r\n        token1 = IERC20(_token1);\r\n        token2 = IERC20(_token2);\r\n    }\r\n\r\n    function invest(uint256 value) public {\r\n        User storage user = users[msg.sender];\r\n\r\n        token1.transferFrom(msg.sender, address(this), value);\r\n\r\n        if (user.deposits.length == 0) {\r\n            user.checkpoint = block.timestamp;\r\n            totalUsers = totalUsers.add(1);\r\n\r\n            emit Newbie(msg.sender);\r\n        }\r\n\r\n        user.deposits.push(Deposit(value, 0, block.timestamp));\r\n        totalInvested = totalInvested.add(value);\r\n        totalDeposits = totalDeposits.add(1);\r\n\r\n        emit NewDeposit(msg.sender, value);\r\n    }\r\n\r\n    function withdraw() public {\r\n        require(\r\n            getContractBalanceToken1() > minTokenForReward,\r\n            \"You cannot withdraw below the contract balance limit\"\r\n        );\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        uint256 totalAmount;\r\n        uint256 dividends;\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            dividends = (\r\n                user.deposits[i].amount.mul(basePercent).div(percentDivider)\r\n            ).mul(block.timestamp.sub(user.deposits[i].start)).div(timeStep);\r\n\r\n            user.deposits[i].start = block.timestamp;\r\n            user.deposits[i].withdrawn = user.deposits[i].withdrawn.add(\r\n                dividends\r\n            ); // changing of storage data\r\n            totalAmount = totalAmount.add(dividends);\r\n        }\r\n\r\n        user.checkpoint = block.timestamp;\r\n\r\n        token2.transferFrom(owner, msg.sender, totalAmount);\r\n\r\n        totalWithdrawn = totalWithdrawn.add(totalAmount);\r\n\r\n        emit Withdrawn(msg.sender, totalAmount);\r\n    }\r\n\r\n    function unstake() public {\r\n        uint256 totalAmount = getUserTotalDeposits(msg.sender);\r\n\r\n        token1.transfer(msg.sender, totalAmount);\r\n\r\n        delete users[msg.sender];\r\n\r\n        emit UnStaked(msg.sender, totalAmount);\r\n    }\r\n\r\n    function getContractBalanceToken1() public view returns (uint256) {\r\n        return token1.balanceOf(address(this));\r\n    }\r\n\r\n    function getContractBalanceToken2() public view returns (uint256) {\r\n        return token2.balanceOf(address(this));\r\n    }\r\n\r\n    function getUserDividends(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        User storage user = users[userAddress];\r\n\r\n        uint256 totalAmount;\r\n        uint256 dividends;\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            dividends = (\r\n                user.deposits[i].amount.mul(basePercent).div(percentDivider)\r\n            ).mul(block.timestamp.sub(user.deposits[i].start)).div(timeStep);\r\n            totalAmount = totalAmount.add(dividends);\r\n        }\r\n\r\n        return totalAmount;\r\n    }\r\n\r\n    function isActive(address userAddress) public view returns (bool) {\r\n        User storage user = users[userAddress];\r\n\r\n        if (user.deposits.length > 0) {\r\n            if (\r\n                user.deposits[user.deposits.length - 1].withdrawn <\r\n                (user.deposits[user.deposits.length - 1].amount.mul(250)).div(\r\n                    percentDivider\r\n                )\r\n            ) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getUserDepositInfo(address userAddress, uint256 index)\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        User storage user = users[userAddress];\r\n\r\n        return (\r\n            user.deposits[index].amount,\r\n            user.deposits[index].withdrawn,\r\n            user.deposits[index].start\r\n        );\r\n    }\r\n\r\n    function getUserAmountOfDeposits(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].deposits.length;\r\n    }\r\n\r\n    function getUserTotalDeposits(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        User storage user = users[userAddress];\r\n\r\n        uint256 amount;\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            amount = amount.add(user.deposits[i].amount);\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function getUserTotalWithdrawn(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        User storage user = users[userAddress];\r\n\r\n        uint256 amount;\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            amount = amount.add(user.deposits[i].withdrawn);\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function setBasePercent(uint256 percent) external onlyOwner {\r\n        basePercent = percent;\r\n    }\r\n\r\n    function setMinTokenForReward(uint256 amount) external onlyOwner {\r\n        minTokenForReward = amount;\r\n    }\r\n\r\n    function setTimeStep(uint256 time) external onlyOwner {\r\n        timeStep = time;\r\n    }\r\n\r\n    function changeToken1(address _token) external onlyOwner {\r\n        token1 = IERC20(_token);\r\n    }\r\n\r\n    function changeToken2(address _token) external onlyOwner {\r\n        token2 = IERC20(_token);\r\n    }\r\n\r\n    function changeOwner(address _owner) external onlyOwner {\r\n        owner = _owner;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n"
    }
  }
}