{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "snapShot_aggregator.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.6;\r\n\r\n\r\n\r\n\r\n\r\ncontract UNFIAggregator  {\r\n  \r\n\r\n    string public name  = \"Aggregator UNFI\";\r\n    string public symbol  = \"aUNFI\";\r\n    uint8 private _decimals = 18 ;\r\n    GGM lvl1;\r\n    GGM lvl2;\r\n    GGM lvl3 = GGM(0xf64a670a3F1E877031e9a62f2E382E4b2035b620);\r\n    IERC20 lvl4 = IERC20(0x441761326490cACF7aF299725B6292597EE822c2);\r\n    address public _owner ;\r\n    mapping(uint =>bool) public enableVotes;\r\n    mapping (address => uint256) private _balances;\r\n    IUnifiPair unfiPair ;\r\n    uint public weightage = 10000;//100%\r\n    uint public percentage = 10000;//100%\r\n    mapping (address => mapping (address => uint256)) internal _allowed;\r\n\r\n\r\n    constructor ()  {\r\n        unfiPair = IUnifiPair(0x96351b805FB389B761c1318B43a7dC0C679BEd5E);\r\n        _owner = msg.sender;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n \r\n\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256 totalSupplyResult) {\r\n         totalSupplyResult = lvl4.totalSupply();\r\n        if(enableVotes[1] == true && address(lvl1) != address(0) ){\r\n            totalSupplyResult = totalSupplyResult + (lvl1.totalStakeAmount());\r\n        }\r\n        if(enableVotes[2] == true  && address(lvl2) != address(0)){\r\n            totalSupplyResult = totalSupplyResult + (lvl2.totalStakeAmount());    \r\n        }\r\n        if(enableVotes[3] == true  && address(lvl3) != address(0) ){\r\n            totalSupplyResult = totalSupplyResult + (lvl3.totalStakeAmount());\r\n        }\r\n        return totalSupplyResult;\r\n    }\r\n\r\n   \r\n\r\n    function balanceOf(address account) public view returns (uint256 balanceResult) {\r\n         balanceResult = lvl4.balanceOf(account );\r\n        if(enableVotes[1] == true && address(lvl1) != address(0) ){\r\n            balanceResult = balanceResult + (lvl1.userStakeAmount(account));\r\n        }\r\n        if(enableVotes[2] == true  && address(lvl2) != address(0)){\r\n            balanceResult = balanceResult + (lvl2.userStakeAmount(account));    \r\n        }\r\n        if(enableVotes[3] == true  && address(lvl3) != address(0) ){\r\n            balanceResult = balanceResult + (lvl3.userStakeAmount(account));\r\n        }\r\n        if(address(unfiPair) != address(0)){\r\n            balanceResult = balanceResult + this.poolLiquidity(  account) ;\r\n        }\r\n        return balanceResult;\r\n    \r\n    }\r\n  function updateWeightage ( uint value )public {\r\n      require(_owner == msg.sender,\"Unauthorized\");\r\n      weightage = value;\r\n }\r\n \r\n function poolLiquidity( address user) public view returns (uint value){\r\n     uint liquidityToken = unfiPair.balanceOf(user);\r\n    (uint reserve0,,) = unfiPair.getReserves();     \r\n     uint _totalLiquiditySupply = unfiPair.totalSupply();\r\n     value = (liquidityToken * (reserve0) * (weightage))/(percentage*(_totalLiquiditySupply));\r\n\r\n }\r\n   \r\n  function updatGGMDetals (uint GGMLevel, bool value , address GGMAddress)public {\r\n      require(_owner == msg.sender,\"Unauthorized\");\r\n      if(GGMLevel == 1){\r\n          enableVotes[1] = value;\r\n           lvl1 = GGM(GGMAddress);\r\n      }\r\n\r\n      if(GGMLevel == 2){\r\n           enableVotes[2] = value; \r\n            lvl2 = GGM(GGMAddress);\r\n      }\r\n      \r\n      if(GGMLevel == 3){\r\n          enableVotes[3] = value;\r\n            lvl3 = GGM(GGMAddress);\r\n      }\r\n      \r\n      if(GGMLevel == 4){\r\n          enableVotes[4] = value;  \r\n          lvl4 = IERC20(GGMAddress);\r\n      }\r\n  }\r\n    function transferOwnerShip(address to) public returns (bool) {\r\n         require(_owner == msg.sender,\"Unauthorized\");\r\n         _owner = to;\r\n        return true;\r\n    }\r\n\r\n\r\n  \r\n\r\n  \r\n\r\n\r\n\r\n   \r\n\r\n}\r\n\r\npragma solidity^0.8.6;\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function mint(address account, uint amount) external;\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n}\r\n\r\npragma solidity ^0.8.6;\r\ninterface IUnifiPair {\r\n    \r\n    function getReserves() external view returns(uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) ;\r\n    function totalSupply() external view returns(uint256);\r\n    function balanceOf(address owner) external view returns(uint256);\r\n\r\n    function token0() external view returns(address);\r\n\r\n    function token1() external view returns(address);\r\n}\r\n\r\npragma solidity ^0.8.6;\r\n\r\n\r\ninterface GGM {\r\n\r\n    function totalStakeAmount() external view returns (uint256);\r\n    function userStakeAmount(address account) external view returns (uint256);\r\n\r\n\r\n\r\n}\r\n\r\n"
    }
  }
}