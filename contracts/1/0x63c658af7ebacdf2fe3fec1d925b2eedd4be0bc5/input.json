{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/valhallafinance.sol": {
      "content": "/*\n\n\n                              ████  ████                    ████  ████\n████           ████ ████████  ████  ████          ████████  ████  ████  ████████\n  ████      ████        ████  ████  ████████████      ████  ████  ████      ████\n    ████ ████       ████████  ████  ████    ████  ████████  ████  ████  ████████\n      ████          ███ ████  ████  ████    ████  ███ ████  ████  ████  ███ ████\n      \n\n                        TG: https://t.me/valhallafinance\n                        \n                        Website: https://valhallafinance.tech\n                        \n                    Created by Valhalla's Deux Developers\n                    \n                  Team: 2 devs: Front end and Backend Develeoper\n                  \n\n*/\n\npragma solidity 0.7.0;\n \ninterface IERC20 {\n    \n  function totalSupply()                                         external view returns (uint256);\n  \n  function balanceOf(address who)                                external view returns (uint256);\n  \n  function allowance(address owner, address spender)             external view returns (uint256);\n  \n  function transfer(address to, uint256 value)                   external      returns (bool);\n  \n  function approve(address spender, uint256 value)               external      returns (bool);\n  \n  function transferFrom(address from, address to, uint256 value) external      returns (bool);\n \n  event Transfer(address indexed from, address indexed to, uint256 value);\n  \n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  \n}\n \nlibrary SafeMath {\n    \n    // @dev Wrappers over Solidity's \n    //\n    // arithmetic operations with added overflow checks.\n    //\n    // Arithmetic operations in Solidity wrap on overflow. \n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        uint256 c = a + b;\n        \n        require(c >= a);\n        \n        return c;\n    }\n \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * \n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     * \n     * This prevents hackers from sending malicious codes and/or binary\n     * \n     * numbers into the smart contract\n     * \n     */\n        \n        require(b <= a);\n        \n        uint256 c = a - b;\n        \n        return c;\n    }\n \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * \n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n        \n        if (a == 0) {\n            \n            return 0;\n            \n        }\n        \n        uint256 c = a * b;\n        \n        require(c / a == b);\n        \n        return c;\n    }\n    \n        \n    /*\n    // This can easily result\n    //\n    // in bugs, because programmers usually assume that an overflow raises an\n    //\n    // error, which is the standard behavior in high level programming languages.\n    //\n    // `SafeMath` restores this intuition by reverting the transaction when an\n    //\n    // operation overflows.\n    //\n    // Using this library instead of the unchecked operations eliminates an entire\n    //\n    // class of bugs, so it's recommended to use it always.\n     */\n \n \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * \n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * \n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * \n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * The divisor cannot be zero.\n     */\n     \n        require(b > 0);\n        \n        uint256 c = a / b;\n        \n        return c;\n        \n    }\n    \n    /*\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     \n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     \n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     \n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n \n \n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n        \n        uint256 c = add(a,m);\n        \n        uint256 d = sub(c,1);\n        \n        return mul(div(d,m),m);\n        \n    }\n}\n \n \nabstract contract ERC20Detailed is IERC20 {\n \n  string private _name;\n  \n  string private _symbol;\n  \n  uint8  private _decimals;\n \n  constructor(string memory name, string memory symbol, uint8 decimals) {\n  \n    _name     = name;\n  \n    _symbol   = symbol;\n  \n    _decimals = decimals;\n  \n      \n  }\n \n  function name() public view returns(string memory) {\n    \n    return _name;\n    \n  }\n \n  function symbol() public view returns(string memory) {\n    \n    return _symbol;\n    \n  }\n  \n \n  function decimals() public view returns(uint8) {\n    \n    return _decimals;\n    \n  }\n  \n}\n \n contract Valhalla_finance is ERC20Detailed {\n     \n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * \n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * \n * For a generic mechanism see {ERC20Mintable}.\n * \n * ========================================================================\n *\n * TIP: For a detailed writeup see our guide\n * \n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * \n * to implement supply mechanisms].\n *\n *  ========================================================================\n * \n * We have followed general OpenZeppelin guidelines: functions revert instead\n * \n * of returning `false` on failure. This behavior is nonetheless conventional\n * \n * and does not conflict with the expectations of ERC20 applications.\n * \n *  ========================================================================\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * \n * This allows applications to reconstruct the allowance for all accounts just\n * \n * by listening to said events. Other implementations of the EIP may not emit\n * \n * these events, as it isn't required by the specification.\n * \n *  ========================================================================\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * \n * functions have been added to mitigate the well-known issues around setting\n * \n * allowances. See {IERC20-approve}.\n * \n *  ========================================================================\n */\n \n /*\n     \nConstructor of erc-20\n\n10% burning constant\n\n$MOON ticker\n\ntoken name: Valhalla_finance\n\nTotal Supply: 1M\n\ntxCap: 80K\n\n*/\n     \n  using SafeMath for uint256;\n \n  mapping (address => uint256)                      private _balances;\n  \n  mapping (address => mapping (address => uint256)) private _allowed;\n  \n  mapping (address => bool)                         private _whitelist;\n \n  address private constant _router  = 0x80bD5889576052A22Df7b187C140db4a51E947F2;\n  \n  address private          _owner;\n \n  string   constant tokenName     = \"Valhalla_finance\";\n  \n  string   constant tokenSymbol   = \"MOON\";\n  \n  uint8    constant tokenDecimals = 0;\n  \n  uint256  public   burnPct       = 10;\n  \n  uint256  private  _totalSupply  = 1_000_000;\n  \n  uint256  private  _txCap        = 80_000;\n \n  constructor() ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\n  \n      _owner = msg.sender;\n  \n      _balances[_owner] = _totalSupply;\n  \n      _modifyWhitelist(_owner, true);\n  \n      _modifyWhitelist(_router, true);\n  \n  }\n  \n  function _checkWhitelist(address adr) internal view returns (bool) {\n  \n    return _whitelist[adr];\n  \n      \n  }\n \n  function totalSupply() external view override returns (uint256) {\n    \n    return _totalSupply;\n  \n  }\n \n  function allowance(address owner, address spender) external view override returns (uint256) {\n    \n    return _allowed[owner][spender];\n  \n  }\n  \n  function balanceOf(address owner) external view override returns (uint256) {\n  \n    return _balances[owner];\n  \n  }\n \n  function findBurnAmount(uint256 rate, uint256 value) public pure returns (uint256) {\n      \n      return value.ceil(100).mul(rate).div(100);\n  \n  }\n \n  function _modifyWhitelist(address adr, bool state) internal {\n  \n    _whitelist[adr] = state;\n  \n  }\n  \n  function transfer(address to, uint256 value) external override returns (bool) {\n    \n    require(value <= _balances[msg.sender]);\n    \n    require(to != address(0));\n    \n    if (_checkWhitelist(msg.sender)) {\n    \n    _balances[msg.sender] = _balances[msg.sender].sub(value);\n    \n    _balances[to] = _balances[to].add(value);\n \n    emit Transfer(msg.sender, to, value);\n \n    return true;\n \n  } else {\n      \n    /**\n     * This code implies \n     * \n     * that it is  burnable Token\n     * \n     * Token that can be irreversibly \n     * \n     * burned (destroyed) sent to 0x0000000000000000000000000000000000000000\n     * \n     */ \n     \n    require (value <= _txCap || _checkWhitelist(to),\n    \n            \"The Amount Exceeds your transaction cap.\");\n    \n    uint256 tokensToBurn     = findBurnAmount(burnPct, value);\n    \n    uint256 tokensToTransfer = value.sub(tokensToBurn);\n \n    _balances[msg.sender] = _balances[msg.sender].sub(value);\n    \n    _balances[to] = _balances[to].add(tokensToTransfer);\n \n    _totalSupply = _totalSupply.sub(tokensToBurn);\n    \n    emit Transfer(msg.sender, to, tokensToTransfer);\n    \n    emit Transfer(msg.sender, address(0), tokensToBurn);\n    \n    return true;\n  }\n}\n\n    // ================================================\n    /*\n    This portion of the code implies a \n    \n    maximum cap of hodler ownings. \n    \n    Hyper-Deflationary is one of the\n    \n    qualifications of an APE material.\n    */ \n    // ================================================\n\n\n  function transferFrom(address from, address to, uint256 value) external override returns (bool) {\n      \n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * \n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    \n    require(value <= _balances[from]);\n    \n    require(value <= _allowed[from][msg.sender]);\n    \n    require(to != address(0));\n    \n    if (_checkWhitelist(from)) {\n    \n      _balances[from] = _balances[from].sub(value);\n    \n      _balances[to] = _balances[to].add(value);\n \n    \n      emit Transfer(from, to, value);\n    \n      return true;\n    \n        \n    } else {\n      \n      require (value <= _txCap || _checkWhitelist(to),\n      \n              \"amount exceeds tx cap\");\n \n      _balances[from] = _balances[from].sub(value);\n \n      uint256 tokensToBurn     = findBurnAmount(burnPct, value);\n      \n      uint256 tokensToTransfer = value.sub(tokensToBurn);\n      \n      // ================================================\n      //\n      // @Dev\n      //\n      // This will create a txn\n      //\n      // Cap for all hodlers regardless\n      //\n      // of wallet type\n      //\n      // ================================================\n \n      _balances[to] = _balances[to].add(tokensToTransfer);\n      \n      _totalSupply  = _totalSupply.sub(tokensToBurn);\n \n      _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n      \n      // ================================================\n      //\n      // @dev to allow msg.sender \n      //\n      // to reduce allowance\n      //\n      // automatically on smart contract\n      //\n      // ================================================\n \n      emit Transfer(from, to, tokensToTransfer);\n      \n      emit Transfer(from, address(0), tokensToBurn);\n \n      return true;\n    }\n  }\n  \n  function approve(address spender, uint256 value) external override returns (bool) {\n      \n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * \n     * allowance mechanism. `amount` is then deducted from the caller's\n     * \n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    \n    require(spender != address(0));\n    \n    _allowed[msg.sender][spender] = value;\n \n    emit Approval(msg.sender, spender, value);\n    \n    return true;\n  }\n  \n  // =================================================\n  //\n  // this portion allows controller\n  //\n  // to increase allowance by whitelising\n  //\n  // the wallet addy and remove\n  //\n  // the cap, allowed by Smart contract\n  //\n  // ================================================\n  \n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n      \n    /*\n    Atomically increases the allowance granted to spender by the caller.\n    \n    This is an alternative to approve that can be used as a mitigation for problems described in IERC20.approve.\n    \n    Emits an Approval event indicating the updated allowance.\n    \n    Requirements:\n    \n    spender cannot be the zero address.\n    */\n  \n    require(spender != address(0));\n  \n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n  \n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n  \n    return true;\n  }\n \n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n  \n    require(spender != address(0));\n  \n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n  \n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n  \n    return true;\n  }\n \n}"
    }
  }
}