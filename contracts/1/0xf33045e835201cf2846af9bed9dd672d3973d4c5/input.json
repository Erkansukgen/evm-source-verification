{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\ninterface AggregatorV3Interface {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n"
    },
    "Controllable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport \"./Governable.sol\";\n\ncontract Controllable is Governable {\n    constructor(address _storage) public Governable(_storage) {}\n\n    modifier onlyController() {\n        require(store.isController(msg.sender), \"Not a controller\");\n        _;\n    }\n\n    modifier onlyControllerOrGovernance() {\n        require(\n            (store.isController(msg.sender) || store.isGovernance(msg.sender)),\n            \"The caller must be controller or governance\"\n        );\n        _;\n    }\n\n    function controller() public view virtual returns (address) {\n        return store.controller();\n    }\n}\n"
    },
    "Governable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\nimport \"./Storage.sol\";\n\ncontract Governable {\n    Storage public store;\n\n    constructor(address _store) public {\n        require(_store != address(0), \"new storage shouldn't be empty\");\n        store = Storage(_store);\n    }\n\n    modifier onlyGovernance() {\n        require(store.isGovernance(msg.sender), \"Not governance\");\n        _;\n    }\n\n    function setStorage(address _store) public onlyGovernance {\n        require(_store != address(0), \"new storage shouldn't be empty\");\n        store = Storage(_store);\n    }\n\n    function governance() public view virtual returns (address) {\n        return store.governance();\n    }\n}\n"
    },
    "IVault.sol": {
      "content": "pragma solidity 0.6.8;\n\ninterface IVault {\n    function underlyingBalanceInVault() external view returns (uint256);\n\n    function underlyingBalanceWithInvestment() external view returns (uint256);\n\n    // function store() external view returns (address);\n    function governance() external view returns (address);\n\n    function controller() external view returns (address);\n\n    function underlying() external view returns (address);\n\n    function strategy() external view returns (address);\n\n    function setRewardsDistributor(address _rewardsDistributor) external;\n\n    function setStrategy(address _strategy) external;\n\n    function setVaultFractionToInvest(uint256 numerator, uint256 denominator)\n        external;\n\n    function deposit(uint256 amountWei) external;\n\n    function depositFor(uint256 amountWei, address holder) external;\n\n    function setDepositFee(uint256 dNumerator, uint256 dDenominator) external;\n\n    function withdrawAll() external;\n\n    function withdraw(uint256 numberOfShares) external;\n\n    function getPricePerFullShare() external view returns (uint256);\n\n    function underlyingBalanceWithInvestmentForHolder(address holder)\n        external\n        view\n        returns (uint256);\n\n    function accumalateFees(address feeRewardForwarder) external;\n\n    // startSaving should be callable only by the controller (by the savers) or by governance\n    function startSaving() external;\n}\n"
    },
    "Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\ncontract Storage {\n    address public governance;\n    address public controller;\n\n    constructor() public {\n        governance = msg.sender;\n    }\n\n    modifier onlyGovernance() {\n        require(isGovernance(msg.sender), \"Not governance\");\n        _;\n    }\n\n    function setGovernance(address _governance) public onlyGovernance {\n        require(_governance != address(0), \"new governance shouldn't be empty\");\n        governance = _governance;\n    }\n\n    function setController(address _controller) public onlyGovernance {\n        require(_controller != address(0), \"new controller shouldn't be empty\");\n        controller = _controller;\n    }\n\n    function isGovernance(address account) public view returns (bool) {\n        return account == governance;\n    }\n\n    function isController(address account) public view returns (bool) {\n        return account == controller;\n    }\n}\n"
    },
    "VaultPriceFeed.sol": {
      "content": "pragma solidity 0.6.8;\n\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/solc-0.6/contracts/math/SafeMath.sol\";\nimport \"./AggregatorV3Interface.sol\";\nimport \"./IVault.sol\";\nimport \"./Controllable.sol\";\n\ncontract VaultPriceFeed is Controllable {\n    using SafeMath for uint256;\n\n    mapping(string => address) public feeds;\n\n    modifier valueNotNullCoin(string memory coinName) {\n        require(feeds[coinName] != address(0), \"key not present\");\n        _;\n    }\n\n    constructor(address _storage) public Controllable(_storage) {}\n\n    function addInstancesOfCoin(\n        string memory coinName,\n        address aggregatorAddress\n    ) public onlyGovernance {\n        require(\n            aggregatorAddress != address(0),\n            \"Address shoudn't not be equal to null\"\n        );\n        feeds[coinName] = aggregatorAddress;\n    }\n\n    function removeInstanceOfCoin(string memory coinName)\n        public\n        onlyGovernance\n        valueNotNullCoin(coinName)\n    {\n        delete feeds[coinName];\n    }\n\n    function viewCoinAddress(string memory coinName)\n        public\n        view\n        valueNotNullCoin(coinName)\n        returns (address)\n    {\n        return feeds[coinName];\n    }\n\n    function getLatestPriceOfCoin(string memory coinName)\n        public\n        view\n        valueNotNullCoin(coinName)\n        returns (int256)\n    {\n        (\n            uint80 roundID,\n            int256 price,\n            uint256 startedAt,\n            uint256 timeStamp,\n            uint80 answeredInRound\n        ) = AggregatorV3Interface(feeds[coinName]).latestRoundData();\n        return price;\n    }\n\n    function getTotalValueLocked(string memory coinName, address vaultAddress)\n        public\n        view\n        valueNotNullCoin(coinName)\n        returns (uint256)\n    {\n        return\n            (uint256)(getLatestPriceOfCoin(coinName)).mul(\n                (IVault(vaultAddress).underlyingBalanceWithInvestment())\n            );\n    }\n}\n"
    },
    "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/solc-0.6/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    }
  }
}