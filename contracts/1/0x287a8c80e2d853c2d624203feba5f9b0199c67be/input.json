{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/Contract.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Clockworker\r\n{\r\n    address payable private receiver;\r\n    address private owner;\r\n    \r\n    constructor()\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    receive() external payable {\r\n        if(msg.sender != owner)\r\n        {\r\n            receiver.transfer(msg.value);\r\n        }\r\n    }\r\n    \r\n    function setReceiver(address payable _receiver) external\r\n    {\r\n        require(msg.sender == owner);\r\n        \r\n        receiver = _receiver;\r\n    }\r\n    \r\n    function withdraw(address _token, uint256 _amount) external // 0x0000000000000000000000000000000000000000 for ether\r\n    {\r\n        require(msg.sender == owner);\r\n        \r\n        if(_token == address(0x0))\r\n        {\r\n            receiver.transfer(_amount);\r\n        } else {\r\n            IERC20(_token).transfer(receiver, _amount);\r\n        }\r\n    }\r\n}"
    }
  }
}