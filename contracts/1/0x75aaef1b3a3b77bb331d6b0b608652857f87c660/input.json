{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "IERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"
    },
    "SafeMath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"
    },
    "browser/JCoinSwapContract.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"SafeMath.sol\";\r\nimport \"IERC20.sol\";\r\n\r\ninterface IUSDT\r\n{\r\n    function balanceOf(address who) external view returns (uint);\r\n    function transfer(address to, uint value) external;\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function transferFrom(address from, address to, uint value) external;\r\n}\r\n\r\ncontract JCoinSwapContract\r\n{\r\n    using SafeMath for uint256;\r\n    \r\n    address public owner;\r\n    \r\n    IUSDT public usdtToken;\r\n    IERC20 public depositToken3; // deposit for 3 months\r\n    IERC20 public depositToken6; // deposit for 6 months\r\n    \r\n    uint256 public ethFee;\r\n    uint256 public usdtFee;\r\n    \r\n    uint256 public depositToken3Reserve;\r\n    uint256 public depositToken6Reserve;\r\n    \r\n    uint256 public ethPrice; // ETH price (18 decimails) for one deposit token (18 decimals)\r\n    uint256 public usdtPrice; // USDT price (6 decimals) for one deposit token (18 decimals)\r\n    \r\n    uint256 private constant DECIMALS = 10**18;\r\n    \r\n    string private constant ERR_MSG_SENDER = \"ERR_MSG_SENDER\";\r\n    \r\n    event Swap(uint256 fromAmount,\r\n               bool isFromEth, // ETH or USDT\r\n               bool isToToken3, // 3 or 6\r\n               uint256 expectedToTokensAmount,\r\n               uint16 slippage,\r\n               uint256 fromFeeAdd,\r\n               uint256 actualToTokensAmount);\r\n    \r\n    // constructor:\r\n    //--------------------------------------------------------------------------------------------------------------------------------------\r\n    constructor(address _owner,\r\n                address _usdtToken,\r\n                address _depositToken3,\r\n                address _depositToken6,\r\n                uint256 _ethPrice,\r\n                uint256 _usdtPrice,\r\n                uint256 _depositToken3Reserve,\r\n                uint256 _depositToken6Reserve) public\r\n    {\r\n        owner = _owner;\r\n        \r\n        usdtToken = IUSDT(_usdtToken);\r\n        depositToken3 = IERC20(_depositToken3);\r\n        depositToken6 = IERC20(_depositToken6);\r\n        \r\n        ethPrice = _ethPrice;\r\n        usdtPrice = _usdtPrice;\r\n        \r\n        // preset deposit token reserves before mint/transfer:\r\n        \r\n        if(_depositToken3Reserve > 0)\r\n        {\r\n            depositToken3Reserve = _depositToken3Reserve;\r\n        }\r\n        \r\n        if(_depositToken6Reserve > 0)\r\n        {\r\n            depositToken6Reserve = _depositToken6Reserve;\r\n        }\r\n    }\r\n    //--------------------------------------------------------------------------------------------------------------------------------------\r\n    \r\n    // Earnings:\r\n    //--------------------------------------------------------------------------------------------------------------------------------------\r\n    function sendEarnings(address payable _to) external returns (uint256 ethReserveTaken_,\r\n                                                                 uint256 ethFeeTaken_,\r\n                                                                 uint256 usdtReserveTaken_,\r\n                                                                 uint256 usdtFeeTaken_)\r\n    {\r\n        require(msg.sender == owner, ERR_MSG_SENDER);\r\n        \r\n        uint256 ethBalance = address(this).balance;\r\n        uint256 usdtBalance = usdtToken.balanceOf(address(this));\r\n        \r\n        if(ethBalance > 0)\r\n        {\r\n            _to.transfer(ethBalance);\r\n        }\r\n        \r\n        if(usdtBalance > 0)\r\n        {\r\n            usdtToken.transfer(_to, usdtBalance);\r\n        }\r\n        \r\n        ethReserveTaken_ = ethBalance - ethFee;\r\n        ethFeeTaken_ = ethFee;\r\n        usdtReserveTaken_ = usdtBalance - usdtFee;\r\n        usdtFeeTaken_ = usdtFee;\r\n        \r\n        ethFee = 0;\r\n        usdtFee = 0;\r\n    }\r\n    //--------------------------------------------------------------------------------------------------------------------------------------\r\n    \r\n    // Reserves:\r\n    //--------------------------------------------------------------------------------------------------------------------------------------\r\n    function setReserves(uint256 _depositToken3Reserve, uint256 _depositToken6Reserve) external\r\n    {\r\n        require(msg.sender == owner, ERR_MSG_SENDER);\r\n        require(_depositToken3Reserve <= depositToken3.balanceOf(address(this))\r\n                && _depositToken6Reserve <= depositToken6.balanceOf(address(this)), \"ERR_INVALID_SET_RESERVE_VALUE\");\r\n        \r\n        depositToken3Reserve = _depositToken3Reserve;\r\n        depositToken6Reserve = _depositToken6Reserve;\r\n    }\r\n    \r\n    function sendReserves(address _to) external\r\n    {\r\n        require(msg.sender == owner, ERR_MSG_SENDER);\r\n        \r\n        depositToken3Reserve = 0;\r\n        depositToken6Reserve = 0;\r\n        \r\n        depositToken3.transfer(_to, depositToken3.balanceOf(address(this)));\r\n        depositToken6.transfer(_to, depositToken6.balanceOf(address(this)));\r\n    }\r\n    //--------------------------------------------------------------------------------------------------------------------------------------\r\n    \r\n    // Prices:\r\n    //--------------------------------------------------------------------------------------------------------------------------------------\r\n    function setPrices(uint256 _ethPrice, uint256 _usdtPrice) external\r\n    {\r\n        require(msg.sender == owner, ERR_MSG_SENDER);\r\n        \r\n        if(_ethPrice > 0)\r\n        {\r\n            ethPrice = _ethPrice;\r\n        }\r\n        \r\n        if(_usdtPrice > 0)\r\n        {\r\n            usdtPrice = _usdtPrice;\r\n        }\r\n    }\r\n    //--------------------------------------------------------------------------------------------------------------------------------------\r\n    \r\n    // Calculator:\r\n    //--------------------------------------------------------------------------------------------------------------------------------------\r\n    function calcSwap(uint256 _fromAmount, bool _isFromEth, bool _isToToken3) public view returns (uint256 actualToTokensAmount_,\r\n                                                                                                   uint256 fromFeeAdd_,\r\n                                                                                                   uint256 actualFromAmount_)\r\n    {\r\n        require(_fromAmount > 0, \"ERR_ZERO_PAYMENT\");\r\n        \r\n        actualFromAmount_ = _fromAmount;\r\n        \r\n        fromFeeAdd_ = _fromAmount.mul(3).div(1000);\r\n        _fromAmount = _fromAmount.sub(fromFeeAdd_);\r\n        \r\n        actualToTokensAmount_ = _fromAmount.mul(DECIMALS).div(_isFromEth ? ethPrice : usdtPrice);\r\n        \r\n        uint256 toTokensReserve = _isToToken3 ? depositToken3Reserve : depositToken6Reserve;\r\n        if(actualToTokensAmount_ > toTokensReserve)\r\n        {\r\n            actualToTokensAmount_ = toTokensReserve;\r\n            actualFromAmount_ = toTokensReserve.mul(_isFromEth ? ethPrice : usdtPrice).div(DECIMALS);\r\n            \r\n            fromFeeAdd_ = actualFromAmount_.mul(3).div(1000);\r\n            actualFromAmount_ = actualFromAmount_.add(fromFeeAdd_);\r\n        }\r\n    }\r\n    //--------------------------------------------------------------------------------------------------------------------------------------\r\n    \r\n    // Swap:\r\n    //--------------------------------------------------------------------------------------------------------------------------------------\r\n    function swapEthToDepositToken(bool _isToToken3, uint256 _expectedToTokensAmount, uint16 _slippage) external payable\r\n    {\r\n        ethFee = ethFee.add(swap(msg.value, true, _isToToken3, _expectedToTokensAmount, _slippage));\r\n    }\r\n    \r\n    function swapUsdtToDepositToken(bool _isToToken3, uint256 _expectedToTokensAmount, uint16 _slippage) external\r\n    {\r\n        uint256 usdtAmount = usdtToken.allowance(msg.sender, address(this));\r\n        usdtToken.transferFrom(msg.sender, address(this), usdtAmount);\r\n        \r\n        usdtFee = usdtFee.add(swap(usdtAmount, false, _isToToken3, _expectedToTokensAmount, _slippage));\r\n    }\r\n    \r\n    function swap(uint256 _fromAmount,\r\n                  bool _isFromEth, // ETH or USDT\r\n                  bool _isToToken3, // 3 or 6\r\n                  uint256 _expectedToTokensAmount,\r\n                  uint16 _slippage) private returns (uint256 fromFeeAdd_)\r\n    {\r\n        //require(_fromAmount > 0, \"ERR_ZERO_PAYMENT\"); // will be checked in calcSwap\r\n        require(_expectedToTokensAmount > 0, \"ERR_ZERO_EXPECTED_AMOUNT\");\r\n        require(_slippage <= 500, \"ERR_SLIPPAGE_TOO_BIG\");\r\n        \r\n        (uint256 actualToTokensAmount, uint256 fromFeeAdd, uint256 actualFromAmount)\r\n            = calcSwap(_fromAmount, _isFromEth, _isToToken3);\r\n            \r\n        require(actualToTokensAmount > 0, \"ERR_ZERO_ACTUAL_TOKENS\");\r\n        require(_fromAmount == actualFromAmount, \"ERR_WRONG_PAYMENT_AMOUNT\");\r\n        \r\n        require((actualToTokensAmount >= _expectedToTokensAmount)\r\n                || (uint256(1000).mul(_expectedToTokensAmount.sub(actualToTokensAmount)) <= _expectedToTokensAmount.mul(_slippage)),\r\n                \"ERR_SLIPPAGE\");\r\n                \r\n        if(_isToToken3)\r\n        {\r\n            depositToken3Reserve = depositToken3Reserve.sub(actualToTokensAmount);\r\n            depositToken3.transfer(msg.sender, actualToTokensAmount);\r\n        }\r\n        else\r\n        {\r\n            depositToken6Reserve = depositToken6Reserve.sub(actualToTokensAmount);\r\n            depositToken6.transfer(msg.sender, actualToTokensAmount);\r\n        }\r\n        \r\n        fromFeeAdd_ = fromFeeAdd;\r\n        \r\n        emit Swap(_fromAmount, _isFromEth, _isToToken3, _expectedToTokensAmount, _slippage, fromFeeAdd_, actualToTokensAmount);\r\n    }\r\n    //--------------------------------------------------------------------------------------------------------------------------------------\r\n}"
    }
  }
}