{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "SAUS.sol": {
      "content": "pragma solidity ^0.4.24;\r\n\r\n// Sauce SToken Contract\r\n//\r\n// Symbol        : SAUS\r\n// Name          : Sauce SToken\r\n// Total supply  : 111,212,272\r\n// Decimals      : 5\r\n// Owner Account : 0x6D92045687E5A6c9798184Da3392466633B5380E\r\n//\r\n// (c) by Adam Pontoni 2020 - MIT Licence.\r\n\r\n\r\n    //  SafeMatch Check  //\r\n    \r\ncontract SafeMath {\r\n\r\n    function safeAdd(uint256 a, uint256 b) public pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) public pure returns (uint256 c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function safeMul(uint256 a, uint256 b) public pure returns (uint256 c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b) public pure returns (uint256 c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n    //  Standard ERC20Interface  //\r\n    \r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address tokenOwner) public constant returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n    function approve(address spender, uint256 tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\n\r\n    //  Receive approval and execute function in one call  //\r\n    //  Borrowed from MiniMeToken                          //\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n    //  Token Declarations  //\r\n    \r\ncontract SAUS is ERC20Interface, SafeMath {\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint256 public _totalSupply;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n\r\n    \r\n    //  Constructor  //\r\n    \r\n    constructor() public {\r\n        symbol = \"SAUS\";\r\n        name = \"Sauce SToken\";\r\n        decimals = 5;\r\n        _totalSupply = 11121227200000;\r\n        balances[0x6D92045687E5A6c9798184Da3392466633B5380E] = _totalSupply;\r\n        emit Transfer(address(0), 0x6D92045687E5A6c9798184Da3392466633B5380E, _totalSupply);\r\n    }\r\n\r\n\r\n   \r\n    //  Total supply  //\r\n    \r\n    function totalSupply() public constant returns (uint256) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n\r\n\r\n \r\n    //  Get the token balance for account tokenOwner  //\r\n  \r\n    function balanceOf(address tokenOwner) public constant returns (uint256 balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n   \r\n    //  Transfer the balance from Owner account to to account   //\r\n    //  Owner account must have sufficient balance to transfer  //\r\n    //  0 value transfers are allowed                           //\r\n  \r\n    function transfer(address to, uint256 tokens) public returns (bool success) {\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    \r\n    //  Token owner can approve for spender to transferFrom() tokens from Owner account //\r\n\r\n    function approve(address spender, uint256 tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    //  Transfers tokens from the \"from\" account to the \"to\" account  //\r\n   \r\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success) {\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    //  Returns the amount of tokens approved that are transferrable to spender  //\r\n \r\n    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n    \r\n    // Token Owner approves transferFrom() then receiveApproval() is executed  // \r\n    \r\n    function approveAndCall(address spender, uint256 tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n\r\n\r\n    \r\n    //  ETH Fallback function\r\n    \r\n    function () public payable {\r\n        revert();\r\n    }\r\n}"
    }
  }
}