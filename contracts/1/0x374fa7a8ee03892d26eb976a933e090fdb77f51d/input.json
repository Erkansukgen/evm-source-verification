{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/tests/DotPublicSale.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/Pausable.sol\";\nimport \"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/SafeMath.sol\";\nimport \"https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/feature/dot-token-v2/IDotTokenContract.sol\";\n\n/**\n * @title PublicSaleContract\n * @author DefiOfThrones (https://github.com/DefiOfThrones/DOTTokenContract)\n */\ncontract DotPublicSale is Pausable {\n\n  using SafeMath for uint256;\n\n  uint256 public tokenPurchased;\n  uint256 public contributors;\n\n\n  uint256 public constant BASE_PRICE_IN_WEI = 105882000000000;\n\n  bool public isWhitelistEnabled = true;\n  uint256 public minWeiPurchasable = 500000000000000000;\n  uint256 public maxWeiPurchasable = 5000000000000000000;\n  mapping (address=>address) public whitelistedAddresses;\n  mapping (address=>bool) public salesDonePerUser;\n  address[] public whitelistedAddressesList;\n  IDotTokenContract private token;\n\n  uint256 public tokenCap;\n  bool public started = true;\n\n\n  constructor(address tokenAddress, uint256 cap) public {\n    token = IDotTokenContract(tokenAddress);\n    tokenCap = cap;\n  }\n\n  /**\n   * High level token purchase function\n   */\n  receive() external payable {\n    buyTokens();\n  }\n\n    /**\n   * Low level token purchase function\n   */\n    function buyTokens() public payable validPurchase{\n        salesDonePerUser[msg.sender] = true;\n        \n        uint256 tokenCount = msg.value/BASE_PRICE_IN_WEI;\n\n        tokenPurchased = tokenPurchased.add(tokenCount);\n        \n        require(tokenPurchased <= tokenCap);\n    \n        contributors = contributors.add(1);\n    \n        forwardFunds();\n        \n        token.transfer(msg.sender, (tokenCount.mul(10**18)));\n    }\n    \n    modifier validPurchase() {\n        require(started);\n        require(msg.value >= minWeiPurchasable);\n        require(msg.value <= maxWeiPurchasable);\n        require(!isWhitelistEnabled || whitelistedAddresses[msg.sender] == msg.sender);\n        require(salesDonePerUser[msg.sender] == false);\n        _;\n    }\n\n  /**\n  * Forwards funds to the tokensale wallet\n  */\n  function forwardFunds() internal {\n    address payable owner = payable(address(owner()));\n    owner.transfer(msg.value);\n  }\n\n    function isContract(address _addr) view internal returns(bool) {\n        uint size;\n        /*if (_addr == 0)\n          return false;*/\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size>0;\n    }\n\n    function enableWhitelistVerification() public onlyOwner {\n        isWhitelistEnabled = true;\n    }\n    \n    function disableWhitelistVerification() public onlyOwner {\n        isWhitelistEnabled = false;\n    }\n    \n    function changeMinWeiPurchasable(uint256 value) public onlyOwner {\n        minWeiPurchasable = value;\n    }\n    \n    function changeMaxWeiPurchasable(uint256 value) public onlyOwner {\n        maxWeiPurchasable = value;\n    }\n    \n    function changeStartedState(bool value) public onlyOwner {\n        started = value;\n    }\n\n    function addToWhitelist(address sender) public onlyOwner {\n        addAddressToWhitelist(sender);\n    }\n    \n    function addAddressToWhitelist(address sender) private onlyOwner\n    {\n        require(!isAddressWhitelisted(sender));\n\n        whitelistedAddresses[sender] = sender;\n        whitelistedAddressesList.push(sender);\n    }\n    \n    function addToWhitelist(address[] memory addresses) public onlyOwner {\n        for(uint i = 0; i < addresses.length; i++){\n            addToWhitelist(addresses[i]);\n        }\n    }\n    \n    function isAddressWhitelisted(address sender) view public returns(bool) {\n        return !isWhitelistEnabled || whitelistedAddresses[sender] == sender;\n    }\n    \n    function withdrawTokens(uint256 amount) public onlyOwner {\n        token.transfer(owner(), amount);\n    }\n}"
    },
    "https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/feature/dot-token-v2/IDotTokenContract.sol": {
      "content": "\npragma solidity ^0.6.0;\n\ninterface IDotTokenContract{\n  function balanceOf(address account) external view returns (uint256);\n  function totalSupply() external view returns (uint256);\n  function transfer(address recipient, uint256 amount) external returns (bool);\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n  function allowance(address owner, address spender) external view returns (uint256);\n  function approve(address spender, uint256 amount) external returns (bool);\n}"
    },
    "https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/Context.sol": {
      "content": "// File: @openzeppelin/contracts/GSN/Context.sol\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"
    },
    "https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/Ownable.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"
    },
    "https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/Pausable.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n  constructor() public {}\n\n  /**\n   * @dev modifier to allow actions only when the contract IS paused\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev modifier to allow actions only when the contract IS NOT paused\n   */\n  modifier whenPaused {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused returns (bool) {\n    paused = true;\n    emit Pause();\n    return true;\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused returns (bool) {\n    paused = false;\n    emit Unpause();\n    return true;\n  }\n}"
    },
    "https://raw.githubusercontent.com/DefiOfThrones/DOTTokenContract/master/libs/SafeMath.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"
    }
  }
}