{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/GCB.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.7.0;\n\ncontract SmartContractProofOfExistence {\n  event ProofCreated(\n    string documentHash\n  );\n\n  address public owner;\n  mapping (string => bool) verifyDocumentHash;\n\n  modifier onlyOwner() {\n    require(msg.sender == owner, \"Only the owner is allowed to access this function.\");\n    _;\n  }\n\n  modifier noHashExistsYet(string memory documentHash) {\n    require(verifyDocumentHash[documentHash] == false);\n    _;\n  }\n\n  constructor() {\n    owner = msg.sender;\n  }\n\n  function notarizeHash (string memory documentHash) public onlyOwner noHashExistsYet(documentHash) {\n    verifyDocumentHash[documentHash] = true; \n    emit ProofCreated(documentHash);\n  }\n\n  function compareStrings (string memory a, string memory b) internal pure returns (bool) {\n    return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))) );\n  }\n\n  function doesNotProofExist(string memory documentHash) public view returns (bool) {\n    return verifyDocumentHash[documentHash] == false;\n  }\n}"
    }
  }
}