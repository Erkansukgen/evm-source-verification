{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"GBTokenBuy.sol":{"content":"/**\r\n *Submitted for verification at hecoinfo.com on 2021-08-26\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract GBTokenBuy {\r\n    \r\n    address usdtContract = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n\taddress usdcContract = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n\taddress admin = 0xa35A051901eb57B3bFdD1654d640b9c4a5637afC;\r\n\taddress gbtContract = 0x2fC27EaC28C9406Df95361aDd00622ee1625DB80;\r\n    \r\n    function usdtBuyGBT(uint256 usdtAmount) public {\r\n\t\trequire(usdtAmount > 0, \"usd amount cannot be zero\");\r\n\t\t\r\n\t\tIERC20 usdtToken = IERC20(usdtContract);\r\n        require(usdtToken.balanceOf(msg.sender) >= usdtAmount, \"USDT balance is not enough\");\r\n\t\trequire(usdtToken.allowance(msg.sender, address(this)) >= usdtAmount, \"USDT allowance is not enough\");\r\n\t\t\r\n\t\tIERC20 gbtToken = IERC20(gbtContract);\r\n\t\tuint256 tokenAmount = usdtAmount * 10**12 * 100;\r\n\t\trequire(gbtToken.balanceOf(address(this)) >= tokenAmount, \"GBT balance is not enough\");\r\n\t\t\r\n\t\t// transfer after inspection\r\n        usdtToken.transferFrom(msg.sender, admin, usdtAmount);\r\n        gbtToken.transfer(msg.sender, tokenAmount);\r\n    }\r\n    \r\n\tfunction usdcBuyGBT(uint256 usdcAmount) public {\r\n\t\trequire(usdcAmount > 0, \"usd amount cannot be zero\");\r\n\t\t\r\n\t\tIERC20 usdcToken = IERC20(usdcContract);\r\n        require(usdcToken.balanceOf(msg.sender) >= usdcAmount, \"USDC balance is not enough\");\r\n\t\trequire(usdcToken.allowance(msg.sender, address(this)) >= usdcAmount, \"USDC allowance is not enough\");\r\n\t\t\r\n\t\tIERC20 gbtToken = IERC20(gbtContract);\r\n\t\tuint256 tokenAmount = usdcAmount * 10**12 * 100;\r\n\t\trequire(gbtToken.balanceOf(address(this)) >= tokenAmount, \"GBT balance is not enough\");\r\n\t\t\r\n\t\t// transfer after inspection\r\n        usdcToken.transferFrom(msg.sender, admin, usdcAmount);\r\n        gbtToken.transfer(msg.sender, tokenAmount);\r\n    }\r\n\t\r\n\t// withdraw Erc20\r\n\tfunction withdrawErc20(address contractAddr) public {\r\n\t\tIERC20 erc20Token = IERC20(contractAddr);\r\n\t\tuint256 erc20Balance = erc20Token.balanceOf(address(this));\r\n        erc20Token.transfer(admin, erc20Balance);\r\n\t}\r\n\r\n}"}}}