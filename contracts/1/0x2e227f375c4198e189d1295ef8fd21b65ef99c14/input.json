{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"aa.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\ninterface ERC721\n{\n  event Transfer( address indexed _from, address indexed _to, uint256 indexed _tokenId );\n  event Approval( address indexed _owner, address indexed _approved, uint256 indexed _tokenId );\n  event ApprovalForAll( address indexed _owner, address indexed _operator, bool _approved );\n  function safeTransferFrom( address _from,  address _to, uint256 _tokenId, bytes calldata _data ) external;\n  function safeTransferFrom( address _from, address _to, uint256 _tokenId ) external;\n  function transferFrom( address _from, address _to, uint256 _tokenId ) external;\n  function approve( address _approved, uint256 _tokenId ) external;\n  function setApprovalForAll( address _operator, bool _approved ) external;\n  function balanceOf( address _owner ) external view returns (uint256);\n  function ownerOf( uint256 _tokenId ) external view returns (address);\n  function getApproved( uint256 _tokenId ) external view returns (address);\n  function isApprovedForAll( address _owner, address _operator ) external view returns (bool);\n}\ninterface ERC721Metadata\n{\n  function name() external view returns (string memory _name);\n  function symbol() external view returns (string memory _symbol);\n  function tokenURI(uint256 _tokenId) external view returns (string memory);\n}\ninterface ERC721TokenReceiver\n{\n  function onERC721Received( address _operator, address _from, uint256 _tokenId, bytes calldata _data ) external returns(bytes4);\n}\ninterface ERC165\n{\n  function supportsInterface( bytes4 _interfaceID ) external view returns (bool);\n}\ncontract SupportsInterface is ERC165\n{\n  mapping(bytes4 => bool) internal supportedInterfaces;\n  constructor() { supportedInterfaces[0x01ffc9a7] = true; }\n  function supportsInterface( bytes4 _interfaceID ) external override view returns (bool) { return supportedInterfaces[_interfaceID]; }\n}\nlibrary AddressUtils\n{\n  function isContract( address _addr ) internal view returns (bool addressCheck) {\n    bytes32 codehash;\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n    assembly { codehash := extcodehash(_addr) } // solhint-disable-line\n    addressCheck = (codehash != 0x0 && codehash != accountHash);\n  }\n}\ncontract NFToken is ERC721, SupportsInterface\n{\n  using AddressUtils for address;\n  string constant ZERO_ADDRESS = \"003001\";\n  string constant NOT_VALID_NFT = \"003002\";\n  string constant NOT_OWNER_OR_OPERATOR = \"003003\";\n  string constant NOT_OWNER_APPROVED_OR_OPERATOR = \"003004\";\n  string constant NOT_ABLE_TO_RECEIVE_NFT = \"003005\";\n  string constant NFT_ALREADY_EXISTS = \"003006\";\n  string constant NOT_OWNER = \"003007\";\n  string constant IS_OWNER = \"003008\";\n  bytes4 internal constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\n  mapping (uint256 => address) internal idToOwner;\n  mapping (uint256 => address) internal idToApproval;\n  mapping (address => uint256) private ownerToNFTokenCount;\n  mapping (address => mapping (address => bool)) internal ownerToOperators;\n  modifier canOperate( uint256 _tokenId ) {\n    address tokenOwner = idToOwner[_tokenId];\n    require( tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender], NOT_OWNER_OR_OPERATOR );\n    _;\n  }\n  modifier canTransfer( uint256 _tokenId ) {\n    address tokenOwner = idToOwner[_tokenId];\n    require( tokenOwner == msg.sender || idToApproval[_tokenId] == msg.sender || ownerToOperators[tokenOwner][msg.sender], NOT_OWNER_APPROVED_OR_OPERATOR );\n    _;\n  }\n  modifier validNFToken( uint256 _tokenId ) {\n    require(idToOwner[_tokenId] != address(0), NOT_VALID_NFT);\n    _;\n  }\n  constructor() { supportedInterfaces[0x80ac58cd] = true; }\n  function safeTransferFrom( address _from, address _to, uint256 _tokenId, bytes calldata _data ) external override {\n    _safeTransferFrom(_from, _to, _tokenId, _data);\n  }\n  function safeTransferFrom( address _from, address _to, uint256 _tokenId ) external override {\n    _safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n  function transferFrom( address _from, address _to, uint256 _tokenId ) external override canTransfer(_tokenId) validNFToken(_tokenId)  {\n    address tokenOwner = idToOwner[_tokenId];\n    require(tokenOwner == _from, NOT_OWNER);\n    require(_to != address(0), ZERO_ADDRESS);\n    _transfer(_to, _tokenId);\n  }\n  function approve( address _approved, uint256 _tokenId ) external override canOperate(_tokenId) validNFToken(_tokenId) {\n  \taddress tokenOwner = idToOwner[_tokenId];\n    require(_approved != tokenOwner, IS_OWNER);\n    idToApproval[_tokenId] = _approved;\n    emit Approval(tokenOwner, _approved, _tokenId);\n  }\n  function setApprovalForAll( address _operator, bool _approved ) external override {\n    ownerToOperators[msg.sender][_operator] = _approved;\n    emit ApprovalForAll(msg.sender, _operator, _approved);\n  }\n  function balanceOf( address _owner ) external override view returns (uint256) {\n    require(_owner != address(0), ZERO_ADDRESS);\n    return _getOwnerNFTCount(_owner);\n  }\n  function ownerOf( uint256 _tokenId ) external override view returns (address _owner) {\n    _owner = idToOwner[_tokenId];\n    require(_owner != address(0), NOT_VALID_NFT);\n  }\n  function getApproved( uint256 _tokenId ) external override view validNFToken(_tokenId) returns (address) {\n    return idToApproval[_tokenId];\n  }\n  function isApprovedForAll( address _owner, address _operator ) external override view returns (bool) {\n    return ownerToOperators[_owner][_operator];\n  }\n  function _transfer( address _to, uint256 _tokenId ) internal {\n    address from = idToOwner[_tokenId];\n    _clearApproval(_tokenId);\n    _removeNFToken(from, _tokenId);\n    _addNFToken(_to, _tokenId);\n    emit Transfer(from, _to, _tokenId);\n  }\n  function _mint( address _to, uint256 _tokenId ) internal virtual {\n    require(_to != address(0), ZERO_ADDRESS);\n    require(idToOwner[_tokenId] == address(0), NFT_ALREADY_EXISTS);\n    _addNFToken(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n  function _burn( uint256 _tokenId ) internal virtual validNFToken(_tokenId) {\n    address tokenOwner = idToOwner[_tokenId];\n    _clearApproval(_tokenId);\n    _removeNFToken(tokenOwner, _tokenId);\n    emit Transfer(tokenOwner, address(0), _tokenId);\n  }\n  function _removeNFToken( address _from, uint256 _tokenId ) internal virtual {\n    require(idToOwner[_tokenId] == _from, NOT_OWNER);\n    ownerToNFTokenCount[_from] -= 1;\n    delete idToOwner[_tokenId];\n  }\n  function _addNFToken( address _to, uint256 _tokenId ) internal virtual {\n    require(idToOwner[_tokenId] == address(0), NFT_ALREADY_EXISTS);\n    idToOwner[_tokenId] = _to;\n    ownerToNFTokenCount[_to] += 1;\n  }\n  function _getOwnerNFTCount( address _owner ) internal virtual view returns (uint256) {\n    return ownerToNFTokenCount[_owner];\n  }\n  function _safeTransferFrom( address _from, address _to, uint256 _tokenId, bytes memory _data ) private canTransfer(_tokenId) validNFToken(_tokenId) {\n    address tokenOwner = idToOwner[_tokenId];\n    require(tokenOwner == _from, NOT_OWNER);\n    require(_to != address(0), ZERO_ADDRESS);\n    _transfer(_to, _tokenId);\n    if (_to.isContract())    {\n      bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\n      require(retval == MAGIC_ON_ERC721_RECEIVED, NOT_ABLE_TO_RECEIVE_NFT);\n    }\n  }\n  function _clearApproval( uint256 _tokenId ) private { delete idToApproval[_tokenId]; }\n}\ncontract NFTokenMetadata is NFToken, ERC721Metadata {\n  string internal nftName;\n  string internal nftSymbol;\n  mapping (uint256 => string) internal idToUri;\n  constructor() { supportedInterfaces[0x5b5e139f] = true; }\n  function name() external override view returns (string memory _name) { _name = nftName; }\n  function symbol() external override view returns (string memory _symbol) { _symbol = nftSymbol; }\n  function tokenURI( uint256 _tokenId ) external override view validNFToken(_tokenId) returns (string memory) { return idToUri[_tokenId]; }\n  function _burn( uint256 _tokenId ) internal override virtual { super._burn(_tokenId); delete idToUri[_tokenId]; }\n  function _setTokenUri( uint256 _tokenId, string memory _uri ) internal validNFToken(_tokenId) { idToUri[_tokenId] = _uri; }\n}\ncontract OwnEnemy\n{\n  string public constant NOT_CURRENT_OWNER = \"018001\";\n  string public constant CANNOT_TRANSFER_TO_ZERO_ADDRESS = \"018002\";\n  address public owner;\n  event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );\n  constructor() { owner = msg.sender; }\n  modifier onlyOwner() { require(msg.sender == owner, NOT_CURRENT_OWNER); _; }\n  function transferOwnership( address _newOwner ) public onlyOwner {\n    require(_newOwner != address(0), CANNOT_TRANSFER_TO_ZERO_ADDRESS);\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\ncontract InstaPayNFT is  NFTokenMetadata,  OwnEnemy {\n  constructor() { nftName = \"InstaPay NFT\"; nftSymbol = \"IPNFT\";  }\n  function mint( address _to, uint256 _tokenId, string calldata _uri ) external onlyOwner { super._mint(_to, _tokenId); super._setTokenUri(_tokenId, _uri); }\n}"}}}