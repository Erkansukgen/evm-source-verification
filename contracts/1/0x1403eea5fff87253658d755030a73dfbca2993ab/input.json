{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/guestlist.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.6.0 <0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @notice A basic guest list contract for testing.\r\n * @dev For a Vyper implementation of this contract containing additional\r\n * functionality, see https://github.com/banteg/guest-list/blob/master/contracts/GuestList.vy\r\n */\r\ncontract TestGuestList {\r\n    address public vault;\r\n    address public bouncer;\r\n    mapping(address => bool) public guests;\r\n\r\n    /**\r\n     * @notice Create the test guest list, setting the message sender as\r\n     * `bouncer`.\r\n     * @dev Note that since this is just for testing, you're unable to change\r\n     * `bouncer`.\r\n     */\r\n    constructor() public {\r\n        bouncer = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @notice Invite guests or kick them from the party.\r\n     * @param _guests The guests to add or update.\r\n     * @param _invited A flag for each guest at the matching index, inviting or\r\n     * uninviting the guest.\r\n     */\r\n    function setGuests(address[] calldata _guests, bool[] calldata _invited) external {\r\n        assert(msg.sender == bouncer);\r\n        assert(_guests.length == _invited.length);\r\n        for (uint256 i = 0; i < _guests.length; i++) {\r\n            if (_guests[i] == address(0)) {\r\n                break;\r\n            }\r\n            guests[_guests[i]] = _invited[i];\r\n        }\r\n    }\r\n    \r\n    function setBouncer(address _bouncer) external {\r\n        assert(msg.sender == bouncer);\r\n        bouncer = _bouncer;\r\n    }\r\n\r\n    /**\r\n     * @notice Check if a guest with a bag of a certain size is allowed into\r\n     * the party.\r\n     * @dev Note that `_amount` isn't checked to keep test setup simple, since\r\n     * from the vault tests' perspective this is a pass/fail call anyway.\r\n     * @param _guest The guest's address to check.\r\n     * @param _amount Not used. The amount of tokens the guest is bringing.\r\n     */\r\n    function authorized(address _guest, uint256 _amount) external view returns (bool) {\r\n        return guests[_guest];\r\n    }\r\n}"}}}