{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":222222},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"fbChiExploit.sol":{"content":"// SPDX-License-Identifier: CC-BY-NC-SA-2.5\n\n//@code0x2\n\npragma solidity ^0.7.6;\n\ninterface IChi {\n    function mint(uint256 amount) external;\n    function transfer(address to, uint256 amount) external;\n}\n\ncontract chiBase {\n    function burnAndSend() public payable {\n        if(msg.value < 0.01 ether) revert();\n        block.coinbase.call{value:msg.value}(new bytes(0));\n        selfdestruct(msg.sender);\n    }\n}\n\ncontract chiExecutor {\n    address constant chi = 0x0000000000004946c0e9F43F4Dee607b0eF1fA1c;\n    function mint(address src, uint256 amount) public payable {\n        require(msg.sender == 0x22222222222700EAc97d0Fa4dD4DdFb0af45B84f);\n        uint256 codeSize;\n        assembly {\n            codeSize := extcodesize(src)\n        }\n        if(codeSize > 0) block.coinbase.call{value:msg.value}(new bytes(0));\n        else {\n            block.coinbase.call{value:(msg.value / 10)}(new bytes(0));\n            msg.sender.transfer(address(this).balance);\n        }\n        IChi(chi).mint(amount);\n        IChi(chi).transfer(msg.sender,amount);\n    }\n    function makeCall(address target, bytes memory data, uint256 value) public {\n        require(msg.sender == 0x22222222222700EAc97d0Fa4dD4DdFb0af45B84f);\n        target.call{value:value}(data);\n    }\n}"}}}