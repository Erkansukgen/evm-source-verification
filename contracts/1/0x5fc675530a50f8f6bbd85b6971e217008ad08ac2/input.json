{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"mytest/JobMarket.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\ninterface I{\n    function getRewards(address a,uint rewToClaim) external returns(bool);\n    function balanceOf(address) external view returns(uint);\n    function genesisBlock() external view returns(uint);\n}\n//first implementation, most is off-chain\ncontract PosterRewards {\n\tbool private fubuki;\n\taddress private oracle;\n\taddress private deployer;\n\tstruct Poster {uint128 amount; uint128 lastClaim;}\n\tmapping (address => Poster) public posters;\n\n\tfunction init() public {\n\t\trequire(fubuki==false);\n\t\tfubuki=true; //no reason\n\t\tdeployer = 0x5C8403A2617aca5C86946E32E14148776E37f72A;\n\t\toracle = 0x5C8403A2617aca5C86946E32E14148776E37f72A;//to change, after giving the oracle different address\n\t}\n\n\tfunction updatePosters(address[] memory r, uint[] memory amounts) external{//add recipients\n\t\trequire(msg.sender == oracle);\n\t\tfor(uint i = 0;i<r.length;i++) {posters[r[i]].amount += uint128(amounts[i]);}\n\t}\n\n\tfunction getRewards(uint amount)external{\n\t\tuint genesisBlock = I(0x31A188024FcD6E462aBF157F879Fb7da37D6AB2f).genesisBlock();\n\t\tif(amount>1000e18){amount=1000e18;}\n\t\trequire(posters[msg.sender].amount>=amount&&posters[msg.sender].lastClaim+1e5<block.number&&genesisBlock != 0);\n\t\tuint withd = 9e24 - I(0xEd7C1848FA90E6CDA4faAC7F61752857461af284).balanceOf(0x05658a207a56AA2d6b2821883D373f59Ac6A2fC3);// balanceOf(treasury)\n\t\tuint allowed = (block.number - genesisBlock)*84e15 - withd;//only 20% of all emission max. with this additional limit, overflow in treasury is not an issue even before the upgrade\n\t\tif (allowed>=amount){\n\t\t\tposters[msg.sender].amount-=uint128(amount);\n\t\t\tposters[msg.sender].lastClaim=uint128(block.number);\n\t\t\tbool success = I(0x05658a207a56AA2d6b2821883D373f59Ac6A2fC3).getRewards(msg.sender, amount); require(success == true);\n\t\t}\n\t}\n\n\tfunction setOracle(address a) public {require(msg.sender==deployer); oracle = a;}\n\n\tfunction getOracleGas(uint amount) public {\n\t\tuint genesisBlock = I(0x31A188024FcD6E462aBF157F879Fb7da37D6AB2f).genesisBlock();\n\t\trequire(msg.sender==oracle&&genesisBlock != 0);\n\t\tuint withd = 9e24 - I(0xEd7C1848FA90E6CDA4faAC7F61752857461af284).balanceOf(0x05658a207a56AA2d6b2821883D373f59Ac6A2fC3);// balanceOf(treasury)\n\t\tuint allowed = (block.number - genesisBlock)*14e15 - withd;//max ~3.33% of all emission, in case of dumb gas prices and low let price\n\t\tif (allowed>=amount){\n\t\t\tbool success = I(0x05658a207a56AA2d6b2821883D373f59Ac6A2fC3).getRewards(msg.sender, amount); require(success == true);\n\t\t}\n\t}\n}"}}}