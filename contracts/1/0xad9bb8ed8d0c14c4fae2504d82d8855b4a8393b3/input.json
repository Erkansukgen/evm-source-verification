{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/ShiryoinuPackERC20.sol":{"content":"\n// File contracts/@openzeppelin/contracts/utils/Context.sol\n\n\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File contracts/@openzeppelin/contracts/utils/Counters.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n}\n\n\n// File contracts/@openzeppelin/contracts/access/Ownable.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n// File contracts/final.sol\n\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n\n    /**\n        * @dev Returns the amount of tokens owned by `account`.\n        */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n        * @dev Moves `amount` tokens from the caller's account to `recipient`.\n        *\n        * Returns a boolean value indicating whether the operation succeeded.\n        *\n        * Emits a {Transfer} event.\n        */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n        * @dev Returns the remaining number of tokens that `spender` will be\n        * allowed to spend on behalf of `owner` through {transferFrom}. This is\n        * zero by default.\n        *\n        * This value changes when {approve} or {transferFrom} are called.\n        */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n        * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n        *\n        * Returns a boolean value indicating whether the operation succeeded.\n        *\n        * IMPORTANT: Beware that changing an allowance with this method brings the risk\n        * that someone may use both the old and the new allowance by unfortunate\n        * transaction ordering. One possible solution to mitigate this race\n        * condition is to first reduce the spender's allowance to 0 and set the\n        * desired value afterwards:\n        * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        *\n        * Emits an {Approval} event.\n        */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n        * @dev Moves `amount` tokens from `sender` to `recipient` using the\n        * allowance mechanism. `amount` is then deducted from the caller's\n        * allowance.\n        *\n        * Returns a boolean value indicating whether the operation succeeded.\n        *\n        * Emits a {Transfer} event.\n        */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n        * @dev Emitted when `value` tokens are moved from one account (`from`) to\n        * another (`to`).\n        *\n        * Note that `value` may be zero.\n        */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n        * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n        * a call to {approve}. `value` is the new allowance.\n        */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IShiryoinuPack {\n    function mint(address _to, uint256 _amount) external;\n}\n\ncontract ShiryoinuPackERC20 is Ownable{\n    using SafeMath for uint256;\n\n    modifier onlyClevel() {\n        require(msg.sender == walletA || msg.sender == walletB || msg.sender == owner());\n    _;\n    }\n\n    address walletA;\n    address walletB;\n    uint256 walletBPercentage = 15;\n\n    IERC20 public founderToken;\n    IShiryoinuPack public founderPack;\n    IShiryoinuPack public normalPack;\n    uint256 public minimumFounderAmount = 25000000000000*10**9;  // founder token has 9 decimals!!\n\n    mapping(uint256=>uint256) public mintAmountToPrice;\n\n    constructor(IERC20 _founderToken, IShiryoinuPack _founderPack, IShiryoinuPack _normalPack, address _walletA, address _walletB) {\n        walletA = _walletA;\n        walletB = _walletB;\n        founderToken = _founderToken;\n\n        founderPack = _founderPack;\n        normalPack = _normalPack;\n\n        mintAmountToPrice[1]=  0.05 ether;\n        mintAmountToPrice[5]=  0.25 ether;\n        mintAmountToPrice[10]= 0.45 ether;\n        mintAmountToPrice[20]= 0.85 ether;\n\n    }\n\n    function mint_pack(uint256 _amount) public payable {\n        require(_amount>0 &&  mintAmountToPrice[_amount]>0, \"Invalid amount to mint.\");\n        require(msg.value>0 && msg.value==mintAmountToPrice[_amount] , \"Invalid value.\");\n\n        bool founder = founderToken.balanceOf(msg.sender)>=minimumFounderAmount;\n\n        if (founder){\n            // mint founder\n            founderPack.mint(msg.sender, _amount);\n        }else{\n            // mint normal\n            normalPack.mint(msg.sender, _amount);\n        }\n    }\n\n    // admin and clevel functions\n    function setMinimumFounderTokenAmount(uint256 _amount) public onlyOwner {\n             minimumFounderAmount = _amount;\n    }\n\n    function setMintPrice(uint256 _amount, uint256 _price) public onlyOwner {\n             mintAmountToPrice[_amount]=_price;\n    }\n\n    function withdraw_all() public onlyClevel {\n        require (address(this).balance > 0);\n        uint256 amountB = SafeMath.div(address(this).balance,100).mul(walletBPercentage);\n        uint256 amountA = address(this).balance.sub(amountB);\n        payable(walletA).transfer(amountA);\n        payable(walletB).transfer(amountB);\n    }\n\n    function setWalletA(address _walletA) public {\n        require (msg.sender == walletA, \"Who are you?\");\n        require (_walletA != address(0x0), \"Invalid wallet\");\n        walletA = _walletA;\n    }\n\n    function setWalletB(address _walletB) public {\n        require (msg.sender == walletB, \"Who are you?\");\n        require (_walletB != address(0x0), \"Invalid wallet.\");\n        walletB = _walletB;\n    }\n\n    function setWalletBPercentage(uint256 _percentage) public onlyOwner{\n        require (_percentage>walletBPercentage && _percentage<=100, \"Invalid new slice.\");\n        walletBPercentage = _percentage;\n    }\n\n}\n\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}"}}}