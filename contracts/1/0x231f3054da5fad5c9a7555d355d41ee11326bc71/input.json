{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Factory5.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Library of helper methods for interacting with ERC20 tokens that do not consistently return true/false\n */\nlibrary SafeERC20 {\n    function safeTransfer(IERC20 _token, address _to, uint _value) internal {\n        (bool success, bytes memory _data) = address(_token).call(abi.encodeWithSelector(_token.transfer.selector, _to, _value));\n        require(success && (_data.length == 0 || abi.decode(_data, (bool))), 'SafeERC20: ERC20 operation did not succeed');\n    }\n}\n\ncontract Deposit {\n    using SafeERC20 for IERC20;\n\n    constructor() payable {\n        Factory factory = Factory(msg.sender);\n        address _recipient = factory.getAddressToWithdraw();\n\n        IERC20 _token = IERC20(factory.token());\n            \n        // Send all tokens from this contract to owner Factory\n        if (address(_token) != address(0)) {\n            IERC20(address(_token)).safeTransfer(\n                _recipient,\n                IERC20(address(_token)).balanceOf(address(this))\n            );\n        }\n\n        selfdestruct(payable(_recipient)); // selfdestruct to receive gas refund and reset nonce to 0\n    }\n}\n\ncontract Factory {\n    address public owner = _msgSender();\n    address public anotherAddress;\n\n    address public token;\n\n    event Withdrawn(address _recipient, address _depositAddress2, address _createAddress2, uint256 _salt, uint256 _depositEthBalance);\n    event OwnerUpdated(address indexed _oldOwner, address indexed _newOwner);\n\n    modifier onlyOwner() {\n        require(owner == _msgSender());\n        _;\n    }\n\n    function _msgSender() public view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function getFactoryVersion() public pure returns (string memory) {\n        return '0.6.0';\n    }\n\n    function getAddressToWithdraw() public view returns (address) {\n        address _recipient = owner;\n\n        if (anotherAddress != address(0)) {\n            _recipient = anotherAddress;\n        }\n\n        return _recipient;\n    }\n\n    function getDeposit(uint256 _salt) public view returns (bytes memory, address) {\n        bytes memory _bytecode = type(Deposit).creationCode;\n\n        bytes32 _hash = keccak256(\n            abi.encodePacked(\n                bytes1(0xff),\n                address(this),\n                _salt,\n                keccak256(_bytecode)\n            )\n        );\n\n        return (_bytecode, address(uint160(uint256(_hash))));\n    }\n\n    function _createDeposit(address _token, uint256 _salt) private {\n        (bytes memory _bytecode, address _depositAddress2) = getDeposit(_salt);\n\n        token = _token;\n        uint256 _depositEthBalance = _depositAddress2.balance;\n        \n        address _createAddress2;\n\n        address _recipient = getAddressToWithdraw();\n\n        assembly {\n            _createAddress2 := create2(\n                0, // 0 wei\n                add(_bytecode, 32), // the bytecode itself starts at the second slot. The first slot contains array length\n                mload(_bytecode), // size of init_code\n                _salt // salt from function arguments\n            )\n        }\n\n        emit Withdrawn(_recipient, _depositAddress2, _createAddress2, _salt, _depositEthBalance);\n    }\n\n    function withdraw(address _token, uint256 _salt) external onlyOwner {\n        _createDeposit(_token, _salt);\n    }\n\n    function withdrawToAnotherAddress(address _anotherAddress, address _token, uint256 _salt) external onlyOwner {\n        anotherAddress = _anotherAddress;\n\n        _createDeposit(_token, _salt);\n\n        anotherAddress = address(0);\n    }\n\n    function _setOwner(address _owner) private {\n        require(_owner != address(0));\n        require(_owner != owner);\n\n        owner = _owner;\n    }\n\n    function updateOwner(address _newOwner) external onlyOwner {\n        address _oldOwner = owner;\n\n        _setOwner(_newOwner);\n\n        emit OwnerUpdated(_oldOwner, _newOwner);\n    }\n}\n"
    }
  }
}