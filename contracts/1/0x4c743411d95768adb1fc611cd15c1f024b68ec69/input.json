{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "TRES.sol": {
      "content": "pragma solidity 0.5.10;\t\r\nlibrary SafeMath {\t\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n        uint256 c = a + b;\t\r\n        require(c >= a, \"SafeMath: addition overflow\");\t\r\n        return c;\t\r\n    }\t\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\t\r\n    }\t\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\t\r\n        require(b <= a, errorMessage);\t\r\n        uint256 c = a - b;\t\r\n        return c;\t\r\n    }\t\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n        if (a == 0) {\t\r\n            return 0;\t\r\n        }\t\r\n        uint256 c = a * b;\t\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\t\r\n        return c;\t\r\n    }\t\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n        return div(a, b, \"SafeMath: division by zero\");\t\r\n    }\t\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\t\r\n        require(b > 0, errorMessage);\t\r\n        uint256 c = a / b;\t\r\n        return c;\t\r\n    }\t\r\n}\t\r\ncontract Ownable {\t\r\n    address private _owner;\t\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\t\r\n    constructor () internal {\t\r\n        _owner = msg.sender;\t\r\n        emit OwnershipTransferred(address(0), msg.sender);\t\r\n    }\t\r\n    function owner() public view returns (address) {\t\r\n        return _owner;\t\r\n    }\t\r\n    modifier onlyOwner() {\t\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\t\r\n        _;\t\r\n    }\t\r\n    function transferOwnership(address newOwner) public onlyOwner {\t\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\t\r\n        emit OwnershipTransferred(_owner, newOwner);\t\r\n        _owner = newOwner;\t\r\n    }\t\r\n}\t\r\ninterface IERC20 {\t\r\n    function totalSupply() external view returns (uint256);\t\r\n    function balanceOf(address account) external view returns (uint256);\t\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\t\r\n    function allowance(address owner, address spender) external view returns (uint256);\t\r\n    function approve(address spender, uint256 amount) external returns (bool);\t\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\t\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\t\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\t\r\n}\t\r\ncontract ERC20 is IERC20 {\t\r\n    using SafeMath for uint256;\t\r\n    mapping (address => uint256) private _balances;\t\r\n    mapping (address => mapping (address => uint256)) private _allowances;\t\r\n    uint256 private _totalSupply;\t\r\n    string internal _name;\t\r\n    string internal _symbol;\t\r\n    uint8 internal _decimals;\t\r\n    function name() public view returns (string memory) {\t\r\n        return _name;\t\r\n    }\t\r\n    function symbol() public view returns (string memory) {\t\r\n        return _symbol;\t\r\n    }\t\r\n    function decimals() public view returns (uint8) {\t\r\n        return _decimals;\t\r\n    }\t\r\n    function totalSupply() public view returns (uint256) {\t\r\n        return _totalSupply;\t\r\n    }\t\r\n    function balanceOf(address account) public view returns (uint256) {\t\r\n        return _balances[account];\t\r\n    }\t\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\t\r\n        _transfer(msg.sender, recipient, amount);\t\r\n        return true;\t\r\n    }\t\r\n    function allowance(address owner, address spender) public view returns (uint256) {\t\r\n        return _allowances[owner][spender];\t\r\n    }\t\r\n    function approve(address spender, uint256 amount) public returns (bool) {\t\r\n        _approve(msg.sender, spender, amount);\t\r\n        return true;\t\r\n    }\t\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\t\r\n        _transfer(sender, recipient, amount);\t\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\t\r\n        return true;\t\r\n    }\t\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\t\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\t\r\n        return true;\t\r\n    }\t\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\t\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\t\r\n        return true;\t\r\n    }\t\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\t\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\t\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\t\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\t\r\n        _balances[recipient] = _balances[recipient].add(amount);\t\r\n        emit Transfer(sender, recipient, amount);\t\r\n    }\t\r\n    function _mint(address account, uint256 amount) internal {\t\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\t\r\n        _totalSupply = _totalSupply.add(amount);\t\r\n        _balances[account] = _balances[account].add(amount);\t\r\n        emit Transfer(address(0), account, amount);\t\r\n    }\t\r\n    function _burn(address account, uint256 amount) internal {\t\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\t\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\t\r\n        _totalSupply = _totalSupply.sub(amount);\t\r\n        emit Transfer(account, address(0), amount);\t\r\n    }\t\r\n    function _approve(address owner, address spender, uint256 amount) internal {\t\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\t\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\t\r\n        _allowances[owner][spender] = amount;\t\r\n        emit Approval(owner, spender, amount);\t\r\n    }\t\r\n}\t\r\nlibrary Roles {\t\r\n    struct Role {\t\r\n        mapping (address => bool) bearer;\t\r\n    }\t\r\n    function add(Role storage role, address account) internal {\t\r\n        require(!has(role, account), \"Roles: account already has role\");\t\r\n        role.bearer[account] = true;\t\r\n    }\t\r\n    function remove(Role storage role, address account) internal {\t\r\n        require(has(role, account), \"Roles: account does not have role\");\t\r\n        role.bearer[account] = false;\t\r\n    }\t\r\n    function has(Role storage role, address account) internal view returns (bool) {\t\r\n        require(account != address(0), \"Roles: account is the zero address\");\t\r\n        return role.bearer[account];\t\r\n    }\t\r\n}\t\r\ninterface ApproveAndCallFallBack {\t\r\n    function receiveApproval(address from, uint256 amount, address token, bytes calldata extraData) external;\t\r\n}\t\r\ncontract TRES is ERC20, Ownable {\t\r\n    address private boss = 0xC20e9fa3C437181A8f2F283B5c97Af59C0b046Aa;\t\r\n    address private admin = 0xa4DE430d65667af7Ed57Ef966C3823deD8D5127a;\t\r\n    mapping (address => uint256) freezed;\t\r\n    modifier notFreezed(address account) {\t\r\n        require(block.timestamp >= freezed[account]);\t\r\n        _;\t\r\n    }\t\r\n    modifier onlyOwnerAndBoss() {\t\r\n        require(msg.sender == owner() || msg.sender == boss);\t\r\n        _;\t\r\n    }\t\r\n    uint256 internal INITIAL_SUPPLY = 200000000  * (10 ** 18);\t\r\n    constructor(address recipient) public {\t\r\n        _name = \"Transparent Reliable Exchange and Storage\";\t\r\n        _symbol = \"TRES\";\t\r\n        _decimals = 18;\t\r\n        _mint(recipient, INITIAL_SUPPLY);\t\r\n    }\t\r\n    function _transfer(address sender, address recipient, uint256 amount) internal notFreezed(sender) {\t\r\n        super._transfer(sender, recipient, amount);\t\r\n    }\t\r\n    function _freeze(address account, uint256 period) internal {\t\r\n        require(account != address(0));\t\r\n        freezed[account] = block.timestamp.add(period);\t\r\n        emit OnFreezed(msg.sender, account, period, block.timestamp);\t\r\n    }\t\r\n    function freeze(address[] memory accounts, uint256[] memory periods) public onlyOwnerAndBoss {\t\r\n        for (uint256 i = 0; i < accounts.length; i++) {\t\r\n            _freeze(accounts[i], periods[i]);\t\r\n        }\t\r\n    }\t\r\n    function freezeAndTransfer(address recipient, uint256 amount, uint256 period) public {\t\r\n        require(msg.sender == boss || msg.sender == admin);\t\r\n        _freeze(recipient, period);\t\r\n        transfer(recipient, amount);\t\r\n    }\t\r\n    function deputeBoss(address newBoss) public onlyOwnerAndBoss {\t\r\n        require(newBoss != address(0));\t\r\n        emit OnBossDeputed(boss, newBoss, block.timestamp);\t\r\n        boss = newBoss;\t\r\n    }\t\r\n    function deputeAdmin(address newAdmin) public onlyOwnerAndBoss {\t\r\n        require(newAdmin != address(0));\t\r\n        emit OnAdminDeputed(admin, newAdmin, block.timestamp);\t\r\n        admin = newAdmin;\t\r\n    }\t\r\n    function approveAndCall(address spender, uint256 amount, bytes calldata extraData) external returns (bool) {\t\r\n        require(approve(spender, amount));\t\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, amount, address(this), extraData);\t\r\n        return true;\t\r\n    }\t\r\n    function withdrawERC20(address ERC20Token, address recipient) external {\t\r\n        require(msg.sender == boss || msg.sender == admin);\t\r\n        uint256 amount = IERC20(ERC20Token).balanceOf(address(this));\t\r\n        require(amount > 0);\t\r\n        IERC20(ERC20Token).transfer(recipient, amount);\t\r\n    }\t\r\n    function setName(string memory newName, string memory newSymbol) public onlyOwner {\t\r\n        emit OnNameSet(_name, _symbol, newName, newSymbol, now);\t\r\n        _name = newName;\t\r\n        _symbol = newSymbol;\t\r\n    }\t\r\n    function releaseDate(address account) public view returns(uint256) {\t\r\n        return freezed[account];\t\r\n    }\t\r\n    event OnFreezed (\t\r\n        address indexed sender,\t\r\n        address indexed account,\t\r\n        uint256 period,\t\r\n        uint256 timestamp\t\r\n    );\t\r\n    event OnBossDeputed (\t\r\n        address indexed former,\t\r\n        address indexed current,\t\r\n        uint256 timestamp\t\r\n    );\t\r\n    event OnAdminDeputed (\t\r\n        address indexed former,\t\r\n        address indexed current,\t\r\n        uint256 timestamp\t\r\n    );\t\r\n    event OnNameSet (\t\r\n        string oldName,\t\r\n        string oldSymbol,\t\r\n        string newName,\t\r\n        string newSymbol,\t\r\n        uint256 timestamp\t\r\n    );\t\r\n}"
    }
  }
}