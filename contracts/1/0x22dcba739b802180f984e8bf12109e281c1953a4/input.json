{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"iChain.sol":{"content":"pragma solidity ^0.8.0;\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        owner = msg.sender;\n        emit OwnershipTransferred(address(0), msg.sender);\n    }\n\n    modifier onlyOwner() {\n        require(owner == msg.sender, \"msg.sender is not the owner\");\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0), \"new owner is the zero address\");\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\ncontract CGCXiChainCheckpoint is Ownable {\n    function checkpoint(uint256 _checkpointNumber, bytes32 _checkpointHash, bytes32 _parentHash, bytes32 _blocksRoot, bytes32 _previousTxHash) external onlyOwner {\n        // Checkpoint is written as Calldata\n    }\n}\n"}}}