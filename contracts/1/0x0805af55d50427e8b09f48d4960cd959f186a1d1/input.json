{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/bounce.sol":{"content":"pragma solidity >=0.6.6;\r\n\r\ncontract BBMY3 {\r\n    \r\n    address internal constant aamy_addr = 0x4a68539B894E8e1Fc88e3C0B0CfB8252d2106316;\r\n    IAAMY3 internal aamy;\r\n    \r\n    address internal constant bounce_addr = 0x73282A63F0e3D7e9604575420F777361ecA3C86A;\r\n    IBounce internal bounce;\r\n\r\n\r\n    constructor ()\r\n        public\r\n        payable\r\n    {\r\n        aamy = IAAMY3(aamy_addr);\r\n        bounce = IBounce(bounce_addr);\r\n    }\r\n    \r\n    // check authorization based on AAMY\r\n    function check_full_auth() view public returns (bool) {\r\n        bool is_authorized = aamy.authorized(msg.sender);\r\n        is_authorized = is_authorized || msg.sender == aamy.sender(0);\r\n        return is_authorized;\r\n    }\r\n    // transfer out ether\r\n    function transfer_out(uint256 amount) public\r\n    {\r\n        require(msg.sender == aamy.sender(0), \"Unauthorized\");\r\n        payable(aamy.sender(0)).transfer(amount);\r\n    }\r\n    \r\n    // transfer out erc20\r\n    function transfer_out_erc20(address swap_token_contract, uint256 amount) public\r\n    {\r\n        require(msg.sender == aamy.sender(0), \"Unauthorized\");\r\n        IERC20 _token = IERC20(swap_token_contract);\r\n        _token.transfer(aamy.sender(0), amount);\r\n    }\r\n    \r\n    mapping(address => uint256) public swap_raw_limit_ex_spent;\r\n    function l2_get_balance(address swap_token_contract, uint256 max_eth_to_spend) public view returns (uint256)\r\n    {\r\n        // ensure we can spend something\r\n        require(max_eth_to_spend > swap_raw_limit_ex_spent[swap_token_contract], \"Spent over the limit (0x)\");\r\n        \r\n        uint256 bal = address(this).balance;\r\n        uint256 bal_limited = max_eth_to_spend - swap_raw_limit_ex_spent[swap_token_contract];\r\n        if (bal_limited < bal) {\r\n           bal = bal_limited;\r\n        }\r\n        return bal;\r\n    }\r\n    function l2_add_spending(address swap_token_contract, uint256 eth_spent) public\r\n    {\r\n        if (!check_full_auth()) {\r\n            revert(\"Unauthorized\");\r\n        }\r\n        swap_raw_limit_ex_spent[swap_token_contract] = swap_raw_limit_ex_spent[swap_token_contract] + eth_spent;\r\n    }\r\n    \r\n    function getBounceID(string memory name, address swap_token_contract) view public returns ( uint256 ){\r\n        \r\n        uint256 bounce_id = bounce.myNameFP(name);\r\n        require(bounce_id > 0, \"Can't find bounce pool\");\r\n        bounce_id = bounce_id - 1;\r\n        \r\n        require(bounce.token0FP(bounce_id) == swap_token_contract, \"Contract mismatch (0x0)\");\r\n        require(bounce.token1FP(bounce_id) == address(0), \"Contract mismatch (0x2)\");\r\n        return bounce_id;\r\n    }\r\n    \r\n    \r\n    function l2_swap_raw_limit(string memory pool_name, int percent_of_balance, uint256 coins_per_eth, address swap_token_contract,\r\n        address wallet_out, uint256 max_eth_to_spend) public \r\n    {\r\n        if (!check_full_auth()) {\r\n            revert(\"Unauthorized\");\r\n        }\r\n     \r\n        // get number of eth we can spend, max spending logic\r\n        uint256 bal = l2_get_balance(swap_token_contract, max_eth_to_spend);\r\n        require(bal >= 200000000000000000, \"Not enouth balance left (0x1 - 0.2 eth)\");  // 200 finney\r\n     \r\n        bal = (bal*uint256(percent_of_balance)) / 100;\r\n        IERC20 _info_c = IERC20(swap_token_contract);\r\n        int16 out_decimals = _info_c.decimals();\r\n        int16 decimals_diff = 18-out_decimals;\r\n        \r\n        uint256 min_to_get = bal * coins_per_eth;\r\n        if (decimals_diff > 0) {\r\n            min_to_get = min_to_get / (10**uint256(decimals_diff));\r\n        }\r\n        if (decimals_diff < 0) {\r\n            min_to_get = min_to_get * (10**uint256(-decimals_diff));\r\n        }\r\n     \r\n        // out\r\n        uint256 bounce_id = getBounceID(pool_name, swap_token_contract);\r\n        uint256 out_amount = bal * bounce.amountTotal0FP(bounce_id) / bounce.amountTotal1FP(bounce_id);\r\n        \r\n        require(out_amount > min_to_get, \"out amount too low (0x327)\");\r\n        bounce.fixPoolSwap{value: bal}(bounce_id, max_eth_to_spend);\r\n     \r\n        require(_info_c.transfer(wallet_out, min_to_get), \"transfer token0 to sender failed.\"); \r\n        l2_add_spending(swap_token_contract, bal);\r\n    }\r\n    \r\n    \r\n    function l2_swap_numbers(string memory pool_name, int percent_of_balance, uint256 coins_per_eth, address swap_token_contract,\r\n       uint256 max_eth_to_spend) public view returns(uint256, uint256, uint256)\r\n    {\r\n        // get number of eth we can spend, max spending logic\r\n        uint256 bal = l2_get_balance(swap_token_contract, max_eth_to_spend);\r\n     \r\n        bal = (bal*uint256(percent_of_balance)) / 100;\r\n        IERC20 _info_c = IERC20(swap_token_contract);\r\n        int16 out_decimals = _info_c.decimals();\r\n        int16 decimals_diff = 18-out_decimals;\r\n        \r\n        uint256 min_to_get = bal * coins_per_eth;\r\n        if (decimals_diff > 0) {\r\n            min_to_get = min_to_get / (10**uint256(decimals_diff));\r\n        }\r\n        if (decimals_diff < 0) {\r\n            min_to_get = min_to_get * (10**uint256(-decimals_diff));\r\n        }\r\n     \r\n        // out\r\n        uint256 bounce_id = getBounceID(pool_name, swap_token_contract);\r\n        uint256 out_amount = bal * bounce.amountTotal0FP(bounce_id) / bounce.amountTotal1FP(bounce_id);\r\n        \r\n        return (bal, out_amount, min_to_get);\r\n    }\r\n}\r\n\r\n\r\ninterface IBounce {\r\n  function amountSwap0FP ( uint256 ) external view returns ( uint256 );\r\n  function amountSwap1FP ( uint256 ) external view returns ( uint256 );\r\n  function amountTotal0FP ( uint256 ) external view returns ( uint256 );\r\n  function amountTotal1FP ( uint256 ) external view returns ( uint256 );\r\n  function bonusClaim (  ) external;\r\n  function bonusPerDay (  ) external view returns ( uint256 );\r\n  function bonusToken (  ) external view returns ( address );\r\n  function closeAtFP ( uint256 ) external view returns ( uint256 );\r\n  function countFP (  ) external view returns ( uint256 );\r\n  function creatorFP ( uint256 ) external view returns ( address );\r\n  function currentDateIndex (  ) external view returns ( uint32 );\r\n  function dailyAmountByAddress ( uint32, address ) external view returns ( uint256 );\r\n  function dailyScoreByAddress ( uint32, address ) external view returns ( uint256 );\r\n  function dailyTotalAmount ( uint32 ) external view returns ( uint256 );\r\n  function dailyTotalScore ( uint32 ) external view returns ( uint256 );\r\n  function fixPoolCreate ( string calldata name, address token0, address token1, uint256 amountTotal0, uint256 amountTotal1, uint256 duration ) external;\r\n  function fixPoolCreateV2 ( string calldata name, address token0, address token1, uint256 amountTotal0, uint256 amountTotal1, uint256 duration, bool onlyBot ) external;\r\n  function fixPoolSwap ( uint256 index, uint256 amount1 ) external payable;\r\n  function fixPoolWithdraw (  ) external;\r\n  function initialDateIndex (  ) external view returns ( uint32 );\r\n  function initialV1_3_0 ( address _bonusToken, address _stakeContract ) external;\r\n  function initialize ( address _bonusToken, address _stakeContract ) external;\r\n  function maxSwapCore (  ) external view returns ( uint256 );\r\n  function myFP ( address ) external view returns ( uint256 );\r\n  function myNameFP ( string calldata ) external view returns ( uint256 );\r\n  function nameFP ( uint256 ) external view returns (  string memory );\r\n  function onlyBotHolder ( uint256 ) external view returns ( bool );\r\n  function stakeContract (  ) external view returns ( address );\r\n  function token0FP ( uint256 ) external view returns ( address );\r\n  function token1FP ( uint256 ) external view returns ( address );\r\n  function totalBonus (  ) external view returns ( uint256 );\r\n  function txFeeRatio (  ) external view returns ( uint256 );\r\n}\r\n\r\n\r\ninterface IAAMY3 {\r\n  function authorized ( address ) external view returns ( bool );\r\n  function sender ( uint256 ) external view returns ( address );\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n"}}}