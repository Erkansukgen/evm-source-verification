{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "dao.sol": {
      "content": "pragma solidity ^0.8.0;\r\n//SPDX-License-Identifier: MIT\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract XFT_DAO {\r\n\r\n    struct proposal {\r\n        string[4] propsal_info;\r\n        uint256 expiry_time;\r\n        uint256 poll_id;\r\n    }\r\n\r\n    event push_vote(\r\n        address indexed voter,\r\n        uint256 indexed poll_id,\r\n        bool[4] answers\r\n    );\r\n\r\n    address owner;\r\n    proposal public running_proposal;\r\n    IERC20 weight_token;\r\n\r\n    constructor(address _addy) {\r\n        owner = msg.sender;\r\n        weight_token = IERC20(_addy);\r\n    }\r\n\r\n\r\n    function create_proposal(string[4] memory text_info, uint256 _expiry) public{\r\n        require(msg.sender == owner, \"only Owner\");\r\n        running_proposal = proposal(text_info, _expiry, block.number);\r\n    }\r\n\r\n    function vote(bool[4] memory y_n) public{\r\n        require(weight_token.balanceOf(msg.sender) > 0, \"0 XFT balance: you aren't allowed to vote!\");\r\n        require(block.timestamp < running_proposal.expiry_time, \"proposal expired\");\r\n\r\n        emit push_vote(msg.sender, running_proposal.poll_id, y_n);\r\n    }\r\n\r\n    function done() view public returns(uint256, bool){\r\n        return (block.timestamp, block.timestamp < running_proposal.expiry_time);\r\n    }\r\n\r\n    function show_questions() view public returns(string[4] memory){\r\n        return running_proposal.propsal_info;\r\n    }\r\n}"
    }
  }
}