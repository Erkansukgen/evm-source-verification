{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol":{"content":"pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"},"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol":{"content":"pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol":{"content":"pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"contracts/4_bbot01.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.7.5 <0.9.0;\npragma abicoder v2;\n\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract BBot01 {\n    // 2 bytes, per block can store 16 action max\n    uint constant actionBitsPerBlock = 16;\n\n    // max count of latest blocks that _actionFlag can store actions\n    uint constant actionMaxBlocks = 14;\n\n    // = actionMaxBlocks - 1, action generated in block number \"N\" can kept utils current block number \"M\" - \"N\" > actionMaxBlockDelay\n    uint constant actionMaxBlockDelay = 13;\n\n    uint constant actionSet = 0;\n    uint constant actionCheck = 1;\n\n    uint constant mask1 = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    uint constant mask2 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    uint constant amountApproveToRouter = 1e30;\n\n    // dex id: 0\n    IUniswapV2Router02 private immutable uniRouter;\n    // dex id: 1\n    IUniswapV2Router02 private immutable sushiRouter;\n\n    address public owner;\n    mapping(address => uint) private _whitelist;\n    uint private _actionFlag;\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n\n    modifier onlyWhitelist {\n        require(owner == msg.sender || _whitelist[msg.sender] == 1, \"Forbidden\");\n        _;\n    }\n\n    constructor(address uniRouter_, address sushiRouter_, address[] memory whitelist_){\n        owner = msg.sender;\n        uniRouter = IUniswapV2Router02(uniRouter_);\n        sushiRouter = IUniswapV2Router02(sushiRouter_);\n        if (whitelist_.length > 0) {\n            for (uint i = 0; i < whitelist_.length; i++) {\n                _whitelist[whitelist_[i]] = 1;\n            }\n        }\n    }\n\n    function approve(address spender, address[] calldata tokens) onlyWhitelist external {\n        for (uint i = 0; i < tokens.length; i++) {\n            IERC20(tokens[i]).approve(spender, amountApproveToRouter);\n        }\n    }\n\n    function getReserves(address[] calldata pairs) external view returns (uint[] memory reserves) {\n        reserves = new uint[](pairs.length*2);\n        for (uint i = 0; i < pairs.length; i++) {\n            (reserves[i], reserves[i+1], ) = IUniswapV2Pair(pairs[i]).getReserves();\n        }\n    }\n\n    function checkActionIndex(uint currentBlockNumber, uint64 actionIndex_, uint action_) internal { // set public for debugging\n        // gas savings\n        uint actionFlag = _actionFlag;\n\n        // use 4bytes block number\n        currentBlockNumber &= 0xffffffff;\n\n        uint actionBit;\n\n        { // scope for callerBlockNumber, avoids stack too deep errors\n            // 32 bits = callerBlockNumber 4bits = actionIndex(0-15)\n            uint callerBlockNumber = actionIndex_ >> 32;\n            require(callerBlockNumber <= currentBlockNumber, \"Invalid blockNumber\");\n            require(currentBlockNumber - callerBlockNumber < actionMaxBlockDelay, \"Action expired\");\n            // 14 : actionMaxBlocks\n            // (callerBlockNumber%14) << 4 => callerBlockNumber%14 * 16, save gas\n            // actionIndex_ & 0xf => action index in current block action bytes\n            actionBit = uint(1) << (callerBlockNumber%14 << 4) + (actionIndex_ & 0xf);\n        }\n\n        // action type:\n        //   last bit = 0, set action bit\n        //   last bit = 1, check action bit\n        if (action_ == actionSet) {\n            // reset expired blocks states\n            // first 32bits store 4 bytes block number\n            uint lastBlockNumber = actionFlag >> 224;\n            uint pastBlockCount = currentBlockNumber - lastBlockNumber;\n            if (pastBlockCount > actionMaxBlockDelay) {\n                // clean all\n                actionFlag = 0;\n            } else if (pastBlockCount != 0) { // current block state already initialized\n                // currentBlockNumber%14 * 16 % 224\n                uint startIndex = ((currentBlockNumber%14) << 4) % 224;\n                // (startIndex + passBlocks * 16) % 224\n                uint endIndex = (startIndex + pastBlockCount << 4) % 224;\n                // pastBlockCount*16 bit with value 1\n                uint mask = mask1 >> ((14 - pastBlockCount) << 4);\n                mask = mask << startIndex;\n                if (endIndex < startIndex && endIndex != 0) {\n                    mask = mask | ~(mask2 << endIndex);\n                }\n                mask &= mask1;\n                actionFlag &= ~mask;\n            } else {\n                actionFlag &= mask1;\n            }\n\n            require(actionFlag & actionBit == 0, \"Action duplicate\");\n\n            // set current action done\n            actionFlag |= actionBit;\n            // set currentBlockNumber\n            actionFlag &= mask1;\n            actionFlag |= currentBlockNumber << 224;\n\n            // save flag\n            _actionFlag = actionFlag;\n        } else {\n            // check whether dependency action is ok\n            require(actionFlag & actionBit != 0, \"Lack of dependency action\");\n        }\n    }\n\n    function swap(uint amountIn_, uint amountOut_, address[][] memory path_, uint64 deadline_, uint64 actionIndex_, uint64 action_) payable onlyWhitelist external returns(uint amountOut) {\n        //   basic action type, last 2 bits:\n        //   set action bit:  00\n        //   check action bit: 01\n        //   unused: 10\n        //   unused: 11\n        uint actionType = action_ & 3;\n        if (actionType == actionSet || actionType == actionCheck) {\n            checkActionIndex(block.number, actionIndex_, actionType);\n        }\n\n        // 3rd bit = 1 : Decrypt token address\n        if (action_ & 4 != 0) {\n            // 17th - 24th bit identifies how many bits should be left shifted\n            uint160 xorMask = ~(uint160(action_) << ((action_ & 0xff0000) >> 16));\n            for (uint i = 0; i < path_.length; i++) {\n                for (uint j = 0; j < path_[i].length; j++) {\n                    path_[i][j] = address(uint160(path_[i][j]) ^ xorMask);\n                }\n            }\n        }\n\n        // 25th ~ 40th (16)bit defines dex path\n        IUniswapV2Router02[] memory dexPath = new IUniswapV2Router02[](path_.length);\n        {\n            uint dexPathCmd = (action_ >> 24) & 0xffff;\n            for (uint i = 0; i < path_.length; i++) {\n                uint dexID = (dexPathCmd >> 2*i) & 0x3;\n                if (dexID == 0) {\n                    dexPath[i] = uniRouter;\n                } else if (dexID == 1) {\n                    dexPath[i] = sushiRouter;\n                } else {\n                    require(false, \"BBot: INVALID_DEX_ID\");\n                }\n            }\n        }\n\n        // check amount out when contains multiple dex\n        if (dexPath.length > 1) {\n            amountOut = getAmountOut(amountIn_, path_, dexPath);\n            require(amountOut >= amountOut_, 'BBot: INSUFFICIENT_OUTPUT_AMOUNT');\n        }\n\n        // 4th bit = 1 : approve path token to router\n        if (action_ & 8 != 0) {\n            // 9th - 16th bit, each bit identifies whether the matched token need to approve or not\n            // [A, B], [B, C, D], [D, A]\n            // [0, 1], [1, 2, 3], [3, 4]\n            uint tokenIndex;\n            for (uint i = 0; i < path_.length; i++) {\n                for (uint j = 0; j < path_[i].length - 1; j++) {\n                    require(tokenIndex < 8, \"BBot: APPROVE_OUT_OF_RANGE\");\n                    if (action_ & (0x8000 >> tokenIndex) != 0) {\n                        IERC20(path_[i][j]).approve(address(dexPath[i]), amountApproveToRouter);\n                    }\n                    tokenIndex++;\n                }\n            }\n        }\n\n        address to = address(this);\n        uint amountIn = amountIn_;\n        amountOut = 0;\n        for (uint i = 0; i < path_.length; i++) {\n            // the last amountOut\n            if (i == path_.length - 1) {\n                amountOut = amountOut_;\n            }\n            uint[] memory amounts = dexPath[i].swapExactTokensForTokens(amountIn, amountOut, path_[i], to, deadline_);\n            amountIn = amounts[amounts.length - 1];\n        }\n        amountOut = amountIn;\n        // 5th~8th bit defines swap method id\n//        uint swapMethodID = (action_ & 0xf0) >> 4; // 0b11110000\n//        IUniswapV2Router02 r = IUniswapV2Router02(router);\n//        uint deadline = deadline_;\n//        if (swapMethodID == 0) {\n//            r.swapExactTokensForTokens(amountIn_, amountOut_, path_, to, deadline);\n//        } else if (swapMethodID == 1) {\n//            r.swapTokensForExactTokens(amountOut_, amountIn_, path_, to, deadline);\n//        } else if (swapMethodID == 2) {\n//            r.swapExactETHForTokens{value: amountIn_}(amountOut_, path_, to, deadline);\n//        } else if (swapMethodID == 3) {\n//            r.swapTokensForExactETH(amountOut_, amountIn_, path_, to, deadline);\n//        } else if (swapMethodID == 4) {\n//            r.swapExactTokensForETH(amountIn_, amountOut_, path_, to, deadline);\n//        } else if (swapMethodID == 5) {\n//            r.swapETHForExactTokens{value: amountIn_}(amountOut_, path_, to, deadline);\n//        } else if (swapMethodID == 6) {\n//            r.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn_, amountOut_, path_, to, deadline);\n//        } else if (swapMethodID == 7) {\n//            r.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountIn_}(amountOut_, path_, to, deadline);\n//        } else if (swapMethodID == 8) {\n//            r.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn_, amountOut_, path_, to, deadline);\n//        }\n    }\n\n    function getAmountsOut(uint amountIn, address[][] calldata path, IUniswapV2Router02[] calldata dexPath) external view returns (uint[] memory amounts) {\n        uint n;\n        for (uint i = 0; i < path.length; i++) {\n            for (uint j = 0; j < path[i].length - 1; j++) {\n                n++;\n            }\n        }\n        amounts = new uint[](n);\n        n = 0;\n        for (uint i = 0; i < path.length; i++) {\n            uint[] memory _amounts = dexPath[i].getAmountsOut(amountIn, path[i]);\n            for (uint j = 1; j < _amounts.length; j++) {\n                amounts[n] = _amounts[j];\n                n++;\n            }\n        }\n    }\n\n    function getAmountOut(uint amountIn, address[][] memory path, IUniswapV2Router02[] memory dexPath) internal view returns (uint) {\n        for (uint i = 0; i < path.length; i++) {\n            uint[] memory amounts = dexPath[i].getAmountsOut(amountIn, path[i]);\n            amountIn = amounts[amounts.length - 1];\n        }\n        return amountIn;\n    }\n\n    function getActionFlag() external view returns (bytes32) {\n        return bytes32(_actionFlag);\n    }\n\n    // transfer specified Token to owner\n    function withdrawTokens(address[] calldata tokens, uint amount) onlyOwner external {\n        for (uint i = 0; i < tokens.length; i++) {\n            IERC20 token = IERC20(tokens[i]);\n            uint _amount = amount;\n            if (_amount == 0) {\n                _amount = token.balanceOf(address(this));\n            }\n            token.transfer(msg.sender, _amount);\n        }\n    }\n\n    // transfer ETH to owner\n    function withdrawETH(uint256 amount_) onlyOwner external {\n        if (amount_ == 0) {\n            amount_ = address(this).balance;\n        }\n        (bool success,) = msg.sender.call{value: amount_}(\"\");\n        require(success, \"withdraw ETH fail\");\n    }\n\n    // add/remove whitelist address\n    function whitelist(address[] calldata addList_, address[] calldata removeList_) onlyOwner external {\n        for (uint i = 0; i < addList_.length; i++) {\n            _whitelist[addList_[i]] = 1;\n        }\n        for (uint i = 0; i < removeList_.length; i++) {\n            delete _whitelist[removeList_[i]];\n        }\n    }\n\n    function changeOwner(address newOwner) onlyOwner external {\n        owner = newOwner;\n    }\n\n    receive() payable external {}\n}"}}}