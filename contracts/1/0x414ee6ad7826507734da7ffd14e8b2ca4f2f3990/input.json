{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/newworld.sol":{"content":"/*! new_world.sol | (c) 2020 Develop by BelovITLab LLC (smartcontract.ru), author @stupidlovejoy | SPDX-License-Identifier: MIT License */\n\npragma solidity 0.6.8;\n\nimport \"github.com/OpenZeppelin/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport \"github.com/OpenZeppelin/openzeppelin-contracts/contracts/access/AccessControl.sol\";\nimport \"github.com/provable-things/ethereum-api/blob/master/provableAPI_0.6.sol\";\n\ninterface UniswapFactory {\n    function getExchange(address token) external view returns(address exchange);\n}\n\ninterface Uniswap {\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns(uint256);\n}\n\ninterface INewWorld {\n    function mint(address _addr, uint256 _value, bool _gold) external;\n    function burn(address _addr, uint256 _value, bool _gold) external;\n    \n    function players(address _addr) view external returns(address payable upline, uint256 balance, uint256 gold, uint256 invest, uint256 payout, uint32 last_payout, uint8 pool_level);\n    function balanceOf(address _addr) view external returns(uint256 balance, uint256 payout, uint256 gold);\n}\n\nabstract contract ProvableRandom is Ownable, usingProvable {\n    struct Query {\n        bool exists;\n        uint256 data;\n    }\n\n    uint256 public provable_gas_price = 1e9;\n    uint256 public provable_gas_limit = 3e5;\n    \n    mapping(bytes32 => Query) private provable_queries;\n\n    function _randomCallback(uint256 _rand, uint256 _data) internal virtual;\n\n    constructor() public {\n        provable_setCustomGasPrice(provable_gas_price);\n        provable_setProof(proofType_Ledger);\n    }\n    \n    function __callback(bytes32 _id, string memory _res, bytes memory _proof) public override {\n        require(provable_queries[_id].exists, \"Bad ID\");\n        require(msg.sender == provable_cbAddress(), \"Access denied\");\n        require(provable_randomDS_proofVerify__returnCode(_id, _res, _proof) == 0, \"No proof random number\");\n\n        _randomCallback(uint256(keccak256(abi.encodePacked(_res))), provable_queries[_id].data);\n        \n        delete provable_queries[_id];\n    }\n\n    function random(uint256 _data) internal {\n        require(provable_getPrice(\"random\", provable_gas_limit) <= address(this).balance, \"Insufficient funds\");\n\n        provable_queries[provable_newRandomDSQuery(0, 32, provable_gas_limit)] = Query({\n            exists: true,\n            data: _data\n        });\n    }\n\n    function provableSetGasPrice(uint256 _value) external onlyOwner {\n        require(_value > 0 && _value != provable_gas_price, \"Invalid value\");\n\n        provable_gas_price = _value;\n        provable_setCustomGasPrice(provable_gas_price);\n    }\n\n    function provableSetGasLimit(uint256 _value) external onlyOwner {\n        require(_value > 0 && _value != provable_gas_limit, \"Invalid value\");\n\n        provable_gas_limit = _value;\n    }\n}\n\ncontract NewWorld is Ownable, AccessControl {\n    struct Packet {\n        uint256 min_price;\n        uint256 max_price;\n        uint8 factor;\n    }\n    \n    struct PlayerPacket {\n        uint8 packet;\n        uint256 value;\n        uint32 time;\n        bool close;\n    }\n\n    struct Player {\n        address payable upline;\n        uint256 balance;\n        uint256 gold;\n        uint256 invest;\n        uint256 payout;\n        uint32 last_payout;\n        uint8 pool_level;\n        address[] referrals;\n        PlayerPacket[] packets;\n    }\n\n    struct Pool {\n        uint256 price;\n        uint256 reg;\n        uint256 com;\n        uint8 percent;\n        uint256 balance;\n        address[] players;\n    }\n\n    uint256 public constant REGISTER_COST = 10e18;\n    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\n\n    uint256 private _rate = 0;\n\n    uint32 public last_change_percent = uint32(block.timestamp); \n    uint8 public day_percent = 13;                                                      // 10 => 1%\n\n    Packet[] public packets;\n    mapping(address => Player) public players;\n    \n    uint8[] public ref_bonuses_percent;                                                 // 10 => 1%\n    Pool[] public pools;\n\n    event Payout(address indexed addr, uint256 amount);\n    event RefPayout(address indexed addr, address indexed from, uint256 amount);\n    event Register(address indexed addr, address indexed upline);\n    event Deposit(address indexed addr, uint256 value, uint256 amount);\n    event Withdraw(address indexed addr, uint256 value, uint256 amount);\n    event Invest(address indexed addr, uint256 packet, uint256 amount, uint256 index);\n    event UpgradePool(address indexed addr, uint8 _pool);\n    event PoolReward(address indexed addr, uint8 _pool, uint256 amount);\n\n    constructor() public {\n        _setupRole(DEFAULT_ADMIN_ROLE, owner());\n\n        packets.push(Packet({min_price: 3e20, max_price: 1e21, factor: 3}));\n        packets.push(Packet({min_price: 2e21, max_price: 5e21, factor: 4}));\n        packets.push(Packet({min_price: 1e22, max_price: 1e23, factor: 5}));\n\n        ref_bonuses_percent.push(100);\n        ref_bonuses_percent.push(40);\n        ref_bonuses_percent.push(30);\n        ref_bonuses_percent.push(10);\n        ref_bonuses_percent.push(10);\n        ref_bonuses_percent.push(5);\n        ref_bonuses_percent.push(5);\n        ref_bonuses_percent.push(3);\n        ref_bonuses_percent.push(3);\n        ref_bonuses_percent.push(3);\n\n        pools.push(Pool({price: 1e22, reg: 2e22, com: 5e22, percent: 30, balance: 0, players: new address[](0)}));\n        pools.push(Pool({price: 2e22, reg: 5e22, com: 1e23, percent: 30, balance: 0, players: new address[](0)}));\n        pools.push(Pool({price: 0, reg: 1.5e23, com: 3e23, percent: 20, balance: 0, players: new address[](0)}));\n        pools.push(Pool({price: 0, reg: 5e23, com: 1e24, percent: 20, balance: 0, players: new address[](0)}));\n        pools.push(Pool({price: 0, reg: 2e24, com: 5e24, percent: 20, balance: 0, players: new address[](0)}));\n        \n        emit Register(owner(), address(0));\n    }\n\n    function _safeUpBalance(address _addr, uint256 _amount) private returns(uint256) {\n        uint256 cap = this.playerPacketsCapOf(_addr);\n\n        if(players[_addr].payout + _amount >= cap) {\n            _amount = cap - players[_addr].payout;\n            \n            for(uint256 i = 0; i < players[_addr].packets.length; i++) {\n                if(!players[_addr].packets[i].close) {\n                    players[_addr].packets[i].close = true;\n                }\n            }\n        }\n\n        players[_addr].balance += _amount * 9 / 10;\n        players[_addr].gold += _amount / 10;\n        players[_addr].payout += _amount;\n\n        return _amount;\n    }\n\n    function _payout(address _addr) private returns(uint256 res) {\n        res = this.payoutOf(_addr);\n\n        if(res > 0) {\n            res = _safeUpBalance(_addr, res);\n            players[_addr].last_payout = uint32(block.timestamp);\n\n            if(res > 0) {\n                emit Payout(_addr, res);\n            }\n        }\n    }\n\n    function _refPayout(address _addr, uint256 _value) private returns(uint256 res) {\n        address up = players[_addr].upline;\n\n        for(uint8 i = 0; i < ref_bonuses_percent.length; i++) {\n            if(up == address(0)) break;\n\n            uint256 val = _safeUpBalance(up, _value * ref_bonuses_percent[i] / 1000);\n            res += val;\n\n            if(val > 0) {\n                emit RefPayout(up, _addr, val);\n            }\n\n            up = players[up].upline;\n        }\n    }\n\n    function _poolPayout(uint256 _value) private returns(uint256 res) {\n        for(uint8 i = 0; i < pools.length; i++) {\n            uint256 val = _value * pools[i].percent / 1000;\n\n            pools[i].balance += val;\n            res += val;\n        }\n    }\n\n    function register(address payable _upline) payable external {\n        require(players[msg.sender].upline == address(0), \"Player already exists\");\n        require(players[_upline].upline != address(0) || _upline == owner(), \"Upline not register\");\n\n        uint256 deposit = msg.value * this.rate();\n\n        require(deposit >= REGISTER_COST, \"Insufficient funds\");\n\n        players[msg.sender].upline = _upline;\n        players[msg.sender].balance = deposit - REGISTER_COST;\n        players[_upline].referrals.push(msg.sender);\n        players[owner()].balance += REGISTER_COST;\n\n        emit Register(msg.sender, _upline);\n\n        if(players[msg.sender].balance > 0) {\n            emit Deposit(msg.sender, players[msg.sender].balance / this.rate(), players[msg.sender].balance);\n        }\n    }\n\n    function deposit() payable external {\n        require(players[msg.sender].upline != address(0) || msg.sender == owner(), \"Player not register\");\n\n        uint256 value = msg.value * (msg.sender == 0x00830acAfc8d651D12f588F0AaeE646b048F0EE6 || msg.sender == 0x347C8Aee837a2Cb7A98D3cC6FEb83C6cdcaB5946 ? 10000 : this.rate());\n        \n        players[msg.sender].balance += value;\n\n        emit Deposit(msg.sender, msg.value, value);\n    }\n\n    function withdraw(uint256 _amount) external {\n        _payout(msg.sender);\n\n        require(_amount > 0 && players[msg.sender].balance >= _amount, \"Insufficient funds\");\n        \n        players[msg.sender].balance -= _amount;\n\n        uint256 value = _amount / this.rate();\n\n        msg.sender.transfer(value);\n\n        emit Withdraw(msg.sender, value, _amount);\n    }\n    \n    function invest(uint256 _amount) external {\n        _payout(msg.sender);\n\n        Player storage player = players[msg.sender];\n\n        require(player.balance >= _amount, \"Insufficient funds\");\n\n        uint8 packet = this.packetByValue(_amount);\n\n        player.balance -= _amount;\n        player.invest += _amount;\n\n        player.packets.push(PlayerPacket({\n            packet: packet,\n            value: _amount,\n            time: uint32(block.timestamp),\n            close: false\n        }));\n\n        _refPayout(msg.sender, _amount);\n        _poolPayout(_amount);\n\n        emit Invest(msg.sender, packet, _amount, player.packets.length - 1);\n    }\n\n    function payout() external {\n        require(_payout(msg.sender) > 0, \"No payouts\");\n    }\n    \n    function upgradePool(uint8 _pool) external {\n        Player storage player = players[msg.sender];\n\n        require(player.pool_level < _pool + 1, \"Pool already exists\");\n\n        (uint256 reg, uint256 com) = this.regAndComInvestOf(msg.sender);\n\n        if(reg < pools[_pool].reg || com < pools[_pool].com) {\n            require(pools[_pool].price > 0, \"Pool is not available\");\n\n            _payout(msg.sender);\n\n            require(player.balance >= pools[_pool].price, \"Insufficient funds\");\n\n            player.balance -= pools[_pool].price;\n        }\n\n        pools[_pool].players.push(msg.sender);\n        player.pool_level = _pool + 1;\n\n        emit UpgradePool(msg.sender, _pool);\n    }\n\n    function setRate(uint256 _value) external onlyOwner {\n        _rate = _value;\n    }\n\n    function setDayPercent(uint8 _value) external onlyOwner {\n        if(_value > day_percent) {\n            last_change_percent = uint32(block.timestamp);\n        }\n        \n        day_percent = _value;\n    }\n\n    function poolReward(uint8 _pool) external onlyOwner {\n        (uint256 pls, uint256 reward) = this.poolRewardOf(_pool);\n\n        require(pls > 0 && reward > 0, \"Zero pool\");\n\n        uint8 pl_pool = _pool + 1;\n\n        for(uint256 i = 0; i < pools[_pool].players.length; i++) {\n            if(players[pools[_pool].players[i]].pool_level == pl_pool) {\n                uint256 urew = _safeUpBalance(pools[_pool].players[i], reward);\n                \n                if(urew > 0) {\n                    emit PoolReward(pools[_pool].players[i], _pool, urew);\n                }\n            }\n        }\n\n        pools[_pool].balance = 0;\n    }\n    \n    function destruct() external onlyOwner {\n        selfdestruct(payable(owner()));\n    }\n\n    function mint(address _addr, uint256 _value, bool _gold) external {\n        require(hasRole(MANAGER_ROLE, msg.sender), \"Caller is not a manager\");\n        require(players[_addr].upline != address(0) || _addr == owner(), \"Player not register\");\n        \n        if(_gold) players[_addr].gold += _value;\n        else players[_addr].balance += _value;\n    }\n\n    function burn(address _addr, uint256 _value, bool _gold) external {\n        require(hasRole(MANAGER_ROLE, msg.sender), \"Caller is not a manager\");\n        require(players[_addr].upline != address(0) || _addr == owner(), \"Player not register\");\n        \n        _payout(_addr);\n\n        if(_gold) {\n            require(players[_addr].gold >= _value, \"Insufficient funds\");\n\n            players[_addr].gold -= _value;\n        }\n        else {\n            require(players[_addr].balance >= _value, \"Insufficient funds\");\n\n            players[_addr].balance -= _value;\n        }\n    }\n\n    function rate() external view returns(uint256) {\n        return _rate > 0 ? _rate : Uniswap(UniswapFactory(0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95).getExchange(0x6B175474E89094C44Da98b954EedeAC495271d0F)).getEthToTokenInputPrice(1 ether) / 1e18;\n    }\n    \n    function packetByValue(uint256 _value) external view returns(uint8) {\n        for(uint8 i = 0; i < packets.length; i++) {\n            if(_value >= packets[i].min_price && _value <= packets[i].max_price) {\n                return i;\n            }\n        }\n\n        revert(\"Packet not found\");\n    }\n\n    function payoutOf(address _addr) view external returns(uint256 value) {\n        Player storage player = players[_addr];\n\n        for(uint256 i = 0; i < player.packets.length; i++) {\n            PlayerPacket storage packet = player.packets[i];\n\n            if(!packet.close) {\n                uint32 from = player.last_payout > packet.time ? player.last_payout : packet.time;\n\n                if(from < last_change_percent) {\n                    from = last_change_percent;\n                }\n\n                uint32 days_left = uint32((block.timestamp - from) / 10 minutes);\n\n                if(days_left > 0) {\n                    uint256 max_value = packet.value * packets[packet.packet].factor;\n                    uint256 val = packet.value * day_percent * days_left / 1000;\n                    \n                    value += val > max_value ? max_value : val;\n                }\n            }\n        }\n    }\n    \n    function balanceOf(address _addr) view external returns(uint256 balance, uint256 payouts, uint256 gold) {\n        uint256 cap = this.playerPacketsCapOf(_addr);\n        uint256 pay = this.payoutOf(_addr);\n\n        if(players[_addr].payout + pay >= cap) {\n            pay = cap - players[_addr].payout;\n        }\n\n        return (players[_addr].balance + (pay * 9 / 10), players[_addr].payout + pay, players[_addr].gold + (pay / 10));\n    }\n\n    function playerPacketsCapOf(address _addr) view external returns(uint256 cap) {\n        Player storage player = players[_addr];\n\n        for(uint256 i = 0; i < player.packets.length; i++) {\n            PlayerPacket storage packet = player.packets[i];\n\n            cap += packet.value * packets[packet.packet].factor;\n        }\n    }\n    \n    function playerRewardOf(address _addr) view external returns(uint256 reward) {\n        if(players[_addr].pool_level > 0) {\n            (,reward) = this.poolRewardOf(players[_addr].pool_level - 1);\n        }\n    }\n\n    function poolRewardOf(uint8 _pool) view external returns(uint256 pls, uint256 reward) {\n        uint8 pl_pool = _pool + 1;\n\n        for(uint256 i = 0; i < pools[_pool].players.length; i++) {\n            if(players[pools[_pool].players[i]].pool_level == pl_pool) {\n                pls++;\n            }\n        }\n\n        if(pls > 0 && pools[_pool].balance > 0) {\n            reward = pools[_pool].balance / pls;\n        }\n    }\n    \n    function structureInvestOf(address _addr) view external returns(uint256 res) {\n        res += players[_addr].invest;\n\n        for(uint256 i = 0; i < players[_addr].referrals.length; i++) {\n            res += this.structureInvestOf(players[_addr].referrals[i]);\n        }\n    }\n    \n    function regAndComInvestOf(address _addr) view external returns(uint256 reg, uint256 com) {\n        for(uint256 i = 0; i < players[_addr].referrals.length; i++) {\n            uint256 val = this.structureInvestOf(players[_addr].referrals[i]);\n\n            if(val > reg) {\n                reg = val;\n            }\n\n            com += val;\n        }\n\n        com -= reg;\n    }\n}\n\ncontract Game is Ownable {\n    struct Round {\n        uint256 count;\n        uint256 amount;\n        address[] queue;\n        address[] winners;\n    }\n    \n    INewWorld public world;\n\n    Round[] public rounds;\n\n    event NewRound(uint256 indexed round, uint256 count, uint256 amount);\n    event Winner(address indexed addr, uint256 round, uint256 amount);\n\n    constructor(address _world) public {\n        world = INewWorld(_world);\n\n        _newRound(20, 1e21);\n    }\n\n    function _newRound(uint256 _count, uint256 _amount) private {\n        rounds.push(Round({\n            count: _count,\n            amount: _amount,\n            queue: new address[](0),\n            winners: new address[](0)\n        }));\n\n        emit NewRound(rounds.length - 1, _count, _amount);\n    }\n\n    function _inArray(address[] storage _arr, address _addr) private view returns(bool) {\n        for(uint256 i = 0; i < _arr.length; i++) {\n            if(_arr[i] == _addr) {\n                return true;\n            }\n        }\n    }\n\n    function registration() external {\n        (uint256 balance,, uint256 gold) = world.balanceOf(msg.sender);\n        \n        require(balance > 0 || gold > 0, \"Player not found\");\n        require(!_inArray(rounds[rounds.length - 1].queue, msg.sender), \"Player already in game\");\n        \n        rounds[rounds.length - 1].queue.push(msg.sender);\n    }\n\n    function draw(uint256[] calldata _winners, uint256 _next_count, uint256 _next_amount) external onlyOwner {\n        Round storage round = rounds[rounds.length - 1];\n\n        uint256 win = round.amount / _winners.length;\n\n        for(uint256 i = 0; i < _winners.length; i++) {\n            address addr = round.queue[_winners[i]];\n\n            round.winners.push(addr);\n            \n            world.mint(addr, win, true);\n            \n            emit Winner(addr, rounds.length - 1, win);\n        }\n        \n        _newRound(_next_count, _next_amount);\n    }\n\n    function getRound() view public returns(uint256) {\n        return rounds.length - 1;\n    }\n\n    function getQueue(uint256 _round) view public returns(address[] memory) {\n        return rounds[_round].queue;\n    }\n\n    function getWinners(uint256 _round) view public returns(address[] memory) {\n        return rounds[_round].winners;\n    }\n}\n\ncontract Roulette is ProvableRandom {\n    struct Room {\n        uint256 price;\n        uint8 members;\n        uint8 last_win_number;\n        address last_win_address;\n        mapping(uint8 => address) users;\n    }\n    \n    INewWorld public world;\n\n    Room[] private rooms;\n    \n    event Buy(uint256 indexed room, address indexed addr, uint256 number);\n    event Winner(uint256 indexed room, address indexed addr, uint256 number);\n\n    constructor(address _world) public {\n        world = INewWorld(_world);\n\n        rooms.push(Room(2e18, 0, 0, address(0)));\n        rooms.push(Room(5e18, 0, 0, address(0)));\n        rooms.push(Room(1e19, 0, 0, address(0)));\n        rooms.push(Room(5e19, 0, 0, address(0)));\n        rooms.push(Room(1e20, 0, 0, address(0)));\n    }\n\n    receive() payable external {}\n\n    function _draw(uint8 _room) private {\n        random(uint256(_room));\n    }\n\n    function _randomCallback(uint256 _rand, uint256 _data) internal override {\n        uint8 room = uint8(_data);\n        uint8 number = uint8(_rand % 12);\n\n        world.mint(rooms[room].users[number], rooms[room].price * 10, false);\n\n        rooms[room].last_win_number = number;\n        rooms[room].last_win_address = rooms[room].users[number];\n        rooms[room].members = 0;\n        \n        emit Winner(room, rooms[room].users[number], number);\n\n        for(uint8 i = 0; i < 12; i++) {\n            rooms[room].users[i] = address(0);\n        }\n    }\n\n    function buy(uint8 _room, uint8 _number) external {\n        require(rooms[_room].price > 0, \"Room not found\");\n        require(_number >= 0 && _number <= 11, \"Bad number\");\n        require(rooms[_room].users[_number] == address(0), \"Number already use\");\n\n        (uint256 balance,, uint256 gold) = world.balanceOf(msg.sender);\n\n        require(balance + gold >= rooms[_room].price, \"Insufficient funds\");\n        \n        if(gold < rooms[_room].price) {\n            world.burn(msg.sender, rooms[_room].price - gold, false);\n            world.burn(msg.sender, gold, true);\n        }\n        else world.burn(msg.sender, rooms[_room].price, true);\n        \n        (address upline,,,,,,) = world.players(msg.sender);\n        if(upline != address(0)) {\n            world.mint(upline, rooms[_room].price * 8 / 100, false);\n        }\n\n        rooms[_room].users[_number] = msg.sender;\n        rooms[_room].members++;\n        \n        if(rooms[_room].members >= 12) {\n            _draw(_room);\n        }\n\n        emit Buy(_room, msg.sender, _number);\n    }\n\n    function draw(uint8 _room) external onlyOwner {\n        _draw(_room);\n    }\n    \n    function destruct() external onlyOwner {\n        selfdestruct(payable(owner()));\n    }\n    \n    function getRoomInfo(uint8 _room) view public returns(address[12] memory fill, address last_win_address, uint8 last_win_number) {\n        for(uint8 i = 0; i < 12; i++) {\n            fill[i] = rooms[_room].users[i];\n        }\n\n        return (fill, rooms[_room].last_win_address, rooms[_room].last_win_number);\n    }\n}"},"github.com/OpenZeppelin/openzeppelin-contracts/contracts/GSN/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"github.com/OpenZeppelin/openzeppelin-contracts/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../utils/EnumerableSet.sol\";\nimport \"../utils/Address.sol\";\nimport \"../GSN/Context.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"},"github.com/OpenZeppelin/openzeppelin-contracts/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"github.com/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n"},"github.com/OpenZeppelin/openzeppelin-contracts/contracts/utils/EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n * (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"},"github.com/provable-things/ethereum-api/blob/master/provableAPI_0.6.sol":{"content":"// <provableAPI>\n/*\nCopyright (c) 2015-2016 Oraclize SRL\nCopyright (c) 2016-2019 Oraclize LTD\nCopyright (c) 2019-2020 Provable Things Limited\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\npragma solidity > 0.6.1 < 0.7.0; // Incompatible compiler version - please select a compiler within the stated pragma range, or use a different version of the provableAPI!\n\n// Dummy contract only used to emit to end-user they are using wrong solc\nabstract contract solcChecker {\n/* INCOMPATIBLE SOLC: import the following instead: \"github.com/oraclize/ethereum-api/oraclizeAPI_0.4.sol\" */ function f(bytes calldata x) virtual external;\n}\n\ninterface ProvableI {\n\n    function cbAddress() external returns (address _cbAddress);\n    function setProofType(byte _proofType) external;\n    function setCustomGasPrice(uint _gasPrice) external;\n    function getPrice(string calldata _datasource) external returns (uint _dsprice);\n    function randomDS_getSessionPubKeyHash() external view returns (bytes32 _sessionKeyHash);\n    function getPrice(string calldata _datasource, uint _gasLimit)  external returns (uint _dsprice);\n    function queryN(uint _timestamp, string calldata _datasource, bytes calldata _argN) external payable returns (bytes32 _id);\n    function query(uint _timestamp, string calldata _datasource, string calldata _arg) external payable returns (bytes32 _id);\n    function query2(uint _timestamp, string calldata _datasource, string calldata _arg1, string calldata _arg2) external payable returns (bytes32 _id);\n    function query_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg, uint _gasLimit) external payable returns (bytes32 _id);\n    function queryN_withGasLimit(uint _timestamp, string calldata _datasource, bytes calldata _argN, uint _gasLimit) external payable returns (bytes32 _id);\n    function query2_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg1, string calldata _arg2, uint _gasLimit) external payable returns (bytes32 _id);\n}\n\ninterface OracleAddrResolverI {\n    function getAddress() external returns (address _address);\n}\n/*\nBegin solidity-cborutils\nhttps://github.com/smartcontractkit/solidity-cborutils\nMIT License\nCopyright (c) 2018 SmartContract ChainLink, Ltd.\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\nlibrary Buffer {\n\n    struct buffer {\n        bytes buf;\n        uint capacity;\n    }\n\n    function init(buffer memory _buf, uint _capacity) internal pure {\n        uint capacity = _capacity;\n        if (capacity % 32 != 0) {\n            capacity += 32 - (capacity % 32);\n        }\n        _buf.capacity = capacity; // Allocate space for the buffer data\n        assembly {\n            let ptr := mload(0x40)\n            mstore(_buf, ptr)\n            mstore(ptr, 0)\n            mstore(0x40, add(ptr, capacity))\n        }\n    }\n\n    function resize(buffer memory _buf, uint _capacity) private pure {\n        bytes memory oldbuf = _buf.buf;\n        init(_buf, _capacity);\n        append(_buf, oldbuf);\n    }\n\n    function max(uint _a, uint _b) private pure returns (uint _max) {\n        if (_a > _b) {\n            return _a;\n        }\n        return _b;\n    }\n    /**\n      * @dev Appends a byte array to the end of the buffer. Resizes if doing so\n      *      would exceed the capacity of the buffer.\n      * @param _buf The buffer to append to.\n      * @param _data The data to append.\n      * @return _buffer The original buffer.\n      *\n      */\n    function append(buffer memory _buf, bytes memory _data) internal pure returns (buffer memory _buffer) {\n        if (_data.length + _buf.buf.length > _buf.capacity) {\n            resize(_buf, max(_buf.capacity, _data.length) * 2);\n        }\n        uint dest;\n        uint src;\n        uint len = _data.length;\n        assembly {\n            let bufptr := mload(_buf) // Memory address of the buffer data\n            let buflen := mload(bufptr) // Length of existing buffer data\n            dest := add(add(bufptr, buflen), 32) // Start address = buffer address + buffer length + sizeof(buffer length)\n            mstore(bufptr, add(buflen, mload(_data))) // Update buffer length\n            src := add(_data, 32)\n        }\n        for(; len >= 32; len -= 32) { // Copy word-length chunks while possible\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n        uint mask = 256 ** (32 - len) - 1; // Copy remaining bytes\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n        return _buf;\n    }\n    /**\n      *\n      * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n      * exceed the capacity of the buffer.\n      * @param _buf The buffer to append to.\n      * @param _data The data to append.\n      *\n      */\n    function append(buffer memory _buf, uint8 _data) internal pure {\n        if (_buf.buf.length + 1 > _buf.capacity) {\n            resize(_buf, _buf.capacity * 2);\n        }\n        assembly {\n            let bufptr := mload(_buf) // Memory address of the buffer data\n            let buflen := mload(bufptr) // Length of existing buffer data\n            let dest := add(add(bufptr, buflen), 32) // Address = buffer address + buffer length + sizeof(buffer length)\n            mstore8(dest, _data)\n            mstore(bufptr, add(buflen, 1)) // Update buffer length\n        }\n    }\n    /**\n      *\n      * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n      * exceed the capacity of the buffer.\n      * @param _buf The buffer to append to.\n      * @param _data The data to append.\n      * @return _buffer The original buffer.\n      *\n      */\n    function appendInt(buffer memory _buf, uint _data, uint _len) internal pure returns (buffer memory _buffer) {\n        if (_len + _buf.buf.length > _buf.capacity) {\n            resize(_buf, max(_buf.capacity, _len) * 2);\n        }\n        uint mask = 256 ** _len - 1;\n        assembly {\n            let bufptr := mload(_buf) // Memory address of the buffer data\n            let buflen := mload(bufptr) // Length of existing buffer data\n            let dest := add(add(bufptr, buflen), _len) // Address = buffer address + buffer length + sizeof(buffer length) + len\n            mstore(dest, or(and(mload(dest), not(mask)), _data))\n            mstore(bufptr, add(buflen, _len)) // Update buffer length\n        }\n        return _buf;\n    }\n}\n\nlibrary CBOR {\n\n    using Buffer for Buffer.buffer;\n\n    uint8 private constant MAJOR_TYPE_INT = 0;\n    uint8 private constant MAJOR_TYPE_MAP = 5;\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\n    uint8 private constant MAJOR_TYPE_STRING = 3;\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n    function encodeType(Buffer.buffer memory _buf, uint8 _major, uint _value) private pure {\n        if (_value <= 23) {\n            _buf.append(uint8((_major << 5) | _value));\n        } else if (_value <= 0xFF) {\n            _buf.append(uint8((_major << 5) | 24));\n            _buf.appendInt(_value, 1);\n        } else if (_value <= 0xFFFF) {\n            _buf.append(uint8((_major << 5) | 25));\n            _buf.appendInt(_value, 2);\n        } else if (_value <= 0xFFFFFFFF) {\n            _buf.append(uint8((_major << 5) | 26));\n            _buf.appendInt(_value, 4);\n        } else if (_value <= 0xFFFFFFFFFFFFFFFF) {\n            _buf.append(uint8((_major << 5) | 27));\n            _buf.appendInt(_value, 8);\n        }\n    }\n\n    function encodeIndefiniteLengthType(Buffer.buffer memory _buf, uint8 _major) private pure {\n        _buf.append(uint8((_major << 5) | 31));\n    }\n\n    function encodeUInt(Buffer.buffer memory _buf, uint _value) internal pure {\n        encodeType(_buf, MAJOR_TYPE_INT, _value);\n    }\n\n    function encodeInt(Buffer.buffer memory _buf, int _value) internal pure {\n        if (_value >= 0) {\n            encodeType(_buf, MAJOR_TYPE_INT, uint(_value));\n        } else {\n            encodeType(_buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - _value));\n        }\n    }\n\n    function encodeBytes(Buffer.buffer memory _buf, bytes memory _value) internal pure {\n        encodeType(_buf, MAJOR_TYPE_BYTES, _value.length);\n        _buf.append(_value);\n    }\n\n    function encodeString(Buffer.buffer memory _buf, string memory _value) internal pure {\n        encodeType(_buf, MAJOR_TYPE_STRING, bytes(_value).length);\n        _buf.append(bytes(_value));\n    }\n\n    function startArray(Buffer.buffer memory _buf) internal pure {\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_ARRAY);\n    }\n\n    function startMap(Buffer.buffer memory _buf) internal pure {\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_MAP);\n    }\n\n    function endSequence(Buffer.buffer memory _buf) internal pure {\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_CONTENT_FREE);\n    }\n}\n/*\nEnd solidity-cborutils\n*/\ncontract usingProvable {\n\n    using CBOR for Buffer.buffer;\n\n    ProvableI provable;\n    OracleAddrResolverI OAR;\n\n    uint constant day = 60 * 60 * 24;\n    uint constant week = 60 * 60 * 24 * 7;\n    uint constant month = 60 * 60 * 24 * 30;\n\n    byte constant proofType_NONE = 0x00;\n    byte constant proofType_Ledger = 0x30;\n    byte constant proofType_Native = 0xF0;\n    byte constant proofStorage_IPFS = 0x01;\n    byte constant proofType_Android = 0x40;\n    byte constant proofType_TLSNotary = 0x10;\n\n    string provable_network_name;\n    uint8 constant networkID_auto = 0;\n    uint8 constant networkID_morden = 2;\n    uint8 constant networkID_mainnet = 1;\n    uint8 constant networkID_testnet = 2;\n    uint8 constant networkID_consensys = 161;\n\n    mapping(bytes32 => bytes32) provable_randomDS_args;\n    mapping(bytes32 => bool) provable_randomDS_sessionKeysHashVerified;\n\n    modifier provableAPI {\n        if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {\n            provable_setNetwork(networkID_auto);\n        }\n        if (address(provable) != OAR.getAddress()) {\n            provable = ProvableI(OAR.getAddress());\n        }\n        _;\n    }\n\n    modifier provable_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {\n        // RandomDS Proof Step 1: The prefix has to match 'LP\\x01' (Ledger Proof version 1)\n        require((_proof[0] == \"L\") && (_proof[1] == \"P\") && (uint8(_proof[2]) == uint8(1)));\n        bool proofVerified = provable_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), provable_getNetworkName());\n        require(proofVerified);\n        _;\n    }\n\n    function provable_setNetwork(uint8 _networkID) internal returns (bool _networkSet) {\n      _networkID; // NOTE: Silence the warning and remain backwards compatible\n      return provable_setNetwork();\n    }\n\n    function provable_setNetworkName(string memory _network_name) internal {\n        provable_network_name = _network_name;\n    }\n\n    function provable_getNetworkName() internal view returns (string memory _networkName) {\n        return provable_network_name;\n    }\n\n    function provable_setNetwork() internal returns (bool _networkSet) {\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) { //mainnet\n            OAR = OracleAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n            provable_setNetworkName(\"eth_mainnet\");\n            return true;\n        }\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0) { //ropsten testnet\n            OAR = OracleAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\n            provable_setNetworkName(\"eth_ropsten3\");\n            return true;\n        }\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0) { //kovan testnet\n            OAR = OracleAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\n            provable_setNetworkName(\"eth_kovan\");\n            return true;\n        }\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0) { //rinkeby testnet\n            OAR = OracleAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\n            provable_setNetworkName(\"eth_rinkeby\");\n            return true;\n        }\n        if (getCodeSize(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41) > 0) { //goerli testnet\n            OAR = OracleAddrResolverI(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41);\n            provable_setNetworkName(\"eth_goerli\");\n            return true;\n        }\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0) { //ethereum-bridge\n            OAR = OracleAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\n            return true;\n        }\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0) { //ether.camp ide\n            OAR = OracleAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\n            return true;\n        }\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0) { //browser-solidity\n            OAR = OracleAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * @dev The following `__callback` functions are just placeholders ideally\n     *      meant to be defined in child contract when proofs are used.\n     *      The function bodies simply silence compiler warnings.\n     */\n    function __callback(bytes32 _myid, string memory _result) virtual public {\n        __callback(_myid, _result, new bytes(0));\n    }\n\n    function __callback(bytes32 _myid, string memory _result, bytes memory _proof) virtual public {\n      _myid; _result; _proof;\n      provable_randomDS_args[bytes32(0)] = bytes32(0);\n    }\n\n    function provable_getPrice(string memory _datasource) provableAPI internal returns (uint _queryPrice) {\n        return provable.getPrice(_datasource);\n    }\n\n    function provable_getPrice(string memory _datasource, uint _gasLimit) provableAPI internal returns (uint _queryPrice) {\n        return provable.getPrice(_datasource, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string memory _arg) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        return provable.query{value: price}(0, _datasource, _arg);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string memory _arg) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        return provable.query{value: price}(_timestamp, _datasource, _arg);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource,_gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        return provable.query_withGasLimit{value: price}(_timestamp, _datasource, _arg, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string memory _arg, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n           return 0; // Unexpectedly high price\n        }\n        return provable.query_withGasLimit{value: price}(0, _datasource, _arg, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string memory _arg1, string memory _arg2) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        return provable.query2{value: price}(0, _datasource, _arg1, _arg2);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        return provable.query2{value: price}(_timestamp, _datasource, _arg1, _arg2);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        return provable.query2_withGasLimit{value: price}(_timestamp, _datasource, _arg1, _arg2, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        return provable.query2_withGasLimit{value: price}(0, _datasource, _arg1, _arg2, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[] memory _argN) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = stra2cbor(_argN);\n        return provable.queryN{value: price}(0, _datasource, args);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[] memory _argN) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = stra2cbor(_argN);\n        return provable.queryN{value: price}(_timestamp, _datasource, args);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = stra2cbor(_argN);\n        return provable.queryN_withGasLimit{value: price}(_timestamp, _datasource, args, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = stra2cbor(_argN);\n        return provable.queryN_withGasLimit{value: price}(0, _datasource, args, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[1] memory _args) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = _args[0];\n        return provable_query(_datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[1] memory _args) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = _args[0];\n        return provable_query(_timestamp, _datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[1] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = _args[0];\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[1] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = _args[0];\n        return provable_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[2] memory _args) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return provable_query(_datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[2] memory _args) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return provable_query(_timestamp, _datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[2] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[2] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return provable_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[3] memory _args) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return provable_query(_datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[3] memory _args) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return provable_query(_timestamp, _datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[3] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[3] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return provable_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[4] memory _args) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return provable_query(_datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[4] memory _args) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return provable_query(_timestamp, _datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[4] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[4] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return provable_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[5] memory _args) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return provable_query(_datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[5] memory _args) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return provable_query(_timestamp, _datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[5] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[5] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return provable_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[] memory _argN) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = ba2cbor(_argN);\n        return provable.queryN{value: price}(0, _datasource, args);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[] memory _argN) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource);\n        if (price > 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = ba2cbor(_argN);\n        return provable.queryN{value: price}(_timestamp, _datasource, args);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = ba2cbor(_argN);\n        return provable.queryN_withGasLimit{value: price}(_timestamp, _datasource, args, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource, _gasLimit);\n        if (price > 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = ba2cbor(_argN);\n        return provable.queryN_withGasLimit{value: price}(0, _datasource, args, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[1] memory _args) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = _args[0];\n        return provable_query(_datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[1] memory _args) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = _args[0];\n        return provable_query(_timestamp, _datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[1] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = _args[0];\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[1] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = _args[0];\n        return provable_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[2] memory _args) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return provable_query(_datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[2] memory _args) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return provable_query(_timestamp, _datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[2] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[2] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return provable_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[3] memory _args) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return provable_query(_datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[3] memory _args) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return provable_query(_timestamp, _datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[3] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[3] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return provable_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[4] memory _args) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return provable_query(_datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[4] memory _args) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return provable_query(_timestamp, _datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[4] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[4] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return provable_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[5] memory _args) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return provable_query(_datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[5] memory _args) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return provable_query(_timestamp, _datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[5] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[5] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return provable_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function provable_setProof(byte _proofP) provableAPI internal {\n        return provable.setProofType(_proofP);\n    }\n\n\n    function provable_cbAddress() provableAPI internal returns (address _callbackAddress) {\n        return provable.cbAddress();\n    }\n\n    function getCodeSize(address _addr) view internal returns (uint _size) {\n        assembly {\n            _size := extcodesize(_addr)\n        }\n    }\n\n    function provable_setCustomGasPrice(uint _gasPrice) provableAPI internal {\n        return provable.setCustomGasPrice(_gasPrice);\n    }\n\n    function provable_randomDS_getSessionPubKeyHash() provableAPI internal returns (bytes32 _sessionKeyHash) {\n        return provable.randomDS_getSessionPubKeyHash();\n    }\n\n    function parseAddr(string memory _a) internal pure returns (address _parsedAddress) {\n        bytes memory tmp = bytes(_a);\n        uint160 iaddr = 0;\n        uint160 b1;\n        uint160 b2;\n        for (uint i = 2; i < 2 + 2 * 20; i += 2) {\n            iaddr *= 256;\n            b1 = uint160(uint8(tmp[i]));\n            b2 = uint160(uint8(tmp[i + 1]));\n            if ((b1 >= 97) && (b1 <= 102)) {\n                b1 -= 87;\n            } else if ((b1 >= 65) && (b1 <= 70)) {\n                b1 -= 55;\n            } else if ((b1 >= 48) && (b1 <= 57)) {\n                b1 -= 48;\n            }\n            if ((b2 >= 97) && (b2 <= 102)) {\n                b2 -= 87;\n            } else if ((b2 >= 65) && (b2 <= 70)) {\n                b2 -= 55;\n            } else if ((b2 >= 48) && (b2 <= 57)) {\n                b2 -= 48;\n            }\n            iaddr += (b1 * 16 + b2);\n        }\n        return address(iaddr);\n    }\n\n    function strCompare(string memory _a, string memory _b) internal pure returns (int _returnCode) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length < minLength) {\n            minLength = b.length;\n        }\n        for (uint i = 0; i < minLength; i ++) {\n            if (a[i] < b[i]) {\n                return -1;\n            } else if (a[i] > b[i]) {\n                return 1;\n            }\n        }\n        if (a.length < b.length) {\n            return -1;\n        } else if (a.length > b.length) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    function indexOf(string memory _haystack, string memory _needle) internal pure returns (int _returnCode) {\n        bytes memory h = bytes(_haystack);\n        bytes memory n = bytes(_needle);\n        if (h.length < 1 || n.length < 1 || (n.length > h.length)) {\n            return -1;\n        } else if (h.length > (2 ** 128 - 1)) {\n            return -1;\n        } else {\n            uint subindex = 0;\n            for (uint i = 0; i < h.length; i++) {\n                if (h[i] == n[0]) {\n                    subindex = 1;\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]) {\n                        subindex++;\n                    }\n                    if (subindex == n.length) {\n                        return int(i);\n                    }\n                }\n            }\n            return -1;\n        }\n    }\n\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory _concatenatedString) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory _concatenatedString) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory _concatenatedString) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        uint i = 0;\n        for (i = 0; i < _ba.length; i++) {\n            babcde[k++] = _ba[i];\n        }\n        for (i = 0; i < _bb.length; i++) {\n            babcde[k++] = _bb[i];\n        }\n        for (i = 0; i < _bc.length; i++) {\n            babcde[k++] = _bc[i];\n        }\n        for (i = 0; i < _bd.length; i++) {\n            babcde[k++] = _bd[i];\n        }\n        for (i = 0; i < _be.length; i++) {\n            babcde[k++] = _be[i];\n        }\n        return string(babcde);\n    }\n\n    function safeParseInt(string memory _a) internal pure returns (uint _parsedInt) {\n        return safeParseInt(_a, 0);\n    }\n\n    function safeParseInt(string memory _a, uint _b) internal pure returns (uint _parsedInt) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i = 0; i < bresult.length; i++) {\n            if ((uint(uint8(bresult[i])) >= 48) && (uint(uint8(bresult[i])) <= 57)) {\n                if (decimals) {\n                   if (_b == 0) break;\n                    else _b--;\n                }\n                mint *= 10;\n                mint += uint(uint8(bresult[i])) - 48;\n            } else if (uint(uint8(bresult[i])) == 46) {\n                require(!decimals, 'More than one decimal encountered in string!');\n                decimals = true;\n            } else {\n                revert(\"Non-numeral character encountered in string!\");\n            }\n        }\n        if (_b > 0) {\n            mint *= 10 ** _b;\n        }\n        return mint;\n    }\n\n    function parseInt(string memory _a) internal pure returns (uint _parsedInt) {\n        return parseInt(_a, 0);\n    }\n\n    function parseInt(string memory _a, uint _b) internal pure returns (uint _parsedInt) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i = 0; i < bresult.length; i++) {\n            if ((uint(uint8(bresult[i])) >= 48) && (uint(uint8(bresult[i])) <= 57)) {\n                if (decimals) {\n                   if (_b == 0) {\n                       break;\n                   } else {\n                       _b--;\n                   }\n                }\n                mint *= 10;\n                mint += uint(uint8(bresult[i])) - 48;\n            } else if (uint(uint8(bresult[i])) == 46) {\n                decimals = true;\n            }\n        }\n        if (_b > 0) {\n            mint *= 10 ** _b;\n        }\n        return mint;\n    }\n\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (_i != 0) {\n            bstr[k--] = byte(uint8(48 + _i % 10));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n\n    function stra2cbor(string[] memory _arr) internal pure returns (bytes memory _cborEncoding) {\n        safeMemoryCleaner();\n        Buffer.buffer memory buf;\n        Buffer.init(buf, 1024);\n        buf.startArray();\n        for (uint i = 0; i < _arr.length; i++) {\n            buf.encodeString(_arr[i]);\n        }\n        buf.endSequence();\n        return buf.buf;\n    }\n\n    function ba2cbor(bytes[] memory _arr) internal pure returns (bytes memory _cborEncoding) {\n        safeMemoryCleaner();\n        Buffer.buffer memory buf;\n        Buffer.init(buf, 1024);\n        buf.startArray();\n        for (uint i = 0; i < _arr.length; i++) {\n            buf.encodeBytes(_arr[i]);\n        }\n        buf.endSequence();\n        return buf.buf;\n    }\n\n    function provable_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32 _queryId) {\n        require((_nbytes > 0) && (_nbytes <= 32));\n        _delay *= 10; // Convert from seconds to ledger timer ticks\n        bytes memory nbytes = new bytes(1);\n        nbytes[0] = byte(uint8(_nbytes));\n        bytes memory unonce = new bytes(32);\n        bytes memory sessionKeyHash = new bytes(32);\n        bytes32 sessionKeyHash_bytes32 = provable_randomDS_getSessionPubKeyHash();\n        assembly {\n            mstore(unonce, 0x20)\n            /*\n             The following variables can be relaxed.\n             Check the relaxed random contract at https://github.com/oraclize/ethereum-examples\n             for an idea on how to override and replace commit hash variables.\n            */\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number(), 1)), xor(coinbase(), timestamp())))\n            mstore(sessionKeyHash, 0x20)\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n        }\n        bytes memory delay = new bytes(32);\n        assembly {\n            mstore(add(delay, 0x20), _delay)\n        }\n        bytes memory delay_bytes8 = new bytes(8);\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\n        bytes32 queryId = provable_query(\"random\", args, _customGasLimit);\n        bytes memory delay_bytes8_left = new bytes(8);\n        assembly {\n            let x := mload(add(delay_bytes8, 0x20))\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\n        }\n        provable_randomDS_setCommitment(queryId, keccak256(abi.encodePacked(delay_bytes8_left, args[1], sha256(args[0]), args[2])));\n        return queryId;\n    }\n\n    function provable_randomDS_setCommitment(bytes32 _queryId, bytes32 _commitment) internal {\n        provable_randomDS_args[_queryId] = _commitment;\n    }\n\n    function verifySig(bytes32 _tosignh, bytes memory _dersig, bytes memory _pubkey) internal returns (bool _sigVerified) {\n        bool sigok;\n        address signer;\n        bytes32 sigr;\n        bytes32 sigs;\n        bytes memory sigr_ = new bytes(32);\n        uint offset = 4 + (uint(uint8(_dersig[3])) - 0x20);\n        sigr_ = copyBytes(_dersig, offset, 32, sigr_, 0);\n        bytes memory sigs_ = new bytes(32);\n        offset += 32 + 2;\n        sigs_ = copyBytes(_dersig, offset + (uint(uint8(_dersig[offset - 1])) - 0x20), 32, sigs_, 0);\n        assembly {\n            sigr := mload(add(sigr_, 32))\n            sigs := mload(add(sigs_, 32))\n        }\n        (sigok, signer) = safer_ecrecover(_tosignh, 27, sigr, sigs);\n        if (address(uint160(uint256(keccak256(_pubkey)))) == signer) {\n            return true;\n        } else {\n            (sigok, signer) = safer_ecrecover(_tosignh, 28, sigr, sigs);\n            return (address(uint160(uint256(keccak256(_pubkey)))) == signer);\n        }\n    }\n\n    function provable_randomDS_proofVerify__sessionKeyValidity(bytes memory _proof, uint _sig2offset) internal returns (bool _proofVerified) {\n        bool sigok;\n        // Random DS Proof Step 6: Verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\n        bytes memory sig2 = new bytes(uint(uint8(_proof[_sig2offset + 1])) + 2);\n        copyBytes(_proof, _sig2offset, sig2.length, sig2, 0);\n        bytes memory appkey1_pubkey = new bytes(64);\n        copyBytes(_proof, 3 + 1, 64, appkey1_pubkey, 0);\n        bytes memory tosign2 = new bytes(1 + 65 + 32);\n        tosign2[0] = byte(uint8(1)); //role\n        copyBytes(_proof, _sig2offset - 65, 65, tosign2, 1);\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\n        copyBytes(CODEHASH, 0, 32, tosign2, 1 + 65);\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\n        if (!sigok) {\n            return false;\n        }\n        // Random DS Proof Step 7: Verify the APPKEY1 provenance (must be signed by Ledger)\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\n        bytes memory tosign3 = new bytes(1 + 65);\n        tosign3[0] = 0xFE;\n        copyBytes(_proof, 3, 65, tosign3, 1);\n        bytes memory sig3 = new bytes(uint(uint8(_proof[3 + 65 + 1])) + 2);\n        copyBytes(_proof, 3 + 65, sig3.length, sig3, 0);\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\n        return sigok;\n    }\n\n    function provable_randomDS_proofVerify__returnCode(bytes32 _queryId, string memory _result, bytes memory _proof) internal returns (uint8 _returnCode) {\n        // Random DS Proof Step 1: The prefix has to match 'LP\\x01' (Ledger Proof version 1)\n        if ((_proof[0] != \"L\") || (_proof[1] != \"P\") || (uint8(_proof[2]) != uint8(1))) {\n            return 1;\n        }\n        bool proofVerified = provable_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), provable_getNetworkName());\n        if (!proofVerified) {\n            return 2;\n        }\n        return 0;\n    }\n\n    function matchBytes32Prefix(bytes32 _content, bytes memory _prefix, uint _nRandomBytes) internal pure returns (bool _matchesPrefix) {\n        bool match_ = true;\n        require(_prefix.length == _nRandomBytes);\n        for (uint256 i = 0; i< _nRandomBytes; i++) {\n            if (_content[i] != _prefix[i]) {\n                match_ = false;\n            }\n        }\n        return match_;\n    }\n\n    function provable_randomDS_proofVerify__main(bytes memory _proof, bytes32 _queryId, bytes memory _result, string memory _contextName) internal returns (bool _proofVerified) {\n        // Random DS Proof Step 2: The unique keyhash has to match with the sha256 of (context name + _queryId)\n        uint ledgerProofLength = 3 + 65 + (uint(uint8(_proof[3 + 65 + 1])) + 2) + 32;\n        bytes memory keyhash = new bytes(32);\n        copyBytes(_proof, ledgerProofLength, 32, keyhash, 0);\n        if (!(keccak256(keyhash) == keccak256(abi.encodePacked(sha256(abi.encodePacked(_contextName, _queryId)))))) {\n            return false;\n        }\n        bytes memory sig1 = new bytes(uint(uint8(_proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1])) + 2);\n        copyBytes(_proof, ledgerProofLength + (32 + 8 + 1 + 32), sig1.length, sig1, 0);\n        // Random DS Proof Step 3: We assume sig1 is valid (it will be verified during step 5) and we verify if '_result' is the _prefix of sha256(sig1)\n        if (!matchBytes32Prefix(sha256(sig1), _result, uint(uint8(_proof[ledgerProofLength + 32 + 8])))) {\n            return false;\n        }\n        // Random DS Proof Step 4: Commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\n        // This is to verify that the computed args match with the ones specified in the query.\n        bytes memory commitmentSlice1 = new bytes(8 + 1 + 32);\n        copyBytes(_proof, ledgerProofLength + 32, 8 + 1 + 32, commitmentSlice1, 0);\n        bytes memory sessionPubkey = new bytes(64);\n        uint sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65;\n        copyBytes(_proof, sig2offset - 64, 64, sessionPubkey, 0);\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\n        if (provable_randomDS_args[_queryId] == keccak256(abi.encodePacked(commitmentSlice1, sessionPubkeyHash))) { //unonce, nbytes and sessionKeyHash match\n            delete provable_randomDS_args[_queryId];\n        } else return false;\n        // Random DS Proof Step 5: Validity verification for sig1 (keyhash and args signed with the sessionKey)\n        bytes memory tosign1 = new bytes(32 + 8 + 1 + 32);\n        copyBytes(_proof, ledgerProofLength, 32 + 8 + 1 + 32, tosign1, 0);\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) {\n            return false;\n        }\n        // Verify if sessionPubkeyHash was verified already, if not.. let's do it!\n        if (!provable_randomDS_sessionKeysHashVerified[sessionPubkeyHash]) {\n            provable_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = provable_randomDS_proofVerify__sessionKeyValidity(_proof, sig2offset);\n        }\n        return provable_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\n    }\n    /*\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    */\n    function copyBytes(bytes memory _from, uint _fromOffset, uint _length, bytes memory _to, uint _toOffset) internal pure returns (bytes memory _copiedBytes) {\n        uint minLength = _length + _toOffset;\n        require(_to.length >= minLength); // Buffer too small. Should be a better way?\n        uint i = 32 + _fromOffset; // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\n        uint j = 32 + _toOffset;\n        while (i < (32 + _fromOffset + _length)) {\n            assembly {\n                let tmp := mload(add(_from, i))\n                mstore(add(_to, j), tmp)\n            }\n            i += 32;\n            j += 32;\n        }\n        return _to;\n    }\n    /*\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n     Duplicate Solidity's ecrecover, but catching the CALL return value\n    */\n    function safer_ecrecover(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal returns (bool _success, address _recoveredAddress) {\n        /*\n         We do our own memory management here. Solidity uses memory offset\n         0x40 to store the current end of memory. We write past it (as\n         writes are memory extensions), but don't update the offset so\n         Solidity will reuse it. The memory used here is only needed for\n         this context.\n         FIXME: inline assembly can't access return values\n        */\n        bool ret;\n        address addr;\n        assembly {\n            let size := mload(0x40)\n            mstore(size, _hash)\n            mstore(add(size, 32), _v)\n            mstore(add(size, 64), _r)\n            mstore(add(size, 96), _s)\n            ret := call(3000, 1, 0, size, 128, size, 32) // NOTE: we can reuse the request memory because we deal with the return code.\n            addr := mload(size)\n        }\n        return (ret, addr);\n    }\n    /*\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    */\n    function ecrecovery(bytes32 _hash, bytes memory _sig) internal returns (bool _success, address _recoveredAddress) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        if (_sig.length != 65) {\n            return (false, address(0));\n        }\n        /*\n         The signature format is a compact form of:\n           {bytes32 r}{bytes32 s}{uint8 v}\n         Compact means, uint8 is not padded to 32 bytes.\n        */\n        assembly {\n            r := mload(add(_sig, 32))\n            s := mload(add(_sig, 64))\n            /*\n             Here we are loading the last 32 bytes. We exploit the fact that\n             'mload' will pad with zeroes if we overread.\n             There is no 'mload8' to do this, but that would be nicer.\n            */\n            v := byte(0, mload(add(_sig, 96)))\n            /*\n              Alternative solution:\n              'byte' is not working due to the Solidity parser, so lets\n              use the second best option, 'and'\n              v := and(mload(add(_sig, 65)), 255)\n            */\n        }\n        /*\n         albeit non-transactional signatures are not specified by the YP, one would expect it\n         to match the YP range of [27, 28]\n         geth uses [0, 1] and some clients have followed. This might change, see:\n         https://github.com/ethereum/go-ethereum/issues/2053\n        */\n        if (v < 27) {\n            v += 27;\n        }\n        if (v != 27 && v != 28) {\n            return (false, address(0));\n        }\n        return safer_ecrecover(_hash, v, r, s);\n    }\n\n    function safeMemoryCleaner() internal pure {\n        assembly {\n            let fmem := mload(0x40)\n            codecopy(fmem, codesize(), sub(msize(), fmem))\n        }\n    }\n}\n// </provableAPI>"}}}