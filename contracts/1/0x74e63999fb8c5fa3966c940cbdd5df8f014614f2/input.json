{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Token.sol": {
      "content": "pragma solidity ^0.5.10;\n\ncontract Token {\n    // An `address` is comparable to an email address - it's used to identify an account on Ethereum.\n    // Addresses can represent a smart contract or an external (user) accounts.\n    // Learn more: https://solidity.readthedocs.io/en/v0.5.10/types.html#address\n    address public owner;\n\n    // A `mapping` is essentially a hash table data structure.\n    // This `mapping` assigns an unsigned integer (the token balance) to an address (the token holder).\n    // Learn more: https://solidity.readthedocs.io/en/v0.5.10/types.html#mapping-types\n    mapping (address => uint) public balances;\n\n    // Events allow for logging of activity on the blockchain.\n    // Ethereum clients can listen for events in order to react to contract state changes.\n    // Learn more: https://solidity.readthedocs.io/en/v0.5.10/contracts.html#events\n    event Transfer(address from, address to, uint amount);\n\n    // Initializes the contract's data, setting the `owner`\n    // to the address of the contract creator.\n    constructor() public {\n        // All smart contracts rely on external transactions to trigger its functions.\n        // `msg` is a global variable that includes relevant data on the given transaction,\n        // such as the address of the sender and the ETH value included in the transaction.\n        // Learn more: https://solidity.readthedocs.io/en/v0.5.10/units-and-global-variables.html#block-and-transaction-properties\n        owner = msg.sender;\n    }\n\n    // Creates an amount of new tokens and sends them to an address.\n    function mint(address receiver, uint amount) public {\n        // `require` is a control structure used to enforce certain conditions.\n        // If a `require` statement evaluates to `false`, an exception is triggered,\n        // which reverts all changes made to the state during the current call.\n        // Learn more: https://solidity.readthedocs.io/en/v0.5.10/control-structures.html#error-handling-assert-require-revert-and-exceptions\n\n        // Only the contract owner can call this function\n        require(msg.sender == owner, \"You are not the owner.\");\n\n        // Ensures a maximum amount of tokens\n        require(amount < 1e60, \"Maximum issuance succeeded\");\n\n        // Increases the balance of `receiver` by `amount`\n        balances[receiver] += amount;\n    }\n\n    // Sends an amount of existing tokens from any caller to an address.\n    function transfer(address receiver, uint amount) public {\n        // The sender must have enough tokens to send\n        require(amount <= balances[msg.sender], \"Insufficient balance.\");\n\n        // Adjusts token balances of the two addresses\n        balances[msg.sender] -= amount;\n        balances[receiver] += amount;\n\n        // Emits the event defined earlier\n        emit Transfer(msg.sender, receiver, amount);\n    }\n}\n"
    }
  }
}