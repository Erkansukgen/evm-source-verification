{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/V2_Uniswap_Swap.sol":{"content":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        //(bool success, ) = recipient.call{value:amount}(\"\"); // todo : for 0.6.0. need to check\r\n\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns(uint digits);\r\n    function name() external view returns(string memory);\r\n    function symbol() external view returns(string memory);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IPRICE{\r\n    function GetLPPrice(address pair) external view returns(uint256);\r\n    function GetLPWorth(address _pair, uint256 _amount) external view returns (uint256, uint256);\r\n    function TakeSwapFee(uint256 amt) external view returns(uint256);\r\n    function TakeStakeVolFee(uint256 amt) external view returns(uint256);\r\n    function TakeUnstakeVolFee(uint256 amt) external view returns(uint256);\r\n    function TakeUnstakeProfitFee(uint256 invest_amt, uint256 curr_amt) external view returns(bool, uint256);\r\n    function USD() external view returns (uint256);\r\n}\r\n\r\ninterface IStorage {\r\n    function Send (address _token, address _target,uint256 _amt) external;\r\n    function GetInvestList(address user) external view returns(address [] memory);\r\n    function GetUSDUnitPrice(address _target, address _pair) external view returns (uint256);\r\n    function GetTokenBalance(address _target, address _pair) external view returns (uint256);\r\n    function UpdateUSDUnitPrice(address _target, address _pair, uint256 _amt, uint256 _amtUSD) external;\r\n    function AddUSDUnitPrice(address _target, address _pair, uint256 _amt) external;\r\n    function SubUSDUnitPrice(address _target, address _pair, uint256 _amt) external;\r\n    function SetTokenBalance(address _target, address _pair, uint256 _new_balance) external;\r\n    function AddTokenBalance(address _target, address _pair, uint256 _amt) external;\r\n}\r\n\r\ncontract Swap_Uniswap is Ownable, ReentrancyGuard{\r\n    using SafeERC20 for IERC20;\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress public factory  = address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);  \r\n    address public rout     = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address private weth    = address(0);   \r\n\r\n    address private price   = address(0);\r\n    address private storage_= address(0);\r\n\r\n    uint256 public percentage_unit = 1000;\r\n    uint256 public deadline         = 1610517355401;\r\n    uint256 public maxSlippage      = 200;\r\n\r\n    // Main Net\r\n    address public DAI  = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    address public USDT = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    address public USDC = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    address public WBTC = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\r\n    \r\n    event Log(address token, address user, uint256 allowance);\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    constructor(address price_, address storage_contract) public{\r\n        price   = price_;\r\n        storage_= storage_contract;\r\n        weth    = IUniswapV2Router02(rout).WETH();\r\n    }\r\n\r\n    receive() payable external {}\r\n\r\n    function SetFactory(address _target) public onlyOwner{\r\n        require(_target != address(0), \"SetFactory: new target address is the zero address\");\r\n        factory = _target;\r\n    }\r\n    function SetRout(address _target) public onlyOwner{\r\n        require(_target != address(0), \"SetRout: new target address is the zero address\");\r\n        rout = _target;\r\n    }\r\n    function SetDAI(address _target) public onlyOwner{\r\n        require(_target != address(0), \"SetDAI: new target address is the zero address\");\r\n        DAI = _target;\r\n    }\r\n    function SetUSDT(address _target) public onlyOwner{\r\n        require(_target != address(0), \"SetUSDT: new target address is the zero address\");\r\n        USDT = _target;\r\n    }\r\n    function SetUSDC(address _target) public onlyOwner{\r\n        require(_target != address(0), \"SetUSDC: new target address is the zero address\");\r\n        USDC = _target;\r\n    }\r\n    function SetWBTC(address _target) public onlyOwner{\r\n        require(_target != address(0), \"SetWBTC: new target address is the zero address\");\r\n        WBTC = _target;\r\n    }\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    function MultiSwapList(address [] memory _fromToken_list, address [] memory _toToken_list, uint256 [] memory _fromTokenAmt_list, uint256 _max_slippage, uint256 _deadline) external payable nonReentrant  returns(uint256[] memory){\r\n        uint256[] memory num_tokens = new uint256[](_fromToken_list.length);\r\n\r\n        deadline = _deadline;\r\n        maxSlippage = _max_slippage;\r\n        for(uint i=0; i<_fromToken_list.length; i++) {\r\n            num_tokens[i]=InnerSwap(address(_fromToken_list[i]), address(_toToken_list[i]), payable(msg.sender), payable(msg.sender), _fromTokenAmt_list[i]);\r\n        } \r\n        return num_tokens;\r\n    }\r\n\r\n    function SingleSwap(address _from_token, address _to_token, uint256 _amt, uint256 _max_slippage, uint256 _deadline) external payable nonReentrant returns(uint256){\r\n        deadline = _deadline;\r\n        maxSlippage = _max_slippage;\r\n        return InnerSwap(_from_token, _to_token, payable(msg.sender), payable(msg.sender), _amt);\r\n    }\r\n\r\n    function SingleInvestToken(address _from_token, address _to_token, uint256 _amt, uint256 _max_slippage, uint256 _deadline) external payable nonReentrant returns(uint256){\r\n        deadline = _deadline;\r\n        maxSlippage = _max_slippage;\r\n        uint256 num_token = InnerSwap(_from_token, _to_token, msg.sender, payable(storage_), _amt);\r\n        IStorage(storage_).AddTokenBalance(msg.sender, _to_token, num_token);\r\n        return num_token;\r\n    }\r\n\r\n    function SingleWithdrawToken(address _from_token, address _to_token, uint256 _amt, uint256 _max_slippage, uint256 _deadline) external payable nonReentrant returns(uint256){\r\n        deadline = _deadline;\r\n        maxSlippage = _max_slippage;\r\n        uint256 pre_amt  = IERC20(_from_token).balanceOf(address(this));\r\n        IStorage(storage_).Send(_from_token, msg.sender, _amt);\r\n        _amt = (IERC20(_from_token).balanceOf(address(this))).sub(pre_amt);\r\n        if(_from_token != _to_token){\r\n            return InnerSwap(_from_token, _to_token, address(this), msg.sender, _amt);\r\n        }else{\r\n            IERC20(_to_token).safeTransfer(msg.sender,_amt);\r\n            return _amt;\r\n        }\r\n    }\r\n    \r\n    \r\n    function MultiInvestToken(address [] memory _fromToken_list, address [] memory _toToken_list, uint256 [] memory _fromTokenAmt_list, uint256 _max_slippage, uint256 _deadline) external payable nonReentrant returns(uint256[] memory){\r\n        uint256[] memory num_tokens = new uint256[](_fromToken_list.length);\r\n        \r\n        deadline = _deadline;\r\n        maxSlippage = _max_slippage;\r\n         for(uint i=0; i<_fromToken_list.length; i++) {\r\n            uint256 num_token = InnerSwap(_fromToken_list[i], _toToken_list[i], msg.sender, payable(storage_), _fromTokenAmt_list[i]);\r\n            IStorage(storage_).AddTokenBalance(msg.sender, _toToken_list[i], num_token);\r\n            num_tokens[i] = num_token;\r\n        }\r\n        return num_tokens;\r\n    }\r\n\r\n    function MultiWithdrawToken(address [] memory _fromToken_list, address [] memory _toToken_list, uint256 [] memory _fromTokenAmt_list, uint256 _max_slippage, uint256 _deadline) external payable nonReentrant returns(uint256[] memory){\r\n        uint256[] memory num_tokens = new uint256[](_fromToken_list.length);\r\n        \r\n        deadline = _deadline;\r\n        maxSlippage = _max_slippage;\r\n         for(uint i=0; i<_fromToken_list.length; i++) {\r\n            uint256 pre_amt  = IERC20(_fromToken_list[i]).balanceOf(address(this));\r\n            IStorage(storage_).Send(_fromToken_list[i], msg.sender, _fromTokenAmt_list[i]);\r\n            _fromTokenAmt_list[i] = (IERC20(_fromToken_list[i]).balanceOf(address(this))).sub(pre_amt);\r\n            \r\n            if(_fromToken_list[i] != _toToken_list[i]){\r\n                num_tokens[i] = InnerSwap(_fromToken_list[i], _toToken_list[i], address(this), msg.sender, _fromTokenAmt_list[i]);\r\n            }else{\r\n                IERC20(_toToken_list[i]).safeTransfer(msg.sender,_fromTokenAmt_list[i]);\r\n                num_tokens[i] = _fromTokenAmt_list[i];\r\n            }\r\n        }\r\n        return num_tokens;\r\n    }\r\n\r\n    function InnerSwap(address _from_token, address _to_token, address payable sender, address payable receiver, uint256 _amt) internal returns(uint256){\r\n        require(_from_token != address(0), \"InnerSwap:1\");\r\n        require(_to_token != address(0), \"InnerSwap:2\");\r\n        require(_amt > 0, \"InnerSwap:3\");\r\n\r\n        if(_from_token != weth && sender != address(this)){\r\n            IERC20(_from_token).safeTransferFrom(sender, address(this), _amt);\r\n            _amt = IERC20(_from_token).balanceOf(address(this));\r\n        }\r\n        _amt = IPRICE(price).TakeSwapFee(_amt);\r\n\r\n        (uint256[] memory amounts, address[] memory path) = this.getEstimatedTokens(_amt, _from_token, _to_token);\r\n        uint256 out = 0;\r\n        if(path[0] == weth){\r\n            out = GetTokenFromEth(amounts[0], amounts[amounts.length - 1], path, receiver);\r\n        }else if (path[path.length - 1] == weth){\r\n            //if(sender != address(this)){\r\n                //uint256 allowance = IERC20(_from_token).allowance(sender, address(this));\r\n                //IERC20(_from_token).safeTransferFrom(sender, address(this), _amt);\r\n                //IERC20(_from_token).safeTransferFrom(sender, payable(storage_), IERC20(_from_token).allowance(sender, address(this)));\r\n            //}\r\n            out =  GetEthFromToken(amounts[0], amounts[amounts.length - 1], path, receiver);\r\n        } else {\r\n            //if(sender != address(this)){\r\n                //uint256 allowance = IERC20(_from_token).allowance(sender, address(this));\r\n                //IERC20(_from_token).safeTransferFrom(sender, address(this), _amt);\r\n                //IERC20(_from_token).safeTransferFrom(sender, payable(storage_), IERC20(_from_token).allowance(sender, address(this)));\r\n            //}\r\n            out = GetTokenFromAnotherToken(amounts[0], amounts[amounts.length - 1], path, receiver);\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function GetTokenFromEth(uint256 in_amount, uint256 out_amount, address[] memory path, address payable receiver) internal returns (uint256){\r\n\t    // address[] memory path = getPath(weth, _token);\r\n        \r\n        // (uint[] memory returnedAmount, ) = this.getEstimatedTokens(_ethamount, weth, _token);\r\n        // uint256 minOut = returnedAmount[1].mul(percentage_unit.sub(maxSlippage)).div(percentage_unit);\r\n        uint256 minOut = out_amount.mul(percentage_unit.sub(maxSlippage)).div(percentage_unit);\r\n\r\n        // uint[] memory output = IUniswapV2Router02(rout).swapExactETHForTokens{value:in_amount}(minOut, path, receiver, deadline);\r\n        // return output[output.length - 1];\r\n\r\n        uint256 pre = IERC20(path[path.length - 1]).balanceOf(receiver);\r\n        IUniswapV2Router02(rout).swapExactETHForTokensSupportingFeeOnTransferTokens{value:in_amount}(minOut, path, receiver, deadline);\r\n        return (IERC20(path[path.length - 1]).balanceOf(receiver)).sub(pre);\r\n\t}\r\n\r\n    function GetEthFromToken(uint256 in_amount, uint256 out_amount, address[] memory path, address payable receiver) internal returns (uint256){\r\n\t    //address[] memory path = getPath(_token, weth);//new address[](2); //\r\n\r\n        //(uint[] memory returnedAmount, ) = this.getEstimatedTokens(_amount, _token, weth);\r\n        //uint256 minOut = returnedAmount[1].mul(percentage_unit.sub(maxSlippage)).div(percentage_unit);\r\n        uint256 minOut = out_amount.mul(percentage_unit.sub(maxSlippage)).div(percentage_unit);\r\n\r\n        IERC20(path[0]).safeApprove(rout, in_amount);\r\n        //uint[] memory output = IUniswapV2Router02(rout).swapExactTokensForETH(in_amount, minOut, path, receiver, deadline);\r\n        \r\n        uint256 pre = IERC20(path[path.length - 1]).balanceOf(receiver);\r\n        IUniswapV2Router02(rout).swapExactTokensForETHSupportingFeeOnTransferTokens(in_amount, minOut, path, receiver, deadline);\r\n\r\n        // uint256 allownace =  IERC20(path[0]).allowance(address(this), rout);\r\n        \r\n        IERC20(path[0]).safeDecreaseAllowance(rout, IERC20(path[0]).allowance(address(this), rout));\r\n\r\n\r\n        //return output[output.length - 1];\r\n        return (IERC20(path[path.length - 1]).balanceOf(receiver)).sub(pre);\r\n\t}\r\n\r\n    function GetTokenFromAnotherToken(uint256 in_amount, uint256 out_amount, address[] memory path, address payable receiver) internal returns (uint256){\r\n\t    // address[] memory path = getPath(_fromToken, _toToken);\r\n        \r\n        // (uint[] memory returnedAmount, ) = this.getEstimatedTokens(_amount, _fromToken, _toToken);\r\n        // uint256 minOut = returnedAmount[1].mul(percentage_unit.sub(maxSlippage)).div(percentage_unit);\r\n        uint256 minOut = out_amount.mul(percentage_unit.sub(maxSlippage)).div(percentage_unit);\r\n\r\n        uint256 pre = IERC20(path[path.length - 1]).balanceOf(receiver);\r\n        IERC20(path[0]).safeApprove(rout, in_amount);\r\n        //uint[] memory output = IUniswapV2Router02(rout).swapExactTokensForTokens(in_amount, minOut, path, receiver, deadline);\r\n        IUniswapV2Router02(rout).swapExactTokensForTokensSupportingFeeOnTransferTokens(in_amount, minOut, path, receiver, deadline);\r\n        IERC20(path[0]).safeDecreaseAllowance(rout, IERC20(path[0]).allowance(address(this), rout));\r\n        \r\n        //uint256 post = ;\r\n\r\n        //return output[output.length - 1];\r\n        return (IERC20(path[path.length - 1]).balanceOf(receiver)).sub(pre);\r\n\t}\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function GetBridge(address _token) external view returns(bool[] memory){\r\n        bool[] memory Exists = new bool[](5);\r\n        Exists[0] = false;\r\n        Exists[1] = false;\r\n        Exists[2] = false;\r\n        Exists[3] = false;\r\n        Exists[4] = false;\r\n        if(IUniswapV2Factory(factory).getPair(_token, weth) != address(0)){\r\n            Exists[0] = true;\r\n        }\r\n        if(IUniswapV2Factory(factory).getPair(_token, DAI) != address(0)){\r\n            Exists[1] = true;\r\n        }\r\n        if(IUniswapV2Factory(factory).getPair(_token, USDT) != address(0)){\r\n            Exists[2] = true;\r\n        }\r\n        if(IUniswapV2Factory(factory).getPair(_token, USDC) != address(0)){\r\n            Exists[3] = true;\r\n        }\r\n         if(IUniswapV2Factory(factory).getPair(_token, WBTC) != address(0)){\r\n            Exists[4] = true;\r\n        }\r\n        return Exists;\r\n    }\r\n    function getEstimatedTokens(uint tokenQty , address _from, address _to) external view returns (uint256[] memory, address[] memory) {\r\n        address bridge = address(0);\r\n        if(IUniswapV2Factory(factory).getPair(_from, _to) != address(0)){\r\n            address[] memory path = new address[](2);\r\n            path[0] = _from;\r\n            path[1] = _to;\r\n            return (IUniswapV2Router02(rout).getAmountsOut(tokenQty, path), path);\r\n        }\r\n        else{\r\n            bool[] memory from_list = this.GetBridge(_from);\r\n            bool[] memory to_list   = this.GetBridge(_to);\r\n            require(to_list.length == from_list.length, \"getEstimatedTokens. ERROR\");\r\n            for(uint i=0; i<from_list.length; i++) {\r\n                if(from_list[i] && to_list[i]){\r\n                    if(i == 0){\r\n                        bridge = weth;\r\n                    }else if(i == 1){\r\n                        bridge = DAI; \r\n                    }else if(i == 2){\r\n                        bridge = USDT; \r\n                    }else if(i == 3){\r\n                        bridge = USDC; \r\n                    }else if(i == 4){\r\n                        bridge = WBTC;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            require(bridge != address(0), \"getEstimatedTokens: ERROR2\");\r\n            address[] memory path = new address[](3);\r\n            path[0] = _from;\r\n            path[1] = bridge;\r\n            path[2] = _to;\r\n\r\n            uint[] memory amounts = IUniswapV2Router02(rout).getAmountsOut(tokenQty, path);\r\n            return (amounts, path);\r\n        }       \r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////       \r\n    function kill() onlyOwner public {\r\n        selfdestruct(msg.sender); \r\n    }\r\n    function emergencyTokenWithdrawal(address _token) onlyOwner public {\r\n        IERC20(_token).transfer(msg.sender, IERC20(_token).balanceOf(address(this)));\r\n    }\r\n    function emergencyETHWithdrawal() onlyOwner public{\r\n        payable(msg.sender).transfer(payable(address(this)).balance);\r\n    }\r\n    \r\n}"}}}