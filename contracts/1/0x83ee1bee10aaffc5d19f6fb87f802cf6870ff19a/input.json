{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/ERC20Detailed.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-only\npragma solidity ^0.6.4;\n\nimport \"./IERC20.sol\";\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\nabstract contract ERC20Detailed is IERC20 {\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals;\n  \n  constructor(string memory name, string memory symbol, uint8 decimals) \n    public\n  {\n     _name = name;\n     _symbol = symbol;\n     _decimals = decimals;\n  }\n\n  /**\n   * @return the name of the token.\n   */\n  function name() public view returns(string memory) {\n    return _name;\n  }\n\n  /**\n   * @return the symbol of the token.\n   */\n  function symbol() public view returns(string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @return the number of decimals of the token.\n   */\n  function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n}\n"},"browser/ESMToken.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-only\npragma solidity ^0.6.4;\n\nimport \"./SafeMath.sol\";\nimport \"./Pausable.sol\";\nimport \"./Lockable.sol\";\nimport \"./ERC20Detailed.sol\";\n\n\n/**\n * ESMToken\n * v1.0\n */\ncontract ESMToken is ERC20Detailed, Lockable, Pausable {\n    using SafeMath for uint256;\n\n    // All config\n    string private constant TOKEN_NAME = \"ESM\";\n    string private constant TOKEN_SYMBOL = \"ESM\";\n    uint8  private constant  TOKEN_DECIMALS = 6;\n    uint256 private constant TOKEN_INIT_SUPPLY = 100000000 * (10**(uint256(TOKEN_DECIMALS)));\n\n    // Total supply\n    uint256 private _totalSupply;\n    mapping(address => uint256) _balances;\n\n    /// events\n    event Mint(address indexed to, uint256 amount);\n    event Burn(address indexed burner, uint256 value);\n\n    // This is denominated in Fragments, because the gons-fragments conversion might change before\n    // it's fully paid.\n    mapping (address => mapping (address => uint256)) private _allowedFragments;\n\n    constructor()\n        ERC20Detailed(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS)\n        public\n    {\n        _totalSupply = TOKEN_INIT_SUPPLY;\n        _balances[msg.sender] = TOKEN_INIT_SUPPLY;\n\n        emit Transfer(address(0x0), msg.sender, TOKEN_INIT_SUPPLY);\n    }\n\n    /// mint token\n    function mint(address to, uint256 value)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        require(to != address(0), \"EFIToken: [mint] to illegal\");\n        _totalSupply = _totalSupply.add(value);\n        _balances[to] = _balances[to].add(value);\n        emit Mint(to, value);\n        emit Transfer(address(0), to, value);\n        return true;\n    }\n\n    /// burn token\n    function burn(uint256 value)\n        public\n        returns (bool)\n    {\n        address burner = msg.sender;\n        _balances[burner] = _balances[burner].sub(value);\n        _totalSupply = _totalSupply.sub(value);\n        emit Burn(burner, value);\n        return true;\n    }\n\n    /// move tokens\n    function _move(address from, address to, uint256 value)\n        private\n    {\n        require(value <= _balances[from], \"EFIToken: [_move] balance not enough\");\n        require(to != address(0), \"EFIToken: [_move] to[address] is illegal\");\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n    }\n\n    /// transfer token\n    function transfer(address to, uint256 value)\n        public\n        override\n        whenNotPaused\n        returns (bool)\n    {\n        require(notLock(msg.sender));\n        require(notLock(to));\n        _move(msg.sender, to, value);\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /// transferFrom token\n    function transferFrom(address from, address to, uint256 value)\n        public\n        override\n        whenNotPaused\n        returns (bool)\n    {\n        require(notLock(msg.sender));\n        require(notLock(from));\n        require(notLock(to));\n        // sub value\n        _allowedFragments[from][msg.sender] = _allowedFragments[from][msg.sender].sub(value);\n        _move(from, to, value);\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @return The total number of fragments.\n     */\n    function totalSupply()\n        public\n        override\n        view\n        returns (uint256)\n    {\n        return _totalSupply;\n    }\n\n    /**\n     * @param who The address to query.\n     * @return The balance of the specified address.\n     */\n    function balanceOf(address who)\n        public\n        override\n        view\n        returns (uint256)\n    {\n        return _balances[who];\n    }\n\n    /**\n     * @return approve value\n     */\n    function allowance(address owner, address spender)\n        external\n        override\n        view\n        returns (uint256)\n    {\n        return _allowedFragments[owner][spender];\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of\n     * msg.sender. This method is included for ERC20 compatibility.\n     * increaseAllowance and decreaseAllowance should be used instead.\n     * Changing an allowance with this method brings the risk that someone may transfer both\n     * the old and the new allowance - if they are both greater than zero - if a transfer\n     * transaction is mined before the later approve() call is mined.\n     *\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value)\n        public\n        override\n        returns (bool)\n    {\n        _allowedFragments[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner has allowed to a spender.\n     * This method should be used instead of approve() to avoid the double approval vulnerability\n     * described above.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        returns (bool)\n    {\n        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner has allowed to a spender.\n     *\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        returns (bool)\n    {\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\n        if (subtractedValue >= oldValue) {\n            _allowedFragments[msg.sender][spender] = 0;\n        } else {\n            _allowedFragments[msg.sender][spender] = oldValue.sub(subtractedValue);\n        }\n        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\n        return true;\n    }\n}\n"},"browser/IERC20.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-only\npragma solidity ^0.6.4;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n"},"browser/Lockable.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-only\npragma solidity ^0.6.4;\n\nimport \"./Ownable.sol\";\n\ncontract Lockable is Ownable {\n\n    // blockList\n    mapping (address => uint) private _blockList;\n    \n\n    /**\n     * @param who address\n     */\n    function notLock(address who)\n        public\n        view\n        returns (bool)\n    {\n        return _blockList[who] == 0;\n    }\n\n    /**\n     * @param whos addresses\n     */\n    function setBlockList(address[] calldata whos)\n        external\n        onlyOwner\n    {\n        for (uint i = 0; i < whos.length; i++) {\n            _blockList[whos[i]] = 1;\n        }\n    }\n\n    /**\n     * @param whos addresses\n     */\n    function unsetBlockList(address[] calldata whos)\n        external\n        onlyOwner\n    {\n        for (uint i = 0; i < whos.length; i++) {\n            _blockList[whos[i]] = 0;\n        }\n    }\n}\n"},"browser/Ownable.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-only\npragma solidity ^0.6.4;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner, \"Ownable: [onlyOwner]\");\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    require(_newOwner != address(0), \"Ownable: [transferOwnership] _newOwner illegal\");\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n"},"browser/Pausable.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-only\npragma solidity ^0.6.4;\n\nimport \"./Ownable.sol\";\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused, \"Pausable: not paused\");\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused, \"Pausable: paused\");\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause()\n    public \n    onlyOwner \n    whenNotPaused \n  {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() \n    public \n    onlyOwner \n    whenPaused\n  {\n    paused = false;\n    emit Unpause();\n  }\n}\n"},"browser/SafeMath.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-only\npragma solidity ^0.6.4;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n"}}}