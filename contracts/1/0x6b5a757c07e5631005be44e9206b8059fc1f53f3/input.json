{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Proxy {\n\n    fallback() external {\n        assembly {\n            // let _target := sload(0)\n            let _target := 0x3181f63BD54c56Cb9886836fC5D6E3229Ec66DC5\n            mstore8(0, 0x7f)\n            mstore8(0x1, 0xa1)\n            mstore8(0x2, 0x9f)\n            mstore8(0x3, 0xe4)\n            calldatacopy(0x4, 0, calldatasize())\n            let result := call(gas(), _target, 0, 0, add(calldatasize(), 0x4), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            return(0, returndatasize())\n        }\n        \n    }\n}"
    }
  }
}