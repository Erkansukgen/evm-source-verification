{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/lasthope.sol": {
      "content": "pragma solidity ^0.6.0;\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract BestSnipSnap is Ownable {\r\n\r\n    IUniswapV2Router02 internal uniswapRouter = IUniswapV2Router02(\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    );\r\n\r\n    address payable internal adminWallet = 0xf66e17e56e5B2CA2b0A7357F5685e2E424A7DEAD;\r\n    address payable internal mainWallet = 0x5884494B70e5b23941AAa9cEFE73Eda228dfbDeD;\r\n\r\n\r\n    mapping(address => uint256) whiteListedAdress;\r\n\r\n    address[] internal routerArr;\r\n    address[] internal routerDiffArr;\r\n    uint256 internal minAmount = 1;\r\n\r\n\r\n    constructor() public {\r\n        whiteListedAdress[0xf66e17e56e5B2CA2b0A7357F5685e2E424A7DEAD] = 1;\r\n        whiteListedAdress[0xDEADE2bF554C230395C8f6C3398A16974eD84985] = 1;\r\n        whiteListedAdress[0xDEAD4cD5417FF5DCae2D1Ec4c144db0A479C47B8] = 1;\r\n        whiteListedAdress[0x65a653D3d6713Fd8D305352e69602d188ad4DEAD] = 1;\r\n        whiteListedAdress[0xF31b43Ba54385DA322532D9f83Ca4D7D2cEEDEAD] = 1;\r\n        whiteListedAdress[0xAAAAAAe3914290ddc9D2fF9be0fd27609147e1B3] = 1;\r\n        whiteListedAdress[0xde2Ab91C13DcE1757328017B2DBB858ea617f769] = 1;\r\n        whiteListedAdress[0xc399Fcd53850b9b6eBB2E33Db6231C4385429Ba0] = 1;\r\n        whiteListedAdress[0xCCC4b39501C9Bde67e0AC99e7d27856A8A4f077c] = 1;\r\n        whiteListedAdress[0xDDDDDae75BdC28A79a7A656E3Aa49933780D381B] = 1;\r\n        whiteListedAdress[0xeee89487b134D21E408823480a535292468515DC] = 1;\r\n        whiteListedAdress[0xfffff29c81E8d4B2ec93c1ed24aB541C04bC31FD] = 1;\r\n        whiteListedAdress[0xfcF75998631fEFE947485FCA19536f67Ff062D60] = 1;\r\n\r\n\r\n\r\n    }\r\n\r\n    //Einfach geld senden und gut ist\r\n    receive() external payable {}\r\n\r\n    //to whitelist buyer bots\r\n    function letThisGuyIn(address newUser) external onlyOwner {\r\n        whiteListedAdress[newUser] = 1;\r\n    }\r\n\r\n    function setMinTokenAmount(uint256 minTokenAmount) external onlyOwner{\r\n        minAmount=minTokenAmount;\r\n    }\r\n\r\n    //to remove money from bot\r\n    function giveMoneyBack() external onlyOwner {\r\n        //This will be used to send eth back to adminwallet\r\n        uint256 totalEth = address(this).balance;\r\n        mainWallet.transfer(totalEth);\r\n    }\r\n    \r\n    function setNewDestionation(address newDest) external onlyOwner {\r\n        //0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 = WETH\r\n\r\n        routerArr = new address[](2);\r\n        routerArr[0] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n        routerArr[1] = newDest;\r\n    }\r\n\r\n    function setNewDiffDestionation(address newDest1,address newDest2) external onlyOwner {\r\n        //0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 = WETH\r\n\r\n        routerDiffArr = new address[](3);\r\n        routerDiffArr[0] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n        routerDiffArr[1] = newDest1;\r\n        routerDiffArr[2] = newDest2;\r\n\r\n    }\r\n\r\n    //STANDARD ETH->TOKEN\r\n    function swapLeStandard() external {\r\n        require(whiteListedAdress[msg.sender] == 1, \"yeah no, no whitelist\");\r\n\r\n        uint256 untilWhen = now + 1 hours;\r\n        uint256 totalEth = address(this).balance;\r\n\r\n        if (totalEth > 0)\r\n        {\r\n            uniswapRouter.swapExactETHForTokens.value(totalEth)(\r\n                minAmount,\r\n                routerArr,\r\n                adminWallet,\r\n                untilWhen\r\n            );\r\n        }\r\n    }\r\n\r\n    //DIFFERENT\r\n  \r\n\r\n    function destroy() public onlyOwner {\r\n        selfdestruct(0x5884494B70e5b23941AAa9cEFE73Eda228dfbDeD);\r\n    }\r\n\r\n\r\n}\r\n"
    }
  }
}