{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"@openzeppelin/contracts/GSN/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"@openzeppelin/contracts/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"},"@openzeppelin/contracts/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"@openzeppelin/contracts/token/ERC20/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"contracts/Pool.sol":{"content":"// SPDX-License-Identifier: Unlicensed\n\npragma solidity ^0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/ILordOfCoin.sol\";\nimport \"./interfaces/IDvd.sol\";\nimport \"./interfaces/ISDvd.sol\";\nimport \"./interfaces/ITreasury.sol\";\n\n/// @dev Ownable is used because solidity complain trying to deploy a contract whose code is too large when everything is added into Lord of Coin contract.\n/// The only owner function is `init` which is to setup for the first time after deployment.\n/// After init finished, owner will be renounced automatically. owner() function will return 0x0 address.\nabstract contract Pool is ReentrancyGuard, Ownable {\n\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    event Staked(address indexed sender, address indexed recipient, uint256 amount);\n    event Withdrawn(address indexed sender, address indexed recipient, uint256 amount);\n    event Claimed(address indexed sender, address indexed recipient, uint256 net, uint256 tax, uint256 total);\n    event Halving(uint256 amount);\n\n    /// @dev Token will be DVD or SDVD-ETH UNI-V2\n    address public stakedToken;\n    ISDvd public sdvd;\n\n    /// @notice Flag to determine if farm is open\n    bool public isFarmOpen = false;\n    /// @notice Farming will be open on this timestamp\n    uint256 public farmOpenTime;\n\n    uint256 public rewardAllocation;\n    uint256 public rewardRate;\n    uint256 public rewardDuration = 1460 days;  // halving per 4 years\n    uint256 public lastUpdateTime;\n    uint256 public rewardPerTokenStored;\n    uint256 public finishTime;\n\n    uint256 public bonusRewardAllocation;\n    uint256 public bonusRewardRate;\n    uint256 public bonusRewardDuration = 1 days; //  Reward bonus distributed every day, must be the same value with pool treasury release threshold\n    uint256 public bonusLastUpdateTime;\n    uint256 public bonusRewardPerTokenStored;\n    uint256 public bonusRewardFinishTime;\n\n    struct AccountInfo {\n        // Staked token balance\n        uint256 balance;\n        // Normal farming reward\n        uint256 reward;\n        uint256 rewardPerTokenPaid;\n        // Bonus reward from transaction fee\n        uint256 bonusReward;\n        uint256 bonusRewardPerTokenPaid;\n    }\n\n    /// @dev Account info\n    mapping(address => AccountInfo) public accountInfos;\n\n    /// @dev Total supply of staked tokens\n    uint256 private _totalSupply;\n\n    /// @notice Total rewards minted from this pool\n    uint256 public totalRewardMinted;\n\n    // @dev Lord of Coin\n    address controller;\n\n    // @dev Pool treasury\n    address poolTreasury;\n\n    constructor(address _poolTreasury, uint256 _farmOpenTime) public {\n        poolTreasury = _poolTreasury;\n        farmOpenTime = _farmOpenTime;\n    }\n\n    /* ========== Modifiers ========== */\n\n    modifier onlyController {\n        require(msg.sender == controller, 'Controller only');\n        _;\n    }\n\n    modifier onlyPoolTreasury {\n        require(msg.sender == poolTreasury, 'Treasury only');\n        _;\n    }\n\n    modifier farmOpen {\n        require(isFarmOpen, 'Farm not open');\n        _;\n    }\n\n    /* ========== Owner Only ========== */\n\n    /// @notice Setup for the first time after deploy and renounce ownership immediately\n    function init(address _controller, address _stakedToken) external onlyOwner {\n        controller = _controller;\n        stakedToken = _stakedToken;\n        sdvd = ISDvd(ILordOfCoin(_controller).sdvd());\n\n        // Renounce ownership immediately after init\n        renounceOwnership();\n    }\n\n    /* ========== Pool Treasury Only ========== */\n\n    /// @notice Distribute bonus rewards to farmers\n    /// @dev Can only be called by pool treasury\n    function distributeBonusRewards(uint256 amount) external onlyPoolTreasury {\n        // Set bonus reward allocation\n        bonusRewardAllocation = amount;\n        // Calculate bonus reward rate\n        bonusRewardRate = bonusRewardAllocation.div(bonusRewardDuration);\n        // Set finish time\n        bonusRewardFinishTime = block.timestamp.add(bonusRewardDuration);\n        // Set last update time\n        bonusLastUpdateTime = block.timestamp;\n    }\n\n    /* ========== Mutative ========== */\n\n    /// @notice Stake token.\n    /// @dev Need to approve staked token first.\n    /// @param amount Token amount.\n    function stake(uint256 amount) external nonReentrant {\n        _stake(msg.sender, msg.sender, amount);\n    }\n\n    /// @notice Stake token.\n    /// @dev Need to approve staked token first.\n    /// @param recipient Address who receive staked token balance.\n    /// @param amount Token amount.\n    function stakeTo(address recipient, uint256 amount) external nonReentrant {\n        _stake(msg.sender, recipient, amount);\n    }\n\n    /// @notice Withdraw token.\n    /// @param amount Token amount.\n    function withdraw(uint256 amount) external nonReentrant farmOpen {\n        _withdraw(msg.sender, msg.sender, amount);\n    }\n\n    /// @notice Withdraw token.\n    /// @param recipient Address who receive staked token.\n    /// @param amount Token amount.\n    function withdrawTo(address recipient, uint256 amount) external nonReentrant farmOpen {\n        _withdraw(msg.sender, recipient, amount);\n    }\n\n    /// @notice Claim SDVD reward\n    /// @return Reward net amount\n    /// @return Reward tax amount\n    /// @return Total Reward amount\n    function claimReward() external nonReentrant farmOpen returns(uint256, uint256, uint256) {\n        return _claimReward(msg.sender, msg.sender);\n    }\n\n    /// @notice Claim SDVD reward\n    /// @param recipient Address who receive reward.\n    /// @return Reward net amount\n    /// @return Reward tax amount\n    /// @return Total Reward amount\n    function claimRewardTo(address recipient) external nonReentrant farmOpen returns(uint256, uint256, uint256) {\n        return _claimReward(msg.sender, recipient);\n    }\n\n    /* ========== Internal ========== */\n\n    function _updateReward(address account) internal {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n        if (account != address(0)) {\n            accountInfos[account].reward = earned(account);\n            accountInfos[account].rewardPerTokenPaid = rewardPerTokenStored;\n        }\n    }\n\n    function _updateBonusReward(address account) internal {\n        bonusRewardPerTokenStored = bonusRewardPerToken();\n        bonusLastUpdateTime = lastTimeBonusRewardApplicable();\n        if (account != address(0)) {\n            accountInfos[account].bonusReward = bonusEarned(account);\n            accountInfos[account].bonusRewardPerTokenPaid = bonusRewardPerTokenStored;\n        }\n    }\n\n    /// @notice Stake staked token\n    /// @param sender address. Address who have the token.\n    /// @param recipient address. Address who receive staked token balance.\n    function _stake(address sender, address recipient, uint256 amount) internal virtual {\n        _checkOpenFarm();\n        _checkHalving();\n        _updateReward(recipient);\n        _updateBonusReward(recipient);\n        _notifyController();\n\n        require(amount > 0, 'Cannot stake 0');\n\n        IERC20(stakedToken).safeTransferFrom(sender, address(this), amount);\n        _totalSupply = _totalSupply.add(amount);\n        accountInfos[recipient].balance = accountInfos[recipient].balance.add(amount);\n\n        emit Staked(sender, recipient, amount);\n    }\n\n    /// @notice Withdraw staked token\n    /// @param sender address. Address who have stake the token.\n    /// @param recipient address. Address who receive the staked token.\n    function _withdraw(address sender, address recipient, uint256 amount) internal virtual {\n        _checkHalving();\n        _updateReward(sender);\n        _updateBonusReward(sender);\n        _notifyController();\n\n        require(amount > 0, 'Cannot withdraw 0');\n        require(accountInfos[sender].balance >= amount, 'Insufficient balance');\n\n        _totalSupply = _totalSupply.sub(amount);\n        accountInfos[sender].balance = accountInfos[sender].balance.sub(amount);\n        IERC20(stakedToken).safeTransfer(recipient, amount);\n\n        emit Withdrawn(sender, recipient, amount);\n    }\n\n    /// @notice Claim reward\n    /// @param sender address. Address who have stake the token.\n    /// @param recipient address. Address who receive the reward.\n    /// @return totalNetReward Total net SDVD reward.\n    /// @return totalTaxReward Total taxed SDVD reward.\n    /// @return totalReward Total SDVD reward.\n    function _claimReward(address sender, address recipient) internal virtual returns(uint256 totalNetReward, uint256 totalTaxReward, uint256 totalReward) {\n        _checkHalving();\n        _updateReward(sender);\n        _updateBonusReward(sender);\n        _notifyController();\n\n        uint256 reward = accountInfos[sender].reward;\n        uint256 bonusReward = accountInfos[sender].bonusReward;\n        totalReward = reward.add(bonusReward);\n        require(totalReward > 0, 'No reward to claim');\n        if (reward > 0) {\n            // Reduce reward first\n            accountInfos[sender].reward = 0;\n\n            // Apply tax\n            uint256 tax = reward.div(claimRewardTaxDenominator());\n            uint256 net = reward.sub(tax);\n\n            // Mint SDVD as reward to recipient\n            sdvd.mint(recipient, net);\n            // Mint SDVD tax to pool treasury\n            sdvd.mint(address(poolTreasury), tax);\n\n            // Increase total\n            totalNetReward = totalNetReward.add(net);\n            totalTaxReward = totalTaxReward.add(tax);\n            // Set stats\n            totalRewardMinted = totalRewardMinted.add(reward);\n        }\n        if (bonusReward > 0) {\n            // Reduce bonus reward first\n            accountInfos[sender].bonusReward = 0;\n            // Get balance and check so we doesn't overrun\n            uint256 balance = sdvd.balanceOf(address(this));\n            if (bonusReward > balance) {\n                bonusReward = balance;\n            }\n\n            // Apply tax\n            uint256 tax = bonusReward.div(claimRewardTaxDenominator());\n            uint256 net = bonusReward.sub(tax);\n\n            // Send bonus reward to recipient\n            IERC20(sdvd).safeTransfer(recipient, net);\n            // Send tax to treasury\n            IERC20(sdvd).safeTransfer(address(poolTreasury), tax);\n\n            // Increase total\n            totalNetReward = totalNetReward.add(net);\n            totalTaxReward = totalTaxReward.add(tax);\n        }\n        if (totalReward > 0) {\n            emit Claimed(sender, recipient, totalNetReward, totalTaxReward, totalReward);\n        }\n    }\n\n    /// @notice Check if farm can be open\n    function _checkOpenFarm() internal {\n        require(farmOpenTime <= block.timestamp, 'Farm not open');\n        if (!isFarmOpen) {\n            // Set flag\n            isFarmOpen = true;\n\n            // Initialize\n            lastUpdateTime = block.timestamp;\n            finishTime = block.timestamp.add(rewardDuration);\n            rewardRate = rewardAllocation.div(rewardDuration);\n\n            // Initialize bonus\n            bonusLastUpdateTime = block.timestamp;\n            bonusRewardFinishTime = block.timestamp.add(bonusRewardDuration);\n            bonusRewardRate = bonusRewardAllocation.div(bonusRewardDuration);\n        }\n    }\n\n    /// @notice Check and do halving when finish time reached\n    function _checkHalving() internal {\n        if (block.timestamp >= finishTime) {\n            // Halving reward\n            rewardAllocation = rewardAllocation.div(2);\n            // Calculate reward rate\n            rewardRate = rewardAllocation.div(rewardDuration);\n            // Set finish time\n            finishTime = block.timestamp.add(rewardDuration);\n            // Set last update time\n            lastUpdateTime = block.timestamp;\n            // Emit event\n            emit Halving(rewardAllocation);\n        }\n    }\n\n    /// @notice Check if need to increase snapshot in lord of coin\n    function _notifyController() internal {\n        ILordOfCoin(controller).checkSnapshot();\n        ILordOfCoin(controller).releaseTreasury();\n    }\n\n    /* ========== View ========== */\n\n    /// @notice Get staked token total supply\n    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @notice Get staked token balance\n    function balanceOf(address account) external view returns (uint256) {\n        return accountInfos[account].balance;\n    }\n\n    /// @notice Get full earned amount and bonus\n    /// @dev Combine earned\n    function fullEarned(address account) external view returns (uint256) {\n        return earned(account).add(bonusEarned(account));\n    }\n\n    /// @notice Get full reward rate\n    /// @dev Combine reward rate\n    function fullRewardRate() external view returns (uint256) {\n        return rewardRate.add(bonusRewardRate);\n    }\n\n    /// @notice Get claim reward tax\n    function claimRewardTaxDenominator() public view returns (uint256) {\n        if (block.timestamp < farmOpenTime.add(365 days)) {\n            // 50% tax\n            return 2;\n        } else if (block.timestamp < farmOpenTime.add(730 days)) {\n            // 33% tax\n            return 3;\n        } else if (block.timestamp < farmOpenTime.add(1095 days)) {\n            // 25% tax\n            return 4;\n        } else if (block.timestamp < farmOpenTime.add(1460 days)) {\n            // 20% tax\n            return 5;\n        } else {\n            // 10% tax\n            return 10;\n        }\n    }\n\n    /// Normal rewards\n\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        return Math.min(block.timestamp, finishTime);\n    }\n\n    function rewardPerToken() public view returns (uint256) {\n        if (_totalSupply == 0) {\n            return rewardPerTokenStored;\n        }\n        return rewardPerTokenStored.add(\n            lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply)\n        );\n    }\n\n    function earned(address account) public view returns (uint256) {\n        return accountInfos[account].balance.mul(\n            rewardPerToken().sub(accountInfos[account].rewardPerTokenPaid)\n        )\n        .div(1e18)\n        .add(accountInfos[account].reward);\n    }\n\n    /// Bonus\n\n    function lastTimeBonusRewardApplicable() public view returns (uint256) {\n        return Math.min(block.timestamp, bonusRewardFinishTime);\n    }\n\n    function bonusRewardPerToken() public view returns (uint256) {\n        if (_totalSupply == 0) {\n            return bonusRewardPerTokenStored;\n        }\n        return bonusRewardPerTokenStored.add(\n            lastTimeBonusRewardApplicable().sub(bonusLastUpdateTime).mul(bonusRewardRate).mul(1e18).div(_totalSupply)\n        );\n    }\n\n    function bonusEarned(address account) public view returns (uint256) {\n        return accountInfos[account].balance.mul(\n            bonusRewardPerToken().sub(accountInfos[account].bonusRewardPerTokenPaid)\n        )\n        .div(1e18)\n        .add(accountInfos[account].bonusReward);\n    }\n\n}\n"},"contracts/SDvdEthPool.sol":{"content":"// SPDX-License-Identifier: Unlicensed\n\npragma solidity ^0.6.12;\n\nimport \"./uniswapv2/interfaces/IUniswapV2Router02.sol\";\nimport \"./uniswapv2/interfaces/IUniswapV2Pair.sol\";\nimport \"./uniswapv2/interfaces/IUniswapV2Factory.sol\";\nimport \"./interfaces/IDvd.sol\";\nimport \"./Pool.sol\";\n\ncontract SDvdEthPool is Pool {\n\n    event StakedETH(address indexed account, uint256 amount);\n    event ClaimedAndStaked(address indexed account, uint256 amount);\n\n    /// @dev Uniswap router\n    IUniswapV2Router02 uniswapRouter;\n\n    /// @dev Uniswap factory\n    IUniswapV2Factory uniswapFactory;\n\n    /// @dev WETH address\n    address weth;\n\n    /// @notice LGE state\n    bool public isLGEActive = true;\n\n    /// @notice Max initial deposit cap\n    uint256 public LGE_INITIAL_DEPOSIT_CAP = 5 ether;\n\n    /// @notice Amount in SDVD. After hard cap reached, stake ETH will function as normal staking.\n    uint256 public LGE_HARD_CAP = 200 ether;\n\n    /// @dev Initial price multiplier\n    uint256 public LGE_INITIAL_PRICE_MULTIPLIER = 2;\n\n    constructor(address _poolTreasury, address _uniswapRouter, uint256 _farmOpenTime) public Pool(_poolTreasury, _farmOpenTime) {\n        rewardAllocation = 240000 * 1e18;\n        rewardAllocation = rewardAllocation.sub(LGE_HARD_CAP.div(2));\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\n        uniswapFactory = IUniswapV2Factory(uniswapRouter.factory());\n        weth = uniswapRouter.WETH();\n    }\n\n    /// @dev Added to receive ETH when swapping on Uniswap\n    receive() external payable {\n    }\n\n    /// @notice Stake token using ETH conveniently.\n    function stakeETH() external payable nonReentrant {\n        _stakeETH(msg.value);\n    }\n\n    /// @notice Stake token using SDVD and ETH conveniently.\n    /// @dev User must approve SDVD first\n    function stakeSDVD(uint256 amountToken) external payable nonReentrant farmOpen {\n        require(isLGEActive == false, 'LGE still active');\n\n        uint256 pairSDVDBalance = IERC20(sdvd).balanceOf(stakedToken);\n        uint256 pairETHBalance = IERC20(weth).balanceOf(stakedToken);\n        uint256 amountETH = amountToken.mul(pairETHBalance).div(pairSDVDBalance);\n\n        // Make sure received eth is enough\n        require(msg.value >= amountETH, 'Not enough ETH');\n        // Check if there is excess eth\n        uint256 excessETH = msg.value.sub(amountETH);\n        // Send back excess eth\n        if (excessETH > 0) {\n            msg.sender.transfer(excessETH);\n        }\n\n        // Transfer sdvd from sender to this contract\n        IERC20(sdvd).safeTransferFrom(msg.sender, address(this), amountToken);\n\n        // Approve uniswap router to spend SDVD\n        IERC20(sdvd).approve(address(uniswapRouter), amountToken);\n        // Add liquidity\n        (,, uint256 liquidity) = uniswapRouter.addLiquidityETH{value : amountETH}(address(sdvd), amountToken, 0, 0, address(this), block.timestamp.add(30 minutes));\n\n        // Approve self\n        IERC20(stakedToken).approve(address(this), liquidity);\n        // Stake LP token for sender\n        _stake(address(this), msg.sender, liquidity);\n    }\n\n    /// @notice Claim reward and re-stake conveniently.\n    function claimRewardAndStake() external nonReentrant farmOpen {\n        require(isLGEActive == false, 'LGE still active');\n\n        // Claim SDVD reward to this address\n        (uint256 totalNetReward,,) = _claimReward(msg.sender, address(this));\n\n        // Split total reward to be swapped\n        uint256 swapAmountSDVD = totalNetReward.div(2);\n\n        // Swap path\n        address[] memory path = new address[](2);\n        path[0] = address(sdvd);\n        path[1] = weth;\n\n        // Approve uniswap router to spend sdvd\n        IERC20(sdvd).approve(address(uniswapRouter), swapAmountSDVD);\n        // Swap SDVD to ETH\n        // Param: uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline\n        uint256[] memory amounts = uniswapRouter.swapExactTokensForETH(swapAmountSDVD, 0, path, address(this), block.timestamp.add(30 minutes));\n        // Get received ETH amount from swap\n        uint256 amountETHReceived = amounts[1];\n\n        // Get pair address and balance\n        uint256 pairSDVDBalance = IERC20(sdvd).balanceOf(stakedToken);\n        uint256 pairETHBalance = IERC20(weth).balanceOf(stakedToken);\n\n        // Get available SDVD\n        uint256 amountSDVD = totalNetReward.sub(swapAmountSDVD);\n        // Calculate how much ETH needed to provide liquidity\n        uint256 amountETH = amountSDVD.mul(pairETHBalance).div(pairSDVDBalance);\n\n        // If required ETH amount to add liquidity is bigger than what we have\n        // Then we need to reduce SDVD amount\n        if (amountETH > amountETHReceived) {\n            // Set ETH amount\n            amountETH = amountETHReceived;\n            // Get amount SDVD needed to add liquidity\n            uint256 amountSDVDRequired = amountETH.mul(pairSDVDBalance).div(pairETHBalance);\n            // Send dust\n            if (amountSDVD > amountSDVDRequired) {\n                IERC20(sdvd).safeTransfer(msg.sender, amountSDVD.sub(amountSDVDRequired));\n            }\n            // Set SDVD amount\n            amountSDVD = amountSDVDRequired;\n        }\n        // Else if we have too much ETH\n        else if (amountETHReceived > amountETH) {\n            // Send excess\n            msg.sender.transfer(amountETHReceived.sub(amountETH));\n        }\n\n        // Approve uniswap router to spend SDVD\n        IERC20(sdvd).approve(address(uniswapRouter), amountSDVD);\n        // Add liquidity\n        (,, uint256 liquidity) = uniswapRouter.addLiquidityETH{value : amountETH}(address(sdvd), amountSDVD, 0, 0, address(this), block.timestamp.add(30 minutes));\n\n        // Approve self\n        IERC20(stakedToken).approve(address(this), liquidity);\n        // Stake LP token for sender\n        _stake(address(this), msg.sender, liquidity);\n\n        emit ClaimedAndStaked(msg.sender, liquidity);\n    }\n\n    /* ========== Internal ========== */\n\n    /// @notice Stake ETH\n    /// @param value Value in ETH\n    function _stakeETH(uint256 value) internal {\n        // If in LGE\n        if (isLGEActive) {\n            // SDVD-ETH pair address\n            uint256 pairSDVDBalance = IERC20(sdvd).balanceOf(stakedToken);\n\n            if (pairSDVDBalance == 0) {\n                require(msg.value <= LGE_INITIAL_DEPOSIT_CAP, 'Initial deposit cap reached');\n            }\n\n            uint256 pairETHBalance = IERC20(weth).balanceOf(stakedToken);\n            uint256 amountETH = msg.value;\n\n            // If SDVD balance = 0 then set initial price\n            uint256 amountSDVD = pairSDVDBalance == 0 ? amountETH.mul(LGE_INITIAL_PRICE_MULTIPLIER) : amountETH.mul(pairSDVDBalance).div(pairETHBalance);\n\n            uint256 excessETH = 0;\n            // If amount token to be minted pass the hard cap\n            if (pairSDVDBalance.add(amountSDVD) > LGE_HARD_CAP) {\n                // Get excess token\n                uint256 excessToken = pairSDVDBalance.add(amountSDVD).sub(LGE_HARD_CAP);\n                // Reduce it\n                amountSDVD = amountSDVD.sub(excessToken);\n                // Get excess ether\n                excessETH = excessToken.mul(pairETHBalance).div(pairSDVDBalance);\n                // Reduce amount ETH to be put on uniswap liquidity\n                amountETH = amountETH.sub(excessETH);\n            }\n\n            // Mint LGE SDVD\n            ISDvd(sdvd).mint(address(this), amountSDVD);\n\n            // Add liquidity in uniswap and send the LP token to this contract\n            IERC20(sdvd).approve(address(uniswapRouter), amountSDVD);\n            (,, uint256 liquidity) = uniswapRouter.addLiquidityETH{value : amountETH}(address(sdvd), amountSDVD, 0, 0, address(this), block.timestamp.add(30 minutes));\n\n            // Recheck the SDVD in pair address\n            pairSDVDBalance = IERC20(sdvd).balanceOf(stakedToken);\n            // Set LGE active state\n            isLGEActive = pairSDVDBalance < LGE_HARD_CAP;\n\n            // Approve self\n            IERC20(stakedToken).approve(address(this), liquidity);\n            // Stake LP token for sender\n            _stake(address(this), msg.sender, liquidity);\n\n            // If there is excess ETH\n            if (excessETH > 0) {\n                _stakeETH(excessETH);\n            }\n        } else {\n            // Split ETH sent\n            uint256 amountETH = value.div(2);\n\n            // Swap path\n            address[] memory path = new address[](2);\n            path[0] = weth;\n            path[1] = address(sdvd);\n\n            // Swap ETH to SDVD using uniswap\n            // Param: uint amountOutMin, address[] calldata path, address to, uint deadline\n            uint256[] memory amounts = uniswapRouter.swapExactETHForTokens{value : amountETH}(\n                0,\n                path,\n                address(this),\n                block.timestamp.add(30 minutes)\n            );\n            // Get SDVD amount\n            uint256 amountSDVDReceived = amounts[1];\n\n            // Get pair address balance\n            uint256 pairSDVDBalance = IERC20(sdvd).balanceOf(stakedToken);\n            uint256 pairETHBalance = IERC20(weth).balanceOf(stakedToken);\n\n            // Get available ETH\n            amountETH = value.sub(amountETH);\n            // Calculate amount of SDVD needed to add liquidity\n            uint256 amountSDVD = amountETH.mul(pairSDVDBalance).div(pairETHBalance);\n\n            // If required SDVD amount to add liquidity is bigger than what we have\n            // Then we need to reduce ETH amount\n            if (amountSDVD > amountSDVDReceived) {\n                // Set SDVD amount\n                amountSDVD = amountSDVDReceived;\n                // Get amount ETH needed to add liquidity\n                uint256 amountETHRequired = amountSDVD.mul(pairETHBalance).div(pairSDVDBalance);\n                // Send dust back to sender\n                if (amountETH > amountETHRequired) {\n                    msg.sender.transfer(amountETH.sub(amountETHRequired));\n                }\n                // Set ETH amount\n                amountETH = amountETHRequired;\n            }\n            // Else if we have too much SDVD\n            else if (amountSDVDReceived > amountSDVD) {\n                // Send dust\n                IERC20(sdvd).transfer(msg.sender, amountSDVDReceived.sub(amountSDVD));\n            }\n\n            // Approve uniswap router to spend SDVD\n            IERC20(sdvd).approve(address(uniswapRouter), amountSDVD);\n            // Add liquidity\n            (,, uint256 liquidity) = uniswapRouter.addLiquidityETH{value : amountETH}(address(sdvd), amountSDVD, 0, 0, address(this), block.timestamp.add(30 minutes));\n            // Sync total token supply\n            ISDvd(sdvd).syncPairTokenTotalSupply();\n\n            // Approve self\n            IERC20(stakedToken).approve(address(this), liquidity);\n            // Stake LP token for sender\n            _stake(address(this), msg.sender, liquidity);\n        }\n\n        emit StakedETH(msg.sender, msg.value);\n    }\n\n}\n"},"contracts/interfaces/IDvd.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IDvd is IERC20 {\n\n    function mint(address account, uint256 amount) external;\n\n    function burn(address account, uint256 amount) external;\n\n    function increaseShareholderPoint(address account, uint256 amount) external;\n\n    function decreaseShareholderPoint(address account, uint256 amount) external;\n\n    function shareholderPointOf(address account) external view returns (uint256);\n\n    function totalShareholderPoint() external view returns (uint256);\n\n}\n"},"contracts/interfaces/ILordOfCoin.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\ninterface ILordOfCoin {\n\n    function marketOpenTime() external view returns (uint256);\n\n    function dvd() external view returns (address);\n\n    function sdvd() external view returns (address);\n\n    function sdvdEthPairAddress() external view returns (address);\n\n    function buy(uint256 musdAmount) external returns (uint256 recipientDVD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD);\n\n    function buyTo(address recipient, uint256 musdAmount) external returns (uint256 recipientDVD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD);\n\n    function buyFromETH() payable external returns (uint256 recipientDVD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD);\n\n    function sell(uint256 dvdAmount) external returns (uint256 returnedMUSD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD);\n\n    function sellTo(address recipient, uint256 dvdAmount) external returns (uint256 returnedMUSD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD);\n\n    function sellToETH(uint256 dvdAmount) external returns (uint256 returnedETH, uint256 returnedMUSD, uint256 marketTax, uint256 curveTax, uint256 taxedDVD);\n\n    function claimDividend() external returns (uint256 net, uint256 fee);\n\n    function claimDividendTo(address recipient) external returns (uint256 net, uint256 fee);\n\n    function claimDividendETH() external returns (uint256 net, uint256 fee, uint256 receivedETH);\n\n    function checkSnapshot() external;\n\n    function releaseTreasury() external;\n\n    function depositTradingProfit(uint256 amount) external;\n\n}\n"},"contracts/interfaces/ISDvd.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface ISDvd is IERC20 {\n\n    function mint(address account, uint256 amount) external;\n\n    function burn(address account, uint256 amount) external;\n\n    function setMinter(address account, bool value) external;\n\n    function setNoFeeAddress(address account, bool value) external;\n\n    function setPairAddress(address _pairAddress) external;\n\n    function snapshot() external returns (uint256);\n\n    function syncPairTokenTotalSupply() external returns (bool isPairTokenBurned);\n\n}\n"},"contracts/interfaces/ITreasury.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.12;\n\ninterface ITreasury {\n\n    function release() external;\n\n}\n"},"contracts/uniswapv2/interfaces/IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: Unlicensed\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function migrator() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n    function setMigrator(address) external;\n}\n"},"contracts/uniswapv2/interfaces/IUniswapV2Pair.sol":{"content":"// SPDX-License-Identifier: Unlicensed\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"},"contracts/uniswapv2/interfaces/IUniswapV2Router01.sol":{"content":"// SPDX-License-Identifier: Unlicensed\n\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"},"contracts/uniswapv2/interfaces/IUniswapV2Router02.sol":{"content":"// SPDX-License-Identifier: Unlicensed\n\npragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"}}}