{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/ethswap_test.sol": {
      "content": "/*\n! proof.sol\n(c) 2020 Krasava Digital Solutions\nDevelop by BelovITLab LLC (smartcontract.ru) & Krasava Digital Solutions (krasava.pro)\nauthors @stupidlovejoy, @sergeytyan\nLicense: MIT \n*/\n\npragma solidity 0.6.6;\n\ninterface SwapInterface1 {\n    function getRate() external view returns(uint256);\n}\ninterface SwapInterface2 {\n    function getRate() external view returns(uint256 _value);\n}\n\ncontract EthSwapTest {\n    SwapInterface1 public swapSourceAddress1 = SwapInterface1(0x314FF2a195DDcEF01288480f4f8676952c72d17b);\n    SwapInterface2 public swapSourceAddress2 = SwapInterface2(0x314FF2a195DDcEF01288480f4f8676952c72d17b);\n    function eth_rate1() external view returns(uint256) {\n        return swapSourceAddress1.getRate();\n    }\n    function eth_rate12() external view returns(uint256 _value) {\n        return swapSourceAddress1.getRate();\n    }\n    function eth_rate2() external view returns(uint256) {\n        return swapSourceAddress2.getRate();\n    }\n    function eth_rate22() external view returns(uint256 _value) {\n        return swapSourceAddress2.getRate();\n    }\n}"
    }
  }
}