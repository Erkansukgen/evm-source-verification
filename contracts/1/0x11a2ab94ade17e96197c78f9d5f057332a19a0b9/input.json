{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Orbicular.sol":{"content":"pragma solidity ^0.6.6;\n\nabstract contract ERC20Interface {\n    \n    address public _owner;\n    \n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n    \n    function totalSupply() virtual public view returns (uint);\n    function balanceOf(address tokenOwner) virtual public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) virtual public view returns (uint remaining);\n    function transfer(address to, uint tokens) virtual public returns (bool success);\n    function approve(address spender, uint tokens) virtual public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) virtual public returns (bool success);\n    \n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n    \n}\n\ncontract SafeMath {\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n    \n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n    \n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n    \n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n    \n}\n\ncontract Orbicular is ERC20Interface, SafeMath {\n    \n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint private _totalSupply;\n    uint256 private constant DECIMALS = 9;\n    uint256 private constant MAX_UINT256 = ~uint256(0);\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 10**8 * 10**DECIMALS;\n    uint256 private _gonsPerFragment;\n    uint private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\n    uint256 private constant MAX_SUPPLY = ~uint128(0);\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n    \n    constructor() public {\n        name = \"Orbicular\";\n        symbol = \"ORBI\";\n        decimals = 9;\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\n        balances[msg.sender] = TOTAL_GONS;\n        _owner = msg.sender;\n        _gonsPerFragment = div(TOTAL_GONS, _totalSupply);\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n    \n    function rebase(uint256 epoch, uint256 supplyDelta, bool sub0add1) external onlyOwner returns (uint256) {\n        if (supplyDelta == 0) {\n            emit LogRebase(epoch, _totalSupply);\n            return _totalSupply;\n        }\n        \n        if (sub0add1 == false) {\n            _totalSupply = sub(_totalSupply, supplyDelta);\n        }\n        \n        if (sub0add1 == true) {\n            _totalSupply = add(_totalSupply, supplyDelta);\n        }\n        \n        if (_totalSupply > MAX_SUPPLY) {\n            _totalSupply = MAX_SUPPLY;\n        }\n\n        _gonsPerFragment = div(TOTAL_GONS, _totalSupply);\n\n        emit LogRebase(epoch, _totalSupply);\n        return _totalSupply;\n    }\n    \n    function totalSupply() override public view returns (uint) {\n        return _totalSupply - balances[address(0)];\n    }\n    \n    function balanceOf(address who) override public view returns (uint256) {\n        return div(balances[who], _gonsPerFragment);\n    }\n\n    function transfer(address to, uint256 value) override public returns (bool) {\n        uint256 gonValue = mul(value, _gonsPerFragment);\n        balances[msg.sender] = sub(balances[msg.sender], gonValue);\n        balances[to] = add(balances[to], gonValue);\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function allowance(address owner_, address spender) override public view returns (uint256) {\n        return allowed[owner_][spender];\n    }\n\n    function transferFrom(address from, address to, uint256 value) override public returns (bool) {\n        allowed[from][msg.sender] = sub(allowed[from][msg.sender], value);\n\n        uint256 gonValue = mul(value, _gonsPerFragment);\n        balances[from] = sub(balances[from], gonValue);\n        balances[to] = add(balances[to], gonValue);\n        emit Transfer(from, to, value);\n\n        return true;\n    }\n\n    function approve(address spender, uint256 value) override public returns (bool) {\n        allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        allowed[msg.sender][spender] = add(allowed[msg.sender][spender], addedValue);\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        uint256 oldValue = allowed[msg.sender][spender];\n        if (subtractedValue >= oldValue) {\n            allowed[msg.sender][spender] = 0;\n        } else {\n            allowed[msg.sender][spender] = sub(oldValue, subtractedValue);\n        }\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n        return true;\n    }\n    \n    event LogRebase(uint indexed epoch, uint totalSupply);\n    \n}"}}}