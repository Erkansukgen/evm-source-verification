{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"SLOWPOKE.sol":{"content":"\n/*\n    SLOWPOKE INU \n    \n    $SLOW\n    ----------------------------------------------------------------------|\n\n                                  _.---\"'\"\"\"\"\"'`--.._\n                             _,.-'                   `-._\n                         _,.\"                            -.\n                     .-\"\"   ___...---------.._             `.\n                     `---'\"\"                  `-.            `.\n                                                 `.            \\\n                                                   `.           \\\n                                                     \\           \\\n                                                      .           \\\n                                                      |            .\n                                                      |            |\n                                _________             |            |\n                          _,.-'\"         `\"'-.._      :            |\n                      _,-'                      `-._.'             |\n                   _.'                              `.             '\n        _.-.    _,+......__                           `.          .\n      .'    `-\"'           `\"-.,-\"\"--._                 \\        /\n     /    ,'                  |    __  \\                 \\      /\n    `   ..                       +\"  )  \\                 \\    /\n     `.'  \\          ,-\"`-..    |       |                  \\  /\n      / \" |        .'       \\   '.    _.'                   .'\n     |,..\"--\"\"\"--..|    \"    |    `\"\"`.                     |\n   ,\"               `-._     |        |                     |\n .'                     `-._+         |                     |\n/                           `.                        /     |\n|    `     '                  |                      /      |\n`-.....--.__                  |              |      /       |\n   `./ \"| / `-.........--.-   '              |    ,'        '\n     /| ||        `.'  ,'   .'               |_,-+         /\n    / ' '.`.        _,'   ,'     `.          |   '   _,.. /\n   /   `.  `\"'\"'\"\"'\"   _,^--------\"`.        |    `.'_  _/\n  /... _.`:.________,.'              `._,.-..|        \"'\n `.__.'                                 `._  /\n                                           \"'\n*/\n\n\npragma solidity ^0.8.4;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n}  \n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\ncontract SLOWPOKE is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n\n    mapping (address => bool) private _exemptFromFee;\n    mapping (address => bool) private marked;\n    mapping (address => uint) private cool_down;\n    mapping (address => uint256) private _ownedR;\n    mapping (address => uint256) private _ownedT;\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private constant _tTotal = 1000000000000 * 10**9;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _trFeeTotal;\n    \n    uint256 private _feeAddr1;\n    uint256 private _feeAddr2;\n    address payable private _addr_fee1;\n    address payable private _addr_fee2;\n    \n\n    string private constant _name = \"SLOWPOKE INU\";\n    string private constant _symbol = \"SLOW\";\n    uint8 private constant _decimals = 9;\n    \n    IUniswapV2Router02 private uniswapV2Router;\n    address private uniswapV2Pair;\n    bool private tradingOpen;\n    bool private inSwap = false;\n    bool private swapEnabled = false;\n    bool private cool_down_set = false;\n    uint256 private _maxTxAmt = _tTotal;\n\n    event MaxTxAmountUpdated(uint _maxTxAmt);\n    modifier lockTheSwap {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n    constructor () {\n        _addr_fee1 = payable(0xAEA1266300a6432448c60083b5E0e22440e8846C);\n        _addr_fee2 = payable(0xAEA1266300a6432448c60083b5E0e22440e8846C);\n        _ownedR[_msgSender()] = _rTotal;\n        _exemptFromFee[owner()] = true;\n        _exemptFromFee[address(this)] = true;\n        _exemptFromFee[_addr_fee1] = true;\n        _exemptFromFee[_addr_fee2] = true;\n        emit Transfer(address(0xAEA1266300a6432448c60083b5E0e22440e8846C), _msgSender(), _tTotal);\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public pure override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return tokenFromReflection(_ownedR[account]);\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function applyCooldownSet(bool onoff) external onlyOwner() {\n        cool_down_set = onoff;\n    }\n\n    function tokenFromReflection(uint256 rAmount) private view returns(uint256) {\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n        uint256 cvRate = _getRate();\n        return rAmount.div(cvRate);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        _feeAddr1 = 1;\n        _feeAddr2 = 1;\n        if (from != owner() && to != owner()) {\n            require(!marked[from] && !marked[to]);\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _exemptFromFee[to] && cool_down_set) {\n                require(amount <= _maxTxAmt);\n                require(cool_down[to] < block.timestamp);\n                cool_down[to] = block.timestamp + (30 seconds);\n            }\n            \n            if (to == uniswapV2Pair && from != address(uniswapV2Router) && ! _exemptFromFee[from]) {\n                _feeAddr1 = 1;\n                _feeAddr2 = 1;\n            }\n\n\n\n            uint256 ctTokenBal = balanceOf(address(this));\n            if (!inSwap && from != uniswapV2Pair && swapEnabled) {\n                swapTokensForEth(ctTokenBal);\n                uint256 contractETHBalance = address(this).balance;\n                if(contractETHBalance > 0) {\n                    sendETHToFee(address(this).balance);\n                }\n            }\n        }\n\t\t\n        _tokenTransfer(from,to,amount);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n        \n    function sendETHToFee(uint256 amount) private {\n        _addr_fee2.transfer(amount.div(2));\n        _addr_fee1.transfer(amount.div(2));\n    }\n    \n    function openTrading() external onlyOwner() {\n        require(!tradingOpen, \"trading is already open\");\n\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        uniswapV2Router = _uniswapV2Router;\n        _approve(address(this), address(uniswapV2Router), _tTotal);\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n        swapEnabled = true;\n        cool_down_set = true;\n        _maxTxAmt = 1000000000000000000 * 10**9;\n        tradingOpen = true;\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\n    }\n    \n    function flagBot(address[] memory botspct_) public onlyOwner {\n        for (uint i = 0; i < botspct_.length; i++) {\n            marked[botspct_[i]] = true;\n        }\n    }\n    \n    function DeleteBot(address clean) public onlyOwner {\n        marked[clean] = false;\n    }\n        \n    function _tokenTransfer(address sender, address recipient, uint256 amount) private {\n        _transferStandard(sender, recipient, amount);\n    }\n\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 reFee, uint256 tTransferAmount, uint256 trFee, uint256 t_Team) = _getValues(tAmount);\n        _ownedR[sender] = _ownedR[sender].sub(rAmount);\n        _ownedR[recipient] = _ownedR[recipient].add(rTransferAmount);\n\n        _takeTeam(t_Team);\n        _reflectrFee(reFee, trFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _takeTeam(uint256 t_Team) private {\n        uint256 cvRate =  _getRate();\n        uint256 rTeam = t_Team.mul(cvRate);\n        _ownedR[address(this)] = _ownedR[address(this)].add(rTeam);\n    }\n\n    function _reflectrFee(uint256 reFee, uint256 trFee) private {\n        _rTotal = _rTotal.sub(reFee);\n        _trFeeTotal = _trFeeTotal.add(trFee);\n    }\n\n    receive() external payable {}\n    \n    function manualswap() external {\n        require(_msgSender() == _addr_fee1);\n        uint256 contractBalance = balanceOf(address(this));\n        swapTokensForEth(contractBalance);\n    }\n    \n    function manualsend() external {\n        require(_msgSender() == _addr_fee1);\n        uint256 contractETHBalance = address(this).balance;\n        sendETHToFee(contractETHBalance);\n    }\n    \n\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n        (uint256 tTransferAmount, uint256 trFee, uint256 t_Team) = _getTValues(tAmount, _feeAddr1, _feeAddr2);\n        uint256 cvRate =  _getRate();\n        (uint256 rAmount, uint256 rTransferAmount, uint256 reFee) = _getRValues(tAmount, trFee, t_Team, cvRate);\n        return (rAmount, rTransferAmount, reFee, tTransferAmount, trFee, t_Team);\n    }\n\n    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {\n        uint256 trFee = tAmount.mul(taxFee).div(100);\n        uint256 t_Team = tAmount.mul(TeamFee).div(100);\n        uint256 tTransferAmount = tAmount.sub(trFee).sub(t_Team);\n        return (tTransferAmount, trFee, t_Team);\n    }\n\n    function _getRValues(uint256 tAmount, uint256 trFee, uint256 t_Team, uint256 cvRate) private pure returns (uint256, uint256, uint256) {\n        uint256 rAmount = tAmount.mul(cvRate);\n        uint256 reFee = trFee.mul(cvRate);\n        uint256 rTeam = t_Team.mul(cvRate);\n        uint256 rTransferAmount = rAmount.sub(reFee).sub(rTeam);\n        return (rAmount, rTransferAmount, reFee);\n    }\n\n\tfunction _getRate() private view returns(uint256) {\n        (uint256 rSupply, uint256 tSupply) = _GetSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _GetSupply() private view returns(uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;      \n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n}"}}}