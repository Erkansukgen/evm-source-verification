{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"ICO_Token.sol":{"content":"// File: contracts/SafeMath.sol\r\npragma solidity ^0.4.8;\r\ncontract SafeMath {\r\n    function safeAdd(uint256 _x, uint256 _y) internal returns(uint256) {\r\n      uint256 z = _x + _y;\r\n      assert((z >= _x) && (z >= _y));\r\n      return z;\r\n    }\r\n    function safeSub(uint256 _x, uint256 _y) internal returns (uint256) {\r\n        assert(_x >= _y);\r\n        return _x - _y;\r\n    }\r\n}\r\n// File: contracts/ERC20Interface.sol\r\npragma solidity ^0.4.8;\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20Interface {\r\n    /* -------------Function----------------------------*/\r\n    // Get the total token supply\r\n    function totalSupply() public constant returns (uint256 _totalSupply);\r\n     // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n     // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n     // Send _value amount of tokens from address _from to address _to\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    // this function is required for some DEX functionality\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n     // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n    /* -------------Event----------------------------*/\r\n     // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n     // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n// File: contracts/StandardToken.sol\r\npragma solidity ^0.4.8;\r\ncontract StandardToken is ERC20Interface, SafeMath{\r\n    /* Public variables of the token */\r\n    string  public name;\r\n    string  public symbol;\r\n    uint8   public decimals;\r\n    uint256 internal total;\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) balances;\r\n    /* This creates an array with all allowance */\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    //\r\n    function totalSupply() public constant returns (uint256 _totalSupply) {\r\n        _totalSupply = total;\r\n    }\r\n    // @_owner\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        balance = balances[_owner];\r\n    }\r\n    /// @notice Send `_value` tokens to `_to` from your account\r\n    /// @param _to The address of the recipient\r\n    /// @param _value the amount to send\r\n    function transfer(address _to, uint256 _value) public returns (bool success){\r\n        if (\r\n            balances[msg.sender] >= _value &&\r\n            _value > 0 &&\r\n            balances[_to] + _value > balances[_to]\r\n        ) {\r\n            //\r\n            balances[msg.sender] = safeSub(balances[msg.sender],_value);\r\n            balances[_to] = safeAdd(balances[_to], _value);\r\n            // Event\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    /// @notice Send `_value` tokens to `_to` in behalf of `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value the amount to send\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        if (balances[_from] >= _value\r\n            && allowed[_from][msg.sender] >= _value\r\n            && _value > 0\r\n            && balances[_to] + _value > balances[_to]) {\r\n            //\r\n            balances[_from] = safeSub(balances[_from],_value);\r\n            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\r\n            balances[_to] = safeAdd(balances[_to],_value);\r\n            // Event\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n    /// @param _spender The address authorized to spend\r\n    /// @param _value the max amount they can spend\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        // Event\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    // @notice\r\n    // @param _owner\r\n    // @param _spender\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n// File: contracts/ICO_Token.sol\r\npragma solidity ^0.4.8;\r\ncontract ICO_Token is StandardToken {\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function ICO_Token (\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol\r\n        ) public {\r\n        balances[msg.sender] = initialSupply;              // Give the creator all initial tokens\r\n        total = initialSupply;                        // Update total supply\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\r\n    }\r\n}"}}}