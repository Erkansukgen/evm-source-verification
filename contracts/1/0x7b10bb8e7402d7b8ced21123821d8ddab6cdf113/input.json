{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/otc_support_methods.sol":{"content":"pragma solidity ^0.5.12;\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\ncontract OtcLike {\n    struct OfferInfo {\n        uint              pay_amt;\n        address           pay_gem;\n        uint              buy_amt;\n        address           buy_gem;\n        address           owner;\n        uint64            timestamp;\n    }\n    mapping (uint => OfferInfo) public offers;\n    function getBestOffer(address, address) public view returns (uint);\n    function getWorseOffer(uint) public view returns (uint);\n}\n\ncontract MakerOtcSupportMethods is DSMath {\n    function getOffers(address otc, address payToken, address buyToken) public view returns (uint[100] memory ids,\n                                                                                             uint[100] memory payAmts,\n                                                                                             uint[100] memory buyAmts,\n                                                                                             address[100] memory owners,\n                                                                                             uint[100] memory timestamps) {\n        (ids, payAmts, buyAmts, owners, timestamps) = getOffers(otc, OtcLike(otc).getBestOffer(payToken, buyToken));\n    }\n\n    function getOffers(address otc, uint offerId_) public view returns (uint[100] memory ids, uint[100] memory payAmts,\n                                                                        uint[100] memory buyAmts, address[100] memory owners,\n                                                                        uint[100] memory timestamps) {\n        uint offerId = offerId_;\n        uint i = 0;\n        do {\n            (payAmts[i],, buyAmts[i],, owners[i], timestamps[i]) = OtcLike(otc).offers(offerId);\n            if(owners[i] == address(0)) break;\n            ids[i] = offerId;\n            offerId = OtcLike(otc).getWorseOffer(offerId);\n        } while (++i < 100);\n    }\n\n    function getOffersAmountToSellAll(address otc, address payToken,\n                                      uint payAmt, address buyToken) public view returns (uint ordersToTake, bool takesPartialOrder) {\n\n        uint offerId = OtcLike(otc).getBestOffer(buyToken, payToken);               // Get best offer for the token pair\n        ordersToTake = 0;\n        uint payAmt2 = payAmt;\n        uint orderBuyAmt = 0;\n        (,,orderBuyAmt,,,) = OtcLike(otc).offers(offerId);\n        while (payAmt2 > orderBuyAmt) {\n            ordersToTake ++;                                                        // New order taken\n            payAmt2 = sub(payAmt2, orderBuyAmt);                                    // Decrease amount to pay\n            if (payAmt2 > 0) {                                                      // If we still need more offers\n                offerId = OtcLike(otc).getWorseOffer(offerId);                      // We look for the next best offer\n                require(offerId != 0, \"\");                                          // Fails if there are not enough offers to complete\n                (,,orderBuyAmt,,,) = OtcLike(otc).offers(offerId);\n            }\n        }\n        ordersToTake = payAmt2 == orderBuyAmt ? ordersToTake + 1 : ordersToTake;    // If the remaining amount is equal than the latest order, then it will also be taken completely\n        takesPartialOrder = payAmt2 < orderBuyAmt;                                  // If the remaining amount is lower than the latest order, then it will take a partial order\n    }\n\n    function getOffersAmountToBuyAll(address otc, address buyToken,\n                                     uint buyAmt, address payToken) public view returns (uint ordersToTake, bool takesPartialOrder) {\n\n        uint offerId = OtcLike(otc).getBestOffer(buyToken, payToken);               // Get best offer for the token pair\n        ordersToTake = 0;\n        uint buyAmt2 = buyAmt;\n        uint orderPayAmt = 0;\n        (orderPayAmt,,,,,) = OtcLike(otc).offers(offerId);\n        while (buyAmt2 > orderPayAmt) {\n            ordersToTake ++;                                                        // New order taken\n            buyAmt2 = sub(buyAmt2, orderPayAmt);                                    // Decrease amount to buy\n            if (buyAmt2 > 0) {                                                      // If we still need more offers\n                offerId = OtcLike(otc).getWorseOffer(offerId);                      // We look for the next best offer\n                require(offerId != 0, \"\");                                          // Fails if there are not enough offers to complete\n                (orderPayAmt,,,,,) = OtcLike(otc).offers(offerId);\n            }\n        }\n        ordersToTake = buyAmt2 == orderPayAmt ? ordersToTake + 1 : ordersToTake;    // If the remaining amount is equal than the latest order, then it will also be taken completely\n        takesPartialOrder = buyAmt2 < orderPayAmt;                                  // If the remaining amount is lower than the latest order, then it will take a partial order\n    }\n}"}}}