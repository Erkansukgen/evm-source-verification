{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/SmartUni.sol":{"content":"pragma solidity ^0.6.6;\r\n\r\ncontract Interface{\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable {}\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external {}\r\n    \r\n}\r\n\r\ncontract SmartUni{\r\n\r\n    address payable public owner;\r\n    address public router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address public token = 0x0Ae055097C6d159879521C384F1D2123D1f195e6;\r\n    address public weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    uint public amountOutMin = 0;\r\n    address[] public path = [token, weth];\r\n    address public to = address(this);\r\n    uint public deadline = 1594369205;\r\n\r\n    constructor() payable public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n//admin stuff\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function changeTokenAddy(address _newToken) external onlyOwner() {\r\n        token = _newToken;\r\n    }\r\n\r\n    function thisBalance() public view returns(uint256){\r\n        return(address(this).balance);\r\n    }    \r\n    \r\n    function withdraw() public onlyOwner{\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    fallback() payable external{\r\n    }\r\n\r\n//for use\r\n\r\n    function uniBuy() public payable onlyOwner {\r\n        Interface clone = Interface(router);\r\n        clone.swapExactETHForTokens.value(address(this).balance)(amountOutMin,path,to,deadline);\r\n    }\r\n}"}}}