{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "LiquidityLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n//Use 0.8.3\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ncontract UniswapContract {\r\n    function transfer(address recipient, uint256 amount) external returns (bool){}\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool){}\r\n}\r\n\r\n\r\ncontract LiquidityLock is Context {\r\n\r\n    address public liquidityOwner;\r\n\r\n    UniswapContract public immutable uniswapToken;\r\n\r\n    uint256 public timeAdded = 1642020492;\r\n    uint256 public beginUnlockingTime = 1657572492;\r\n    uint256 public fullyUnlockedTime = 1673577444;\r\n    uint256 public initiallyLockedTokens;\r\n    uint256 public multiplierForDateCheck;\r\n    uint256 public withdrawnTokens;\r\n\r\n    constructor (address tokenAddress) {\r\n        liquidityOwner = _msgSender();\r\n        uniswapToken = UniswapContract(tokenAddress);\r\n    }\r\n\r\n    function lockLiquidity(uint256 amountToLock) external onlyLProvider() {\r\n        initiallyLockedTokens = amountToLock;\r\n        uint256 tokensToSetMultiplier = amountToLock / 10**18;\r\n        multiplierForDateCheck = (fullyUnlockedTime - beginUnlockingTime) / tokensToSetMultiplier; \r\n        uniswapToken.transferFrom(_msgSender(), address(this), amountToLock);\r\n\r\n    }\r\n\r\n    function withdrawTokens(uint256 amountToWithdraw) external onlyLProvider() {\r\n        uint256 currentTime = block.timestamp;\r\n        require(currentTime >= beginUnlockingTime, \"Liquidity has not started unlocking yet\");\r\n\r\n        if(currentTime < fullyUnlockedTime) {\r\n            require(currentTime >= withdrawDate(amountToWithdraw), \"Withdrawing more liquidity than is unlocked\");\r\n        }\r\n\r\n        uniswapToken.transfer(liquidityOwner, amountToWithdraw);\r\n        withdrawnTokens += amountToWithdraw;\r\n\r\n    }\r\n\r\n    function withdrawDate(uint256 amountToWithdraw) public view returns (uint256){\r\n        uint256 tokensNoDecimals = (amountToWithdraw / 10**18) + (withdrawnTokens / 10**18);\r\n        return (tokensNoDecimals * multiplierForDateCheck) + beginUnlockingTime;\r\n    }\r\n\r\n    modifier onlyLProvider() {\r\n        require(_msgSender() == liquidityOwner, \"Caller is not the liquidity provider\");\r\n        _;\r\n    }\r\n\r\n}"
    }
  }
}