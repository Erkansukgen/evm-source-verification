{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"multiSignature.sol":{"content":"pragma solidity ^0.6.2;\n// SPDX-License-Identifier: apache 2.0\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract wallet{\n    \n    bool public contract_is_active;\n    address[4] public boardMember;\n    address public dev_address;\n    mapping( address => mapping(address => mapping(uint256 => uint256))) public allowed_amount;\n \n    constructor( address member_1, address member_2, address member_3, address member_4) public {\n        boardMember[0] = member_1;\n        boardMember[1] = member_2;\n        boardMember[2] = member_3;\n        boardMember[3] = member_4;\n        dev_address = msg.sender;\n\n    }\n    \n    function pause ( bool _isActive) public{\n           require(dev_address == msg.sender);\n           contract_is_active = _isActive;\n    }\n        \n    function vote (address token_contract_address, address _to, uint256 _amount) public{\n     \n        if(boardMember[0]== msg.sender){\n            allowed_amount[token_contract_address][_to][0]=_amount;\n            return();\n        }\n        if(boardMember[1]== msg.sender){\n            allowed_amount[token_contract_address][_to][1]=_amount;\n            return();\n        }\n        if(boardMember[2]== msg.sender){\n            allowed_amount[token_contract_address][_to][2]=_amount;\n            return();\n        }\n        if(boardMember[3]== msg.sender){\n            allowed_amount[token_contract_address][_to][3]=_amount;\n            return();\n        }\n        revert();\n        \n    }\n    \n    function check_allowence (address token_contract_address, address _to, uint256 _amount) public view returns(bool){\n        \n        uint256 approved_vote = 0;\n        if(allowed_amount[token_contract_address][_to][0]>= _amount){\n            approved_vote+=1;\n           \n        }\n        if(allowed_amount[token_contract_address][_to][1]>= _amount){\n            approved_vote+=1;\n           \n        }\n        if(allowed_amount[token_contract_address][_to][2]>= _amount){\n            approved_vote+=1;\n           \n        }\n        if(allowed_amount[token_contract_address][_to][3]>= _amount){\n            approved_vote+=1;\n           \n        }\n        \n       if (approved_vote>=3){\n           return(true);\n       }\n    \n        return(false);\n            \n        \n    }\n    \n    function transferToken (address token_contract_address, address _to, uint256 _amount) public{\n        require(contract_is_active == true);\n        require(msg.sender == dev_address);\n        require(check_allowence(token_contract_address, _to, _amount) == true);\n        allowed_amount[token_contract_address][_to][0]=0;\n        allowed_amount[token_contract_address][_to][1]=0;\n        allowed_amount[token_contract_address][_to][2]=0;\n        allowed_amount[token_contract_address][_to][3]=0;\n                             \n        IERC20(token_contract_address).transfer(_to, _amount);\n    }\n}\n"}}}