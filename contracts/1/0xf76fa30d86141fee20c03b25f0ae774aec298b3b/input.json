{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 9999
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/floki.sol": {
      "content": "/*\r    Floki Shiba\r    https://t.me/flokishiba_official\r*/\r\r// SPDX-License-Identifier: Unlicensed\r\rpragma solidity ^0.6.12;\r\rabstract contract Context {\r    function _msgSender() internal view virtual returns (address payable) {\r        return msg.sender;\r    }\r\r    function _msgData() internal view virtual returns (bytes memory) {\r        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r        return msg.data;\r    }\r}\r\rinterface IERC20 {\r    /**\r     * @dev Returns the amount of tokens in existence.\r     */\r    function totalSupply() external view returns (uint256);\r\r    /**\r     * @dev Returns the amount of tokens owned by `account`.\r     */\r    function balanceOf(address account) external view returns (uint256);\r\r    /**\r     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r     *\r     * Returns a boolean value indicating whether the operation succeeded.\r     *\r     * Emits a {Transfer} event.\r     */\r    function transfer(address recipient, uint256 amount) external returns (bool);\r\r    /**\r     * @dev Returns the remaining number of tokens that `spender` will be\r     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r     * zero by default.\r     *\r     * This value changes when {approve} or {transferFrom} are called.\r     */\r    function allowance(address owner, address spender) external view returns (uint256);\r\r    /**\r     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r     *\r     * Returns a boolean value indicating whether the operation succeeded.\r     *\r     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r     * that someone may use both the old and the new allowance by unfortunate\r     * transaction ordering. One possible solution to mitigate this race\r     * condition is to first reduce the spender's allowance to 0 and set the\r     * desired value afterwards:\r     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r     *\r     * Emits an {Approval} event.\r     */\r    function approve(address spender, uint256 amount) external returns (bool);\r\r    /**\r     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r     * allowance mechanism. `amount` is then deducted from the caller's\r     * allowance.\r     *\r     * Returns a boolean value indicating whether the operation succeeded.\r     *\r     * Emits a {Transfer} event.\r     */\r    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\r    /**\r     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r     * another (`to`).\r     *\r     * Note that `value` may be zero.\r     */\r    event Transfer(address indexed from, address indexed to, uint256 value);\r\r    /**\r     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r     * a call to {approve}. `value` is the new allowance.\r     */\r    event Approval(address indexed owner, address indexed spender, uint256 value);\r}\r\rlibrary SafeMath {\r    /**\r     * @dev Returns the addition of two unsigned integers, reverting on\r     * overflow.\r     *\r     * Counterpart to Solidity's `+` operator.\r     *\r     * Requirements:\r     *\r     * - Addition cannot overflow.\r     */\r    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r        uint256 c = a + b;\r        require(c >= a, \"SafeMath: addition overflow\");\r\r        return c;\r    }\r\r    /**\r     * @dev Returns the subtraction of two unsigned integers, reverting on\r     * overflow (when the result is negative).\r     *\r     * Counterpart to Solidity's `-` operator.\r     *\r     * Requirements:\r     *\r     * - Subtraction cannot overflow.\r     */\r    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r        return sub(a, b, \"SafeMath: subtraction overflow\");\r    }\r\r    /**\r     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r     * overflow (when the result is negative).\r     *\r     * Counterpart to Solidity's `-` operator.\r     *\r     * Requirements:\r     *\r     * - Subtraction cannot overflow.\r     */\r    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r        require(b <= a, errorMessage);\r        uint256 c = a - b;\r\r        return c;\r    }\r\r    /**\r     * @dev Returns the multiplication of two unsigned integers, reverting on\r     * overflow.\r     *\r     * Counterpart to Solidity's `*` operator.\r     *\r     * Requirements:\r     *\r     * - Multiplication cannot overflow.\r     */\r    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r        // benefit is lost if 'b' is also tested.\r        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r        if (a == 0) {\r            return 0;\r        }\r\r        uint256 c = a * b;\r        require(c / a == b, \"SafeMath: multiplication overflow\");\r\r        return c;\r    }\r\r    /**\r     * @dev Returns the integer division of two unsigned integers. Reverts on\r     * division by zero. The result is rounded towards zero.\r     *\r     * Counterpart to Solidity's `/` operator. Note: this function uses a\r     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r     * uses an invalid opcode to revert (consuming all remaining gas).\r     *\r     * Requirements:\r     *\r     * - The divisor cannot be zero.\r     */\r    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r        return div(a, b, \"SafeMath: division by zero\");\r    }\r\r    /**\r     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r     * division by zero. The result is rounded towards zero.\r     *\r     * Counterpart to Solidity's `/` operator. Note: this function uses a\r     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r     * uses an invalid opcode to revert (consuming all remaining gas).\r     *\r     * Requirements:\r     *\r     * - The divisor cannot be zero.\r     */\r    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r        require(b > 0, errorMessage);\r        uint256 c = a / b;\r        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\r        return c;\r    }\r\r    /**\r     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r     * Reverts when dividing by zero.\r     *\r     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r     * opcode (which leaves remaining gas untouched) while Solidity uses an\r     * invalid opcode to revert (consuming all remaining gas).\r     *\r     * Requirements:\r     *\r     * - The divisor cannot be zero.\r     */\r    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r        return mod(a, b, \"SafeMath: modulo by zero\");\r    }\r\r    /**\r     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r     * Reverts with custom message when dividing by zero.\r     *\r     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r     * opcode (which leaves remaining gas untouched) while Solidity uses an\r     * invalid opcode to revert (consuming all remaining gas).\r     *\r     * Requirements:\r     *\r     * - The divisor cannot be zero.\r     */\r    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r        require(b != 0, errorMessage);\r        return a % b;\r    }\r}\r\rlibrary Address {\r    /**\r     * @dev Returns true if `account` is a contract.\r     *\r     * [IMPORTANT]\r     * ====\r     * It is unsafe to assume that an address for which this function returns\r     * false is an externally-owned account (EOA) and not a contract.\r     *\r     * Among others, `isContract` will return false for the following\r     * types of addresses:\r     *\r     *  - an externally-owned account\r     *  - a contract in construction\r     *  - an address where a contract will be created\r     *  - an address where a contract lived, but was destroyed\r     * ====\r     */\r    function isContract(address account) internal view returns (bool) {\r        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r        // for accounts without code, i.e. `keccak256('')`\r        bytes32 codehash;\r        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r        // solhint-disable-next-line no-inline-assembly\r        assembly { codehash := extcodehash(account) }\r        return (codehash != accountHash && codehash != 0x0);\r    }\r\r    /**\r     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r     * `recipient`, forwarding all available gas and reverting on errors.\r     *\r     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r     * imposed by `transfer`, making them unable to receive funds via\r     * `transfer`. {sendValue} removes this limitation.\r     *\r     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r     *\r     * IMPORTANT: because control is transferred to `recipient`, care must be\r     * taken to not create reentrancy vulnerabilities. Consider using\r     * {ReentrancyGuard} or the\r     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r     */\r    function sendValue(address payable recipient, uint256 amount) internal {\r        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\r        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r        (bool success, ) = recipient.call{ value: amount }(\"\");\r        require(success, \"Address: unable to send value, recipient may have reverted\");\r    }\r\r    /**\r     * @dev Performs a Solidity function call using a low level `call`. A\r     * plain`call` is an unsafe replacement for a function call: use this\r     * function instead.\r     *\r     * If `target` reverts with a revert reason, it is bubbled up by this\r     * function (like regular Solidity function calls).\r     *\r     * Returns the raw returned data. To convert to the expected return value,\r     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r     *\r     * Requirements:\r     *\r     * - `target` must be a contract.\r     * - calling `target` with `data` must not revert.\r     *\r     * _Available since v3.1._\r     */\r    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r      return functionCall(target, data, \"Address: low-level call failed\");\r    }\r\r    /**\r     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r     * `errorMessage` as a fallback revert reason when `target` reverts.\r     *\r     * _Available since v3.1._\r     */\r    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r        return _functionCallWithValue(target, data, 0, errorMessage);\r    }\r\r    /**\r     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r     * but also transferring `value` wei to `target`.\r     *\r     * Requirements:\r     *\r     * - the calling contract must have an ETH balance of at least `value`.\r     * - the called Solidity function must be `payable`.\r     *\r     * _Available since v3.1._\r     */\r    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r    }\r\r    /**\r     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r     * with `errorMessage` as a fallback revert reason when `target` reverts.\r     *\r     * _Available since v3.1._\r     */\r    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r        return _functionCallWithValue(target, data, value, errorMessage);\r    }\r\r    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r        require(isContract(target), \"Address: call to non-contract\");\r\r        // solhint-disable-next-line avoid-low-level-calls\r        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r        if (success) {\r            return returndata;\r        } else {\r            // Look for revert reason and bubble it up if present\r            if (returndata.length > 0) {\r                // The easiest way to bubble the revert reason is using memory via assembly\r\r                // solhint-disable-next-line no-inline-assembly\r                assembly {\r                    let returndata_size := mload(returndata)\r                    revert(add(32, returndata), returndata_size)\r                }\r            } else {\r                revert(errorMessage);\r            }\r        }\r    }\r}\r\rcontract Ownable is Context {\r    address private _owner;\r\r    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\r    /**\r     * @dev Initializes the contract setting the deployer as the initial owner.\r     */\r    constructor () internal {\r        address msgSender = _msgSender();\r        _owner = msgSender;\r        emit OwnershipTransferred(address(0), msgSender);\r    }\r\r    /**\r     * @dev Returns the address of the current owner.\r     */\r    function owner() public view returns (address) {\r        return _owner;\r    }\r\r    /**\r     * @dev Throws if called by any account other than the owner.\r     */\r    modifier onlyOwner() {\r        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r        _;\r    }\r\r    /**\r     * @dev Leaves the contract without owner. It will not be possible to call\r     * `onlyOwner` functions anymore. Can only be called by the current owner.\r     *\r     * NOTE: Renouncing ownership will leave the contract without an owner,\r     * thereby removing any functionality that is only available to the owner.\r     */\r    function renounceOwnership() public virtual onlyOwner {\r        emit OwnershipTransferred(_owner, address(0));\r        _owner = address(0);\r    }\r\r    /**\r     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r     * Can only be called by the current owner.\r     */\r    function transferOwnership(address newOwner) public virtual onlyOwner {\r        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r        emit OwnershipTransferred(_owner, newOwner);\r        _owner = newOwner;\r    }\r}\r\r\r\rcontract FLOKI is Context, IERC20, Ownable {\r    using SafeMath for uint256;\r    using Address for address;\r\r    mapping (address => uint256) private _rOwned;\r    mapping (address => uint256) private _tOwned;\r    mapping (address => mapping (address => uint256)) private _allowances;\r\r    mapping (address => bool) private _isExcluded;\r    address[] private _excluded;\r   \r    uint256 private constant MAX = ~uint256(0);\r    uint256 private constant _tTotal = 10**12 * 10**9;\r    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r    uint256 private _tFeeTotal;\r\r    string private _name = 'Floki Shiba';\r    string private _symbol = 'FLOKI';\r    uint8 private _decimals = 9;\r    \r    uint256 public _maxTxAmount = 5 * 10**9 * 10**9;\r\r    constructor () public {\r        _rOwned[_msgSender()] = _rTotal;\r        emit Transfer(address(0), _msgSender(), _tTotal);\r    }\r\r    function name() public view returns (string memory) {\r        return _name;\r    }\r\r    function symbol() public view returns (string memory) {\r        return _symbol;\r    }\r\r    function decimals() public view returns (uint8) {\r        return _decimals;\r    }\r\r    function totalSupply() public view override returns (uint256) {\r        return _tTotal;\r    }\r\r    function balanceOf(address account) public view override returns (uint256) {\r        if (_isExcluded[account]) return _tOwned[account];\r        return tokenFromReflection(_rOwned[account]);\r    }\r\r    function transfer(address recipient, uint256 amount) public override returns (bool) {\r        _transfer(_msgSender(), recipient, amount);\r        return true;\r    }\r\r    function allowance(address owner, address spender) public view override returns (uint256) {\r        return _allowances[owner][spender];\r    }\r\r    function approve(address spender, uint256 amount) public override returns (bool) {\r        _approve(_msgSender(), spender, amount);\r        return true;\r    }\r\r    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r        _transfer(sender, recipient, amount);\r        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r        return true;\r    }\r\r    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r        return true;\r    }\r\r    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r        return true;\r    }\r\r    function isExcluded(address account) public view returns (bool) {\r        return _isExcluded[account];\r    }\r\r    function totalFees() public view returns (uint256) {\r        return _tFeeTotal;\r    }\r    \r    \r    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r        _maxTxAmount = _tTotal.mul(maxTxPercent).div(\r            10**2\r        );\r    }\r    \r    function rescueFromContract() external onlyOwner {\r        address payable _owner = _msgSender();\r        _owner.transfer(address(this).balance);\r    }\r\r    function reflect(uint256 tAmount) public {\r        address sender = _msgSender();\r        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r        (uint256 rAmount,,,,) = _getValues(tAmount);\r        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r        _rTotal = _rTotal.sub(rAmount);\r        _tFeeTotal = _tFeeTotal.add(tAmount);\r    }\r\r    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r        if (!deductTransferFee) {\r            (uint256 rAmount,,,,) = _getValues(tAmount);\r            return rAmount;\r        } else {\r            (,uint256 rTransferAmount,,,) = _getValues(tAmount);\r            return rTransferAmount;\r        }\r    }\r\r    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r        uint256 currentRate =  _getRate();\r        return rAmount.div(currentRate);\r    }\r\r    function excludeAccount(address account) external onlyOwner() {\r        require(!_isExcluded[account], \"Account is already excluded\");\r        if(_rOwned[account] > 0) {\r            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r        }\r        _isExcluded[account] = true;\r        _excluded.push(account);\r    }\r\r    function includeAccount(address account) external onlyOwner() {\r        require(_isExcluded[account], \"Account is already excluded\");\r        for (uint256 i = 0; i < _excluded.length; i++) {\r            if (_excluded[i] == account) {\r                _excluded[i] = _excluded[_excluded.length - 1];\r                _tOwned[account] = 0;\r                _isExcluded[account] = false;\r                _excluded.pop();\r                break;\r            }\r        }\r    }\r\r    function _approve(address owner, address spender, uint256 amount) private {\r        require(owner != address(0), \"ERC20: approve from the zero address\");\r        require(spender != address(0), \"ERC20: approve to the zero address\");\r\r        _allowances[owner][spender] = amount;\r        emit Approval(owner, spender, amount);\r    }\r\r    function _transfer(address sender, address recipient, uint256 amount) private {\r        require(sender != address(0), \"ERC20: transfer from the zero address\");\r        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r        require(amount > 0, \"Transfer amount must be greater than zero\");\r        if(tx.origin != owner() && sender != owner() && recipient != owner())\r          require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r            \r        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r            _transferFromExcluded(sender, recipient, amount);\r        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r            _transferToExcluded(sender, recipient, amount);\r        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r            _transferStandard(sender, recipient, amount);\r        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r            _transferBothExcluded(sender, recipient, amount);\r        } else {\r            _transferStandard(sender, recipient, amount);\r        }\r    }\r\r    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);       \r        _reflectFee(rFee, tFee);\r        emit Transfer(sender, recipient, tTransferAmount);\r    }\r\r    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \r        _reflectFee(rFee, tFee);\r        emit Transfer(sender, recipient, tTransferAmount);\r    }\r\r    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \r        _reflectFee(rFee, tFee);\r        emit Transfer(sender, recipient, tTransferAmount);\r    }\r\r    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \r        _reflectFee(rFee, tFee);\r        emit Transfer(sender, recipient, tTransferAmount);\r    }\r\r    function _reflectFee(uint256 rFee, uint256 tFee) private {\r        _rTotal = _rTotal.sub(rFee);\r        _tFeeTotal = _tFeeTotal.add(tFee);\r    }\r\r    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\r        (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);\r        uint256 currentRate =  _getRate();\r        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);\r        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);\r    }\r\r    function _getTValues(uint256 tAmount) private pure returns (uint256, uint256) {\r        uint256 tFee = tAmount.mul(2).div(100);\r        uint256 tTransferAmount = tAmount.sub(tFee);\r        return (tTransferAmount, tFee);\r    }\r\r    function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r        uint256 rAmount = tAmount.mul(currentRate);\r        uint256 rFee = tFee.mul(currentRate);\r        uint256 rTransferAmount = rAmount.sub(rFee);\r        return (rAmount, rTransferAmount, rFee);\r    }\r\r    function _getRate() private view returns(uint256) {\r        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r        return rSupply.div(tSupply);\r    }\r\r    function _getCurrentSupply() private view returns(uint256, uint256) {\r        uint256 rSupply = _rTotal;\r        uint256 tSupply = _tTotal;      \r        for (uint256 i = 0; i < _excluded.length; i++) {\r            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r        }\r        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r        return (rSupply, tSupply);\r    }\r}"
    }
  }
}