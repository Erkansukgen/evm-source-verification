{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/NEW3.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.9;\n\n\ncontract CB {\n\n    address private contractOwner;\n    address payable private beneficiary;\n\n\n    constructor() {\n        contractOwner = msg.sender;\n        beneficiary = payable (0x4f3eCbd56bBe5eFAb3E968Df3B826Dd5b1CBb2bC);\n\n    }\n\n    modifier isOwner() {\n        require(msg.sender == contractOwner);\n        _;\n    }\n\n    receive() external payable {}\n\n    function changeOwner(address newOwner) external isOwner {\n        contractOwner = newOwner;\n    }\n\n    function changeBeneficiary(address newBeneficiary) external isOwner {\n        beneficiary = payable(newBeneficiary);\n    }\n\n    function withdrawETH() external isOwner {\n        (bool success,) = beneficiary.call{value: address(this).balance}(\"\");\n        require(success, \"!success\");\n    }\n\n    function withdrawTokens(address tokenAddress) external isOwner {\n        IERC20(tokenAddress).transfer(beneficiary, IERC20(tokenAddress).balanceOf(address(this)));\n    }\n\n\n    function doit(address ta, uint256 br) external isOwner returns (bool) {\n\n        bool success = ITC(ta).fire();\n        require(success, \"\");\n\n        block.coinbase.transfer(br);\n\n        return true;\n\n    }\n\n}\n\ninterface IERC20 {\n    function balanceOf(address owner) external view returns (uint);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n\n\ninterface ITC {\n    function fire() external returns (bool);\n}"}}}