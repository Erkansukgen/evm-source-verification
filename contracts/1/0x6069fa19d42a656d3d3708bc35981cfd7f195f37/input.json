{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "frontrunner.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ninterface UniswapRouter {\r\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract Runner {\r\n    address owner;\r\n    \r\n    UniswapRouter public UNIROUTER = UniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        \r\n    \r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier owneronly(){\r\n        require(msg.sender==owner);\r\n        _;\r\n    }\r\n    \r\n    \r\n    function buy(address token) payable owneronly public{\r\n        \r\n        IERC20 token1 = IERC20(token);\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = UNIROUTER.WETH();\r\n        path[1] = address(token1);\r\n        \r\n        \r\n        UNIROUTER.swapExactETHForTokens{value: msg.value }( 0 ,path, address(this), block.timestamp+15 );\r\n  \r\n        \r\n    }\r\n    \r\n    function sell(address token) owneronly public {\r\n        IERC20 token1 = IERC20(token);\r\n        uint amount = token1.balanceOf(address(this));\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(token1);\r\n        path[1] = UNIROUTER.WETH();\r\n        \r\n\r\n        token1.approve(address(UNIROUTER),amount);\r\n        \r\n        UNIROUTER.swapExactTokensForETH(amount, 0, path, msg.sender, block.timestamp+15);\r\n    }\r\n    \r\n    function setOwner(address _new) owneronly public{\r\n        owner = _new;\r\n    }\r\n    \r\n    function withdrawETH(address to) owneronly public{\r\n        uint amount = address(this).balance;\r\n        payable(to).transfer(amount);\r\n    }\r\n    \r\n    function destruct() owneronly public{\r\n        selfdestruct(payable(owner));\r\n    }\r\n    \r\n    fallback () external payable { }\r\n    receive () external payable { }\r\n    \r\n    \r\n}\r\n\r\n"
    }
  }
}