{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "MintHelper.sol": {
      "content": "/**\r\n *Submitted for verification at Etherscan.io on 2018-09-23\r\n*/\r\n\r\npragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        c = a + b;\r\n\r\n        require(c >= a);\r\n\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        require(b <= a);\r\n\r\n        c = a - b;\r\n\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        c = a * b;\r\n\r\n        require(a == 0 || c / a == b);\r\n\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        require(b > 0);\r\n\r\n        c = a / b;\r\n\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n\r\n\r\n\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract ERC918Interface {\r\n  function totalSupply() public constant returns (uint);\r\n  function getMiningDifficulty() public constant returns (uint);\r\n  function getMiningTarget() public constant returns (uint);\r\n  function getMiningReward() public constant returns (uint);\r\n  function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n\r\n  function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\r\n\r\n  event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n\r\n}\r\n\r\n/*\r\nThe owner (or anyone) will deposit tokens in here\r\nThe owner calls the multisend method to send out payments\r\n*/\r\ncontract MintHelper is Ownable {\r\n\r\n  using SafeMath for uint;\r\n\r\n    string public name;\r\n\r\n\r\n    address public mintableToken;\r\n\r\n    address public payoutsWallet;\r\n    address public minterWallet;\r\n\r\n    uint public minterFeePercent;\r\n\r\n\r\n    constructor(address mToken, address pWallet, address mWallet)\r\n    {\r\n      mintableToken = mToken;\r\n      payoutsWallet = pWallet;\r\n      minterWallet = mWallet;\r\n      minterFeePercent = 5;\r\n    }\r\n\r\n    function setMintableToken(address mToken)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n      mintableToken = mToken;\r\n      return true;\r\n    }\r\n\r\n    function setPayoutsWallet(address pWallet)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n      payoutsWallet = pWallet;\r\n      return true;\r\n    }\r\n\r\n    function setMinterWallet(address mWallet)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n      minterWallet = mWallet;\r\n      return true;\r\n    }\r\n\r\n    function setMinterFeePercent(uint fee)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n      require(fee >= 0 && fee <= 100);\r\n      minterFeePercent = fee;\r\n      return true;\r\n    }\r\n\r\n    function setName(string newName)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n      name = newName;\r\n      return true;\r\n    }\r\n\r\n    function proxyMint(uint256 nonce, bytes32 challenge_digest )\r\n//    public onlyOwner  //does not need to be only owner, owner will get paid\r\n    returns (bool)\r\n    {\r\n      //identify the rewards that will be won and how to split them up\r\n      uint totalReward = ERC918Interface(mintableToken).getMiningReward();\r\n\r\n      // get paid in new tokens\r\n      require(ERC918Interface(mintableToken).mint(nonce, challenge_digest));\r\n\r\n      //transfer the tokens to the correct wallets\r\n      require(ERC20Interface(mintableToken).transfer(minterWallet, totalReward));\r\n\r\n      return true;\r\n\r\n    }\r\n\r\n    //withdraw any eth inside\r\n    function withdraw()\r\n    public onlyOwner\r\n    {\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n\r\n    //send tokens out\r\n    function send(address _tokenAddr, address dest, uint value)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n     return ERC20Interface(_tokenAddr).transfer(dest, value);\r\n    }\r\n}"
    }
  }
}