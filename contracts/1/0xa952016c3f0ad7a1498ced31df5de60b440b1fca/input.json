{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "MyAdvancedToken.sol": {
      "content": "pragma solidity ^0.4.16;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract owned {\r\n    address public owner;\r\n \r\n\r\n    function owned () public {\r\n        owner = msg.sender;\r\n    }\r\n \r\n\r\n    modifier onlyOwner {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n \r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n        owner = newOwner;\r\n      }\r\n    }\r\n}\r\n \r\n\r\ncontract TokenERC20 {\r\n    string public name; \r\n    string public symbol; \r\n    uint8 public decimals = 18;  \r\n    uint256 public totalSupply; \r\n \r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n \r\n    event Transfer(address indexed from, address indexed to, uint256 value);  \r\n    event Burn(address indexed from, uint256 value);  \r\n \r\n    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\r\n\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);   \r\n        balanceOf[msg.sender] = totalSupply;\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n    }\r\n \r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n \r\n\r\n      require(_to != 0x0);\r\n \r\n\r\n      require(balanceOf[_from] >= _value);\r\n \r\n\r\n      require(balanceOf[_to] + _value > balanceOf[_to]);\r\n \r\n\r\n      uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n \r\n\r\n      balanceOf[_from] -= _value;\r\n \r\n\r\n      balanceOf[_to] += _value;\r\n \r\n\r\n      Transfer(_from, _to, _value);\r\n \r\n      assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n \r\n    }\r\n \r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n \r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n \r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n \r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n \r\n    function burn(uint256 _value) public returns (bool success) {\r\n\r\n        require(balanceOf[msg.sender] >= _value);\r\n\r\n        balanceOf[msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n \r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\r\n        require(balanceOf[_from] >= _value);\r\n\r\n        require(_value <= allowance[_from][msg.sender]);\r\n\r\n        balanceOf[_from] -= _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n\r\n        totalSupply -= _value;\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\n \r\n\r\ncontract MyAdvancedToken is owned, TokenERC20 {\r\n \r\n    mapping (address => bool) public frozenAccount;\r\n \r\n    event FrozenFunds(address target, bool frozen);\r\n \r\n \r\n\r\n    function MyAdvancedToken(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\r\n \r\n \r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n \r\n        require (_to != 0x0);\r\n \r\n        require (balanceOf[_from] > _value);\r\n \r\n        require (balanceOf[_to] + _value > balanceOf[_to]);\r\n \r\n        require(!frozenAccount[_from]);\r\n        require(!frozenAccount[_to]);\r\n \r\n        balanceOf[_from] -= _value;\r\n \r\n        balanceOf[_to] += _value;\r\n \r\n        Transfer(_from, _to, _value);\r\n \r\n    }\r\n \r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n \r\n        balanceOf[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n \r\n \r\n        Transfer(0, this, mintedAmount);\r\n        Transfer(this, target, mintedAmount);\r\n    }\r\n \r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n\r\n}"
    }
  }
}