{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/2_Owner.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\ninterface IUniswapV2Pair {\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n}\n\nabstract contract UniswapV2Factory  {\n    mapping(address => mapping(address => address)) public getPair;\n    address[] public allPairs;\n    function allPairsLength() external view virtual returns (uint);\n}\n\ncontract UniswapLikeLookup {\n    function getReservesAndTokens(IUniswapV2Pair[] calldata _pairs) external view returns (uint256[3][] memory, address[2][] memory) {\n        uint256[3][] memory reserves = new uint256[3][](_pairs.length);\n        address[2][] memory tokens = new address[2][](_pairs.length);\n\n        for (uint i = 0; i < _pairs.length; i++) {\n            (reserves[i][0], reserves[i][1], reserves[i][2]) = _pairs[i].getReserves();\n            (tokens[i][0], tokens[i][1]) = (_pairs[i].token0(), _pairs[i].token1());\n        }\n\n        return (reserves, tokens);\n    }\n\n    function getReservesByPairs(IUniswapV2Pair[] calldata _pairs) external view returns (uint256[3][] memory) {\n        uint256[3][] memory result = new uint256[3][](_pairs.length);\n        for (uint i = 0; i < _pairs.length; i++)\n            (result[i][0], result[i][1], result[i][2]) = _pairs[i].getReserves();\n        return result;\n    }\n\n    function getPairsByIndexRange(UniswapV2Factory _uniswapFactory, uint256 _start, uint256 _stop) external view returns (address[3][] memory)  {\n        uint256 _allPairsLength = _uniswapFactory.allPairsLength();\n        if (_stop > _allPairsLength) {\n            _stop = _allPairsLength;\n        }\n        require(_stop >= _start, \"start cannot be higher than stop\");\n        uint256 _qty = _stop - _start;\n        address[3][] memory result = new address[3][](_qty);\n        for (uint i = 0; i < _qty; i++) {\n            IUniswapV2Pair _uniswapPair = IUniswapV2Pair(_uniswapFactory.allPairs(_start + i));\n            result[i][0] = _uniswapPair.token0();\n            result[i][1] = _uniswapPair.token1();\n            result[i][2] = address(_uniswapPair);\n        }\n        return result;\n    }\n}\n"
    }
  }
}