{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":1000},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/TeleportCustody.sol":{"content":"\n// File: @openzeppelin/contracts/GSN/Context.sol\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/teleport/ethereum/TeleportAdmin.sol\n\npragma solidity 0.6.12;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there are multiple accounts (admins) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `consumeAuthorization`, which can be applied to your functions to restrict\n * their use to the admins.\n */\ncontract TeleportAdmin is Ownable {\n  // Marks that the contract is frozen or unfrozen (safety kill-switch)\n  bool private _isFrozen;\n\n  mapping(address => uint256) private _allowedAmount;\n\n  event AdminUpdated(address indexed account, uint256 allowedAmount);\n\n  // Modifiers\n\n  /**\n    * @dev Throw if contract is currently frozen.\n    */\n  modifier notFrozen() {\n    require(\n      !_isFrozen,\n      \"TeleportAdmin: contract is frozen by owner\"\n    );\n\n    _;\n  }\n\n  /**\n    * @dev Throw if caller does not have sufficient authorized amount.\n    */\n  modifier consumeAuthorization(uint256 amount) {\n    address sender = _msgSender();\n    require(\n      allowedAmount(sender) >= amount,\n      \"TeleportAdmin: caller does not have sufficient authorization\"\n    );\n\n    _;\n\n    // reduce authorization amount. Underflow cannot occur because we have\n    // already checked that admin has sufficient allowed amount.\n    _allowedAmount[sender] -= amount;\n    emit AdminUpdated(sender, _allowedAmount[sender]);\n  }\n\n  /**\n    * @dev Checks the authorized amount of an admin account.\n    */\n  function allowedAmount(address account)\n    public\n    view\n    returns (uint256)\n  {\n    return _allowedAmount[account];\n  }\n\n  /**\n    * @dev Returns if the contract is currently frozen.\n    */\n  function isFrozen()\n    public\n    view\n    returns (bool)\n  {\n    return _isFrozen;\n  }\n\n  /**\n    * @dev Owner freezes the contract.\n    */\n  function freeze()\n    public\n    onlyOwner\n  {\n    _isFrozen = true;\n  }\n\n  /**\n    * @dev Owner unfreezes the contract.\n    */\n  function unfreeze()\n    public\n    onlyOwner\n  {\n    _isFrozen = false;\n  }\n\n  /**\n    * @dev Updates the admin status of an account.\n    * Can only be called by the current owner.\n    */\n  function updateAdmin(address account, uint256 newAllowedAmount)\n    public\n    virtual\n    onlyOwner\n  {\n    emit AdminUpdated(account, newAllowedAmount);\n    _allowedAmount[account] = newAllowedAmount;\n  }\n\n  /**\n    * @dev Overrides the inherited method from Ownable.\n    * Disable ownership resounce.\n    */\n  function renounceOwnership()\n    public\n    override\n    onlyOwner\n  {\n    revert(\"TeleportAdmin: ownership cannot be renounced\");\n  }\n}\n\n// File: contracts/teleport/ethereum/TetherToken.sol\n\npragma solidity 0.6.12;\n\n/**\n * @dev Method signature contract for Tether (USDT) because it's not a standard\n * ERC-20 contract and have different method signatures.\n */\ninterface TetherToken {\n  function transfer(address _to, uint _value) external;\n  function transferFrom(address _from, address _to, uint _value) external;\n}\n\n// File: contracts/teleport/ethereum/TeleportCustody.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n// import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @dev Implementation of the TeleportCustody contract.\n *\n * There are two priviledged roles for the contract: \"owner\" and \"admin\".\n *\n * Owner: Has the ultimate control of the contract and the funds stored inside the\n *        contract. Including:\n *     1) \"freeze\" and \"unfreeze\" the contract: when the TeleportCustody is frozen,\n *        all deposits and withdrawals with the TeleportCustody is disabled. This \n *        should only happen when a major security risk is spotted or if admin access\n *        is comprimised.\n *     2) assign \"admins\": owner has the authority to grant \"unlock\" permission to\n *        \"admins\" and set proper \"unlock limit\" for each \"admin\".\n *\n * Admin: Has the authority to \"unlock\" specific amount to tokens to receivers.\n */\ncontract TeleportCustody is TeleportAdmin {\n  // USDC\n  // ERC20 internal _tokenContract = ERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n  \n  // USDT\n  TetherToken internal _tokenContract = TetherToken(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n\n  // Records that an unlock transaction has been executed\n  mapping(bytes32 => bool) internal _unlocked;\n  \n  // Emmitted when user locks token and initiates teleport\n  event Locked(uint256 amount, bytes8 indexed flowAddress, address indexed ethereumAddress);\n\n  // Emmitted when teleport completes and token gets unlocked\n  event Unlocked(uint256 amount, address indexed ethereumAddress, bytes32 indexed flowHash);\n\n  /**\n    * @dev User locks token and initiates teleport request.\n    */\n  function lock(uint256 amount, bytes8 flowAddress)\n    public\n    notFrozen\n  {\n    address sender = _msgSender();\n\n    // NOTE: Return value should be checked. However, Tether does not have return value.\n    _tokenContract.transferFrom(sender, address(this), amount);\n\n    emit Locked(amount, flowAddress, sender);\n  }\n\n  // Admin methods\n\n  /**\n    * @dev TeleportAdmin unlocks token upon receiving teleport request from Flow.\n    */\n  function unlock(uint256 amount, address ethereumAddress, bytes32 flowHash)\n    public\n    notFrozen\n    consumeAuthorization(amount)\n  {\n    _unlock(amount, ethereumAddress, flowHash);\n  }\n\n  // Owner methods\n\n  /**\n    * @dev Owner unlocks token upon receiving teleport request from Flow.\n    * There is no unlock limit for owner.\n    */\n  function unlockByOwner(uint256 amount, address ethereumAddress, bytes32 flowHash)\n    public\n    notFrozen\n    onlyOwner\n  {\n    _unlock(amount, ethereumAddress, flowHash);\n  }\n\n  // Internal methods\n\n  /**\n    * @dev Internal function for processing unlock requests.\n    * \n    * There is no way TeleportCustody can check the validity of the target address\n    * beforehand so user and admin should always make sure the provided information\n    * is correct.\n    */\n  function _unlock(uint256 amount, address ethereumAddress, bytes32 flowHash)\n    internal\n  {\n    require(ethereumAddress != address(0), \"TeleportCustody: ethereumAddress is the zero address\");\n    require(!_unlocked[flowHash], \"TeleportCustody: same unlock hash has been executed\");\n\n    _unlocked[flowHash] = true;\n\n    // NOTE: Return value should be checked. However, Tether does not have return value.\n    _tokenContract.transfer(ethereumAddress, amount);\n\n    emit Unlocked(amount, ethereumAddress, flowHash);\n  }\n}\n"}}}