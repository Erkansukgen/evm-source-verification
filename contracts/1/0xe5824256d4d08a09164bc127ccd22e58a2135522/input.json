{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"wPGO_Presale.sol":{"content":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount) external;\r\n}\r\n\r\ncontract wPGO_Presale {\r\n    address public beneficiary;\r\n    uint public softCap;\r\n    uint public hardCap;\r\n    uint public amountRaised;\r\n    uint public deadline;\r\n    uint public price;\r\n    token public tokenReward;\r\n    mapping(address => uint256) public balanceOf;\r\n    bool fundingGoalReached = false;\r\n    bool presaleClosed = false;\r\n    uint WPGO = 100000000;\r\n    uint tokenBalance = 2000000 * WPGO;\r\n\r\n    event GoalReached(address recipient, uint totalAmountRaised);\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * Setup the owner\r\n     */\r\n    constructor(\r\n        address ifSuccessfulSendTo,\r\n        uint softCapInFinney,\r\n        uint hardCapInFinney,\r\n        uint durationInMinutes,\r\n        uint etherCostOfEachToken,\r\n        address addressOfTokenUsedAsReward\r\n    ) public {\r\n        beneficiary = ifSuccessfulSendTo;\r\n        softCap = softCapInFinney * 1 ether;\r\n        hardCap = hardCapInFinney * 1 ether;\r\n        deadline = now + durationInMinutes * 1 minutes;\r\n        price = etherCostOfEachToken * 1 szabo;\r\n        tokenReward = token(addressOfTokenUsedAsReward);\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function () payable external {\r\n        require(!presaleClosed);\r\n        uint amount = msg.value;\r\n        balanceOf[msg.sender] += amount;\r\n        amountRaised += amount;\r\n        uint tokenAmount;\r\n        tokenAmount = amount / price * WPGO;\r\n        tokenReward.transfer(msg.sender, tokenAmount);\r\n        tokenBalance -= tokenAmount;\r\n        emit FundTransfer(msg.sender, amount, true);\r\n    }\r\n\r\n    modifier afterDeadline() { if (now >= deadline) _; }\r\n\r\n    /**\r\n     * Check if goal was reached\r\n     *\r\n     * Checks if the goal or time limit has been reached and ends the campaign\r\n     */\r\n    function checkGoalReached() public afterDeadline {\r\n        if (amountRaised >= softCap){\r\n            fundingGoalReached = true;\r\n            emit GoalReached(beneficiary, amountRaised);\r\n        }\r\n        presaleClosed = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Withdraw the funds\r\n     *\r\n     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\r\n     * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw\r\n     * the amount they contributed.\r\n     */\r\n    function safeWithdrawalEther() public afterDeadline {\r\n        if (!fundingGoalReached && presaleClosed) {\r\n            uint amount = balanceOf[msg.sender];\r\n            balanceOf[msg.sender] = 0;\r\n            if (amount > 0) {\r\n                if (msg.sender.send(amount)) {\r\n                   emit FundTransfer(msg.sender, amount, false);\r\n                } else {\r\n                    balanceOf[msg.sender] = amount;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (fundingGoalReached && beneficiary == msg.sender && presaleClosed) {\r\n            if (msg.sender.send(amountRaised)) {\r\n               emit FundTransfer(beneficiary, amountRaised, false);\r\n            } else {\r\n                //If we fail to send the funds to beneficiary, unlock funders balance\r\n                fundingGoalReached = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Withdraw the wPGO\r\n     *\r\n     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\r\n     * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw\r\n     * the amount they contributed.\r\n     */\r\n    function safeWithdrawalWPGO() public afterDeadline {\r\n        if (beneficiary == msg.sender && presaleClosed) {\r\n            tokenReward.transfer(msg.sender, tokenBalance);\r\n            tokenBalance = 0;\r\n        }\r\n    }\r\n}"}}}