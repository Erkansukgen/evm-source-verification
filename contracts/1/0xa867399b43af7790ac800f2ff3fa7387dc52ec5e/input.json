{
  "language": "Solidity",
  "settings": {
    "libraries": {
      "DssSpell.sol": {
        "DssExecLib": "0xfd88cee74f7d78697775abdae53f9da1559728e4"
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "DssSpell.sol": {
      "content": "// hevm: flattened sources of src/DssSpell.sol\n// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity =0.6.12 >=0.6.12 <0.7.0;\n// pragma experimental ABIEncoderV2;\n\n////// lib/dss-exec-lib/src/CollateralOpts.sol\n/* pragma solidity ^0.6.12; */\n\nstruct CollateralOpts {\n    bytes32 ilk;\n    address gem;\n    address join;\n    address clip;\n    address calc;\n    address pip;\n    bool    isLiquidatable;\n    bool    isOSM;\n    bool    whitelistOSM;\n    uint256 ilkDebtCeiling;\n    uint256 minVaultAmount;\n    uint256 maxLiquidationAmount;\n    uint256 liquidationPenalty;\n    uint256 ilkStabilityFee;\n    uint256 startingPriceFactor;\n    uint256 breakerTolerance;\n    uint256 auctionDuration;\n    uint256 permittedDrop;\n    uint256 liquidationRatio;\n    uint256 kprFlatReward;\n    uint256 kprPctReward;\n}\n\n////// lib/dss-exec-lib/src/DssExecLib.sol\n//\n// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n/* pragma solidity ^0.6.12; */\n/* // pragma experimental ABIEncoderV2; */\n\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\n\ninterface Initializable {\n    function init(bytes32) external;\n}\n\ninterface Authorizable {\n    function rely(address) external;\n    function deny(address) external;\n}\n\ninterface Fileable {\n    function file(bytes32, address) external;\n    function file(bytes32, uint256) external;\n    function file(bytes32, bytes32, uint256) external;\n    function file(bytes32, bytes32, address) external;\n}\n\ninterface Drippable {\n    function drip() external returns (uint256);\n    function drip(bytes32) external returns (uint256);\n}\n\ninterface Pricing {\n    function poke(bytes32) external;\n}\n\ninterface ERC20 {\n    function decimals() external returns (uint8);\n}\n\ninterface DssVat {\n    function hope(address) external;\n    function nope(address) external;\n    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\n    function Line() external view returns (uint256);\n    function suck(address, address, uint) external;\n}\n\ninterface ClipLike {\n    function vat() external returns (address);\n    function dog() external returns (address);\n    function spotter() external view returns (address);\n    function calc() external view returns (address);\n    function ilk() external returns (bytes32);\n}\n\ninterface DogLike {\n    function ilks(bytes32) external returns (address clip, uint256 chop, uint256 hole, uint256 dirt);\n}\n\ninterface JoinLike {\n    function vat() external returns (address);\n    function ilk() external returns (bytes32);\n    function gem() external returns (address);\n    function dec() external returns (uint256);\n    function join(address, uint) external;\n    function exit(address, uint) external;\n}\n\n// Includes Median and OSM functions\ninterface OracleLike_2 {\n    function src() external view returns (address);\n    function lift(address[] calldata) external;\n    function drop(address[] calldata) external;\n    function setBar(uint256) external;\n    function kiss(address) external;\n    function diss(address) external;\n    function kiss(address[] calldata) external;\n    function diss(address[] calldata) external;\n    function orb0() external view returns (address);\n    function orb1() external view returns (address);\n}\n\ninterface MomLike {\n    function setOsm(bytes32, address) external;\n    function setPriceTolerance(address, uint256) external;\n}\n\ninterface RegistryLike {\n    function add(address) external;\n    function xlip(bytes32) external view returns (address);\n}\n\n// https://github.com/makerdao/dss-chain-log\ninterface ChainlogLike {\n    function setVersion(string calldata) external;\n    function setIPFS(string calldata) external;\n    function setSha256sum(string calldata) external;\n    function getAddress(bytes32) external view returns (address);\n    function setAddress(bytes32, address) external;\n    function removeAddress(bytes32) external;\n}\n\ninterface IAMLike {\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\n    function setIlk(bytes32,uint256,uint256,uint256) external;\n    function remIlk(bytes32) external;\n    function exec(bytes32) external returns (uint256);\n}\n\ninterface LerpFactoryLike {\n    function newLerp(bytes32 name_, address target_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\n    function newIlkLerp(bytes32 name_, address target_, bytes32 ilk_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\n}\n\ninterface LerpLike {\n    function tick() external returns (uint256);\n}\n\n\nlibrary DssExecLib {\n\n    /* WARNING\n\nThe following library code acts as an interface to the actual DssExecLib\nlibrary, which can be found in its own deployed contract. Only trust the actual\nlibrary's implementation.\n\n    */\n\n    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\n    uint256 constant internal WAD      = 10 ** 18;\n    uint256 constant internal RAY      = 10 ** 27;\n    uint256 constant internal RAD      = 10 ** 45;\n    uint256 constant internal THOUSAND = 10 ** 3;\n    uint256 constant internal MILLION  = 10 ** 6;\n    uint256 constant internal BPS_ONE_PCT             = 100;\n    uint256 constant internal BPS_ONE_HUNDRED_PCT     = 100 * BPS_ONE_PCT;\n    uint256 constant internal RATES_ONE_HUNDRED_PCT   = 1000000021979553151239153027;\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function cat()        public view returns (address) { return getChangelogAddress(\"MCD_CAT\"); }\n    function dog()        public view returns (address) { return getChangelogAddress(\"MCD_DOG\"); }\n    function end()        public view returns (address) { return getChangelogAddress(\"MCD_END\"); }\n    function reg()        public view returns (address) { return getChangelogAddress(\"ILK_REGISTRY\"); }\n    function autoLine()   public view returns (address) { return getChangelogAddress(\"MCD_IAM_AUTO_LINE\"); }\n    function lerpFab()    public view returns (address) { return getChangelogAddress(\"LERP_FAB\"); }\n    function clip(bytes32 _ilk) public view returns (address _clip) {}\n    function flip(bytes32 _ilk) public view returns (address _flip) {}\n    function calc(bytes32 _ilk) public view returns (address _calc) {}\n    function getChangelogAddress(bytes32 _key) public view returns (address) {}\n    function canCast(uint40 _ts, bool _officeHours) public pure returns (bool) {}\n    function nextCastTime(uint40 _eta, uint40 _ts, bool _officeHours) public pure returns (uint256 castTime) {}\n    function setValue(address _base, bytes32 _what, uint256 _amt) public {}\n    function setValue(address _base, bytes32 _ilk, bytes32 _what, uint256 _amt) public {}\n    function setIlkAutoLineParameters(bytes32 _ilk, uint256 _amount, uint256 _gap, uint256 _ttl) public {}\n    function setIlkMaxLiquidationAmount(bytes32 _ilk, uint256 _amount) public {}\n    function setStartingPriceMultiplicativeFactor(bytes32 _ilk, uint256 _pct_bps) public {}\n    function linearInterpolation(bytes32 _name, address _target, bytes32 _ilk, bytes32 _what, uint256 _startTime, uint256 _start, uint256 _end, uint256 _duration) public returns (address) {}\n}\n\n////// lib/dss-exec-lib/src/DssAction.sol\n//\n// DssAction.sol -- DSS Executive Spell Actions\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.6.12; */\n\n/* import { DssExecLib } from \"./DssExecLib.sol\"; */\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\n\ninterface OracleLike_1 {\n    function src() external view returns (address);\n}\n\nabstract contract DssAction {\n\n    using DssExecLib for *;\n\n    // Modifier used to limit execution time when office hours is enabled\n    modifier limited {\n        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), \"Outside office hours\");\n        _;\n    }\n\n    // Office Hours defaults to true by default.\n    //   To disable office hours, override this function and\n    //    return false in the inherited action.\n    function officeHours() public virtual returns (bool) {\n        return true;\n    }\n\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\n    function execute() external limited {\n        actions();\n    }\n\n    // DssAction developer must override `actions()` and place all actions to be called inside.\n    //   The DssExec function will call this subject to the officeHours limiter\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\n    function actions() public virtual;\n\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\n    function description() external virtual view returns (string memory);\n\n    // Returns the next available cast time\n    function nextCastTime(uint256 eta) external returns (uint256 castTime) {\n        require(eta <= uint40(-1));\n        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\n    }\n}\n\n////// lib/dss-exec-lib/src/DssExec.sol\n//\n// DssExec.sol -- MakerDAO Executive Spell Template\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.6.12; */\n\ninterface PauseAbstract {\n    function delay() external view returns (uint256);\n    function plot(address, bytes32, bytes calldata, uint256) external;\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n}\n\ninterface Changelog {\n    function getAddress(bytes32) external view returns (address);\n}\n\ninterface SpellAction {\n    function officeHours() external view returns (bool);\n    function description() external view returns (string memory);\n    function nextCastTime(uint256) external view returns (uint256);\n}\n\ncontract DssExec {\n\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\n    uint256                 public eta;\n    bytes                   public sig;\n    bool                    public done;\n    bytes32       immutable public tag;\n    address       immutable public action;\n    uint256       immutable public expiration;\n    PauseAbstract immutable public pause;\n\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\n    function description() external view returns (string memory) {\n        return SpellAction(action).description();\n    }\n\n    function officeHours() external view returns (bool) {\n        return SpellAction(action).officeHours();\n    }\n\n    function nextCastTime() external view returns (uint256 castTime) {\n        return SpellAction(action).nextCastTime(eta);\n    }\n\n    // @param _description  A string description of the spell\n    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\n    // @param _spellAction  The address of the spell action\n    constructor(uint256 _expiration, address _spellAction) public {\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\n        expiration  = _expiration;\n        action      = _spellAction;\n\n        sig = abi.encodeWithSignature(\"execute()\");\n        bytes32 _tag;                    // Required for assembly access\n        address _action = _spellAction;  // Required for assembly access\n        assembly { _tag := extcodehash(_action) }\n        tag = _tag;\n    }\n\n    function schedule() public {\n        require(now <= expiration, \"This contract has expired\");\n        require(eta == 0, \"This spell has already been scheduled\");\n        eta = now + PauseAbstract(pause).delay();\n        pause.plot(action, tag, sig, eta);\n    }\n\n    function cast() public {\n        require(!done, \"spell-already-cast\");\n        done = true;\n        pause.exec(action, tag, sig, eta);\n    }\n}\n\n////// src/DssSpell.sol\n//\n// Copyright (C) 2021 Dai Foundation\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.6.12; */\n\n/* import \"dss-exec-lib/DssExec.sol\"; */\n/* import \"dss-exec-lib/DssAction.sol\"; */\n\ninterface TokenLike {\n    function approve(address, uint256) external returns (bool);\n}\n\ninterface DssVestLike {\n    function yank(uint256) external;\n    function restrict(uint256) external;\n    function create(\n        address _usr,\n        uint256 _tot,\n        uint256 _bgn,\n        uint256 _tau,\n        uint256 _eta,\n        address _mgr\n  ) external returns (uint256);\n}\n\ncontract DssSpellAction is DssAction {\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/3224f50b0b5a9301831213ed858bc1d206de8e40/governance/votes/Executive%20vote%20-%20December%2010%2C%202021.md -q -O - 2>/dev/null)\"\n    string public constant override description =\n        \"2021-12-10 MakerDAO Executive Spell | Hash: 0x9cc240b4c1027d3dc1abb24ecc598703352d8135c8a1670a6591e9a334836e5d\";\n\n    // --- Math ---\n    uint256 constant MILLION = 10**6;\n\n    // --- Ilks ---\n    bytes32 constant WSTETH_A = \"WSTETH-A\";\n    bytes32 constant MATIC_A  = \"MATIC-A\";\n\n    // --- Wallet addresses ---\n    address constant GRO_WALLET = 0x7800C137A645c07132886539217ce192b9F0528e;\n    address constant ORA_WALLET = 0x2d09B7b95f3F312ba6dDfB77bA6971786c5b50Cf;\n    address constant PE_WALLET  = 0xe2c16c308b843eD02B09156388Cb240cEd58C01c;\n\n    // --- Dates ---\n    uint256 constant MAY_01_2021 = 1619827200;\n    uint256 constant JUN_21_2021 = 1624233600;\n    uint256 constant JUL_01_2021 = 1625097600;\n    uint256 constant SEP_13_2021 = 1631491200;\n    uint256 constant SEP_20_2021 = 1632096000;\n\n    function officeHours() public override returns (bool) {\n        return false;\n    }\n\n    function actions() public override {\n\n        // ------------- Transfer vesting streams from MCD_VEST_MKR to MCD_VEST_MKR_TREASURY -------------\n        // https://vote.makerdao.com/polling/QmYdDTsn\n\n        address MCD_VEST_MKR          = DssExecLib.getChangelogAddress(\"MCD_VEST_MKR\");\n        address MCD_VEST_MKR_TREASURY = DssExecLib.getChangelogAddress(\"MCD_VEST_MKR_TREASURY\");\n\n        TokenLike(DssExecLib.getChangelogAddress(\"MCD_GOV\")).approve(MCD_VEST_MKR_TREASURY, 16_484.43 * 10**18);\n\n        // Growth MKR whole team vesting\n        DssVestLike(MCD_VEST_MKR).yank(1);\n        DssVestLike(MCD_VEST_MKR_TREASURY).restrict(\n            DssVestLike(MCD_VEST_MKR_TREASURY).create({\n                _usr: GRO_WALLET,\n                _tot: 803.18 * 10**18,\n                _bgn: JUL_01_2021,\n                _tau: 365 days,\n                _eta: 365 days,\n                _mgr: address(0)\n            })\n        );\n\n        // Oracles MKR whole team vesting\n        DssVestLike(MCD_VEST_MKR).yank(2);\n        DssVestLike(MCD_VEST_MKR_TREASURY).restrict(\n            DssVestLike(MCD_VEST_MKR_TREASURY).create({\n                _usr: ORA_WALLET,\n                _tot: 1_051.25 * 10**18,\n                _bgn: JUL_01_2021,\n                _tau: 365 days,\n                _eta: 365 days,\n                _mgr: address(0)\n            })\n        );\n\n        // PE MKR vestings (per individual)\n        DssVestLike(MCD_VEST_MKR).yank(3);\n        (\n            DssVestLike(MCD_VEST_MKR_TREASURY).create({\n                _usr: 0xfDB9F5e045D7326C1da87d0e199a05CDE5378EdD,\n                _tot: 995.00 * 10**18,\n                _bgn: MAY_01_2021,\n                _tau: 4 * 365 days,\n                _eta: 365 days,\n                _mgr: PE_WALLET\n            })\n        );\n\n        DssVestLike(MCD_VEST_MKR).yank(4);\n        DssVestLike(MCD_VEST_MKR_TREASURY).restrict(\n            DssVestLike(MCD_VEST_MKR_TREASURY).create({\n                _usr: 0xBe4De3E151D52668c2C0610C985b4297833239C8,\n                _tot: 995.00 * 10**18,\n                _bgn: MAY_01_2021,\n                _tau: 4 * 365 days,\n                _eta: 365 days,\n                _mgr: PE_WALLET\n            })\n        );\n\n        DssVestLike(MCD_VEST_MKR).yank(5);\n        DssVestLike(MCD_VEST_MKR_TREASURY).restrict(\n            DssVestLike(MCD_VEST_MKR_TREASURY).create({\n                _usr: 0x58EA3C96a8b81abC01EB78B98deCe2AD1e5fd7fc,\n                _tot: 995.00 * 10**18,\n                _bgn: MAY_01_2021,\n                _tau: 4 * 365 days,\n                _eta: 365 days,\n                _mgr: PE_WALLET\n            })\n        );\n\n        DssVestLike(MCD_VEST_MKR).yank(6);\n        DssVestLike(MCD_VEST_MKR_TREASURY).restrict(\n            DssVestLike(MCD_VEST_MKR_TREASURY).create({\n                _usr: 0xBAB4Cd1cB31Cd28f842335973712a6015eB0EcD5,\n                _tot: 995.00 * 10**18,\n                _bgn: MAY_01_2021,\n                _tau: 4 * 365 days,\n                _eta: 365 days,\n                _mgr: PE_WALLET\n            })\n        );\n\n        DssVestLike(MCD_VEST_MKR).yank(7);\n        (\n            DssVestLike(MCD_VEST_MKR_TREASURY).create({\n                _usr: 0xB5c86aff90944CFB3184902482799bD5fA3B18dD,\n                _tot: 995.00 * 10**18,\n                _bgn: MAY_01_2021,\n                _tau: 4 * 365 days,\n                _eta: 365 days,\n                _mgr: PE_WALLET\n            })\n        );\n\n        DssVestLike(MCD_VEST_MKR).yank(8);\n        DssVestLike(MCD_VEST_MKR_TREASURY).restrict(\n            DssVestLike(MCD_VEST_MKR_TREASURY).create({\n                _usr: 0x780f478856ebE01e46d9A432e8776bAAB5A81b5b,\n                _tot: 995.00 * 10**18,\n                _bgn: MAY_01_2021,\n                _tau: 4 * 365 days,\n                _eta: 365 days,\n                _mgr: PE_WALLET\n            })\n        );\n\n        DssVestLike(MCD_VEST_MKR).yank(9);\n        DssVestLike(MCD_VEST_MKR_TREASURY).restrict(\n            DssVestLike(MCD_VEST_MKR_TREASURY).create({\n                _usr: 0x34364E234b3DD02FF5c8A2ad9ba86bbD3D3D3284,\n                _tot: 995.00 * 10**18,\n                _bgn: MAY_01_2021,\n                _tau: 4 * 365 days,\n                _eta: 365 days,\n                _mgr: PE_WALLET\n            })\n        );\n\n        DssVestLike(MCD_VEST_MKR).yank(10);\n        DssVestLike(MCD_VEST_MKR_TREASURY).restrict(\n            DssVestLike(MCD_VEST_MKR_TREASURY).create({\n                _usr: 0x46E5DBad3966453Af57e90Ec2f3548a0e98ec979,\n                _tot: 995.00 * 10**18,\n                _bgn: MAY_01_2021,\n                _tau: 4 * 365 days,\n                _eta: 365 days,\n                _mgr: PE_WALLET\n            })\n        );\n\n        DssVestLike(MCD_VEST_MKR).yank(11);\n        DssVestLike(MCD_VEST_MKR_TREASURY).restrict(\n            DssVestLike(MCD_VEST_MKR_TREASURY).create({\n                _usr: 0x18CaE82909C31b60Fe0A9656D76406345C9cb9FB,\n                _tot: 995.00 * 10**18,\n                _bgn: MAY_01_2021,\n                _tau: 4 * 365 days,\n                _eta: 365 days,\n                _mgr: PE_WALLET\n            })\n        );\n\n        DssVestLike(MCD_VEST_MKR).yank(12);\n        (\n            DssVestLike(MCD_VEST_MKR_TREASURY).create({\n                _usr: 0x301dD8eB831ddb93F128C33b9d9DC333210d9B25,\n                _tot: 995.00 * 10**18,\n                _bgn: MAY_01_2021,\n                _tau: 4 * 365 days,\n                _eta: 365 days,\n                _mgr: PE_WALLET\n            })\n        );\n\n        DssVestLike(MCD_VEST_MKR).yank(13);\n        (\n            DssVestLike(MCD_VEST_MKR_TREASURY).create({\n                _usr: 0xBFC47D0D7452a25b7d3AA4d7379c69A891bD5d43,\n                _tot: 995.00 * 10**18,\n                _bgn: MAY_01_2021,\n                _tau: 4 * 365 days,\n                _eta: 365 days,\n                _mgr: PE_WALLET\n            })\n        );\n\n        DssVestLike(MCD_VEST_MKR).yank(14);\n        (\n            DssVestLike(MCD_VEST_MKR_TREASURY).create({\n                _usr: 0xcD16aa978A89Aa26b3121Fc8dd32228d7D0fcF4a,\n                _tot: 995.00 * 10**18,\n                _bgn: SEP_13_2021,\n                _tau: 4 * 365 days,\n                _eta: 365 days,\n                _mgr: PE_WALLET\n            })\n        );\n\n        DssVestLike(MCD_VEST_MKR).yank(15);\n        DssVestLike(MCD_VEST_MKR_TREASURY).restrict(\n            DssVestLike(MCD_VEST_MKR_TREASURY).create({\n                _usr: 0x3189cfe40CF011AAb13aDD8aE7284deD4CD30602,\n                _tot: 995.00 * 10**18,\n                _bgn: JUN_21_2021,\n                _tau: 4 * 365 days,\n                _eta: 365 days,\n                _mgr: PE_WALLET\n            })\n        );\n\n        DssVestLike(MCD_VEST_MKR).yank(16);\n        DssVestLike(MCD_VEST_MKR_TREASURY).restrict(\n            DssVestLike(MCD_VEST_MKR_TREASURY).create({\n                _usr: 0x29b37159C09a65af6a7CFb062998B169879442B6,\n                _tot: 995.00 * 10**18,\n                _bgn: SEP_20_2021,\n                _tau: 4 * 365 days,\n                _eta: 365 days,\n                _mgr: PE_WALLET\n            })\n        );\n\n\n        // -------------------- wstETH-A Parameter Changes ------------------------\n        // https://vote.makerdao.com/polling/QmYuK441\n\n        DssExecLib.setIlkAutoLineParameters({\n            _ilk:    WSTETH_A,\n            _amount: 200 * MILLION,\n            _gap:    20 * MILLION,\n            _ttl:    6 hours\n        });\n        DssExecLib.setStartingPriceMultiplicativeFactor(WSTETH_A, 120_00);\n        DssExecLib.setIlkMaxLiquidationAmount(WSTETH_A, 15 * MILLION);\n\n\n        // ------------------- MATIC-A Parameter Changes --------------------------\n        // https://vote.makerdao.com/polling/QmdzwZyS\n\n        DssExecLib.setIlkAutoLineParameters({\n            _ilk:    MATIC_A,\n            _amount: 35 * MILLION,\n            _gap:    10 * MILLION,\n            _ttl:    8 hours\n        });\n    }\n}\n\ncontract DssSpell is DssExec {\n    constructor() DssExec(block.timestamp + 30 days, address(new DssSpellAction())) public {}\n}\n\n"
    }
  }
}