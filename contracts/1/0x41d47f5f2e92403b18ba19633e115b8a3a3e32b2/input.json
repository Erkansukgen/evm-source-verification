{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"NftPlatform/IRoyalty.sol":{"content":"\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IRoyalty {\r\n\r\n    function getRoyaltyByTokenId(uint256 tokenId) external view returns(uint256);\r\n\r\n}"},"NftPlatform/IUNFTDexchange.sol":{"content":"\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUNFTDexchange {\r\n\r\n    function getUserAmountForOrder(address user, address tokenAddress, uint256 tokenId) external view returns(uint256);\r\n\r\n}"},"NftPlatform/UNFTART1155.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"openzeppelin-solidity/contracts/access/Ownable.sol\";\r\nimport \"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\";\r\nimport \"openzeppelin-solidity/contracts/utils/Strings.sol\";\r\nimport \"openzeppelin-solidity/contracts/token/ERC1155/ERC1155.sol\";\r\nimport \"./IUNFTDexchange.sol\";\r\nimport \"./IRoyalty.sol\";\r\n\r\n/**\r\n * @title SmpNFT1155\r\n * SmpNFT1155 - ERC1155 contract that whitelists an operator address, has create and mint functionality, and supports useful standards from OpenZeppelin,\r\n  like _exists(), name(), symbol(), and totalSupply()\r\n */\r\ncontract UNFTART1155 is ERC1155, IRoyalty, Ownable {\r\n    using Strings for string;\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    uint256 private _currentTokenId = 1;\r\n    mapping (address => bool) private _defaultApprovals;\r\n    mapping (uint256 => uint256) private _tokenSupply;\r\n    mapping (uint256 => string) private _tokenUri;\r\n    mapping (uint256 => address) private _creator;\r\n    mapping (uint256 => uint256) private _royalty;\r\n    // Contract name\r\n    string private _name;\r\n    // Contract symbol\r\n    string private _symbol;\r\n    IUNFTDexchange private _dexchangeAddress;\r\n\r\n    event DefaultApproval(address indexed operator, bool hasApproval);\r\n    event Royalty(uint256 indexed royalty, uint256 indexed tokenId);\r\n    event URI(uint256 indexed tokenId, string uri);\r\n\r\n    /**\r\n    * @dev Require _msgSender() to be the creator of the token id\r\n    */\r\n    modifier creatorOnly(uint256 tokenId) {\r\n        require(_creator[tokenId] == _msgSender(), \"SmpNFT1155#creatorOnly: ONLY_CREATOR_ALLOWED\");\r\n        _;\r\n    }\r\n\r\n    constructor(string memory name_, string memory symbol_, string memory uri_) ERC1155(uri_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function getURI(uint256 tokenId) public view returns(string memory) {\r\n        require(exists(tokenId), \"SmpNFT1155#uri: NONEXISTENT_TOKEN\");\r\n        // We have to convert string to bytes to check for existence\r\n        bytes memory tokenUriBytes = bytes(_tokenUri[tokenId]);\r\n        if (tokenUriBytes.length > 0) {\r\n            return _tokenUri[tokenId];\r\n        } \r\n        else {\r\n            return super.uri(tokenId);\r\n        }\r\n    }\r\n\r\n    function name() public view returns(string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns(string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function getDexchangeAddress() public view returns(IUNFTDexchange) {\r\n        return _dexchangeAddress;\r\n    }\r\n\r\n    function setDexchangeAddress(IUNFTDexchange newDexchange) public onlyOwner {\r\n        _dexchangeAddress = newDexchange;\r\n    }\r\n\r\n    function getCreatorByTokenId(uint256 tokenId) public view returns(address) {\r\n        return _creator[tokenId];\r\n    }\r\n    \r\n    function getRoyaltyByTokenId(uint256 tokenId) public view override returns(uint256) {\r\n        return _royalty[tokenId];\r\n    }\r\n\r\n    function  getCurrentTokenId() public view returns(uint256) {\r\n        return _currentTokenId;\r\n    }\r\n    \r\n    function _incrementTokenId() internal {\r\n        _currentTokenId++;\r\n    }\r\n\r\n    /**\r\n      * @dev Returns the total quantity for a token ID\r\n      * @param tokenId uint256 ID of the token to query\r\n      * @return amount of token in existence\r\n      */\r\n    function totalSupply(uint256 tokenId) public view returns(uint256){\r\n        return _tokenSupply[tokenId];\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a new URI for all token types, by relying on the token type ID\r\n      * substitution mechanism\r\n      * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n    * @param newURI New URI for all tokens\r\n    */\r\n    function setURI(string memory newURI) public onlyOwner {\r\n        _setURI(newURI);\r\n    }\r\n\r\n    /**\r\n    * @dev Will update the base URI for the token\r\n    * @param tokenId The token to update. _msgSender() must be its creator.\r\n    * @param newURI New URI for the token.\r\n    */\r\n    function setTokenUri(uint256 tokenId, string memory newURI) public creatorOnly(tokenId) {\r\n        _tokenUri[tokenId] = newURI;\r\n        emit URI(newURI, tokenId);\r\n    }\r\n\r\n    /**\r\n      * @dev Creates a new token type and assigns _initialSupply to an address\r\n      * NOTE: The token id must be passed. This allows lazy creation of tokens or\r\n      *       creating NFTs by setting the id's high bits with the method\r\n      *       described in ERC1155 or to use ids representing values other than\r\n      *       successive small integers. If you wish to create ids as successive\r\n      *       small integers you can either subclass this class to count onchain\r\n      *       or maintain the offchain cache of identifiers recommended in\r\n      *       ERC1155 and calculate successive ids from that.\r\n      * @param initialSupply amount to supply the first owner\r\n      * @param royalty royalty percent for this token\r\n      * @param data Data to pass if receiver is contract\r\n      * @return The newly created token ID\r\n      */\r\n    function mint(uint256 initialSupply, uint256 royalty, string memory uri, bytes memory data) public returns (uint256) {\r\n      \r\n    \treturn mintTo(_msgSender(), initialSupply, royalty, uri, data);\r\n    }\r\n\r\n    function mintTo(address to, uint256 initialSupply, uint256 royalty, string memory uri, bytes memory data) public returns (uint256){\r\n        require(!(to.isContract()), \"can not mint to contract!\");\r\n        require(royalty <= 30, \"royaltyPercent cannot be above 50%\");\r\n\r\n        uint256 tokenId = getCurrentTokenId();\r\n        require(!exists(tokenId), \"token tokenId already exists\");\r\n        _creator[tokenId] = to;\r\n        _royalty[tokenId] = royalty;\r\n        emit Royalty(royalty, tokenId);\r\n\r\n        if (bytes(uri).length > 0) {\r\n          _tokenUri[tokenId] = uri;\r\n          emit URI(uri, tokenId);\r\n        }\r\n\r\n        _mint(to, tokenId, initialSupply, data);\r\n\r\n        _tokenSupply[tokenId] = initialSupply;\r\n        _incrementTokenId();\r\n        return tokenId;  \r\n    }\r\n\r\n    /**\r\n    * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\r\n    */\r\n\r\n    function _setDefaultApproval(address operator, bool hasApproval) internal {\r\n        _defaultApprovals[operator] = hasApproval;\r\n        emit DefaultApproval(operator, hasApproval);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public virtual override view returns(bool) {\r\n        return _defaultApprovals[operator] || super.isApprovedForAll(owner, operator);\r\n    }\r\n\r\n    /**\r\n      * @dev Returns whether the specified token exists by checking to see if it has a creator\r\n      * @param tokenId uint256 ID of the token to query the existence of\r\n      * @return bool whether the token exists\r\n      */\r\n    function exists(uint256 tokenId) public view returns(bool) {\r\n        return _creator[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n      * @dev See {ERC1155-_beforeTokenTransfer}.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - the contract must not be paused.\r\n      */\r\n    function _beforeTokenTransfer(address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual override {\r\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n        if((address(_dexchangeAddress) != address(0)) && (from != address(0)) && (address(_dexchangeAddress) != _msgSender())){\r\n            uint256 orderAmount = _dexchangeAddress.getUserAmountForOrder(from, address(this), ids[0]);\r\n            uint256 balance = balanceOf(from, ids[0]);\r\n            require(amounts[0] <= balance.sub(orderAmount), \"SmpNFT1155: this token is on sale!\");\r\n        }\r\n    }\r\n\r\n    \r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155) returns (bool) {\r\n        return\r\n            interfaceId == type(IRoyalty).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n"},"NftPlatform/UNFTART721.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"openzeppelin-solidity/contracts/access/Ownable.sol\";\r\nimport \"openzeppelin-solidity/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\";\r\nimport \"openzeppelin-solidity/contracts/utils/Strings.sol\";\r\nimport \"./IUNFTDexchange.sol\";\r\nimport \"./IRoyalty.sol\";\r\n\r\ncontract UNFTART721 is ERC721URIStorage, IRoyalty, Ownable{\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    uint256 private _currentTokenId = 1;\r\n    mapping(uint256 => uint256) private _royalty;\r\n    mapping(uint256 => address) private _creator;\r\n    IUNFTDexchange private _dexchangeAddress;\r\n    mapping (address => bool) private _defaultApprovals;\r\n\r\n    event DefaultApproval(address indexed operator, bool hasApproval);\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) ERC721(_name, _symbol) {\r\n\r\n    }\r\n\r\n    function getDexchangeAddress() public view returns(IUNFTDexchange) {\r\n        return _dexchangeAddress;\r\n    }\r\n\r\n    function setDexchangeAddress(IUNFTDexchange newDexchange) public onlyOwner {\r\n        _dexchangeAddress = newDexchange;\r\n    }\r\n\r\n    function getCreatorByTokenId(uint256 tokenId) public view returns(address) {\r\n        return _creator[tokenId];\r\n    }\r\n    \r\n    function getRoyaltyByTokenId(uint256 tokenId) public view override returns(uint256) {\r\n        return _royalty[tokenId];\r\n    }\r\n\r\n    function  getCurrentTokenId() public view returns(uint256) {\r\n        return _currentTokenId;\r\n    }\r\n    \r\n    function _incrementTokenId() internal {\r\n        _currentTokenId++;\r\n    }\r\n    function mint(string memory tokenURI, uint256 royalty) public{\r\n        mintTo(tokenURI, royalty, _msgSender());\r\n    }\r\n    \r\n    function mintTo(string memory tokenURI, uint256 royalty, address to) public{\r\n        require(royalty <= 30 ,\"royalty must be lower than 30\");\r\n        require(!(to.isContract()), \"can not mint to contract!\");\r\n        uint256 tokenId = _currentTokenId;\r\n        require(!exists(tokenId), \"token tokenId already exists\");\r\n        _royalty[tokenId] = royalty;\r\n        _creator[tokenId] = to;\r\n        super._safeMint(to, tokenId);\r\n        super._setTokenURI(tokenId, tokenURI);\r\n        _incrementTokenId();\r\n    }\r\n\r\n    function batchMint721(string memory tokenURI, uint256 royalty, uint256 number) public{\r\n        batchMint721To(tokenURI, royalty, number, _msgSender());\r\n    }\r\n    \r\n    function batchMint721To(string memory tokenURI, uint256 royalty, uint256 number, address to) public{\r\n        require(number <= 100,\"number must be lower than 100\");\r\n        /*\r\n        address to shouldn't be a contract\r\n        */\r\n        for(uint256 i=0; i < number; i++){\r\n            mintTo(tokenURI, royalty, to);\r\n        }\r\n    }\r\n\r\n    function burn(uint256 tokenId) public{\r\n        require(ownerOf(tokenId) == _msgSender(), \"no right to burn this token\");\r\n        // _beforeTokenTransfer(msg.sender, address(0), tokenId);\r\n        delete _royalty[tokenId];\r\n        delete _creator[tokenId];\r\n        super._burn(tokenId);\r\n    }\r\n\r\n    function exists(uint256 tokenId) public view returns(bool) {\r\n        return _creator[tokenId] != address(0);\r\n    }\r\n\r\n    function _setDefaultApproval(address operator, bool hasApproval) internal {\r\n        _defaultApprovals[operator] = hasApproval;\r\n        emit DefaultApproval(operator, hasApproval);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public virtual override view returns(bool) {\r\n        return _defaultApprovals[operator] || super.isApprovedForAll(owner, operator);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n        if((address(_dexchangeAddress) != address(0)) && (from != address(0)) && (address(_dexchangeAddress) != _msgSender())){\r\n            uint256 orderAmount = _dexchangeAddress.getUserAmountForOrder(from, address(this), tokenId);\r\n            require(orderAmount == 0, \"SmpNFT721: this token is on sale!\");\r\n        }\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721) returns (bool) {\r\n        return\r\n            interfaceId == type(IRoyalty).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n"},"NftPlatform/UNFTDexchange.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"openzeppelin-solidity/contracts/access/Ownable.sol\";\r\nimport \"openzeppelin-solidity/contracts/security/ReentrancyGuard.sol\";\r\nimport \"openzeppelin-solidity/contracts/utils/Context.sol\";\r\nimport \"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\";\r\nimport \"openzeppelin-solidity/contracts/utils/Strings.sol\";\r\nimport \"openzeppelin-solidity/contracts/utils/Address.sol\";\r\nimport \"openzeppelin-solidity/contracts/proxy/Proxy.sol\";\r\nimport \"./UNFTART721.sol\";\r\nimport \"./UNFTART1155.sol\";\r\n\r\n\r\nabstract contract DexchangeCore is Context, Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using Address for address payable;\r\n\r\n    bytes4 constant internal ERC1155_INTERFACE_ID = 0xd9b67a26;\r\n    bytes4 constant internal ERC721_INTERFACE_ID = 0x80ac58cd;\r\n    bytes4 constant internal IROYALTY_INTERFACE_ID = 0xa10668d7;\r\n\r\n    address private _ERC721Address;\r\n    address private _ERC1155Address;\r\n\r\n    address payable private _feeReciver;\r\n    uint256 private _sellServiceFee; //sell service fee rate *100\r\n    uint256 private _buyServiceFee;//buy service fee rate *100\r\n    uint256 private _orderId = 1;\r\n\r\n    // dex name\r\n    string private constant _name = \"UNFT_DEX\";\r\n\r\n    // dex symbol\r\n    string private constant _symbol = \"UNFT_DEX\";\r\n\r\n    mapping(uint256 => Order) public _orderBook;\r\n\r\n    //the amount of token for sold by user: userAddress => nftAddress => tokenID => amount\r\n    mapping(address => mapping(address => mapping(uint256 => uint256))) public _userAmountForOrder;\r\n\r\n    //event ListOrderEvent(address indexed seller, address indexed nftToken, uint256 indexed tokenId, uint256 tokenType, uint256 tokenAmout, uint256 sellOrderId, uint256 sellPrice);\r\n    event ListOrderEvent(address indexed seller, address indexed nftToken, uint256 indexed tokenId,uint256 tokenAmount, uint256 sellOrderId, uint256 sellPrice);\r\n    event PayForOrderEvent(uint256 indexed sellOrderId, uint256 tokenId, uint256 amout, uint256 serviceFee, uint256 royalty, uint256 value, address buyer);\r\n    //event PayForOrderEvent(uint256 indexed sellOrderId, uint256 amout, uint256 serviceFee, uint256 royalty, uint256 value, address buyer);\r\n    //event PayForOrderEvent(address indexed buyer, address indexed nftToken, uint256 indexed tokenId, uint256 tokenAmount, uint256 buyOrderId, uint256 payamount);\r\n    event CancelOrderEvent(uint256 sellOrderId, uint256 amout);\r\n    event UpdateOrderEvent(uint256 indexed sellOrderId, uint256 sellPrice);\r\n    \r\n    constructor(address erc721Address, address erc1155Address, uint256 sellServiceFee, uint256 buyServiceFee) {\r\n        _ERC721Address = erc721Address;\r\n        _ERC1155Address = erc1155Address;\r\n        _sellServiceFee = sellServiceFee;\r\n        _buyServiceFee = buyServiceFee;\r\n    }\r\n\r\n    enum Status{\r\n        create,\r\n        done,\r\n        canceled\r\n    }\r\n\r\n    struct Order{\r\n        address payable seller;\r\n        address nftToken;//nft address\r\n        uint256 tokenId;//nft id\r\n        uint256 tokenAmount;\r\n        uint256 platfromFee;\r\n        uint256 sellOrderId;\r\n        uint256 sellPrice;\r\n        Status status;\r\n    }\r\n\r\n    function IsExsit(uint256 sellOrderId) public view returns(bool){\r\n        return _orderBook[sellOrderId].seller != address(0);\r\n    }\r\n\r\n    function getServiceFeeReceiver() public view returns(address payable){\r\n        return _feeReciver;\r\n    }\r\n\r\n    function getSellServiceFee() public view returns(uint256){\r\n        return _sellServiceFee;\r\n    }\r\n\r\n    function getBuyServiceFee() public view returns(uint256){\r\n        return _buyServiceFee;\r\n    }\r\n\r\n    function _incrementOrderId() internal {\r\n        _orderId++;\r\n        if(1000 <= _orderId){\r\n            _orderId = 1;\r\n        }\r\n    }\r\n\r\n    function setCurrentOrderId(uint256 newOrderId) public onlyOwner{\r\n        _orderId = newOrderId;\r\n    }\r\n\r\n    function getCurrentOrderId() public view returns(uint256){\r\n        return block.timestamp.mul(10000).add(_orderId);\r\n    }\r\n\r\n    function getUserAmountForOrder(address user, address tokenAddress, uint256 tokenId) external view returns(uint256){\r\n        return _userAmountForOrder[user][tokenAddress][tokenId];\r\n    }\r\n\r\n    function getOrderInfo(uint256 orderId) external view returns(Order memory){\r\n        return _orderBook[orderId];\r\n    }\r\n\r\n    function setSellServiceFee(uint256 newServiceFee) public onlyOwner{\r\n        require(newServiceFee <= 30, \"FeeToRate cannot be above 30%\");\r\n        _sellServiceFee = newServiceFee;\r\n    }\r\n\r\n    function setBuyServiceFee(uint256 newServiceFee) public onlyOwner{\r\n        require(newServiceFee <= 30, \"FeeToRate cannot be above 30%\");\r\n        _buyServiceFee = newServiceFee;\r\n    } \r\n\r\n    function setfeeToAddress(address payable newFeeReciver) public onlyOwner{\r\n        _feeReciver = newFeeReciver;\r\n    }\r\n\r\n    function getERC721Address() public view returns(address){\r\n        return _ERC721Address;\r\n    }\r\n    \r\n    function getERC1155Address() public view returns(address){\r\n        return _ERC1155Address;\r\n    }\r\n    \r\n    function setERC721Address(address newERC721Address) public onlyOwner{\r\n        _ERC721Address = newERC721Address;\r\n    }\r\n \r\n    function setERC1155Address(address newERC1155Address) public onlyOwner{\r\n        _ERC1155Address = newERC1155Address;\r\n    } \r\n\r\n    function name() public pure returns(string memory){\r\n        return _name;\r\n    }\r\n    \r\n    function  symbol() public pure returns(string memory){\r\n        return _symbol;\r\n    }\r\n}\r\n\r\nabstract contract ERC721DexchangeCore is DexchangeCore {\r\n    using SafeMath for uint256;\r\n    using Address for address payable;\r\n\r\n    constructor() {}\r\n    function listOrder721(address nftToken, uint256 tokenId, uint256 tokenAmount, uint256 sellPrice) public{\r\n\r\n        uint256 orderAmount = _userAmountForOrder[_msgSender()][nftToken][tokenId];\r\n\r\n        require(ERC721(nftToken).getApproved(tokenId) == address(this) || \r\n                ERC721(nftToken).isApprovedForAll(_msgSender(), address(this)), \r\n                \"caller is not owner nor approved\");\r\n\r\n        require(ERC721(nftToken).ownerOf(tokenId) == _msgSender(), \"the operator is not the owner of this token!\");\r\n        require(orderAmount == 0, \"this tokenid is in order book\");\r\n\r\n        uint256 orderId = getCurrentOrderId();\r\n        require(!IsExsit(orderId), \"this is is exsit!\");\r\n        _orderBook[orderId] = Order(\r\n            payable(_msgSender()),\r\n            nftToken,\r\n            tokenId,\r\n            tokenAmount,\r\n            getSellServiceFee(),\r\n            orderId,\r\n            sellPrice,\r\n            Status.create\r\n        );\r\n\r\n        _userAmountForOrder[_msgSender()][nftToken][tokenId] = 1;\r\n\r\n        _incrementOrderId();\r\n        emit ListOrderEvent(_msgSender(), nftToken, tokenId, tokenAmount, orderId, sellPrice);\r\n    }\r\n\r\n    function cancelOrder721(uint256 sellOrderId) public{\r\n        require(IsExsit(sellOrderId), \"this order is not exsit!\");\r\n        Order storage orderInfo = _orderBook[sellOrderId];\r\n\r\n        require(orderInfo.seller == _msgSender(), \"Only owner have right to cancel order!\");\r\n        require(orderInfo.status == Status.create, \"this order is not on sale!\");\r\n\r\n        orderInfo.status = Status.canceled;\r\n\r\n        _userAmountForOrder[orderInfo.seller][orderInfo.nftToken][orderInfo.tokenId] = 0;\r\n\r\n        emit CancelOrderEvent(sellOrderId, 1);\r\n    }\r\n\r\n    function updateOrder721(uint256 sellOrderId, uint256 sellPrice) public{}\r\n\r\n    function payForOrder721(uint256 sellOrderId) public payable nonReentrant{\r\n        require(IsExsit(sellOrderId), \"this order is not exsit!\");\r\n        Order storage orderInfo = _orderBook[sellOrderId];\r\n        require(orderInfo.status == Status.create, \"this order is not on sale!\");\r\n\r\n        UNFTART721 nftToken = UNFTART721(orderInfo.nftToken);\r\n\r\n        uint256 royaltyAmount = 0;\r\n        if (nftToken.supportsInterface(IROYALTY_INTERFACE_ID)){\r\n            royaltyAmount = (orderInfo.sellPrice).mul(nftToken.getRoyaltyByTokenId(orderInfo.tokenId)).div(100);\r\n        }\r\n        uint256 sellServiceFee = (orderInfo.sellPrice).mul(orderInfo.platfromFee).div(100);\r\n        uint256 buyServiceFee = (orderInfo.sellPrice).mul(getBuyServiceFee()).div(100);\r\n        uint256 ToSellerAmount = (orderInfo.sellPrice).sub(sellServiceFee).sub(royaltyAmount);\r\n        uint256 payAmount = (orderInfo.sellPrice).add(buyServiceFee);\r\n\r\n        require(payAmount <= msg.value, \"the amount is not enough!\" );\r\n\r\n        require(address(this).balance >= payAmount, \"check balance!\");\r\n\r\n        //transfer to seller\r\n        orderInfo.seller.sendValue(ToSellerAmount);\r\n        // Address.sendValue(orderInfo.seller, ToSellerAmount);\r\n\r\n        if ((sellServiceFee != 0) || (buyServiceFee != 0)){\r\n            //transfer to ServiceFee Receiver\r\n            payable(getServiceFeeReceiver()).sendValue(buyServiceFee.add(sellServiceFee));\r\n            // Address.sendValue(payable(getServiceFeeReceiver()), buyServiceFee.add(sellServiceFee));\r\n        }\r\n        if (royaltyAmount != 0){\r\n            //transfer to creator\r\n            payable(nftToken.getCreatorByTokenId(orderInfo.tokenId)).sendValue(royaltyAmount);\r\n            // Address.sendValue(payable(nftToken.getCreatorByTokenId(orderInfo.tokenId)), royaltyAmount);\r\n        }\r\n\r\n        orderInfo.status = Status.done;\r\n        _userAmountForOrder[orderInfo.seller][orderInfo.nftToken][orderInfo.tokenId] = 0;\r\n\r\n        nftToken.safeTransferFrom(orderInfo.seller, _msgSender(), orderInfo.tokenId);\r\n\r\n\r\n        emit PayForOrderEvent(sellOrderId, orderInfo.tokenId, 1, buyServiceFee.add(sellServiceFee), royaltyAmount, msg.value, _msgSender());\r\n        \r\n    }\r\n}\r\n\r\nabstract contract ERC1155DexchangeCore is DexchangeCore {\r\n    using SafeMath for uint256;\r\n    using Address for address payable;\r\n\r\n    constructor() {}\r\n    function listOrder1155(address nftToken, uint256 tokenId, uint256 tokenAmount, uint256 sellPrice) public{ \r\n\r\n        uint256 orderAmount = _userAmountForOrder[_msgSender()][nftToken][tokenId];\r\n\r\n        require(ERC1155(nftToken).isApprovedForAll(_msgSender(), address(this)), \"caller is not owner nor approved\");\r\n        require(ERC1155(nftToken).balanceOf(_msgSender(), tokenId) >= tokenAmount.add(orderAmount), \"the balance is not enough!\");\r\n\r\n        uint256 orderId = getCurrentOrderId();\r\n        require(!IsExsit(orderId), \"this is is exsit!\");\r\n        _orderBook[orderId] = Order(\r\n            payable(_msgSender()),\r\n            nftToken,\r\n            tokenId,\r\n            tokenAmount,\r\n            getSellServiceFee(),\r\n            orderId,\r\n            sellPrice,\r\n            Status.create\r\n        );\r\n\r\n        _userAmountForOrder[_msgSender()][nftToken][tokenId] = orderAmount.add(tokenAmount);\r\n\r\n        _incrementOrderId();\r\n        emit ListOrderEvent(_msgSender(), nftToken, tokenId, tokenAmount, orderId, sellPrice);\r\n    }\r\n\r\n    function cancelOrder1155(uint256 sellOrderId) public{\r\n        require(IsExsit(sellOrderId), \"this order is not exsit!\");\r\n        Order storage orderInfo = _orderBook[sellOrderId];\r\n\r\n        require(orderInfo.seller == _msgSender(), \"Only owner have right to cancel order!\");\r\n        require(orderInfo.status == Status.create, \"this order is not on sale!\");\r\n\r\n        orderInfo.status = Status.canceled;\r\n\r\n        uint256 orderAmount = _userAmountForOrder[orderInfo.seller][orderInfo.nftToken][orderInfo.tokenId];\r\n        _userAmountForOrder[orderInfo.seller][orderInfo.nftToken][orderInfo.tokenId] = orderAmount.sub(orderInfo.tokenAmount);\r\n\r\n        emit CancelOrderEvent(sellOrderId, orderAmount);\r\n    }\r\n\r\n    function updateOrder1155(uint256 sellOrderId, uint256 sellPrice) public{}\r\n\r\n    function payForOrder1155(uint256 sellOrderId, uint256 buyTokenAmount) public payable nonReentrant{\r\n        require(IsExsit(sellOrderId), \"this order is not exsit!\");\r\n        Order storage orderInfo = _orderBook[sellOrderId];\r\n        require(orderInfo.status == Status.create, \"this order is not on sale!\");\r\n        require(orderInfo.tokenAmount >= buyTokenAmount && buyTokenAmount > 0, \"the amount is not enough for sell!\");\r\n\r\n        UNFTART1155 nftToken = UNFTART1155(orderInfo.nftToken);\r\n\r\n        uint256 royaltyAmount = 0;\r\n        if (nftToken.supportsInterface(IROYALTY_INTERFACE_ID)){\r\n            royaltyAmount = (orderInfo.sellPrice).mul(buyTokenAmount).mul(nftToken.getRoyaltyByTokenId(orderInfo.tokenId)).div(100);\r\n        }\r\n        uint256 sellServiceFee = (orderInfo.sellPrice).mul(buyTokenAmount).mul(orderInfo.platfromFee).div(100);\r\n        uint256 buyServiceFee = (orderInfo.sellPrice).mul(buyTokenAmount).mul(getBuyServiceFee()).div(100);\r\n        uint256 ToSellerAmount = (orderInfo.sellPrice).mul(buyTokenAmount).sub(sellServiceFee).sub(royaltyAmount);\r\n        uint256 payAmount = (orderInfo.sellPrice).mul(buyTokenAmount).add(buyServiceFee);\r\n\r\n        require(payAmount <= msg.value, \"the amount is not enough!\");\r\n\r\n        require(address(this).balance >= payAmount, \"check balance!\");\r\n\r\n        //transfer to seller\r\n        orderInfo.seller.sendValue(ToSellerAmount);\r\n        // Address.sendValue(orderInfo.seller, ToSellerAmount);\r\n\r\n        if ((sellServiceFee != 0) || (buyServiceFee != 0)){\r\n            //transfer to ServiceFee Receiver\r\n            payable(getServiceFeeReceiver()).sendValue(buyServiceFee.add(sellServiceFee));\r\n            // Address.sendValue(payable(getServiceFeeReceiver()), buyServiceFee.add(sellServiceFee));\r\n        }\r\n        if (royaltyAmount != 0){\r\n            //transfer to creator\r\n            payable(nftToken.getCreatorByTokenId(orderInfo.tokenId)).sendValue(royaltyAmount);\r\n            // Address.sendValue(payable(nftToken.getCreatorByTokenId(orderInfo.tokenId)), royaltyAmount);\r\n        }\r\n        \r\n        orderInfo.tokenAmount = orderInfo.tokenAmount.sub(buyTokenAmount);\r\n        if(orderInfo.tokenAmount == 0){\r\n            orderInfo.status = Status.done;\r\n        }\r\n\r\n        uint256 orderAmount = _userAmountForOrder[orderInfo.seller][orderInfo.nftToken][orderInfo.tokenId];\r\n        _userAmountForOrder[orderInfo.seller][orderInfo.nftToken][orderInfo.tokenId] = orderAmount.sub(buyTokenAmount);\r\n\r\n        require(nftToken.balanceOf(orderInfo.seller, orderInfo.tokenId) >= buyTokenAmount, \"the balance is not enough!\");\r\n        nftToken.safeTransferFrom(orderInfo.seller, _msgSender(), orderInfo.tokenId, buyTokenAmount, \"\");\r\n\r\n        emit PayForOrderEvent(sellOrderId, orderInfo.tokenId, buyTokenAmount, buyServiceFee.add(sellServiceFee), royaltyAmount, msg.value, _msgSender());\r\n    }\r\n}\r\n\r\ncontract UNFTDexchange is ERC721DexchangeCore, ERC1155DexchangeCore, Proxy {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    address private implementation;\r\n    \r\n    event MintEvent(string tokenURI, address indexed creator, address indexed nftToken, uint256 ercType, uint256 tokenAmout, uint256 royalty);\r\n    \r\n    constructor(address erc721Address, address erc1155Address, uint256 sellServiceFee, uint256 buyServiceFee)\r\n                                            DexchangeCore(erc721Address, erc1155Address, sellServiceFee, buyServiceFee)\r\n                                            ERC721DexchangeCore()\r\n                                            ERC1155DexchangeCore(){\r\n    }\r\n\r\n    function listOrder(address nftToken, uint256 tokenId, uint256 tokenAmount, uint256 sellPrice) public{\r\n        require(sellPrice > 0, \"Price must be non-zero.\");\r\n        require(!(_msgSender().isContract()), \"can not be a contract!\");\r\n        \r\n        if (ERC1155(nftToken).supportsInterface(ERC1155_INTERFACE_ID)){\r\n            listOrder1155(nftToken, tokenId, tokenAmount, sellPrice);\r\n        }\r\n        if (ERC721(nftToken).supportsInterface(ERC721_INTERFACE_ID)){\r\n            require(1 == tokenAmount, \"ERC721 NFT must be no more than 1 piece\");\r\n            listOrder721(nftToken, tokenId, tokenAmount, sellPrice);\r\n        }\r\n    }\r\n\r\n    function cancelOrder(uint256 sellOrderId) public{\r\n        require(IsExsit(sellOrderId), \"this order is not exsit!\");\r\n        Order storage orderInfo = _orderBook[sellOrderId];\r\n        \r\n        if (ERC1155(orderInfo.nftToken).supportsInterface(ERC1155_INTERFACE_ID)){\r\n            cancelOrder1155(sellOrderId);\r\n        }\r\n        if (ERC721(orderInfo.nftToken).supportsInterface(ERC721_INTERFACE_ID)){\r\n            cancelOrder721(sellOrderId);\r\n        }\r\n    }\r\n\r\n    function updateOrder(uint256 sellOrderId, uint256 newSellPrice) public{\r\n        require(IsExsit(sellOrderId), \"this order is not exsit!\");\r\n        Order storage orderInfo = _orderBook[sellOrderId];\r\n        \r\n        require(orderInfo.seller == _msgSender(), \"Only owner have right to cancel order!\");\r\n        require(orderInfo.status == Status.create, \"this order is not on sale!\");\r\n\r\n        orderInfo.sellPrice = newSellPrice;\r\n\r\n        emit UpdateOrderEvent(sellOrderId, newSellPrice);\r\n    }\r\n\r\n    function payForOrder(uint256 sellOrderId, uint256 buyTokenAmount) public payable{\r\n        require(IsExsit(sellOrderId), \"this order is not exsit!\");\r\n        Order storage orderInfo = _orderBook[sellOrderId];\r\n        \r\n        if (ERC1155(orderInfo.nftToken).supportsInterface(ERC1155_INTERFACE_ID)){\r\n\r\n            payForOrder1155(sellOrderId, buyTokenAmount);\r\n        }\r\n        if (ERC721(orderInfo.nftToken).supportsInterface(ERC721_INTERFACE_ID)){\r\n            require(1 == buyTokenAmount, \"ERC721 NFT must be no more than 1 piece\");\r\n            payForOrder721(sellOrderId);\r\n        }\r\n\r\n    }\r\n    \r\n    function getBalance() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n\r\n    function withDraw(address payable addr, uint256 value) public onlyOwner{\r\n        uint256 bal = getBalance();\r\n        require(value > bal, \"the balance is not enough to transfer!\");\r\n        addr.transfer(value);\r\n    }\r\n\r\n    function getNftTypeFromNftAddress(address nftAddress) external view returns(string memory){\r\n        string memory ret;\r\n        if (ERC1155(nftAddress).supportsInterface(ERC1155_INTERFACE_ID)){\r\n            ret = \"NFT1155\";\r\n        }\r\n        if (ERC721(nftAddress).supportsInterface(ERC721_INTERFACE_ID)){\r\n            ret = \"NFT721\";\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function mint(uint256 ercType, string memory tokenURI, uint256 tokenAmout, uint256 royalty)public {\r\n        /*\r\n        1. support erc721 and erc1155 only, 10 for erc721, 20 for erc1155\r\n        2. royalty must lower than 30\r\n        3. msg.sender is not a contract\r\n        */\r\n        require(10 == ercType || 20 == ercType,\"support erc721 and erc1155 only!\");\r\n        require(royalty <= 30, \"royalty must be lower than 30!\");   \r\n        \r\n        if(10 == ercType){\r\n        /*\r\n        erc721 mint call\r\n        1. tokenAmout shoule <= 100;\r\n        2. mint 1\r\n        3. mint some\r\n        */\r\n            require(tokenAmout > 0 && tokenAmout <= 100, \"too many.\");\r\n            UNFTART721 nft = UNFTART721(getERC721Address());\r\n            if(1 == tokenAmout){\r\n                nft.mintTo(tokenURI, royalty, _msgSender());   \r\n            }\r\n            else{\r\n                nft.batchMint721To(tokenURI, royalty, tokenAmout, _msgSender());\r\n            }\r\n            \r\n        }\r\n        else{\r\n            /*\r\n            erc1155 mint call\r\n            1. tokenAmout shoule <= 100;\r\n            2. mint 1\r\n            3. mint some\r\n            */    \r\n            require(tokenAmout >= 0, \"tokenAmout error.\");\r\n            UNFTART1155 nft = UNFTART1155(getERC1155Address());\r\n            nft.mintTo(_msgSender(), tokenAmout, royalty, tokenURI, \"\");\r\n        }\r\n        \r\n        if(10 == ercType)\r\n        {\r\n            emit MintEvent(tokenURI, _msgSender(), getERC721Address(), ercType, tokenAmout, royalty);\r\n        }\r\n        else\r\n        {\r\n            emit MintEvent(tokenURI, _msgSender(), getERC1155Address(), ercType, tokenAmout, royalty);\r\n        }\r\n    }\r\n\r\n    function _implementation() internal view override returns (address) {\r\n        return implementation;\r\n    }\r\n\r\n    function setImplementation(address newImplementation) public onlyOwner {\r\n        implementation = newImplementation;\r\n    }\r\n}\r\n"},"openzeppelin-solidity/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"openzeppelin-solidity/contracts/proxy/Proxy.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"},"openzeppelin-solidity/contracts/security/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"openzeppelin-solidity/contracts/token/ERC1155/ERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][account] += amount;\n        emit TransferSingle(operator, address(0), account, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `account`\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 accountBalance = _balances[id][account];\n        require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][account] = accountBalance - amount;\n        }\n\n        emit TransferSingle(operator, account, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 accountBalance = _balances[id][account];\n            require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][account] = accountBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, account, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"},"openzeppelin-solidity/contracts/token/ERC1155/IERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"},"openzeppelin-solidity/contracts/token/ERC1155/IERC1155Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"openzeppelin-solidity/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"},"openzeppelin-solidity/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"},"openzeppelin-solidity/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"},"openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"openzeppelin-solidity/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"},"openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"openzeppelin-solidity/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"openzeppelin-solidity/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"openzeppelin-solidity/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"},"openzeppelin-solidity/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"openzeppelin-solidity/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"openzeppelin-solidity/contracts/utils/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"}}}