{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"own contracts/MetaverseCapital_staking.sol":{"content":"\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: own contracts/ERC20/Staking.sol\n\n//SPDX-License-Identifier: UNLICENSED\n\n\n\n\npragma solidity ^0.8.10;\n\ncontract MVCStaking is Ownable {\n  using SafeMath for uint256;\n  using SafeMath for uint16;\n\n  /**\n   *\n   * @dev User reflects the info of each user\n   *\n   *\n   * @param {total_invested} how many tokens the user staked\n   * @param {total_withdrawn} how many tokens withdrawn so far\n   * @param {lastPayout} time at which last claim was done\n   * @param {depositTime} Time of last deposit\n   * @param {totalClaimed} Total claimed by the user\n   *\n   */\n  struct User {\n    uint256 total_invested;\n    uint256 total_withdrawn;\n    uint256 lastPayout;\n    uint256 depositTime;\n    uint256 totalClaimed;\n  }\n\n  /**\n   *\n   * @dev PoolInfo reflects the info of each pools\n   *\n   * To improve precision, we provide APY with an additional zero. So if APY is 12%, we provide\n   * 120 as input.lockPeriodInDays would be the number of days which the unstake is locked. So if we want to\n   * lock unstake for 1 month, lockPeriodInDays would be 30.\n   *\n   * @param {apy} Percentage of yield produced by the pool\n   * @param {lockPeriodInDays} Amount of time unstake will be locked\n   * @param {totalDeposit} Total deposit in the pool\n   * @param {startDate} starting time of pool\n   * @param {endDate} ending time of pool in unix timestamp\n   *\n   */\n\n  struct Pool {\n    uint16 apy;\n    uint16 lockPeriodInDays;\n    uint256 totalDeposit;\n    uint256 startDate;\n    uint256 endDate;\n  }\n\n  IERC20 private token = IERC20(0x5aC525D33fFDA012eA2Fe246a0Ee698F861304D7); //MVC Token address\n  address private feeAddress; //Address which receives fee\n  uint8 private feePercent; //Percentage of fee deducted (/1000)\n\n  mapping(uint256 => mapping(address => User)) public users;\n\n  Pool[] public poolInfo;\n\n  event Stake(address indexed addr, uint256 amount);\n  event Claim(address indexed addr, uint256 amount);\n\n  constructor() {\n    feeAddress = msg.sender;\n    feePercent = 0;\n\n    poolInfo.push(\n      Pool({\n        apy: 330,\n        lockPeriodInDays: 30,\n        totalDeposit: 0,\n        startDate: block.timestamp,\n        endDate: block.timestamp + 365 days //1 year\n      })\n    );\n\n    poolInfo.push(\n      Pool({\n        apy: 660,\n        lockPeriodInDays: 90,\n        totalDeposit: 0,\n        startDate: block.timestamp,\n        endDate: block.timestamp + 365 days //1 year\n      })\n    );\n  }\n\n  receive() external payable {\n    revert(\"BNB deposit not supported\");\n  }\n\n  /**\n   *\n   * @dev get length of the pools\n   *\n   * @return {uint256} length of the pools\n   *\n   */\n  function poolLength() public view returns (uint256) {\n    return poolInfo.length;\n  }\n\n  /**\n   *\n   * @dev get info of all pools\n   *\n   * @return {PoolInfo[]} Pool info struct\n   *\n   */\n  function getPools() public view returns (Pool[] memory) {\n    return poolInfo;\n  }\n\n  /**\n   *\n   * @dev add new pool, only available for owner\n   *\n   */\n  function add(\n    uint16 _apy,\n    uint16 _lockPeriodInDays,\n    uint256 _endDate\n  ) public onlyOwner {\n    poolInfo.push(\n      Pool({\n        apy: _apy,\n        lockPeriodInDays: _lockPeriodInDays,\n        totalDeposit: 0,\n        startDate: block.timestamp,\n        endDate: _endDate\n      })\n    );\n  }\n\n  /**\n   *\n   * @dev update the given pool's Info\n   *\n   */\n  function set(\n    uint256 _pid,\n    uint16 _apy,\n    uint16 _lockPeriodInDays,\n    uint256 _endDate\n  ) public onlyOwner {\n    require(_pid < poolLength(),\"Invalid pool Id\");\n    \n    poolInfo[_pid].apy = _apy;\n    poolInfo[_pid].lockPeriodInDays = _lockPeriodInDays;\n    poolInfo[_pid].endDate = _endDate;\n  }\n\n  /**\n   *\n   * @dev depsoit tokens to staking for token allocation\n   *\n   * @param {_pid} Id of the pool\n   * @param {_amount} Amount to be staked\n   *\n   * @return {bool} Status of stake\n   *\n   */\n  function stake(uint8 _pid, uint256 _amount) external returns (bool) {\n    require(\n      token.allowance(msg.sender, address(this)) >= _amount,\n      \"Set allowance first!\"\n    );\n\n    bool success = token.transferFrom(msg.sender, address(this), _amount);\n    require(success, \"Transfer failed\");\n\n    _stake(_pid, msg.sender, _amount);\n\n    return success;\n  }\n\n  function _stake(\n    uint8 _pid,\n    address _sender,\n    uint256 _amount\n  ) internal {\n    User storage user = users[_pid][_sender];\n    Pool storage pool = poolInfo[_pid];\n\n    uint256 stopDepo = pool.endDate.sub(pool.lockPeriodInDays.mul(1 days));\n\n    require(block.timestamp <= stopDepo, \"Staking is disabled for this pool\");\n\n    user.total_invested = user.total_invested.add(_amount);\n    pool.totalDeposit = pool.totalDeposit.add(_amount);\n    user.lastPayout = block.timestamp;\n    user.depositTime = block.timestamp;\n\n    emit Stake(_sender, _amount);\n  }\n\n  /**\n   *\n   * @dev claim accumulated token reward for a single pool\n   *\n   * @param {_pid} pool identifier\n   *\n   * @return {bool} status of claim\n   */\n\n  function claim(uint8 _pid) public returns (bool) {\n\n    _claim(_pid, msg.sender);\n\n    return true;\n  }\n\n  /**\n   *\n   * @dev claim accumulated token reward from all pools\n   *\n   * Beware of gas fee!\n   *\n   */\n  function claimAll() public returns (bool) {\n    uint256 length = poolInfo.length;\n\n    for (uint8 pid = 0; pid < length; ++pid) {\n        _claim(pid, msg.sender);\n    }\n\n    return true;\n  }\n\n  /**\n   *\n   * @dev check whether user can Unstake or not\n   *\n   * @param {_pid}  id of the pool\n   * @param {_addr} address of the user\n   *\n   * @return {bool} Status of unstake\n   *\n   */\n\n  function canUnstake(uint8 _pid, address _addr) public view returns (bool) {\n    User storage user = users[_pid][_addr];\n    Pool storage pool = poolInfo[_pid];\n\n    return (block.timestamp >=\n      user.depositTime.add(pool.lockPeriodInDays.mul(1 days)));\n  }\n\n  /**\n   *\n   * @dev withdraw tokens from Staking\n   *\n   * @param {_pid} id of the pool\n   * @param {_amount} amount to be unstaked\n   *\n   * @return {bool} Status of unstake\n   *\n   */\n  function unStake(uint8 _pid, uint256 _amount) external returns (bool) {\n    User storage user = users[_pid][msg.sender];\n    Pool storage pool = poolInfo[_pid];\n\n    require(user.total_invested >= _amount, \"You don't have enough funds\");\n\n    require(canUnstake(_pid, msg.sender), \"Stake still in locked state\");\n\n    _claim(_pid, msg.sender);\n\n    pool.totalDeposit = pool.totalDeposit.sub(_amount);\n    user.total_invested = user.total_invested.sub(_amount);\n    \n    safeTokenTransfer(msg.sender, _amount);\n\n    return true;\n  }\n\n  function _claim(uint8 _pid, address _addr) internal {\n    User storage user = users[_pid][_addr];\n\n    uint256 amount = payout(_pid, _addr);\n\n    if (amount > 0) {\n      user.total_withdrawn = user.total_withdrawn.add(amount);\n\n      uint256 feeAmount = amount.mul(feePercent).div(1000);\n\n      safeTokenTransfer(feeAddress, feeAmount);\n\n      amount = amount.sub(feeAmount);\n\n      safeTokenTransfer(_addr, amount);\n\n      user.lastPayout = block.timestamp;\n\n      user.totalClaimed = user.totalClaimed.add(amount);\n    }\n\n    emit Claim(_addr, amount);\n  }\n\n  function payout(uint8 _pid, address _addr)\n    public\n    view\n    returns (uint256 value)\n  {\n    User storage user = users[_pid][_addr];\n    Pool storage pool = poolInfo[_pid];\n\n    uint256 from = user.lastPayout > user.depositTime\n      ? user.lastPayout\n      : user.depositTime;\n    uint256 to = block.timestamp > pool.endDate\n      ? pool.endDate\n      : block.timestamp;\n\n    if (from < to) {\n      value = value.add(\n        user.total_invested.mul(to.sub(from)).mul(pool.apy).div(365 days * 1000)\n      );\n    }\n\n    return value;\n  }\n\n  /**\n   *\n   * @dev safe token transfer function, require to have enough token to transfer\n   *\n   */\n  function safeTokenTransfer(address _to, uint256 _amount) internal {\n    uint256 tokenBal = token.balanceOf(address(this));\n    if (_amount > tokenBal) {\n      token.transfer(_to, tokenBal);\n    } else {\n      token.transfer(_to, _amount);\n    }\n  }\n\n  /**\n   *\n   * @dev update fee values\n   *\n   */\n  function updateFeeValues(uint8 _feePercent, address _feeWallet)\n    public\n    onlyOwner\n  {\n    feePercent = _feePercent;\n    feeAddress = _feeWallet;\n  }\n}"}}}