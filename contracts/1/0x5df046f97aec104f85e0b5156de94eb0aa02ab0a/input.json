{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Address.sol": {
      "content": "pragma solidity 0.6.4;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}"
    },
    "browser/IERC20.sol": {
      "content": "pragma solidity 0.6.4;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"
    },
    "browser/SafeMath.sol": {
      "content": "pragma solidity 0.6.4;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"
    },
    "browser/Unibase.sol": {
      "content": "//UNIBASE.sol\r\n//\r\n//\r\n\r\npragma solidity 0.6.4;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n  function name() external pure returns (string memory);\r\n  function symbol() external pure returns (string memory);\r\n  function decimals() external pure returns (uint8);\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address owner) external view returns (uint);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n\r\n  function approve(address spender, uint value) external returns (bool);\r\n  function transfer(address to, uint value) external returns (bool);\r\n  function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n  function nonces(address owner) external view returns (uint);\r\n\r\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n  event Mint(address indexed sender, uint amount0, uint amount1);\r\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n  event Swap(\r\n      address indexed sender,\r\n      uint amount0In,\r\n      uint amount1In,\r\n      uint amount0Out,\r\n      uint amount1Out,\r\n      address indexed to\r\n  );\r\n  event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n  function factory() external view returns (address);\r\n  function token0() external view returns (address);\r\n  function token1() external view returns (address);\r\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n  function price0CumulativeLast() external view returns (uint);\r\n  function price1CumulativeLast() external view returns (uint);\r\n  function kLast() external view returns (uint);\r\n\r\n  function mint(address to) external returns (uint liquidity);\r\n  function burn(address to) external returns (uint amount0, uint amount1);\r\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n  function skim(address to) external;\r\n  function sync() external;\r\n}\r\n\r\n////////////////////////////////////////////////\r\n////////////////////EVENTS/////////////////////\r\n//////////////////////////////////////////////\r\n\r\ncontract TokenEvents {\r\n\r\n    //when a user stakes lp tokens\r\n    event LpStake(\r\n        address indexed user,\r\n        uint value\r\n    );\r\n\r\n    //when a user stakes lp tokens\r\n    event LpUnstake(\r\n        address indexed user,\r\n        uint value\r\n    );\r\n    \r\n    event Upbase(\r\n        uint32 upbaseFactor,\r\n        uint32 stakerMultiplier,\r\n        uint32 nextUpbaseFactor\r\n    );\r\n    \r\n    event Halvening(\r\n        uint halvening\r\n    );\r\n    \r\n}\r\n\r\n//////////////////////////////////////\r\n//////////UNIBASE TOKEN CONTRACT////////\r\n////////////////////////////////////\r\ncontract UNIBASE is IERC20, TokenEvents {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint64;\r\n    using SafeMath for uint32;\r\n    using SafeMath for uint16;\r\n    using SafeMath for uint8;\r\n\r\n    using SafeERC20 for UNIBASE;\r\n    \r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    //uniswap setup\r\n    address public uniETHUBASE = address(0);\r\n\r\n    IUniswapV2Pair internal uniETHUBASEInterface = IUniswapV2Pair(uniETHUBASE);\r\n\r\n    //apy setup\r\n    uint32 public ubaseApy = 1000;\r\n    uint32 public globalApy = 10000;\r\n    uint16 public halvening = 1;\r\n    \r\n    //lp stake setup\r\n    uint8 constant internal MINUTESECONDS = 60;\r\n    uint32 constant internal DAYSECONDS = 86400;\r\n    uint256 public totalUbaseLpStaked = 0;\r\n    \r\n    //\r\n    mapping (address => uint) public ubaseLpStakedBalances;//balance of ETHUBASE LP staked mapped by user\r\n\r\n    //tokenomics\r\n    uint256 public deploymentStart = 0;\r\n    uint256 public upbaseTimestamp = 0;\r\n    uint32 public upbasePeriod = MINUTESECONDS * 5;//test\r\n    uint32 public upbaseFactor = 10;\r\n    uint32 public minStakeTime = 7;\r\n    uint32 public stakerMultiplier;\r\n    uint256 internal _totalSupply;\r\n    string public constant name = \"test.uni.base\";\r\n    string public constant symbol = \"test.U.BASE\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    bool private sync;\r\n    \r\n    address private founder = address(0);\r\n    mapping(address => bool) admins;\r\n    \r\n    mapping (address => Staker) public staker;\r\n    \r\n    struct Staker{\r\n        uint256 ubaseStakeStartTimestamp;\r\n        uint256 ubaseStakeInitialTimestamp;\r\n        uint256 totalInterestUbase;\r\n        bool everStaked;\r\n    }\r\n    \r\n    modifier onlyAdmins(){\r\n        require(admins[msg.sender], \"not an admin\");\r\n        _;\r\n    }\r\n    \r\n    //protects against potential reentrancy\r\n    modifier synchronized {\r\n        require(!sync, \"Sync lock\");\r\n        sync = true;\r\n        _;\r\n        sync = false;\r\n    }\r\n\r\n    constructor(uint256 initialTokens) public {\r\n        admins[msg.sender] = true;\r\n        founder = msg.sender;\r\n        upbaseTimestamp = now;\r\n        deploymentStart = now;\r\n        //mint initial tokens\r\n        mintInitialTokens(initialTokens);\r\n    }\r\n\r\n\r\n    receive() external payable{\r\n        donate();\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n     \r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        uint256 amt = amount;\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply = _totalSupply.add(amt);\r\n        _balances[account] = _balances[account].add(amt);\r\n        emit Transfer(address(0), account, amt);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    //mint UBASE initial tokens (only ever called in constructor)\r\n    function mintInitialTokens(uint amount)\r\n        internal\r\n        synchronized\r\n    {\r\n        _mint(msg.sender, amount);//mint UBASE to contract creator on deployment\r\n    }\r\n    \r\n    function upbase()\r\n        internal\r\n    {\r\n        require(now.sub(upbaseTimestamp) >= upbasePeriod, \"upbase cannot yet be called\");\r\n        upbaseTimestamp = now;\r\n        uint256 upbaseAmount = _balances[uniETHUBASE].div(upbaseFactor);\r\n        _balances[uniETHUBASE] = _balances[uniETHUBASE].sub(upbaseAmount);\r\n        _totalSupply = _totalSupply.sub(upbaseAmount);\r\n        stakerMultiplier++;\r\n        emit Upbase(upbaseFactor, stakerMultiplier, (upbaseFactor + 1));\r\n        upbaseFactor++;\r\n        if(upbaseFactor % 10 == 0){\r\n            newHalvening();\r\n            emit Halvening(halvening);\r\n        }\r\n    }\r\n    \r\n    function newHalvening()\r\n        internal\r\n    {   \r\n        halvening = halvening * 2;\r\n    }\r\n    \r\n    ////////////////////////////////////////////////////////\r\n    /////////////////PUBLIC FACING - UBASE CONTROL//////////\r\n    //////////////////////////////////////////////////////\r\n    \r\n    function CallUpbase()\r\n        public\r\n        synchronized\r\n    {\r\n        upbase();\r\n    }\r\n    \r\n    //stake LP tokens to contract, approval needed\r\n    function StakeEthUbaseLp(uint amt)\r\n        public\r\n    {\r\n        require(amt > 0, \"zero input\");\r\n        require(lpBalance() >= amt, \"Error: insufficient balance\");//ensure user has enough funds\r\n        if(isClaimable(msg.sender)){\r\n            uint256 interest = calcStakingRewards(msg.sender);\r\n            if(interest > 0){\r\n                harvest(interest);\r\n            }\r\n        }\r\n        //update balances\r\n        ubaseLpStakedBalances[msg.sender] = ubaseLpStakedBalances[msg.sender].add(amt);\r\n        totalUbaseLpStaked = totalUbaseLpStaked.add(amt);\r\n        staker[msg.sender].everStaked = true;\r\n        staker[msg.sender].ubaseStakeStartTimestamp = now;\r\n        //is staker already staked?\r\n        if(staker[msg.sender].ubaseStakeInitialTimestamp == 0){\r\n            staker[msg.sender].ubaseStakeInitialTimestamp = now;\r\n        }\r\n        uniETHUBASEInterface.transferFrom(msg.sender, address(this), amt);//make transfer\r\n        emit LpStake(msg.sender, amt);\r\n    }\r\n    \r\n    //unstake ETHUBASE LP tokens from contract\r\n    function UnstakeEthUbaseLp()\r\n        public\r\n        synchronized\r\n    {\r\n        require(canUnstake(msg.sender));\r\n        require(ubaseLpStakedBalances[msg.sender] > 0,\"Error: unsufficient frozen balance\");//ensure user has enough frozen funds\r\n        uint amt = ubaseLpStakedBalances[msg.sender];\r\n        if(isClaimable(msg.sender)){\r\n            uint256 interest = calcStakingRewards(msg.sender);\r\n            if(interest > 0){\r\n                harvest(interest);\r\n            }\r\n            ubaseLpStakedBalances[msg.sender] = 0;\r\n            staker[msg.sender].ubaseStakeStartTimestamp = 0;\r\n            staker[msg.sender].ubaseStakeInitialTimestamp = 0;\r\n            totalUbaseLpStaked = totalUbaseLpStaked.sub(amt);\r\n            uniETHUBASEInterface.transfer(msg.sender, amt);//make transfer\r\n            emit LpUnstake(msg.sender, amt);\r\n        }\r\n    }\r\n\r\n    //claim ubase\r\n    function ClaimUbase()\r\n        public\r\n    {\r\n        require(ubaseLpStakedBalances[msg.sender] > 0,\"Error: unsufficient lp balance\");//ensure user has enough lp frozen \r\n        uint256 interest = calcStakingRewards(msg.sender);\r\n        if(interest > 0)\r\n        {\r\n            harvest(interest);\r\n            staker[msg.sender].ubaseStakeStartTimestamp = now;\r\n            staker[msg.sender].totalInterestUbase += interest;\r\n        }\r\n    }\r\n    \r\n    function harvest(uint rewards)\r\n        internal\r\n    {\r\n        _mint(msg.sender, rewards);\r\n        _mint(founder, rewards.div(10));\r\n    }\r\n    \r\n    //returns amount of days past since contract deployment\r\n    function daysPastDeployment()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        if(deploymentStart == 0){\r\n            return 0;\r\n        }\r\n        uint daysPast = now.sub(deploymentStart).div(DAYSECONDS);\r\n        if(daysPast >= 1){\r\n            return daysPast;// returns 0 if under 1 day passed\r\n        }\r\n        else{\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    //returns amount of days past since contract deployment\r\n    function daysSinceInitialDeposit(address _user)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        if(staker[_user].ubaseStakeInitialTimestamp == 0){\r\n            return 0;\r\n        }\r\n        uint daysPast = now.sub(staker[_user].ubaseStakeInitialTimestamp).div(DAYSECONDS);\r\n        if(daysPast >= 1){\r\n            return daysPast;// returns 0 if under 1 day passed\r\n        }\r\n        else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    //returns lp staking reward in UBASE, early and continuous stakers get 3x rewards\r\n    function calcStakingRewards(address _user)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {   \r\n        uint8 multipler;\r\n         if(daysPastDeployment().sub(daysSinceInitialDeposit(_user)) <= 30)\r\n         {\r\n             multipler = 3;\r\n         }\r\n         else\r\n         {\r\n             multipler = 1;\r\n         }\r\n         return ((ubaseLpStakedBalances[_user].mul(globalApy.div(halvening)).div(ubaseApy)).mul(minsPastFreezeTime(_user))).add((daysSinceInitialDeposit(_user) * 10 ** 18).mul(upbaseFactor.mul(multipler)));\r\n    }\r\n    \r\n    \r\n    //returns amount of minutes past since lp freeze start - min 1 minute\r\n    function minsPastFreezeTime(address _user)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        if(staker[_user].ubaseStakeStartTimestamp == 0){\r\n            return 0;\r\n        }\r\n        uint minsPast = now.sub(staker[_user].ubaseStakeStartTimestamp).div(MINUTESECONDS);\r\n        if(minsPast >= 1){\r\n            return minsPast;// returns 0 if under 1 min passed\r\n        }\r\n        else{\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    function burnUbase(uint amt)\r\n        public\r\n    {\r\n        require(amt > 0, \"value must be greater than 0\");\r\n        _burn(msg.sender, amt);\r\n    }\r\n    \r\n    ///////////////////////////////\r\n    ////////ADMIN ONLY//////////////\r\n    ///////////////////////////////\r\n    \r\n\r\n\r\n    function setApy(uint32 _apy)\r\n        public\r\n        onlyAdmins\r\n    {\r\n        ubaseApy = _apy;\r\n    }\r\n    \r\n    function setGlobalApy(uint32 _apy)\r\n        public\r\n        onlyAdmins\r\n    {\r\n        globalApy = _apy;\r\n    }\r\n\r\n    function setUBASEExchange(address exchange)\r\n        public\r\n        onlyAdmins\r\n    {\r\n        uniETHUBASE = exchange;\r\n        uniETHUBASEInterface = IUniswapV2Pair(uniETHUBASE);\r\n    }\r\n\r\n    \r\n    ///////////////////////////////\r\n    ////////VIEW ONLY//////////////\r\n    ///////////////////////////////\r\n    \r\n    //check if user can claim UBASE yet\r\n    function isClaimable(address _user)\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        if(staker[_user].ubaseStakeStartTimestamp == 0){\r\n            return false;\r\n        }\r\n        else{\r\n           return staker[_user].ubaseStakeStartTimestamp.add(upbasePeriod) <= now; \r\n        }\r\n    }\r\n    \r\n    function canUnstake(address _user)\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        if(staker[_user].ubaseStakeStartTimestamp == 0){\r\n            return false;\r\n        }\r\n        uint daysPast = now.sub(staker[_user].ubaseStakeStartTimestamp).div(DAYSECONDS);\r\n        if(daysPast >= minStakeTime){\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    //total HXY frozen in contract\r\n    function totalStakedLpBalance()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return totalUbaseLpStaked;\r\n    }\r\n\r\n    //UBASE balance of caller\r\n    function ubaseBalance()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return balanceOf(msg.sender);\r\n    }\r\n    \r\n    //LP balance of caller\r\n    function lpBalance()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return uniETHUBASEInterface.balanceOf(msg.sender);\r\n    }\r\n\r\n    function donate() public payable {\r\n        require(msg.value > 0);\r\n        bool success = false;\r\n        uint256 balance = msg.value;\r\n        //distribute\r\n        (success, ) =  founder.call{value:balance.mul(50).div(100)}{gas:21000}('');\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n}\r\n"
    }
  }
}