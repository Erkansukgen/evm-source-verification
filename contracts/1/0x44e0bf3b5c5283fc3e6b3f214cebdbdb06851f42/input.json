{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Certificato.sol":{"content":"pragma solidity >=0.4.22 <0.6.6;\n\ncontract Certificato {\n\n    struct CertificatoModel {\n        string codice_verifica;\n        string nome_corso;\n        string matricola_studente;\n        string data_conseguimento;\n    }\n\n    address owner;\n    mapping(string => CertificatoModel) private certificati;\n    mapping(string => bool) private exist;\n\n    modifier OnlyOwner {\n        require(owner == msg.sender, 'Permission denied');\n        _;\n    }\n\n    event CertificatoEmitted(string, string);\n\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n\n    function createCertificato(\n        string calldata _codice_verifica,\n        string calldata _nome_corso,\n        string calldata _matricola_studente,\n        string calldata _data_conseguimento\n        ) external {\n\n            require(exist[_codice_verifica] == false, \"Certificate already exist\");\n            require(bytes(_codice_verifica).length > 0, \"_nome_corso empty\");\n            require(bytes(_nome_corso).length > 0, \"_nome_corso empty\");\n            require(bytes(_matricola_studente).length > 0, \"_cf_studente empty\");\n            require(bytes(_data_conseguimento).length > 0, \"_data_conseguimento empty\");\n\n            CertificatoModel memory certificato;\n            certificato.codice_verifica = _codice_verifica;\n            certificato.nome_corso = _nome_corso;\n            certificato.matricola_studente = _matricola_studente;\n            certificato.data_conseguimento = _data_conseguimento;\n\n            certificati[_codice_verifica] = certificato;\n            exist[_codice_verifica] = true;\n\n            emit CertificatoEmitted('Certificate emitted: ', _codice_verifica);\n        }\n}"}}}