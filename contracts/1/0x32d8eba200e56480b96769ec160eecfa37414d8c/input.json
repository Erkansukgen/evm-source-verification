{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/Kinochromes.sol":{"content":"// File: contracts/Base64.sol\n\n// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nlibrary Base64 {\n    bytes internal constant TABLE =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /// @notice Encodes some bytes to the base64 representation\n    function encode(bytes memory data) internal pure returns (string memory) {\n        uint256 len = data.length;\n        if (len == 0) return \"\";\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((len + 2) / 3);\n\n        // Add some extra buffer at the end\n        bytes memory result = new bytes(encodedLen + 32);\n        bytes memory table = TABLE;\n\n        assembly {\n            let tablePtr := add(table, 1)\n            let resultPtr := add(result, 32)\n            for {\n                let i := 0\n            } lt(i, len) {\n\n            } {\n                i := add(i, 3)\n                let input := and(mload(add(data, i)), 0xffffff)\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\n                out := shl(8, out)\n                out := add(\n                    out,\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\n                )\n                out := shl(8, out)\n                out := add(\n                    out,\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\n                )\n                out := shl(8, out)\n                out := add(\n                    out,\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\n                )\n                out := shl(224, out)\n                mstore(resultPtr, out)\n                resultPtr := add(resultPtr, 4)\n            }\n            switch mod(len, 3)\n            case 1 {\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n            }\n            case 2 {\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\n            }\n            mstore(result, encodedLen)\n        }\n        return string(result);\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Strings.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n\n\n\n\n\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n\n// File: contracts/Kinochromes.sol\n\n\npragma solidity ^0.8.9;\n\n\n\n\n\n//  _   ___                  _                                   \n// | | / (_)                | |                                  \n// | |/ / _ _ __   ___   ___| |__  _ __ ___  _ __ ___   ___  ___ \n// |    \\| | '_ \\ / _ \\ / __| '_ \\| '__/ _ \\| '_ ` _ \\ / _ \\/ __|\n// | |\\  \\ | | | | (_) | (__| | | | | | (_) | | | | | |  __/\\__ \\\n// \\_| \\_/_|_| |_|\\___/ \\___|_| |_|_|  \\___/|_| |_| |_|\\___||___/\n// by junkpunkie\n\ncontract Kinochromes is ERC721, ReentrancyGuard, Ownable {\n    mapping(bytes10 => bool) private hashToMinted;\n    mapping(uint => bytes10) private sToDNA;\n    mapping(uint => bytes10) private tokenIdToDNA;\n    mapping (address => bool) private addressToWhitelist;\n    mapping (address => bool) private whitelistAddrToMinted;\n    bool private paused = true;\n    bool private whitelistPaused = true;\n    uint private randNonce = 0;\n    uint private totalMinted = 0;\n\n    constructor() ERC721(\"Kinochromes\", \"[k]\") {\n      bytes10 dnaOne = bytes10(abi.encodePacked(bytes1(0xFF),bytes1(0xFF),bytes1(0xFF),bytes1(0),bytes1(0),bytes1(0),bytes1(0),bytes1(0),bytes1(0),bytes1(0)));\n      bytes10 dnaTwo = bytes10(abi.encodePacked(bytes1(0xFF),bytes1(0xFF),bytes1(0xFF),bytes1(0),bytes1(0),bytes1(0x09),bytes1(0),bytes1(0),bytes1(0),bytes1(0)));\n      bytes5 dnaOneMinusColor = getDnaMinusColor(dnaOne);\n      bytes5 dnaTwoMinusColor = getDnaMinusColor(dnaTwo);\n\n      sToDNA[0x32] = dnaOne;\n      tokenIdToDNA[0x32] = getDnaMinusColor(dnaOne);\n      hashToMinted[dnaOneMinusColor] = true;\n\n      sToDNA[0x1FF] = dnaTwo;\n      tokenIdToDNA[0x1FF] = getDnaMinusColor(dnaTwo);\n      hashToMinted[dnaTwoMinusColor] = true;\n    }    \n\n    // MINTING RELATED FUNCTIONS\n\n    // Pause or unpause minting\n    function setPaused(bool _paused) public nonReentrant onlyOwner {\n      paused = _paused;\n    }\n\n    function addToWhitelist(address[] memory users) public onlyOwner nonReentrant {\n        for (uint i = 0; i < users.length; i++) {\n            addressToWhitelist[users[i]] = true;\n            whitelistAddrToMinted[users[i]] = false;\n        }      \n    }\n\n    // Whitelisted addresses can claim 1 until public minting opens\n    function whitelistClaim() public nonReentrant {\n        require (addressToWhitelist[msg.sender], \"You are not on the whitelist\");\n        require (!whitelistAddrToMinted[msg.sender], \"You have already claimed with this address\");\n        uint index = totalSupply();\n        require(index >= 50 && index < 512, \"All have been minted\");\n        _internalMint(index);\n        whitelistAddrToMinted[msg.sender] = true;\n    }\n\n    // Owner keeps the first 50\n    function ownerClaim() public nonReentrant onlyOwner {\n        uint index = totalSupply();\n        require(index >= 0 && index + 9 < 50, \"Choose an unclaimed index between 0 and 51, inclusive\");\n        for (uint i = index; i < index + 10; i++) {\n          _internalMint(i);\n        }\n    }\n\n    // Claim for public mint\n    function claim() public nonReentrant {\n        require (!paused, \"Minting is paused\");\n        uint index = totalSupply();\n        require(index >= 50 && index < 512, \"All have been minted\");\n        _internalMint(index);\n    }\n\n    function _internalMint(uint256 tokenId) private {\n        tokenIdToDNA[tokenId] = generateHash(tokenId);\n        _safeMint(_msgSender(), tokenId);\n        totalMinted++;\n    }\n\n    function generateHash(uint256 tokenId) internal returns (bytes10) {\n      // bytes10 scheme is r/g/b/background/filter/pattern/transform/shape/anim1/anim2\n      // like this: 0xd0714c04020901020706\n      // where d0 = red, 71 = green, 4c = blue, 04 = background, 02 = filter, etc\n      bytes10 dna;\n      if (tokenId == 0x32 || tokenId == 0x1FF) {\n        return sToDNA[tokenId];\n      } else {\n          dna = bytes10(\n            abi.encodePacked(\n              genRandomNum(tokenId, 255), // red index 0\n              genRandomNum(tokenId, 255), // green index 1\n              genRandomNum(tokenId, 255), // blue index 2\n              genRandomNum(tokenId, 4),   // background index 3\n              genRandomNum(tokenId, 5),   // filter index 4\n              genRandomNum(tokenId, 9),   // pattern index 5\n              genRandomNum(tokenId, 5),   // transform index 6\n              genRandomNum(tokenId, 2),   // shape index 7\n              genRandomNum(tokenId, 8),   // anim1 duration index 8\n              genRandomNum(tokenId, 8)    // anim2 duration index 9\n            )\n          );\n        }\n\n        // Colors don't matter to the uniqueness of each token, but the rest\n        // of the attributes do matter.\n        bytes5 dnaMinusColor = getDnaMinusColor(dna);\n        // No dupes\n        if (hashToMinted[dnaMinusColor]) {\n          randNonce++;\n          return generateHash(tokenId);\n        }\n        hashToMinted[dnaMinusColor] = true;\n        return dna;      \n    }\n\n    function getDnaMinusColor(bytes10 dna) private pure returns (bytes5) {\n      return bytes5(\n          abi.encodePacked(\n              dna[3], dna[4], dna[5], dna[6], dna[7], dna[8], dna[9]      \n          )\n      );\n    }\n\n    function totalSupply() public view returns (uint) {\n      return totalMinted;\n    }\n\n    // ART FUNCTIONS\n\n    // The main SVG generator function\n    function generateSvg(uint256 tokenId) internal view returns (string memory) {\n        return string(abi.encodePacked(\n          '<svg width=\"256\" height=\"256\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" class=\"s1\" style=\"background:', buildBackground(tokenId), ';\">',\n          generateStyle(tokenId),\n          '<defs>', buildShape(tokenId), '</defs>',\n          '<g id=\"g\" style=\"',tokenId % 3 == 0 ? 'transform:scale(0.7) rotate(45deg);transform-origin:50% 50%;' : '','\">',\n          makeArt(tokenId),\n          '</g></svg>'\n        ));\n    }\n\n    // Creates the <style> tag\n    function generateStyle(uint256 tokenId) internal view returns (string memory) {\n      string[2] memory bgColors = invertColors(tokenId);\n      return string(abi.encodePacked(\n        '<style>.s1{--a:rgb(', bgColors[0],\n        ');--b:rgb(', bgColors[1], ');transition: all 1000ms ease;}.s1:hover {filter:',tokenId == 0x32 ? 'sepia(1)' : (tokenId == 0x1FF ? 'contrast(5)' : (tokenId % 2 == 0 ? 'invert(1)' : 'hue-rotate(-270deg)')),';}.u{animation:',toString(buildAnimationDuration(tokenId, 8)) ,'ms infinite alternate a,',toString(buildAnimationDuration(tokenId, 9)),'ms infinite alternate b;transform-origin:50% 50%;}',\n        buildAnimation(tokenId),\n        '@keyframes b{from{opacity: 1;}to {opacity: 0.5;}}',\n        '</style>'\n      ));\n    }\n\n    // This is the main shape and pattern plotting function\n    function makeArt(uint256 tokenId) internal view returns (string memory) {\n        string memory o;\n        bytes10 DNA = tokenIdToDNA[tokenId];\n        uint256 seed = getDNASeed(DNA, tokenId);\n        uint256 v = 0;\n        int a = 0;\n        int b = 0;\n        // The following loop and algorithm is taken and slightly tweaked from Autoglyphs, created by Matt Hall & John Watkinson of Larva Labs.\n        // The credit for this project and for onchain generative art goes to them.\n        // Read the Autoglyphs contract here: https://etherscan.io/address/0xd4e4078ca3495de5b1d4db434bebc5a986197782#code\n        if (uint8(DNA[5]) > 7) {\n          for (uint8 y = 0; y < 8; y++) {\n              a = (2 * (int8(y) - 4) + 1);\n              if (seed % 3 == 1) {\n                a = -a;\n              } else if (seed % 3 == 2) {\n                a = abs(a);\n              }\n              a = a * int(seed);\n              for (uint8 x = 0; x < 8; x++) {\n                  b = (2 * (int8(x) - 4) + 1);\n                  if (seed % 2 == 1) {\n                    b = abs(b);\n                  }\n                  b = b * int(seed);\n                  v = uint(a * b / int(0x100000000)) % ((seed % 25) + 5);\n                  string memory dString = v > 12 ? string(abi.encodePacked('-', toString(v * 1000))) : toString(v * 1000);\n                  \n                  o = string(abi.encodePacked(\n                      o,\n                      createShape(DNA, x, y, dString)\n                  ));\n              }\n          }\n          // Custom Patterns\n        } else {\n          for (uint8 y = 0; y < 8; y++) {\n            for (uint8 x = 0; x < 8; x++) {\n              v = drawCustomPattern(DNA, x, y, v);\n              o = string(abi.encodePacked(\n                  o,\n                  createShape(DNA, x, y, toString(v))\n              ));\n            }\n          }\n        }\n        return o;\n    }\n\n    // This giant function contains the logic to apply animation delays\n    // based on the given pattern for a tokenId\n    function drawCustomPattern(bytes10 DNA, uint8 x, uint8 y, uint delay) pure internal returns (uint) {\n      uint _delay = delay;\n      if(DNA[5] == 0x00) {\n        // simple\n        _delay += 100;\n      } else if (DNA[5] == 0x01) {\n        // staircase\n        _delay += 100;\n        _delay = _delay > 800 ? 0 : _delay;\n      } else if (DNA[5] == 0x02) {\n        // runner\n        if (_delay == 0) {\n          _delay = 1000;\n        }\n        if (y % 2 == 0) {\n          _delay = x % 2 == 0 ? _delay -= 1000 : _delay;\n        } else {\n          _delay = x % 2 == 0 ? _delay : _delay -= 1000;\n        }\n        _delay += 1000;\n      } else if (DNA[5] == 0x03) {\n        // cross + corners\n        if ((x == 0 && y == 0) || (x == 0 && y == 7) || (x == 7 && y == 0) || (x == 7 && y == 7)) {\n          _delay = 6500;\n        } else if (x == 3 || x == 4 || y == 3 || y == 4) {\n          _delay = 0;\n        } else {\n          _delay = 4000;\n        }\n      } else if (DNA[5] == 0x04) {\n        // spiral\n        if (x == 0) {\n          _delay = 3500 + 500 * y;\n        } else if (y == 0) {\n          _delay = 3500 - 500 * x;\n        } else if (y == 1) {\n          if (x > 0 && x < 7) {\n            _delay = 17000 - 500 * x;\n          } else {\n            _delay = 13500;\n          }\n        } else if (y == 2) {\n          if (x == 1) {\n            _delay = 17000;\n          } else if (x == 7) {\n            _delay = 13000;\n          } else {\n            _delay = 26000 - 500 * x;\n          }\n        } else if (y == 3) {\n          if (x == 1) {\n            _delay = 17500;\n          } else if (x == 2) {\n            _delay = 26000;\n          } else if (x == 6) {\n            _delay = 23000;\n          } else if (x == 7) {\n            _delay = 12500;\n          } else {\n            _delay = 32000 - 500 * x;\n          }\n        } else if (y == 4) {\n          if (x == 1) {\n            _delay = 18000;\n          } else if (x == 2) {\n            _delay = 26500;\n          } else if (x == 5) {\n            _delay = 29000;\n          } else if (x == 6) {\n            _delay = 22500;\n          } else if (x == 7) {\n            _delay = 12000;\n          } else {\n            _delay = 29500 + 500 * x;\n          }\n        } else if (y == 5) {\n          if (x == 1) {\n            _delay = 18500;\n          } else if (x > 1 && x < 6) {\n            _delay = 26000 + 500 * x;\n          } else if (x == 6) {\n            _delay = 22000;\n          } else {\n            _delay = 11500;\n          }\n        } else if (y == 6) {\n          if (x != 7) {\n            _delay = 18500 + 500 * x;\n          } else {\n            _delay = 11000;\n          }\n        } else if (y == 7) {\n          _delay = 7000 + 500 * x;\n        }\n      } else if (DNA[5] == 0x05) {\n        // X pattern\n        if ((x == 0 && y == 0) || (x == 7 && y == 7) || (x == 0 && y == 7) || (x == 7 && y == 0)) {\n          _delay = 1000;\n        } else if ((x == 1 && y == 1) || (x == 6 && y == 6) || (x == 1 && y == 6) || (x == 6 && y == 1)) {\n          _delay = 2000;\n        } else if ((x == 2 && y == 2) || (x == 5 && y == 5) || (x == 2 && y == 5) || (x == 5 && y == 2)) {\n          _delay = 3000;\n        } else if ((x == 3 && y == 3) || (x == 4 && y == 4) || (x == 3 && y == 4) || (x == 4 && y == 3)) {\n          _delay = 4000;\n        } else {\n          _delay = 0;\n        }\n      } else if (DNA[5] == 0x06) {\n        // 10Print\n        _delay = tenPrint(DNA, x, y);\n      } else {\n        // Squares in Squares\n        if (\n          (x == 0 && y == 0) || (x == 7 && y == 7) || (x == 0 && y == 7) || (x == 7 && y == 0)\n          || (x == 2 && y == 2) || (x == 5 && y == 5) || (x == 2 && y == 5) || (x == 5 && y == 2)\n          || ((y == 2 || y == 5) && (x > 2 && x < 6))\n          || (y > 2 && y < 5) && (x == 2 || x == 5)) {\n          _delay = 1000;\n        } else if (y == 0 || y == 7 || x == 0 || x == 7) {\n          _delay = 0;\n        } else {\n          _delay = 2000;\n        }\n      }\n      return _delay;\n    }\n\n    // A custom pattern based on the 10Print algorithm.\n    // See: https://10print.org/\n    function tenPrint(bytes10 DNA, uint8 x, uint8 y) internal pure returns (uint) {\n      uint rand = (uint(uint(uint8(DNA[x])) + uint(x) + uint(y)) % (uint(y) * 3 + 35)) % 3;\n      if (rand == 0) {\n        return 0;\n      }\n      if (rand == 1) {\n        return 7000;\n      }\n      return 15000;\n    }\n\n    // Changes a given color by subtracting up to 98 from its RGB value, and shifts the RGB position\n    // so as to create a nice gradient and to not clash with the background color\n    function changeColor(bytes10 _rgb, uint position, uint8 x, uint8 y) internal pure returns (bytes1) {\n        return subtractBitwise(getColor(_rgb, position > 1 ? 0 : position + 1), bytes1(uint8(x ** 2) + uint8(y ** 2)));\n    }\n\n    // Returns R, G, or B\n    function getColor(bytes10 _rgb, uint position) internal pure returns (bytes1) {\n        return _rgb[position];\n    }    \n\n    // Creates a shape based on the x and y coordinates, and the animation delay\n    function createShape(bytes10 DNA, uint8 x, uint8 y, string memory delay) pure internal returns (string memory) {\n        return string(\n            abi.encodePacked(\n              '<use class=\"u\" href=\"#r\" x=\"', toString(uint8(x) * 32),\n              '\" y=\"', toString(uint8(y) * 32), '\" fill=\"rgb(',\n              toString(uint8(changeColor(DNA, 0, x, y))), ',',\n              toString(uint8(changeColor(DNA, 1, x, y))), ',',\n              toString(uint8(changeColor(DNA, 2, x, y))),\n              ')\" style=\"animation-delay:', delay, 'ms;\" />'\n            )\n        );\n    }\n\n    // Chooses either Square or Circle shape\n    function buildShape(uint256 tokenId) internal view returns (string memory) {\n      string[2] memory shapes = [\n        '<rect id=\"r\" height=\"32\" width=\"32\"></rect>',\n        '<circle id=\"r\" cx=\"16\" cy=\"16\" height=\"32\" width=\"32\" r=\"8\"></circle>'\n      ];\n      return shapes[getAttributeAtPos(tokenId, 7)];\n    }\n\n    // TOKENURI AND ATTRIBUTE FUNCTIONS\n\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        require(_exists(tokenId),\"ERC721Metadata: URI query for nonexistent token\");\n        return string(abi.encodePacked(\n          \"data:application/json;base64,\",\n          Base64.encode(\n            bytes(\n              string(\n                abi.encodePacked(\n                  '{\"name\": \"', (tokenId == 0x1FF || tokenId == 0x32) ? 'Albinochrome #' : 'Kinochrome #',\n                  toString(tokenId),\n                  getAttributes(tokenId),\n                  // These two traits are called outside of getAttributes because of Stack Too Deep errors\n                  '\"},{\"trait_type\": \"Animation 1 Duration\",\"value\": \"',\n                  getAttributeTitleValues(tokenId, 8),\n                  'ms\"},{\"trait_type\": \"Animation 2 Duration\",\"value\": \"',\n                  getAttributeTitleValues(tokenId, 9), 'ms\"}]'\n                  ',\"image\": \"data:image/svg+xml;base64,',\n                  Base64.encode(\n                    bytes(generateSvg(tokenId))\n                  ),\n                  '\"}'\n                )\n              )\n            )\n          )\n        ));\n    }\n\n    // Creates the \"attributes\" array for tokenURI\n    function getAttributes(uint256 tokenId) view internal returns (string memory) {\n      return string(\n        abi.encodePacked(\n          '\", \"attributes\": [',(tokenId == 0x1FF || tokenId == 0x32) ? '{\"trait_type\": \"Special\",\"value\": \"Albino\"},' : '',\n          '{\"trait_type\": \"Background\",\"value\": \"',\n          getAttributeTitleValues(tokenId, 3),\n          '\"},{\"trait_type\": \"Filter\",\"value\": \"',\n          getAttributeTitleValues(tokenId, 4),\n          '\"},{\"trait_type\": \"Pattern\",\"value\": \"',\n          getAttributeTitleValues(tokenId, 5),\n          '\"},{\"trait_type\": \"Transform\",\"value\": \"',\n          getAttributeTitleValues(tokenId, 6),\n          '\"},{\"trait_type\": \"Shape\",\"value\": \"',\n          getAttributeTitleValues(tokenId, 7)\n        )\n      );\n    }\n\n    // Returns the \"value\" for each trait_type\n    function getAttributeTitleValues(uint256 tokenId, uint8 pos) view internal returns (string memory) {\n      if (pos == 3) {\n        return [\n          'Solid',\n          'Radial Gradient',\n          'Linear Gradient',\n          'Conic Gradient'\n        ][getAttributeAtPos(tokenId, 3)];\n      }\n      if (pos == 4) {\n        return [\n          'Hue Rotate',\n          'Reverse Hue Rotate',\n          'Saturate/Invert',\n          'Sepia',\n          'Sepia/Invert'\n        ][getAttributeAtPos(tokenId, 4)];\n      }\n      if (pos == 5) {\n        uint8 index = getAttributeAtPos(tokenId, 5);\n        return index > 7 ? 'Autoglyph' : [\n          'Simple',\n          'Staircase',\n          'Runner',\n          'Cross Corners',\n          'Spiral',\n          'X',\n          '10 Print',\n          'Squares in Squares'\n        ][getAttributeAtPos(tokenId, 5)];\n      }\n      if (pos == 6) {\n        return [\n          'None',\n          'Shrink',\n          'Grow',\n          'Rotate',\n          'Slideways'\n          // 'Slideways (Large)'\n        ][getAttributeAtPos(tokenId, 6)];\n      }\n      if (pos == 7) {\n        return [\n          'Square',\n          'Circle'\n        ][getAttributeAtPos(tokenId, 7)];\n      }\n      return [\n        '1500',\n        '2700',\n        '5100',\n        '11000',\n        '15500',\n        '25000',\n        '32000',\n        '45000'\n      ][getAttributeAtPos(tokenId, pos == 8 ? 8 : 9)];\n    }\n\n    // Returns animation duration in ms\n    function buildAnimationDuration(uint256 tokenId, uint8 pos) internal view returns (uint16) {\n      uint16[8] memory durs = [\n        1500,\n        2700,\n        5100,\n        11000,\n        15500,\n        25000,\n        32000,\n        45000\n      ];\n      return durs[getAttributeAtPos(tokenId, pos)];\n    }\n\n    // Returns background style for main <svg>\n    function buildBackground(uint256 tokenId) internal view returns (string memory) {\n      string[4] memory backgrounds = [\n        'var(--a)',\n        'radial-gradient(var(--a), var(--b))',\n        'linear-gradient(var(--a), var(--b))',\n        'conic-gradient(var(--a), var(--b))'\n      ];\n      return backgrounds[getAttributeAtPos(tokenId, 3)];\n    }\n\n    // Used for background only - inverts the RGB values to make a background color for the randomized palette\n    function invertColors(uint256 tokenId) internal view returns (string[2] memory) {\n      bytes1 red = bytes1(getAttributeAtPos(tokenId, 0));\n      bytes1 green = bytes1(getAttributeAtPos(tokenId, 1));\n      bytes1 blue = bytes1(getAttributeAtPos(tokenId, 2));\n      return [\n        string(abi.encodePacked(toString(uint8(~red)),',', toString(uint8(~green)),',', toString(uint8(~blue)))),\n        string(abi.encodePacked(toString(uint8(~green)),',', toString(uint8(~blue)),',', toString(uint8(~red))))\n      ];\n    }\n\n    // Returns CSS animations used for the animation pattern\n    function buildAnimation(uint256 tokenId) internal view returns (string memory) {\n      string[3][5] memory filters = [\n        ['hue-rotate(0deg)', 'hue-rotate(180deg)', 'hue-rotate(-180deg)'],\n        ['hue-rotate(0deg)', 'hue-rotate(-90deg)', 'hue-rotate(90deg)'],\n        ['saturate(1) invert(0)', 'saturate(1.8) invert(1)', 'saturate(0.5) invert(0.2)'],\n        ['sepia(0)', 'sepia(0.5)', 'sepia(0.8)'],\n        ['sepia(0) invert(0)', 'sepia(0.5) invert(1)', 'sepia(0.8) invert(0.6)']\n      ];\n      string[3][5] memory transforms = [\n        ['scale(1)', 'scale(1)', 'scale(1)'],\n        ['scale(1)', 'scale(0.8)', 'scale(1.2)'],\n        ['scale(1)', 'scale(1.6)', 'scale(1.2)'],\n        ['rotate(0deg)', 'rotate(45deg)', 'rotate(-45deg)'],\n        ['translate(0)', 'translate(16px)', 'translate(-16px)']\n        // ['translate(0)', 'translate(-50%)']\n      ];      \n      string memory o = string(\n        abi.encodePacked(\n          '@keyframes a{25%{filter:',\n          filters[getAttributeAtPos(tokenId, 4)][0],\n          ';transform:',transforms[getAttributeAtPos(tokenId, 6)][0],\n          ';}50%{filter:',\n          filters[getAttributeAtPos(tokenId, 4)][1],\n          ';transform:',transforms[getAttributeAtPos(tokenId, 6)][1],\n          ';}75%{filter:',filters[getAttributeAtPos(tokenId, 4)][0],\n          ';transform:',transforms[getAttributeAtPos(tokenId, 6)][0],\n          ';}100%{filter:',filters[getAttributeAtPos(tokenId, 4)][2],\n          ';transform:',transforms[getAttributeAtPos(tokenId, 6)][2],';}}'\n        )\n      );\n\n      return o;\n    }\n\n    // Takes in a tokenId and a \"max\" number as the ceiling to randomly pull\n    function genRandomNum(uint256 tokenId, uint8 max) internal returns (bytes1) {\n      return bytes1(randMod(tokenId, max));\n    }\n\n    // Returns the value of each attribute at a specific position\n    function getAttributeAtPos(uint256 tokenId, uint8 pos) internal view returns (uint8) {\n      return uint8(tokenIdToDNA[tokenId][pos]);\n    }    \n\n    // Returns a seed; a uint of the DNA that's useful for performing math\n    function getDNASeed(bytes10 DNA, uint256 tokenId) internal pure returns (uint64) {\n        return uint64(uint256(keccak256(abi.encodePacked(\n            DNA,\n            tokenId\n        ))));\n    }    \n\n    // UTIL FUNCTIONS\n\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }    \n\n    function randMod(uint256 tokenId, uint8 _modulo) internal returns(uint8) {\n        // increase nonce\n        randNonce++; \n        return uint8(uint256(\n          keccak256(\n            abi.encodePacked(\n              block.difficulty,\n              block.timestamp,\n              msg.sender,\n              randNonce,\n              tokenId)\n            )\n          )) % _modulo;\n    }\n\n    // Taken from Autoglyphs by Larva Labs\n    function abs(int n) internal pure returns (int) {\n        if (n >= 0) return n;\n        return -n;\n    }\n\n    function subtractBitwise(bytes1 a, bytes1 b) internal pure returns (bytes1) {\n      while (b != 0) {\n        bytes1 borrow = (~a) & b;\n        a = a ^ b;\n        b = borrow << 1;\n      }\n      return a;\n    }\n}\n"}}}