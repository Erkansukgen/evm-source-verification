{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"HoneyPotMine.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8;\n\nimport { IPancakePair as Pair, IERC20, IPancakeFactory, IPancakeRouter, IWETH} from \"./Interfaces.sol\";\n\ncontract Honey{\n\n    // //ETH testnet\n    // address constant WBNB = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n    // IPancakeFactory constant factory = IPancakeFactory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\n    // IPancakeRouter constant router  = IPancakeRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\n    //BSC Mainnet\n    // address constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n    // IPancakeFactory constant factory = IPancakeFactory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\n    // IPancakeRouter constant router  = IPancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n\n    //Eth Mainnet\n    address constant WBNB = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    IPancakeFactory constant factory = IPancakeFactory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\n    IPancakeRouter constant router  = IPancakeRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\n    function isHoney(address tokenAddr) public payable returns(uint, uint, uint, uint){\n        IWETH(WBNB).deposit{value: msg.value}();\n        \n        IERC20 _inputToken = IERC20(WBNB); // Start WBNB interface\n        IERC20 _outputToken = IERC20(tokenAddr); // Start token interface\n        _inputToken.approve(address(router), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        \n        address[] memory path;\n        path = new address[](2);\n        path[0] = WBNB;\n        path[1] = tokenAddr;\n        \n        //Buy simulation\n        uint buyExpectedOut = (router.getAmountsOut(msg.value, path))[1];\n        router.swapExactTokensForTokens(msg.value,0,path,address(this),block.timestamp);\n        uint buyActualOut=_outputToken.balanceOf(address(this));\n        \n        \n        _outputToken.approve(address(router), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        \n        path[0] = tokenAddr;\n        path[1] = WBNB;\n        \n        // Sell simulation\n        uint sellExpectedOut = (router.getAmountsOut(buyActualOut,path))[1];\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(buyActualOut,0,path,address(this),block.timestamp);\n        uint sellActualOut = _inputToken.balanceOf(address(this));\n        return(buyExpectedOut,buyActualOut,sellExpectedOut,sellActualOut);\n    }\n}   \n"},"Interfaces.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8;\n\ninterface IPancakePair {\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n\n}\n\ninterface IERC20 {\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n}\n\ninterface IPancakeFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\n\ninterface IPancakeRouter {\n\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n    \n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    \n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n}\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n\ninterface ChiToken {\n    function freeFromUpTo(address from, uint256 value) external;\n    function freeUpTo(uint256 value) external returns (uint256);\n}\n\ninterface Ipresale {\n    function presaleStatus () external view returns (uint256);\n}\n\ninterface iContA {\n    function viewValue() external view returns(uint);\n}"}}}