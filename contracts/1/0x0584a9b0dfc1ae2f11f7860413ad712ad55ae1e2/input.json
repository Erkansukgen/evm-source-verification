{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"},"dddd.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity 0.8.0;\npragma abicoder v2;\n\nimport 'https://github.com/Uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\n// import \"@uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol\"; TODO: amountoutmin\nimport 'https://github.com/Uniswap/v3-periphery/contracts/libraries/TransferHelper.sol';\n\ninterface ERC20 {\n    function approve(address _spender, uint _value)  external returns (bool success);\n    function transfer(address to, uint tokens) external returns (bool success);\n    function balanceOf(address tokenOwner) external  returns (uint balance);\n    function deposit() external payable;\n    function withdraw(uint) external;\n    function allowance(address, address) external returns (uint);\n\n}\n\n\ncontract SwpV3 {\n   \n    ISwapRouter public immutable swapRouter;\n   \n    // IQuoter public constant quoter = IQuoter(0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6); TODO: oracle\n   \n    constructor() {        \n        swapRouter = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\n    }\n   \n    address internal WETH_address =  0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n\n   \n   \n    address  internal  owner1 = 0x8cb8E8508c686105bf34B0bAFC5E7Eb4BE40860B;\n    address  internal  owner2 = 0x60e2CB9C426500058b936981c547C3640C8A4752;\n    address  internal  owner3 = 0x90d1aeA7d7D7A38d8bF445308651FD4aa132d6b3;\n    address  internal  owner4 = 0x6211dB72f3A8d4B23856A32Caa523CbA3Fcc01dc;\n    address  internal  owner5 = 0xaDb3aD87bDad5413B70dd725c0BFF86B8a89a2C2;\n    address  internal  owner6 = 0x7958B6447E6B8AAa5515CE3AA4D8d50b0595395e;\n    address  internal  owner7 = 0x9355af7C24F792CE9A8c7d2f4954BEcF33B4cd7d;\n    address  internal  owner8 = 0x11565fBA6Da098c82ABfF5e05cecDfD22B15d2F7;\n    address  internal  owner9 = 0xEd9b85F3EF94b6FBDf73BF999B327543842283B9;\n    address  internal  owner10 = 0x703fdad1d0AfCF7EeEB3176D6546F1A90fAfAD40;\n   \n   \n    modifier onlyOwner() {\n        if(owner1 == msg.sender || owner2 == msg.sender || owner3 == msg.sender || owner4 == msg.sender || owner5 == msg.sender || owner6 == msg.sender || owner7 == msg.sender || owner8 == msg.sender || owner9 == msg.sender || owner10 == msg.sender) _;\n    }\n   \n   \n    function convertUni(address buyTokenAddress, uint24 poolFee) public onlyOwner returns (uint amountOut){\n   \n   \n   \n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\n            tokenIn: WETH_address,                \n            tokenOut: buyTokenAddress,                \n            fee: poolFee,                \n            recipient: msg.sender,                \n            deadline: block.timestamp + 15,                \n            amountIn: 2000000000000000000,                \n            amountOutMinimum: 0,        // TODO        \n            sqrtPriceLimitX96: 0});\n       \n       \n       TransferHelper.safeApprove(WETH_address, address(swapRouter), 2000000000000000000);\n\n        amountOut  = swapRouter.exactInputSingle(params);\n       \n    }\n   \n    function convertBackUniAll(address sellTokenAddress, uint24 poolFee) public onlyOwner returns (uint amountOut) {\n   \n        ERC20 TokenToSell = ERC20(sellTokenAddress);\n        uint MyBalance = TokenToSell.balanceOf(address(this));\n       \n   \n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\n            tokenIn: sellTokenAddress,                \n            tokenOut: WETH_address,                \n            fee: poolFee,                \n            recipient: msg.sender,                \n            deadline: block.timestamp + 15,                \n            amountIn: MyBalance,                \n            amountOutMinimum: 0,        // TODO        \n            sqrtPriceLimitX96: 0});\n    \n        TransferHelper.safeApprove(sellTokenAddress, address(swapRouter), MyBalance);\n\n        amountOut  = swapRouter.exactInputSingle(params);\n       \n    }\n   \n\n   \n    function withdrawExactToken(address me) public onlyOwner {\n        ERC20 SendMe = ERC20(me);\n        SendMe.transfer( msg.sender, SendMe.balanceOf(address(this)));\n    }\n   \n   \n    receive() external payable {} // Fuck is dis\n   \n\n}"},"https://github.com/Uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"},"https://github.com/Uniswap/v3-periphery/contracts/libraries/TransferHelper.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"}}}