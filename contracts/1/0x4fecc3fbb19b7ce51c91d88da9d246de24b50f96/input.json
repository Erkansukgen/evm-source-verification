{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/hasbeen.sol": {
      "content": "/**\r\n *Submitted for verification at Etherscan.io on 2020-09-03\r\n*/\r\n\r\npragma solidity >=0.4.22 <0.7.0;\r\n\r\nabstract contract ERC20Interface {\r\n    function totalSupply() virtual public view returns (uint);\r\n    function balanceOf(address tokenOwner) virtual public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) virtual public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) virtual public returns (bool success);\r\n    function approve(address spender, uint tokens) virtual public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) virtual public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a); c = a - b; } function safeMul(uint a, uint b) public pure returns (uint c) { c = a * b; require(a == 0 || c / a == b); } function safeDiv(uint a, uint b) public pure returns (uint c) { require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\ncontract DPerpetual is ERC20Interface, SafeMath {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals; \r\n    string perpfii7624ii;\r\n    string perpfi4563iii;\r\n    string perpfii45ii;\r\n    \r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    \r\n    constructor() public {\r\n        name = \"perp.fi\";\r\n        symbol = \"PERP\";\r\n        decimals = 18; //preferrably 18\r\n        _totalSupply = 22462500  * 10 **18;   // 24 decimals \r\n        balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n    \r\n    \r\n    string perpfii34i76323i;\r\n    string perpfii5ii;\r\n\r\n    string perpfi2345235yiii;string perp234fiiii;\r\n\r\n    uint256 public _totalSupply;\r\n    function allowance(address tokenOwner, address spender) virtual override public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint tokens) virtual override public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address to, uint tokens) virtual override public returns (bool success) {\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n        string perpfiii23451i;string perpfii32ii;\r\n    string perpfi567243iii;\r\n    function transferFrom(address from, address to, uint tokens) virtual override public returns (bool success) {\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() virtual override public view returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n    \r\n    function balanceOf(address tokenOwner) virtual override public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n\r\n}"
    }
  }
}