{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":800},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"tempViral.sol":{"content":"// SPDX-License-Identifier: MIT\n\n// File contracts/libraries/SafeMath.sol\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary SafeMath128 {\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a + b) >= b, \"SafeMath: Add Overflow\");}\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a - b) <= a, \"SafeMath: Underflow\");}\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.4.0\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// File @openzeppelin/contracts/utils/Context.sol@v3.4.0\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n\n// File @openzeppelin/contracts/access/Ownable.sol@v3.4.0\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n// File contracts/token/viral.sol\npragma solidity =0.6.12;\n\n/*\nBEGIN KEYBASE SALTPACK SIGNED MESSAGE. kXR7VktZdyH7rvq v5weRa0zkYfegFM 5cM6gB7cyPatQvp 6KyygX8PsvQVo4n Ugo6Il5bm5uWrwV gfKz4IMGvvw0ZCQ QJai8AcoC5xNiFh PGioCgTkGBEInLL uz40oe8lYwjoXoM eTXsRVcG6KdNwsH nQS2X4ruHIv5Ffi QLYkL1vejSBJL8Z RvdM02suYKeOkm0 Hwf7STe3UtViWlg J7QZUO3TuLtxC1i L9Gy5HSUv8k9ZXE T1jUkD7myLRQ1MO SDAAAIpj9yVw7i. END KEYBASE SALTPACK SIGNED MESSAGE.\n*/\n/**\n * @dev Implementation of the VIRAL token.\n *\n * Viral is a GSN supporting ERC20 token with:\n *  - a variable token supply\n *  - a 5% fee on transfer such that:\n *    - 3% is redistributed to all eligible token holders\n *    - 1% is awarded to the team wallet (aka the default referrer)\n *    - 1% is awarded to the referrer of the recipient address (fallbacks to the default referrer)\n *\n * Every address can chose to set (only once) its referrer, by calling the `addReferrer` function.\n * The default value for addresses that chose not to set this value is the default referrer address\n *\n * The `owner` has the ability to:\n *  - exclude/include addresses from/in fees on transfer\n *  - exclude/include addresses from/in reflection rewards\n *  - allow/disallow an address to mint VIRAL tokens\n *  - allow/disallow an address to burn VIRAL tokens\n *  - update the trustedForwarder address\n *  - update the fee on transfer (upto a maximum of 5% of transaction amount)\n */\ncontract Viral is IERC20, Ownable {\n    using SafeMath for uint256;\n\n    mapping(address => bool) private _isMinter;\n    mapping(address => bool) private _isExcludedFromFee;\n    mapping(address => bool) private _isExcludedFromReward;\n\n    mapping(address => bool) private _isReferredYet;\n    mapping(address => address) private _referrerOf;\n    mapping(address => uint256) private _referralCountOf;\n\n    mapping(address => uint256) private _balances;\n    mapping(address => uint256) private _lastDividendPoints;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private constant pointMultiplier = 10**18;\n    uint256 private _totalSupply;\n    uint256 private _totalReferrals;\n    uint256 private _totalDividendPoints;\n    uint256 private _excludedFromRewardSupply;\n\n    uint256 public totalFee = 5;\n    uint256 public viralFee = 1;\n    uint256 public referralFee = 1;\n\n    address public defaultReferrer;\n    address public trustedForwarder;\n\n    bool public isMintingAllowed = true;\n\n    string private _name = \"Viral\";\n    string private _symbol = \"VIRAL\";\n\n    constructor(address _defaultReferrer) public {\n\n        defaultReferrer = _defaultReferrer;\n\n        _isMinter[owner()] = true;\n        _isExcludedFromFee[owner()] = true;\n\n        _isExcludedFromReward[address(0)] = true;\n        _isExcludedFromReward[_defaultReferrer] = true;\n\n        _referrerOf[_defaultReferrer] = address(0);\n        _isReferredYet[_defaultReferrer] = true;\n\n        _mint(_msgSender(), 10000000 * 10**18); // a starting supply of 10,000,000 tokens worth $100\n    }\n\n    modifier onlyMinter() {\n        require(_isMinter[_msgSender()], \"VIRAL: Minter only\");\n        _;\n    }\n\n    function name() external view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() external pure returns (uint8) {\n        return 18;\n    }\n\n    function versionRecipient() external pure returns (string memory) {\n        return \"1.0.0\";\n    }\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function totalReferrals() external view returns (uint256) {\n        return _totalReferrals;\n    }\n\n    function balanceOf(address account) external view override returns (uint256) {\n        return _balances[account].add(_dividendsOwing(account));\n    }\n\n    function referrerOf(address account) public view returns (address) {\n        if(_isReferredYet[account]) {\n            return _referrerOf[account];\n        }\n        return defaultReferrer;\n    }\n\n    function referralCountOf(address account) public view returns (uint256) {\n        return _referralCountOf[account];\n    }\n\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return forwarder == trustedForwarder;\n    }\n\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) external override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function addReferrer(address _referrer) external {\n        _addReferrer(_msgSender(), _referrer);\n    }\n\n    function burn(uint256 amount) external onlyMinter() {\n        _burn(_msgSender(), amount);\n    }\n\n    function mint(address account, uint256 amount) external onlyMinter() {\n        require(isMintingAllowed, \"VIRAL: Minting not allowed anymore\");\n        _mint(account, amount);\n    }\n\n    function disableMinting() external onlyMinter() {\n        require(isMintingAllowed, \"VIRAL: Minting already disabled\");\n        isMintingAllowed = false;\n    }\n\n    function enableMinting() external onlyOwner() {\n        require(!isMintingAllowed, \"VIRAL: Minting already enabled\");\n        isMintingAllowed = true;\n    }\n\n    function excludeFromReward(address account) external onlyOwner() {\n        require(!_isExcludedFromReward[account], \"VIRAL: Account already excluded\");\n        _updateAccount(account);\n        _isExcludedFromReward[account] = true;\n        _excludedFromRewardSupply = _excludedFromRewardSupply.add(_balances[account]);\n    }\n\n    function includeInReward(address account) external onlyOwner() {\n        require(_isExcludedFromReward[account], \"VIRAL: Account not excluded\");\n        _updateAccount(account);\n        _isExcludedFromReward[account] = false;\n        _excludedFromRewardSupply = _excludedFromRewardSupply.sub(_balances[account]);\n    }\n\n    function excludeFromFee(address account) external onlyOwner() {\n        require(!_isExcludedFromFee[account], \"VIRAL: Account already excluded\");\n        _isExcludedFromFee[account] = true;\n    }\n\n    function includeInFee(address account) external onlyOwner() {\n        require(_isExcludedFromFee[account], \"VIRAL: Account not excluded\");\n        _isExcludedFromFee[account] = false;\n    }\n\n    function addMinter(address account) external onlyOwner() {\n        require(!_isMinter[account], \"VIRAL: Account already a minter\");\n        _isMinter[account] = true;\n    }\n\n    function removeMinter(address account) external onlyOwner() {\n        require(_isMinter[account], \"VIRAL: Account is not a minter\");\n        _isMinter[account] = false;\n    }\n\n    function updateTrustedForwarder(address forwarder) external onlyOwner() {\n        trustedForwarder = forwarder;\n    }\n\n    function _disburse(uint256 rAmount) private {\n        if(rAmount != 0) {\n            uint256 newDividendPoints = rAmount.mul(pointMultiplier).div(_totalSupply.sub(_excludedFromRewardSupply));\n            _totalDividendPoints = _totalDividendPoints.add(newDividendPoints);\n        }\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(sender != recipient, \"ERC20: transfer to self\");\n\n        _beforeTokenTransfer(sender, recipient);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n\n        address defaultReferrer_ = defaultReferrer;\n        address rReferrer = referrerOf(recipient);\n\n        bool isDistinctDefaultRef;\n        bool isDistinctRecipientRef;\n\n        if(defaultReferrer_ != sender && defaultReferrer_ != recipient) {\n            isDistinctDefaultRef = true;\n        }\n\n        if(rReferrer != recipient && rReferrer != sender && rReferrer != defaultReferrer_) {\n            isDistinctRecipientRef = true;\n        }\n\n        uint256 dAmount;\n        uint256 tAmount = amount;\n        if (!_isExcludedFromFee[sender]) {\n            /*\n            amount : input amount\n            tAmount : transfer amount\n            fAmount : fee amount\n            rAmount : referrer amount\n            vAmount : viral team amount\n            dAmount : distribution amount\n            */\n            uint256 totalFee_ = totalFee;\n            uint256 fAmount = amount.mul(totalFee_).div(100);\n            tAmount = amount.sub(fAmount);\n\n            uint256 rAmount = referralFee.mul(fAmount).div(totalFee_);\n            uint256 vAmount = viralFee.mul(fAmount).div(totalFee_);\n            dAmount = fAmount.sub(rAmount).sub(vAmount);\n\n            if (isDistinctDefaultRef) {\n                _updateAccount(defaultReferrer_);\n            }\n            if (isDistinctRecipientRef) {\n                _updateAccount(rReferrer);\n            }\n\n            _balances[defaultReferrer_] = _balances[defaultReferrer_].add(vAmount);\n            _balances[rReferrer] = _balances[rReferrer].add(rAmount);\n\n            if (isDistinctDefaultRef && _isExcludedFromReward[defaultReferrer_]) {\n                _excludedFromRewardSupply = _excludedFromRewardSupply.add(vAmount);\n            }\n            if (isDistinctRecipientRef && _isExcludedFromReward[rReferrer]) {\n                _excludedFromRewardSupply = _excludedFromRewardSupply.add(rAmount);\n            }\n        }\n\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(tAmount);\n\n        if (_isExcludedFromReward[sender]) {\n            _excludedFromRewardSupply = _excludedFromRewardSupply.sub(amount);\n        }\n        if (_isExcludedFromReward[recipient]) {\n            _excludedFromRewardSupply = _excludedFromRewardSupply.add(tAmount);\n        }\n\n        _disburse(dAmount);\n\n        emit Transfer(sender, recipient, tAmount);\n    }\n\n    function _addReferrer(address _referee, address _referrer) internal {\n        require(!_isReferredYet[_referee], \"VIRAL: Account already referred\");\n\n        _referrerOf[_referee] = _referrer;\n        _isReferredYet[_referee] = true;\n\n        _referralCountOf[_referrer] = _referralCountOf[_referrer].add(1);\n        _totalReferrals = _totalReferrals.add(1);\n    }\n\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        if(_isExcludedFromReward[account]) {\n            _excludedFromRewardSupply = _excludedFromRewardSupply.add(amount);\n        }\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0));\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        if(_isExcludedFromReward[account]) {\n            _excludedFromRewardSupply = _excludedFromRewardSupply.sub(amount);\n        }\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _dividendsOwing(address account) internal view returns (uint256) {\n        if (_isExcludedFromReward[account]) {\n            return 0;\n        }\n        uint256 newDividendPoints = _totalDividendPoints.sub(_lastDividendPoints[account]);\n        return _balances[account].mul(newDividendPoints).div(pointMultiplier);\n    }\n\n    function _updateAccount(address account) internal {\n        uint256 owing = _dividendsOwing(account);\n        if (owing > 0) {\n            _balances[account] = _balances[account].add(owing);\n            if(_isExcludedFromReward[account]) {\n                _excludedFromRewardSupply = _excludedFromRewardSupply.add(owing);\n            }\n        }\n        _lastDividendPoints[account] = _totalDividendPoints;\n    }\n\n    function _beforeTokenTransfer(address from, address to) internal {\n        _updateAccount(from);\n        _updateAccount(to);\n    }\n\n    function _msgSender() internal override virtual view returns (address payable ret) {\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\n            // At this point we know that the sender is a trusted forwarder,\n            // so we trust that the last bytes of msg.data are the verified sender address.\n            // extract sender address from the end of msg.data\n            assembly {\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\n            }\n        } else {\n            return msg.sender;\n        }\n    }\n}\n"}}}