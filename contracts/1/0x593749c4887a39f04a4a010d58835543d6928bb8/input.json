{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/mutlCall.sol":{"content":"pragma solidity ^0.8.0;\n\ninterface IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\ninterface INFTAddress {\n    function transferFrom(address from, address to, uint256 tokenId) external;\n}\n\ncontract NFTCaller is IERC721Receiver {\n    mapping(address => bool) public owners;\n\n    constructor(address[] memory owners_){\n        for (uint256 i; i < owners_.length; i++) {\n            owners[owners_[i]] = true;\n        }\n    }\n\n    function mintMul(address nftAddress, uint256 txAmount, uint256 mintAmount, uint256 price, bytes calldata data, uint256 e) public onlyOwner payable {\n        for (uint256 i; i < txAmount; i++) {\n            (bool s,) = nftAddress.call{value : price * mintAmount}(data);\n            require(s);\n        }\n\n        if (e > 0) {\n            if (address(this).balance > e) { \n                block.coinbase.transfer(e);\n            } else {\n                block.coinbase.transfer(address(this).balance);\n            }\n        }\n\n        if (address(this).balance > 0) {\n            payable(msg.sender).transfer(address(this).balance);\n        }\n    }\n\n    function transferSelfNFTs(address nftAddress, address to, uint256[] calldata tokenIDs) public onlyOwner {\n        for (uint256 i; i < tokenIDs.length; i++) {\n            INFTAddress(nftAddress).transferFrom(address(this), to, tokenIDs[i]);\n        }\n    }\n\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external pure override returns (bytes4){\n        IERC721Receiver i;\n        return i.onERC721Received.selector;\n    }\n\n    receive() external payable {\n\n    }\n\n    modifier onlyOwner(){\n        require(owners[msg.sender], \"not owner\");\n        _;\n    }\n}"}}}