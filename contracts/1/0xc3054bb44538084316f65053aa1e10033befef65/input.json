{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 600
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "ksmregister.sol": {
      "content": "// Sources flattened with hardhat v2.6.7 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.2\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/IKSTStaking.sol\r\n\r\n\r\npragma solidity 0.8.6;\r\ninterface IKSTStaking {\r\n    function lock(address user, uint256 userUnlockTime) external;\r\n\r\n    function addIDO(address account) external;\r\n\r\n    function stakedBalance(address account) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/Registration.sol\r\n\r\n\r\npragma solidity ^0.8.6;\r\ncontract Registration is Ownable {\r\n    bool public registrationOpen;\r\n    address[] public regAddresses;\r\n    uint256 public totalRegistered;\r\n    mapping(address => bool) public _registerd;\r\n    uint256 public lockPeriod = 7 days;\r\n    IKSTStaking private immutable staking;\r\n    uint256 private constant MINTIERAMOUNT = 100 ether;\r\n\r\n    constructor(address _staking) {\r\n        staking = IKSTStaking(_staking);\r\n    }\r\n\r\n    modifier onlyRegistrationOpen() {\r\n        require(registrationOpen, \"Registration not open\");\r\n        _;\r\n    }\r\n\r\n    enum Tiers {\r\n        TIER1,\r\n        TIER2,\r\n        TIER3,\r\n        TIER4,\r\n        TIER5,\r\n        NONE,\r\n        TIER6\r\n    }\r\n\r\n    event Registered(\r\n        address indexed user,\r\n        uint256 unlockTime,\r\n        uint256 lockedBalance,\r\n        Tiers tier\r\n    );\r\n\r\n    function register() external onlyRegistrationOpen {\r\n        require(!_registerd[msg.sender], \"IDO Register:Already regAddresses\");\r\n        uint256 lockedBal = getLockedBalance();\r\n        require(\r\n            lockedBal >= MINTIERAMOUNT,\r\n            \"IDO: Minimum registration amount not reached\"\r\n        );\r\n        Tiers tier = getTier(lockedBal);\r\n        uint256 lockTime = block.timestamp + lockPeriod;\r\n        _registerd[msg.sender] = true;\r\n        regAddresses.push(msg.sender);\r\n        totalRegistered = totalRegistered + 1;\r\n        staking.lock(msg.sender, lockTime); // locks users staked balance\r\n        emit Registered(msg.sender, lockTime, lockedBal, tier);\r\n    }\r\n\r\n    function getTier(uint256 _amount) public pure returns (Tiers) {\r\n        if (_amount < MINTIERAMOUNT) return Tiers.NONE;\r\n\r\n        if (_amount >= 100 ether && _amount < 3500 ether) {\r\n            return Tiers.TIER1;\r\n        } else if (_amount >= 3500 ether && _amount < 8500 ether) {\r\n            return Tiers.TIER2;\r\n        } else if (_amount >= 8500 ether && _amount < 17000 ether) {\r\n            return Tiers.TIER3;\r\n        } else if (_amount >= 17000 ether && _amount < 25500 ether) {\r\n            return Tiers.TIER4;\r\n        } else {\r\n            return Tiers.TIER5;\r\n        }\r\n    }\r\n\r\n    function getLockedBalance() public view returns (uint256) {\r\n        return staking.stakedBalance(msg.sender); // gets locked balance\r\n    }\r\n\r\n     function registerd(address account) external view returns (bool) {\r\n        return _registerd[account];\r\n    }\r\n\r\n    function checkRegistration(address _user) external view returns (bool) {\r\n        if (_registerd[_user]) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function setRegistrationOpen() external onlyOwner {\r\n        registrationOpen = !registrationOpen;\r\n    }\r\n\r\n    function getRegisteredAddresses() public view returns (address[] memory) {\r\n        return regAddresses;\r\n    }\r\n\r\n    function changeLockPeriod(uint256 _period) public onlyOwner {\r\n        lockPeriod = _period;\r\n    }\r\n\r\n    function addRegistered(address[] calldata _addresses) public onlyOwner {\r\n        for (uint256 index = 0; index < _addresses.length; index++) {\r\n            _registerd[_addresses[index]] = true;\r\n            regAddresses.push(_addresses[index]);\r\n            totalRegistered = totalRegistered + 1;\r\n        }\r\n    }\r\n}"
    }
  }
}