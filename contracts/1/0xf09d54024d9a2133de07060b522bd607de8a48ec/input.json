{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"},"browser/lock.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.6.0;\n\nimport \"./SafeMath.sol\";\n\nabstract contract ERC20 {\n    function balanceOf(address who) public virtual view returns (uint);\n    function transfer(address recipient, uint256 amount) public virtual returns (bool);\n}\n\ncontract TokenLock {\n    using SafeMath for uint;\n    \n    struct Target {\n        uint perAmount;\n        uint remainAmount;\n        uint lastTime;\n    }\n    \n    ERC20 public token;\n    \n    uint public interval = 2628000;\n    uint public startTime = 1596758400; // 2020. 8. 7. 00:00 (UTC)\n    \n    address public owner;\n    \n    mapping(address => Target) public targets;\n\n    constructor(ERC20 _token) public {\n        token = _token;\n        owner = msg.sender;\n    }\n    \n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    // !! EMERGENCY FUNCTION !! OWNER ONLY\n    function transfer() public onlyOwner {\n        token.transfer(owner, balance());\n    }\n    \n    function setInterval(uint _interval) public onlyOwner {\n        interval = _interval;\n    }\n    \n    function setStartTime(uint _startTime) public onlyOwner {\n        startTime = _startTime;\n    }\n    \n    function balance() public view returns(uint) {\n        return token.balanceOf(address(this));\n    }\n    \n    function addTarget(address[] memory addrList, uint[] memory remainList, uint[] memory perAmountList) public onlyOwner {\n        require(addrList.length == remainList.length && remainList.length == perAmountList.length);\n        \n        for(uint i=0; i<addrList.length; i++) {\n            if(targets[addrList[i]].lastTime != 0) {\n                continue;\n            }\n            \n            targets[addrList[i]] = Target(perAmountList[i], remainList[i], startTime);\n        }\n    }\n    \n    function isReleaseAvailable(address addr) public view returns(bool){\n        Target memory target = targets[addr];\n        \n        if(block.timestamp < target.lastTime)\n            return false;\n        if(target.remainAmount == 0)\n            return false;\n            \n        return block.timestamp - target.lastTime >= interval;\n    }\n    \n    function currentReleaseRound(address addr) public view returns(uint) {\n        Target memory target = targets[addr];\n        \n        if(block.timestamp < target.lastTime)\n            return 0;\n        if(target.remainAmount == 0)\n            return 0;\n            \n        uint round = (block.timestamp.sub(target.lastTime)).div(interval);\n        return round;\n    }\n    \n    function claim(address addr) public {\n        Target storage target = targets[addr];\n        \n        require(target.remainAmount > 0, \"All token released\");\n            \n        uint round = (block.timestamp.sub(target.lastTime)).div(interval);\n        require(round > 0, \"Round is zero\");\n        \n        uint amount = target.perAmount.mul(round);\n        if(amount > target.remainAmount) {\n            amount = target.remainAmount;\n        }\n        \n        if(token.transfer(addr, amount)) {\n            target.lastTime = block.timestamp;\n            target.remainAmount = target.remainAmount.sub(amount);\n        }else{\n            revert(\"Transfer failed\");\n        }\n    }\n    \n    function claimBulk(address[] memory addrList) public {\n        for(uint i=0; i<addrList.length; i++) {\n            claim(addrList[i]);\n        }\n    }\n}"}}}