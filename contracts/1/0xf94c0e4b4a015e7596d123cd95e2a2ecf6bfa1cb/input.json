{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/thingdom.sol":{"content":"contract Controller {\r\n    address private caller;\r\n    address private owner=msg.sender;\r\n    constructor(address x) {\r\n        caller=x;\r\n    }\r\n    function sinwod2(address x) public {\r\n        require(msg.sender==owner);\r\n        caller=x;\r\n    }\r\n    function wndo2() public view returns(address) {\r\n        return caller;\r\n    }\r\n}\r\n\r\ncontract MultiBot {\r\n    address private owner=msg.sender;\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n    function nb712ygfbvg() public {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n    function f(uint256 i,uint256 value) public {\r\n        assembly {\r\n            let ab := mload(0x40)\r\n            mstore(ab, 0x630DBE671F600052600060006004601c335AF433FF)\r\n            let addr := create2(value,add(ab,11),21,i)\r\n        }\r\n    }\r\n    function a() public payable {\r\n        payable(Controller(0xCA36747D88d62c9b5434a00823c327e7968B8778).wndo2()).delegatecall(abi.encodeWithSignature(\"f()\"));\r\n    }\r\n    function fd2wind(uint256 x, uint256 y,uint256 z) public payable {\r\n        for (uint i=0;i<x;i++) {\r\n            if (gasleft()>z) {f(y+i,address(this).balance);}\r\n            else return;\r\n        }\r\n    }\r\n}\r\ncontract Thing {\r\n    function mint(uint8) payable public {}\r\n    function saleIsActive() public returns(bool) {}\r\n    function totalSupply() public returns(uint256) {}\r\n    function transferFrom(address sender,address recipient,uint256 amount) public {}\r\n    function setApprovalForAll(address,bool) public {}\r\n}\r\ncontract ThingBot {\r\n    function f() public payable {\r\n        Thing(0x0AA7420c43B8C1a7b165d216948870C8eCfe1EE1).mint{value:500000000000000000}(5);\r\n    }\r\n    function nb712ygfbvg() public {\r\n        payable(0x0CA8A146D80287A5dF9bb673E5c85B25A669640F).transfer(address(this).balance);\r\n    }\r\n}\r\ncontract ThingRun {\r\n    uint256 private counter=1;\r\n    function nb712ygfbvg() public {\r\n        payable(0x0CA8A146D80287A5dF9bb673E5c85B25A669640F).transfer(address(this).balance);\r\n    }\r\n    function ie3ifw2fve() public payable {\r\n    \taddress x=0x0AA7420c43B8C1a7b165d216948870C8eCfe1EE1;\r\n        require(Thing(x).saleIsActive());\r\n        uint256 xx=Thing(x).totalSupply();\r\n        uint a=10000-xx;\r\n        require(a>5&&a<10000,\"A\");\r\n        a=a/5;\r\n        uint256 y=address(this).balance/500000000000000000;\r\n        if (a>y) a=y;\r\n        MultiBot(payable(0x865518142c5A6925b9A2B4Ead261644E8e7d1AaD)).fd2wind{value:address(this).balance}(a,counter,450000);\r\n        require(Thing(x).totalSupply()>xx);\r\n        counter+=a;\r\n    }\r\n}\r\ncontract MonkeTranser {\r\n    function f() public payable {\r\n        if (gasleft()>100000) {\r\n            try Thing(0x0AA7420c43B8C1a7b165d216948870C8eCfe1EE1).setApprovalForAll(address(0xf022AbF1a771bc4EFD0AD5F219626b7a7FE5131F),true) {}\r\n            catch {}\r\n        }\r\n    }\r\n}\r\ncontract MonkeTransferMain {\r\n    address private x = msg.sender;\r\n    function f(address to,uint256[] memory tokenIds,address[] memory addresses) public payable {\r\n        require(msg.sender==x);\r\n        for (uint256 i=0;i<tokenIds.length;i++) {\r\n            Thing(0x0AA7420c43B8C1a7b165d216948870C8eCfe1EE1).transferFrom(addresses[i],to,tokenIds[i]);\r\n        }\r\n    }\r\n}"}}}