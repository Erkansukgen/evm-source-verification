{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "EPCToken.sol": {
      "content": "pragma solidity ^0.4.24;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n   防止整数溢出问题\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n \r\ncontract StandardToken {\r\n\t//使用SafeMath\r\n    using SafeMath for uint256;\r\n   \r\n    //代币名称\r\n    string public name;\r\n    //代币缩写\r\n    string public symbol;\r\n\t//代币小数位数(一个代币可以分为多少份)\r\n    uint8 public  decimals;\r\n\t//代币总数\r\n\tuint256 public totalSupply;\r\n   \r\n\t//交易的发起方(谁调用这个方法，谁就是交易的发起方)把_value数量的代币发送到_to账户\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    //从_from账户里转出_value数量的代币到_to账户\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\t//交易的发起方把_value数量的代币的使用权交给_spender，然后_spender才能调用transferFrom方法把我账户里的钱转给另外一个人\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\t//查询_spender目前还有多少_owner账户代币的使用权\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\t//转账成功的事件\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\t//使用权委托成功的事件\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n//设置代币控制合约的管理员\r\ncontract Owned {\r\n \r\n    // modifier(条件)，表示必须是权力所有者才能do something，类似administrator的意思\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;//do something \r\n    }\r\n \r\n\t//权力所有者\r\n    address public owner;\r\n \r\n\t//合约创建的时候执行，执行合约的人是第一个owner\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\t//新的owner,初始为空地址，类似null\r\n    address newOwner=0x0;\r\n \r\n\t//更换owner成功的事件\r\n    event OwnerUpdate(address _prevOwner, address _newOwner);\r\n \r\n    //现任owner把所有权交给新的owner(需要新的owner调用acceptOwnership方法才会生效)\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n \r\n    //新的owner接受所有权,权力交替正式生效\r\n    function acceptOwnership() public{\r\n        require(msg.sender == newOwner);\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = 0x0;\r\n    }\r\n}\r\n \r\n//代币的控制合约\r\ncontract Controlled is Owned{\r\n \r\n\t//创世vip\r\n    constructor() public {\r\n       setExclude(msg.sender,true);\r\n    }\r\n \r\n    // 控制代币是否可以交易，true代表可以(exclude里的账户不受此限制，具体实现在下面的transferAllowed里)\r\n    bool public transferEnabled = true;\r\n \r\n    // 是否启用账户锁定功能，true代表启用\r\n    bool lockFlag=true;\r\n\t// 锁定的账户集合，address账户，bool是否被锁，true:被锁定，当lockFlag=true时，恭喜，你转不了账了，哈哈\r\n    mapping(address => bool) locked;\r\n\t// 拥有特权用户，不受transferEnabled和lockFlag的限制，vip啊，bool为true代表vip有效\r\n    mapping(address => bool) exclude;\r\n \r\n\t//设置transferEnabled值\r\n    function enableTransfer(bool _enable) public onlyOwner returns (bool success){\r\n        transferEnabled=_enable;\r\n\t\treturn true;\r\n    }\r\n \r\n\t//设置lockFlag值\r\n    function disableLock(bool _enable) public onlyOwner returns (bool success){\r\n        lockFlag=_enable;\r\n        return true;\r\n    }\r\n \r\n\t// 把_addr加到锁定账户里，拉黑名单。。。\r\n    function addLock(address _addr) public onlyOwner returns (bool success){\r\n        require(_addr!=msg.sender);\r\n        locked[_addr]=true;\r\n        return true;\r\n    }\r\n\r\n\t//设置vip用户\r\n    function setExclude(address _addr,bool _enable) public onlyOwner returns (bool success){\r\n        exclude[_addr]=_enable;\r\n        return true;\r\n    }\r\n \r\n\t//解锁_addr用户\r\n    function removeLock(address _addr) public onlyOwner returns (bool success){\r\n        locked[_addr]=false;\r\n        return true;\r\n    }\r\n\t//控制合约 核心实现\r\n    modifier transferAllowed(address _addr) {\r\n        if (!exclude[_addr]) {\r\n            require(transferEnabled,\"transfer is not enabeled now!\");\r\n            if(lockFlag){\r\n                require(!locked[_addr],\"you are locked!\");\r\n            }\r\n        }\r\n        _;\r\n    }\r\n \r\n}\r\n \r\ncontract EPCToken is StandardToken,Controlled {\r\n \r\n\t//账户集合\r\n\tmapping (address => uint256) public balanceOf;\r\n\tmapping (address => mapping (address => uint256)) internal allowed;\r\n\t\r\n\tfunction formatDecimals(uint256 _value) internal view returns (uint256 ) {\r\n        return _value * 10 ** uint256(decimals);\r\n    }\r\n\t\r\n\tconstructor() public {\r\n\t    name = \"Easy Pay\";\r\n        symbol = \"EPC\";\r\n\t    decimals = 8;\r\n        totalSupply = formatDecimals(66000);\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n \r\n    function transfer(address _to, uint256 _value) public transferAllowed(msg.sender) returns (bool success) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balanceOf[msg.sender]);\r\n \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n \r\n    function transferFrom(address _from, address _to, uint256 _value) public transferAllowed(_from) returns (bool success) {\r\n\t\trequire(_to != address(0));\r\n        require(_value <= balanceOf[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n \r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n \r\n}"
    }
  }
}