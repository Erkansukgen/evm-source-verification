{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "DaiVaultPermitDeposit.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\r\npragma solidity =0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface Dai {\r\n    function pull(address usr, uint256 wad) external;\r\n\r\n    function approve(address usr, uint256 wad) external returns (bool);\r\n\r\n    function permit(\r\n        address holder,\r\n        address spender,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        bool allowed,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\ninterface Vault {\r\n    function token() external view returns (address);\r\n\r\n    function deposit(uint256 amount, address recipient)\r\n        external\r\n        returns (uint256);\r\n}\r\n\r\ncontract DaiVaultPermitDeposit {\r\n    Vault public vault;\r\n    Dai public dai;\r\n    address constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n\r\n    struct Permit {\r\n        address holder;\r\n        address spender;\r\n        uint256 nonce;\r\n        uint256 expiry;\r\n        bool allowed;\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n    }\r\n\r\n    constructor(address _vault) public {\r\n        vault = Vault(_vault);\r\n        dai = Dai(vault.token());\r\n        require(address(dai) == DAI); // dev: wrong vault\r\n        dai.approve(address(vault), type(uint256).max);\r\n    }\r\n\r\n    function deposit(uint256 amount, Permit calldata permit)\r\n        public\r\n        returns (uint256)\r\n    {\r\n        dai.permit(\r\n            permit.holder,\r\n            permit.spender,\r\n            permit.nonce,\r\n            permit.expiry,\r\n            permit.allowed,\r\n            permit.v,\r\n            permit.r,\r\n            permit.s\r\n        );\r\n        dai.pull(permit.holder, amount);\r\n        return vault.deposit(amount, permit.holder);\r\n    }\r\n}"
    }
  }
}