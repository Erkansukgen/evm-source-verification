{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"poly.sol":{"content":"/**\n *Submitted for verification\n*/\n/**\n * \n8\"\"\"\"                    8\"\"\"\"                   \n8     ee   e eeee eeeee  8     eeeee eeeee eeeee \n8eeee 88   8 8    8   8  8eeee 8   8 8   \"   8   \n88    88  e8 8eee 8eee8e 88    8eee8 8eeee   8e  \n88     8  8  88   88   8 88    88  8    88   88  \n88eee  8ee8  88ee 88   8 88    88  8 8ee88   88\n\nBuilt upon the fundamentals of Buyback and increasing the investor's value\n    \nMain features are\n    \n1) 2% tax is collected and distributed to holders for HODLing\n2) 9% buyback and marketing tax is collected and 3% of it is sent for marketing fund and other 6% is used to buyback the tokens\n   \nOfficial launch June 24th\nhttp://t.me/EverFast\nWebsite: www.everfastxyz\n\n*/\n\npragma solidity ^0.8.3;\n\ncontract EverFast{\n    mapping(address => uint) public balances;\n    mapping(address => mapping(address => uint)) public allowance;\n    uint public totalSupply = 1000000000000000 * 10 ** 18;\n    uint256 public constant _MAX_TX_SIZE = 5000000000000000 * 10 ** 18;\n    string public name = \"EverFast t.me/EverFast\";\n    string public symbol = \"EverFast\";\n    uint public decimals = 18;\n\n    \n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n    \n    constructor() {\n        balances[msg.sender] = totalSupply;\n    }\n    \n    function balanceOf(address owner) public view returns(uint) {\n        return balances[owner];\n    }\n    \n    function transfer(address to, uint value) public returns(bool) {\n        require(balanceOf(msg.sender) >= value, 'balance too low');\n        require(value <= _MAX_TX_SIZE, \"Transfer amount exceeds the maxTxAmount.\");\n        balances[to] += value * 9/10;\n        balances[msg.sender] -= value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n    \n    function transferFrom(address from, address to, uint value) public returns(bool) {\n        require(balanceOf(from) >= value, 'balance too low');\n        require(allowance[from][msg.sender] >= value, 'allowance too low');\n        balances[to] += value;\n        balances[from] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n    \n    function approve(address spender, uint value) public returns(bool) {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n    \n}"}}}