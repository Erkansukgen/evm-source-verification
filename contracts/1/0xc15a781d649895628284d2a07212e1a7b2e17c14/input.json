{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Vow.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2019-11-14\n*/\n\n// hevm: flattened sources of /nix/store/8xb41r4qd0cjb63wcrxf1qmfg88p0961-dss-6fd7de0/src/vow.sol\npragma solidity =0.5.12;\n\n////// /nix/store/8xb41r4qd0cjb63wcrxf1qmfg88p0961-dss-6fd7de0/src/lib.sol\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.5.12; */\n\ncontract LibNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  usr,\n        bytes32  indexed  arg1,\n        bytes32  indexed  arg2,\n        bytes             data\n    ) anonymous;\n\n    modifier note {\n        _;\n        assembly {\n            // log an 'anonymous' event with a constant 6 words of calldata\n            // and four indexed topics: selector, caller, arg1 and arg2\n            let mark := msize                         // end of memory ensures zero\n            mstore(0x40, add(mark, 288))              // update free memory pointer\n            mstore(mark, 0x20)                        // bytes type data offset\n            mstore(add(mark, 0x20), 224)              // bytes size (padded)\n            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\n            log4(mark, 288,                           // calldata\n                 shl(224, shr(224, calldataload(0))), // msg.sig\n                 caller,                              // msg.sender\n                 calldataload(4),                     // arg1\n                 calldataload(36)                     // arg2\n                )\n        }\n    }\n}\n\n////// /nix/store/8xb41r4qd0cjb63wcrxf1qmfg88p0961-dss-6fd7de0/src/vow.sol\n/// vow.sol -- Dai settlement module\n\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.5.12; */\n\n/* import \"./lib.sol\"; */\n\ncontract FlopLike {\n    function kick(address gal, uint lot, uint bid) external returns (uint);\n    function cage() external;\n    function live() external returns (uint);\n}\n\ncontract FlapLike {\n    function kick(uint lot, uint bid) external returns (uint);\n    function cage(uint) external;\n    function live() external returns (uint);\n}\n\ncontract VatLike {\n    function dai (address) external view returns (uint);\n    function sin (address) external view returns (uint);\n    function heal(uint256) external;\n    function hope(address) external;\n    function nope(address) external;\n}\n\ncontract Vow is LibNote {\n    // --- Auth ---\n    mapping (address => uint) public wards;\n    function rely(address usr) external note auth { require(live == 1, \"Vow/not-live\"); wards[usr] = 1; }\n    function deny(address usr) external note auth { wards[usr] = 0; }\n    modifier auth {\n        require(wards[msg.sender] == 1, \"Vow/not-authorized\");\n        _;\n    }\n\n    // --- Data ---\n    VatLike public vat;\n    FlapLike public flapper;\n    FlopLike public flopper;\n\n    mapping (uint256 => uint256) public sin; // debt queue\n    uint256 public Sin;   // queued debt          [rad]\n    uint256 public Ash;   // on-auction debt      [rad]\n\n    uint256 public wait;  // flop delay\n    uint256 public dump;  // flop initial lot size  [wad]\n    uint256 public sump;  // flop fixed bid size    [rad]\n\n    uint256 public bump;  // flap fixed lot size    [rad]\n    uint256 public hump;  // surplus buffer       [rad]\n\n    uint256 public live;\n\n    // --- Init ---\n    constructor(address vat_, address flapper_, address flopper_) public {\n        wards[msg.sender] = 1;\n        vat     = VatLike(vat_);\n        flapper = FlapLike(flapper_);\n        flopper = FlopLike(flopper_);\n        vat.hope(flapper_);\n        live = 1;\n    }\n\n    // --- Math ---\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n\n    // --- Administration ---\n    function file(bytes32 what, uint data) external note auth {\n        if (what == \"wait\") wait = data;\n        else if (what == \"bump\") bump = data;\n        else if (what == \"sump\") sump = data;\n        else if (what == \"dump\") dump = data;\n        else if (what == \"hump\") hump = data;\n        else revert(\"Vow/file-unrecognized-param\");\n    }\n\n    function file(bytes32 what, address data) external note auth {\n        if (what == \"flapper\") {\n            vat.nope(address(flapper));\n            flapper = FlapLike(data);\n            vat.hope(data);\n        }\n        else if (what == \"flopper\") flopper = FlopLike(data);\n        else revert(\"Vow/file-unrecognized-param\");\n    }\n\n    // Push to debt-queue\n    function fess(uint tab) external note auth {\n        sin[now] = add(sin[now], tab);\n        Sin = add(Sin, tab);\n    }\n    // Pop from debt-queue\n    function flog(uint era) external note {\n        require(add(era, wait) <= now, \"Vow/wait-not-finished\");\n        Sin = sub(Sin, sin[era]);\n        sin[era] = 0;\n    }\n\n    // Debt settlement\n    function heal(uint rad) external note {\n        require(rad <= vat.dai(address(this)), \"Vow/insufficient-surplus\");\n        require(rad <= sub(sub(vat.sin(address(this)), Sin), Ash), \"Vow/insufficient-debt\");\n        vat.heal(rad);\n    }\n    function kiss(uint rad) external note {\n        require(rad <= Ash, \"Vow/not-enough-ash\");\n        require(rad <= vat.dai(address(this)), \"Vow/insufficient-surplus\");\n        Ash = sub(Ash, rad);\n        vat.heal(rad);\n    }\n\n    // Debt auction\n    function flop() external note returns (uint id) {\n        require(sump <= sub(sub(vat.sin(address(this)), Sin), Ash), \"Vow/insufficient-debt\");\n        require(vat.dai(address(this)) == 0, \"Vow/surplus-not-zero\");\n        Ash = add(Ash, sump);\n        id = flopper.kick(address(this), dump, sump);\n    }\n    // Surplus auction\n    function flap() external note returns (uint id) {\n        require(vat.dai(address(this)) >= add(add(vat.sin(address(this)), bump), hump), \"Vow/insufficient-surplus\");\n        require(sub(sub(vat.sin(address(this)), Sin), Ash) == 0, \"Vow/debt-not-zero\");\n        id = flapper.kick(bump, 0);\n    }\n\n    function cage() external note auth {\n        require(live == 1, \"Vow/not-live\");\n        live = 0;\n        Sin = 0;\n        Ash = 0;\n        flapper.cage(vat.dai(address(flapper)));\n        flopper.cage();\n        vat.heal(min(vat.dai(address(this)), vat.sin(address(this))));\n    }\n}\n"
    }
  }
}