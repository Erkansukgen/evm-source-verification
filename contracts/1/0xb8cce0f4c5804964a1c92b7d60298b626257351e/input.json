{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Repeater.sol": {
      "content": "pragma solidity 0.8.1;\r\n\r\n\r\n/** @title Repeater\r\n *  This contract repeats calls on the owner request.\r\n */\r\ncontract Repeater {\r\n    address owner = msg.sender;\r\n    \r\n/** @dev Call `_target` with `_data`\r\n *  @param _target The contract to call.\r\n *  @param _data The data to send to the contract.\r\n */    \r\n    function repeat(address _target, bytes calldata _data) external {\r\n        require(msg.sender == owner);\r\n        _target.call(_data);\r\n    }\r\n\r\n/** @dev Call `_target` with `_data` sending `_value` wei.\r\n *  @param _target The contract to call.\r\n *  @param _data The data to send to the contract.\r\n *  @param _value The amount of wei to send.\r\n */\r\n    function repeatWithValue(address _target, bytes calldata _data, uint _value) external {\r\n        require(msg.sender == owner);\r\n        _target.call{value: _value}(_data);\r\n    }\r\n    \r\n    receive() external payable {}\r\n}\r\n\r\n/** @title Master\r\n *  This contract creates repeaters and make them perform some actions.\r\n */\r\ncontract Master {\r\n    address public owner = msg.sender;\r\n    Repeater[] public repeaters;\r\n    \r\n    function changeOwner(address _newOwner) external {\r\n        require(msg.sender == owner);\r\n        owner = _newOwner;\r\n    }\r\n    \r\n    /** @dev Create `_amount` repeaters.\r\n     *  @param _amount The amount of repeaters to create.\r\n     */\r\n    function addRepeaters(uint _amount) external {\r\n        require(msg.sender == owner);\r\n        for (uint i; i<_amount; ++i) {\r\n            repeaters.push(new Repeater());\r\n        }\r\n    }\r\n    \r\n    /** @dev Make repeaters from `_start` to `_end` (included) call `_target` with `_data`.\r\n     *  @param _start The first repeater ID.\r\n     *  @param _end The last repeater ID.\r\n     *  @param _target The contract to be called by the repeaters.\r\n     *  @param _data The data the repeaters will send to the contract.\r\n     */\r\n    function say(uint _start, uint _end, address _target, bytes calldata _data) external {\r\n        require(msg.sender == owner);\r\n        for (uint i=_start; i<=_end; ++i) {\r\n            repeaters[i].repeat(_target, _data);\r\n        }\r\n    }\r\n\r\n    /** @dev Make repeaters from `_start` to `_end` (included) call `_target` with `_data` sending `_value` wei.\r\n     *  @param _start The first repeater ID.\r\n     *  @param _end The last repeater ID.\r\n     *  @param _target The contract to be called by the repeaters.\r\n     *  @param _data The data the repeaters will send to the contract.\r\n     *  @param _value The amount of wei to send.\r\n     */\r\n    function sayWithValue(uint _start, uint _end, address _target, bytes calldata _data, uint _value) external {\r\n        require(msg.sender == owner);\r\n        for (uint i=_start; i<=_end; ++i) {\r\n            repeaters[i].repeatWithValue(_target, _data, _value);\r\n        }\r\n    }    \r\n    \r\n    /** @dev Return the list of repeaters.\r\n     *  @return The list of repeaters.\r\n     */\r\n    function getRepeatersAddresses() external view returns(Repeater[] memory)  {\r\n        return repeaters;\r\n    }\r\n    \r\n    \r\n}\r\n \r\n \r\n"
    }
  }
}