{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\ncontract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/libs/SettingsLib.sol": {
      "content": "//SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.6.12;\n\nlibrary SettingsLib {\n    /**\n        It defines a setting. It includes: value, min, and max values.\n     */\n    struct Setting {\n        uint256 value;\n        uint256 min;\n        uint256 max;\n        bool exists;\n    }\n\n    /**\n        @notice It creates a new setting given a name, min and max values.\n        @param value initial value for the setting.\n        @param min min value allowed for the setting.\n        @param max max value allowed for the setting.\n     */\n    function create(\n        Setting storage self,\n        uint256 value,\n        uint256 min,\n        uint256 max\n    ) internal {\n        requireNotExists(self);\n        require(value >= min, \"VALUE_MUST_BE_GT_MIN_VALUE\");\n        require(value <= max, \"VALUE_MUST_BE_LT_MAX_VALUE\");\n        self.value = value;\n        self.min = min;\n        self.max = max;\n        self.exists = true;\n    }\n\n    /**\n        @notice Checks whether the current setting exists or not.\n        @dev It throws a require error if the setting already exists.\n        @param self the current setting.\n     */\n    function requireNotExists(Setting storage self) internal view {\n        require(!self.exists, \"SETTING_ALREADY_EXISTS\");\n    }\n\n    /**\n        @notice Checks whether the current setting exists or not.\n        @dev It throws a require error if the current setting doesn't exist.\n        @param self the current setting.\n     */\n    function requireExists(Setting storage self) internal view {\n        require(self.exists, \"SETTING_NOT_EXISTS\");\n    }\n\n    /**\n        @notice It updates a current setting.\n        @dev It throws a require error if:\n            - The new value is equal to the current value.\n            - The new value is not lower than the max value.\n            - The new value is not greater than the min value\n        @param self the current setting.\n        @param newValue the new value to set in the setting.\n     */\n    function update(Setting storage self, uint256 newValue) internal returns (uint256 oldValue) {\n        requireExists(self);\n        require(self.value != newValue, \"NEW_VALUE_REQUIRED\");\n        require(newValue >= self.min, \"NEW_VALUE_MUST_BE_GT_MIN_VALUE\");\n        require(newValue <= self.max, \"NEW_VALUE_MUST_BE_LT_MAX_VALUE\");\n        oldValue = self.value;\n        self.value = newValue;\n    }\n\n    /**\n        @notice It removes a current setting.\n        @param self the current setting to remove.\n     */\n    function remove(Setting storage self) internal {\n        requireExists(self);\n        self.value = 0;\n        self.min = 0;\n        self.max = 0;\n        self.exists = false;\n    }\n}\n"
    },
    "contracts/roles/IRolesManager.sol": {
      "content": "//SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.6.12;\n\ninterface IRolesManager {\n    event MaxMultiItemsUpdated(address indexed updater, uint8 oldValue, uint8 newValue);\n\n    function setMaxMultiItems(uint8 newMaxMultiItems) external;\n\n    function multiGrantRole(bytes32 role, address[] calldata accounts) external;\n\n    function multiRevokeRole(bytes32 role, address[] calldata accounts) external;\n\n    function consts() external view returns (address);\n\n    function maxMultiItems() external view returns (uint8);\n\n    function requireHasRole(bytes32 role, address account) external view;\n\n    function requireHasRole(\n        bytes32 role,\n        address account,\n        string calldata message\n    ) external view;\n}\n"
    },
    "contracts/roles/RolesManagerConsts.sol": {
      "content": "//SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.6.12;\n\ncontract RolesManagerConsts {\n    /**\n        @notice It is the AccessControl.DEFAULT_ADMIN_ROLE role.\n     */\n    bytes32 public constant OWNER_ROLE = keccak256(\"\");\n\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    bytes32 public constant CONFIGURATOR_ROLE = keccak256(\"CONFIGURATOR_ROLE\");\n\n    bytes32 public constant VAULT_CONFIGURATOR_ROLE = keccak256(\"VAULT_CONFIGURATOR_ROLE\");\n}\n"
    },
    "contracts/settings/IPlatformSettings.sol": {
      "content": "//SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/SettingsLib.sol\";\n\ninterface IPlatformSettings {\n    event PlatformPaused(address indexed pauser);\n\n    event PlatformUnpaused(address indexed unpauser);\n\n    event PlatformSettingCreated(\n        bytes32 indexed name,\n        address indexed creator,\n        uint256 minValue,\n        uint256 value,\n        uint256 maxValue\n    );\n\n    event PlatformSettingRemoved(bytes32 indexed name, address indexed remover, uint256 value);\n\n    event PlatformSettingUpdated(\n        bytes32 indexed name,\n        address indexed remover,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    function createSetting(\n        bytes32 name,\n        uint256 value,\n        uint256 min,\n        uint256 max\n    ) external;\n\n    function removeSetting(bytes32 name) external;\n\n    function getSetting(bytes32 name) external view returns (SettingsLib.Setting memory);\n\n    function getSettingValue(bytes32 name) external view returns (uint256);\n\n    function hasSetting(bytes32 name) external view returns (bool);\n\n    function rolesManager() external view returns (address);\n\n    function isPaused() external view returns (bool);\n\n    function requireIsPaused() external view;\n\n    function requireIsNotPaused() external view;\n\n    function pause() external;\n\n    function unpause() external;\n}\n"
    },
    "contracts/settings/PlatformSettings.sol": {
      "content": "//SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n// Libraries\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"../libs/SettingsLib.sol\";\n\n// Contracts\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"../roles/RolesManagerConsts.sol\";\n\n// Interfaces\nimport \"./IPlatformSettings.sol\";\nimport \"../roles/IRolesManager.sol\";\n\ncontract PlatformSettings is IPlatformSettings {\n    using Address for address;\n    using SettingsLib for SettingsLib.Setting;\n\n    /** Constants */\n\n    /* State Variables */\n\n    /**\n        @notice This mapping represents the platform settings where:\n\n        - The key is the platform setting name.\n        - The value is the platform setting. It includes the value, minimum and maximum values.\n     */\n    mapping(bytes32 => SettingsLib.Setting) public settings;\n\n    bool public paused;\n\n    address public override rolesManager;\n\n    /** Modifiers */\n\n    modifier onlyPauser(address account) {\n        _rolesManager().requireHasRole(\n            _rolesManagerConsts().PAUSER_ROLE(),\n            account,\n            \"SENDER_ISNT_PAUSER\"\n        );\n        _;\n    }\n\n    modifier onlyConfigurator(address account) {\n        _rolesManager().requireHasRole(\n            _rolesManagerConsts().CONFIGURATOR_ROLE(),\n            account,\n            \"SENDER_ISNT_CONFIGURATOR\"\n        );\n        _;\n    }\n\n    /* Constructor */\n\n    constructor(address rolesManagerAddress) public {\n        require(rolesManagerAddress.isContract(), \"ROLES_MANAGER_MUST_BE_CONTRACT\");\n        rolesManager = rolesManagerAddress;\n    }\n\n    /** External Functions */\n\n    /**\n        @notice It creates a new platform setting given a name, value, min and max values.\n        @param name setting name to create.\n        @param value the initial value for the given setting name.\n        @param min the min value for the setting.\n        @param max the max value for the setting.\n     */\n    function createSetting(\n        bytes32 name,\n        uint256 value,\n        uint256 min,\n        uint256 max\n    ) external override onlyConfigurator(msg.sender) {\n        require(name != \"\", \"NAME_MUST_BE_PROVIDED\");\n        settings[name].create(value, min, max);\n\n        emit PlatformSettingCreated(name, msg.sender, value, min, max);\n    }\n\n    /**\n        @notice It updates an existent platform setting given a setting name.\n        @notice It only allows to update the value (not the min or max values).\n        @notice In case you need to update the min or max values, you need to remove it, and create it again.\n        @param settingName setting name to update.\n        @param newValue the new value to set.\n     */\n    function updateSetting(bytes32 settingName, uint256 newValue)\n        external\n        onlyConfigurator(msg.sender)\n    {\n        uint256 oldValue = settings[settingName].update(newValue);\n\n        emit PlatformSettingUpdated(settingName, msg.sender, oldValue, newValue);\n    }\n\n    /**\n        @notice Removes a current platform setting given a setting name.\n        @param name to remove.\n     */\n    function removeSetting(bytes32 name) external override onlyConfigurator(msg.sender) {\n        uint256 oldValue = settings[name].value;\n        settings[name].remove();\n\n        emit PlatformSettingRemoved(name, msg.sender, oldValue);\n    }\n\n    function pause() external override onlyPauser(msg.sender) {\n        require(!paused, \"PLATFORM_ALREADY_PAUSED\");\n\n        paused = true;\n\n        emit PlatformPaused(msg.sender);\n    }\n\n    function unpause() external override onlyPauser(msg.sender) {\n        require(paused, \"PLATFORM_ISNT_PAUSED\");\n\n        paused = false;\n\n        emit PlatformUnpaused(msg.sender);\n    }\n\n    /* View Functions */\n\n    function requireIsPaused() external view override {\n        require(paused, \"PLATFORM_ISNT_PAUSED\");\n    }\n\n    function requireIsNotPaused() external view override {\n        require(!paused, \"PLATFORM_IS_PAUSED\");\n    }\n\n    /**\n        @notice It gets the current platform setting for a given setting name\n        @param name to get.\n        @return the current platform setting.\n     */\n    function getSetting(bytes32 name) external view override returns (SettingsLib.Setting memory) {\n        return _getSetting(name);\n    }\n\n    /**\n        @notice It gets the current platform setting value for a given setting name\n        @param name to get.\n        @return the current platform setting value.\n     */\n    function getSettingValue(bytes32 name) external view override returns (uint256) {\n        return _getSetting(name).value;\n    }\n\n    /**\n        @notice It tests whether a setting name is already configured.\n        @param name setting name to test.\n        @return true if the setting is already configured. Otherwise it returns false.\n     */\n    function hasSetting(bytes32 name) external view override returns (bool) {\n        return _getSetting(name).exists;\n    }\n\n    /**\n        @notice It gets whether the platform is paused or not.\n        @return true if platform is paused. Otherwise it returns false.\n     */\n    function isPaused() external view override returns (bool) {\n        return paused;\n    }\n\n    /** Internal functions */\n\n    /**\n        @notice It gets the platform setting for a given setting name.\n        @param name the setting name to look for.\n        @return the current platform setting for the given setting name.\n     */\n    function _getSetting(bytes32 name) internal view returns (SettingsLib.Setting memory) {\n        return settings[name];\n    }\n\n    function _rolesManager() internal view returns (IRolesManager) {\n        return IRolesManager(rolesManager);\n    }\n\n    function _rolesManagerConsts() internal view returns (RolesManagerConsts) {\n        return RolesManagerConsts(_rolesManager().consts());\n    }\n\n    /** Private functions */\n}\n"
    }
  }
}