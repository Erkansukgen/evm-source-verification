{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "CharlieSavingsBond.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\ncontract CharlieSavingsBond {\r\n    address public charlie;\r\n    uint256 public blockNumberEligibleToWithdraw;\r\n\r\n    constructor(address _charlie, uint256 _blockNumberEligibleToWithdraw){\r\n        charlie = _charlie;\r\n        blockNumberEligibleToWithdraw = _blockNumberEligibleToWithdraw;\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function withdraw() external payable {\r\n        require(msg.sender == charlie, 'Only Charlie can withdraw');\r\n        require(block.number >= blockNumberEligibleToWithdraw, 'Charlie is still a baby and cannot withdraw yet');\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n}"
    }
  }
}