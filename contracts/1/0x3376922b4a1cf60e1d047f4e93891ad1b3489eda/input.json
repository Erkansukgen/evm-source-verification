{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/DeloreanTest.sol": {
      "content": "\n// File: @openzeppelin/contracts/proxy/Initializable.sol\n\n\npragma solidity >=0.4.24 <0.7.0;\n\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n * \n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n * \n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        // extcodesize checks the size of the code stored in an address, and\n        // address returns the current address. Since the code is still not\n        // deployed when running a constructor, any checks on its code size will\n        // yield zero, making it an effective way to detect if a contract is\n        // under construction or not.\n        address self = address(this);\n        uint256 cs;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { cs := extcodesize(self) }\n        return cs == 0;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n\n\npragma solidity ^0.6.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: contracts/HarpoonPayloadBase.sol\n\npragma solidity ^ 0.6 .0;\n\n\n\n\n\ninterface IUniswapV2Pair {\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n}\n\ninterface IUniswapV2Router01 {\n    function WETH() external pure returns(address);\n\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns(uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns(uint amountETH);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n}\n\ninterface IWETH {\n    function withdraw(uint wad) external;\n}\n\ninterface IDapp {\n    function buyFor(uint256 _amount, address _user) external returns(uint256);\n}\n\ncontract HarpoonPayloadBase is Initializable {\n    using SafeERC20 for IERC20;\n\n    address public constant uniswapRouterV2 = address(\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n    );\n\n    // Hook into the dapp, depositing target tokens\n    function _hookDapp(address _target, address _dapp, uint _amount, address _user)\n    internal virtual {\n        IERC20(_target).safeApprove(_dapp, _amount);\n        IDapp(_dapp).buyFor(_amount, _user);\n    }\n\n    // Hook into Uniswap, dumping the yield tokens for target tokens\n    function _hookUniswap(address _operator, address _yield, address _dapp, address _target)\n    internal {\n        //credit: https://github.com/flamincome/contracts/blob/bfbee3877aa7524408363516ceb2aab0d4527352/implementations/strategy/StrategyBaselineCarbonUniswapBTC.sol#L57\n        address weth = IUniswapV2Router02(uniswapRouterV2).WETH();\n\n        // if the token we're swapping FROM is not WETH\n        if(_yield != weth) {\n            uint256 yieldBalance = IERC20(_yield).balanceOf(address(this));\n        \n            IERC20(_yield).safeApprove(uniswapRouterV2, 0);\n            IERC20(_yield).safeApprove(uniswapRouterV2, yieldBalance);\n            address[] memory path1 = new address[](2);\n            path1[0] = _yield;\n            path1[1] = weth;\n            IUniswapV2Router02(uniswapRouterV2).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                yieldBalance,\n                0,\n                path1,\n                address(this),\n                block.timestamp\n            );\n        }\n\n        uint256 wethAmount = IERC20(weth).balanceOf(address(this));\n        IERC20(weth).safeApprove(uniswapRouterV2, 0);\n        IERC20(weth).safeApprove(uniswapRouterV2, wethAmount);\n        address[] memory path2 = new address[](2);\n        path2[0] = weth;\n        path2[1] = _target;\n        IUniswapV2Router02(uniswapRouterV2).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            wethAmount,\n            0,\n            path2,\n            address(this),\n            block.timestamp\n        );\n\n        if(_dapp != address(0x0))\n            _hookDapp(_target, _dapp, IERC20(_target).balanceOf(address(this)), _operator);\n    }\n\n    // Hook into Uniswap, dumping half of the yield tokens and compounding LP positions\n    function _hookCompound(address _lpToken, address _yield)\n    internal {\n        //credit: https://github.com/flamincome/contracts/blob/bfbee3877aa7524408363516ceb2aab0d4527352/implementations/strategy/StrategyBaselineCarbonUniswapBTC.sol#L57\n        address weth = IUniswapV2Router02(uniswapRouterV2).WETH();\n        uint256 yieldBalance = IERC20(_yield).balanceOf(address(this));\n        uint256 dumpAmount = yieldBalance / 2;\n\n        address underlyingToken;\n\n        if(IUniswapV2Pair(_lpToken).token0() == weth)\n            underlyingToken = IUniswapV2Pair(_lpToken).token1();\n        else {\n            underlyingToken = IUniswapV2Pair(_lpToken).token0();\n        }\n        \n        IERC20(_yield).safeApprove(uniswapRouterV2, 0);\n        IERC20(_yield).safeApprove(uniswapRouterV2, dumpAmount);\n        address[] memory path1 = new address[](2);\n        path1[0] = _yield;\n        path1[1] = weth;\n        IUniswapV2Router02(uniswapRouterV2).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            dumpAmount,\n            0,\n            path1,\n            address(this),\n            block.timestamp\n        );\n\n        // we now have 50% WETH and 50% yields\n\n        uint256 wethBalance = IERC20(weth).balanceOf(address(this));\n        // IWETH(weth).withdraw(wethBalance);\n\n        // we now have 50% ETH (raw) and 50% yields \n\n        // IF the yield is different than the underlying LP token, we need to swap the yields to the underlying token\n        if(underlyingToken != _yield) {\n            yieldBalance = IERC20(_yield).balanceOf(address(this));\n        \n            IERC20(_yield).safeApprove(uniswapRouterV2, 0);\n            IERC20(_yield).safeApprove(uniswapRouterV2, yieldBalance);\n            address[] memory path2 = new address[](2);\n            path2[0] = _yield;\n            path2[1] = weth;\n            IUniswapV2Router02(uniswapRouterV2).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                yieldBalance,\n                0,\n                path2,\n                address(this),\n                block.timestamp\n            );\n\n            uint ethToSwap = IERC20(weth).balanceOf(address(this)) - wethBalance; \n            \n            IERC20(weth).safeApprove(uniswapRouterV2, 0);\n            IERC20(weth).safeApprove(uniswapRouterV2, ethToSwap);\n            address[] memory path3 = new address[](2);\n            path3[0] = weth;\n            path3[1] = underlyingToken;\n            IUniswapV2Router02(uniswapRouterV2).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                ethToSwap,\n                0,\n                path3,\n                address(this),\n                block.timestamp\n            );\n        }\n\n        // we now have 50% WETH and 50% underlying tokens required for LP compounding\n\n        wethBalance = IERC20(weth).balanceOf(address(this));\n\n        uint256 underlyingTokenBalance = IERC20(underlyingToken).balanceOf(address(this));\n\n        IERC20(weth).safeApprove(uniswapRouterV2, 0);\n        IERC20(weth).safeApprove(uniswapRouterV2, wethBalance);\n\n        IERC20(underlyingToken).safeApprove(uniswapRouterV2, 0);\n        IERC20(underlyingToken).safeApprove(uniswapRouterV2, underlyingTokenBalance);\n\n        IUniswapV2Router02(uniswapRouterV2).addLiquidity(\n            underlyingToken,\n            weth,\n            underlyingTokenBalance,\n            wethBalance,\n            0,\n            0,\n            address(this),\n            block.timestamp\n        );\n    }\n\n\n    // Initializer, only called once and sets the launcher contract address for access control\n    function initialize(address _launcher)\n    external virtual {}\n\n    // Deposit LP tokens to the target farm\n    function deposit(address _lpToken, address _farm, uint _amount, uint _pid)\n    external virtual {}\n\n    // Claim all yields from the target farm\n    function claim(address _operator, address _farm, address _yield, address _dapp, address _target, uint _pid)\n    external virtual {}\n\n    function compound(address _lpToken, address _farm, address _yield, uint _pid)\n    external virtual {}\n\n    // Withdraw LP tokens from the target farm\n    function exit(address _operator, address _lpToken, address _farm, address _yield, address _dapp, address _target, uint _pid)\n    external virtual {}\n\n    function emergencyExit(address _operator, address _lpToken, address _farm, address _yield, address _dapp, address _target, uint _pid)\n    external virtual {}\n\n    // View function to inspect target farm userInfo for this harpoon\n    function inspect(address _farm, uint _pid)\n    external virtual view returns(uint, uint, uint) {}\n}\n\n// File: contracts/payloads/DeloreanPayload.sol\n\npragma solidity ^0.6.0;\n\n\ninterface IDelorean {\n    function stake(uint256 amount) external;\n    function withdraw(uint256 amount) external;\n    function getReward() external;\n}\n\ncontract DeloreanPayload2 is HarpoonPayloadBase {\n    // Address of the launcher used for access control\n    address private launcher;\n\n    // Modifier that only allows calls from the launcher contract\n    modifier onlyLauncher() {\n        require(msg.sender == launcher, \"\");\n        _;\n    }\n\n    // Initializer, only called once and sets the launcher contract address for access control\n    function initialize (address _launcher)\n    external override initializer {\n        launcher = _launcher;\n    }\n\n    // Deposit LP tokens to the farm\n    function deposit(address _lpToken, address _farm, uint _amount, uint _pid)\n    external override onlyLauncher {\n        // Approve the tokens needed to deposit to the farm\n        IERC20(_lpToken).approve(_farm, _amount);\n\n        // Deposit the tokens into the farm\n        IDelorean(_farm).stake(_amount);\n    }\n\n    // Claim all yields from the farm, swap it for target tokens\n        // IF dapp address supplied, then we call _hookDapp(), expecting a contract that implements `buyFor(uint256 _amount, address _user)`\n    function claim(address _operator, address _farm, address _yield, address _dapp, address _target, uint _pid)\n    external override onlyLauncher {\n        // Withdraw farm yields\n        IDelorean(_farm).getReward();\n\n        // Hook into uniswap, and dapp if specified, dump all collected yields\n        _hookUniswap(_operator, _yield, _dapp, _target);\n\n        //if we didnt hook into a dapp\n        if(_dapp == address(0x0))\n            // transfer the _target tokens to the _operator\n            IERC20(_target).safeTransfer(_operator, IERC20(_target).balanceOf(address(this)));\n    }\n\n    function compound(address _lpToken, address _farm, address _yield, uint _pid)\n    external override onlyLauncher {\n         // Withdraw farm yields\n        IDelorean(_farm).getReward();\n\n        // Compound farm yields\n        _hookCompound(_lpToken, _yield);\n\n        uint lpBalance = IERC20(_lpToken).balanceOf(address(this));\n\n        // Approve the tokens needed to deposit to the farm\n        IERC20(_lpToken).approve(_farm, lpBalance);\n\n        // Deposit the tokens into the farm\n        IDelorean(_farm).stake(lpBalance);\n    }\n\n    // Withdraw LP tokens from the farm, claim and dump yields\n    // this function now ignores the _operator parameter, to prevent accidental loss of LP tokens\n    // it returns it to the launcher, which is the sole owner of this contract\n    // https://etherscan.io/tx/0x972e6ba1d9fbaf5523623d519fd26145279382ea38434fb7feee16073d3bc028\n    function exit(address _operator, address _lpToken, address _farm, address _yield, address _dapp, address _target, uint _pid)\n    external override onlyLauncher {\n        // Get the current balance of LP tokens deposited to the farm\n        uint currentBalance = IERC20(_farm).balanceOf(address(this));\n\n        // Withdraw the LP tokens from the farm\n        IDelorean(_farm).withdraw(currentBalance);\n\n        // Hook into uniswap, and dapp if specified, dump all collected yields\n        _hookUniswap(launcher, _yield, _dapp, _target);\n\n        //if we didnt hook into a dapp\n        if(_dapp == address(0x0))\n            // transfer the _target tokens to the launcher\n            IERC20(_target).safeTransfer(launcher, IERC20(_target).balanceOf(address(this)));\n\n        // Return the LP tokens to the launcher\n        IERC20(_lpToken).safeTransfer(launcher, currentBalance);\n    }\n\n    // this function now ignores the _operator parameter, to prevent accidental loss of LP tokens\n    // it returns it to the launcher, which is the sole owner of this contract\n    // https://etherscan.io/tx/0x972e6ba1d9fbaf5523623d519fd26145279382ea38434fb7feee16073d3bc028\n    function emergencyExit(address _operator, address _lpToken, address _farm, address _yield, address _dapp, address _target, uint _pid)\n    external override onlyLauncher {\n        // Get the current balance of LP tokens deposited to the farm\n        uint currentBalance = IERC20(_farm).balanceOf(address(this));\n\n        // Withdraw the LP tokens from the farm\n        IDelorean(_farm).withdraw(currentBalance);\n\n         // transfer the _yield tokens to the launcher\n        IERC20(_yield).safeTransfer(launcher, IERC20(_yield).balanceOf(address(this)));\n\n        // Return the LP tokens to the launcher\n        IERC20(_lpToken).safeTransfer(launcher, currentBalance); \n    }\n\n    // View function to inspect farm userInfo for this harpoon\n    function inspect(address _farm, uint _pid)\n    external view override returns (uint, uint, uint) {\n        // uint[2] memory userInfo;\n\n        // (userInfo[0], userInfo[1]) = IMasterChef(_farm).userInfo(_pid, address(this));\n\n        return (IERC20(_farm).balanceOf(address(this)), 0, 0);\n    }\n}\n"
    }
  }
}