{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/DharmaSmartWalletImplementationV9Staging.sol":{"content":"pragma solidity 0.6.10; // optimization runs: 200, evm version: istanbul\n\n\ninterface IERC20 {\n  function balanceOf(address) external view returns (uint256);\n  function transfer(address, uint256) external returns (bool);\n}\n\n\ncontract TradeReserveEtherReceiverStaging {\n  address payable internal constant _TRADE_RESERVE_STAGING = (\n    0x2040F2f2bB228927235Dc24C33e99E3A0a7922c1\n  );\n    \n  receive() external payable {}\n  \n  function settleEther() external {\n    (bool ok,) = _TRADE_RESERVE_STAGING.call{\n      value: address(this).balance\n    }(\"\");\n\n    if (!ok) {\n      assembly {\n        returndatacopy(0, 0, returndatasize())\n        revert(0, returndatasize())\n      }\n    }\n  }\n  \n  function settleERC20(IERC20 token) external {\n    bool ok = token.transfer(\n      _TRADE_RESERVE_STAGING, token.balanceOf(address(this))\n    );\n    \n    require(ok, \"Token transfer failed.\");\n  }\n}"}}}