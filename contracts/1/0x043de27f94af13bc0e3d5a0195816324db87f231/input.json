{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/eth_game_3day_erc20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma experimental ABIEncoderV2;\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n\n        return c;\n    }\n}\n\ncontract ETH_3Day {\n    using SafeMath for uint256;\n    uint256 constant public CONTRACT_BALANCE_STEP = 3;\n    address public manager;\n    uint256 public day = 3 days;\n    uint256 public rechargeTime;\n    uint256 public minAmount = 1 ether;\n    uint256 public percentage = 900;\n    uint256 public totalUsers;\n    \n    address public ERC20;\n    \n    struct RechargeInfo{\n        address rec_addr;\n        uint256 rec_value;\n        uint256 rec_time;\n    }\n    RechargeInfo[] public rechargeAddress;\n    struct UserInfo {\n\t\taddress   referrer;   \n        address[] directPush; \n        uint256 amountWithdrawn;\n        uint256 distributionIncome72;\n    }\n    mapping(address => UserInfo) public user;\n    mapping(address => uint256) public balance;\n    mapping(address => mapping(address => bool)) public userDireMap;\n    \n    constructor(address _token)public{\n        manager = msg.sender;\n        ERC20 = _token;\n     }\n    \n    // 充值\n    function deposit(address referrer,uint256 value)  public {\n        require(value >= minAmount,\"Top up cannot be less than 1 eth\");\n        // 验证72小时-分钱\n        distribution72();\n        \n        IERC20(ERC20).transferFrom(msg.sender,address(this),value);\n        UserInfo storage u = user[msg.sender];\n        //  当前用户没有上    &&      推荐人 不能是 自己\n\t\tif (u.referrer == address(0) && referrer != msg.sender) {\n\t\t\t// 添加上级\n            u.referrer = referrer;\n            if (userDireMap[referrer][msg.sender] == false){\n                // 给上级添加当前下级\n                user[referrer].directPush.push(msg.sender);\n                userDireMap[referrer][msg.sender] = true;\n            }\n\t\t}\n\t\t\n\t\tif (balance[msg.sender] == 0){\n\t\t    totalUsers = totalUsers.add(1);\n\t\t}\n\t\t// 充值\n\t\tbalance[msg.sender] = balance[msg.sender].add(value);\n\t\trechargeAddress.push(RechargeInfo({rec_addr:msg.sender,rec_value:value,rec_time:block.timestamp}));\n\t\trechargeTime = block.timestamp;\n    }\n    \n    // 提币\n    function withdraw(uint256 value) public {\n        require(value > 0 && directPushMultiple(msg.sender) >= 3,\"3 times withdrawal\");\n        // 验证是否有足够提取额度\n        uint256 count = availableQuantity(msg.sender);\n        require(count >= value,\"Not enough quota\");\n        // 提币\n        IERC20(ERC20).transfer(msg.sender,value);\n        user[msg.sender].amountWithdrawn = user[msg.sender].amountWithdrawn.add(value);\n    }\n    \n    // pool 总量\n    function getPoolETH() view public returns(uint256){\n        return IERC20(ERC20).balanceOf(address(this));\n    }\n    \n    // 充值总笔数\n    function getRecTotal() view public returns(uint256){\n        return rechargeAddress.length;\n    }\n    \n    // 最后10笔交易\n    function getRec10() view public returns(RechargeInfo[] memory){\n        uint256 l = rechargeAddress.length;\n        uint256 a = 0;\n        uint256 i = 0;\n        if (rechargeAddress.length>10){\n            l = 10;\n            a = rechargeAddress.length.sub(10);\n        }\n        RechargeInfo[] memory data = new RechargeInfo[](l);\n        for (;a < rechargeAddress.length; a++){\n            data[i] = rechargeAddress[a];\n            i = i+1;\n        }\n        return data;\n    }\n    \n    // 超过72小时分币\n    function distribution72() public {\n        if (isTime() == false){return;}\n        uint256 a = 0;\n        if (rechargeAddress.length>50){\n            a = rechargeAddress.length.sub(50);\n        }\n        uint256 total = (IERC20(ERC20).balanceOf(address(this)).mul(percentage)).div(uint256(1000));\n        for (;a < rechargeAddress.length; a++){\n            user[rechargeAddress[a].rec_addr].distributionIncome72 = user[rechargeAddress[a].rec_addr].distributionIncome72.add(total.div(100));\n        }\n        return;\n    }\n    \n    // 当前时间是否大于 72 小时\n    function isTime()view public returns(bool) {\n        if ((block.timestamp.sub(rechargeTime)) >= day && rechargeTime != 0){\n            return true;\n        }\n        return false;\n    }\n    \n    // 直推倍数\n    function directPushMultiple(address addr) view public isAddress(addr) returns(uint256) {\n        if(balance[addr] == 0){\n            return 0;\n        }\n        return getDirectTotal(addr).div(balance[addr]);\n    }\n    \n    // 最大收益\n    function getMaxIncome(address addr) view public isAddress(addr) returns(uint256){\n        return directPushMultiple(addr).mul(balance[addr]);\n    }\n    \n    // 当前收益\n    function getIncome(address addr) view public isAddress(addr) returns(uint256){\n        uint256 multiple = directPushMultiple(addr);\n        if (multiple == 0){\n            return 0;\n        }\n        if (multiple > 3){\n            multiple = 3;\n        }\n        return balance[addr].mul(multiple);\n    }\n    \n    // 当前已提取数量\n    function numberWithdrawn(address addr) view public isAddress(addr) returns(uint256) {\n        return user[addr].amountWithdrawn;\n    }\n    \n    // 当前可提取数量\n    function availableQuantity(address addr) view public isAddress(addr) returns(uint256) {\n        if (directPushMultiple(addr) < 3){\n            return 0;\n        }\n        return getIncome(addr).sub(numberWithdrawn(addr));\n    }\n    \n    // 追投计算  (直推总额 - (本金 * 3)) / 3                 追投数量，获得金额\n    function additionalThrow(address addr) view public isAddress(addr) returns(uint256,uint256){\n        // 直推总额\n        uint256 dirTotal = getDirectTotal(addr);\n        // 用户当前收益\n        uint256 userTotal = getIncome(addr);\n        // 追投数量\n        uint256 ztAmount = (dirTotal.sub(userTotal)).div(CONTRACT_BALANCE_STEP);\n        // uint256 t = ztAmount.div(CONTRACT_BALANCE_STEP);\n        return (ztAmount,ztAmount.mul(CONTRACT_BALANCE_STEP));\n    }\n    \n    // 获取下级充值总额\n    function getDirectTotal(address addr) view public isAddress(addr) returns(uint256) {\n        UserInfo memory u = user[addr];\n        if (u.directPush.length == 0){return (0);}\n        uint256 total;\n        for (uint256 i= 0; i<u.directPush.length;i++){\n            total += balance[u.directPush[i]];\n        }\n        return (total);\n    }\n    \n    // 72收益领取\n    function distributionIncome72()public{\n        require(user[msg.sender].distributionIncome72 > 0);\n        IERC20(ERC20).transfer(msg.sender,user[msg.sender].distributionIncome72);\n    }\n    \n    // 获取用户下级\n    function getDirectLength(address addr) view public isAddress(addr) returns(uint256){\n        return user[addr].directPush.length;\n    }\n    \n    // Owner 提币\n    function ownerWitETH(uint256 value) public onlyOwner{\n        require(getPoolETH() >= value);\n        IERC20(ERC20).transfer(msg.sender,value);\n    }\n    \n    // 权限转移\n    function ownerTransfer(address newOwner) public onlyOwner isAddress(newOwner) {\n        manager = newOwner;\n    }\n    \n    modifier isAddress(address addr) {\n        require(addr != address(0));\n        _;\n    }\n    \n    modifier onlyOwner {\n        require(manager == msg.sender);\n        _;\n    }\n\n}"
    }
  }
}