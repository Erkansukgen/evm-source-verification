{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/test.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title Storage\n * @dev Store & retrieve value in a variable\n */\ncontract Storage {\n\n   \n    function draw(uint256 seed) public pure returns (uint256) {\n        uint256 rand = uint256(keccak256(abi.encodePacked(seed)));\n        return rand;\n    }\n}\n\n// uint256 private constant TOP_COUNT = 55;\n//   uint256 private constant EYE_COUNT = 48;\n//   uint256 private constant NOSE_COUNT = 9;\n//   uint256 private constant MOUTH_COUNT = 32;\n\n//   function draw(uint256 seed) public pure returns (string memory) {\n//     uint256 rand = uint256(keccak256(abi.encodePacked(seed)));\n\n//     string memory top = _chooseTop(rand);\n//     string memory eyes = _chooseEyes(rand);\n//     string memory mouth = _chooseMouth(rand);\n\n//     string memory chin = unicode\"   │    │   \\n\" unicode\"   └──┘ │   \\n\";\n//     string memory neck = unicode\"     │  │   \\n\" unicode\"     │  │   \\n\";\n\n//     return string(abi.encodePacked(top, eyes, mouth, chin, neck));\n//   }"}}}