{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "localhost/Lock3rV1JobRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\n/*\r\n\r\n░░░░░██╗░█████╗░██████╗░  ██████╗░███████╗░██████╗░██╗░██████╗████████╗██████╗░██╗░░░██╗\r\n░░░░░██║██╔══██╗██╔══██╗  ██╔══██╗██╔════╝██╔════╝░██║██╔════╝╚══██╔══╝██╔══██╗╚██╗░██╔╝\r\n░░░░░██║██║░░██║██████╦╝  ██████╔╝█████╗░░██║░░██╗░██║╚█████╗░░░░██║░░░██████╔╝░╚████╔╝░\r\n██╗░░██║██║░░██║██╔══██╗  ██╔══██╗██╔══╝░░██║░░╚██╗██║░╚═══██╗░░░██║░░░██╔══██╗░░╚██╔╝░░\r\n╚█████╔╝╚█████╔╝██████╦╝  ██║░░██║███████╗╚██████╔╝██║██████╔╝░░░██║░░░██║░░██║░░░██║░░░\r\n░╚════╝░░╚════╝░╚═════╝░  ╚═╝░░╚═╝╚══════╝░╚═════╝░╚═╝╚═════╝░░░░╚═╝░░░╚═╝░░╚═╝░░░╚═╝░░░\r\n*/\r\ncontract Lock3rJobRegistry {\r\n    /// @notice governance address for the governance contract\r\n    address public governance;\r\n    address public pendingGovernance;\r\n\r\n    struct _job {\r\n        uint _id;\r\n        address _address;\r\n        string _name;\r\n        string _ipfs;\r\n        string _docs;\r\n        uint _added;\r\n    }\r\n\r\n    mapping(address => bool) public jobAdded;\r\n    mapping(address => _job) public jobData;\r\n    address[] public jobList;\r\n\r\n    constructor() public {\r\n        governance = msg.sender;\r\n    }\r\n\r\n    uint public length;\r\n\r\n    function jobs() external view returns (address[] memory) {\r\n        return jobList;\r\n    }\r\n\r\n    function job(address _address) external view returns (uint, address, string memory, string memory, string memory, uint) {\r\n        _job memory __job = jobData[_address];\r\n        return (__job._id, __job._address, __job._name, __job._ipfs, __job._docs, __job._added);\r\n    }\r\n\r\n    function set(address _address, string calldata _name, string calldata _ipfs, string calldata _docs) external {\r\n        require(msg.sender == governance, \"Lock3rJobRegistry::add: !gov\");\r\n        require(jobAdded[_address], \"Lock3rJobRegistry::add: no job\");\r\n        _job storage __job = jobData[_address];\r\n\r\n        __job._name = _name;\r\n        __job._ipfs = _ipfs;\r\n        __job._docs = _docs;\r\n\r\n    }\r\n\r\n    function add(address _address, string calldata _name, string calldata _ipfs, string calldata _docs) external {\r\n        require(msg.sender == governance, \"Lock3rV1JobRegistry::add: !gov\");\r\n        require(!jobAdded[_address], \"Lock3rV1JobRegistry::add: job exists\");\r\n        jobAdded[_address] = true;\r\n        jobList.push(_address);\r\n        jobData[_address] = _job(length++, _address, _name, _ipfs, _docs, now);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows governance to change governance (for future upgradability)\r\n     * @param _governance new governance address to set\r\n     */\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"setGovernance: !gov\");\r\n        pendingGovernance = _governance;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows pendingGovernance to accept their role as governance (protection pattern)\r\n     */\r\n    function acceptGovernance() external {\r\n        require(msg.sender == pendingGovernance, \"acceptGovernance: !pendingGov\");\r\n        governance = pendingGovernance;\r\n    }\r\n}"
    }
  }
}