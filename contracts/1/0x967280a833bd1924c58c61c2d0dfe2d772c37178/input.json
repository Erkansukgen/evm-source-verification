{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/BewSwapImplement.sol":{"content":"// File: contracts/interfaces/IUniRouter.sol\n\npragma solidity >=0.6.2;\n\ninterface IUniRouter {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n// File: @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\n\n\npragma solidity ^0.8.0;\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n\n// File: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n\n// File: @openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n\n// File: contracts/BewSwapImplement.sol\n\npragma solidity ^0.8.0;\n\n\n\n\n\n\n\n\ncontract BewSwap is Initializable, ContextUpgradeable, ReentrancyGuardUpgradeable {\n\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint256 public constant feePctScale = 1e6;\n    uint256 public safeMinGas;\n\n    uint256 private _feePct;\n\n    address private _owner;\n    address private _pendingOwner;\n\n    address payable private _feeAccount;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event OwnershipAccepted(address indexed previousOwner, address indexed newOwner);\n    event FeePctUpdated(uint256 indexed previousFeePct, uint256 indexed newFeePct);\n    event FeeAccountUpdated(address indexed previousFeeAccount, address indexed newFeeAccount);\n    event FeeReceived(address indexed token, uint256 indexed amount);\n\n\n    constructor() public {\n    }\n\n\n\n    function initialize(address owner, address payable feeAccount, uint256 feePct) external {\n        __BewSwap_init(owner, feeAccount, feePct);\n    }\n\n    function __BewSwap_init(address owner, address payable feeAccount, uint256 feePct) internal initializer {\n        __Context_init_unchained();\n        __ReentrancyGuard_init_unchained();\n        __BewSwap_init_unchained(owner, feeAccount, feePct);\n    }\n\n    function __BewSwap_init_unchained(address owner, address payable feeAccount, uint256 feePct) internal initializer {\n        require(feePct <= feePctScale, \"BewSwap: fee pct is larger than fee pct scale\");\n        require(owner != address(0), \"BewSwap: owner is the zero address\");\n        require(feeAccount != address(0), \"BewSwap: fee account is the zero address\");\n\n        _owner = owner;\n        _feePct = feePct;\n        _feeAccount = feeAccount;\n        safeMinGas = 2300;\n\n        emit OwnershipTransferred(address(0), owner);\n        emit FeePctUpdated(0, feePct);\n        emit FeeAccountUpdated(address(0), feeAccount);\n    }\n\n\n    fallback() external payable {}\n\n    function owner() external view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"BewSwap: caller is not the owner\");\n        _;\n    }\n\n    function transferOwnership(address newOwner) external onlyOwner {\n        require(newOwner != address(0), \"BewSwap: new owner is the zero address\");\n\n        emit OwnershipTransferred(_owner, newOwner);\n        _pendingOwner = newOwner;\n    }\n\n    function acceptOwnership() external {\n        require(msg.sender == _pendingOwner, \"BewSwap: invalid new owner\");\n        emit OwnershipAccepted(_owner, _pendingOwner);\n        _owner = _pendingOwner;\n        _pendingOwner = address(0);\n    }\n\n    function feePct() external view returns (uint256) {\n        return _feePct;\n    }\n\n    function updateFeePct(uint256 newFeePct) external onlyOwner {\n        require(newFeePct != _feePct, \"BewSwap: new fee pct is the same as the current fee pct\");\n        require(newFeePct <= feePctScale, \"BewSwap: new fee pct should larger than fee pct scale\");\n        emit FeePctUpdated(_feePct, newFeePct);\n        _feePct = newFeePct;\n    }\n\n    function feeAccount() external view returns (address) {\n        return _feeAccount;\n    }\n\n    function updateSafeMinGas(uint256 _safeMinGas) external onlyOwner {\n        require(2300 <= _safeMinGas, \"BewSwap: 2300 <= _safeMinGas\");\n        safeMinGas = _safeMinGas;\n    }\n\n    function updateFeeAccount(address payable newFeeAccount) external onlyOwner {\n        require(newFeeAccount != address(0), \"BewSwap: new fee account is the zero address\");\n        require(newFeeAccount != _feeAccount, \"BewSwap: new fee account is the same as current fee account\");\n\n        emit FeeAccountUpdated(_feeAccount, newFeeAccount);\n        _feeAccount = newFeeAccount;\n    }\n\n    function swapExactTokensForTokens(\n        IUniRouter router,\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external nonReentrant {\n        IERC20Upgradeable fromToken = IERC20Upgradeable(path[0]);\n        fromToken.safeTransferFrom(msg.sender, address(this), amountIn);\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, address(this), deadline);\n\n        IERC20Upgradeable toToken = IERC20Upgradeable(path[path.length-1]);\n        uint256 toTokenBalance = toToken.balanceOf(address(this));\n        require(toTokenBalance >= amountOutMin, \"BewSwap: get less to tokens than expected\");\n\n        uint256 feeAmount = (toTokenBalance * _feePct) / feePctScale;\n        uint256 remainAmount = toTokenBalance - feeAmount;\n\n        // charge fee and transfer balance to to address\n        toToken.safeTransfer(to, remainAmount);\n        if (feeAmount != 0) {\n            toToken.safeTransfer(_feeAccount, feeAmount);\n            emit FeeReceived(address(toToken), feeAmount);\n        }\n    }\n\n    function swapTokensForExactTokens(\n        IUniRouter router,\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external nonReentrant {\n        IERC20Upgradeable fromToken = IERC20Upgradeable(path[0]);\n        fromToken.safeTransferFrom(msg.sender, address(this), amountInMax);\n        fromToken.safeIncreaseAllowance(address(router), amountInMax);\n\n        router.swapTokensForExactTokens(amountOut, amountInMax , path, address(this), deadline);\n\n        IERC20Upgradeable toToken = IERC20Upgradeable(path[path.length-1]);\n        uint256 toTokenBalance = toToken.balanceOf(address(this));\n        require(toTokenBalance >= amountOut, \"BewSwap: get less to tokens than expected\");\n\n        uint256 feeAmount = (toTokenBalance * _feePct) / feePctScale;\n        uint256 remainAmount = toTokenBalance - feeAmount;\n\n        // charge fee and transfer balance to to address\n        toToken.safeTransfer(to, remainAmount);\n        if (feeAmount != 0) {\n            toToken.safeTransfer( _feeAccount, feeAmount);\n            emit FeeReceived(address(toToken), feeAmount);\n        }\n\n        // return remain from tokens\n        uint256 fromTokenBalance = fromToken.balanceOf(address(this));\n        if (fromTokenBalance != 0) {\n            fromToken.safeTransfer(to, fromTokenBalance);\n        }\n    }\n\n    function swapExactETHForTokens(\n        IUniRouter router,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable nonReentrant {\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(amountOutMin, path, address(this), deadline);\n\n        IERC20Upgradeable toToken = IERC20Upgradeable(path[path.length-1]);\n        uint256 toTokenBalance = toToken.balanceOf(address(this));\n        require(toTokenBalance >= amountOutMin, \"BewSwap: get less to tokens than expected\");\n\n        uint256 feeAmount = (toTokenBalance * _feePct) / feePctScale;\n        uint256 remainAmount = toTokenBalance - feeAmount;\n\n        // charge fee and transfer balance to to address\n        toToken.safeTransfer(to, remainAmount);\n        if (feeAmount != 0) {\n            toToken.safeTransfer(_feeAccount, feeAmount);\n            emit FeeReceived(address(toToken), feeAmount);\n        }\n    }\n\n    function swapTokensForExactETH(\n        IUniRouter router,\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address payable to, uint deadline\n    ) external nonReentrant {\n        IERC20Upgradeable fromToken = IERC20Upgradeable(path[0]);\n        fromToken.safeTransferFrom(msg.sender, address(this), amountInMax);\n        fromToken.safeIncreaseAllowance(address(router), amountInMax);\n\n        router.swapTokensForExactETH(amountOut, amountInMax, path, address(this), deadline);\n\n        uint256 ethBalance = address(this).balance;\n        require(ethBalance >= amountOut, \"BewSwap: get less eth than expected\");\n\n        uint256 feeAmount = (ethBalance * _feePct) / feePctScale;\n        uint256 remainAmount = ethBalance - feeAmount;\n\n        // charge fee and transfer balance to to address\n        _safeTransferETH(to, remainAmount);\n        if (feeAmount != 0) {\n            _safeTransferETH(_feeAccount, feeAmount);\n            emit FeeReceived(address(0), feeAmount);\n        }\n\n        // return remain from tokens\n        uint256 fromTokenBalance = fromToken.balanceOf(address(this));\n        if (fromTokenBalance != 0) {\n            fromToken.safeTransfer(to, fromTokenBalance);\n        }\n    }\n\n    function swapExactTokensForETH(\n        IUniRouter router,\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address payable to,\n        uint deadline\n    ) external nonReentrant {\n        IERC20Upgradeable fromToken = IERC20Upgradeable(path[0]);\n        fromToken.safeTransferFrom(msg.sender, address(this), amountIn);\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\n\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, address(this), deadline);\n\n        uint256 ethBalance = address(this).balance;\n        require(ethBalance >= amountOutMin, \"BewSwap: get less eth than expected\");\n\n        uint256 feeAmount = (ethBalance * _feePct) / feePctScale;\n        uint256 remainAmount = ethBalance - feeAmount;\n\n        // charge fee and transfer balance to to address\n        _safeTransferETH(to, remainAmount);\n        if (feeAmount != 0) {\n            _safeTransferETH(_feeAccount, feeAmount);\n            emit FeeReceived(address(0), feeAmount);\n        }\n    }\n\n    function swapETHForExactTokens(\n        IUniRouter router,\n        uint amountOut,\n        address[] calldata path,\n        address payable to,\n        uint deadline\n    ) external payable nonReentrant {\n        router.swapETHForExactTokens{value: msg.value}(amountOut, path, address(this), deadline);\n\n        IERC20Upgradeable toToken = IERC20Upgradeable(path[path.length-1]);\n        uint256 toTokenBalance = toToken.balanceOf(address(this));\n        require(toTokenBalance >= amountOut, \"BewSwap: get less to tokens than expected\");\n\n        uint256 feeAmount = (toTokenBalance * _feePct) / feePctScale;\n        uint256 remainAmount = toTokenBalance - feeAmount;\n\n        // charge fee and transfer balance to to address\n        if (feeAmount != 0) {\n            toToken.safeTransfer(_feeAccount, feeAmount);\n            emit FeeReceived(address(0), feeAmount);\n        }\n        toToken.safeTransfer(to, remainAmount);\n\n        // return remain eth\n        uint256 ethBalance = address(this).balance;\n        if (ethBalance != 0) {\n            _safeTransferETH(to, ethBalance);\n        }\n    }\n\n    function _safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{gas: safeMinGas, value: value}(\"\");\n        require(success, \"BewSwap: transfer eth failed\");\n    }\n\n    uint256[50] private __gap;\n}\n"}}}