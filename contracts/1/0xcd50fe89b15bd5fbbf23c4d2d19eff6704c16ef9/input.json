{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/1_Storage.sol": {
      "content": "pragma solidity 0.6.7;\n\ncontract GebAuth {\n    // --- Authorization ---\n    mapping (address => uint) public authorizedAccounts;\n    /**\n     * @notice Add auth to an account\n     * @param account Account to add auth to\n     */\n    function addAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 1;\n        emit AddAuthorization(account);\n    }\n    /**\n     * @notice Remove auth from an account\n     * @param account Account to remove auth from\n     */\n    function removeAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 0;\n        emit RemoveAuthorization(account);\n    }\n    /**\n    * @notice Checks whether msg.sender can call an authed function\n    **/\n    modifier isAuthorized {\n        require(authorizedAccounts[msg.sender] == 1, \"GebAuth/account-not-authorized\");\n        _;\n    }\n\n    // --- Events ---\n    event AddAuthorization(address account);\n    event RemoveAuthorization(address account);\n\n    constructor () public {\n        authorizedAccounts[msg.sender] = 1;\n        emit AddAuthorization(msg.sender);\n    }\n}\n\n\nabstract contract GebLenderFirstResortRewardsLike {\n    function modifyParameters(bytes32, uint256) virtual external;\n}\ncontract MinimalLenderFirstResortOverlay is GebAuth {\n    GebLenderFirstResortRewardsLike public staking;\n\n    // Max amount of staked tokens to keep\n    uint256                         public maxStakedTokensToKeep;\n\n    constructor(address staking_, uint256 maxStakedTokensToKeep_) public GebAuth() {\n        require(staking_ != address(0), \"MinimalLenderFirstResortOverlay/null-address\");\n        require(maxStakedTokensToKeep_ > 0, \"MinimalLenderFirstResortOverlay/null-maxStakedTokensToKeep\");\n        staking               = GebLenderFirstResortRewardsLike(staking_);\n        maxStakedTokensToKeep = maxStakedTokensToKeep_;\n    }\n\n    /*\n    * @notify Modify escrowPaused\n    * @param parameter Must be \"escrowPaused\"\n    * @param data The new value for escrowPaused\n    */\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\n        if (parameter == \"minStakedTokensToKeep\") {\n            require(data <= maxStakedTokensToKeep, \"MinimalLenderFirstResortOverlay/minStakedTokensToKeep-over-limit\");\n            staking.modifyParameters(parameter, data);\n        } else if (\n            parameter == \"escrowPaused\"    ||\n            parameter == \"bypassAuctions\"  ||\n            parameter == \"tokensToAuction\" ||\n            parameter == \"systemCoinsToRequest\"\n            ) staking.modifyParameters(parameter, data);\n        else revert(\"MinimalLenderFirstResortOverlay/modify-forbidden-param\");\n    }\n}\n"
    }
  }
}