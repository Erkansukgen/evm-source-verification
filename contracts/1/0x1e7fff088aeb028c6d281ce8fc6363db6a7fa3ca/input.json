{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"s123s.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0 <0.9.0;\n\nabstract contract Context {\n    function _msgSender() internal view returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the token decimals.\n   */\n  function decimals() external view returns (uint8);\n\n  /**\n   * @dev Returns the token symbol.\n   */\n  function symbol() external view returns (string memory);\n\n  /**\n  * @dev Returns the token name.\n  */\n  function name() external view returns (string memory);\n\n  /**\n   * @dev Returns the bep token owner.\n   */\n  function getOwner() external view returns (address);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(address _owner, address spender) external view returns (uint256);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n   * allowance mechanism. `amount` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/bo/r_u/to_in_u/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     * \n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     * b*or*ut*o*in*u\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\n    function allPairs(uint) external view returns (address lpPair);\n    function allPairsLength() external view returns (uint);\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        \n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    \n}\n\ncontract HxH is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _rOwned;\n    mapping (address => uint256) private _tOwned;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => uint256) private lastTrade;\n\n    mapping (address => bool) private _isExcludedFromFee;\n    mapping (address => bool) private _isExcluded;\n    address[] private _excluded;\n\n    mapping (address => bool) private _isSniper_getsRekt;\n    mapping (address => bool) private _liquidityHolders;\n   \n    uint256 private startingSupply = 1_000_000_000_000_000; //1 quaddy |underscores aid readability\n   \n    uint256 private constant MAX = ~uint256(0);\n    uint8 private _decimals = 9;\n    uint256 private _decimalsMul = _decimals;\n    uint256 private _tTotal = startingSupply * 10**_decimalsMul;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _tFeeTotal;\n\n    string private _name = \"HunterXHunter\";\n    string private _symbol = \"HxH\";\n    \n    uint256 public _reflectFee = 100; // All taxes are divided by 100 for more accuracy.\n    uint256 private _previousReflectFee = _reflectFee;\n    uint256 private maxReflectFee = 750;\n    \n    uint256 public _liquidityFee = 200; // All taxes are divided by 100 for more accuracy.\n    uint256 private _previousLiquidityFee = _liquidityFee;\n    uint256 private maxLiquidityFee = 750;\n\n    uint256 public _marketingFee = 400; // All taxes are divided by 100 for more accuracy.\n    uint256 private _previousMarketingFee = _marketingFee;\n    uint256 private maxMarketingFee = 1000;\n\n    uint256 private masterTaxDivisor = 10000; // All tax calculations are divided by this number.\n\n    IUniswapV2Router02 public dexRouter;\n    address public lpPair;\n\n    // Uniswap Router\n    address private _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n\n    address public burnAddress = 0x000000000000000000000000000000000000dEaD;\n    address payable private _marketingWallet = payable(0x11868f445aB9777367eed5642261d8325961eD4c);\n    \n    bool inSwapAndLiquify;\n    bool public swapAndLiquifyEnabled = false;\n    \n    // Max TX amount is 2% of the total supply.\n    uint256 private maxTxPercent = 2; // Less fields to edit\n    uint256 private maxTxDivisor = 100;\n    uint256 private _maxTxAmount = (_tTotal * maxTxPercent) / maxTxDivisor;\n    uint256 private _previousMaxTxAmount = _maxTxAmount;\n    uint256 public maxTxAmountUI = (startingSupply * maxTxPercent) / maxTxDivisor; // Actual amount for UI's\n    // Maximum wallet size is 2% of the total supply.\n    uint256 private maxWalletPercent = 2; // Less fields to edit\n    uint256 private maxWalletDivisor = 100;\n    uint256 private _maxWalletSize = (_tTotal * maxWalletPercent) / maxWalletDivisor;\n    uint256 private _previousMaxWalletSize = _maxWalletSize;\n    uint256 public maxWalletSizeUI = (startingSupply * maxWalletPercent) / maxWalletDivisor; // Actual amount for UI's\n    // 0.05% of Total Supply\n    uint256 private numTokensSellToAddToLiquidity = (_tTotal * 5) / 10000;\n\n    bool private sniperProtection = true;\n    bool public _hasLiqBeenAdded = false;\n    uint256 private _liqAddBlock = 0;\n    uint256 private _liqAddStamp = 0;\n    uint256 private immutable snipeBlockAmt;\n    uint256 public snipersCaught = 0;\n    bool private gasLimitActive = true;\n    uint256 private gasPriceLimit;\n    bool private sameBlockActive = true;\n    \n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiqudity\n    );\n    event SniperCaught(address sniperAddress);\n    \n    modifier lockTheSwap {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n    \n    constructor (uint256 _snipeBlockAmt, uint256 _gasPriceLimit) payable {\n        _tOwned[_msgSender()] = _tTotal;\n        _rOwned[_msgSender()] = _rTotal;\n\n        // Set the amount of blocks to count a sniper.\n        snipeBlockAmt = _snipeBlockAmt;\n        gasPriceLimit = _gasPriceLimit * 1 gwei;\n\n        IUniswapV2Router02 _dexRouter = IUniswapV2Router02(_routerAddress);\n        lpPair = IUniswapV2Factory(_dexRouter.factory())\n            .createPair(address(this), _dexRouter.WETH());\n\n        dexRouter = _dexRouter;\n        \n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _liquidityHolders[owner()] = true;\n        _isExcluded[address(this)] = true;\n        _excluded.push(address(this));\n        _isExcluded[owner()] = true;\n        _excluded.push(owner());\n        _isExcluded[burnAddress] = true;\n        _excluded.push(burnAddress);\n        _isExcluded[_marketingWallet] = true;\n        _excluded.push(_marketingWallet);\n        _isExcluded[lpPair] = true;\n        _excluded.push(lpPair);\n        // DxLocker Address (BSC)\n        _isExcludedFromFee[0x2D045410f002A95EFcEE67759A92518fA3FcE677] = true;\n        _isExcluded[0x2D045410f002A95EFcEE67759A92518fA3FcE677] = true;\n        _excluded.push(0x2D045410f002A95EFcEE67759A92518fA3FcE677);\n\n        // Approve the owner for PancakeSwap, timesaver.\n        _approve(_msgSender(), _routerAddress, _tTotal);\n\n        // Ever-growing sniper/tool Sniper List\n        _isSniper_getsRekt[0xE4882975f933A199C92b5A925C9A8fE65d599Aa8] = true;\n        _isSniper_getsRekt[0x86C70C4a3BC775FB4030448c9fdb73Dc09dd8444] = true;\n        _isSniper_getsRekt[0xa4A25AdcFCA938aa030191C297321323C57148Bd] = true;\n        _isSniper_getsRekt[0x20C00AFf15Bb04cC631DB07ee9ce361ae91D12f8] = true;\n        _isSniper_getsRekt[0x0538856b6d0383cde1709c6531B9a0437185462b] = true;\n        _isSniper_getsRekt[0xa76e2294d3FeEfaCd17e1ad4d0971a50685FF3A5] = true;\n        _isSniper_getsRekt[0xB995Ec6e8292C1b4ff1e2E0D354789a5A136DcfA] = true;\n        _isSniper_getsRekt[0x9b61312263D804F7bcCC66492BAc6eDE8bE2DFb6] = true;\n        _isSniper_getsRekt[0x0E388888309d64e97F97a4740EC9Ed3DADCA71be] = true;\n        _isSniper_getsRekt[0x93a2d57088BC7ad7C69feEE402E753606d045237] = true;\n        _isSniper_getsRekt[0x6932a1C9276b0dF81edadC818c9D5157f1Bbc6E0] = true;\n        _isSniper_getsRekt[0x3233b0919fe9BE5E289446c26C7322Cbc464838b] = true;\n        _isSniper_getsRekt[0xed0c2fFAfbF2e337680CcB6255C44b19C8F586e5] = true;\n        _isSniper_getsRekt[0x925ED3529f6fF3913278C5B3B1C103dD3c4Bdd16] = true;\n        _isSniper_getsRekt[0x9e1a9C8202777B251A17bf288A2a0903EF5d9885] = true;\n        _isSniper_getsRekt[0xA94E56EFc384088717bb6edCccEc289A72Ec2381] = true;\n        _isSniper_getsRekt[0x9560A38F4F7E52AF49B0BE4033450198Ca88d81b] = true;\n        _isSniper_getsRekt[0xA62c5bA4D3C95b3dDb247EAbAa2C8E56BAC9D6dA] = true;\n        _isSniper_getsRekt[0x6077831872bbB434960a28991B941cC2f26a84Aa] = true;\n        _isSniper_getsRekt[0x2336b2eCE8103c80fA823C9387de8Da8Cce7E2a4] = true;\n        _isSniper_getsRekt[0xde594D578E98533D3663027E4AA3Ba976442dB40] = true;\n        _isSniper_getsRekt[0x3DfbbFDBD20754BB3489dC4FD955719be61FF755] = true;\n        _isSniper_getsRekt[0x549cdf92D66C648A563CAC307Ea03F12E3835d8C] = true;\n        _isSniper_getsRekt[0x6faA2Bb2f1125A1AD4a6551631C1f85DDD39b21a] = true;\n        _isSniper_getsRekt[0x4Db61B50607086483eA59810e05f3E2F2384a748] = true;\n        _isSniper_getsRekt[0xeA1079a114afCD0d7Ffe2171A070D93191913bc6] = true;\n        _isSniper_getsRekt[0x2AC6C749B0d9a4908D935Bb26B0dDCbc7a9F76C6] = true;\n        _isSniper_getsRekt[0x50A77964D208b5cA4B86B8EaB5E9b8C10bb70390] = true;\n        _isSniper_getsRekt[0x00000000003b3cc22aF3aE1EAc0440BcEe416B40] = true;\n        _isSniper_getsRekt[0x90484Bb9bc05fD3B5FF1fe412A492676cd81790C] = true;\n        _isSniper_getsRekt[0x3066Cc1523dE539D36f94597e233719727599693] = true;\n        _isSniper_getsRekt[0xf13FFadd3682feD42183AF8F3f0b409A9A0fdE31] = true;\n        _isSniper_getsRekt[0x376a6EFE8E98f3ae2af230B3D45B8Cc5e962bC27] = true;\n        _isSniper_getsRekt[0x201044fa39866E6dD3552D922CDa815899F63f20] = true;\n        _isSniper_getsRekt[0x6F3aC41265916DD06165b750D88AB93baF1a11F8] = true;\n        _isSniper_getsRekt[0x27C71ef1B1bb5a9C9Ee0CfeCEf4072AbAc686ba6] = true;\n        _isSniper_getsRekt[0xDEF441C00B5Ca72De73b322aA4e5FE2b21D2D593] = true;\n        _isSniper_getsRekt[0x5668e6e8f3C31D140CC0bE918Ab8bB5C5B593418] = true;\n        _isSniper_getsRekt[0x4b9BDDFB48fB1529125C14f7730346fe0E8b5b40] = true;\n        _isSniper_getsRekt[0x7e2b3808cFD46fF740fBd35C584D67292A407b95] = true;\n        _isSniper_getsRekt[0xe89C7309595E3e720D8B316F065ecB2730e34757] = true;\n        _isSniper_getsRekt[0x725AD056625326B490B128E02759007BA5E4eBF1] = true;\n        _isSniper_getsRekt[0xE4882975f933A199C92b5A925C9A8fE65d599Aa8] = true;\n        \n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function totalSupply() external view override returns (uint256) { return _tTotal; }\n    function decimals() external view override returns (uint8) { return _decimals; }\n    function symbol() external view override returns (string memory) { return _symbol; }\n    function name() external view override returns (string memory) { return _name; }\n    function getOwner() external view override returns (address) { return owner(); }\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function isExcludedFromReward(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function isExcludedFromFee(address account) public view returns(bool) {\n        return _isExcludedFromFee[account];\n    }\n\n    function isSniper_getsRekt(address account) public view returns (bool) {\n        return _isSniper_getsRekt[account];\n    }\n\n    function setSniperListEnabled(address account, bool enabled) external onlyOwner() {\n        _isSniper_getsRekt[account] = enabled;\n    }\n\n    function setProtectionSettings(bool antiSnipe, bool antiGas, bool antiBlock) external onlyOwner() {\n        sniperProtection = antiSnipe;\n        gasLimitActive = antiGas;\n        sameBlockActive = antiBlock;\n    }\n    \n    function setTaxFeePercent(uint256 reflectFee) external onlyOwner() {\n        require(reflectFee <= maxReflectFee); // Prevents owner from abusing fees.\n        _reflectFee = reflectFee;\n    }\n    \n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\n        require(liquidityFee <= maxLiquidityFee); // Prevents owner from abusing fees.\n        _liquidityFee = liquidityFee;\n    }\n\n    function setMarketingFeePercent(uint256 marketingFee) external onlyOwner() {\n        require(marketingFee <= maxMarketingFee); // Prevents owner from abusing fees.\n        _marketingFee = marketingFee;\n    }\n\n    function setMaxTxPercent(uint256 percent, uint256 divisor) external onlyOwner() {\n        require(divisor <= 10000); // Cannot set lower than 0.01%\n        _maxTxAmount = _tTotal.mul(percent).div(divisor);\n        maxTxAmountUI = startingSupply.mul(percent).div(divisor);\n    }\n\n    function setMaxWalletSize(uint256 percent, uint256 divisor) external onlyOwner() {\n        require(divisor <= 1000); // Cannot set lower than 0.1%\n        _maxWalletSize = _tTotal.mul(percent).div(divisor);\n        maxWalletSizeUI = startingSupply.mul(percent).div(divisor);\n    }\n\n    function setMarketingWallet(address payable newWallet) external onlyOwner {\n        require(_marketingWallet != newWallet, \"Wallet already set!\");\n        _marketingWallet = payable(newWallet);\n    }\n\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\n        swapAndLiquifyEnabled = _enabled;\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\n    }\n\n    function excludeFromFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n    \n    function includeInFee(address account) external onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n\n    function totalFees() public view returns (uint256) {\n        return _tFeeTotal;\n    }\n\n    function setGasPriceLimit(uint256 gas) external onlyOwner {\n        require(gas >= 150);\n        gasPriceLimit = gas * 1 gwei;\n    }\n\n    function _hasLimits(address from, address to) private view returns (bool) {\n        return from != owner()\n            && to != owner()\n            && !_liquidityHolders[to]\n            && !_liquidityHolders[from]\n            && to != burnAddress\n            && to != address(0)\n            && from != address(this);\n    }\n\n    function deliver(uint256 tAmount) public {\n        address sender = _msgSender();\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\n        (uint256 rAmount,,,,,) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rTotal = _rTotal.sub(rAmount);\n        _tFeeTotal = _tFeeTotal.add(tAmount);\n    }\n\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\n        if (!deductTransferFee) {\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\n            return rAmount;\n        } else {\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\n            return rTransferAmount;\n        }\n    }\n\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n        uint256 currentRate =  _getRate();\n        return rAmount.div(currentRate);\n    }\n\n    function excludeFromReward(address account) public onlyOwner() {\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\n        require(!_isExcluded[account], \"Account is already excluded\");\n        if(_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n    function includeInReward(address account) external onlyOwner() {\n        require(_isExcluded[account], \"Account is already excluded\");\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n    \n     //to recieve ETH from dexRouter when swaping\n    receive() external payable {}\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(\n        address from\n,        address to,\n        uint256 amount\n    ) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        if (gasLimitActive) {\n            require(tx.gasprice <= gasPriceLimit, \"Gas price exceeds limit.\");\n        }\n        if(_hasLimits(from, to)) {\n            if (sameBlockActive) {\n                if (from == lpPair){\n                    require(lastTrade[to] != block.number);\n                    lastTrade[to] = block.number;\n                } else {\n                    require(lastTrade[from] != block.number);\n                    lastTrade[from] = block.number;\n                }\n            }\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\n            if(to != _routerAddress && to != lpPair) {\n                uint256 contractBalanceRecepient = balanceOf(to);\n                require(contractBalanceRecepient + amount <= _maxWalletSize, \"Transfer amount exceeds the maxWalletSize.\");\n            }\n        }\n\n\n        uint256 contractTokenBalance = balanceOf(address(this));\n        \n        if(contractTokenBalance >= _maxTxAmount)\n        {\n            contractTokenBalance = _maxTxAmount;\n        }\n        \n        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\n        if (!inSwapAndLiquify\n            && to == lpPair\n            && swapAndLiquifyEnabled\n        ) {\n            if (overMinTokenBalance) {\n                contractTokenBalance = numTokensSellToAddToLiquidity;\n                swapAndLiquify(contractTokenBalance);\n            }\n        }\n        \n        bool takeFee = true;\n        \n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\n            takeFee = false;\n        }\n        \n        _tokenTransfer(from,to,amount,takeFee);\n    }\n\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\n        if (_marketingFee + _liquidityFee == 0)\n            return;\n        uint256 toMarketing = contractTokenBalance.mul(_marketingFee).div(_marketingFee.add(_liquidityFee));\n        uint256 toLiquify = contractTokenBalance.sub(toMarketing);\n\n        // split the contract balance into halves\n        uint256 half = toLiquify.div(2);\n        uint256 otherHalf = toLiquify.sub(half);\n\n        // capture the contract's current ETH balance.\n        // this is so that we can capture exactly the amount of ETH that the\n        // swap creates, and not make the liquidity event include any ETH that\n        // has been manually sent to the contract\n        uint256 initialBalance = address(this).balance;\n\n        // swap tokens for ETH\n        uint256 toSwapForEth = half.add(toMarketing);\n        swapTokensForEth(toSwapForEth);\n\n        // how much ETH did we just swap into?\n        uint256 fromSwap = address(this).balance.sub(initialBalance);\n        uint256 liquidityBalance = fromSwap.mul(half).div(toSwapForEth);\n\n        addLiquidity(otherHalf, liquidityBalance);\n\n        emit SwapAndLiquify(half, liquidityBalance, otherHalf);\n\n        _marketingWallet.transfer(fromSwap.sub(liquidityBalance));\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap lpPair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = dexRouter.WETH();\n\n        _approve(address(this), address(dexRouter), tokenAmount);\n\n        // make the swap\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(dexRouter), tokenAmount);\n\n        // add the liquidity\n        dexRouter.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            burnAddress,\n            block.timestamp\n        );\n    }\n\n    function _checkLiquidityAdd(address from, address to) private {\n        require(!_hasLiqBeenAdded, \"Liquidity already added and marked.\");\n        if (!_hasLimits(from, to) && to == lpPair) {\n            _liquidityHolders[from] = true;\n            _hasLiqBeenAdded = true;\n            _liqAddBlock = block.number;\n            _liqAddStamp = block.timestamp;\n\n            swapAndLiquifyEnabled = true;\n            emit SwapAndLiquifyEnabledUpdated(true);\n        }\n    }\n\n    //this method is responsible for taking all fee, if takeFee is true\n    function _tokenTransfer(address from, address to, uint256 amount,bool takeFee) private {\n        // Failsafe, disable the whole system if needed.\n        if (sniperProtection){\n            // If sender is a sniper address, reject the transfer.\n            if (isSniper_getsRekt(from) || isSniper_getsRekt(to)) {\n                revert(\"Sniper rejected.\");\n            }\n\n            // Check if this is the liquidity adding tx to startup.\n            if (!_hasLiqBeenAdded) {\n                _checkLiquidityAdd(from, to);\n                    if (!_hasLiqBeenAdded && _hasLimits(from, to)) {\n                        revert(\"Only owner can transfer at this time.\");\n                    }\n            } else {\n                if (_liqAddBlock > 0 \n                    && from == lpPair \n                    && _hasLimits(from, to)\n                ) {\n                    if (block.number - _liqAddBlock < snipeBlockAmt) {\n                        _isSniper_getsRekt[to] = true;\n                        snipersCaught ++;\n                        emit SniperCaught(to);\n                    }\n                }\n            }\n        }\n\n        if(!takeFee)\n            removeAllFee();\n        \n        _finalizeTransfer(from, to, amount);\n        \n        if(!takeFee)\n            restoreAllFee();\n    }\n\n    function _finalizeTransfer(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n            _tOwned[sender] = _tOwned[sender].sub(tAmount);\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);  \n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n            _tOwned[sender] = _tOwned[sender].sub(tAmount);\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n        }\n\n        if (tLiquidity > 0)\n            _takeLiquidity(sender, tLiquidity);\n        if (rFee > 0 || tFee > 0)\n            _takeReflect(rFee, tFee);\n\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\n    }\n\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\n        uint256 tFee = calculateTaxFee(tAmount);\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\n        return (tTransferAmount, tFee, tLiquidity);\n    }\n\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n        uint256 rAmount = tAmount.mul(currentRate);\n        uint256 rFee = tFee.mul(currentRate);\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n\n    function _getRate() private view returns(uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _getCurrentSupply() private view returns(uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;      \n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n        }\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n\n    function _takeReflect(uint256 rFee, uint256 tFee) private {\n        _rTotal = _rTotal.sub(rFee);\n        _tFeeTotal = _tFeeTotal.add(tFee);\n    }\n    \n    function _takeLiquidity(address sender, uint256 tLiquidity) private {\n        uint256 currentRate =  _getRate();\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\n        if(_isExcluded[address(this)])\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\n        emit Transfer(sender, address(this), tLiquidity); // Transparency is the key to success.\n    }\n\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\n        return _amount.mul(_reflectFee).div(masterTaxDivisor);\n    }\n\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\n        return _amount.mul(_liquidityFee.add(_marketingFee)).div(masterTaxDivisor);\n    }\n\n    function removeAllFee() private {\n        if(_reflectFee == 0 && _liquidityFee == 0) return;\n        \n        _previousReflectFee = _reflectFee;\n        _previousLiquidityFee = _liquidityFee;\n        _previousMarketingFee = _marketingFee;\n\n        _reflectFee = 0;\n        _liquidityFee = 0;\n        _marketingFee = 0;\n    }\n    \n    function restoreAllFee() private {\n        _reflectFee = _previousReflectFee;\n        _liquidityFee = _previousLiquidityFee;\n        _marketingFee = _previousMarketingFee;\n    }\n}"}}}