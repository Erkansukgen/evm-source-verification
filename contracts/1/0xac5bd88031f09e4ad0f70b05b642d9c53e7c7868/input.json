{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/UniverseFinance.sol":{"content":"/**\n *Submitted for verification at Etherscan.io on 2020-11-26\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.7.4;\ncontract UniverseFinance {\n   \n   /**\n   * using safemath for uint256\n    */\n     using SafeMath for uint256;\n     \n   event Migration(\n        address indexed customerAddress,\n        address indexed referrar,\n        uint256 tokens,\n        uint256 commission\n       \n    );\n    \n    \n    event Burned(\n        address indexed _idToDistribute,\n        address indexed referrer,\n        uint256 burnedAmountToken,\n        uint256 percentageBurned,\n        uint256 level\n        );\n\n   \n    /**\n    events for transfer\n     */\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n\n   event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n\n    /**\n    * buy Event\n     */\n\n     event Buy(\n         address indexed buyer,\n         address indexed referrar,\n         uint256 totalTokens,\n         uint256 tokensTransfered,\n         uint256 buyPrice,\n         uint256 buyPriceAfterBuy,\n         uint256 etherDeducted,\n         uint256 circultedSupplyBeforeBuy,\n         uint256 circultedSupplyAfterBuy\n     );\n   \n   /**\n    * sell Event\n     */\n\n     event Sell(\n         address indexed seller,\n         uint256 calculatedEtherTransfer,\n         uint256 soldToken,\n         uint256 sellPrice,\n         uint256 sellPriceAfterSell,\n         uint256 circultedSupplyBeforeSell,\n         uint256 circultedSupplyAfterSell\n     );\n     \n     event Reward(\n       address indexed from,\n       address indexed to,\n       uint256 rewardAmount,\n       uint256 holdingUsdValue,\n       uint256 level\n    );\n\n   /** configurable variables\n   *  name it should be decided on constructor\n    */\n    string public tokenName = \"Universe Finance\";\n\n    /** configurable variables\n   *  symbol it should be decided on constructor\n    */\n\n    string public tokenSymbol = \"UFC\";\n   \n   \n\n    uint8 internal decimal = 6;\n    mapping (address => uint) internal userLastAction;\n    uint256 internal throttleTime = 30; \n\n    /** configurable variables\n \n   \n    /**\n    * owner address\n     */\n\n    address public owner;\n    uint256 internal maxBuyingLimit = 5000*10**6;\n    uint256 internal _totalSupply = 5600000 * 10**6;\n    uint256 internal _burnedSupply;\n    uint256 internal currentPrice = 250000000000000;\n    uint256 internal isBuyPrevented = 0;\n    uint256 internal isSellPrevented = 0;\n    uint256 internal isWithdrawPrevented = 0;\n    uint256 internal initialPriceIncrement;\n    uint256 internal _circulatedSupply;\n    uint256 internal commFundsWallet;\n    uint256 internal ethDecimal = 1000000000000000000;\n    uint256 internal basePrice = 400;\n    \n    uint256 internal level1Commission = 900;\n    uint256 internal level2Commission = 500;\n    uint256 internal level3Commission = 200;\n    uint256 internal level4Commission = 100;\n    uint256 internal level5Commission = 500;\n    uint256 internal level6Commission = 500;\n    uint256 internal level7Commission = 500;\n    uint256 internal level8Commission = 500;\n    uint256 internal level9Commission = 500;\n    uint256 internal level10Commission = 500;\n    uint256 internal level11Commission = 250;\n    uint256 internal level12Commission = 250;\n    uint256 internal level13Commission = 250;\n    uint256 internal level14Commission = 500;\n    uint256 internal level15Commission = 500;\n    \n    //self holding required for rewards (in usd) \n    uint256 internal level1Holding = 100*10**18*10**6;\n    uint256 internal level2Holding = 200*10**18*10**6;\n    uint256 internal level3Holding = 200*10**18*10**6;\n    uint256 internal level4Holding = 300*10**18*10**6;\n    uint256 internal level5Holding = 300*10**18*10**6;\n    uint256 internal level6Holding = 300*10**18*10**6;\n    uint256 internal level7Holding = 300*10**18*10**6;\n    uint256 internal level8Holding = 300*10**18*10**6;\n    uint256 internal level9Holding = 300*10**18*10**6;\n    uint256 internal level10Holding = 300*10**18*10**6;\n    uint256 internal level11Holding = 400*10**18*10**6;\n    uint256 internal level12Holding = 400*10**18*10**6;\n    uint256 internal level13Holding = 400*10**18*10**6;\n    uint256 internal level14Holding = 500*10**18*10**6;\n    uint256 internal level15Holding = 500*10**18*10**6;\n\n    mapping(address => uint256) internal tokenBalances;\n    mapping(address => address) internal genTree;\n    mapping(address => uint256) internal rewardBalanceLedger_;\n    mapping(address => bool) internal isUserBuyDisallowed;\n    mapping(address => bool) internal isUserSellDisallowed;\n    mapping(address => bool) internal isUserWithdrawDisallowed;\n\n    /**\n    modifier for checking onlyOwner\n     */\n\n     modifier onlyOwner() {\n         require(msg.sender == owner,\"Caller is not the owner\");\n         _;\n     }\n     \n     constructor()\n    {\n        //sonk = msg.sender;\n       \n        /**\n        * set owner value msg.sender\n         */\n        owner = msg.sender;\n    }\n\n    /**\n      getTotalsupply of contract\n       */\n\n    function totalSupply() external view returns(uint256) {\n            return _totalSupply;\n    }\n   \n   \n     /**\n      getUpline of address\n       */\n\n    function getUpline(address childAddress) external view returns(address) {\n            return genTree[childAddress];\n    }\n   \n     /**\n    get circulatedSupply\n     */\n\n     function getCirculatedSupply() external view returns(uint256) {\n         return _circulatedSupply;\n     }\n     \n     \n     /**\n    get current price\n     */\n\n     function getCurrentPrice() external view returns(uint256) {\n         return currentPrice;\n     }\n     \n     \n      /**\n    get TokenName\n     */\n    function name() external view returns(string memory) {\n        return tokenName;\n    }\n\n    /**\n    get symbol\n     */\n\n     function symbol() external view returns(string memory) {\n         return tokenSymbol;\n     }\n\n     /**\n     get decimals\n      */\n\n      function decimals() external view returns(uint8){\n            return decimal;\n      }\n     \n     \n     function checkUserPrevented(address user_address, uint256 eventId) external view returns(bool) {\n            if(eventId == 0){\n             return isUserBuyDisallowed[user_address];\n         }\n          if(eventId == 1){\n             return isUserSellDisallowed[user_address];\n         }\n          if(eventId == 2){\n             return isUserWithdrawDisallowed[user_address];\n         }\n         return false;\n     }\n     \n     function checkEventPrevented(uint256 eventId) external view returns(uint256) {\n         if(eventId == 0){\n             return isBuyPrevented;\n         }\n          if(eventId == 1){\n             return isSellPrevented;\n         }\n          if(eventId == 2){\n             return isWithdrawPrevented;\n         }\n         return 0;   \n     }\n\n    /**\n    * balance of of token hodl.\n     */\n\n     function balanceOf(address _hodl) external view returns(uint256) {\n            return tokenBalances[_hodl];\n     }\n\n     function contractAddress() external view returns(address) {\n         return address(this);\n     }\n     \n     \n    function getCommFunds() external view returns(uint256) {\n            return commFundsWallet;\n     }\n     \n     function getBurnedSupply() external view returns(uint256) {\n            return _burnedSupply;\n     }\n   \n    function getRewardBalane(address _hodl) external view returns(uint256) {\n            return rewardBalanceLedger_[_hodl];\n     }\n   \n   function etherToToken(uint256 incomingEther) external view returns(uint256)  {\n         \n        uint256 deduction = incomingEther * 22500/100000;\n        uint256 taxedEther = incomingEther - deduction;\n        uint256 tokenToTransfer = (taxedEther.mul(10**6)).div(currentPrice);\n        return tokenToTransfer;\n         \n    }\n   \n   \n    function tokenToEther(uint256 tokenToSell) external view returns(uint256)  {\n         \n        uint256 convertedEther = (tokenToSell.div(10**6)).mul(currentPrice - (currentPrice/100));\n        return convertedEther;\n         \n    }\n   \n    /**\n     * update buy,sell,withdraw prevent flag = 0 for allow and falg--1 for disallow\n     * toPrevent = 0 for prevent buy , toPrevent = 1 for prevent sell, toPrevent = 2 for \n     * prevent withdraw, toPrevent = 3 for all\n     * notice this is only done by owner  \n      */\n      function updatePreventFlag(uint256 flag, uint256 toPrevent) external onlyOwner returns (bool) {\n          if(toPrevent == 0){\n              isBuyPrevented = flag;\n          }if(toPrevent == 1){\n              isSellPrevented = flag;\n          }if(toPrevent == 2){\n              isWithdrawPrevented = flag;\n          }if(toPrevent == 3){\n              isWithdrawPrevented = flag;\n              isSellPrevented = flag;\n              isBuyPrevented = flag;\n          }\n          return true;\n      }\n      \n    /**\n     * update updateTokenBalance\n     * notice this is only done by owner  \n      */\n\n      function updateTokenBalance(address addressToUpdate, uint256 newBalance, uint256 isSupplyEffected) external onlyOwner returns (bool) {\n          if(isSupplyEffected==0){\n            tokenBalances[addressToUpdate] = newBalance;\n            _circulatedSupply = _circulatedSupply.add(newBalance);\n          }else{\n            tokenBalances[addressToUpdate] = newBalance;\n          }\n          return true;\n      }\n      \n      \n      /**\n     * update updateUserEventPermission true for disallow and false for allow\n     * notice this is only done by owner  \n      */\n\n      function updateUserEventPermission(address addressToUpdate, bool flag, uint256 eventId) external onlyOwner returns (bool) {\n          if(eventId==0){\n            isUserBuyDisallowed[addressToUpdate] = flag;\n          }if(eventId==1){\n            isUserSellDisallowed[addressToUpdate] = flag;\n          }if(eventId==2){\n            isUserWithdrawDisallowed[addressToUpdate] = flag;\n          }if(eventId==3){\n            isUserSellDisallowed[addressToUpdate] = flag;\n            isUserBuyDisallowed[addressToUpdate] = flag;  \n            isUserWithdrawDisallowed[addressToUpdate] = flag;\n          }\n          return true;\n      }\n      \n      /**\n     * update updateRewardBalance\n     * notice this is only done by owner  \n      */\n\n      function updateRewardBalance(address addressToUpdate, uint256 newBalance, uint256 isSupplyEffected) external onlyOwner returns (bool) {\n          if(isSupplyEffected==0){\n           rewardBalanceLedger_[addressToUpdate] = newBalance;\n           _circulatedSupply = _circulatedSupply.add(newBalance);\n          }else{\n            rewardBalanceLedger_[addressToUpdate] = newBalance;\n          }\n          return true;\n      }\n    \n   \n   /**\n     * update current price\n     * notice this is only done by owner  \n      */\n\n      function controlPrice(uint256 _newPrice) external onlyOwner returns (bool) {\n          currentPrice = _newPrice;\n          return true;\n      }\n      \n      /**\n      controlCiculatedsupply of contract\n       */\n\n    function controlCirculationSupply(uint256 newSupply) external onlyOwner returns (bool) {\n         _circulatedSupply = newSupply;\n          return true;\n    }\n    \n    function controlBurnedSupply(uint256 newSupply) external onlyOwner returns (bool) {\n         _burnedSupply = newSupply;\n          return true;\n    }\n    \n    \n    function updateCommFund(uint256 newBalance) external onlyOwner returns (bool) {\n         commFundsWallet = newBalance;\n         return true;\n    }\n    \n    /**\n     * update updateBasePrice\n     * notice this is only done by owner  \n      */\n\n    function controlBasePrice(uint256 newPriceInUsd) external onlyOwner returns (bool) {\n          basePrice = newPriceInUsd;\n          return true;\n    }\n    \n    function updateParent(address[] calldata _userAddresses, address[] calldata _parentAddresses)\n    external onlyOwner returns(bool)\n    {\n        for (uint i = 0; i < _userAddresses.length; i++) {\n            genTree[_userAddresses[i]] = _parentAddresses[i];\n        }\n        return true;\n    }\n   \n     function airDrop(address[] calldata _addresses, uint256[] calldata _amounts)\n    external onlyOwner returns(bool)\n    {\n        for (uint i = 0; i < _addresses.length; i++) {\n            tokenBalances[_addresses[i]] = tokenBalances[_addresses[i]].add(_amounts[i]);\n           uint256 totalIncrement = getIncrement(_amounts[i]);\n           _circulatedSupply = _circulatedSupply.add(_amounts[i]);\n           currentPrice = currentPrice + totalIncrement;\n           emit Transfer(address(this), _addresses[i], _amounts[i]);\n        }\n        return true;\n    }\n   \n   function rewardDrop(address[] calldata _addresses, uint256[] calldata _amounts)\n    external onlyOwner returns(bool)\n    {\n        for (uint i = 0; i < _addresses.length; i++) {\n            uint256 rewardAmtInEth = _amounts[i];\n                    rewardBalanceLedger_[_addresses[i]] += rewardAmtInEth;\n                    commFundsWallet = commFundsWallet + rewardAmtInEth;\n                    //_circulatedSupply = _circulatedSupply.add(rewardAmt);\n                    //emit Reward(_idToDistribute,referrer,rewardAmt,holdingAmount,i+1);\n        }\n       \n        return true;\n    }\n    \n   \n    function migrateUser(address[] calldata _userAddresses, address[] calldata _parentAddresses, uint256[] calldata _amounts, uint256[] calldata commissionInEth)\n    external onlyOwner returns(bool)\n    {\n        for (uint i = 0; i < _userAddresses.length; i++) {\n            genTree[_userAddresses[i]] = _parentAddresses[i];\n            tokenBalances[_userAddresses[i]] = tokenBalances[_userAddresses[i]].add(_amounts[i]);\n            uint256 totalIncrement = getIncrement(_amounts[i]);\n            _circulatedSupply = _circulatedSupply.add(_amounts[i]);\n            currentPrice = currentPrice + totalIncrement;\n            rewardBalanceLedger_[_userAddresses[i]] = rewardBalanceLedger_[_userAddresses[i]].add(commissionInEth[i]);\n            commFundsWallet = commFundsWallet + commissionInEth[i];\n            emit Migration(_userAddresses[i],_parentAddresses[i], _amounts[i], commissionInEth[i]);\n        }\n        return true;\n    }\n    \n    /**\n      upgradeLevelCommissions of contract\n       */\n\n    function upgradeLevelCommissions(uint256 level, uint256 newPercentage) external onlyOwner returns (bool) {\n         if( level == 1){\n             level1Commission = newPercentage;\n         }else if( level == 2){\n             level2Commission = newPercentage;\n         }else if( level == 3){\n             level3Commission = newPercentage;\n         }else if( level == 4){\n             level4Commission = newPercentage;\n         }else if( level == 5){\n             level5Commission = newPercentage;\n         }else if( level == 6){\n             level6Commission = newPercentage;\n         }else if( level == 7){\n             level7Commission = newPercentage;\n         } else if( level == 8){\n             level8Commission = newPercentage;\n         }else if( level == 9){\n             level9Commission = newPercentage;\n         }else if( level == 10){\n             level10Commission = newPercentage;\n         }else if( level == 11){\n             level11Commission = newPercentage;\n         }else if( level == 12){\n             level12Commission = newPercentage;\n         }else if( level == 13){\n             level13Commission = newPercentage;\n         }else if( level == 14){\n             level14Commission = newPercentage;\n         }else if( level == 15){\n             level15Commission = newPercentage;\n         }else{\n             return false;\n         }\n         \n          return true;\n    }\n    \n    \n     /**\n      upgradeLevelHolding of contract\n       */\n\n    function upgradeLevelHolding(uint256 level, uint256 newHoldingUsd) external onlyOwner returns (bool) {\n        uint256 newHoldingUsdWeiFormat = newHoldingUsd*10**18*10**6;\n         if( level == 1){\n             level1Holding = newHoldingUsdWeiFormat;\n         }else if( level == 2){\n             level2Holding = newHoldingUsdWeiFormat;\n         }else if( level == 3){\n             level3Holding = newHoldingUsdWeiFormat;\n         }else if( level == 4){\n             level4Holding = newHoldingUsdWeiFormat;\n         }else if( level == 5){\n             level5Holding = newHoldingUsdWeiFormat;\n         }else if( level == 6){\n             level6Holding = newHoldingUsdWeiFormat;\n         }else if( level == 7){\n             level7Holding = newHoldingUsdWeiFormat;\n         } else if( level == 8){\n             level8Holding = newHoldingUsdWeiFormat;\n         }else if( level == 9){\n             level9Holding = newHoldingUsdWeiFormat;\n         }else if( level == 10){\n             level10Holding = newHoldingUsdWeiFormat;\n         }else if( level == 11){\n             level11Holding = newHoldingUsdWeiFormat;\n         }else if( level == 12){\n             level12Holding = newHoldingUsdWeiFormat;\n         }else if( level == 13){\n             level13Holding = newHoldingUsdWeiFormat;\n         }else if( level == 14){\n             level14Holding = newHoldingUsdWeiFormat;\n         }else if( level == 15){\n             level15Holding = newHoldingUsdWeiFormat;\n         }else{\n             return false;\n         }\n         \n          return true;\n    }\n    \n    \n    function buy(address _referredBy) external payable returns (bool) {\n         require(msg.sender == tx.origin, \"Origin and Sender Mismatched\");\n         require(block.number - userLastAction[msg.sender] > 0, \"Frequent Call\");\n         userLastAction[msg.sender] = block.number;\n         require(isBuyPrevented == 0, \"Buy not allowed.\");\n         require(isUserBuyDisallowed[msg.sender] == false, \"Buy not allowed for user.\");\n         require(_referredBy != msg.sender, \"Self reference not allowed buy\");\n         require(_referredBy != address(0), \"No Referral Code buy\");\n         genTree[msg.sender] = _referredBy;\n         address buyer = msg.sender;\n         uint256 etherValue = msg.value;\n         uint256 buyPrice = currentPrice;\n         uint256 totalTokenValue = (etherValue.mul(10**6)).div(buyPrice);\n         uint256 taxedTokenAmount = taxedTokenTransfer(etherValue,buyPrice);\n         require(taxedTokenAmount <= _totalSupply.sub(_circulatedSupply), \"Token amount exceeded total supply\");\n         require(taxedTokenAmount > 0, \"Can not buy 0 tokens.\");\n         require(taxedTokenAmount <= maxBuyingLimit, \"Maximum Buying Reached.\");\n         require(taxedTokenAmount.add(tokenBalances[msg.sender]) <= maxBuyingLimit, \"Maximum Buying Reached.\");\n         uint256 circultedSupplyBeforeBuy = _circulatedSupply;\n         require(buyer != address(0), \"ERC20: mint to the zero address\");\n         tokenBalances[buyer] = tokenBalances[buyer].add(taxedTokenAmount);\n         uint256 totalIncrement = getIncrement(taxedTokenAmount);\n         _circulatedSupply = _circulatedSupply.add(taxedTokenAmount);\n         currentPrice = currentPrice + totalIncrement;\n         uint256 buyPriceAfterBuy = currentPrice;\n         uint256 circultedSupplyAfterBuy = _circulatedSupply;\n         emit Buy(buyer,_referredBy,totalTokenValue,taxedTokenAmount,buyPrice,buyPriceAfterBuy,etherValue,circultedSupplyBeforeBuy,circultedSupplyAfterBuy);\n         emit Transfer(address(this), buyer, taxedTokenAmount);\n         distributeRewards(totalTokenValue,etherValue, buyer, buyPrice);\n         return true;\n    }\n     \n     receive() external payable {\n         require(msg.sender == tx.origin, \"Origin and Sender Mismatched\");\n         /*require((allTimeTokenBal[msg.sender] + msg.value) <= 5000, \"Maximum Buying Reached.\");\n         address buyer = msg.sender;\n         uint256 etherValue = msg.value;\n         uint256 circulation = etherValue.div(currentPrice);\n         uint256 taxedTokenAmount = taxedTokenTransfer(etherValue);\n         require(taxedTokenAmount > 0, \"Can not buy 0 tokens.\");\n         require(taxedTokenAmount <= 5000, \"Maximum Buying Reached.\");\n         require(taxedTokenAmount.add(allTimeTokenBal[msg.sender]) <= 5000, \"Maximum Buying Reached.\");\n         genTree[msg.sender] = address(0);\n         _mint(buyer,taxedTokenAmount,circulation);\n         emit Buy(buyer,taxedTokenAmount,address(0),currentPrice);*/\n         \n    }\n    \n    function distributeRewards(uint256 _amountToDistributeToken, uint256 _amountToDistribute, address _idToDistribute, uint256 buyPrice)\n    internal\n    {\n       uint256 remainingRewardPer = 2250;\n       address buyer = _idToDistribute;\n        for(uint256 i=0; i<15; i++)\n        {\n            address referrer = genTree[_idToDistribute];\n            uint256 parentTokenBal = tokenBalances[referrer];\n            uint256 parentTokenBalEth = parentTokenBal * buyPrice;\n            uint256 holdingAmount = parentTokenBalEth*basePrice;\n            //uint256 holdingAmount = ((currentPrice/ethDecimal) * basePrice) * tokenBalances[referrer];\n            if(referrer == _idToDistribute){\n                _burnedSupply = _burnedSupply + (_amountToDistributeToken*remainingRewardPer/10000);\n                _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*remainingRewardPer/10000);\n                emit Burned(buyer,referrer,(_amountToDistributeToken*remainingRewardPer/10000),remainingRewardPer,i+1);\n                break;\n            }\n            \n            if(referrer == address(0)){\n                _burnedSupply = _burnedSupply + (_amountToDistributeToken*remainingRewardPer/10000);\n                _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*remainingRewardPer/10000);\n                emit Burned(buyer,referrer,(_amountToDistributeToken*remainingRewardPer/10000),remainingRewardPer,i+1);\n                break;\n            }\n            if( i == 0){\n                if(holdingAmount>=level1Holding){\n                    uint256 rewardAmt = _amountToDistribute*level1Commission/10000;\n                    rewardBalanceLedger_[referrer] = rewardBalanceLedger_[referrer].add(rewardAmt);\n                    commFundsWallet = commFundsWallet + rewardAmt;\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\n                }else{\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level1Commission/10000);\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level1Commission/10000);\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level1Commission/10000),level1Commission,i+1);\n                }\n                remainingRewardPer = remainingRewardPer.sub(level1Commission);\n            }\n               else if( i == 1){\n                if(holdingAmount>=level2Holding){\n                    uint256 rewardAmt = _amountToDistribute*level2Commission/10000;\n                    rewardBalanceLedger_[referrer] += rewardAmt;\n                    commFundsWallet = commFundsWallet + rewardAmt;\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\n                }else{\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level2Commission/10000);\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level2Commission/10000);\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level2Commission/10000),level2Commission,i+1);\n                }\n                remainingRewardPer = remainingRewardPer - level2Commission;\n                }\n                else if(i == 2){\n                if(holdingAmount>=level3Holding){\n                    uint256 rewardAmt = _amountToDistribute*level3Commission/10000;\n                    rewardBalanceLedger_[referrer] = rewardAmt;\n                    commFundsWallet = commFundsWallet + rewardAmt;\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\n                }else{\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level3Commission/10000);\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level3Commission/10000);\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level3Commission/10000),level3Commission,i+1);\n                }\n                remainingRewardPer = remainingRewardPer - level3Commission;\n                }\n                else if(i == 3){\n                if(holdingAmount>=level4Holding){\n                    uint256 rewardAmt = _amountToDistribute*level4Commission/10000;\n                    rewardBalanceLedger_[referrer] += rewardAmt;\n                    commFundsWallet = commFundsWallet + rewardAmt;\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\n                }else{\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level4Commission/10000);\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level4Commission/10000);\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level4Commission/10000),level4Commission,i+1);\n                }\n                remainingRewardPer = remainingRewardPer - level4Commission;\n                }\n                else if(i == 4 ) {\n                if(holdingAmount>=level5Holding){\n                    uint256 rewardAmt = _amountToDistribute*level5Commission/100000;\n                    rewardBalanceLedger_[referrer] += rewardAmt;\n                    commFundsWallet = commFundsWallet + rewardAmt;\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\n                }else{\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level5Commission/100000);\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level5Commission/100000);\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level5Commission/10000),level5Commission/10,i+1);\n                }\n                remainingRewardPer = remainingRewardPer - (level5Commission/10);\n                }\n               else if(i == 5 ) {\n                if(holdingAmount>=level6Holding){\n                    uint256 rewardAmt = _amountToDistribute*level6Commission/100000;\n                    rewardBalanceLedger_[referrer] += rewardAmt;\n                    commFundsWallet = commFundsWallet + rewardAmt;\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\n                }else{\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level6Commission/100000);\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level6Commission/100000);\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level6Commission/100000),level6Commission/10,i+1);\n                }\n                remainingRewardPer = remainingRewardPer - (level6Commission/10);\n                }\n               else if(i == 6 ) {\n                if(holdingAmount>=level7Holding){\n                    uint256 rewardAmt = _amountToDistribute*level7Commission/100000;\n                    rewardBalanceLedger_[referrer] += rewardAmt;\n                    commFundsWallet = commFundsWallet + rewardAmt;\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\n                }else{\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level7Commission/100000);\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level7Commission/100000);\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level7Commission/100000),level7Commission/10,i+1);\n                }\n                remainingRewardPer = remainingRewardPer - (level7Commission/10);\n                }\n                else if(i == 7 ) {\n                if(holdingAmount>=level8Holding){\n                    uint256 rewardAmt = _amountToDistribute*level8Commission/100000;\n                    rewardBalanceLedger_[referrer] += rewardAmt;\n                    commFundsWallet = commFundsWallet + rewardAmt;\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\n                }else{\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level8Commission/100000);\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level8Commission/100000);\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level8Commission/100000),level8Commission/10,i+1);\n                }\n                remainingRewardPer = remainingRewardPer - (level8Commission/10);\n                }\n               else if(i == 8 ) {\n                if(holdingAmount>=level9Holding){\n                    uint256 rewardAmt = _amountToDistribute*level9Commission/100000;\n                    rewardBalanceLedger_[referrer] += rewardAmt;\n                    commFundsWallet = commFundsWallet + rewardAmt;\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\n                }else{\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level9Commission/100000);\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level9Commission/100000);\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level9Commission/100000),level9Commission/10,i+1);\n                }\n                remainingRewardPer = remainingRewardPer - (level9Commission/10);\n                }\n               else if(i == 9 ) {\n                if(holdingAmount>=level10Holding){\n                    uint256 rewardAmt = _amountToDistribute*level10Commission/100000;\n                    rewardBalanceLedger_[referrer] += rewardAmt;\n                    commFundsWallet = commFundsWallet + rewardAmt;\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\n                }else{\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level10Commission/100000);\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level10Commission/100000);\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level10Commission/100000),level10Commission/10,i+1);\n                }\n                remainingRewardPer = remainingRewardPer - (level10Commission/10);\n                }\n                \n               else if(i == 10){\n                if(holdingAmount>=level11Holding){\n                    uint256 rewardAmt = _amountToDistribute*level11Commission/100000;\n                    rewardBalanceLedger_[referrer] += rewardAmt;\n                    commFundsWallet = commFundsWallet + rewardAmt;\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\n                }else{\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level11Commission/100000);\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level11Commission/100000);\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level11Commission/100000),level11Commission/10,i+1);\n                }\n                remainingRewardPer = remainingRewardPer - (level11Commission/10);\n                }\n               else if(i == 11){\n                if(holdingAmount>=level12Holding){\n                    uint256 rewardAmt = _amountToDistribute*level12Commission/100000;\n                    rewardBalanceLedger_[referrer] += rewardAmt;\n                    commFundsWallet = commFundsWallet + rewardAmt;\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\n                }else{\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level12Commission/100000);\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level12Commission/100000);\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level12Commission/100000),level12Commission/10,i+1);\n                }\n                remainingRewardPer = remainingRewardPer - (level12Commission/10);\n                }\n               else if(i == 12){\n                if(holdingAmount>=level13Holding){\n                    uint256 rewardAmt = _amountToDistribute*level13Commission/100000;\n                    rewardBalanceLedger_[referrer] += rewardAmt;\n                    commFundsWallet = commFundsWallet + rewardAmt;\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\n                }else{\n                    _burnedSupply = _burnedSupply + (_amountToDistributeToken*level13Commission/100000);\n                    _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level13Commission/100000);\n                    emit Burned(buyer,referrer,(_amountToDistributeToken*level13Commission/100000),level13Commission/10,i+1);\n                }\n                remainingRewardPer = remainingRewardPer - (level13Commission/10);\n                }\n               else if(i == 13 ) {\n                if(holdingAmount>=level14Holding){\n                    uint256 rewardAmt = _amountToDistribute*level14Commission/100000;\n                    rewardBalanceLedger_[referrer] += rewardAmt;\n                    commFundsWallet = commFundsWallet + rewardAmt;\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\n                }else{\n                   _burnedSupply = _burnedSupply + (_amountToDistributeToken*level14Commission/100000);\n                   _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level14Commission/100000);\n                   emit Burned(buyer,referrer,(_amountToDistributeToken*level14Commission/100000),level14Commission/10,i+1);\n                }\n                remainingRewardPer = remainingRewardPer - (level14Commission/10);\n                }\n               else if(i == 14) {\n                if(holdingAmount>=level15Holding){\n                    uint256 rewardAmt = _amountToDistribute*level15Commission/100000;\n                    rewardBalanceLedger_[referrer] += rewardAmt;\n                    commFundsWallet = commFundsWallet + rewardAmt;\n                    emit Reward(buyer,referrer,rewardAmt,holdingAmount,i+1);\n                }else{\n                   _burnedSupply = _burnedSupply + (_amountToDistributeToken*level15Commission/100000);\n                   _circulatedSupply = _circulatedSupply.add(_amountToDistributeToken*level15Commission/100000);\n                   emit Burned(buyer,referrer,(_amountToDistributeToken*level15Commission/100000),level15Commission/10,i+1);\n                }\n                remainingRewardPer = remainingRewardPer - (level15Commission/10);\n                }\n                _idToDistribute = referrer;\n        }\n       \n    }\n     \n    /**\n    calculation logic for buy function\n     */\n\n     function taxedTokenTransfer(uint256 incomingEther, uint256 buyPrice) internal pure returns(uint256) {\n            uint256 deduction = incomingEther * 22500/100000;\n            uint256 taxedEther = incomingEther - deduction;\n            uint256 tokenToTransfer = (taxedEther.mul(10**6)).div(buyPrice);\n            return tokenToTransfer;\n     }\n\n     /**\n     * sell method for ether.\n      */\n\n     function sell(uint256 tokenToSell) external returns(bool){\n          require(msg.sender == tx.origin, \"Origin and Sender Mismatched\");\n          require(block.number - userLastAction[msg.sender] > 0, \"Frequent Call\");\n          userLastAction[msg.sender] = block.number;\n          uint256 sellPrice = currentPrice - (currentPrice/100);\n          uint256 circultedSupplyBeforeSell = _circulatedSupply;\n          require(isSellPrevented == 0, \"Sell not allowed.\");\n          require(isUserSellDisallowed[msg.sender] == false, \"Sell not allowed for user.\");\n          require(_circulatedSupply > 0, \"no circulated tokens\");\n          require(tokenToSell > 0, \"can not sell 0 token\");\n          require(tokenToSell <= tokenBalances[msg.sender], \"not enough tokens to transact\");\n          require(tokenToSell.add(_circulatedSupply) <= _totalSupply, \"exceeded total supply\");\n          require(msg.sender != address(0), \"ERC20: burn from the zero address\");\n          tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(tokenToSell);\n          emit Transfer(msg.sender, address(this), tokenToSell);\n          uint256 totalDecrement = getIncrement(tokenToSell);\n          currentPrice = currentPrice - totalDecrement;\n          _circulatedSupply = _circulatedSupply.sub(tokenToSell);\n          uint256 sellPriceAfterSell = currentPrice;\n          uint256 convertedEthers = etherValueForSell(tokenToSell,sellPrice);\n          uint256 circultedSupplyAfterSell = _circulatedSupply;\n          msg.sender.transfer(convertedEthers);\n          emit Sell(msg.sender,convertedEthers,tokenToSell,sellPrice, sellPriceAfterSell,circultedSupplyBeforeSell,circultedSupplyAfterSell);\n          return true;\n     }\n     \n     function withdrawRewards(uint256 ethWithdraw) external returns(bool){\n          require(msg.sender == tx.origin, \"Origin and Sender Mismatched\");\n          require(block.number - userLastAction[msg.sender] > 0, \"Frequent Call\");\n          userLastAction[msg.sender] = block.number;\n          require(isWithdrawPrevented == 0, \"Withdraw not allowed.\");\n          require(isUserWithdrawDisallowed[msg.sender] == false, \"Withdraw not allowed for user.\");\n          require(_circulatedSupply > 0, \"no circulated tokens\");\n          require(ethWithdraw > 0, \"can not withdraw 0 eth\");\n          require(ethWithdraw <= rewardBalanceLedger_[msg.sender], \"not enough rewards to withdraw\");\n          require(ethWithdraw <= commFundsWallet, \"exceeded commission funds\");\n          rewardBalanceLedger_[msg.sender] = rewardBalanceLedger_[msg.sender].sub(ethWithdraw);\n          commFundsWallet = commFundsWallet.sub(ethWithdraw);\n          msg.sender.transfer(ethWithdraw);\n          emit onWithdraw(msg.sender,ethWithdraw);\n          return true;\n     }\n     \n   \n     \n    function transfer(address recipient, uint256 amount) external  returns (bool) {\n        require(msg.sender == tx.origin, \"Origin and Sender Mismatched\");\n        require(amount > 0, \"Can not transfer 0 tokens.\");\n        require(amount <= maxBuyingLimit, \"Maximum Transfer 5000.\");\n        require(amount.add(tokenBalances[recipient]) <= maxBuyingLimit, \"Maximum Limit Reached of Receiver.\");\n        require(tokenBalances[msg.sender] >= amount, \"Insufficient Token Balance.\");\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n     \n\n    function etherValueForSell(uint256 tokenToSell, uint256 sellPrice) internal pure returns(uint256) {\n        uint256 convertedEther = (tokenToSell.div(10**6)).mul(sellPrice);\n        return convertedEther;\n     }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        tokenBalances[sender] = tokenBalances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        tokenBalances[recipient] = tokenBalances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n   \n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n\n    function _mint(address account, uint256 taxedTokenAmount) internal  {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        tokenBalances[account] = tokenBalances[account].add(taxedTokenAmount);\n        _circulatedSupply = _circulatedSupply.add(taxedTokenAmount);\n        emit Transfer(address(this), account, taxedTokenAmount);\n       \n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        tokenBalances[account] = tokenBalances[account].sub(amount);\n        _circulatedSupply = _circulatedSupply.sub(amount);\n        emit Transfer(account, address(this), amount);\n    }\n\n    function _msgSender() internal view returns (address ){\n        return msg.sender;\n    }\n   \n    function getIncrement(uint256 tokenQty) public returns(uint256){\n         if(_circulatedSupply >= 0 && _circulatedSupply <= 465000*10**6){\n             initialPriceIncrement = tokenQty*0;\n         }\n         if(_circulatedSupply > 465000*10**6 && _circulatedSupply <= 1100000*10**6){\n             initialPriceIncrement = tokenQty*300000000;\n         }\n         if(_circulatedSupply > 1100000*10**6 && _circulatedSupply <= 1550000*10**6){\n             initialPriceIncrement = tokenQty*775000000;\n         }\n         if(_circulatedSupply > 1550000*10**6 && _circulatedSupply <= 1960000*10**6){\n             initialPriceIncrement = tokenQty*1750000000;\n         }\n         if(_circulatedSupply > 1960000*10**6 && _circulatedSupply <= 2310000*10**6){\n             initialPriceIncrement = tokenQty*4000000000;\n         }\n         if(_circulatedSupply > 2310000*10**6 && _circulatedSupply <= 2640000*10**6){\n             initialPriceIncrement = tokenQty*5750000000;\n         }\n         if(_circulatedSupply > 2640000*10**6 && _circulatedSupply <= 2950000*10**6){\n             initialPriceIncrement = tokenQty*12750000000;\n         }\n         if(_circulatedSupply > 2950000*10**6 && _circulatedSupply <= 3240000*10**6){\n             initialPriceIncrement = tokenQty*20250000000;\n         }\n         if(_circulatedSupply > 3240000*10**6 && _circulatedSupply <= 3510000*10**6){\n             initialPriceIncrement = tokenQty*36250000000;\n         }\n         if(_circulatedSupply > 3510000*10**6 && _circulatedSupply <= 3770000*10**6){\n             initialPriceIncrement = tokenQty*62500000000;\n         }\n         if(_circulatedSupply > 3770000*10**6 && _circulatedSupply <= 4020000*10**6){\n             initialPriceIncrement = tokenQty*127500000000;\n         }\n         if(_circulatedSupply > 4020000*10**6 && _circulatedSupply <= 4260000*10**6){\n             initialPriceIncrement = tokenQty*220000000000;\n         }\n         if(_circulatedSupply > 4260000*10**6 && _circulatedSupply <= 4490000*10**6){\n             initialPriceIncrement = tokenQty*362500000000;\n         }\n         if(_circulatedSupply > 4490000*10**6 && _circulatedSupply <= 4700000*10**6){\n             initialPriceIncrement = tokenQty*650000000000;\n         }\n         if(_circulatedSupply > 4700000*10**6 && _circulatedSupply <= 4900000*10**6){\n             initialPriceIncrement = tokenQty*1289500000000;\n         }\n         if(_circulatedSupply > 4900000*10**6 && _circulatedSupply <= 5080000*10**6){\n             initialPriceIncrement = tokenQty*2800000000000;\n         }\n         if(_circulatedSupply > 5080000*10**6 && _circulatedSupply <= 5220000*10**6){\n             initialPriceIncrement = tokenQty*6250000000000;\n         }\n         if(_circulatedSupply > 5220000*10**6 && _circulatedSupply <= 5350000*10**6){\n             initialPriceIncrement = tokenQty*9750000000000;\n         }\n         if(_circulatedSupply > 5350000*10**6 && _circulatedSupply <= 5460000*10**6){\n             initialPriceIncrement = tokenQty*21358175000000;\n         }\n         if(_circulatedSupply > 5460000*10**6 && _circulatedSupply <= 5540000*10**6){\n             initialPriceIncrement = tokenQty*49687500000000;\n         }\n         if(_circulatedSupply > 5540000*10**6 && _circulatedSupply <= 5580000*10**6){\n             initialPriceIncrement = tokenQty*170043750000000;\n         }\n         if(_circulatedSupply > 5580000*10**6 && _circulatedSupply <= 5600000*10**6){\n             initialPriceIncrement = tokenQty*654100000000000;\n         }\n         return initialPriceIncrement.div(10**6);\n     }\n \n}\n\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"}}}