{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/GasToken.sol":{"content":"pragma solidity ^0.6.12;\n\ninterface DAO {\n    function advance() external;\n}\n\ninterface Token {\n    function balanceOf(address) external view returns(uint256);\n    function transfer(address, uint256) external;\n}\n\ninterface IFreeFromUpTo {\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n}\n\ncontract GasToken {\n    address private owner;\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n\n    modifier discountCHI {\n        uint256 gasStart = gasleft();\n        _;\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n        chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    function call(address dao, address dollar) public discountCHI {\n        DAO rootDAO = DAO(dao);\n        rootDAO.advance();\n        \n        Token rootToken = Token(dollar);\n        rootToken.transfer(owner, rootToken.balanceOf(address(this)));\n    }\n}\n"}}}