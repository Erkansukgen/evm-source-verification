{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/EthernityX10.sol": {
      "content": "pragma solidity >=0.6.3 <0.7.0;\n\n\ncontract EthernityMoneyX10 {\n    address public creator;\n    uint256 MAX_LEVEL = 2;\n    uint256 REFERRALS_LIMIT = 100;\n    uint256 LEVEL_EXPIRE_TIME = 30 days;\n    uint256 LEVEL_HIGHER_FOUR_EXPIRE_TIME = 10000 days;\n    mapping(address => User) public users;\n    mapping(uint256 => address) public userAddresses;\n    uint256 public last_uid;\n    mapping(uint256 => uint256) public feePrice;\n    mapping(uint256 => uint256) public directPrice;\n    mapping(uint256 => uint256) public levelPrice;\n    mapping(uint256 => uint256) public uplinesToRcvEth;\n    mapping(address => ProfitsRcvd) public rcvdProfits;\n    mapping(address => ProfitsGiven) public givenProfits;\n    mapping(address => LostProfits) public lostProfits;\n\n    struct User {\n        uint256 id;\n        uint256 referrerID;\n        address[] referrals;\n        mapping(uint256 => uint256) levelExpiresAt;\n    }\n\n    struct ProfitsRcvd {\n        uint256 uid;\n        uint256[] fromId;\n        address[] fromAddr;\n        uint256[] amount;\n    }\n\n    struct LostProfits {\n        uint256 uid;\n        uint256[] toId;\n        address[] toAddr;\n        uint256[] amount;\n        uint256[] level;\n    }\n\n    struct ProfitsGiven {\n        uint256 uid;\n        uint256[] toId;\n        address[] toAddr;\n        uint256[] amount;\n        uint256[] level;\n        uint256[] line;\n    }\n\n    modifier validLevelAmount(uint256 _level) {\n        require(msg.value == levelPrice[_level], \"Invalid level amount sent\");\n        _;\n    }\n\n    modifier userRegistered() {\n        require(users[msg.sender].id != 0, \"User does not exist\");\n        _;\n    }\n\n    modifier validReferrerID(uint256 _referrerID) {\n        require(\n            _referrerID > 0 && _referrerID <= last_uid,\n            \"Invalid referrer ID\"\n        );\n        _;\n    }\n\n    modifier userNotRegistered() {\n        require(users[msg.sender].id == 0, \"User is already registered\");\n        _;\n    }\n\n    modifier validLevel(uint256 _level) {\n        require(_level > 0 && _level <= MAX_LEVEL, \"Invalid level entered\");\n        _;\n    }\n\n    event RegisterUserEvent(\n        address indexed user,\n        address indexed referrer,\n        uint256 time\n    );\n    event BuyLevelEvent(\n        address indexed user,\n        uint256 indexed level,\n        uint256 time\n    );\n    event GetLevelProfitEvent(\n        address indexed user,\n        address indexed referral,\n        uint256 indexed level,\n        uint256 time\n    );\n    event LostLevelProfitEvent(\n        address indexed user,\n        address indexed referral,\n        uint256 indexed level,\n        uint256 time\n    );\n\n    constructor() public {\n        last_uid++;\n        creator = msg.sender;\n        levelPrice[1] = 0.17 ether;\n        levelPrice[2] = 0.35 ether;\n        levelPrice[3] = 0.80 ether;\n        levelPrice[4] = 1.60 ether;\n        levelPrice[5] = 2.50 ether;\n        levelPrice[6] = 3.50 ether;\n        levelPrice[7] = 6.60 ether;\n        levelPrice[8] = 15.20 ether;\n        levelPrice[9] = 24.50 ether;\n        feePrice[1] = 0.03 ether;\n        feePrice[2] = 0.04 ether;\n        feePrice[3] = 0.05 ether;\n        feePrice[4] = 0.06 ether;\n        feePrice[5] = 0.07 ether;\n        feePrice[6] = 0.08 ether;\n        feePrice[7] = 0.09 ether;\n        feePrice[8] = 0.10 ether;\n        feePrice[9] = 0.20 ether;\n        directPrice[1] = 0.04 ether;\n        directPrice[2] = 0.09 ether;\n        directPrice[3] = 0.15 ether;\n        directPrice[4] = 0.24 ether;\n        directPrice[5] = 0.34 ether;\n        directPrice[6] = 0.42 ether;\n        directPrice[7] = 0.51 ether;\n        directPrice[8] = 0.70 ether;\n        directPrice[9] = 1.26 ether;\n        uplinesToRcvEth[1] = 10;\n        uplinesToRcvEth[2] = 11;\n        uplinesToRcvEth[3] = 12;\n        uplinesToRcvEth[4] = 13;\n        uplinesToRcvEth[5] = 14;\n        uplinesToRcvEth[6] = 15;\n        uplinesToRcvEth[7] = 16;\n        uplinesToRcvEth[8] = 17;\n        uplinesToRcvEth[9] = 18;\n\n        users[creator] = User({\n            id: last_uid,\n            referrerID: 0,\n            referrals: new address[](0)\n        });\n        userAddresses[last_uid] = creator;\n\n        for (uint256 i = 1; i <= MAX_LEVEL; i++) {\n            users[creator].levelExpiresAt[i] = 1 << 37;\n        }\n    }\n\n    function registerUser(uint256 _referrerID)\n        public\n        payable\n        userNotRegistered()\n        validReferrerID(_referrerID)\n        validLevelAmount(1)\n    {\n        uint256 _level = 1;\n\n        if (\n            users[userAddresses[_referrerID]].referrals.length >=\n            REFERRALS_LIMIT\n        ) {\n            _referrerID = users[findReferrer(userAddresses[_referrerID])].id;\n        }\n        last_uid++;\n        users[msg.sender] = User({\n            id: last_uid,\n            referrerID: _referrerID,\n            referrals: new address[](0)\n        });\n        userAddresses[last_uid] = msg.sender;\n        users[msg.sender].levelExpiresAt[_level] =\n            now +\n            getLevelExpireTime(_level);\n        users[userAddresses[_referrerID]].referrals.push(msg.sender);\n\n        transferLevelPayment(_level, msg.sender);\n        emit RegisterUserEvent(msg.sender, userAddresses[_referrerID], now);\n    }\n\n    function buyLevel(uint256 _level)\n        public\n        payable\n        userRegistered()\n        validLevel(_level)\n        validLevelAmount(_level)\n    {\n        for (uint256 l = _level - 1; l > 0; l--) {\n            require(\n                getUserLevelExpiresAt(msg.sender, l) >= now,\n                \"Buy previous level first\"\n            );\n        }\n\n        if (getUserLevelExpiresAt(msg.sender, _level) == 0) {\n            users[msg.sender].levelExpiresAt[_level] =\n                now +\n                getLevelExpireTime(_level);\n        } else {\n            users[msg.sender].levelExpiresAt[_level] += getLevelExpireTime(\n                _level\n            );\n        }\n\n        transferLevelPayment(_level, msg.sender);\n        emit BuyLevelEvent(msg.sender, _level, now);\n    }\n\n    function getLevelExpireTime(uint256 _level) public view returns (uint256) {\n        if (_level < 5) {\n            return LEVEL_EXPIRE_TIME;\n        } else {\n            return LEVEL_HIGHER_FOUR_EXPIRE_TIME;\n        }\n    }\n\n    function findReferrer(address _user) public view returns (address) {\n        if (users[_user].referrals.length < REFERRALS_LIMIT) {\n            return _user;\n        }\n\n        address[1632] memory referrals;\n        referrals[0] = users[_user].referrals[0];\n        referrals[1] = users[_user].referrals[1];\n\n        address referrer;\n\n        for (uint256 i = 0; i < 16382; i++) {\n            if (users[referrals[i]].referrals.length < REFERRALS_LIMIT) {\n                referrer = referrals[i];\n                break;\n            }\n\n            if (i >= 8191) {\n                continue;\n            }\n\n            referrals[(i + 1) * 2] = users[referrals[i]].referrals[0];\n            referrals[(i + 1) * 2 + 1] = users[referrals[i]].referrals[1];\n        }\n\n        require(referrer != address(0), \"Referrer not found\");\n        return referrer;\n    }\n\n    function transferLevelPayment(uint256 _level, address _user) internal {\n        uint256 height = _level;\n        address referrer = getUserUpline(_user, height);\n\n        if (referrer == address(0)) {\n            referrer = creator;\n        }\n\n        uint256 uplines = uplinesToRcvEth[_level];\n        bool chkLostProfit = false;\n        address lostAddr;\n        \n        uint256 eth = msg.value;\n        \n        for (uint256 i = 1; i <= uplines; i++) {\n            referrer = getUserUpline(_user, i);\n\n            if (chkLostProfit) {\n                lostProfits[lostAddr].uid = users[referrer].id;\n                lostProfits[lostAddr].toId.push(users[referrer].id);\n                lostProfits[lostAddr].toAddr.push(referrer);\n                lostProfits[lostAddr].amount.push(\n                    (msg.value - feePrice[_level] -  directPrice[_level])/ uplinesToRcvEth[_level]\n                );\n                lostProfits[lostAddr].level.push(getUserLevel(referrer));\n                chkLostProfit = false;\n\n                emit LostLevelProfitEvent(referrer, msg.sender, _level, 0);\n            }\n\n            if (\n                referrer != address(0) &&\n                (users[_user].levelExpiresAt[_level] == 0 ||\n                    getUserLevelExpiresAt(referrer, _level) < now)\n            ) {\n                chkLostProfit = true;\n                uplines++;\n                lostAddr = referrer;\n                continue;\n            } else {\n                chkLostProfit = false;\n            }\n\n            if (referrer == address(0)) {\n                referrer = creator;\n            }\n\n     \n            if (\n                address(uint160(referrer)).send(\n                    (msg.value - feePrice[_level] -  directPrice[_level])/ uplinesToRcvEth[_level]\n                )\n            ) {\n                eth = eth - ((msg.value - feePrice[_level] -  directPrice[_level])/ uplinesToRcvEth[_level]);\n            \n                rcvdProfits[referrer].uid = users[referrer].id;\n                rcvdProfits[referrer].fromId.push(users[msg.sender].id);\n                rcvdProfits[referrer].fromAddr.push(msg.sender);\n                rcvdProfits[referrer].amount.push(\n                    (levelPrice[_level] - feePrice[_level] -  directPrice[_level])/ uplinesToRcvEth[_level]\n                );\n\n                givenProfits[msg.sender].uid = users[msg.sender].id;\n                givenProfits[msg.sender].toId.push(users[referrer].id);\n                givenProfits[msg.sender].toAddr.push(referrer);\n                givenProfits[msg.sender].amount.push(\n                    (levelPrice[_level] - feePrice[_level] -  directPrice[_level]) / uplinesToRcvEth[_level]\n                );\n                givenProfits[msg.sender].level.push(getUserLevel(referrer));\n                givenProfits[msg.sender].line.push(i);\n\n                emit GetLevelProfitEvent(referrer, msg.sender, _level, now);\n            }\n            \n        }\n        \n        address directRefer =  userAddresses[users[msg.sender].referrerID];\n        \n        if (\n            address(uint160(directRefer)).send(\n                   directPrice[_level]\n                )\n            ) {\n                eth = eth - directPrice[_level];\n                rcvdProfits[referrer].uid = users[directRefer].id;\n                rcvdProfits[referrer].fromId.push(users[msg.sender].id);\n                rcvdProfits[referrer].fromAddr.push(msg.sender);\n                rcvdProfits[referrer].amount.push(\n                    directPrice[_level]\n                );\n\n                givenProfits[msg.sender].uid = users[msg.sender].id;\n                givenProfits[msg.sender].toId.push(users[directRefer].id);\n                givenProfits[msg.sender].toAddr.push(directRefer);\n                givenProfits[msg.sender].amount.push(\n                    directPrice[_level]\n                );\n                givenProfits[msg.sender].level.push(getUserLevel(directRefer));\n                givenProfits[msg.sender].line.push(1);\n\n                emit GetLevelProfitEvent(directRefer, msg.sender, _level, now);\n            }\n            \n        if(address(uint160(creator)).send(eth)){\n            emit GetLevelProfitEvent(creator, msg.sender, _level, now);\n        }\n\n\n    }\n\n    function getUserUpline(address _user, uint256 height)\n        public\n        view\n        returns (address)\n    {\n        if (height <= 0 || _user == address(0)) {\n            return _user;\n        }\n\n        return\n            this.getUserUpline(\n                userAddresses[users[_user].referrerID],\n                height - 1\n            );\n    }\n\n    function getUserReferrals(address _user)\n        public\n        view\n        returns (address[] memory)\n    {\n        return users[_user].referrals;\n    }\n\n    function getUserProfitsFromId(address _user)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        return rcvdProfits[_user].fromId;\n    }\n\n    function getUserProfitsFromAddr(address _user)\n        public\n        view\n        returns (address[] memory)\n    {\n        return rcvdProfits[_user].fromAddr;\n    }\n\n    function getUserProfitsAmount(address _user)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        return rcvdProfits[_user].amount;\n    }\n\n    function getUserProfitsGivenToId(address _user)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        return givenProfits[_user].toId;\n    }\n\n    function getUserProfitsGivenToAddr(address _user)\n        public\n        view\n        returns (address[] memory)\n    {\n        return givenProfits[_user].toAddr;\n    }\n\n    function getUserProfitsGivenToAmount(address _user)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        return givenProfits[_user].amount;\n    }\n\n    function getUserProfitsGivenToLevel(address _user)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        return givenProfits[_user].level;\n    }\n\n    function getUserProfitsGivenToLine(address _user)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        return givenProfits[_user].line;\n    }\n\n    function getUserLostsToId(address _user)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        return (lostProfits[_user].toId);\n    }\n\n    function getUserLostsToAddr(address _user)\n        public\n        view\n        returns (address[] memory)\n    {\n        return (lostProfits[_user].toAddr);\n    }\n\n    function getUserLostsAmount(address _user)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        return (lostProfits[_user].amount);\n    }\n\n    function getUserLostsLevel(address _user)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        return (lostProfits[_user].level);\n    }\n\n    function getUserLevelExpiresAt(address _user, uint256 _level)\n        public\n        view\n        returns (uint256)\n    {\n        return users[_user].levelExpiresAt[_level];\n    }\n\n    function getUserLevel(address _user) public view returns (uint256) {\n        if (getUserLevelExpiresAt(_user, 1) < now) {\n            return (0);\n        } else if (getUserLevelExpiresAt(_user, 2) < now) {\n            return (1);\n        } else if (getUserLevelExpiresAt(_user, 3) < now) {\n            return (2);\n        } else if (getUserLevelExpiresAt(_user, 4) < now) {\n            return (3);\n        } else if (getUserLevelExpiresAt(_user, 5) < now) {\n            return (4);\n        } else if (getUserLevelExpiresAt(_user, 6) < now) {\n            return (5);\n        } else if (getUserLevelExpiresAt(_user, 7) < now) {\n            return (6);\n        } else if (getUserLevelExpiresAt(_user, 8) < now) {\n            return (7);\n        } else if (getUserLevelExpiresAt(_user, 9) < now) {\n            return (8);\n        } else if (getUserLevelExpiresAt(_user, 10) < now) {\n            return (9);\n        }\n    }\n\n    function getUserDetails(address _user)\n        public\n        view\n        returns (uint256, uint256)\n    {\n        if (getUserLevelExpiresAt(_user, 1) < now) {\n            return (1, users[_user].id);\n        } else if (getUserLevelExpiresAt(_user, 2) < now) {\n            return (2, users[_user].id);\n        } else if (getUserLevelExpiresAt(_user, 3) < now) {\n            return (3, users[_user].id);\n        } else if (getUserLevelExpiresAt(_user, 4) < now) {\n            return (4, users[_user].id);\n        } else if (getUserLevelExpiresAt(_user, 5) < now) {\n            return (5, users[_user].id);\n        } else if (getUserLevelExpiresAt(_user, 6) < now) {\n            return (6, users[_user].id);\n        } else if (getUserLevelExpiresAt(_user, 7) < now) {\n            return (7, users[_user].id);\n        } else if (getUserLevelExpiresAt(_user, 8) < now) {\n            return (8, users[_user].id);\n        } else if (getUserLevelExpiresAt(_user, 9) < now) {\n            return (9, users[_user].id);\n        }\n    }\n\n    receive() external payable {\n        revert();\n    }\n}"
    }
  }
}