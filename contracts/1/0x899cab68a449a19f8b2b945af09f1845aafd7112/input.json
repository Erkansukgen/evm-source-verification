{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"preSale.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n *\r\n*/\r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n  function ceil(uint a, uint m) internal pure returns (uint r) {\r\n    return (a + m - 1) / m * m;\r\n  }\r\n}\r\n\r\n\r\ncontract preSale{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    address payable constant public fundsReceiver = 0x1F1800e21dD5080354A06d678ae9B30C00CA4E53;\r\n    \r\n    uint256 public totalFundsReceived;\r\n    uint256 public totalDepositors;\r\n    uint256 public EventEndDate;\r\n    uint256 public softCap = 200 ether;\r\n    \r\n    mapping(address => uint256) public investors; // save each user investment\r\n    \r\n    modifier onlyFundsReceiver{\r\n        require(msg.sender == fundsReceiver);\r\n        _;\r\n    }\r\n    \r\n    \r\n    function setEventEndDate(uint256 endDate) external onlyFundsReceiver{\r\n        EventEndDate = endDate;\r\n    }\r\n\r\n    receive() external payable{\r\n        deposit();\r\n    }\r\n    \r\n    function deposit() public payable{\r\n        if(EventEndDate > 0)\r\n            require(block.timestamp <= EventEndDate, \"Event is closed\");\r\n        if(investors[msg.sender] == 0)\r\n            totalDepositors = totalDepositors.add(1);\r\n        totalFundsReceived = totalFundsReceived.add(msg.value);\r\n        investors[msg.sender] = investors[msg.sender].add(msg.value);\r\n        fundsReceiver.transfer(msg.value);\r\n    }\r\n\r\n}"}}}