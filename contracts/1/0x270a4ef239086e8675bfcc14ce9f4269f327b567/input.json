{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Rewards/Address.sol": {
      "content": "pragma solidity ^0.8.4;\n\n// SPDX-License-Identifier: MIT\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\n            data\n        );\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"
    },
    "Rewards/Context.sol": {
      "content": "pragma solidity ^0.8.4;\n\n// SPDX-License-Identifier: MIT\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n    \n    function _msgValue() internal view virtual returns (uint256) {\n        return msg.value;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"
    },
    "Rewards/IRewardsToken.sol": {
      "content": "pragma solidity ^0.8.4;\n\n// SPDX-License-Identifier: Apache-2.0\n\ninterface IRewardsToken {\n    \n    function balanceOf(address account) external view returns (uint256);\n\n    function isExcludedFromRewards(address wallet) external view returns (bool);\n    \n    function getRewardsSupply() external view returns (uint256);\n}"
    },
    "Rewards/Ownable.sol": {
      "content": "pragma solidity 0.8.4;\n\n// SPDX-License-Identifier: MIT\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() external virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) external virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"
    },
    "Rewards/RewardsTracker.sol": {
      "content": "pragma solidity ^0.8.4;\n\n// SPDX-License-Identifier: Apache-2.0\n\nimport \"./IRewardsToken.sol\";\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\n\ncontract RewardsTracker is Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n    \n    struct TrackingData {\n        IRewardsToken rewardsToken;\n        string trackerName;\n        uint256 nextAllocation;\n        uint256 currentAllocation;\n        uint256 claimed;\n        uint256 payoutDeadline;\n        bool enabled;\n    }\n    \n    mapping(uint => TrackingData) private trackerData;\n    mapping(uint => mapping(address => uint256)) private nextAvailableClaim;\n    uint[] private registeredTrackers;\n    \n    address payable private _devWalletAddress =\n        payable(0x5E0EB60467bEbb9438545b63f9adB51A526d029c);\n        \n    uint256 public payoutInterval = 4 hours;\n    \n    event TrackerAdded(uint trackerId);\n    event TrackerRemoved(uint trackerId);\n    event AllocationAdded(uint256 value);\n    event PayoutIntervalUpdated(uint256 value);\n    event DevWalletUpdated(address newDevWallet);\n    event Withdrawn(address wallet, uint256 amount);\n        \n    function deleteTracker(uint index) private {\n        require(index < registeredTrackers.length, \"Index is greater than array length\");\n        registeredTrackers[index] = registeredTrackers[registeredTrackers.length - 1];\n        registeredTrackers.pop();\n    }\n            \n    function getProportionalHolding(IRewardsToken token, address wallet) private view returns (uint256) {\n        return token.balanceOf(wallet).mul(100).div(token.getRewardsSupply());\n    }\n    \n    function getAllocation(uint trackerId, address wallet) private view returns (uint256) {\n        TrackingData memory trackingData = trackerData[trackerId];\n        uint256 proportion = getProportionalHolding(trackingData.rewardsToken, wallet);\n        return trackingData.currentAllocation.mul(proportion).div(100);\n    }\n    \n    function sendEthToWallet(address wallet, uint256 amount) private {\n        require (amount > 0, \"Withdraw must be > 0\");\n        require (address(this).balance >= amount, \"Insufficient balance\");\n\n        payable(wallet).transfer(amount);\n    }\n    \n    function resetAllocations() private {\n        for (uint i = 0; i < registeredTrackers.length; i++) {\n            TrackingData storage trackingData = trackerData[registeredTrackers[i]];\n            trackingData.currentAllocation = 0;\n            trackingData.nextAllocation = 0;\n            trackingData.claimed = 0;\n            trackingData.payoutDeadline = block.timestamp.add(payoutInterval);\n        }\n    }\n\n    function addTracker(uint identifier, address rewardsTokenAddress, string memory name) external onlyOwner {\n        require (!trackerData[identifier].enabled, \"Tracker already registered and enabled\");\n        TrackingData memory data;\n        data.rewardsToken = IRewardsToken(rewardsTokenAddress);\n        data.trackerName = name;\n        data.enabled = true;\n        data.payoutDeadline = block.timestamp.add(payoutInterval);\n        trackerData[identifier] = data;\n        registeredTrackers.push(identifier);\n        emit TrackerAdded(identifier);\n    }\n    \n    function removeTracker(uint identifier) external onlyOwner {\n        require (trackerData[identifier].enabled, \"Tracker not yet registered or already disabled\");\n        trackerData[identifier].enabled = false;\n        for (uint i = 0; i < registeredTrackers.length; i++) {\n            if (registeredTrackers[i] == identifier) {\n                deleteTracker(i);\n                break;\n            }\n        }\n        emit TrackerRemoved(identifier);\n    }\n    \n    function getTracker(uint identifier) external view returns (TrackingData memory) {\n        return trackerData[identifier];\n    }\n    \n    function addAllocation(uint identifier) external payable {\n        require(_msgValue() > 0, \"Allocation can't be 0\");\n        \n        TrackingData storage trackingData = trackerData[identifier];\n        require(trackingData.enabled, \"Tracker isn't enabled\");\n\n        if (trackingData.payoutDeadline > block.timestamp || trackingData.nextAllocation == 0) {\n            trackingData.nextAllocation = trackingData.nextAllocation.add(_msgValue());\n        } else {\n            _triggerNextAllocation(identifier, _msgValue());\n        }\n        emit AllocationAdded(_msgValue());\n    }\n    \n    function _triggerNextAllocation(uint identifier, uint256 nextAllocation) private {\n        TrackingData storage trackingData = trackerData[identifier];\n        require(trackingData.enabled, \"Tracker isn't enabled\");\n                \n        uint256 leftOverAllocation = trackingData.currentAllocation.sub(trackingData.claimed);\n        trackingData.currentAllocation = trackingData.nextAllocation.add(leftOverAllocation);\n        trackingData.nextAllocation = nextAllocation;\n        trackingData.claimed = 0;\n        trackingData.payoutDeadline = block.timestamp.add(payoutInterval);\n    }\n\n    function forceAllocation(uint identifier) public onlyOwner {\n        _triggerNextAllocation(identifier, 0);\n    }\n    \n    function forceAllAllocations() external onlyOwner {\n        for (uint i = 0; i < registeredTrackers.length; i++) {\n            _triggerNextAllocation(registeredTrackers[i], 0);\n        }\n    }\n    \n    function _withdraw(uint256 identifier) private returns (uint256) {\n        TrackingData storage trackingData = trackerData[identifier];\n        require(trackingData.enabled, \"Tracker isn't enabled\");\n\n        if (trackingData.enabled &&\n            !trackingData.rewardsToken.isExcludedFromRewards(_msgSender()) &&\n            trackingData.rewardsToken.balanceOf(_msgSender()) > 0 &&\n            trackingData.payoutDeadline > nextAvailableClaim[identifier][_msgSender()]\n        ) {\n            uint256 trackerAllocation = getAllocation(identifier, _msgSender());\n            trackingData.claimed = trackingData.claimed.add(trackerAllocation);\n            nextAvailableClaim[identifier][_msgSender()] = trackingData.payoutDeadline;\n            return trackerAllocation;\n        }\n        return 0;\n    }\n    \n    function withdraw(uint256 identifier) external payable {\n        uint256 amount = _withdraw(identifier);\n\n        sendEthToWallet(_msgSender(), amount);\n        emit Withdrawn(_msgSender(), amount);\n    }\n    \n    function withdraw() external payable {\n        uint256 totalAllocation = 0;\n        for (uint i = 0; i < registeredTrackers.length; i++) {\n            uint identifier = registeredTrackers[i];\n            uint256 amount = _withdraw(identifier);\n            if (amount > 0) {\n                totalAllocation = totalAllocation.add(amount);\n            }\n        }\n        sendEthToWallet(_msgSender(), totalAllocation);\n        emit Withdrawn(_msgSender(), totalAllocation);\n    }\n    \n    function getTotalWalletAllocation(address wallet) public view returns (uint256) {\n        uint256 totalAllocation = 0;\n        for (uint i = 0; i < registeredTrackers.length; i++) {\n            uint identifier = registeredTrackers[i];\n            TrackingData memory trackingData = trackerData[identifier];\n            if (trackingData.enabled &&\n                !trackingData.rewardsToken.isExcludedFromRewards(wallet) &&\n                trackingData.rewardsToken.balanceOf(wallet) > 0 &&\n                trackingData.payoutDeadline > nextAvailableClaim[identifier][wallet]\n            ) {\n                uint256 trackerAllocation = getAllocation(identifier, wallet);\n                totalAllocation = totalAllocation.add(trackerAllocation);\n            }\n        }\n        return totalAllocation;\n    }\n\n    function getHolderSupplyProportion(uint trackerId, address wallet) public view returns (uint256) {\n        TrackingData memory trackingData = trackerData[trackerId];\n        return getProportionalHolding(trackingData.rewardsToken, wallet);\n    }\n    \n    function setDevWallet(address payable newDevWallet)\n        external\n        onlyOwner\n    {\n        _devWalletAddress = newDevWallet;\n        emit DevWalletUpdated(newDevWallet);\n    }\n    \n    function updatePayoutInterval(uint256 interval) external onlyOwner {\n        payoutInterval = interval;\n        emit PayoutIntervalUpdated(interval);\n    }\n    \n    function manualSend() external onlyOwner {\n        uint256 contractEthBalance = address(this).balance;\n        sendEthToWallet(_devWalletAddress, contractEthBalance);\n        resetAllocations();\n    }\n}"
    },
    "Rewards/SafeMath.sol": {
      "content": "pragma solidity ^0.8.4;\n\n// SPDX-License-Identifier: MIT\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"
    }
  }
}