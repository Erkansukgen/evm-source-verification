{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"UTRINToken.sol":{"content":"/**\r\n *Submitted for verification at Etherscan.io on 2020-11-05\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.4;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ninterface ItokenRecipient { \r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external returns (bool); \r\n}\r\n\r\ninterface IstakeContract { \r\n    function createStake(address _wallet, uint8 _timeFrame, uint256 _value) external returns (bool); \r\n}\r\n\r\ninterface IERC20Token {\r\n    function totalSupply() external view returns (uint256 supply);\r\n    function transfer(address _to, uint256 _value) external  returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    address private priceManager;\r\n    \r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyPriceManager() {\r\n        require(msg.sender == priceManager, \"Caller is not priceManager\");\r\n        _;\r\n    }\r\n    \r\n    \r\n\r\n    constructor() {\r\n        owner = msg.sender; \r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n    \r\n    function setPriceManager (address newPriceManager) public onlyOwner {\r\n        priceManager = newPriceManager;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\ncontract StandardToken is IERC20Token {\r\n    \r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public _totalSupply;\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    function totalSupply() override public view returns (uint256 supply) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) override virtual public returns (bool success) {\r\n        require(_to != address(0x0), \"Use burn function instead\");                               // Prevent transfer to 0x0 address. Use burn() instead\r\n\t\trequire(_value >= 0, \"Invalid amount\"); \r\n\t\trequire(balances[msg.sender] >= _value, \"Not enough balance\");\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) override virtual public returns (bool success) {\r\n        require(_to != address(0x0), \"Use burn function instead\");                               // Prevent transfer to 0x0 address. Use burn() instead\r\n\t\trequire(_value >= 0, \"Invalid amount\"); \r\n\t\trequire(balances[_from] >= _value, \"Not enough balance\");\r\n\t\trequire(allowed[_from][msg.sender] >= _value, \"You need to increase allowance\");\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\temit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) override public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) override public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) override public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n}\r\n\r\ncontract UTRINToken is Ownable, StandardToken {\r\n\r\n    using SafeMath for uint256;\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n    uint256 public subscriptionPrice;\r\n    address public stakeContract;\r\n    address public crowdSaleContract;\r\n    address public preSaleContract;\r\n    address public dividendPool;\r\n    uint256 public soldTokensUnlockTime;\r\n    mapping (address => uint256) frozenBalances;\r\n    mapping (address => uint256) timelock;\r\n    \r\n    event Burn(address indexed from, uint256 value);\r\n    event StakeContractSet(address indexed contractAddress);\r\n\r\n    \r\n    constructor() {\r\n        name = \"Universal Trade Interface\";\r\n        decimals = 18;\r\n        symbol = \"UTRIN\";\r\n        \r\n        address teamWallet = 0x41dA08f916Fc534C25FB3B388a0859b9e4A42ADa;\r\n        address legalAndLiquidity = 0x298843E6C4Cedd1Eae5327A39847F0A170D32D26;\r\n        address developmentFund = 0x0e70bB808E549147E3073937f13eCdc08E5d5775; \r\n        dividendPool = 0xd1c16226FF031Fcd961221aD25c6a43B4FB96d7E;\r\n        \r\n        balances[teamWallet] = 1500000 ether;                                           \r\n        emit Transfer(address(0x0), teamWallet, (1500000 ether));                       \r\n        \r\n        balances[legalAndLiquidity] = 1000000 ether;                                           \r\n        emit Transfer(address(0x0), legalAndLiquidity, (1000000 ether));\r\n        \r\n        balances[developmentFund] = 1500000 ether;                                    \r\n        emit Transfer(address(0x0), developmentFund, (1500000 ether));     \r\n        \r\n\r\n        _totalSupply = 4000000 ether;\r\n\r\n    }\r\n    \r\n    function frozenBalanceOf(address _owner) public view returns (uint256 balance) {\r\n        return frozenBalances[_owner];\r\n    }\r\n\r\n    function unlockTimeOf(address _owner) public view returns (uint256 time) {\r\n        return timelock[_owner];\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) override public  returns (bool success) {\r\n        require(txAllowed(msg.sender, _value), \"Tokens are still frozen\");\r\n        return super.transfer(_to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) override public returns (bool success) { ///??\r\n        require(txAllowed(msg.sender, _value), \"Crowdsale tokens are still frozen\");\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    \r\n    function setStakeContract(address _contractAddress) onlyOwner public {\r\n        stakeContract = _contractAddress;\r\n        emit StakeContractSet(_contractAddress);\r\n    }\r\n    \r\n    function setDividenPool(address _DividenPool) onlyOwner public {\r\n        dividendPool = _DividenPool;\r\n    }\r\n    \r\n        // Tokens sold by crowdsale contract will be frozen ultil crowdsale ends\r\n    function txAllowed(address sender, uint256 amount) private returns (bool isAllowed) {\r\n        if (timelock[sender] > block.timestamp) {\r\n            return isBalanceFree(sender, amount);\r\n        } else {\r\n            if (frozenBalances[sender] > 0) frozenBalances[sender] = 0;\r\n            return true;\r\n        }\r\n        \r\n    }\r\n    \r\n    function isBalanceFree(address sender, uint256 amount) private view returns (bool isfree) {\r\n        if (amount <= (balances[sender] - frozenBalances[sender])) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function burn(uint256 _value) public onlyOwner returns (bool success) {\r\n        require(balances[msg.sender] >= _value, \"Not enough balance\");\r\n\t\trequire(_value >= 0, \"Invalid amount\"); \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveStake(uint8 _timeFrame, uint256 _value) public returns (bool success) {\r\n        require(stakeContract != address(0x0));\r\n        allowed[msg.sender][stakeContract] = _value;\r\n        emit Approval(msg.sender, stakeContract, _value);\r\n        IstakeContract recipient = IstakeContract(stakeContract);\r\n        require(recipient.createStake(msg.sender, _timeFrame, _value));\r\n        return true;\r\n    }\r\n    \r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        ItokenRecipient recipient = ItokenRecipient(_spender);\r\n        require(recipient.receiveApproval(msg.sender, _value, address(this), _extraData));\r\n        return true;\r\n    }\r\n   \r\n    function tokensSoldCrowdSale(address buyer, uint256 amount) public returns (bool success) {\r\n        require(msg.sender == crowdSaleContract, \"Error with tokensSoldCrowdSale function.\");\r\n        frozenBalances[buyer] += amount;\r\n        if (timelock[buyer] == 0 ) timelock[buyer] = soldTokensUnlockTime;\r\n        return super.transfer(buyer, amount);\r\n    }\r\n    \r\n    function tokensSoldPreSale(address buyer, uint256 amount) public returns (bool success) {\r\n        require(msg.sender == preSaleContract, \"Error with tokensSoldPreSale function.\");\r\n        frozenBalances[buyer] += amount;\r\n        if (timelock[buyer] == 0 ) timelock[buyer] = soldTokensUnlockTime;\r\n        return super.transfer(buyer, amount);\r\n    }\r\n    \r\n\tfunction setPrice(uint256 newPrice) public onlyPriceManager {\r\n\t\tsubscriptionPrice = newPrice;\r\n\t}\r\n\r\n\tfunction redeemTokens(uint256 amount) public{\r\n\t    require(amount > subscriptionPrice, \"Insufficient Utrin tokens sent to cover your fee!\");\r\n\t\t    address account = msg.sender;        \t\r\n\r\n        \tbalances[account] = balances[account].sub(amount);\r\n        \temit Transfer(account, dividendPool, amount);\r\n\t}\r\n\t\r\n\t\r\n\r\n\r\n    \r\n\r\n}"}}}