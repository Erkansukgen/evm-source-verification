{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contract.sol": {
      "content": "// SPDX-License-Identifier: Unlicensed\npragma solidity ^0.8.10;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n}\n\ncontract PIXIEINU is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    mapping (address => uint256) private _rOwned;\n    mapping (address => uint256) private _tOwned;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => bool) private _isExcludedFromReflection;\n    mapping (address => bool) private _isExcludedFromFee;\n    mapping (address => bool) private _isBot;\n\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private constant _tTotal = 1e12 * 10**9;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _tFeeTotal;\n    \n    string private constant _name = \"Pixie Inu\";\n    string private constant _symbol = \"PIXIE\";\n    \n    uint8 private constant _decimals = 9;\n    uint256 private _taxFee = 1;\n    uint256 private _teamFee = 9;\n    uint256 private _previousTaxFee = _taxFee;\n    uint256 private _previousteamFee = _teamFee;\n    address payable private _feeAddress;\n    address payable private _deadAddress = payable(0x000000000000000000000000000000000000dEaD);\n\n    // Uniswap Pair\n    IUniswapV2Router02 private uniswapV2Router;\n    address private uniswapV2Pair;\n\n    // Burn Related\n    address[] private _burnAddressList;\n    uint256[] private _burnAmountList;\n\n    bool private initialized = false;\n    bool private _noTaxMode = false;\n    bool private inSwap = false;\n    uint256 private launchTime;\n    uint256 private initialLimitDuration;\n\n    modifier lockTheSwap {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n    constructor () {\n        _rOwned[_msgSender()] = _rTotal;\n        \n        _isExcludedFromReflection[address(this)] = true;\n        _isExcludedFromReflection[owner()] = true;\n        _isExcludedFromReflection[_deadAddress] = true;\n\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[_deadAddress] = true;\n\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public pure override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function tokenFromReflection(uint256 rAmount) private view returns(uint256) {\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n        uint256 currentRate =  _getRate();\n        return rAmount.div(currentRate);\n    }\n\n    function removeAllFee() private {\n        require(_taxFee > 0 && _teamFee > 0);\n\n        _previousTaxFee = _taxFee;\n        _previousteamFee = _teamFee;\n        _taxFee = 0;\n        _teamFee = 0;\n    }\n    \n    function restoreAllFee() private {\n        _taxFee = _previousTaxFee;\n        _teamFee = _previousteamFee;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    \n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(!_isBot[from], \"Your address has been marked as a bot, please contact staff to appeal your case.\");\n        require(initialized, \"Contract not yet initialized\");\n        \n        if (block.timestamp == launchTime) _isBot[to] = true;\n\n        if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to] && !_noTaxMode) {\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && initialLimitDuration > block.timestamp) {\n                uint walletBalance = balanceOf(address(to));\n                require(amount.add(walletBalance) <= _tTotal.mul(2).div(100));\n            }\n\n            uint256 contractTokenBalance = balanceOf(address(this));\n\n            if (!inSwap && from != uniswapV2Pair) {\n                if (contractTokenBalance > 0) {\n                    if (contractTokenBalance > balanceOf(uniswapV2Pair).mul(5).div(100)) {\n                        contractTokenBalance = balanceOf(uniswapV2Pair).mul(5).div(100);\n                    }\n                    \n                    swapTokensForEth(contractTokenBalance);\n                }\n\n                uint256 contractETHBalance = address(this).balance;\n                if (contractETHBalance > 0) {\n                    sendETHToFee(address(this).balance);\n                }\n            }\n        }\n\n        bool takeFee = true;\n        if (_isExcludedFromReflection[from] || _isExcludedFromReflection[to] || _noTaxMode) takeFee = false;\n                \n        _tokenTransfer(from, to, amount, takeFee);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n        \n    function sendETHToFee(uint256 amount) private {\n        _feeAddress.transfer(amount);\n    }\n    \n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\n        if (!takeFee)\n            removeAllFee();\n        _transferStandard(sender, recipient, amount);\n        if (!takeFee)\n            restoreAllFee();\n    }\n\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \n\n        _takeTeam(tTeam);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _taxFee, _teamFee);\n        uint256 currentRate =  _getRate();\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\n    }\n\n    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {\n        uint256 tFee = tAmount.mul(taxFee).div(100);\n        uint256 tTeam = tAmount.mul(TeamFee).div(100);\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\n        return (tTransferAmount, tFee, tTeam);\n    }\n\n    function _getRate() private view returns(uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _getCurrentSupply() private view returns(uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n        uint256 rAmount = tAmount.mul(currentRate);\n        uint256 rFee = tFee.mul(currentRate);\n        uint256 rTeam = tTeam.mul(currentRate);\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n    function _takeTeam(uint256 tTeam) private {\n        uint256 currentRate =  _getRate();\n        uint256 rTeam = tTeam.mul(currentRate);\n\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\n    }\n\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\n        _rTotal = _rTotal.sub(rFee);\n        _tFeeTotal = _tFeeTotal.add(tFee);\n    }\n    \n    function initContract(address payable feeAddress) external onlyOwner() {\n        require(!initialized,\"Contract has already been initialized\");\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n\n        uniswapV2Router = _uniswapV2Router;\n\n        _feeAddress = feeAddress;\n        _isExcludedFromReflection[_feeAddress] = true;\n        _isExcludedFromFee[_feeAddress] = true;\n\n        initialized = true;\n        launchTime = block.timestamp;\n        initialLimitDuration = launchTime + (60 minutes);\n    }\n\n    function setFeeWallet (address payable feeWalletAddress) external onlyOwner {\n        _isExcludedFromReflection[_feeAddress] = false;\n        _isExcludedFromFee[_feeAddress] = false;\n        _feeAddress = feeWalletAddress;\n        _isExcludedFromReflection[_feeAddress] = true;\n        _isExcludedFromFee[_feeAddress] = true;\n    }\n\n    function excludeFromFee (address payable ad) external onlyOwner {\n        _isExcludedFromReflection[ad] = true;\n        _isExcludedFromFee[ad] = true;\n    }\n    \n    function includeToFee (address payable ad) external onlyOwner {\n        _isExcludedFromReflection[ad] = false;\n        _isExcludedFromFee[ad] = false;\n    }\n    \n    function setNoTaxMode(bool onoff) external onlyOwner {\n        _noTaxMode = onoff;\n    }\n    \n    function setTeamFee(uint256 team) external onlyOwner {\n        require(team <= 9);\n        _teamFee = team;\n    }\n        \n    function setTaxFee(uint256 tax) external onlyOwner {\n        require(tax <= 1);\n        _taxFee = tax;\n    }\n    \n    function setBots(address[] memory bots_) public onlyOwner {\n        for (uint i = 0; i < bots_.length; i++) {\n            if (bots_[i] != uniswapV2Pair && bots_[i] != address(uniswapV2Router)) {\n                _isBot[bots_[i]] = true;\n            }\n        }\n    }\n    \n    function delBots(address[] memory bots_) public onlyOwner {\n        for (uint i = 0; i < bots_.length; i++) {\n            _isBot[bots_[i]] = false;\n        }\n    }\n    \n    function isBot(address ad) public view returns (bool) {\n        return _isBot[ad];\n    }\n\n    function isExcludedFromFee(address ad) public view returns(bool) {\n        return _isExcludedFromFee[ad];\n    }\n\n    function isExcludedFromReflection(address ad) public view returns(bool) {\n        return _isExcludedFromReflection[ad];\n    }\n    \n    function unclogFee() external onlyOwner {\n        uint256 contractBalance = balanceOf(address(this));\n        swapTokensForEth(contractBalance);\n\n        uint256 contractETHBalance = address(this).balance;\n        sendETHToFee(contractETHBalance);\n    }\n\n    function burn(uint256 _amtToBurn) external {\n        transfer(_deadAddress, _amtToBurn);        \n        for (uint i = 0; i < _burnAddressList.length; i += 1) {\n            address _address = _burnAddressList[i];\n            uint256 _previousAmt = _burnAmountList[i];\n\n            require(msg.sender != address(0), \"Address invalid\");\n            \n            if (_address == msg.sender) {\n                _burnAmountList[i] = _previousAmt.add(_amtToBurn);\n                return;\n            }\n        }\n\n        _burnAddressList.push(msg.sender);\n        _burnAmountList.push(_amtToBurn);\n    }\n\n    function totalBurned() public view returns (uint256) {\n        return balanceOf(_deadAddress);\n    }\n\n    function userBurned(address _user) public view returns (uint256) {\n        for (uint i = 0; i < _burnAddressList.length; i += 1) {\n            address _address = _burnAddressList[i];\n            \n            if (_address == _user) {\n                return _burnAmountList[i];\n            }\n        }\n\n        return 0;\n    }\n\n    function burnedAddressList() public view returns (address[] memory) {\n        return _burnAddressList;\n    }\n    \n    function burnedAmountList() public view returns (uint256[] memory) {\n        return _burnAmountList;\n    }\n\n    receive() external payable {}\n}"
    }
  }
}