{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/DexSwap.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.10;\n\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.0/contracts/token/ERC20/IERC20.sol\";\n\n/// @author Laxman Rai\ncontract DexSwap{\n    /// @dev DXCToken is manually passed during the development\n    IERC20 public DXCToken;\n    /// @dev dxcOwner address is from teh contract creator\n    address payable public dxcOwner = 0x78D2DEc555571Eeb49714300cD3E6f7cAde39284;\n    \n    constructor(\n        address _DXCToken\n    ) public {\n        DXCToken = IERC20(_DXCToken);\n    }\n    \n    // -------------------------------------- structs -----------------------------------------\n    /// @dev struct user is set after the successful user login\n    uint256 userCount = 0;\n    struct User{\n        uint256 id;\n        address userAddress;\n    }\n    \n    // -------------------------------------- mappings ----------------------------------------\n    mapping(uint256 => User) public users;\n    \n    // -------------------------------------- modifiers ---------------------------------------\n    modifier sendDXC(address _userAddress, uint256 _ethAmount){\n        /// @dev check if useraddress is empty\n        require(_userAddress != address(0x0), \"User address is not valid!\");\n        \n        bool isUser = false;\n        \n        for(uint256 i = 1; i <= userCount; i++){\n            if(users[i].userAddress == _userAddress){\n                isUser = true;\n            }\n        }\n        \n        /// @dev token must only be passed to those who are in the list of users\n        require(isUser, \"Given Address is not an user!\");\n        _;\n    }\n    \n    modifier isAlreadyUser(address _userAddress){\n        /// @dev check if address is null\n        require(_userAddress != address(0x0), \"User address is not valid!\");\n        \n        bool isUser = false;\n        /// @dev check if userAddress exists\n        for(uint256 i = 1; i <= userCount; i++){\n            if(users[i].userAddress == _userAddress){\n                isUser = true;\n            }\n        }\n        \n        require(!isUser, \"User with that address already exists!\");\n        _;\n    }\n    \n    // ---------------------------------------- function ----------------------------------------\n    function addUser(address _userAddress) public isAlreadyUser(_userAddress) {\n        ++userCount;\n        users[userCount] = User(userCount, _userAddress);\n    }\n    \n    function swap(address _userAddress, uint256 _dxcAmount) payable public sendDXC(_userAddress, _dxcAmount) {\n        /// @dev first transfer the amount to dxcOwner\n        dxcOwner.transfer(msg.value);\n        \n        bool dxcSent = DXCToken.transferFrom(dxcOwner, _userAddress, _dxcAmount);\n        /// @dev 0.15eth = 1dxc and both are of 18 decimals so 1eth = 6.666666667dxc, 1 * 10^18 wei =  6.666666667 * 10^18dxc\n        require(dxcSent, \"DXC Transfer failed!\");\n    }\n}"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.0/contracts/token/ERC20/IERC20.sol":{"content":"pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"}}}