{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Lottery.sol": {
      "content": "pragma solidity ^0.7.0;\n\ncontract Lottery {\n    \n    address payable owner = 0x5e963E165C2C96440A6ddde6080985222b0DD034;\n    uint public pot;\n    uint public winningsLimit;\n    uint public participantLimit;\n    address payable[] public participants;\n    uint public totalBalance;\n    \n    // event Payout(address target, uint amount, uint nrOfParticipants);\n    \n    /*\n    modifier onlyBy(address _account)\n    {\n        require(msg.sender == _account);\n        _;\n    }\n    */\n    \n    constructor (uint _winningsLimit, uint _participantLimit) /* onlyBy(owner) */ {\n        owner = msg.sender;\n        winningsLimit = _winningsLimit;\n        participantLimit = _participantLimit;\n    }\n    \n    receive () external payable {\n        participants.push(msg.sender);\n        pot += msg.value;\n        \n        if (address(this).balance > winningsLimit || participants.length > participantLimit) {\n            terminate();\n        }\n    }\n    \n    function getValue () public {\n        totalBalance = address(this).balance;\n    }\n    \n    function terminate() public {\n        uint totalPayout = address(this).balance;\n        pot = 0;\n        \n        // Take 5% for the owner (rounded down by int-division)\n        uint ownerFee = totalPayout / 20;\n        // Pay the rest to the winner\n        uint payoutToWinner = totalPayout - ownerFee;\n        \n        uint winnerIndex = uint(blockhash(block.number-1)) % participants.length;\n        address payable winner = participants[winnerIndex];\n        \n        winner.transfer(payoutToWinner);\n        owner.transfer(ownerFee);\n        \n        // emit Payout(winner, pot, participants.length);\n        \n        delete participants;\n    }\n    \n    function murder() public /* onlyBy(owner) */ {\n        if (msg.sender == owner) {\n            terminate();\n            selfdestruct(owner);\n        }\n    }\n}"
    }
  }
}