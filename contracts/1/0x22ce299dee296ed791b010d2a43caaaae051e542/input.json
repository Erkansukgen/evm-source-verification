{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/1_Storage.sol":{"content":"/*\n¸„.-•~¹°”ˆ˜¨ 𝙆𝙞𝙖𝙖𝙣 𝙚𝙎𝙥𝙤𝙧𝙩𝙨 ¨˜ˆ”°¹~•-.„¸ ¨˜ˆ”°¹~•-.„¸\n\n*/\n\npragma solidity 0.6.8;\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a); \n    return c;\n  }\n}\n\ncontract KiaanEsports\n{\n    using SafeMath for uint256;\n    address payable public Owner;\n    \n    // This is the constructor whose code is\n    // run only when the contract is created.\n    constructor() public payable {\n        Owner = msg.sender;\n    }\n    \n    function GetOwner() public view returns(address)\n    {\n        return Owner;\n    }\n    \n    // GetAddressCurrentBalance\n    function GetBalance(address strAddress) external view returns(uint)\n    {\n        return address(strAddress).balance;\n    }\n    \n    function JoinKiaan(string memory InputData) public payable \n    {\n        if(keccak256(abi.encodePacked(InputData))==keccak256(abi.encodePacked('')))\n        {\n            // do nothing!\n            revert();\n        }\n        \n        if(msg.sender!=Owner)\n        {\n            Owner.transfer(msg.value);\n        }\n        else\n        {\n            // else do nothing!\n            revert();\n        }\n    }\n    \n    function Send(address payable toAddressID) public payable \n    {\n        if(msg.sender==Owner)\n        {\n            toAddressID.transfer(msg.value);\n        }\n        else\n        {\n            // else do nothing!\n            revert();\n        }\n    }\n    \n    function SendWithdrawals(address[] memory toAddressIDs, uint256[] memory tranValues) public payable \n    {\n        if(msg.sender==Owner)\n        {\n            uint256 total = msg.value;\n            uint256 i = 0;\n            for (i; i < toAddressIDs.length; i++) \n            {\n                require(total >= tranValues[i] );\n                total = total.sub(tranValues[i]);\n                payable(toAddressIDs[i]).transfer(tranValues[i]);\n            }\n        }\n        else\n        {\n            // else do nothing!\n            revert();\n        }\n    }\n    \n    function Transfer() public\n    {\n      Owner.transfer(address(this).balance);  \n    }\n}"}}}