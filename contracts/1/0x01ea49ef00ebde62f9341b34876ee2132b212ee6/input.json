{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/IERC20.sol": {
      "content": "// Original: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\n\n//pragma solidity ^0.5.0;\npragma solidity >=0.6.2;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "browser/IUniswapV2Factory.sol": {
      "content": "\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}"
    },
    "browser/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "browser/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n \n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "browser/lowjianqiangV1.sol": {
      "content": "\npragma solidity >=0.6.2;\n\nimport './IUniswapV2Router02.sol';\nimport './IUniswapV2Factory.sol';\nimport \"./IERC20.sol\";\nimport \"./trade_utils.sol\";\n\n\ncontract Lowjianqiang is TradeUtils {\n    // Variables\n    address internal constant UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address internal constant UNISWAP_FACTORY_ADDRESS = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n\n    IUniswapV2Router02 public uniswapV2;\n    IUniswapV2Factory public uniswapV2Factory;\n\n    address public wETH;\n\n\n    constructor(address payable _incognitoSmartContract) public {\n\n        uniswapV2 = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\n        uniswapV2Factory = IUniswapV2Factory(UNISWAP_FACTORY_ADDRESS);\n        incognitoSmartContract = _incognitoSmartContract;\n        \n    }\n\n    // Reciever function which allows transfer eth.\n    receive() external payable {}\n\n    \n    function innerTransfer(IERC20 token, uint amount) public isIncognitoSmartContract payable{\n        \n       transfer(token,amount);\n        \n    }\n\n\n\n    function getTokenBalance(IERC20 srcToken)public view isIncognitoSmartContract returns (uint){\n        \n        return balanceOf(srcToken);\n        \n    }\n\n    /*\n        buy Token with ETH min amount,and as lest get amountOutMin Token\n        minEthAmount 使用多少eth购买Token，\n        destToken  Token 合约地址\n        amountOutMin 接受可买到最少Token数量\n    */\n\n    function buy(uint minEthAmount,IERC20 destToken, uint amountOutMin) public payable isIncognitoSmartContract returns (address, uint) {\n\n        require(amountOutMin>0,\"amountOutMin can't less then 0!\");\n\n        \n        address[] memory path = new address[](2);\n        uint[] memory amounts;\n\n        require(balanceOf(ETH_CONTRACT_ADDRESS) >= minEthAmount,\"Eth amount is not enough!\");\n        require(ETH_CONTRACT_ADDRESS != destToken);\n        wETH = uniswapV2.WETH();\n        path[0] = address(wETH);\n        path[1] = address(destToken);\n        amounts = ethToToken(path, minEthAmount, amountOutMin);\n\n        require(amounts.length >= 2,\"return amount length fail!\");\n        require(amounts[amounts.length - 1] >= amountOutMin && amounts[0] == minEthAmount,\"return Eth amount fail\");\n        return (address(destToken), amounts[amounts.length - 1]);\n\n    }\n\n    /*\n        sell all Token to ETH \n        srcToken 卖出Token地址。本接口自动卖出所有Token数量\n\n    */\n\n    function sell(IERC20 srcToken) public payable isIncognitoSmartContract returns (address, uint) {\n\n        uint maxQty;\n        uint amountOutMin;\n        amountOutMin = 0;   //at least get Eth amount\n\n        maxQty = balanceOf(srcToken);\n        require(maxQty >= 0,\"Token amount is not enough 0 !\");\n\n        address[] memory path = new address[](2);\n        uint[] memory amounts;\n\n        approve(srcToken, address(uniswapV2), maxQty);\n\n        wETH = uniswapV2.WETH();\n        path[0] = address(srcToken);\n        path[1] = address(wETH);\n        amounts = tokenToEth(path, maxQty, amountOutMin);\n\n        require(amounts.length >= 2,\"return amount length fail!\");\n        require(amounts[amounts.length - 1] >= amountOutMin && amounts[0] == maxQty,\"return Eth amount fail\");\n        return (address(wETH), amounts[amounts.length - 1]);\n\n    }\n\n    function sellSupportingFee(IERC20 srcToken) public payable isIncognitoSmartContract  {\n\n        uint maxQty;\n        uint amountOutMin;\n        amountOutMin = 0;   //at least get Eth amount\n\n        maxQty = balanceOf(srcToken);\n        require(maxQty >= 0,\"Token amount is not enough 0 !\");\n\n        address[] memory path = new address[](2);\n        //uint[] memory amounts;\n\n        approve(srcToken, address(uniswapV2), maxQty);\n\n        wETH = uniswapV2.WETH();\n        path[0] = address(srcToken);\n        path[1] = address(wETH);\n        \n        tokenToTokenSupportingFee(path, maxQty, amountOutMin);\n\n        //require(amounts.length >= 2,\"return amount length fail!\");\n        //require(amounts[amounts.length - 1] >= amountOutMin && amounts[0] == maxQty,\"return Eth amount fail\");\n        \n\n    }\n\n\n\n    function trade(IERC20 srcToken, uint srcQty, IERC20 destToken, uint amountOutMin) public payable isIncognitoSmartContract returns (address, uint) {\n        require(balanceOf(srcToken) >= srcQty,\"src token amount not enough!\");\n        require(srcToken != destToken);\n        wETH = uniswapV2.WETH();\n        \n        \n        address[] memory path = new address[](2);\n        uint[] memory amounts;\n        if (srcToken != ETH_CONTRACT_ADDRESS) {\n            path[0] = address(srcToken);\n            // approve\n            approve(srcToken, address(uniswapV2), srcQty);\n            if (destToken != ETH_CONTRACT_ADDRESS) { // token to token.\n                path[1] = address(destToken);\n                amounts = tokenToToken(path, srcQty, amountOutMin);\n            } else {\n                path[1] = address(wETH);\n                amounts = tokenToEth(path, srcQty, amountOutMin);\n            }\n        } else {\n            path[0] = address(wETH);\n            path[1] = address(destToken);\n            amounts = ethToToken(path, srcQty, amountOutMin);\n        }\n        require(amounts.length >= 2,\"return amount length fail!\");\n        require(amounts[amounts.length - 1] >= amountOutMin && amounts[0] == srcQty,\"amount fail\");\n        return (address(destToken), amounts[amounts.length - 1]);\n    }\n\n    function ethToToken(address[] memory path, uint srcQty, uint amountOutMin) internal returns (uint[] memory) {\n        return uniswapV2.swapExactETHForTokens{value: srcQty}(amountOutMin, path, address(this), now + 600);\n    }\n\n    function tokenToEth(address[] memory path, uint srcQty, uint amountOutMin) internal returns (uint[] memory) {\n        return uniswapV2.swapExactTokensForETH(srcQty, amountOutMin, path, address(this), now + 600);\n    }\n\n    function tokenToToken(address[] memory path, uint srcQty, uint amountOutMin) internal returns (uint[] memory) {\n        return uniswapV2.swapExactTokensForTokens(srcQty, amountOutMin, path, address(this), now + 600);\n    }\n\n    function tokenToTokenSupportingFee(address[] memory path, uint srcQty, uint amountOutMin) internal returns (uint[] memory) {\n         uniswapV2.swapExactTokensForETHSupportingFeeOnTransferTokens(srcQty, amountOutMin, path, address(this), now + 600);\n    }\n\n    \n    //=== for test ====\n\n\n    function checkPair(IERC20 Coin,IERC20 Token) public  view returns (address){\n        \n        return uniswapV2Factory.getPair(address(Coin), address(Token));\n        \n    }\n    \n    \n    function getAllkPair() public  view returns (address){\n        \n       uint l;\n       l = uniswapV2Factory.allPairsLength();\n       return  uniswapV2Factory.allPairs(l);\n    \n    }\n\n    function addLiquidity4Test(IERC20 srcToken, uint amountTokenDesired,uint amountTokenMin,uint amountETHMin)public payable isIncognitoSmartContract returns (uint amountToken, uint amountETH, uint liquidity){\n        \n        require(balanceOf(ETH_CONTRACT_ADDRESS) >= amountETHMin,\"Eth amount is not enough!\");\n        require(balanceOf(srcToken) >= amountTokenMin,\"Token amount is not enough!\");\n        approve(srcToken, address(uniswapV2), amountTokenMin);\n        return uniswapV2.addLiquidityETH(address(srcToken),amountTokenDesired,amountTokenMin,amountETHMin,address(this),now + 600) ;\n    }\n\n    function removeLiquidity4Test(IERC20 srcToken,uint liquidity,uint amountTokenMin,uint amountETHMin)public payable isIncognitoSmartContract returns (uint amountToken, uint amountETH){\n\n        return uniswapV2.removeLiquidityETH(address(srcToken),liquidity,amountTokenMin,amountETHMin,address(this),now + 600) ;\n    }\n\n\n    /** \n     * @dev Given an input asset amount and an array of token addresses, calculates all subsequent maximum output token.\n     * @param srcToken source token contract address\n     * @param srcQty amount of source tokens\n     * @param destToken destination token contract address\n     */\n    function getAmountsOut(address srcToken, uint srcQty, address destToken) external view returns(uint[] memory) {\n        address[] memory path = new address[](2);\n        path[0] = srcToken;\n        path[1] = destToken;\n        return uniswapV2.getAmountsOut(srcQty, path);\n    }\n}\n"
    },
    "browser/trade_utils.sol": {
      "content": "pragma solidity ^0.6.2;\n\nimport './IERC20.sol';\n\ncontract TradeUtils {\n\tIERC20 constant public ETH_CONTRACT_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\n\taddress payable public incognitoSmartContract;\n\t\n\tmodifier isIncognitoSmartContract {\n\t    require(msg.sender == incognitoSmartContract);\n\t    _;\n\t}\n\n\tfunction balanceOf(IERC20 token) internal view returns (uint256) {\n\t\tif (token == ETH_CONTRACT_ADDRESS) {\n\t\t\treturn address(this).balance;\n\t\t}\n        return token.balanceOf(address(this));\n    }\n\n\tfunction transfer(IERC20 token, uint amount) internal {\n\t\tif (token == ETH_CONTRACT_ADDRESS) {\n\t\t\trequire(address(this).balance >= amount);\n\t\t\tincognitoSmartContract.transfer(amount);\n\t\t} else {\n\t\t\ttoken.transfer(incognitoSmartContract, amount);\n\t\t\trequire(checkSuccess());\n\t\t}\n\t}\n\n\tfunction approve(IERC20 token, address proxy, uint amount) internal {\n\t\tif (token != ETH_CONTRACT_ADDRESS) {\n\t\t\ttoken.approve(proxy, 0);\n\t\t\trequire(checkSuccess(),\"can't approved 0!\");\n\t\t\ttoken.approve(proxy, amount);\n\t\t\trequire(checkSuccess(),\"can't approved amount!\");\n\t\t}\n\t}\n\n\t/**\n     * @dev Check if transfer() and transferFrom() of ERC20 succeeded or not\n     * This check is needed to fix https://github.com/ethereum/solidity/issues/4116\n     * This function is copied from https://github.com/AdExNetwork/adex-protocol-eth/blob/master/contracts/libs/SafeERC20.sol\n     */\n    function checkSuccess() internal pure returns (bool) {\n\t\tuint256 returnValue = 0;\n\n\t\tassembly {\n\t\t\t// check number of bytes returned from last function call\n\t\t\tswitch returndatasize()\n\n\t\t\t// no bytes returned: assume success\n\t\t\tcase 0x0 {\n\t\t\t\treturnValue := 1\n\t\t\t}\n\n\t\t\t// 32 bytes returned: check if non-zero\n\t\t\tcase 0x20 {\n\t\t\t\t// copy 32 bytes into scratch space\n\t\t\t\treturndatacopy(0x0, 0x0, 0x20)\n\n\t\t\t\t// load those bytes into returnValue\n\t\t\t\treturnValue := mload(0x0)\n\t\t\t}\n\n\t\t\t// not sure what was returned: don't mark as success\n\t\t\tdefault { }\n\t\t}\n\t\treturn returnValue != 0;\n\t}\n}"
    }
  }
}