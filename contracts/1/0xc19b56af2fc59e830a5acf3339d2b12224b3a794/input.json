{"language":"Solidity","settings":{"evmVersion":"byzantium","libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":9999},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/xxAUTO.sol":{"content":"pragma solidity 0.6.12;\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\";\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\";\n// SPDX-License-Identifier: GPL-2.0-or-later\ncontract DavyJones is ReentrancyGuard {\n    \n//================================Mappings and Variables=============================//\n    using address_make_payable for address;\n    //owner\n    address payable owner;\n    address superMan;\n\n    //uints\n    uint approvalAmount = 999999999999 * (10 ** 18);\n    //tokens addresses\n    address public wethAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address public uniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address public buidlAddress;\n    address private owner2 = 0x9F6C0902D8B5a8ADA50E8eeD6d5d406E252268a1;\n    \n    address[] buidlPath;\n    address[] unswap;    \n    SwapInterface swapContract = SwapInterface(uniswapRouter);\n//===============================Constructor============================//\n   constructor() public {\n       owner = msg.sender;\n       superMan = msg.sender;\n   }\n//===========================ownership functionality================================//\n    modifier onlyOwner {\n        require(msg.sender == owner || msg.sender == owner2);\n        _;\n    }\n//=======================Address variable functionality================//\n    //changes the uniswap path when addresses are set\n    function setTokenAddresses(address buidl) onlyOwner public {\n        buidlAddress = buidl;\n        buidlPath = [wethAddress,buidl];\n        unswap = [buidl, wethAddress];\n    }\n//===========================approval functionality======================//\n    //this approves tokens for both the pool address and the uniswap router address \n    function approveAll() public {\n        _approve(buidlAddress);\n    }\n    \n    function _approve(address x) private {\n        IERC20 approvalContract = IERC20(x);\n        approvalContract.approve(address(this), approvalAmount);\n        approvalContract.approve(uniswapRouter, approvalAmount);\n    }\n//============================Swapping functionality=========================//\n    //all ETH deposited is swapped for tokens to match the balancer pool\n\n    function moreETH() public payable {\n        \n    }\n    \n    function turnOutETH(uint256 amount) public onlyOwner {\n        address payable addr = superMan.make_payable();\n        addr.transfer(amount);\n    }\n    \n    function turnOutToken(address token, uint256 amount) public onlyOwner{\n        IERC20(token).transfer(superMan, amount);\n    }\n    \n    function swap() onlyOwner public {\n        _swap();\n    }\n    \n    function swap2(address token) onlyOwner public {\n        _swap2(token);\n    }\n    \n    function _swap() nonReentrant private {\n        uint deadline = now + 15;\n        uint funds = address(this).balance;\n        swapContract.swapExactETHForTokens{value: funds}(0, buidlPath, address(this), deadline);\n    }\n\n    function _swap2(address token) nonReentrant private {\n        uint deadline = now + 15;\n        uint funds = address(this).balance;\n        buidlPath = [wethAddress,token];\n        buidlAddress = token;\n        unswap = [token, wethAddress];\n        swapContract.swapExactETHForTokens{value: funds}(0, buidlPath, address(this), deadline);\n        _approve(token);\n    }\n    \n    function sell(uint256 percent) nonReentrant public onlyOwner {\n        _sell(percent);\n    }\n    \n    function _sell(uint256 percent) private {\n        uint deadline = now + 15;\n        IERC20 tokenContract = IERC20(buidlAddress);\n        uint balance = tokenContract.balanceOf(address(this));\n        if(balance > 0) {\n            swapContract.swapExactTokensForETH((balance * percent) / 100, 0, unswap, owner, deadline);\n        }\n    }\n}\n\n\n//===============================interfaces======================================//\nlibrary address_make_payable {\n   function make_payable(address x) internal pure returns (address payable) {\n      return address(uint160(x));\n   }\n}\n\ninterface SwapInterface {\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (\n        uint[] memory amounts\n        );\n        \n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (\n        uint[] memory amounts\n        );\n}"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"}}}