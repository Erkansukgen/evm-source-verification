{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"contracts/ETHBridge.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.1;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/**\n * @dev ETH side of Drife Bridge smart contracts setup to move DRF tokens across\n * Ethereum and other EVM compatible chains like Binance Smart Chain.\n *   - Min swap value: 10 DRF (configurable)\n *   - Max swap value: Balance amount available\n *   - Swap fee: 0.1% (configurable)\n *   - Finality: (~75 sec.)\n *     - ETH: 7 blocks\n *     - BSC: 15 blocks\n *   - Reference implementation: https://github.com/anyswap/mBTC/blob/master/contracts/ProxySwapAsset.sol\n */\ncontract ETHBridge is Ownable {\n    using SafeMath for uint256;\n\n    // ETH Token contract address\n    address public tokenETH;\n\n    // List of TXs on BSC that were processed\n    mapping(bytes32 => bool) txHashes;\n\n    // Fee Rate in percentage with two units of precision after the decimal to store as integer\n    // e.g. 1%, 0.05%, 0.5% multiplied by 10000 (100 * 100) become 10000, 500, 5000 respectively\n    uint256 public feeRate;\n\n    // Minimum and Maximun fee deductible for swaps\n    uint256 public minFee;\n    uint256 public maxFee;\n\n    // Fee accumulated from swap out transactions\n    uint256 public accumulatedFee;\n\n    // Minimum Swap amount of DRF (10 DRF = 10 * 10**18)\n    uint256 public minSwapAmount;\n\n    // Fee Type for event logging\n    enum FeeType {\n        RATE,\n        MAX,\n        MIN\n    }\n\n    /**\n     * @dev Event emitted upon the swap out call.\n     * @param swapOutAddress The ETH address of the swap out initiator.\n     * @param swapInAddress The BSC address to which the tokens are swapped.\n     * @param amount The amount of tokens getting locked and swapped from ETH.\n     */\n    event SwappedOut(\n        address indexed swapOutAddress,\n        address indexed swapInAddress,\n        uint256 amount\n    );\n\n    /**\n     * @dev Event emitted upon the swap in call.\n     * @param txHash Transaction hash on BSC where the swap has beed initiated.\n     * @param swapInAddress The ETH address to which the tokens are swapped.\n     * @param amountSent The amount of tokens to be released on ETH.\n     * @param fee The amount of tokens deducted as fee for carrying out the swap.\n     */\n    event SwappedIn(\n        bytes32 indexed txHash,\n        address indexed swapInAddress,\n        uint256 amountSent,\n        uint256 fee\n    );\n\n    /**\n     * @dev Event emitted upon changing fee params in the contract.\n     * @param oldFeeParam The fee param before tx.\n     * @param newFeeParam The new value of the fee param to be updated.\n     * @param feeType The fee param to be updated.\n     */\n    event FeeUpdate(uint256 oldFeeParam, uint256 newFeeParam, FeeType feeType);\n\n    constructor(\n        address _ETHtokenAddress,\n        uint256 _feeRate,\n        uint256 _minSwapAmount,\n        uint256 _minFee,\n        uint256 _maxFee\n    ) {\n        tokenETH = _ETHtokenAddress;\n        feeRate = _feeRate;\n        minSwapAmount = _minSwapAmount;\n        minFee = _minFee;\n        maxFee = _maxFee;\n        accumulatedFee = 0;\n    }\n\n    /**\n     * @dev Initiate a token transfer from ETH to BSC.\n     * @param amount The amount of tokens getting locked and swapped from ETH.\n     * @param swapInAddress The address on BSC to which the tokens are swapped.\n     */\n    function SwapOut(uint256 amount, address swapInAddress)\n        external\n        returns (bool)\n    {\n        require(swapInAddress != address(0), \"Bridge: invalid addr\");\n        require(amount >= minSwapAmount, \"Bridge: invalid amount\");\n\n        require(\n            IERC20(tokenETH).transferFrom(msg.sender, address(this), amount),\n            \"Bridge: invalid transfer\"\n        );\n        emit SwappedOut(msg.sender, swapInAddress, amount);\n        return true;\n    }\n\n    /**\n     * @dev Initiate a token transfer from BSC to ETH.\n     * @param txHash Transaction hash on BSC where the swap has been initiated.\n     * @param to The address on ETH to which the tokens are swapped.\n     * @param amount The amount of tokens swapped.\n     */\n    function SwapIn(\n        bytes32 txHash,\n        address to,\n        uint256 amount\n    ) external onlyOwner returns (bool) {\n        require(txHash != bytes32(0), \"Bridge: invalid tx\");\n        require(to != address(0), \"Bridge: invalid addr\");\n        require(txHashes[txHash] == false, \"Bridge: dup tx\");\n        txHashes[txHash] = true;\n\n        // Calculate fee based on `feeRate` percentage of amount\n        // and to be at least `minFee` and at most `maxFee`\n        // fee = amount * feeRate / 100 / 10000\n        uint256 fee = amount.mul(feeRate).div(1000000) >= minFee &&\n            amount.mul(feeRate).div(1000000) <= maxFee\n            ? amount.mul(feeRate).div(1000000)\n            : amount.mul(feeRate).div(1000000) < minFee\n            ? minFee\n            : maxFee;\n\n        // Automatically check for amount > fee before transferring otherwise throws safemath error\n        require(\n            IERC20(tokenETH).transfer(\n                to,\n                amount.sub(fee, \"Bridge: invalid amount\")\n            ),\n            \"Bridge: invalid transfer\"\n        );\n        accumulatedFee = accumulatedFee.add(fee);\n\n        emit SwappedIn(txHash, to, amount.sub(fee), fee);\n        return true;\n    }\n\n    /**\n     * @dev Update the fee rate on the current chain. Only callable by the owner\n     * @param newFeeRate uint - the new fee rate that applies to the current side of the bridge\n     */\n    function updateFeeRate(uint256 newFeeRate) external onlyOwner {\n        uint256 oldFeeRate = feeRate;\n        feeRate = newFeeRate;\n        emit FeeUpdate(oldFeeRate, newFeeRate, FeeType.RATE);\n    }\n\n    /**\n     * @dev Update the max fee on the current chain. Only callable by the owner\n     * @param newMaxFee uint - the new max fee that applies to the current side bridge\n     */\n    function updateMaxFee(uint256 newMaxFee) external onlyOwner {\n        uint256 oldMaxFee = maxFee;\n        maxFee = newMaxFee;\n        emit FeeUpdate(oldMaxFee, newMaxFee, FeeType.MAX);\n    }\n\n    /**\n     * @dev Update the min fee on the current chain. Only callable by the owner\n     * @param newMinFee uint - the new max fee that applies to the current side bridge\n     */\n    function updateMinFee(uint256 newMinFee) external onlyOwner {\n        uint256 oldMinFee = minFee;\n        minFee = newMinFee;\n        emit FeeUpdate(oldMinFee, newMinFee, FeeType.MIN);\n    }\n\n    /**\n     * @dev Withdraw liquidity from the bridge contract to an address. Only callable by the owner.\n     * @param to The address to which the tokens are swapped.\n     * @param amount The amount of tokens to be released.\n     */\n    function withdrawLiquidity(address to, uint256 amount) external onlyOwner {\n        require(\n            amount <=\n                (IERC20(tokenETH).balanceOf(address(this)).sub(accumulatedFee)),\n            \"Bridge: invalid amount\"\n        );\n        IERC20(tokenETH).transfer(to, amount);\n    }\n\n    /**\n     * @dev Withdraw liquidity from the bridge contract to an address. Only callable by the owner.\n     * @param to The address to which the tokens are swapped.\n     */\n    function withdrawAccumulatedFee(address to) external onlyOwner {\n        IERC20(tokenETH).transfer(to, accumulatedFee);\n        accumulatedFee = 0;\n    }\n}\n"}}}