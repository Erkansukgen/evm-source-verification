{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Msign.sol":{"content":"pragma solidity 0.6.2;\npragma experimental ABIEncoderV2;\n\n\n// SPDX-License-Identifier: MIT\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n * (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n\ncontract Msign {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    event Activate(address indexed sender, address indexed code, bytes data);\n    event Execute(address indexed sender, bytes32 id);\n    event Sign(address indexed sender, bytes32 id);\n    event EnableSigner(address indexed sender, address indexed account);\n    event DisableSigner(address indexed sender, address indexed account);\n    event SetThreshold(\n        address indexed sender,\n        uint256 previousThreshold,\n        uint256 newThreshold\n    );\n\n    struct Proposal {\n        address author;\n        address code;\n        bytes data;\n        bool pending;\n        mapping(address => uint256) signers;\n    }\n\n    mapping(bytes32 => Proposal) public proposals;\n    EnumerableSet.AddressSet private _signers;\n    uint256 public threshold;\n\n    constructor(uint256 _threshold, address[] memory _accounts) public {\n        uint256 _length = _accounts.length;\n        require(_length >= 1, \"Msign.constructor.EID00085\");\n        require(\n            _threshold >= 1 && _threshold <= _length,\n            \"Msign.constructor.EID00089\"\n        );\n        threshold = _threshold;\n        for (uint256 i = 0; i < _length; ++i) {\n            require(_signers.add(_accounts[i]), \"Msign.constructor.EID00015\");\n        }\n    }\n\n    modifier onlySelf() {\n        require(msg.sender == address(this), \"Msign.onlySelf.EID00001\");\n        _;\n    }\n\n    modifier onlySigner() {\n        require(_signers.contains(msg.sender), \"Msign.onlySigner.EID00082\");\n        _;\n    }\n\n    modifier onlyMulsign(bytes32 id) {\n        require(\n            getMulsignWeight(id) >= threshold,\n            \"Msign.onlyMulsign.EID00083\"\n        );\n        _;\n    }\n\n    modifier onlyAuthor(bytes32 id) {\n        require(\n            proposals[id].author == msg.sender,\n            \"Msign.onlyAuthor.EID00077\"\n        );\n        _;\n    }\n\n    function getHash(address code, bytes memory data)\n        public\n        pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(code, data));\n    }\n\n    function activate(address code, bytes memory data)\n        public\n        onlySigner\n        returns (bytes32)\n    {\n        require(code != address(0), \"Msign.activate.code.EID00090\");\n        require(data.length >= 4, \"Msign.activate.data.EID00090\");\n        bytes32 id = getHash(code, data);\n        if (proposals[id].pending) _clear(id);\n        proposals[id].author = msg.sender;\n        proposals[id].code = code;\n        proposals[id].data = data;\n        proposals[id].pending = true;\n        emit Activate(msg.sender, code, data);\n        return id;\n    }\n\n    function execute(bytes32 id)\n        public\n        onlyMulsign(id)\n        returns (bool success, bytes memory result)\n    {\n        require(proposals[id].pending, \"Msign.execute.EID00022\");\n        (success, result) = proposals[id].code.call(proposals[id].data);\n        require(success, \"Msign.execute.EID00020\");\n        _clear(id);\n        emit Execute(msg.sender, id);\n    }\n\n    function sign(bytes32 id) public onlySigner {\n        require(proposals[id].signers[msg.sender] == 0, \"Msign.sign.EID00084\");\n        require(proposals[id].pending, \"Msign.sign.EID00079\");\n        proposals[id].signers[msg.sender] = 1;\n        emit Sign(msg.sender, id);\n    }\n\n    function cancel(bytes32 id) public onlyAuthor(id) {\n        _clear(id);\n    }\n\n    function enableSigner(address account) public onlySelf {\n        require(_signers.add(account), \"Msign.enable.EID00015\");\n        emit EnableSigner(msg.sender, account);\n    }\n\n    function disableSigner(address account) public onlySelf {\n        require(_signers.remove(account), \"Msign.disable.EID00016\");\n        require(_signers.length() >= threshold, \"Msign.disable.EID00085\");\n        emit DisableSigner(msg.sender, account);\n    }\n\n    function setThreshold(uint256 newThreshold) public onlySelf {\n        require(\n            newThreshold >= 1 && newThreshold <= _signers.length(),\n            \"Msign.assign.EID00089\"\n        );\n        emit SetThreshold(msg.sender, threshold, newThreshold);\n        threshold = newThreshold;\n    }\n\n    function getMulsignWeight(bytes32 id) public view returns (uint256) {\n        uint256 _weights = 0;\n        for (uint256 i = 0; i < _signers.length(); ++i) {\n            _weights += proposals[id].signers[_signers.at(i)];\n        }\n        return _weights;\n    }\n\n    function signers() public view returns (address[] memory) {\n        address[] memory values = new address[](_signers.length());\n        for (uint256 i = 0; i < _signers.length(); ++i) {\n            values[i] = _signers.at(i);\n        }\n        return values;\n    }\n\n    function isSigner(address signer) public view returns (bool) {\n        return _signers.contains(signer);\n    }\n\n    function _clear(bytes32 id) internal {\n        for (uint256 i = 0; i < _signers.length(); ++i) {\n            proposals[id].signers[_signers.at(i)] = 0;\n        }\n        delete proposals[id];\n    }\n}"}}}