{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/Catoshiv2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/*\n * Copyright Â© 2020 reflect.finance. ALL RIGHTS RESERVED.\n */\n\npragma solidity ^0.6.2;\n\n\ninterface IERC20 {\n  function totalSupply() external view returns(uint);\n\n  function balanceOf(address account) external view returns(uint);\n\n  function transfer(address recipient, uint amount) external returns(bool);\n\n  function allowance(address owner, address spender) external view returns(uint);\n\n  function approve(address spender, uint amount) external returns(bool);\n\n  function transferFrom(address sender, address recipient, uint amount) external returns(bool);\n  event Transfer(address indexed from, address indexed to, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\nlibrary Address {\n  function isContract(address account) internal view returns(bool) {\n    bytes32 codehash;\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n    // solhint-disable-next-line no-inline-assembly\n    assembly { codehash:= extcodehash(account) }\n    return (codehash != 0x0 && codehash != accountHash);\n  }\n}\n\ncontract Context {\n  constructor() internal {}\n  // solhint-disable-previous-line no-empty-blocks\n  function _msgSender() internal view returns(address payable) {\n    return msg.sender;\n  }\n}\n\nlibrary SafeMath {\n  function add(uint a, uint b) internal pure returns(uint) {\n    uint c = a + b;\n    require(c >= a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n  function sub(uint a, uint b) internal pure returns(uint) {\n    return sub(a, b, \"SafeMath: subtraction overflow\");\n  }\n\n  function sub(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\n    require(b <= a, errorMessage);\n    uint c = a - b;\n\n    return c;\n  }\n\n  function mul(uint a, uint b) internal pure returns(uint) {\n    if (a == 0) {\n        return 0;\n    }\n\n    uint c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  function div(uint a, uint b) internal pure returns(uint) {\n    return div(a, b, \"SafeMath: division by zero\");\n  }\n\n  function div(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b > 0, errorMessage);\n    uint c = a / b;\n\n    return c;\n  }\n}\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external;\n\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () public{\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract Catoshi is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals = 18;\n\n    mapping (address => uint256) private _rOwned;\n    mapping (address => uint256) private _tOwned;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => uint256) private _balances;\n    \n    mapping (uint256 => bool) private nonceProcessed;\n    uint256 _nonce = 0;\n    \n    mapping (address => bool) private _isExcluded;\n    address[] private _excluded;\n   \n    uint256 private constant MAX = ~uint256(0);\n    uint256 private constant _supply = 42 * 10**6 * 10**18; // total supply of the catoshi token\n    uint256 private _totalSupply = 0; \n    uint256 private _tTotal;\n    uint256 private _rTotal;\n    uint256 private _tFeeTotal;\n    uint256 private _bridgeFee = 2;\n    uint256 private _processedFees = 100000000000;\n    bool private isBridgingEnabled;\n    address public _bridgeAddress = address(0xd070544810510865114Ad5A0b6a821A5BD2E7C49);\n    address public _bridgeFeesAddress = address(0xD378dBeD86689D0dBA19Ca2bab322B6f23765288);\n    address public _swapContractAddress;\n    \n     \n     address private _uni = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // uniswapV2Router on mainnet\n     IUniswapV2Router02 private uniswapV2Router = IUniswapV2Router02(_uni);\n     address private uniswapV2Pair;\n     \n    // TODO: change this out with the final charity wallet address\n    address private _charityWallet = 0xc16FCEED92f1cA3398C50df46532E33Ce513B420;\n    address system;\n\n    // Max transfer size per wallet\n    uint256 private  _MAX_TX_SIZE;\n\n    uint private curTime;\n\n    event SwapRequest(\n        address to,\n        uint256 amount,\n        uint256 nonce\n    );\n\n    modifier onlySystem() {\n        require(system == _msgSender(), \"Ownable: caller is not the system\");\n        _;\n    }\n\n    \n    constructor (string memory cats_name, string memory cats_symbol,address _system)  public {\n        \n        uint256 burnSupply = _supply.div(100).mul(50);  // initial burn supply from total supply, 50%\n\n        // subtract burn supply from total supply\n        _tTotal = _supply.sub(burnSupply);\n\n        // reflection total from burnt total supply.\n        _rTotal = (MAX - (MAX % _tTotal));\n\n        _rOwned[_msgSender()] = _rTotal; // reflection token owned\n\n        _MAX_TX_SIZE = _tTotal.div(100).div(100).mul(25);  // 0.25 percent of totalsupply, max transfer per wallet\n\n        _name = cats_name; _symbol = cats_symbol;\n        \n        curTime = now;\n\n        system = _system;\n        \n        isBridgingEnabled = false;\n        \n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\n            .createPair(address(this), uniswapV2Router.WETH());\n\n        emit Transfer(address(0), _msgSender(), _supply); // total supply to contract creator\n        emit Transfer(_msgSender(), address(0), burnSupply); // initial burn 50% token from contract creator\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function isExcluded(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function totalFees() public view returns (uint256) {\n        return _tFeeTotal;\n    }\n\n    function setSystem(address _system) external onlyOwner {\n        system = _system;\n    }\n    \n    function getUniswapV2Router() external view returns(address) {\n        return address(uniswapV2Router);\n    }\n    \n    function setUniswapV2Router(address _uniswapV2Router) external onlyOwner {\n        uniswapV2Router = IUniswapV2Router02(_uniswapV2Router);\n    }\n    \n    function setBridgeFeesAddress(address bridgeFeesAddress) external onlyOwner {\n        _bridgeFeesAddress = bridgeFeesAddress;\n    }\n    \n    function setSwapContractAddress (address swapContractAddress) external onlyOwner {\n        _swapContractAddress = swapContractAddress;\n    }\n    \n    function setProcessedFees(uint256 processedFees) external onlyOwner {\n        _processedFees = processedFees;\n    }\n    \n    function getProcessedFees() external view returns (uint256){\n        return _processedFees;\n    }\n     \n    function setBridgingStatus(bool isEnabled) external onlyOwner {\n        isBridgingEnabled = isEnabled;\n    }\n    function getBridgingStatus() external view returns (bool) {\n        return isBridgingEnabled;\n    }\n\n   \n\n\n\n\n    // for another burn like 3.7 million or some more\n    function burnOf(uint256 tAmount) public {\n        uint256 currentRate =  _getRate();\n        uint256 rAmount = tAmount.mul(currentRate);\n\n        // subtract additional burn from total supply\n        _tTotal = _tTotal.sub(tAmount);\n\n        // subtract additional burn from reflection supply\n        _rTotal = _rTotal.sub(rAmount);\n\n        emit Transfer(_msgSender(), address(0), tAmount);\n    }\n\n    function reflect(uint256 tAmount) public {\n        address sender = _msgSender();\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\n        (uint256 rAmount,,,,,,) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rTotal = _rTotal.sub(rAmount);\n        _tFeeTotal = _tFeeTotal.add(tAmount);\n    }\n\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\n        if (!deductTransferFee) {\n            (uint256 rAmount,,,,,,) = _getValues(tAmount);\n            return rAmount;\n        } else {\n            (,uint256 rTransferAmount,,,,,) = _getValues(tAmount);\n            return rTransferAmount;\n        }\n    }\n\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n        uint256 currentRate =  _getRate();\n        return rAmount.div(currentRate);\n    }\n\n    function excludeAccount(address account) external onlyOwner() {\n        require(!_isExcluded[account], \"Account is already excluded\");\n        if(_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n    function includeAccount(address account) external onlyOwner() {\n        require(_isExcluded[account], \"Account is already included\");\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function getMinute(uint timestamp) public pure returns (uint8) {\n        return uint8((timestamp / 60) % 60);\n    }\n    \n    function _takeLiquidity(uint256 tLiquidity) private {\n        uint256 currentRate =  _getRate();\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\n        if(_isExcluded[address(this)])\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\n    }\n    \n    function swapTokensForEth(uint256 tokenAmount) private  {\n            // generate the uniswap pair path of token -> weth\n            address[] memory path = new address[](2);\n            path[0] = address(this);\n            path[1] = uniswapV2Router.WETH();\n\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n            // make the swap\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n                tokenAmount,\n                0, // accept any amount of ETH\n                path,\n                _charityWallet,\n                block.timestamp\n            );\n        }\n        \n    // function sendETHToCharity(uint256 amount) private {\n    //     payable(_charityWallet).transfer(amount);\n    // }\n\n    function _transfer(address sender, address recipient, uint256 amount) private  {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n\n        uint diffTime = now - curTime; \n        // bot protection max 0.25% of total supply per transaction\n        if(getMinute(diffTime) < 15 ){\n            if(sender != owner() && recipient != owner())\n                require(amount <= _MAX_TX_SIZE, \"Transfer amount exceeds the mxTxAmount.\");\n        }\n        \n        bool useRFI;\n        if(recipient == uniswapV2Pair || msg.sender == _swapContractAddress) {\n            useRFI = false;\n        }\n        else {\n            useRFI = true;\n        }\n        \n        _transferTokens(sender,recipient,amount,useRFI);\n        \n       \n    }\n    \n    function _transferTokens(address sender, address recipient, uint256 amount, bool useRFI) internal{\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n            _transferFromExcluded(sender, recipient, amount, useRFI);\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferToExcluded(sender, recipient, amount, useRFI);\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n            _transferStandard(sender, recipient, amount, useRFI);\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferBothExcluded(sender, recipient, amount, useRFI);\n        } else {\n            _transferStandard(sender, recipient, amount, useRFI);\n        }\n    }\n\n    function _transferStandard(address sender, address recipient, uint256 tAmount, bool useRFI) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 burnFee, uint256 charityFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n    \n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n\n        if(useRFI == false) {\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n            emit Transfer(sender,recipient,tAmount);\n            return;\n        }\n        \n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n\n\n        uint256 currentRate =  _getRate();\n        uint256 rBurnFee = burnFee.mul(currentRate);\n\n        \n       \n        _takeLiquidity(charityFee);\n        swapTokensForEth(balanceOf(address(this)));\n        // sendETHToCharity(address(this).balance);\n            \n        \n        \n        _reflectFee(rFee, tFee);\n\n        _tTotal = _tTotal.sub(burnFee); // subtract 2% burn from total supply\n        _rTotal = _rTotal.sub(rBurnFee); // subtract 2% burn from reflection supply\n        \n        \n\n        emit Transfer(sender, recipient, tTransferAmount);\n        emit Transfer(_msgSender(), address(0), burnFee);\n    }\n\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount, bool useRFI) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 burnFee, uint256 charityFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        \n         if(useRFI == false) {\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n            _tOwned[recipient] = _tOwned[recipient].add(tAmount);\n\n            emit Transfer(sender,recipient,tAmount);\n            return;\n        }\n\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);     \n\n\n        uint256 currentRate =  _getRate();\n        uint256 rBurnFee = burnFee.mul(currentRate);\n        \n        _takeLiquidity(charityFee);\n        swapTokensForEth(balanceOf(address(this)));\n        \n        _reflectFee(rFee, tFee);\n\n\n        _tTotal = _tTotal.sub(burnFee); // subtract 2% burn from total supply\n        _rTotal = _rTotal.sub(rBurnFee); // subtract 2% burn from reflection supply\n        \n\n        emit Transfer(sender, recipient, tTransferAmount);\n        emit Transfer(_msgSender(), address(0), burnFee);\n    }\n\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount, bool useRFI) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 burnFee, uint256 charityFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        \n        if(useRFI == false) {\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n\n            emit Transfer(sender,recipient,tAmount);\n            return;\n        }\n\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);  \n\n\n        uint256 currentRate =  _getRate();\n        uint256 rBurnFee = burnFee.mul(currentRate);\n        \n        _takeLiquidity(charityFee);\n        swapTokensForEth(balanceOf(address(this)));\n        \n        _reflectFee(rFee, tFee);\n\n        _tTotal = _tTotal.sub(burnFee); // subtract 2% burn from total supply\n        _rTotal = _rTotal.sub(rBurnFee); // subtract 2% burn from reflection supply\n\n\n        emit Transfer(sender, recipient, tTransferAmount);\n        emit Transfer(_msgSender(), address(0), burnFee);\n    }\n\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount, bool useRFI) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 burnFee, uint256 charityFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        \n        if(useRFI == false) {\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\n            _tOwned[recipient] = _tOwned[recipient].add(tAmount);\n\n            emit Transfer(sender,recipient,tAmount);\n            return;\n        }\n\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);       \n\n\n        uint256 currentRate = _getRate();\n        uint256 rBurnFee = burnFee.mul(currentRate);\n        \n        _takeLiquidity(charityFee);\n        swapTokensForEth(balanceOf(address(this)));\n\n        _reflectFee(rFee, tFee);\n\n        _tTotal = _tTotal.sub(burnFee); // subtract 2% burn from total supply\n        _rTotal = _rTotal.sub(rBurnFee); // subtract 2% burn from reflection supply\n        \n\n        emit Transfer(sender, recipient, tTransferAmount);\n        emit Transfer(_msgSender(), address(0), burnFee);\n    }\n\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\n        _rTotal = _rTotal.sub(rFee);\n        _tFeeTotal = _tFeeTotal.add(tFee);\n    }\n\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\n        (uint256 tTransferAmount, uint256 tFee, uint256 burnFee, uint256 charityFee) = _getTValues(tAmount);\n\n        uint256 currentRate =  _getRate();\n\n        uint256 amount = tAmount;\n\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(amount, tFee, burnFee, charityFee, currentRate);\n        \n        return (rAmount, rTransferAmount, rFee, burnFee, charityFee, tTransferAmount, tFee);\n    }\n\n    function _getTValues(uint256 tAmount) private pure returns (uint256, uint256, uint256, uint256) {\n        uint256 tFee = tAmount.div(100).mul(3); // 3% reflection fee to token holders\n\n        uint256 burnFee = tAmount.div(100).mul(2); // 2% tax to burn\n\n        uint256 charityFee = tAmount.div(100).mul(1); // 1% to charity wallet address\n\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(burnFee).sub(charityFee);\n\n        return (tTransferAmount, tFee, burnFee, charityFee);\n    }\n\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 burnFee, uint256 charityFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n        uint256 rAmount = tAmount.mul(currentRate);\n        uint256 rFee = tFee.mul(currentRate);\n        uint256 rBurnFee = burnFee.mul(currentRate);\n        uint256 rCharityFee = charityFee.mul(currentRate);\n        \n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rBurnFee).sub(rCharityFee);\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n    function _getRate() public view returns(uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _getCurrentSupply() public view returns(uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;      \n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n        }\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n\n     /**\n   * @dev Function to set bridegebase address\n   * @param add Address for bridgebase smart contract.\n   */\n  function setBridgeAddress(address add) public onlyOwner returns(bool){\n    require(add != address(0),\"Invalid Address\");\n    _bridgeAddress = add;\n    return true;\n  }\n\n     /**\n   * @dev Function for setting mint fee by owner\n   * @param bridgeFee Mint Fee\n   */\n  function setSwapFee(uint256 bridgeFee) public onlyOwner returns(bool){\n    _bridgeFee = bridgeFee;\n    return true;\n  }\n\n  /**\n   * @dev Function for getting rewards percentage by owner\n   */\n  function getSwapFee() public view returns(uint256){\n    return _bridgeFee;\n  }\n  \n  function getSwapStatus(uint256 nonce) view external returns(bool) {\n      return nonceProcessed[nonce];\n  }\n\n    function swap (uint256 amount) external payable{\n        require(isBridgingEnabled, \"bridging is disabled\");\n        require(msg.value>= _processedFees, \"Insufficient processed fees\");\n        _nonce = _nonce.add(uint256(1));\n        _transferTokens(_msgSender(),_bridgeAddress,amount,false);\n        emit SwapRequest(_msgSender(),amount,_nonce);\n    }\n\n    function feeCalculation(uint256 amount) public view returns(uint256) { \n       uint256 _amountAfterFee = (amount-(amount.mul(_bridgeFee)/1000));\n        return _amountAfterFee;\n    }  \n\n    function swapBack (address to, uint256 amount, uint256 nonce) external onlySystem{\n        require(!nonceProcessed[nonce], \"Swap is already proceeds\");\n        nonceProcessed[nonce] = true;\n        uint256 temp = feeCalculation(amount);\n        uint256 fees = amount.sub(temp);\n        _transferTokens(_bridgeAddress,to,temp,false);\n        _transferTokens(_bridgeAddress,_bridgeFeesAddress,fees,false);\n\n    }  \n    \n    function withdrawETH(uint256 amount, address receiver) external onlyOwner {\n        require(amount <= address(this).balance,\"amount exceeds contract balance\");\n        payable(receiver).transfer(amount);\n    }\n}"
    }
  }
}