{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "Revenue.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface KILLAzInterface {\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n    function balanceOf(address owner) external view returns (uint256 balance);\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n    function totalSupply() external view returns (uint256);\n    function getApproved(uint256 tokenId) external view returns (address operator);\n}\n\ncontract Revenue is Ownable {\n    // the account's address starting oracle service\n    address private immutable ORACLE;\n    // 0x21850dcfe24874382b12d05c5b189f5a2acf0e5b\n    address private immutable KILLAz;\n    // 0xe4d0e33021476ca05ab22c8bf992d3b013752b80\n    address private immutable LadyKILLAz;\n\n    uint256 private updateTime;\n    uint256 private totalPairs;\n\n    mapping(uint256 => uint256) private listedMales;\n    mapping(uint256 => uint256) private listedFeMales;\n    mapping(uint256 => uint256) private usedMales;\n    mapping(uint256 => uint256) private usedFeMales;\n    mapping(address => uint256) private revenues;\n\n    constructor(\n        address _ORACLE,\n        address _KILLAz,\n        address _LadyKILLAz\n    ) {\n        ORACLE = _ORACLE;\n        KILLAz = _KILLAz;\n        LadyKILLAz = _LadyKILLAz;\n    }\n\n    event Claimed(uint256 share, uint256 amount);\n    event Withrawn(uint256 amount, uint256 balance);\n\n    modifier onlyOracle() {\n        require(msg.sender == ORACLE, \"You are not oracle provider\");\n        _;\n    }\n\n    /**\n     * Set starting update since right now when you are oracle provider.\n     */\n    function startUpdate() public onlyOracle {\n        totalPairs = 0;\n        updateTime = block.timestamp;\n    }\n\n    /**\n     * End updating when you are oracle provider.\n     */\n    function endUpdate(uint256 totalKillaz, uint256 totalLadyKillaz) public onlyOracle {\n        totalKillaz = KILLAzInterface(KILLAz).totalSupply() - totalKillaz;\n        totalLadyKillaz = KILLAzInterface(LadyKILLAz).totalSupply() - totalLadyKillaz;\n        totalPairs = totalKillaz > totalLadyKillaz ? totalLadyKillaz : totalKillaz;\n    }\n\n    /**\n     * Update the token's listing status for sale on OpenSea\n     */\n    function updateListing(address token, uint256[] memory tokenIds) public onlyOracle {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            if (token == KILLAz) {\n                listedMales[tokenIds[i]] = block.timestamp;\n            } else if (token == LadyKILLAz) {\n                listedFeMales[tokenIds[i]] = block.timestamp;\n            }\n        }\n    }\n\n    /**\n     * Claim the share proportional to the total of supplied male and female tokens according to the restricted condition\n     */\n    function claimShare() public {\n        require(totalPairs > 0, \"You can't claim while processing update\");\n        // get available male tokens\n        (uint256 males, uint256[] memory maleIds) = getPairsOf(\n            KILLAz,\n            msg.sender\n        );\n        require(males > 0, \"You don't have any token pairs\");\n\n        // get available female tokens\n        (uint256 females, uint256[] memory femaleIds) = getPairsOf(\n            LadyKILLAz,\n            msg.sender\n        );\n        require(females > 0, \"You don't have any token pairs\");\n\n        // choose less value between male and female's count as pairs\n        uint256 pairs = males > females ? females : males;\n\n        // calculate share and amount proportional to the total pairs\n        uint256 share = (pairs * 10000000000) / totalPairs;\n        uint256 amount = (address(this).balance * share) / 10000000000;\n\n        // set the timestamp when NFT is used as a pair in this period\n        while (pairs > 0) {\n            pairs--;\n            usedMales[maleIds[pairs]] = block.timestamp;\n            usedFeMales[femaleIds[pairs]] = block.timestamp;\n        }\n        revenues[msg.sender] += amount;\n\n        emit Claimed(share, amount);\n    }\n\n    function getPairsOf(address token, address from)\n        public\n        view\n        returns (uint256, uint256[] memory)\n    {\n        uint256 balance = KILLAzInterface(token).balanceOf(from);\n        require(balance > 0, \"You don't have any token pairs\");\n\n        uint256[] memory tokenIds = new uint256[](balance);\n        uint256 length = 0;\n\n        while (balance > 0) {\n            balance--;\n            uint256 tokenId = KILLAzInterface(token).tokenOfOwnerByIndex(\n                from,\n                balance\n            );\n            // check if it is listed or used in the past in this period\n            if (\n                token == KILLAz &&\n                (listedMales[tokenId] >= updateTime ||\n                    usedMales[tokenId] >= updateTime)\n            ) {\n                continue;\n            }\n            if (\n                token == LadyKILLAz &&\n                (listedFeMales[tokenId] >= updateTime ||\n                    usedFeMales[tokenId] > updateTime)\n            ) {\n                continue;\n            }\n            tokenIds[length] = tokenId;\n            length++;\n        }\n\n        return (length, tokenIds);\n    }\n\n    /**\n     * get the revenue's balance of account\n     */\n    function balanceOf(address from) public view returns (uint256) {\n        return revenues[from];\n    }\n\n    /**\n     * withraw revenue of argumented amount\n     */\n    function withrawShare(uint256 amount) public {\n        require(\n            address(this).balance >= amount && revenues[msg.sender] >= amount,\n            \"Requested amount exceeds the balance\"\n        );\n        revenues[msg.sender] -= amount;\n        payable(msg.sender).transfer(amount);\n\n        emit Withrawn(amount, revenues[msg.sender]);\n    }\n\n    receive() external payable {}\n}\n"
    }
  }
}