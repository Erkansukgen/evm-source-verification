{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "gas-rebalancer.sol": {
      "content": "pragma solidity ^0.6.6;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n\ninterface ideposit {\n    function deposit() payable external;\n}\n\ninterface Drainable {\n    function drainEth(uint amount,address payable _to) external ;\n    function drainToken(address token, uint amount,address _to) external;\n}\n\ninterface Withdrawable {\n    function withdraw(uint wad)  external;\n}\n\ncontract GasRebalancer is Drainable {\n\n\n    address public owner;\n    address public proxy;\n\n    constructor(address owner) public{\n        owner = msg.sender;\n    }\n    modifier isAdmin(){\n        require(msg.sender == owner);\n        _;\n    }\n\n    function setProxy(address addr) isAdmin public {\n        proxy = addr;\n    }\n    \n    function setAdmin(address addr) isAdmin public {\n        owner = addr;\n    }\n    \n    //\"0x8f4b176c54585c5c7dCB0240939D75cb3727bEeF\",\"1\",\"0x2f1e1350ee952663a62e45be82f8e25b1c0cebbf\"\n    //[\"0x2f1e1350ee952663a62e45be82f8e25b1c0cebbf\",\"0x2f1e1350ee952663a62e45be82f8e25b1c0cebbf\",\"0x2f1e1350ee952663a62e45be82f8e25b1c0cebbf\"],[100,\"5000\",12],\"0x8f4b176c54585c5c7dCB0240939D75cb3727bEeF\",\"0\"\n    function rebalance(address[] memory _addrs,uint256[] memory _amounts,address _token, uint256 _withhrawableAmount) isAdmin public payable {\n\n\n        if (_withhrawableAmount > 0){\n            Drainable(proxy).drainToken(_token,_withhrawableAmount, address(this));\n            Withdrawable(_token).withdraw(_withhrawableAmount);\n        }\n\n        require(_addrs.length == _amounts.length);\n\n        for(uint i; i < _addrs.length;i++) {\n            payable(_addrs[i]).transfer(_amounts[i]);\n        }\n    }\n\n    function drainProxy(address token, uint amount,address _to) isAdmin  public {\n        Drainable(proxy).drainToken(token,amount, address(this));\n        Withdrawable(token).withdraw(amount);\n    }\n\n    function drainToken(address token, uint amount,address _to) isAdmin override public {\n        IERC20(token).transfer(_to, amount);\n    }\n\n    function drainEth(uint amount,address payable _to) isAdmin override public {\n        _to.send(amount);\n    }\n\n    receive() external payable {\n    }\n}"
    }
  }
}