{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/YBREE.sol":{"content":"pragma solidity ^0.6.0;\r\n\r\ncontract ERC20Basic {\r\n\r\n    string public constant name = \"Yield Breeder\";\r\n    string public constant symbol = \"YBREE\";\r\n    uint8 public constant decimals = 18;  \r\n    address public _owner;\r\n    \r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Received(address _from, uint _amount);\r\n    event Withdrew(address _to, uint _amount, string message);\r\n   \r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    \r\n    uint256 initialSupply_ = 2000000;\r\n    uint256 maxSupply = 10000000;\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n   constructor() public {  \r\n\tinitialSupply_ = initialSupply_ *(10**uint256(decimals));\r\n\tbalances[msg.sender] = initialSupply_;\r\n    }  \r\n    \r\n    \r\n\r\nmodifier onlyOwner {\r\n  require(msg.sender == _owner);\r\n  _;\r\n}\r\n\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n\treturn initialSupply_;\r\n    }\r\n    \r\n    function balanceOf(address tokenOwner) public view returns (uint) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function transfer(address receiver, uint numTokens) public returns (bool) {\r\n        require(numTokens <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        balances[receiver] = balances[receiver].add(numTokens);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address delegate, uint numTokens) public returns (bool) {\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address delegate) public view returns (uint256) {\r\n        return allowed[owner][delegate];\r\n    }\r\n\r\n    function transferFrom(address owner, address buyer, uint numTokens) public returns (bool) {\r\n        \r\n        require(numTokens <= balances[owner]);    \r\n        require(numTokens <= allowed[owner][msg.sender]);\r\n        balances[owner] = balances[owner].sub(numTokens);\r\n        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\r\n        balances[buyer] = balances[buyer].add(numTokens);\r\n        emit Transfer(owner, buyer, numTokens);\r\n        return true;\r\n    }\r\n    \r\n    function mint() public onlyOwner returns(uint256)  \r\n    {\r\n    \r\n        balances[msg.sender] += 1;\r\n        initialSupply_ += 1;\r\n        return initialSupply_;\r\n        \r\n    }\r\n    \r\n     function capped() public\r\n    {\r\n        require(mint() <= maxSupply,\"limit exceeded\");\r\n    }\r\n\r\n \r\n    }\r\n\r\nlibrary SafeMath { \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n}"}}}