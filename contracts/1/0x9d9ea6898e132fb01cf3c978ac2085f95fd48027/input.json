{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/MasterChef.sol":{"content":"pragma solidity 0.6.3;\n\n\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n \n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n \n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n \n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n\n\n\n\n\n\n\nlibrary Address {\n\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n\ncontract MasterChef is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // Info of each user.\n    struct UserInfo {\n\t\tuint256 pid;\n        uint256 amount;     // How many LP tokens the user has provided.\n\t\tuint256 reward;\n        uint256 rewardPaid; \n\t\tuint256 userRewardPerTokenPaid;\n    }\n\t// Info of each user that stakes LP tokens.\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\n\t\n\n\t\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken;           // Address of LP token contract.\n        uint256 allocPoint;       // How many allocation points assigned to this pool. Pizzas to distribute per block.\n        uint256 lastRewardTime;  // Last block number that Pizzas distribution occurs.\n        uint256 accPizzaPerShare; // Accumulated Pizzas per share, times 1e18. See below.\n\t\tuint256 totalPool;\n    }\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n\t\n\n\n\n    \n\tstruct User {\n        uint id; \n        address referrer; \n\n\t\tuint256[] referAmount;\n\n\t\tuint256 referReward;\n\t\t\n\t\tuint256[] referCount;\n\t\n\t\tuint256 referRewardPerTokenPaid;\n\n    }\t\n\tmapping(address => User) public users;\n\t\n\n\tuint public lastUserId = 2;\n\tmapping(uint256 => address) public regisUser;\n\n\n\n\t\n\t\n\t\n\n\tbool initialized = false;\n\n    //uint256 public initreward = 1250*1e18;\n\n    uint256 public starttime;\n\n    uint256 public periodFinish = 0;\n\n    uint256 public rewardRate = 0;\n\n    uint256 public totalMinted = 0;\n\n\n\n    IERC20 public pizza ;\n\n\n\n\taddress public defaultReferAddr;\n\t\n\taddress public projectAddress;\n\t\n\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    // Bonus muliplier for early pizza makers.\n    uint256 public constant BONUS_MULTIPLIER = 1;\n\n\n\n\n    event RewardPaid(address indexed user, uint256 reward);\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\n\n //constructor\n   // function initContract \n\t constructor (IERC20 _pizza,uint256 _rewardRate,uint256 _starttime,uint256 _periodFinish,address _defaultReferAddr,address _projectAddress) public onlyOwner{\t\n\t\trequire(initialized == false,\"has initialized\");\n        pizza = _pizza;\n\t\trewardRate = _rewardRate;\n\t\tstarttime = _starttime;\n\t\tperiodFinish = _periodFinish;\n\t\tdefaultReferAddr =  _defaultReferAddr;\n\t\tprojectAddress = _projectAddress;\n\t\n\t\tUser memory user = User({\n            id: 1,\n            referrer: address(0),\n            referAmount:new uint256[](2),\n\t\t\treferReward:0,\n\t\t\treferCount:new uint256[](2),\n\t\t\treferRewardPerTokenPaid:0\t\t\n        });\t\t\n\t\tusers[defaultReferAddr] = user;\t\n\t\t\n\t\tregisUser[1] = \tdefaultReferAddr;\n\t\tinitialized = true;\t\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\t\n\n    function isUserExists(address user) public view returns (bool) {\n\t\treturn (users[user].id != 0);\n    }\n\t\n\n\t\n\tfunction registrationExt(address referrerAddress) external {\n        registration(msg.sender, referrerAddress);\n    }\n\n    function registration(address userAddress, address referrerAddress) private {\n       //require(msg.value == 0.05 ether, \"registration cost 0.05\");\n        require(!isUserExists(userAddress), \"user exists\");\n        require(isUserExists(referrerAddress), \"referrer not exists\");\n        \n       // uint32 size;\n        //assembly {\n        //    size := extcodesize(userAddress)\n       // }\n\t\t//require(size == 0, \"cannot be a contract\");\n\t\trequire(!Address.isContract(userAddress), \"cannot be a contract\");\n        \n \n        User memory user = User({\n            id: lastUserId,\n            referrer: referrerAddress,\n\t\t\treferAmount:new uint256[](2),\n\t\t\treferReward:0,\n\t\t\treferCount:new uint256[](2),\n\t\t\treferRewardPerTokenPaid:0\t\t\n        });\n\t\t\n\n\t\t\n\t\tregisUser[lastUserId] = userAddress;\n        \n        users[userAddress] = user;\n\t\t\n\t\tusers[referrerAddress].referCount[0] = users[referrerAddress].referCount[0].add(1);\n\t\t\n\t\taddress _refer = users[referrerAddress].referrer;\n\t\tif(_refer != address(0)){\n\t\t\tusers[_refer].referCount[1] = users[_refer].referCount[1].add(1);\n\t\t}\n\t\t\n        lastUserId++;\n        \n        emit  Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\n    }\n\t\n\n\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    function addLp(uint256 _allocPoint, IERC20 _lpToken) public onlyOwner {   \n        uint256 lastRewardTime = block.timestamp > starttime ? block.timestamp : starttime;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo.push(PoolInfo({\n            lpToken: _lpToken,\n            allocPoint: _allocPoint,\n            lastRewardTime: lastRewardTime,\n            accPizzaPerShare: 0,\n\t\t\ttotalPool:0\n        }));\t\t\n    }\n\t\n\t\n\n\n    // Update the given pool's Pizza allocation point. Can only be called by the owner.\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOwner {\n\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\t\n\tfunction setTotalAllocPoint(uint256 _totalAllocPoint) public onlyOwner{\n\t\ttotalAllocPoint = _totalAllocPoint;\n\t}\n\t\n\tfunction setRewardRate(uint256 _rewardRate) public onlyOwner {\n\t\trewardRate = _rewardRate;\t\n\t} \n\n\t\n  \n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n        if (_to <= periodFinish) {\n            return _to.sub(_from).mul(BONUS_MULTIPLIER);\n        } else if (_from >= periodFinish) {\n            return _to.sub(_from);\n        } else {\n            return periodFinish.sub(_from).mul(BONUS_MULTIPLIER).add(\n                _to.sub(periodFinish)\n            );\n        }\n    }\n\n\tfunction getRewardRate() public view returns(uint256){\n\t\t\n\t\tif(totalMinted < 80000*1e18){\n\t\t\treturn rewardRate;\n\t\t}else if(totalMinted >= 80000*1e18 && totalMinted <= 180000 * 1e18){\n\t\t\treturn rewardRate.mul(50).div(100);\n\t\t}else{\n\t\t\treturn 0;\n\t\t}\n\t}\n\n    function pendingPizza(uint256 _pid, address _user) public view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accPizzaPerShare = pool.accPizzaPerShare;\n        uint256 lpSupply = pool.totalPool;\n\t\tuint256 result = user.reward;\n        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\n            uint256 multiplier =  getMultiplier(pool.lastRewardTime, block.timestamp);\n            uint256 pizzaReward = multiplier.mul(getRewardRate()).mul(pool.allocPoint).div(totalAllocPoint);\n            accPizzaPerShare = pool.accPizzaPerShare.add(pizzaReward.mul(1e18).div(lpSupply));\n        }\n\n\t\tresult = result.add(user.amount.mul((accPizzaPerShare).sub(user.userRewardPerTokenPaid)).div(1e18));\n\t\n        \n\t\treturn result;\n    }\n\t\n\n\tfunction pendingAllPizza(address _user) public view returns (uint256) {\n\t\tuint256  result = 0;\n\t\tfor(uint256 i = 0;i< poolInfo.length;i++ ){\n\t\t\tresult = result.add(pendingPizza(i,_user));\n\t\t}\n        return result;\n    }\n\t\n\n\tfunction allPizzaAmount(address _user) public view returns (uint256) {\n\t\tuint256 result = 0;\n\t\tfor(uint256 i = 0;i< poolInfo.length;i++ ){\n\t\t\tUserInfo storage user = userInfo[i][_user];\n\t\t\tresult = result.add(pendingPizza(i,_user).add(user.rewardPaid));\n\t\t}\n        return result;\n    }\n\t\n\n\tfunction getAllDeposit(address _user) public view returns (uint256) {\n\t\tuint256 result = 0;\n\t\tfor(uint256 i = 0;i< poolInfo.length;i++ ){\n\t\t\tUserInfo storage user = userInfo[i][_user];\t\t\n\t\t\tresult = result.add(user.amount);\n\t\t}\n        return result;\n    }\n\n\n\n\tfunction getReferCount(address userAddress) public view returns(uint256[] memory){\n\t\n\t\tif(isUserExists(userAddress)){\n\t\t\treturn\tusers[userAddress].referCount;\n\t\t}\n\t\treturn new uint256[](2);\n\t}\n\t\n\n\n\tfunction getReferAmount(address _user,uint256 _index) public view returns(uint256){\n\t\tif(isUserExists(_user)){\n\t\t\treturn\tusers[_user].referAmount[_index];\n\t\t}\n\t\treturn 0;\n\t}\n\t\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid,address _user) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.timestamp <= pool.lastRewardTime) {\n            return;\n        }\n        uint256 lpSupply = pool.totalPool;\n        if (lpSupply == 0) {\n            pool.lastRewardTime = block.timestamp;\n            return;\n        }\n\t\tUserInfo storage user = userInfo[_pid][_user];\n\t\t\n        uint256 multiplier = getMultiplier(pool.lastRewardTime, block.timestamp);\n        uint256 pizzaReward = multiplier.mul(getRewardRate()).mul(pool.allocPoint).div(totalAllocPoint);\n        totalMinted = totalMinted.add(pizzaReward);\n\n\n\t\t//pizza.mint(address(this), pizzaReward);\n        pool.accPizzaPerShare = pool.accPizzaPerShare.add(pizzaReward.mul(1e18).div(lpSupply));\n\t\t\n\t\tuser.reward = user.amount.mul((pool.accPizzaPerShare).sub(user.userRewardPerTokenPaid)).div(1e18).add(user.reward);\n\t\t\n\t\t\n\t\tuser.userRewardPerTokenPaid = pool.accPizzaPerShare;\n        pool.lastRewardTime = block.timestamp;\n    }\n\n\n    // Deposit LP tokens to MasterChef for pizza allocation.\n    function deposit(uint256 _pid, uint256 _amount) public checkStart {\n\n\t\trequire(isUserExists(msg.sender), \"user don't exists\");\t\t\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid,msg.sender);\t\n\t\t\n        if(_amount > 0) {\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n            user.amount = user.amount.add(_amount);\n\t\t\tuser.pid = _pid;\n\t\t\tpool.totalPool = pool.totalPool.add(_amount);   \t\t\n\t\n\t\t\taddress _referrer = users[msg.sender].referrer;\n\t\t\tfor(uint256 i = 0;i<2;i++){\t\t\t\t\n\t\t\t\tif(_referrer!= address(0) && isUserExists(_referrer)){\n\t\t\t\t\tusers[_referrer].referAmount[i] = _amount.add(users[_referrer].referAmount[i]);\t\t\t\t\t\n\t\t\t\t\t_referrer = users[_referrer].referrer;\n\t\t\t\t}else break;\n\t\t\t}\t\t\t\t\n        }\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\t\n\n    function getReward(uint256 _pid) public  {\n\n\t\tPoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 accPizzaPerShare = pool.accPizzaPerShare;\n        uint256 lpSupply = pool.totalPool;\n        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\n            uint256 multiplier =  getMultiplier(pool.lastRewardTime, block.timestamp);\n            uint256 pizzaReward = multiplier.mul(getRewardRate()).mul(pool.allocPoint).div(totalAllocPoint);\n            accPizzaPerShare = pool.accPizzaPerShare.add(pizzaReward.mul(1e18).div(lpSupply));\n        }\n        uint256 reward = user.amount.mul((accPizzaPerShare).sub(user.userRewardPerTokenPaid)).div(1e18).add(user.reward);\n\t\n        if (reward > 0) {\n\t\t\tsafePizzaTransfer(msg.sender, reward);\n\t\t\tuser.rewardPaid = user.rewardPaid.add(reward);\n\t\t\tuser.reward = 0;\n            emit RewardPaid(msg.sender, reward);\n        }\t\t\n\t\tuser.userRewardPerTokenPaid = accPizzaPerShare;\n    }\n\t\n\n\n    // Withdraw LP tokens from MasterChef.\n    function withdraw(uint256 _pid, uint256 _amount) public{\t\t\n\t\tUserInfo storage user = userInfo[_pid][msg.sender];\n\t\t\n\t\t\n        PoolInfo storage pool = poolInfo[_pid];\n        \n        require(user.amount >= _amount, \"withdraw: not good\");\n        updatePool(_pid,msg.sender);\n               \n\n\t\tsafePizzaTransfer(msg.sender, user.reward);\n\t\t\n// \t\tsafePizzaTransfer(projectAddress, user.reward.mul(10).div(100));\n\t\t\n\t\tuser.rewardPaid = user.rewardPaid.add(user.reward);\n\t\temit RewardPaid(msg.sender, user.rewardPaid);\n        if(_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\t\t\t\n\t\t\tpool.totalPool = pool.totalPool.sub(_amount);   \t\n\t\t\taddress _referrer = users[msg.sender].referrer;\n\t\t\tfor(uint256 i = 0;i<2;i++){\n\t\t\t\tif(_referrer!= address(0) && isUserExists(_referrer)){\n\t\t\t\t\tusers[_referrer].referAmount[i] = users[_referrer].referAmount[i].sub(_amount);\t\n\t\t\t\t\tusers[_referrer].referReward = \tusers[_referrer].referReward.add(user.reward.mul(10).div(100).div(i+1));\t\t\t\t\n\t\t\t\t\tsafePizzaTransfer(_referrer, user.reward.mul(10).div(100).div(i+1));\n\t\t\t\t\t_referrer = users[_referrer].referrer;\n\t\t\t\t}else break;\n\t\t\t}\t\n        }\n\t\tuser.reward = 0;\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n   // function emergencyWithdraw(uint256 _pid) public {\n   //     PoolInfo storage pool = poolInfo[_pid];\n    //    UserInfo storage user = userInfo[_pid][msg.sender];\n   //     pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n   //     emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n  //      user.amount = 0;\n   // }\n\n    // Safe pizza transfer function, just in case if rounding error causes pool to not have enough pizzas.\n    function safePizzaTransfer(address _to, uint256 _amount) internal {\n        uint256 pizzaBal = pizza.balanceOf(address(this));\n        if (_amount > pizzaBal) {\n            pizza.transfer(_to, pizzaBal);\n        } else {\n            pizza.transfer(_to, _amount);\n        }\n    }   \n\n\t\n\tmodifier checkStart(){\n       require(block.timestamp  > starttime,\"not start\");\n       _;\n    }\n\n\n}"}}}