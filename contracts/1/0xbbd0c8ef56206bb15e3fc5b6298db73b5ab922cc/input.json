{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"CloneFactory.sol":{"content":"pragma solidity >=0.4.0 <=0.8.0;\n\n/*\nThe MIT License (MIT)\n\nCopyright (c) 2018 Murray Software, LLC.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n//solhint-disable max-line-length\n//solhint-disable no-inline-assembly\n\ncontract CloneFactory {\n\n  function createClone(address target) internal returns (address result) {\n    bytes20 targetBytes = bytes20(target);\n    assembly {\n      let clone := mload(0x40)\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n      mstore(add(clone, 0x14), targetBytes)\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n      result := create(0, clone, 0x37)\n    }\n  }\n\n  function isClone(address target, address query) internal view returns (bool result) {\n    bytes20 targetBytes = bytes20(target);\n    assembly {\n      let clone := mload(0x40)\n      mstore(clone, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\n      mstore(add(clone, 0xa), targetBytes)\n      mstore(add(clone, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n\n      let other := add(clone, 0x40)\n      extcodecopy(query, other, 0, 0x2d)\n      result := and(\n        eq(mload(clone), mload(other)),\n        eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\n      )\n    }\n  }\n}\n"},"Factory.sol":{"content":"pragma solidity >=0.5.0 <=0.8.0;\n\nimport \"./Forwarder.sol\";\nimport \"./CloneFactory.sol\";\n\ncontract Factory is CloneFactory {\n    address public libraryAddress;\n\n    event ForwarderCreated(address newThingAddress);\n\n    constructor(address _libraryAddress) {\n        libraryAddress = _libraryAddress;\n    }\n\n    function createForwarder() public {\n        address clone = createClone(libraryAddress);\n        Forwarder(clone);\n        ForwarderCreated(clone);\n    }\n}"},"Forwarder.sol":{"content":"// https://eips.ethereum.org/EIPS/eip-20\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0 <=0.8.0;\n\n\ninterface IERC20 {\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value)  external returns (bool success);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n}\n\n\ncontract Forwarder {\n\n    address owner;\n    event TokensFlushed(address forwarderAddress, uint value, address tokenContractAddress);\n    event NewContract(address owner);\n\n    constructor() {\n        owner = msg.sender;\n        emit NewContract(owner);\n    }\n\n    function flushTokens(address tokenContractAddress) external {\n        IERC20 instance = IERC20(tokenContractAddress);\n        uint256 forwarderBalance = instance.balanceOf(address(this));\n        if (forwarderBalance == 0) {\n            revert();\n        }\n\n        if (!instance.transfer(msg.sender, forwarderBalance)) {\n            revert();\n        }\n        emit TokensFlushed(address(this), forwarderBalance, tokenContractAddress);\n    }\n\n    function getData(address tokenContractAddress) public view returns (uint256) {\n        // if (msg.sender != owner) return 0;\n\n        IERC20 instance = IERC20(tokenContractAddress);\n        uint256 forwarderBalance = instance.balanceOf(address(this));\n\n        return forwarderBalance;\n\n  }\n}"}}}