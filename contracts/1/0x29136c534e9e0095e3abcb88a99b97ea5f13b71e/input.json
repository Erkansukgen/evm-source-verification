{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "UsdMonster.sol": {
      "content": "pragma solidity >=0.4.22 <0.6.0;\r\n\r\n\r\ncontract UsdMonster {\r\n    \r\n    address public owner;\r\n    mapping(uint => Monster) public monsterIds;\r\n     uint public monsterCount = 1;\r\n    uint public lastMonsterId = 1;\r\n\r\n    \r\n     struct Monster {\r\n        uint monster_id;\r\n        address monster_address;\r\n\t\tuint referrer_id;\r\n        address referrer_address;\r\n        \r\n        uint monsterLevel;\r\n    }\r\n    \r\n    \r\n    constructor() public { \r\n        owner = msg.sender;\r\n       \r\n          Monster memory monster = Monster({\r\n            monster_id: 1,\r\n            monster_address:owner,\r\n            referrer_id: 0,\r\n            referrer_address: address(0),\r\n          \r\n            monsterLevel:900\r\n        });\r\n        \r\n        monsterIds[1] = monster;\r\n        }\r\n       \r\n    function catchMonster(uint userId,address userAddress,uint referrerId, address referrerAddress,uint level) public {\r\n            Monster memory monster = Monster({\r\n            monster_id: userId,\r\n            monster_address:userAddress,\r\n            referrer_id: referrerId,\r\n            referrer_address: referrerAddress,\r\n            monsterLevel:level\r\n        });\r\n        monsterIds[userId] = monster;\r\n         monsterCount += 1;\r\n         lastMonsterId = userId;\r\n        \r\n        \r\n    }\r\n    \r\n    function isMonsterExists(uint id) public view returns (bool) {\r\n        return (monsterIds[id].monster_id != 0);\r\n    }\r\n   \r\n    function getMonster(uint8 id) public view returns (uint,address,uint,address,uint)  {\r\n        return (monsterIds[id].monster_id,monsterIds[id].monster_address,monsterIds[id].referrer_id,monsterIds[id].referrer_address,monsterIds[id].monsterLevel);\r\n    }\r\n  \r\n    function totalmonster() public view returns (uint) {\r\n        return monsterCount;\r\n    }\r\n    \r\n  \r\n    \r\n}"
    }
  }
}