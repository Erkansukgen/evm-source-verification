{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Identifier.sol": {
      "content": "pragma solidity ^0.5.16;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// Deployed proxy addresses are logged\r\ncontract DSProxyFactory {\r\n    mapping(address=>bool) public isProxy;\r\n}\r\ncontract compound{\r\n     address public comptroller;\r\n}\r\n\r\ncontract Identifier {\r\n    using Address for address;\r\n\r\n    address public owner;\r\n    address public oasisFactory = 0xA26e15C895EFc0616177B7c1e7270A4C7D51C997;\r\n    address public compoundComptroller = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n         _;\r\n    }\r\n    constructor()  public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    \r\n    // @sample,  proxy address\r\n    function getSampleType(address sample) public view returns (uint256){ \r\n        if (!sample.isContract()) {\r\n            return 0; // EOA address\r\n        }\r\n    \r\n        if (DSProxyFactory(oasisFactory).isProxy(sample)) {\r\n            return  3;\r\n        }\r\n\r\n        bool retValue;\r\n        bytes memory retBytes;\r\n        (retValue, retBytes) = sample.staticcall(abi.encodeWithSignature(\"comptroller()\"));\r\n        if (retValue && (retBytes.length > 0)) {\r\n            address addr = abi.decode(retBytes, (address));\r\n            if (addr == compoundComptroller) {\r\n                return 1;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function destroy() external onlyOwner{\r\n        selfdestruct(msg.sender);\r\n    }\r\n}"
    }
  }
}