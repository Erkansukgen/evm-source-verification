{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/contracts/orig+taken.sol":{"content":"pragma solidity 0.6.10;\n\ncontract firstTry {\n    event success();\n    event fail();\n    \n    // address orig;\n    bytes32 public secretHash;\n    bool taken = false;\n    \n    constructor (bytes32 _secretHash) public payable {\n        // orig = msg.sender;\n        secretHash = _secretHash;\n    }\n    \n    function take(bytes32 _secret) external {\n        if (keccak256(abi.encodePacked(_secret)) == secretHash && !taken) {\n            // uint256 _myBalance = address(this).balance;\n            msg.sender.transfer(address(this).balance);\n            // secretHash = _secret;\n            taken = true;\n            emit success();\n        } else {\n            emit fail();\n        }\n    }\n}"}}}