{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/topbridge.sol": {
      "content": "pragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping(address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\nabstract contract SignerRole is Context {\n    using Roles for Roles.Role;\n\n    event SignerAdded(address indexed account);\n    event SignerRemoved(address indexed account);\n\n    Roles.Role private _signers;\n\n    constructor () {\n        _addSigner(_msgSender());\n    }\n\n    modifier onlySigner() {\n        require(isSigner(_msgSender()), \"SignerRole: caller does not have the Signer role\");\n        _;\n    }\n\n    function isSigner(address account) public view returns (bool) {\n        return _signers.has(account);\n    }\n\n    function addSigner(address account) public onlySigner {\n        _addSigner(account);\n    }\n\n    function renounceSigner() public {\n        _removeSigner(_msgSender());\n    }\n\n    function _addSigner(address account) internal {\n        _signers.add(account);\n        emit SignerAdded(account);\n    }\n\n    function _removeSigner(address account) internal {\n        _signers.remove(account);\n        emit SignerRemoved(account);\n    }\n}\n\n\ninterface IUniswapV2Router {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\n\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\n\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\n\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\n}\n\ncontract TopBridge is Ownable, SignerRole {\n    using SafeMath for uint256;\n\n    address stableTokenAddress;\n    uint8 public decimals;\n    address weth;\n    address routerAddress;\n    uint256 fee;\n    uint256 MAX_UINT256 = ~uint256(0);\n\n    mapping(bytes32 => bool) pays;\n\n\n    constructor(address _stableAddr, address _weth, address _router, uint256 _fee) {\n        stableTokenAddress = _stableAddr;\n        decimals = IERC20Metadata(_stableAddr).decimals();\n        weth = _weth;\n        routerAddress = _router;\n        IERC20(_stableAddr).approve(_router, MAX_UINT256);\n        fee = _fee;\n    }\n\n    function setFee(uint256 _fee) external onlyOwner {\n        fee = _fee;\n    }\n\n    function setRouterAddress(address routerAddr) external onlyOwner {\n        routerAddress = routerAddr;\n    }\n\n    function setStableToken(address tokenAddr) external onlyOwner {\n        stableTokenAddress = tokenAddr;\n        decimals = IERC20Metadata(tokenAddr).decimals();\n    }\n\n    event REQ(address indexed _user, address indexed _sourceToken, address indexed _destToken, uint _amount, uint _toChain);\n    event PAY(address indexed _user, address indexed _destToken, uint _amount, bytes32 _txhash, uint _fromChain);\n\n    function isContract(address addr) internal view returns (bool) {\n        uint size;\n        assembly {size := extcodesize(addr)}\n        return size > 0;\n    }\n\n    function swap(address[] calldata pairs, address destTokenAddr, uint value, uint toChain) payable external {\n        require(isContract(msg.sender) == false, \"Anti Bot\");\n        uint len = pairs.length;\n        address sourceTokenAddr = pairs[0];\n        require(pairs[len - 1] == stableTokenAddress, \"No supported Path\");\n        IERC20 sourceToken = IERC20(sourceTokenAddr);\n        uint256 amount;\n        if (msg.value > 0 && pairs[0] == weth && pairs[len - 1] == stableTokenAddress) {\n            amount = msg.value;\n            uint[] memory amounts = IUniswapV2Router(routerAddress).swapExactETHForTokens{value : amount}(0, pairs, address(this), block.timestamp.add(15 minutes));\n            emit REQ(msg.sender, weth, destTokenAddr, amounts[amounts.length - 1], toChain);\n        } else {\n            uint256 obalance = sourceToken.balanceOf(address(this));\n            if (sourceToken.transferFrom(msg.sender, address(this), value)) {\n                amount = sourceToken.balanceOf(address(this)).sub(obalance);\n            }\n            if (sourceTokenAddr == stableTokenAddress) {\n                emit REQ(msg.sender, sourceTokenAddr, destTokenAddr, amount, toChain);\n            } else {\n                sourceToken.approve(routerAddress, amount);\n                uint[] memory amounts = IUniswapV2Router(routerAddress).swapExactTokensForTokens(amount, 0, pairs, address(this), block.timestamp.add(15 minutes));\n                emit REQ(msg.sender, sourceTokenAddr, destTokenAddr, amounts[1], toChain);\n            }\n        }\n    }\n\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\n        );\n    }\n\n    function withdraw(uint256 amount) external onlyOwner {\n        IERC20(stableTokenAddress).transfer(_msgSender(), amount);\n    }\n\n    function sendToken(IERC20 token, address to, uint256 amount) external onlyOwner {\n        token.transfer(to, amount);\n    }\n\n    function sendEther(address payable to, uint256 amount) external onlyOwner {\n        to.transfer(amount);\n    }\n\n    struct SigData {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n\n    function _payToAddress(address _user, uint256 amount, address[] calldata pairs) internal returns (uint256){\n        uint256 last = pairs.length - 1;\n        if (pairs[last] != stableTokenAddress) {\n            //            IERC20(stableTokenAddress).approve(routerAddress, amount);\n            if (pairs[last] != weth) {\n                return IUniswapV2Router(routerAddress).swapExactTokensForTokens(amount, 0, pairs, _user, block.timestamp.add(15 minutes))[last];\n            } else {\n                return IUniswapV2Router(routerAddress).swapExactTokensForETH(amount, 0, pairs, _user, block.timestamp.add(15 minutes))[last];\n            }\n        }\n        if (IERC20(pairs[last]).transfer(_user, amount)) {\n            return amount;\n        }\n        return 0;\n    }\n\n    function payWithPermit(\n        address _user,\n        address _sourceToken,\n        address[] calldata pairs,\n        uint _amount,\n        uint8 _decimals,\n        uint256 _fromChain,\n        uint256 _toChain,\n        bytes32 _txhash,\n        SigData calldata sig)\n    external {\n        require(block.chainid == _toChain, \"ChainId\");\n        require(isContract(msg.sender) != true, \"Anti Bot\");\n        require(pairs[0] == stableTokenAddress, \"unsupported pair\");\n        address _destToken = pairs[pairs.length - 1];\n        bytes32 hash = keccak256(abi.encodePacked(this, _user, _sourceToken, _destToken, _amount, _decimals, _fromChain, _toChain, _txhash));\n        require(pays[hash] != true, \"Already Executed\");\n        require(isSigner(ecrecover(toEthSignedMessageHash(hash), sig.v, sig.r, sig.s)), \"Incorrect Signer\");\n        uint256 _fee = 10 ** decimals;\n        // $1\n        if (msg.sender != _user) {\n            require(isSigner(msg.sender), \"Anti Bot\");\n            _fee += fee;\n        }\n        uint256 toSwapAmount = _amount.mul(10 ** decimals).div(10 ** _decimals);\n        toSwapAmount = toSwapAmount.sub(_fee);\n        pays[hash] = true;\n        uint256 amount = _payToAddress(_user, toSwapAmount, pairs);\n        require(amount > 0, \"pay error\");\n        emit PAY(_user, _destToken, amount, _txhash, _fromChain);\n    }\n\n    function getChainId() view public returns (uint256) {\n        return block.chainid;\n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n\n}\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n\n        return c;\n    }\n}\n"
    }
  }
}