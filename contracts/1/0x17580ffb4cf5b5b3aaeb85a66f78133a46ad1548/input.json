{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/socialRocketLock.sol": {
      "content": "pragma solidity ^0.6.2;\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract Context {\n    constructor () internal { }\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this;\n        return msg.data;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n}\n\n/**\n * @title ERC1132 interface\n * @dev see https://github.com/ethereum/EIPs/issues/1132\n */\n\nabstract contract ERC1132 {\n    /**\n     * @dev Reasons why a user's tokens have been locked\n     */\n    mapping(address => bytes32[]) public lockReason;\n\n    /**\n     * @dev locked token structure\n     */\n    struct lockToken {\n        uint256 amount;\n        uint256 validity;\n        bool claimed;\n    }\n\n    /**\n     * @dev Holds number & validity of tokens locked for a given reason for\n     *      a specified address\n     */\n    mapping(address => mapping(bytes32 => lockToken)) public locked;\n\n    /**\n     * @dev Records data of all the tokens Locked\n     */\n    event Locked(\n        address indexed _of,\n        bytes32 indexed _reason,\n        uint256 _amount,\n        uint256 _validity\n    );\n\n    /**\n     * @dev Records data of all the tokens unlocked\n     */\n    event Unlocked(\n        address indexed _of,\n        bytes32 indexed _reason,\n        uint256 _amount\n    );\n    \n    /**\n     * @dev Locks a specified amount of tokens against an address,\n     *      for a specified reason and time\n     * @param _reason The reason to lock tokens\n     * @param _amount Number of tokens to be locked\n     * @param _time Lock time in seconds\n     */\n    function lock(string memory _reason, uint256 _amount, uint256 _time)\n        public virtual returns (bool);\n  \n    /**\n     * @dev Returns tokens locked for a specified address for a\n     *      specified reason\n     *\n     * @param _of The address whose tokens are locked\n     * @param _reason The reason to query the lock tokens for\n     */\n    function tokensLocked(address _of, string memory _reason)\n        public virtual view returns (uint256 amount);\n    \n    /**\n     * @dev Returns tokens locked for a specified address for a\n     *      specified reason at a specific time\n     *\n     * @param _of The address whose tokens are locked\n     * @param _reason The reason to query the lock tokens for\n     * @param _time The timestamp to query the lock tokens for\n     */\n    function tokensLockedAtTime(address _of, string memory _reason, uint256 _time)\n        public virtual view returns (uint256 amount);\n    \n    /**\n     * @dev Returns total tokens held by an address (locked + transferable)\n     * @param _of The address to query the total balance of\n     */\n    function totalBalanceOf(address _of)\n        public virtual view returns (uint256 amount);\n    \n    /**\n     * @dev Extends lock for a specified reason and time\n     * @param _reason The reason to lock tokens\n     * @param _time Lock extension time in seconds\n     */\n    function extendLock(string memory _reason, uint256 _time)\n        public virtual returns (bool);\n    \n    /**\n     * @dev Increase number of tokens locked for a specified reason\n     * @param _reason The reason to lock tokens\n     * @param _amount Number of tokens to be increased\n     */\n    function increaseLockAmount(string memory _reason, uint256 _amount)\n        public virtual returns (bool);\n\n    /**\n     * @dev Returns unlockable tokens for a specified address for a specified reason\n     * @param _of The address to query the the unlockable token count of\n     * @param _reason The reason to query the unlockable tokens for\n     */\n    function tokensUnlockable(address _of, string memory _reason)\n        public virtual view returns (uint256 amount);\n \n    /**\n     * @dev Unlocks the unlockable tokens of a specified address\n     * @param _of Address of user, claiming back unlockable tokens\n     */\n    function unlock(address _of)\n        public virtual returns (uint256 unlockableTokens);\n\n    /**\n     * @dev Gets the unlockable tokens of a specified address\n     * @param _of The address to query the the unlockable token count of\n     */\n    function getUnlockableTokens(address _of)\n        public virtual view returns (uint256 unlockableTokens);\n\n}\n\ninterface SocialRocketContrat{\n  function transfer(address recipient, uint256 amount) external returns (bool);\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n  function balanceOf(address account) external view returns (uint256);\n  function totalSupply() external view returns (uint256);\n  function allowance(address owner, address spender) external view returns (uint256);\n  function approve(address spender, uint256 amount) external returns (bool);\n}\n\n\n\ncontract SocialRocketLock is Ownable , ERC1132 {\n\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _released;\n\n    SocialRocketContrat private rocks;\n    address private token;\n    \n    string internal constant ALREADY_LOCKED = 'Tokens already locked';\n    string internal constant NOT_LOCKED = 'No tokens locked';\n    string internal constant AMOUNT_ZERO = 'Amount can not be 0';\n\n     \n    constructor(address socialRocketContract) public {\n        rocks = SocialRocketContrat(socialRocketContract);\n        token = socialRocketContract;\n        \n    }\n    \n    /********\n    TEAM LOCK\n    ********/\n    \n    function lock(string memory _reason, uint256 _amount, uint256 _time)\n        public override onlyOwner\n        returns (bool)\n    {\n        bytes32 reason = stringToBytes32(_reason);\n        uint256 validUntil = now.add(_time); //solhint-disable-line\n\n        // If tokens are already locked, then functions extendLock or\n        // increaseLockAmount should be used to make any changes\n        require(tokensLocked(msg.sender, bytes32ToString(reason)) == 0, ALREADY_LOCKED);\n        require(_amount != 0, AMOUNT_ZERO);\n\n        if (locked[msg.sender][reason].amount == 0)\n            lockReason[msg.sender].push(reason);\n\n        rocks.transferFrom(msg.sender, address(this), _amount);\n\n        locked[msg.sender][reason] = lockToken(_amount, validUntil, false);\n\n        emit Locked(msg.sender, reason, _amount, validUntil);\n        return true;\n    }\n    \n    function transferWithLock(address _to, string memory _reason, uint256 _amount, uint256 _time)\n        public onlyOwner\n        returns (bool)\n    {\n        bytes32 reason = stringToBytes32(_reason);\n        uint256 validUntil = now.add(_time); //solhint-disable-line\n\n        require(tokensLocked(_to, _reason) == 0, ALREADY_LOCKED);\n        require(_amount != 0, AMOUNT_ZERO);\n\n        if (locked[_to][reason].amount == 0)\n            lockReason[_to].push(reason);\n\n        rocks.transferFrom(msg.sender, address(this), _amount);\n\n        locked[_to][reason] = lockToken(_amount, validUntil, false);\n        \n        emit Locked(_to, reason, _amount, validUntil);\n        return true;\n    }\n\n    function tokensLocked(address _of, string memory _reason)\n        public override\n        view\n        returns (uint256 amount)\n    {\n        bytes32 reason = stringToBytes32(_reason);\n        if (!locked[_of][reason].claimed)\n            amount = locked[_of][reason].amount;\n    }\n    \n    function tokensLockedAtTime(address _of, string memory _reason, uint256 _time)\n        public override\n        view\n        returns (uint256 amount)\n    {\n        bytes32 reason = stringToBytes32(_reason);\n        if (locked[_of][reason].validity > _time)\n            amount = locked[_of][reason].amount;\n    }\n\n    function totalBalanceOf(address _of)\n        public override\n        view\n        returns (uint256 amount)\n    {\n        amount = rocks.balanceOf(_of);\n\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n            amount = amount.add(tokensLocked(_of, bytes32ToString(lockReason[_of][i])));\n        }   \n    }    \n    \n    function extendLock(string memory _reason, uint256 _time)\n        public override onlyOwner\n        returns (bool)\n    {\n        bytes32 reason = stringToBytes32(_reason);\n        require(tokensLocked(msg.sender, _reason) > 0, NOT_LOCKED);\n\n        locked[msg.sender][reason].validity = locked[msg.sender][reason].validity.add(_time);\n\n        emit Locked(msg.sender, reason, locked[msg.sender][reason].amount, locked[msg.sender][reason].validity);\n        return true;\n    }\n    \n    function increaseLockAmount(string memory _reason, uint256 _amount)\n        public override onlyOwner\n        returns (bool)\n    {\n        bytes32 reason = stringToBytes32(_reason);\n        require(tokensLocked(msg.sender, _reason) > 0, NOT_LOCKED);\n        rocks.transfer(address(this), _amount);\n\n        locked[msg.sender][reason].amount = locked[msg.sender][reason].amount.add(_amount);\n\n        emit Locked(msg.sender, reason, locked[msg.sender][reason].amount, locked[msg.sender][reason].validity);\n        return true;\n    }\n\n    function tokensUnlockable(address _of, string memory _reason)\n        public override\n        view\n        returns (uint256 amount)\n    {\n        bytes32 reason = stringToBytes32(_reason);\n        if (locked[_of][reason].validity <= now && !locked[_of][reason].claimed) //solhint-disable-line\n            amount = locked[_of][reason].amount;\n    }\n\n    function unlock(address _of)\n        public override onlyOwner\n        returns (uint256 unlockableTokens)\n    {\n        uint256 lockedTokens;\n\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n            lockedTokens = tokensUnlockable(_of, bytes32ToString(lockReason[_of][i]));\n            if (lockedTokens > 0) {\n                unlockableTokens = unlockableTokens.add(lockedTokens);\n                locked[_of][lockReason[_of][i]].claimed = true;\n                emit Unlocked(_of, lockReason[_of][i], lockedTokens);\n            }\n        }  \n\n        if (unlockableTokens > 0)\n            rocks.transfer(_of, unlockableTokens);\n    }\n\n    function getUnlockableTokens(address _of)\n        public override\n        view\n        returns (uint256 unlockableTokens)\n    {\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n            unlockableTokens = unlockableTokens.add(tokensUnlockable(_of, bytes32ToString(lockReason[_of][i])));\n        }  \n    }\n    \n    function getremainingLockTime(address _of, string memory _reason) public view returns (uint256 remainingTime) {\n        bytes32 reason = stringToBytes32(_reason);\n        if (locked[_of][reason].validity > now && !locked[_of][reason].claimed) //solhint-disable-line\n            remainingTime = locked[_of][reason].validity.sub(now);\n    }\n    \n    function getremainingLockDays(address _of, string memory _reason) public view returns (uint256 remainingDays) {\n        bytes32 reason = stringToBytes32(_reason);\n        if (locked[_of][reason].validity > now && !locked[_of][reason].claimed) //solhint-disable-line\n            remainingDays = (locked[_of][reason].validity.sub(now)) / 86400;\n    }\n    \n    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\n        bytes memory tempEmptyStringTest = bytes(source);\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n    \n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n    \n    function bytes32ToString(bytes32 x) public pure returns (string memory) {\n        bytes memory bytesString = new bytes(32);\n        uint charCount = 0;\n        for (uint j = 0; j < 32; j++) {\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n            if (char != 0) {\n                bytesString[charCount] = char;\n                charCount++;\n            }\n        }\n        bytes memory bytesStringTrimmed = new bytes(charCount);\n        for (uint256 j = 0; j < charCount; j++) {\n            bytesStringTrimmed[j] = bytesString[j];\n        }\n        return string(bytesStringTrimmed);\n    }\n}\n"
    }
  }
}