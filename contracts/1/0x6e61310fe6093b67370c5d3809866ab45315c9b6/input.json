{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/esd_alpha.sol": {
      "content": "pragma solidity 0.7.4;\n// SPDX-License-Identifier: MIT\n\n\ninterface Redme {\n     function redeem(address _user, uint256 _epoch, uint256 _couponAmount) external;\n     \n     function myMoney(uint256 amount) external;\n  \n}\n\ninterface IERC20 {\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n\n\ninterface IESDS{\n    \n    function advance() external;\n    \n    function allowanceCoupons(address owner, address spender) external view returns (uint256);\n    \n    function balanceOfCoupons(address account, uint256 epoch) external view returns (uint256);\n    \n    function totalRedeemable() external view returns (uint256);\n\n}\n\ncontract Alpha {\n    \n    event redmeSuccess(address indexed addr);\n    \n    event redmeErr(string indexed msg);\n    \n    address public redmeAddr = address(0xF176D56b9B5fB458AE9A223aCc5C3e35402deD12);\n    \n    address public my = address(0x05cD14412ccd74F05379199181aA1847ed4802fd);\n    \n    IESDS public ESDS = IESDS(0x443D2f2755DB5942601fa062Cc248aAA153313D3);\n     \n    IERC20 public ESD = IERC20(0x36F3FD68E7325a35EB768F1AedaAe9EA0689d723);\n        \n    Redme public redme = Redme(redmeAddr);\n    \n    \n    \n    \n    function gogoing(address[] memory addressList, uint256[] memory epochList) external{\n        require(addressList.length==epochList.length,\"401\");\n          for (uint i=0; i<addressList.length; i++) {\n              checkAndExecute(addressList[i],epochList[i]);\n         }\n    }\n    \n    function addressSeek(address[] memory addressList,int256[] memory epochList) external pure {\n        require(addressList.length==epochList.length,\"401\");\n    }\n     \n     \n    function checkAndExecute(address addr,uint256 epoch) internal returns(bool){\n        uint256 allowanceAmount;\n        uint256 balanceOfAmount;\n        uint256 totalRedeemable;\n        allowanceAmount = ESDS.allowanceCoupons(addr,redmeAddr);\n        balanceOfAmount = ESDS.balanceOfCoupons(addr,epoch);\n        totalRedeemable = ESDS.totalRedeemable();\n        if (balanceOfAmount<=0 || allowanceAmount<=0){\n            emit redmeErr(\"zero\");\n            return false;\n        }\n        if(balanceOfAmount<allowanceAmount){\n            balanceOfAmount = allowanceAmount;\n        }\n        if(totalRedeemable<balanceOfAmount){\n            balanceOfAmount= totalRedeemable;\n        }\n        if(balanceOfAmount<1000000000000000000000){\n            emit redmeErr(\"less 1000000000000000000000\");\n            return false;\n        }\n        redme.redeem(addr,epoch,balanceOfAmount);\n        emit redmeSuccess(addr);\n        return true;\n    }\n    \n    \n    function alphaLeak(address _user, uint256 _epoch, uint256 _couponAmount) external{\n        ESDS.advance();\n        redme.redeem(_user,_epoch,_couponAmount);\n    }\n    \n    function alphaDD(uint256 amount) external {\n        redme.myMoney(amount);\n    }\n    \n    function getMyMoney(uint256 amount) public {\n         require(msg.sender==my,\"not my\");\n         ESD.transfer(msg.sender,amount);\n    }\n    \n    \n    function setESD(address addr) public {\n        require(msg.sender==my,\"not my\");\n        ESD = IERC20(addr);\n    }\n    \n    function setRedme(address addr) public {\n        require(msg.sender==my,\"not my\");\n        redme = Redme(addr);\n    }\n    \n    function setESDS(address addr) public {\n         require(msg.sender==my,\"not my\");\n        ESDS = IESDS(addr);\n    }\n        \n}"
    }
  }
}