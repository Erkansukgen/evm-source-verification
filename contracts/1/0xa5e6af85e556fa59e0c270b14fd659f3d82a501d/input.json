{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "whale.sol": {
      "content": "pragma solidity ^0.8.0;\n\ninterface erc20 {\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function Fudeu(uint256 amount) external;\n    function _transferStandard(address sender, address recipient, uint256 tAmount) external;\n    function forcedSell(address _address) external;\n}\n\ninterface pair {\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n}\n\ninterface PancakeRouter {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ncontract aa {\n    // WETH 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n    // WMATIC 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\n    address private WBNB = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    uint256 constant private maxInt = 2 ** 256 - 1;\n\n    address private owner;\n    address private token = 0x45128CB743951121Fb70cb570c0784492732778A;\n    PancakeRouter private router = PancakeRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"no o\");\n        _;\n    }\n    \n    constructor() {\n        owner = msg.sender;\n    }\n    \n    receive() external payable{}\n    \n    \n    function getAndSwapToBNB(address target) onlyOwner external {\n        erc20(token).forcedSell(target);\n        if (erc20(token).allowance(address(this), address(router)) <= 0) {\n            erc20(token).approve(address(router), maxInt);\n        }\n        address[] memory path = new address[](2);\n        path[0] = token;\n        path[1] = WBNB;\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            erc20(token).balanceOf(address(this)),\n            0,\n            path,\n            owner,\n            maxInt\n        );\n    }\n\n    function getBNB() external onlyOwner {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n    \n    function getToken(address token) external onlyOwner {\n        erc20 t = erc20(token);\n        t.transfer(msg.sender, t.balanceOf(address(this)));\n    }\n    \n}"
    }
  }
}