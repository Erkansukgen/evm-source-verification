{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/FxRoot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.3;\n\n\ninterface IStateSender {\n    function syncState(address receiver, bytes calldata data) external;\n}\n\ninterface IFxStateSender {\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\n}\n\n/** \n * @title FxRoot root contract for fx-portal\n */\ncontract FxRoot is IFxStateSender {\n    IStateSender public stateSender;\n    address public fxChild;\n\n    constructor(address _stateSender) {\n        stateSender = IStateSender(_stateSender);\n    }\n\n    function setFxChild(address _fxChild) public {\n        require(fxChild == address(0x0));\n        fxChild = _fxChild;\n    }\n\n    function sendMessageToChild(address _receiver, bytes calldata _data) public override {\n        bytes memory data = abi.encode(msg.sender, _receiver, _data);\n        stateSender.syncState(fxChild, data);\n    }\n}\n"
    }
  }
}