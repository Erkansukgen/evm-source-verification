{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Multisend.sol":{"content":"pragma solidity 0.6.12;\r\n\r\ninterface IERC20Simple {\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function balanceOf(address addr) external view returns (uint256);\r\n}\r\n\r\ncontract Multisend {\r\n    address public owner;\r\n    address public source;\r\n    constructor(address _source) public {\r\n        owner = msg.sender;\r\n        source = _source;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function setSource(address _source) external onlyOwner {\r\n        source = _source;\r\n    }\r\n    \r\n    function withdraw(address _token) external onlyOwner {\r\n        IERC20Simple token = IERC20Simple(_token);\r\n        IERC20Simple(_token).transfer(owner, token.balanceOf(address(this)));\r\n    }\r\n\r\n    function multisend(address _token, address[] calldata _addresses, uint256[] calldata _amounts) external onlyOwner {\r\n        IERC20Simple token = IERC20Simple(_token);\r\n        require(_addresses.length == _amounts.length);\r\n        for(uint i = 0; i < _addresses.length; i++) {\r\n            token.transferFrom(source, _addresses[i], _amounts[i]);\r\n        }\r\n    }\r\n}"}}}