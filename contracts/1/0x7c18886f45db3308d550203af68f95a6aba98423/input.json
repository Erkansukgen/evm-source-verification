{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/transfer_token.sol":{"content":"pragma solidity >=0.4.4;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint a, uint b) internal pure  returns (uint) {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0);\r\n        uint c = a / b;\r\n        require(a == b * c + a % b);\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    function max64(uint64 a, uint64 b) internal  pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n    function min64(uint64 a, uint64 b) internal  pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n    function max256(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n    function min256(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    // function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n    //     uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n    //     _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    // }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner public{\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Arbitrage is Ownable {\r\n    address internal constant UNISWAP_ROUTER_ADDRESS = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Router02 public uniswapRouter;\r\n\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event LogTokenMultiSent(address token,uint256 total);\r\n    event LogGetToken(address token, address receiver, uint256 balance);\r\n    address public receiverAddress;\r\n    bool locked = false;\r\n\r\n    constructor () public {\r\n        uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\r\n    }\r\n\r\n    function setLockStatus(uint status) public {\r\n        locked = (status != 0);\r\n    }\r\n\r\n    // function approveErc20(address from, uint amount) internal {\r\n    //     // approve for the transaction through ERC20\r\n    //     IERC20 erc_obj = IERC20(from);\r\n    //     // For some tokens, e.g USDT, transferFrom has no return, so cannot check the return value.\r\n    //     // erc_obj.safeTransferFrom(msg.sender, address(this), amount);\r\n    //     // erc_obj.safeApprove(address(uniswapRouter), 0);\r\n    //     erc_obj.safeApprove(address(uniswapRouter), amount);\r\n    // }\r\n\r\n    function approveToken(address tokenAddress, uint amount) public {\r\n        IERC20 erc_obj = IERC20(tokenAddress);\r\n        erc_obj.approve(address(this), amount);\r\n    }\r\n\r\n    function approveToRouter(address[] memory tokenAddresses, uint amount) public {\r\n        require(tokenAddresses.length > 0, \"token address length is invalid\");\r\n        for (uint i = 0; i < tokenAddresses.length; i++) {\r\n            IERC20 erc_obj = IERC20(tokenAddresses[i]);\r\n            erc_obj.safeApprove(address(uniswapRouter), amount);\r\n        }\r\n    }\r\n\r\n    function transferValue(address _tokenAddress, address _to, uint _value) internal {\r\n//        uint sendValue = msg.value;\r\n\r\n        // address from = msg.sender;\r\n\r\n        // StandardToken token = StandardToken(_tokenAddress);\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        token.safeTransferFrom(address(this), _to, _value);\r\n    }\r\n\r\n    function depositToken(address tokenAddress, uint value) public {\r\n        require(value > 0, \"deposit amount should be > 0\");\r\n        IERC20 token = IERC20(tokenAddress);\r\n        token.safeTransferFrom(msg.sender, address(this), value);\r\n    }\r\n\r\n    function withdrawToken(address tokenAddress, uint value) public {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        if (value == 0) {\r\n            value = token.balanceOf(address(this));\r\n        }\r\n        token.safeTransferFrom(address(this), msg.sender, value);\r\n    }\r\n\r\n    function withdrawEth(uint256 ethAmount) onlyOwner public {\r\n        require(!locked, \"withdraw eth reentrant call detected!\");\r\n        locked = true;\r\n        if (ethAmount == 0) {\r\n            ethAmount = address(this).balance;\r\n        }\r\n        (bool success,) = msg.sender.call{value: ethAmount}(\"\");\r\n        locked = false;\r\n        require(success, \"withdraw eth failed\");\r\n        // uint256 etherBalance = value;\r\n        // if (value == 0) {\r\n        //     etherBalance = address(this).balance;\r\n        // }\r\n        // payable(owner).transfer(etherBalance);\r\n    }\r\n\r\n    function getEstimatedInForOut(uint amountOut, address[] memory path) public view returns (uint[] memory) {\r\n        return uniswapRouter.getAmountsIn(amountOut, path);\r\n    }\r\n\r\n    function getEstimatedOutForIn(uint amountIn, address[] memory path) public view returns (uint[] memory) {\r\n        return uniswapRouter.getAmountsOut(amountIn, path);\r\n    }\r\n\r\n    function getPathForETHToToken(address to) private view returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapRouter.WETH();\r\n        path[1] = to;\r\n\r\n        return path;\r\n    }\r\n\r\n    function getPathForTokenToEth(address from) private view returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = from;\r\n        path[1] = uniswapRouter.WETH();\r\n\r\n        return path;\r\n    }\r\n\r\n    // Transfer \"A token\" to \"B token\".\r\n    function swapExactTokenToToken(address _fromContract, address _toContract, uint amountIn, uint amountOutMin, address[] memory swapPath, uint deadline) payable public returns (uint[] memory) {\r\n        require(amountIn > 0, \"amount in is invalid\");\r\n\r\n        // // approve for the transaction through ERC20\r\n        // IERC20 erc_obj = IERC20(_fromContract);\r\n        // // For some tokens, e.g USDT, transferFrom has no return, so cannot check the return value.\r\n        // erc_obj.safeTransferFrom(msg.sender, address(this), amountIn);\r\n        // erc_obj.safeApprove(address(uniswapRouter), amountIn);\r\n\r\n        require(swapPath.length >= 2, \"swap path length is invalid\");\r\n        require(deadline > 0, \"deadline is invalid\");\r\n\r\n        uint[] memory amounts = uniswapRouter.swapExactTokensForTokens(amountIn, amountOutMin, swapPath, address(this), deadline);\r\n        return amounts;\r\n    }\r\n\r\n    function checkAmountOutForAmountIn(uint otherAmountIn, uint otherAmountOutMin, address[] memory path) internal returns (uint) {\r\n        // Check the otherAmountOutMin first.\r\n        uint amountInDiff = 0;\r\n        if (otherAmountOutMin != 0) {\r\n            // Calculate the max amount in by the otherAmountOutMin. (backward)\r\n            uint[] memory backwardAmounts = getEstimatedInForOut(otherAmountOutMin, path);\r\n            uint backwardAmountIn = backwardAmounts[0];\r\n            uint backwardAmountOut = backwardAmounts[backwardAmounts.length - 1];\r\n            require(backwardAmountIn <= otherAmountIn, \"backwardAmountIn big than otherAmountIn\");\r\n            amountInDiff = otherAmountIn - backwardAmountIn;\r\n            // string memory errMsg = append(\"backwardAmountIn:\", uint2str(backwardAmountIn), \"backwardAmountOut:\", uint2str(backwardAmountOut));\r\n            require(amountInDiff > 200000000000000000, \"no benifit\");\r\n        }\r\n        return amountInDiff;\r\n    }\r\n\r\n    // Becareful for amountOutMin and ratio.\r\n    function swapTokenToToken(uint amountIn, uint amountOutMin, address[] memory path, uint deadline, uint ratio, uint otherAmountIn, uint otherAmountOutMin) payable public returns (uint[] memory) {\r\n        require(path.length > 1, \"path length is invalid\");\r\n\r\n        uint amountInDiff = checkAmountOutForAmountIn(otherAmountIn, otherAmountOutMin, path);\r\n        if (amountIn > amountInDiff) {\r\n            amountIn = amountInDiff;\r\n        }\r\n\r\n        IERC20 ercFrom = IERC20(path[0]);\r\n        if (amountIn == 0) {\r\n            amountIn = ercFrom.balanceOf(address(this));\r\n        }\r\n        uint outMin = amountOutMin;\r\n        if (amountOutMin == 0) {\r\n            uint[] memory estimatedAmounts = getEstimatedOutForIn(amountIn, path);\r\n            require(estimatedAmounts.length > 0, \"failed to get out amounts\");\r\n            outMin = estimatedAmounts[estimatedAmounts.length - 1];\r\n            outMin = outMin.mul(ratio).div(100);\r\n        }\r\n        // string memory errMsg = append(\"out min:\", uint2str(outMin), \"\", \"\");\r\n        // require(outMin > 0, errMsg);\r\n\r\n        return uniswapRouter.swapExactTokensForTokens(amountIn, outMin, path, address(this), deadline);\r\n    }\r\n\r\n    // Make sure msg.value is valid, and modify the same function in Java!!!\r\n    function swapExactEthToToken(uint ethAmount, uint amountOutMin, address to, uint deadline, uint ratio) payable public returns (uint[] memory) {\r\n        require(ethAmount > 0, \"eth amount is 0\");\r\n        uint outMin = amountOutMin;\r\n        address[] memory path = getPathForETHToToken(to);\r\n        if (amountOutMin == 0) {\r\n            require(ratio >= 0, \"ratio invalid\");\r\n            uint[] memory estimatedAmounts = getEstimatedOutForIn(ethAmount, path);\r\n            require(estimatedAmounts.length > 0, \"failed to get out amounts\");\r\n            uint amountOut = estimatedAmounts[estimatedAmounts.length - 1];\r\n            outMin = amountOut.mul(ratio).div(100);\r\n        }\r\n        // uniswapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(outMin, path, address(this), deadline);\r\n\r\n        return uniswapRouter.swapExactETHForTokens{value: ethAmount}(outMin, path, address(this), deadline);\r\n    }\r\n\r\n    // function swapTokenToExactETH(uint amountOut, uint amountInMax, address[] calldata path, uint deadline) payable public returns (uint[] memory amounts) {\r\n    //     require(amountInMax > 0, \"amount in is invalid\");\r\n    //     require(path.length >= 2, \"swap path length is invalid\");\r\n\r\n    //     address from = path[0];\r\n    //     approveErc20(from, amountInMax);\r\n    //     uint[] memory amounts = uniswapRouter.swapTokensForExactETH(amountOut, amountInMax, path, address(this), deadline);\r\n    //     return amounts;\r\n    // }\r\n\r\n    function swapExactTokenToETH(uint amountIn, uint amountOutMin, address from, uint deadline, uint ratio) payable public returns (uint[] memory amounts) {\r\n        IERC20 erc20 = IERC20(from);\r\n        if (amountIn == 0) {\r\n            amountIn = erc20.balanceOf(address(this));\r\n        }\r\n        require(amountIn > 0, \"balance is invalid\");\r\n        uint outMin = amountOutMin;\r\n        address[] memory path = getPathForTokenToEth(from);\r\n        if (amountOutMin == 0) {\r\n            require(ratio >= 0, \"expected ratio is invalid\");\r\n            uint[] memory estimatedAmounts = getEstimatedOutForIn(amountIn, path);\r\n            amountOutMin = estimatedAmounts[estimatedAmounts.length - 1];\r\n            outMin = amountOutMin.mul(ratio).div(100);\r\n        }\r\n        require(amountIn > 0, \"amount of token in is invalid\");\r\n        require(outMin >= 0, \"out min is invalid\");\r\n\r\n        // approveErc20(from, amountIn);\r\n        return uniswapRouter.swapExactTokensForETH(amountIn, outMin, path, address(this), deadline);\r\n        // uint[] memory amounts = uniswapRouter.swapTokensForExactETH(amountOut, amountIn, path, address(this), deadline);\r\n        // return amounts;\r\n    }\r\n\r\n    // Transfer \"A token\" to \"B token\", then transfer \"B token\" to destination address.\r\n    function swapTokenToTokenAndTransfer(address _fromContract, address _toContract, uint amountIn, uint amountOutMin, address _transferAddress, address[] memory swapPath, uint deadline) payable public {\r\n        uint[] memory amounts = swapExactTokenToToken(_fromContract, _toContract, amountIn, amountOutMin, swapPath, deadline);\r\n        uint amountsLen = amounts.length;\r\n        require(amountsLen > 0, \"swap amounts length is invalid\");\r\n\r\n        uint transferAmount = amounts[amountsLen - 1];\r\n        transferValue(_toContract, _transferAddress, transferAmount);\r\n    }\r\n\r\n\r\n    function append(string memory a, string memory b, string memory c, string memory d) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(a, b, c, d));\r\n    }\r\n\r\n    function uint2str(uint i) internal returns (string memory c) {\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint length;\r\n        while (j != 0){\r\n            length++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(length);\r\n        uint k = length - 1;\r\n        while (i != 0){\r\n            bstr[k--] = byte(uint8(48 + i % 10));\r\n            i /= 10;\r\n        }\r\n        c = string(bstr);\r\n    }\r\n\r\n\r\n    // important to receive ETH\r\n    receive() payable external {}\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"}}}