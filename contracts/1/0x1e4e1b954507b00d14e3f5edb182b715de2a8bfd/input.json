{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"BatchTransfer.sol":{"content":"pragma solidity 0.6.9;\npragma experimental ABIEncoderV2;\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    function decimals() external view returns (uint8);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n}\n\n\ncontract BatchTransfer {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function batchTransfer(\n        address tokenAddress,\n        address[] memory to,\n        uint256[] memory amount\n    ) public {\n        require(msg.sender == owner, \"only owner\");\n        IERC20 token = IERC20(tokenAddress);\n        require(to.length == amount.length, \"length not match\");\n        for (uint8 i = 0; i < to.length; i++) {\n            bytes memory callData = abi.encodeWithSelector(\n                token.transferFrom.selector,\n                msg.sender,\n                to[i],\n                amount[i]\n            );\n            (bool success, bytes memory returndata) = address(token).call(\n                callData\n            );\n            require(success, \"SafeERC20: low-level call failed\");\n\n            if (returndata.length > 0) {\n                // Return data is optional\n                // solhint-disable-next-line max-line-length\n                require(\n                    abi.decode(returndata, (bool)),\n                    \"SafeERC20: ERC20 operation did not succeed\"\n                );\n            }\n        }\n    }\n\n\tfunction batchTransferWithVaule(\n        address payable[] memory to,\n\t\tuint256[] memory value\n    ) public payable{\n        require(msg.sender == owner, \"only owner\");\n        require(to.length == value.length, \"length not match\");\n        for (uint8 i = 0; i < to.length; i++) {\n            to[i].transfer(value[i]);\n        }\n    }\n}\n"}}}