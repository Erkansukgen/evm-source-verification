{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "HoldAndFlashswap.sol": {
      "content": "pragma solidity 0.6.6;\n\ninterface ERC20 {\n    function decimals() external view returns (uint);\n    function balanceOf(address _owner) external view returns (uint256);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n}\n\ninterface IUniswapV2Pair {\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n}\n\ninterface IUniswapV2Factory {\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n\ninterface IUniswapV2Callee {\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    function popLast20Bytes(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n}\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'OB TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'OB TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'OB TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'OB TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n\nlibrary UniswapV2Library {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n            ))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n\n\ncontract VirtualAddress {\n    \n    function safeTransfer(address token, address to, uint value) public {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'VA TransferHelper: TRANSFER_FAILED');\n    }\n    \n    function destory(address payable receipt) public {\n         selfdestruct(receipt);\n    }\n    \n}\n\ncontract TempContractCreator {\n    \n    VirtualAddress public virtualAddress;\n    \n    function createContract() external {\n        virtualAddress = new VirtualAddress();\n    }\n    \n    function createTempContract(uint factor) public returns (VirtualAddress) {\n        address createdAddress = _createTempContract(factor);\n        return VirtualAddress(createdAddress);\n    }\n    \n    function _createTempContract(uint factor) internal returns (address) {\n\n        address createdAddress;\n        \n        bytes memory bytecode = type(VirtualAddress).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(factor));\n        assembly {\n            createdAddress := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        \n        return createdAddress;\n    }\n    \n    function getTempContract(uint a) public view returns (address) {\n        bytes32 salt = keccak256(abi.encodePacked(a));\n        bytes32 init_code = getInitCodeHash();\n        \n        address createdAddress;\n        createdAddress = address(uint(keccak256(abi.encodePacked(\n            hex'ff',\n            address(this),\n            salt,\n            init_code // init code hash\n        ))));\n        \n        return createdAddress;\n    } \n    \n    function getInitCodeHash() public pure returns (bytes32) {\n        bytes memory bytecode = type(VirtualAddress).creationCode;\n        bytes32 init_code = keccak256(bytecode);\n        return init_code;\n    }\n    \n}\n\ncontract PermissionGroups{\n    \n    address public admin;\n    address public pendingAdmin;\n\n    constructor() public {\n        admin = msg.sender;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin,\"onlyAdmin\");\n        _;\n    }\n\n    function transferAdmin(address newAdmin) external onlyAdmin {\n        pendingAdmin = newAdmin;\n    }\n\n    function claimAdmin() external {\n        require(pendingAdmin == msg.sender,\"pendingAdmin != msg.sender\");\n        admin = pendingAdmin;\n        pendingAdmin = address(0);\n    }\n\n}\n\n\ncontract AssetManager is PermissionGroups{\n    \n    receive() external payable{}\n    fallback() external payable{}\n    \n    function withdrawEth(address payable _to, uint _value) external onlyAdmin{\n        require(_to != address(0),\"_to == address(0)\");\n        _to.transfer(_value);\n    }\n    \n    function withdrawToken(address _token, address _to, uint _value) external onlyAdmin{\n        require(_to != address(0),\"_to == address(0)\");\n        TransferHelper.safeTransfer(_token,_to,_value);\n    }\n    \n    function approveIfZero(address token, address spender) internal {\n        uint tokenAllowance = ERC20(token).allowance(address(this), spender);\n        if (tokenAllowance == 0) {\n            TransferHelper.safeApprove(token, spender, uint256(-1));\n        }\n    }\n    \n    function doApprove(address token, address spender, uint value) external onlyAdmin {\n        TransferHelper.safeApprove(token, spender, value);\n    }\n\n}\n\ncontract HoldAndFlashswap is AssetManager,IUniswapV2Callee,TempContractCreator {\n    \n    using LibBytes for bytes;\n    using SafeMath for uint;\n    \n    address payable public incomeReceipt;\n    \n    constructor() public {\n        incomeReceipt = msg.sender;\n    }\n    \n    function setIncomeReceipt(address payable _incomeReceipt) external onlyAdmin {\n        incomeReceipt = _incomeReceipt;\n    }\n    \n    function uni_v2_ExactOut(address uniswapFactory, address tokenIn, address tokenOut, uint amountOut, uint maxAmountIn, bytes calldata _data) external {\n        (uint reserveIn, uint reserveOut) = UniswapV2Library.getReserves(uniswapFactory, tokenIn, tokenOut);\n        uint amountIn = UniswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);\n        require(amountIn <= maxAmountIn, \"swap, h a f, amountIn > maxAmountIn\");\n        \n        uni_v2_flashswap(uniswapFactory,tokenIn,tokenOut,amountOut,_data);\n    }\n    \n    function uni_v2_ExactIn(address uniswapFactory, address tokenIn, address tokenOut, uint amountIn, uint minAmountOut, bytes calldata _data) external {\n        (uint reserveIn, uint reserveOut) = UniswapV2Library.getReserves(uniswapFactory, tokenIn, tokenOut);\n        uint amountOut = UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);\n        require(amountOut >= minAmountOut, \"swap h a f: amoutOut < minAmountOut\");\n        \n        uni_v2_flashswap(uniswapFactory,tokenIn,tokenOut,amountOut,_data);\n    }\n    \n    function uni_v2_flashswap(address uniswapFactory, address tokenIn, address tokenOut, uint amountOut, bytes memory _data) public {\n        address uni_pair_addr =  IUniswapV2Factory(uniswapFactory).getPair(tokenIn,tokenOut);\n        (uint amount0Out, uint amount1Out) = tokenIn < tokenOut ? (uint(0), amountOut) : (amountOut, uint(0));\n        IUniswapV2Pair(uni_pair_addr).swap(amount0Out,amount1Out,address(this),_data);\n    }\n    \n    function uniswapV2Call(address, uint amount0, uint amount1, bytes calldata _data) external override {\n        address token0 = IUniswapV2Pair(msg.sender).token0(); // fetch the address of token0\n        address token1 = IUniswapV2Pair(msg.sender).token1(); // fetch the address of token1\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(msg.sender).getReserves();\n        \n        address borrowToken;\n        address returnToken;\n        uint borrowAmount;\n        uint returnAmount;\n        if (amount0 >0) {\n            borrowToken = token0;\n            returnToken = token1;\n            borrowAmount = amount0;\n            returnAmount = UniswapV2Library.getAmountIn(borrowAmount, reserve1, reserve0);\n        }\n        else {\n            borrowToken = token1;\n            returnToken = token0;\n            borrowAmount = amount1;  \n            returnAmount = UniswapV2Library.getAmountIn(borrowAmount, reserve0, reserve1);\n        }\n        \n        (address caller, bytes memory _payload, uint factor) = abi.decode(_data,(address,bytes,uint));\n        \n        address _virtualAddress = _createTempContract(factor);\n    \n        approveIfZero(borrowToken,caller);\n        (bool _success,) = caller.call(_payload);\n        require(_success);\n        \n        VirtualAddress(_virtualAddress).safeTransfer(returnToken,msg.sender,returnAmount);\n        \n        uint returnTokenIncome = ERC20(returnToken).balanceOf(_virtualAddress);\n        if (returnTokenIncome > 0) {\n            VirtualAddress(_virtualAddress).safeTransfer(returnToken,incomeReceipt,returnTokenIncome);\n        }\n       \n        uint borrowTokenIncome = ERC20(borrowToken).balanceOf(address(this));\n        if (borrowTokenIncome > 0) {\n            TransferHelper.safeTransfer(borrowToken,incomeReceipt,borrowTokenIncome);\n        }\n        \n        VirtualAddress(_virtualAddress).destory(incomeReceipt);\n    }\n    \n    function decodeSwapData(bytes memory _data) public pure returns (address caller, bytes memory _payload, uint factor) {\n         (caller, _payload,  factor) = abi.decode(_data,(address,bytes,uint));    \n    }\n    \n    \n}\n\n"
    }
  }
}