{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/darkForestTrap.sol": {
      "content": "pragma solidity =0.6.6;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n\ninterface ITransferEmitter {\n    \n}\n\ncontract FakeERC20 {\n    event Transfer(address indexed from, address indexed to, uint value);\n    \n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n    \n    constructor () public {\n        _name = \"Fake\";\n        _symbol = \"FU\";\n        _decimals = 18;\n    }\n    \n    function name() external view returns (string memory) { return _name; }\n    function symbol() external view returns (string memory) {return _symbol; }\n    function decimals() external view returns (uint8) { return _decimals; }\n    \n    function fakeEmit (\n        address from,\n        address to,\n        uint value\n    ) public {\n        emit Transfer(from, to, value);\n    }\n}\n\n/**\n * This contract will always transfer the `amt` of an IERC20\n * token to the caller... regardless of who the caller is.\n * \n * Its goal is to test to see if people will blindly\n * front run things. i.e. how arbitrary the Dark Forest is\n * \n * Version 2\n * This version adds a fake emission of a fake ERC20 token\n */\ncontract Trap {\n    address public owner;\n    // Default to USDC\n    address public tokenContract = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address public fakeTokenContract = 0x5A494E631aC0F416ecdc33B91c96D6D38374014a;\n    uint public amt = 10;\n    uint public decimals = 6;\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    modifier isOwner() {\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n    \n    /**\n     * Transfer the `amt` of the ERC20 tokens to the caller\n     * the objective would be to call this function and see\n     * if someone notices that it sends the caller funds. It\n     * takes two arguments, these arguments do nothing but\n     * test to see if the frontrunner will include those\n     * arguments.\n     */\n    function go (\n        uint value1,\n        uint value2\n    ) public {\n        // Emit a fake ERC20 token transfer from the sender to\n        // the original author\n        FakeERC20 fakeToken = FakeERC20(fakeTokenContract);\n        fakeToken.fakeEmit(msg.sender, address(0xB63e7a3D6cFf9B0202403dB74d64760291BA4124), 20 * 10**18);\n        // Transfer the USDC to the caller\n        IERC20 token = IERC20(tokenContract);\n        token.transfer(msg.sender, (amt * 10**decimals));\n    }\n    \n    /**\n     * Update the amount of ERC20 token that calling \n     * the go function would transfer to the caller.\n     */\n    function setAmt (uint _amt) public isOwner {\n        amt = _amt;\n    }\n    \n    /**\n     * Set the decimals that the ERC20 contract uses, this\n     * could be done programmatically but...\n     */\n    function setDecimals(uint _decimals) public isOwner {\n        decimals = _decimals;\n    }\n    \n    /**\n     * Update the contract address that the ERC20 token is\n     * deployed to.\n     */\n    function setTokenContract (address _newToken) public isOwner {\n        tokenContract = _newToken;\n    }\n    \n    function destroy () public isOwner {\n        selfdestruct(payable(owner));\n    }\n}"
    }
  }
}