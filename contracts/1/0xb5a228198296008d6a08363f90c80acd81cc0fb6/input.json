{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/usdt.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n    function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n        uint80 roundId,\r\n        int answer,\r\n        uint startedAt,\r\n        uint updatedAt,\r\n        uint80 answeredInRound\r\n    );\r\n}\r\n\r\ncontract PreSale {\r\n    IERC20 immutable public token; //通证的地址\r\n    address payable immutable public receiver;\r\n    AggregatorV3Interface constant public priceFeed = AggregatorV3Interface(\r\n        // 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e //testnet\r\n        0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\r\n    );\r\n    event Deposit(address indexed sender, uint amount, uint t);\r\n\r\n    constructor(address _token, address payable _receiver) {\r\n        token = IERC20(_token);\r\n        receiver = _receiver;\r\n    }\r\n\r\n    function deposit() public payable {\r\n        uint256 amount = SDamount(msg.value);\r\n        require(amount > 0, 'min amount');\r\n        receiver.transfer(msg.value);\r\n        token.transfer(msg.sender, amount);\r\n        emit Deposit(msg.sender, msg.value, 1);\r\n    }\r\n\r\n    function SDamount(uint _value) public view returns (uint256) {\r\n        return _value * getLatestPrice() / (1e7 * 23);\r\n    }\r\n\r\n    function getLatestPrice() public view returns (uint256) {\r\n        ( , int price, , , ) = priceFeed.latestRoundData();\r\n        // for BNB / USD price is scaled up by 10 ** 8\r\n        return uint256(price);\r\n    }\r\n\r\n}"}}}