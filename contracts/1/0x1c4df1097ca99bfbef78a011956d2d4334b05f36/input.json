{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/GOMTestCoin.sol":{"content":"pragma solidity ^0.6.1;\ncontract GomTestCoin {\n    string public name = 'GomTestCoin'; \n    //currency name. Please feel free to change it\n    string public symbol = 'gomtest'; \n    uint256 totalSupply_;\n\n    //choose a currency symbol. Please feel free to change it\n    mapping (address => uint) balances; \n    //a key-value pair to store addresses and their account balances\n    event Transfer(address _from, address _to, uint256 _value); \n    // declaration of an event. Event will not do anything but add a record to the log\n    constructor() public { \n        //when the contract is created, the constructor will be called automatically\n        balances[msg.sender] = 10000000; \n        //set the balances of creator account to be 10000. Please feel free to change it to any number you want.\n    }\n    function sendCoin(address _receiver, uint _amount) public returns(bool sufficient) {\n        if (balances[msg.sender] < _amount) return false;  \n        // validate transfer\n        balances[msg.sender] -= _amount;\n        balances[_receiver] += _amount;\n        emit Transfer(msg.sender, _receiver, _amount); \n        // complete coin transfer and call event to record the log\n        return true;\n    }\n    function getBalance(address _addr) public view returns(uint) { \n        //balance check\n        return balances[_addr];\n    }\n}\n"}}}