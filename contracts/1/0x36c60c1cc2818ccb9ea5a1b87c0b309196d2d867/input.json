{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/TA.sol":{"content":"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.5;\npragma experimental ABIEncoderV2;\n\n\ninterface ERC20 {\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n}\n\n\n// ERC20-style token metadata\n// 0xEeee...EEeE address is used for ETH\nstruct TokenMetadata {\n    address token;\n    string name;\n    string symbol;\n    uint8 decimals;\n}\n\n\nstruct Component {\n    address token;    // Address of token contract\n    string tokenType; // Token type (\"ERC20\" by default)\n    uint256 rate;     // Price per share (1e18)\n}\n\n\n/**\n * @title Token adapter interface.\n * @dev getMetadata() and getComponents() functions MUST be implemented.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ninterface TokenAdapter {\n\n    /**\n     * @dev MUST return TokenMetadata struct with ERC20-style token info.\n     * struct TokenMetadata {\n     *     address token;\n     *     string name;\n     *     string symbol;\n     *     uint8 decimals;\n     * }\n     */\n    function getMetadata(address token) external view returns (TokenMetadata memory);\n\n    /**\n    * @dev MUST return array of Component structs with underlying tokens rates for the given token.\n    * struct Component {\n    *     address token;    // Address of token contract\n    *     string tokenType; // Token type (\"ERC20\" by default)\n    *     uint256 rate;     // Price per share (1e18)\n    * }\n    */\n    function getComponents(address token) external view returns (Component[] memory);\n}\n\n\n/**\n * @dev stableswap contract interface.\n * Only the functions required for CurveAdapter contract are added.\n * The stableswap contract is available here\n * github.com/curvefi/curve-contract/blob/compounded/vyper/stableswap.vy.\n */\n// solhint-disable-next-line contract-name-camelcase\ninterface stableswap {\n    function coins(int128) external view returns (address);\n    function balances(int128) external view returns (uint256);\n}\n\n\n/**\n * @title Token adapter for Curve pool tokens.\n * @dev Implementation of TokenAdapter interface.\n * @author Igor Sobolev <sobolev@zerion.io>\n */\ncontract CurveTokenAdapter is TokenAdapter {\n\n    address internal constant COMPOUND_POOL_TOKEN = 0x845838DF265Dcd2c412A1Dc9e959c7d08537f8a2;\n    address internal constant Y_POOL_TOKEN = 0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8;\n    address internal constant BUSD_POOL_TOKEN = 0x3B3Ac5386837Dc563660FB6a0937DFAa5924333B;\n    address internal constant SUSD_POOL_TOKEN = 0xC25a3A3b969415c80451098fa907EC722572917F;\n\n    /**\n     * @return TokenMetadata struct with ERC20-style token info.\n     * @dev Implementation of TokenAdapter interface function.\n     */\n    function getMetadata(address token) external view override returns (TokenMetadata memory) {\n        return TokenMetadata({\n            token: token,\n            name: getPoolName(token),\n            symbol: ERC20(token).symbol(),\n            decimals: ERC20(token).decimals()\n        });\n    }\n\n    /**\n     * @return Array of Component structs with underlying tokens rates for the given token.\n     * @dev Implementation of TokenAdapter interface function.\n     */\n    function getComponents(address token) external view override returns (Component[] memory) {\n        (stableswap ss, uint256 length, string memory tokenType) = getPoolInfo(token);\n        Component[] memory underlyingTokens = new Component[](length);\n\n        for (uint256 i = 0; i < length; i++) {\n            underlyingTokens[i] = Component({\n                token: ss.coins(int128(i)),\n                tokenType: tokenType,\n                rate: ss.balances(int128(i)) * 1e18 / ERC20(token).totalSupply()\n            });\n        }\n\n        return underlyingTokens;\n    }\n\n    /**\n     * @return Stableswap address, number of coins, type of tokens inside.\n     */\n    function getPoolInfo(address token) internal pure returns (stableswap, uint256, string memory) {\n        if (token == COMPOUND_POOL_TOKEN) {\n            return (stableswap(0xA2B47E3D5c44877cca798226B7B8118F9BFb7A56), 2, \"CToken\");\n        } else if (token == Y_POOL_TOKEN) {\n            return (stableswap(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51), 4, \"YToken\");\n        } else if (token == BUSD_POOL_TOKEN) {\n            return (stableswap(0x79a8C46DeA5aDa233ABaFFD40F3A0A2B1e5A4F27), 4, \"YToken\");\n        } else if (token == SUSD_POOL_TOKEN) {\n            return (stableswap(0xA5407eAE9Ba41422680e2e00537571bcC53efBfD), 4, \"ERC20\");\n        } else {\n            return (stableswap(address(0)), 0, \"\");\n        }\n    }\n\n    function getPoolName(address token) internal pure returns (string memory) {\n        if (token == COMPOUND_POOL_TOKEN) {\n            return \"Compound pool\";\n        } else if (token == Y_POOL_TOKEN) {\n            return \"Y pool\";\n        } else if (token == BUSD_POOL_TOKEN) {\n            return \"bUSD pool\";\n        } else if (token == SUSD_POOL_TOKEN) {\n            return \"sUSD pool\";\n        } else {\n            return \"Unknown pool\";\n        }\n    }\n}\n"}}}