{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 150
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "LendingPoolParametersProvider.sol": {
      "content": "// SPDX-License-Identifier: \r\n// File: contracts/libraries/openzeppelin-upgradeability/VersionedInitializable.sol\r\n\r\npragma solidity >=0.4.24 <0.6.0;\r\n\r\n/**\r\n * VersionedInitializable\r\n * -\r\n * Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n * -\r\n * This contract was cloned from Populous and modified to work with the Populous World eco-system.\r\n **/\r\ncontract VersionedInitializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    uint256 private lastInitializedRevision = 0;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        uint256 revision = getRevision();\r\n        require(\r\n            initializing ||\r\n                isConstructor() ||\r\n                revision > lastInitializedRevision,\r\n            \"Contract instance has already been initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            lastInitializedRevision = revision;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev returns the revision number of the contract.\r\n    /// Needs to be defined in the inherited class as a constant.\r\n    function getRevision() internal pure returns (uint256);\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        uint256 cs;\r\n        //solium-disable-next-line\r\n        assembly {\r\n            cs := extcodesize(address)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/configuration/UintStorage.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract UintStorage {\r\n    mapping(bytes32 => uint256) private uints;\r\n\r\n    function getUint(bytes32 _key) public view returns (uint256) {\r\n        return uints[_key];\r\n    }\r\n\r\n    function _setUint(bytes32 _key, uint256 _value) internal {\r\n        uints[_key] = _value;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/configuration/LendingPoolParametersProvider.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n* LendingPoolParametersProvider contract\r\n* -\r\n* stores the configuration parameters of the Lending Pool contract\r\n* -\r\n* This contract was cloned from Populous and modified to work with the Populous World eco-system.\r\n**/\r\n\r\ncontract LendingPoolParametersProvider is VersionedInitializable {\r\n\r\n    uint256 private constant MAX_STABLE_RATE_BORROW_SIZE_PERCENT = 25;\r\n    uint256 private constant REBALANCE_DOWN_RATE_DELTA = (1e27)/5;\r\n    uint256 private constant FLASHLOAN_FEE_TOTAL = 35;\r\n    uint256 private constant FLASHLOAN_FEE_PROTOCOL = 3000;\r\n\r\n    uint256 constant private DATA_PROVIDER_REVISION = 0x1;\r\n\r\n    function getRevision() internal pure returns(uint256) {\r\n        return DATA_PROVIDER_REVISION;\r\n    }\r\n\r\n    /**\r\n    * @dev initializes the LendingPoolParametersProvider after it's added to the proxy\r\n    * @param _addressesProvider the address of the LendingPoolAddressesProvider\r\n    */\r\n    function initialize(address _addressesProvider) public initializer {\r\n    }\r\n    /**\r\n    * @dev returns the maximum stable rate borrow size, in percentage of the available liquidity.\r\n    **/\r\n    function getMaxStableRateBorrowSizePercent() external pure returns (uint256)  {\r\n        return MAX_STABLE_RATE_BORROW_SIZE_PERCENT;\r\n    }\r\n\r\n    /**\r\n    * @dev returns the delta between the current stable rate and the user stable rate at\r\n    *      which the borrow position of the user will be rebalanced (scaled down)\r\n    **/\r\n    function getRebalanceDownRateDelta() external pure returns (uint256) {\r\n        return REBALANCE_DOWN_RATE_DELTA;\r\n    }\r\n\r\n    /**\r\n    * @dev returns the fee applied to a flashloan and the portion to redirect to the protocol, in basis points.\r\n    **/\r\n    function getFlashLoanFeesInBips() external pure returns (uint256, uint256) {\r\n        return (FLASHLOAN_FEE_TOTAL, FLASHLOAN_FEE_PROTOCOL);\r\n    }\r\n}"
    }
  }
}