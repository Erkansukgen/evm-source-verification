{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/ballot.sol": {
      "content": "pragma solidity >=0.4.24 <0.6.0;\r\n\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  function balanceOf(address who) public view returns (uint);\r\n  function transfer(address to, uint value) public;\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n  function allowance(address owner, address spender) public view returns (uint);\r\n  function transferFrom(address from, address to, uint value) public;\r\n  function approve(address spender, uint value) public;\r\n  \r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n  mapping(address => uint) public balances;\r\n  function transfer(address _to, uint _value) public{\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\ncontract StandardToken is BasicToken, ERC20 {  \r\n  mapping (address => mapping (address => uint)) allowed;\r\n  function transferFrom(address _from, address _to, uint _value) public {\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint _value) public{\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0)) ;\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n  }\r\n  \r\n  function allowance(address _owner, address _spender) public view returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\ncontract Erc20Token is StandardToken {\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals ;\r\n  // 18 decimals is the strongly suggested default, avoid changing it\r\n  /**\r\n   * @dev Contructor that gives msg.sender all of existing tokens.\r\n   */\r\n  constructor(uint256 initialSupply,string memory tokenName ,string memory tokenSymbol,uint8 tokenDecimals) public {\r\n     if(tokenDecimals > 18)\r\n        tokenDecimals = 18;\r\n     decimals = tokenDecimals;\r\n     totalSupply = initialSupply.mul(10 ** uint256(decimals)); // Update total supply with the decimal amount\r\n     balances[msg.sender] = totalSupply;                   // Give the creator all initial tokens\r\n     name = tokenName;                                      // Set the name for display purposes\r\n     symbol = tokenSymbol;                                  // Set the symbol for display purposes\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint a, uint b) internal pure  returns (uint) {\r\n    uint c = a * b;\r\n    require(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    require(b > 0);\r\n    uint c = a / b;\r\n    require(a == b * c + a % b);\r\n    return c;\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n  function max64(uint64 a, uint64 b) internal  pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min64(uint64 a, uint64 b) internal  pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n  function max256(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min256(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}"
    }
  }
}