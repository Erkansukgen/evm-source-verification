{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"aave permissioned/checkHealthSimple.sol":{"content":"pragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\ninterface ILendingPool {\n  function getUserAccountData(address user) external view returns (\n      uint256 totalCollateralETH,\n      uint256 totalDebtETH,\n      uint256 availableBorrowsETH,\n      uint256 currentLiquidationThreshold,\n      uint256 ltv,\n      uint256 healthFactor\n  );\n}\ncontract checkHealth {\n    receive() external payable {}\n\n    ILendingPool public lendingPool = ILendingPool(address(0x37D7306019a38Af123e4b245Eb6C28AF552e0bB0));\n\n    function executeOperation(address[] memory users) public view returns (uint256[] memory) {\n        uint256 i;\n        uint256[] memory result = new uint256[](users.length);\n\n        for(i = 0; i < users.length; i++) {\n            (,,,,,uint256 hf) = lendingPool.getUserAccountData(users[i]);\n                result[i] = hf;\n        }\n        return result;\n    }\n}\n"}}}