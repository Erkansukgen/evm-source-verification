{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/implementation.sol":{"content":"pragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\nimport \"./libs/SafeMath.sol\";\r\nimport \"./libs/ISoloMargin.sol\";\r\nimport \"./libs/FlashloanBase.sol\";\r\nimport \"./libs/ICallee.sol\";\r\nimport \"./libs/Interfaces.sol\";\r\nimport \"./libs/UniswapV2.sol\";\r\nimport \"./libs/IERC20.sol\";\r\nimport \"./libs/Addresses.sol\";\r\n\r\ncontract Implementation {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    struct Swap {\r\n        uint protocol;\r\n        address swapContract;\r\n        address poolContract;\r\n        address tokenAcontract;\r\n        address tokenBcontract;\r\n    }\r\n    \r\n    struct ArbSequence {\r\n        uint targetBlock;\r\n        bool WithLoan;\r\n        uint LoanProtocolID;\r\n        address LoanContract;\r\n        address LoanToken;\r\n        address RepayToken;\r\n        uint initialAmountIn;\r\n        uint minAmountOut;\r\n        uint estGasCost;\r\n        Swap[] swapRequests;\r\n    }\r\n    \r\n    event BalancerDebug(address indexed pool, uint balTokenIn, uint dwTokenIn, uint balTokenOut, uint dwTokenOut, uint inputAmount, uint outputAmount);\r\n    event UniswapDebug(address indexed pool, uint balTokenIn, uint balTokenOut, uint inputAmount, uint outputAmount);\r\n    event OutputDebug(uint lastAmount, uint checkMinAmountOut, uint estGasCost);\r\n    event FailCheck(uint targetBlock);\r\n    \r\n    function ExecuteArbitrage(ArbSequence memory Arbitrage) public {\r\n        bool isValid;\r\n        if (Arbitrage.targetBlock == 0 || block.number == Arbitrage.targetBlock) {\r\n            isValid = true;\r\n        } else {\r\n            emit FailCheck(Arbitrage.targetBlock);\r\n        }\r\n        if (isValid) {\r\n            uint requestsLength = Arbitrage.swapRequests.length;\r\n            uint checkMinAmountOut = Arbitrage.initialAmountIn;\r\n            if (Arbitrage.WithLoan) {\r\n                if (Arbitrage.LoanProtocolID == 1) {\r\n                    ERC20Token tokenIn = ERC20Token(Arbitrage.RepayToken);\r\n                    ERC20Token tokenOut = ERC20Token(Arbitrage.LoanToken);\r\n                    uint256 balTokenIn = tokenIn.balanceOf(Arbitrage.LoanContract);\r\n                    uint256 balTokenOut = tokenOut.balanceOf(Arbitrage.LoanContract);\r\n                    checkMinAmountOut = getAmountIn(Arbitrage.initialAmountIn, balTokenIn, balTokenOut);\r\n                    emit UniswapDebug(Arbitrage.LoanContract, balTokenIn, balTokenOut, Arbitrage.initialAmountIn, checkMinAmountOut);\r\n                }\r\n            }\r\n            uint lastAmount = Arbitrage.initialAmountIn;\r\n            for (uint i=0; i<requestsLength; i++) {\r\n                Swap memory currentRequest = Arbitrage.swapRequests[i];\r\n                ERC20Token tokenIn = ERC20Token(currentRequest.tokenAcontract);\r\n                ERC20Token tokenOut = ERC20Token(currentRequest.tokenBcontract);\r\n                uint256 balTokenIn = tokenIn.balanceOf(currentRequest.poolContract);\r\n                uint256 balTokenOut = tokenOut.balanceOf(currentRequest.poolContract);\r\n                if (currentRequest.protocol == 1) { // Uniswap\r\n                    uint inputAmount = lastAmount;\r\n                    lastAmount = getAmountOut(inputAmount, balTokenIn, balTokenOut);\r\n                    emit UniswapDebug(currentRequest.poolContract, balTokenIn, balTokenOut, inputAmount, lastAmount);\r\n                } else if (currentRequest.protocol == 2) { // Balancer\r\n                    BalancerPool pool = BalancerPool(currentRequest.poolContract);\r\n                    uint dwTokenIn = pool.getDenormalizedWeight(currentRequest.tokenAcontract);\r\n                    uint dwTokenOut = pool.getDenormalizedWeight(currentRequest.tokenBcontract);\r\n                    uint poolFees = pool.getSwapFee();\r\n                    uint inputAmount = lastAmount;\r\n                    lastAmount = calcOutGivenIn(balTokenIn, dwTokenIn, balTokenOut, dwTokenOut, inputAmount, poolFees);\r\n                    uint outputAmount = lastAmount;\r\n                    emit BalancerDebug(currentRequest.poolContract, balTokenIn, dwTokenIn, balTokenOut, dwTokenOut, inputAmount, outputAmount);\r\n                }\r\n            }\r\n            checkMinAmountOut = checkMinAmountOut + Arbitrage.estGasCost;\r\n            if (lastAmount < checkMinAmountOut) {\r\n                isValid = false;\r\n            }\r\n            emit OutputDebug(lastAmount, checkMinAmountOut, Arbitrage.estGasCost);\r\n        }\r\n       // isValid = true; // TEMP\r\n        if (isValid) {\r\n            if (Arbitrage.WithLoan) {\r\n                if (Arbitrage.LoanProtocolID == 1) {\r\n                    UniswapLoan(Arbitrage.LoanContract, Arbitrage.LoanToken, Arbitrage.RepayToken, Arbitrage.initialAmountIn, Arbitrage.minAmountOut, Arbitrage.swapRequests);\r\n                } else if (Arbitrage.LoanProtocolID == 2) {\r\n                    dYdXLoan(Arbitrage.LoanContract, Arbitrage.LoanToken, Arbitrage.RepayToken, Arbitrage.initialAmountIn, Arbitrage.minAmountOut, Arbitrage.swapRequests);\r\n                } else if (Arbitrage.LoanProtocolID == 3) {\r\n                    AaveLoan(Arbitrage.LoanContract, Arbitrage.LoanToken, Arbitrage.RepayToken, Arbitrage.initialAmountIn, Arbitrage.minAmountOut, Arbitrage.swapRequests);\r\n                } else {\r\n                    revert(\"Invalid loan protocol ID\");\r\n                }\r\n            } else {\r\n                Sequence(Arbitrage.initialAmountIn, Arbitrage.minAmountOut, Arbitrage.swapRequests);\r\n            }\r\n        }\r\n    }\r\n\r\n    function Sequence(uint initialAmountIn, uint minAmountOut, Swap[] memory swapRequests) internal {\r\n        uint requestsLength = swapRequests.length;\r\n        uint lastAmountOut = initialAmountIn;\r\n        \r\n        for (uint i=0; i<requestsLength; i++) { \r\n            Swap memory currentRequest = swapRequests[i];\r\n                \r\n            if (lastAmountOut == 0) {\r\n                revert(\"Invalid lastAmountOut\");\r\n            }\r\n         \r\n            if (currentRequest.protocol == 1) { // Uniswap\r\n                uint currAmountOut = SwapUniswap(currentRequest.swapContract, currentRequest.tokenAcontract, currentRequest.tokenBcontract, lastAmountOut);\r\n                if (currAmountOut > type(uint).min) {\r\n                    lastAmountOut = currAmountOut;\r\n                } else {\r\n                    revert(\"Uniswap invalid out amount\");\r\n                }\r\n            } else if (currentRequest.protocol == 2) { // Balancer\r\n                uint currAmountOut = SwapBalancer(currentRequest.swapContract, currentRequest.tokenAcontract, currentRequest.tokenBcontract, lastAmountOut);\r\n                if (currAmountOut > type(uint).min) {\r\n                    lastAmountOut = currAmountOut;\r\n                } else {\r\n                    revert(\"Balancer invalid out amount\");\r\n                }\r\n            } else if (currentRequest.protocol == 3) { // Curve\r\n                uint currAmountOut = SwapCurve(currentRequest.swapContract, currentRequest.poolContract, currentRequest.tokenAcontract, currentRequest.tokenBcontract, lastAmountOut);\r\n                if (currAmountOut > type(uint).min) {\r\n                    lastAmountOut = currAmountOut;\r\n                } else {\r\n                    revert(\"Curve invalid out amount\");\r\n                }\r\n            } else if (currentRequest.protocol == 4) { // Sushiswap\r\n                \r\n            } else {\r\n                revert(\"Invalid protocol in sequence\");\r\n            }\r\n            \r\n        }\r\n        \r\n        if (lastAmountOut < minAmountOut) {\r\n            revert(\"lastAmountOut < minAmountOut\");\r\n        }\r\n    }\r\n    \r\n    function SwapUniswap(address swapContract, address contractA, address contractB, uint amountIn) public returns(uint) {\r\n        checkAllowance(contractA, swapContract, amountIn);\r\n        UniswapRouter router = UniswapRouter(swapContract);\r\n        address[] memory fullPath = new address[](2);\r\n        fullPath[0] = contractA;\r\n        fullPath[1] = contractB;\r\n        uint deadLine = block.timestamp + 20 minutes;\r\n        uint[] memory Output = router.swapExactTokensForTokens(amountIn, type(uint).min, fullPath, address(this), deadLine);\r\n        return Output[Output.length - 1];\r\n    }\r\n    \r\n    function SwapBalancer(address swapContract, address contractA, address contractB, uint amountIn) public returns(uint) {\r\n        checkAllowance(contractA, swapContract, amountIn);\r\n        BalancerPool pool = BalancerPool(swapContract);\r\n        (uint tokenOut, uint spotAfter) = pool.swapExactAmountIn(contractA, amountIn, contractB, type(uint).min, type(uint).max);\r\n        return tokenOut;\r\n    }\r\n    \r\n    function SwapCurve(address swapContract, address poolContract, address contractA, address contractB, uint amountIn) public returns(uint) {\r\n        checkAllowance(contractA, swapContract, amountIn);\r\n        CurveRegistry registry = CurveRegistry(swapContract);\r\n        ERC20Token outToken = ERC20Token(contractB);\r\n        uint256 startOutToken = outToken.balanceOf(address(this));\r\n        registry.exchange(poolContract, contractA, contractB, amountIn, type(uint).min);\r\n        uint256 afterOutToken = outToken.balanceOf(address(this));\r\n        uint256 swappedTokens = afterOutToken.sub(startOutToken);\r\n        return swappedTokens;\r\n    }\r\n    \r\n    function checkAllowance(address tokenContract, address spenderContract, uint256 approvedAmount) internal {\r\n        ERC20Token targetToken = ERC20Token(tokenContract);\r\n        uint256 allowed = targetToken.allowance(address(this), spenderContract);\r\n        if (allowed < approvedAmount) {\r\n            if (allowed != 0) {\r\n                safeApprove(IERC20(tokenContract), spenderContract, 0);\r\n            }\r\n            safeApprove(IERC20(tokenContract), spenderContract, (approvedAmount * 1000));\r\n        }\r\n    }\r\n    \r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    \r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n    \r\n    // Uniswap flash loan\r\n    \r\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external {\r\n        require(sender == address(this)); // ensure that proxy contract is the caller\r\n        address token0 = IUniswapV2Pair(msg.sender).token0(); \r\n        address token1 = IUniswapV2Pair(msg.sender).token1();\r\n        \r\n        //assert(msg.sender == IUniswapV2Factory(Proxy(address(this)).getStaticConfig(1)).getPair(token0, token1)); // ensure that msg.sender is an Uniswap pair\r\n        (\r\n            address LoanContract,\r\n            address LoanToken,\r\n            address RepayToken,\r\n            uint initialAmountIn,\r\n            uint minAmountOut,\r\n            Swap[] memory swapRequests\r\n        ) = abi.decode(data, (address, address, address, uint, uint, Swap[]));\r\n        require(msg.sender == LoanContract); // ensure that msg.sender is LoanContract\r\n    \r\n        uint amountToRepay;\r\n        uint ReserveIn;\r\n        uint ReserveOut;\r\n        if (LoanToken == RepayToken) {\r\n            uint fee = ((initialAmountIn * 3) / 997) + 1;\r\n            amountToRepay = initialAmountIn + fee;\r\n        } else {\r\n            (uint Reserve0, uint Reserve1, uint BlockTimestamp) = IUniswapV2Pair(msg.sender).getReserves();\r\n            if (LoanToken == token0) {\r\n                ReserveIn = Reserve1;\r\n                ReserveOut = Reserve0;\r\n            }\r\n            if (LoanToken == token1) {\r\n                ReserveIn = Reserve0;\r\n                ReserveOut = Reserve1;\r\n            }\r\n            amountToRepay = getAmountIn(initialAmountIn, ReserveIn, ReserveOut);\r\n        }\r\n        //emit UniswapDebug(LoanContract, ReserveIn, ReserveOut, initialAmountIn, amountToRepay); // TEMP\r\n        \r\n        Sequence(initialAmountIn, amountToRepay, swapRequests);\r\n        \r\n        ERC20Token(RepayToken).transfer(msg.sender, amountToRepay);\r\n    }\r\n    \r\n    function UniswapLoan(address LoanContract, address LoanToken, address RepayToken, uint initialAmountIn, uint minAmountOut, Swap[] memory swapRequests) internal {\r\n        address token0 = IUniswapV2Pair(LoanContract).token0(); \r\n        address token1 = IUniswapV2Pair(LoanContract).token1();\r\n        \r\n        uint amount0Out;\r\n        uint amount1Out;\r\n        if (LoanToken == token0) {\r\n            amount0Out = initialAmountIn;\r\n            amount1Out = 0;\r\n        } else if (LoanToken == token1) {\r\n            amount1Out = initialAmountIn;\r\n            amount0Out = 0;\r\n        }\r\n        require(amount1Out == 0 || amount0Out == 0);\r\n        \r\n        Proxy(address(this)).setAllowedDelegate(LoanContract);\r\n        \r\n        bytes memory SequenceData = abi.encode(\r\n            LoanContract,\r\n            LoanToken,\r\n            RepayToken,\r\n            initialAmountIn,\r\n            minAmountOut,\r\n            swapRequests\r\n        );\r\n        IUniswapV2Pair(LoanContract).swap(amount0Out, amount1Out, address(this), SequenceData);\r\n    }\r\n    \r\n    // dYdX flash loan\r\n    \r\n    function callFunction(address sender, Account.Info memory account, bytes memory data) external {\r\n        (\r\n            address LoanContract,\r\n            address LoanToken,\r\n            address RepayToken,\r\n            uint initialAmountIn,\r\n            uint minAmountOut,\r\n            Swap[] memory swapRequests\r\n        ) = abi.decode(data, (address, address, address, uint, uint, Swap[]));\r\n        \r\n        Sequence(initialAmountIn, minAmountOut, swapRequests);\r\n    }\r\n    \r\n    function dYdXLoan(address LoanContract, address LoanToken, address RepayToken, uint initialAmountIn, uint minAmountOut, Swap[] memory swapRequests) internal {\r\n        bytes memory SequenceData = abi.encode(\r\n            LoanContract,\r\n            LoanToken,\r\n            RepayToken,\r\n            initialAmountIn,\r\n            minAmountOut,\r\n            swapRequests\r\n        );\r\n        uint RepayAmount = initialAmountIn.add(2);\r\n        ISoloMargin soloContract = ISoloMargin(LoanContract);\r\n        uint256 marketId = DydxFlashloanBase._getMarketIdFromTokenAddress(LoanContract, LoanToken);\r\n        checkAllowance(LoanToken, LoanContract, RepayAmount);\r\n        \r\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\r\n        \r\n        operations[0] = DydxFlashloanBase._getWithdrawAction(marketId, initialAmountIn);\r\n        operations[1] = DydxFlashloanBase._getCallAction(SequenceData);\r\n        operations[2] = DydxFlashloanBase._getDepositAction(marketId, RepayAmount);\r\n        \r\n        Account.Info[] memory accountInfos = new Account.Info[](1);\r\n        accountInfos[0] = DydxFlashloanBase._getAccountInfo();\r\n        \r\n        Proxy(address(this)).setAllowedDelegate(LoanContract);\r\n        soloContract.operate(accountInfos, operations);\r\n    }\r\n    \r\n    // Aave flash loan\r\n    \r\n    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes memory _params) external {\r\n        (\r\n            address LoanContract,\r\n            address LoanToken,\r\n            address RepayToken,\r\n            uint initialAmountIn,\r\n            uint minAmountOut,\r\n            Swap[] memory swapRequests\r\n        ) = abi.decode(_params, (address, address, address, uint, uint, Swap[]));\r\n        \r\n        uint RepayAmount = _amount.add(_fee);\r\n        \r\n        Sequence(initialAmountIn, minAmountOut, swapRequests);\r\n        \r\n        address Provider = ILendingPool(LoanContract).addressesProvider();\r\n        address payable LendingCore = ILendingPoolAddressesProvider(Provider).getLendingPoolCore();\r\n        \r\n        ERC20Token(LoanToken).transfer(LendingCore, RepayAmount);\r\n    }\r\n    \r\n    function AaveLoan(address LoanContract, address LoanToken, address RepayToken, uint initialAmountIn, uint minAmountOut, Swap[] memory swapRequests) internal {\r\n        bytes memory SequenceData = abi.encode(\r\n            LoanContract,\r\n            LoanToken,\r\n            RepayToken,\r\n            initialAmountIn,\r\n            minAmountOut,\r\n            swapRequests\r\n        );\r\n        ILendingPool LendingPool = ILendingPool(LoanContract);\r\n        Proxy(address(this)).setAllowedDelegate(LoanContract);\r\n        LendingPool.flashLoan(address(this), LoanToken, initialAmountIn, SequenceData);\r\n    }\r\n    \r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n    \r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n    \r\n    function calcOutGivenIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountIn,\r\n        uint swapFee\r\n    )\r\n        internal pure\r\n        returns (uint tokenAmountOut)\r\n    {\r\n        uint weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\r\n        uint adjustedIn = bsub((10**18), swapFee);\r\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\r\n        uint y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\r\n        uint foo = bpow(y, weightRatio);\r\n        uint bar = bsub((10**18), foo);\r\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\r\n        return tokenAmountOut;\r\n    }\r\n    \r\n    function bdiv(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        require(b != 0, \"ERR_DIV_ZERO\");\r\n        uint c0 = a * (10**18);\r\n        require(a == 0 || c0 / a == (10**18), \"ERR_DIV_INTERNAL\"); // bmul overflow\r\n        uint c1 = c0 + (b / 2);\r\n        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\r\n        uint c2 = c1 / b;\r\n        return c2;\r\n    }\r\n    \r\n    function bmul(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint c0 = a * b;\r\n        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\r\n        uint c1 = c0 + ((10**18) / 2);\r\n        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\r\n        uint c2 = c1 / (10**18);\r\n        return c2;\r\n    }\r\n    \r\n    function bsub(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        (uint c, bool flag) = bsubSign(a, b);\r\n        require(!flag, \"ERR_SUB_UNDERFLOW\");\r\n        return c;\r\n    }\r\n    \r\n    function badd(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint c = a + b;\r\n        require(c >= a, \"ERR_ADD_OVERFLOW\");\r\n        return c;\r\n    }\r\n    \r\n    function bpowi(uint a, uint n)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint z = n % 2 != 0 ? a : (10**18);\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            a = bmul(a, a);\r\n\r\n            if (n % 2 != 0) {\r\n                z = bmul(z, a);\r\n            }\r\n        }\r\n        return z;\r\n    }\r\n\r\n    function bpow(uint base, uint exp)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        require(base >= (1 wei), \"ERR_BPOW_BASE_TOO_LOW\");\r\n        require(base <= ((2 * (10**18)) - 1 wei), \"ERR_BPOW_BASE_TOO_HIGH\");\r\n        uint whole  = bfloor(exp);   \r\n        uint remain = bsub(exp, whole);\r\n        uint wholePow = bpowi(base, btoi(whole));\r\n        if (remain == 0) {\r\n            return wholePow;\r\n        }\r\n        uint partialResult = bpowApprox(base, remain, (10**18) / 10**10);\r\n        return bmul(wholePow, partialResult);\r\n    }\r\n\r\n    function bpowApprox(uint base, uint exp, uint precision)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint a     = exp;\r\n        (uint x, bool xneg)  = bsubSign(base, (10**18));\r\n        uint term = (10**18);\r\n        uint sum   = term;\r\n        bool negative = false;\r\n        for (uint i = 1; term >= precision; i++) {\r\n            uint bigK = i * (10**18);\r\n            (uint c, bool cneg) = bsubSign(a, bsub(bigK, (10**18)));\r\n            term = bmul(term, bmul(c, x));\r\n            term = bdiv(term, bigK);\r\n            if (term == 0) break;\r\n            if (xneg) negative = !negative;\r\n            if (cneg) negative = !negative;\r\n            if (negative) {\r\n                sum = bsub(sum, term);\r\n            } else {\r\n                sum = badd(sum, term);\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n    \r\n    function bsubSign(uint a, uint b)\r\n        internal pure\r\n        returns (uint, bool)\r\n    {\r\n        if (a >= b) {\r\n            return (a - b, false);\r\n        } else {\r\n            return (b - a, true);\r\n        }\r\n    }\r\n    \r\n    function btoi(uint a)\r\n        internal pure \r\n        returns (uint)\r\n    {\r\n        return a / (10**18);\r\n    }\r\n\r\n    function bfloor(uint a)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        return btoi(a) * (10**18);\r\n    }\r\n    \r\n}"},"browser/libs/Addresses.sol":{"content":"pragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"},"browser/libs/FlashloanBase.sol":{"content":"pragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\nimport \"./ISoloMargin.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\nlibrary DydxFlashloanBase {\r\n    using SafeMath for uint256;\r\n\r\n    // -- Internal Helper functions -- //\r\n\r\n    function _getMarketIdFromTokenAddress(address _solo, address token)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        ISoloMargin solo = ISoloMargin(_solo);\r\n\r\n        uint256 numMarkets = solo.getNumMarkets();\r\n\r\n        address curToken;\r\n        for (uint256 i = 0; i < numMarkets; i++) {\r\n            curToken = solo.getMarketTokenAddress(i);\r\n\r\n            if (curToken == token) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        revert(\"No marketId found for provided token\");\r\n    }\r\n\r\n    function _getRepaymentAmountInternal(uint256 amount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // Needs to be overcollateralize\r\n        // Needs to provide +2 wei to be safe\r\n        return amount.add(2);\r\n    }\r\n\r\n    function _getAccountInfo() internal view returns (Account.Info memory) {\r\n        return Account.Info({owner: address(this), number: 1});\r\n    }\r\n\r\n    function _getWithdrawAction(uint marketId, uint256 amount)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Withdraw,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: amount\r\n                }),\r\n                primaryMarketId: marketId,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: \"\"\r\n            });\r\n    }\r\n\r\n    function _getCallAction(bytes memory data)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Call,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: 0\r\n                }),\r\n                primaryMarketId: 0,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: data\r\n            });\r\n    }\r\n\r\n    function _getDepositAction(uint marketId, uint256 amount)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Deposit,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: true,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: amount\r\n                }),\r\n                primaryMarketId: marketId,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: \"\"\r\n            });\r\n    }\r\n}\r\n"},"browser/libs/ICallee.sol":{"content":"pragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport { Account } from \"./ISoloMargin.sol\";\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\ninterface ICallee {\r\n\r\n    // ============ Public Functions ============\r\n\r\n    /**\r\n     * Allows users to send this contract arbitrary data.\r\n     *\r\n     * @param  sender       The msg.sender to Solo\r\n     * @param  accountInfo  The account from which the data is being sent\r\n     * @param  data         Arbitrary data given by the sender\r\n     */\r\n    function callFunction(\r\n        address sender,\r\n        Account.Info memory accountInfo,\r\n        bytes memory data\r\n    )\r\n        external;\r\n}"},"browser/libs/IERC20.sol":{"content":"pragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n"},"browser/libs/ISoloMargin.sol":{"content":"pragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\nlibrary Account {\r\n    enum Status {Normal, Liquid, Vapor}\r\n    struct Info {\r\n        address owner; // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n    struct Storage {\r\n        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\r\n        Status status;\r\n    }\r\n}\r\n\r\n\r\nlibrary Actions {\r\n    enum ActionType {\r\n        Deposit, // supply tokens\r\n        Withdraw, // borrow tokens\r\n        Transfer, // transfer balance between accounts\r\n        Buy, // buy an amount of some token (publicly)\r\n        Sell, // sell an amount of some token (publicly)\r\n        Trade, // trade tokens against another account\r\n        Liquidate, // liquidate an undercollateralized or expiring account\r\n        Vaporize, // use excess tokens to zero-out a completely negative account\r\n        Call // send arbitrary data to an address\r\n    }\r\n\r\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\r\n\r\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\r\n\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        Types.AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n\r\n    struct DepositArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address from;\r\n    }\r\n\r\n    struct WithdrawArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address to;\r\n    }\r\n\r\n    struct TransferArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info accountOne;\r\n        Account.Info accountTwo;\r\n        uint256 market;\r\n    }\r\n\r\n    struct BuyArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 makerMarket;\r\n        uint256 takerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct SellArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 takerMarket;\r\n        uint256 makerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct TradeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info takerAccount;\r\n        Account.Info makerAccount;\r\n        uint256 inputMarket;\r\n        uint256 outputMarket;\r\n        address autoTrader;\r\n        bytes tradeData;\r\n    }\r\n\r\n    struct LiquidateArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info liquidAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct VaporizeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info vaporAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct CallArgs {\r\n        Account.Info account;\r\n        address callee;\r\n        bytes data;\r\n    }\r\n}\r\n\r\n\r\nlibrary Decimal {\r\n    struct D256 {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nlibrary Interest {\r\n    struct Rate {\r\n        uint256 value;\r\n    }\r\n\r\n    struct Index {\r\n        uint96 borrow;\r\n        uint96 supply;\r\n        uint32 lastUpdate;\r\n    }\r\n}\r\n\r\n\r\nlibrary Monetary {\r\n    struct Price {\r\n        uint256 value;\r\n    }\r\n    struct Value {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nlibrary Storage {\r\n    // All information necessary for tracking a market\r\n    struct Market {\r\n        // Contract address of the associated ERC20 token\r\n        address token;\r\n        // Total aggregated supply and borrow amount of the entire market\r\n        Types.TotalPar totalPar;\r\n        // Interest index of the market\r\n        Interest.Index index;\r\n        // Contract address of the price oracle for this market\r\n        address priceOracle;\r\n        // Contract address of the interest setter for this market\r\n        address interestSetter;\r\n        // Multiplier on the marginRatio for this market\r\n        Decimal.D256 marginPremium;\r\n        // Multiplier on the liquidationSpread for this market\r\n        Decimal.D256 spreadPremium;\r\n        // Whether additional borrows are allowed for this market\r\n        bool isClosing;\r\n    }\r\n\r\n    // The global risk parameters that govern the health and security of the system\r\n    struct RiskParams {\r\n        // Required ratio of over-collateralization\r\n        Decimal.D256 marginRatio;\r\n        // Percentage penalty incurred by liquidated accounts\r\n        Decimal.D256 liquidationSpread;\r\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\r\n        Decimal.D256 earningsRate;\r\n        // The minimum absolute borrow value of an account\r\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\r\n        Monetary.Value minBorrowedValue;\r\n    }\r\n\r\n    // The maximum RiskParam values that can be set\r\n    struct RiskLimits {\r\n        uint64 marginRatioMax;\r\n        uint64 liquidationSpreadMax;\r\n        uint64 earningsRateMax;\r\n        uint64 marginPremiumMax;\r\n        uint64 spreadPremiumMax;\r\n        uint128 minBorrowedValueMax;\r\n    }\r\n\r\n    // The entire storage state of Solo\r\n    struct State {\r\n        // number of markets\r\n        uint256 numMarkets;\r\n        // marketId => Market\r\n        mapping(uint256 => Market) markets;\r\n        // owner => account number => Account\r\n        mapping(address => mapping(uint256 => Account.Storage)) accounts;\r\n        // Addresses that can control other users accounts\r\n        mapping(address => mapping(address => bool)) operators;\r\n        // Addresses that can control all users accounts\r\n        mapping(address => bool) globalOperators;\r\n        // mutable risk parameters of the system\r\n        RiskParams riskParams;\r\n        // immutable risk limits of the system\r\n        RiskLimits riskLimits;\r\n    }\r\n}\r\n\r\n\r\nlibrary Types {\r\n    enum AssetDenomination {\r\n        Wei, // the amount is denominated in wei\r\n        Par // the amount is denominated in par\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta, // the amount is given as a delta from the current value\r\n        Target // the amount is given as an exact number to end up at\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    struct TotalPar {\r\n        uint128 borrow;\r\n        uint128 supply;\r\n    }\r\n\r\n    struct Par {\r\n        bool sign; // true if positive\r\n        uint128 value;\r\n    }\r\n\r\n    struct Wei {\r\n        bool sign; // true if positive\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\ninterface ISoloMargin {\r\n    struct OperatorArg {\r\n        address operator;\r\n        bool trusted;\r\n    }\r\n\r\n    function ownerSetSpreadPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 memory spreadPremium\r\n    ) external;\r\n\r\n    function getIsGlobalOperator(address operator) external view returns (bool);\r\n\r\n    function getMarketTokenAddress(uint256 marketId)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function ownerSetInterestSetter(uint256 marketId, address interestSetter)\r\n        external;\r\n\r\n    function getAccountValues(Account.Info memory account)\r\n        external\r\n        view\r\n        returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketPriceOracle(uint256 marketId)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function getMarketInterestSetter(uint256 marketId)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function getMarketSpreadPremium(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Decimal.D256 memory);\r\n\r\n    function getNumMarkets() external view returns (uint256);\r\n\r\n    function ownerWithdrawUnsupportedTokens(address token, address recipient)\r\n        external\r\n        returns (uint256);\r\n\r\n    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue)\r\n        external;\r\n\r\n    function ownerSetLiquidationSpread(Decimal.D256 memory spread) external;\r\n\r\n    function ownerSetEarningsRate(Decimal.D256 memory earningsRate) external;\r\n\r\n    function getIsLocalOperator(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function getAccountPar(Account.Info memory account, uint256 marketId)\r\n        external\r\n        view\r\n        returns (Types.Par memory);\r\n\r\n    function ownerSetMarginPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 memory marginPremium\r\n    ) external;\r\n\r\n    function getMarginRatio() external view returns (Decimal.D256 memory);\r\n\r\n    function getMarketCurrentIndex(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Interest.Index memory);\r\n\r\n    function getMarketIsClosing(uint256 marketId) external view returns (bool);\r\n\r\n    function getRiskParams() external view returns (Storage.RiskParams memory);\r\n\r\n    function getAccountBalances(Account.Info memory account)\r\n        external\r\n        view\r\n        returns (address[] memory, Types.Par[] memory, Types.Wei[] memory);\r\n\r\n    function renounceOwnership() external;\r\n\r\n    function getMinBorrowedValue() external view returns (Monetary.Value memory);\r\n\r\n    function setOperators(OperatorArg[] memory args) external;\r\n\r\n    function getMarketPrice(uint256 marketId) external view returns (address);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function isOwner() external view returns (bool);\r\n\r\n    function ownerWithdrawExcessTokens(uint256 marketId, address recipient)\r\n        external\r\n        returns (uint256);\r\n\r\n    function ownerAddMarket(\r\n        address token,\r\n        address priceOracle,\r\n        address interestSetter,\r\n        Decimal.D256 memory marginPremium,\r\n        Decimal.D256 memory spreadPremium\r\n    ) external;\r\n\r\n    function operate(\r\n        Account.Info[] memory accounts,\r\n        Actions.ActionArgs[] memory actions\r\n    ) external;\r\n\r\n    function getMarketWithInfo(uint256 marketId)\r\n        external\r\n        view\r\n        returns (\r\n            Storage.Market memory,\r\n            Interest.Index memory,\r\n            Monetary.Price memory,\r\n            Interest.Rate memory\r\n        );\r\n\r\n    function ownerSetMarginRatio(Decimal.D256 memory ratio) external;\r\n\r\n    function getLiquidationSpread() external view returns (Decimal.D256 memory);\r\n\r\n    function getAccountWei(Account.Info memory account, uint256 marketId)\r\n        external\r\n        view\r\n        returns (Types.Wei memory);\r\n\r\n    function getMarketTotalPar(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Types.TotalPar memory);\r\n\r\n    function getLiquidationSpreadForPair(\r\n        uint256 heldMarketId,\r\n        uint256 owedMarketId\r\n    ) external view returns (Decimal.D256 memory);\r\n\r\n    function getNumExcessTokens(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Types.Wei memory);\r\n\r\n    function getMarketCachedIndex(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Interest.Index memory);\r\n\r\n    function getAccountStatus(Account.Info memory account)\r\n        external\r\n        view\r\n        returns (uint8);\r\n\r\n    function getEarningsRate() external view returns (Decimal.D256 memory);\r\n\r\n    function ownerSetPriceOracle(uint256 marketId, address priceOracle) external;\r\n\r\n    function getRiskLimits() external view returns (Storage.RiskLimits memory);\r\n\r\n    function getMarket(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Storage.Market memory);\r\n\r\n    function ownerSetIsClosing(uint256 marketId, bool isClosing) external;\r\n\r\n    function ownerSetGlobalOperator(address operator, bool approved) external;\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function getAdjustedAccountValues(Account.Info memory account)\r\n        external\r\n        view\r\n        returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketMarginPremium(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Decimal.D256 memory);\r\n\r\n    function getMarketInterestRate(uint256 marketId)\r\n        external\r\n        view\r\n        returns (Interest.Rate memory);\r\n}\r\n"},"browser/libs/Interfaces.sol":{"content":"pragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\ninterface ILendingPool {\r\n    function flashLoan(address _receiver, address _reserve, uint256 _amount, bytes calldata _params) external;\r\n    function addressesProvider() external view returns (address);\r\n}\r\n\r\ninterface ILendingPoolAddressesProvider {\r\n    function getLendingPoolCore() external view returns (address payable);\r\n    function getLendingPool() external view returns (address);\r\n}\r\n\r\ncontract ERC20Token {\r\n    function approve(\r\n        address _spender, \r\n        uint256 _value\r\n    ) external returns (bool success) {}\r\n    \r\n    function transfer(\r\n        address dst, \r\n        uint256 amount\r\n    ) external returns (bool) {}\r\n    \r\n    function allowance(\r\n        address _owner, \r\n        address _spender\r\n    ) external returns (uint256 remaining) {}\r\n    \r\n    function balanceOf(\r\n        address _owner\r\n    ) external returns (uint256 balance) {}\r\n}\r\n\r\ncontract UniswapRouter {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts) {}\r\n}\r\n\r\ncontract CurveRegistry {\r\n    function exchange(\r\n        address _pool,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _expected\r\n    ) external returns (bool) {}\r\n}\r\n\r\ncontract BalancerPool {\r\n    function swapExactAmountIn(\r\n        address tokenIn,\r\n        uint tokenAmountIn,\r\n        address tokenOut,\r\n        uint minAmountOut,\r\n        uint maxPrice\r\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter) {}\r\n    \r\n    function calcOutGivenIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountIn,\r\n        uint swapFee\r\n    ) public pure returns (uint tokenAmountOut) {}\r\n    \r\n    function getDenormalizedWeight(\r\n        address token\r\n    ) external view returns (uint) {}\r\n    \r\n    function getSwapFee() external view returns (uint) {}\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function transfer(address to, uint value) external returns (bool);\r\n    event Swap(\r\n      address indexed sender,\r\n      uint amount0In,\r\n      uint amount1In,\r\n      uint amount0Out,\r\n      uint amount1Out,\r\n      address indexed to\r\n    );\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}\r\n\r\ninterface Proxy {\r\n    function setAllowedDelegate(address newAddress) external;\r\n    function getStaticConfig(uint Index) external returns (address);\r\n}"},"browser/libs/SafeMath.sol":{"content":"pragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a); // dev: overflow\r\n    }\r\n    \r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a); // dev: underflow\r\n        c = a - b;\r\n    }\r\n    \r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b); // dev: overflow\r\n    }\r\n    \r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0); // dev: divide by zero\r\n        c = a / b;\r\n    }\r\n    \r\n    function bdiv(uint a, uint b) internal pure returns (uint) {\r\n        uint BONE = 10**18;\r\n        require(b != 0, \"ERR_DIV_ZERO\");\r\n        uint c0 = a * BONE;\r\n        require(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\"); // bmul overflow\r\n        uint c1 = c0 + (b / 2);\r\n        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\r\n        uint c2 = c1 / b;\r\n        return c2;\r\n    }\r\n    \r\n    function getBase() internal pure returns (uint) {\r\n        uint BONE = 10**18;\r\n        return BONE;\r\n    }\r\n}"},"browser/libs/UniswapV2.sol":{"content":"pragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./Interfaces.sol\";\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint;\r\n    \r\n     function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n    \r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\r\n            ))));\r\n    }\r\n    \r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n}"}}}