{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "BronPresale.sol": {
      "content": "pragma solidity ^0.4.22;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n   address internal admin;\r\n   address internal owner;\r\n\r\n  constructor() internal {\r\n    owner = msg.sender;\r\n    admin = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Ownable: msg.sender not owner\");\r\n    _;\r\n  }\r\n\r\n\r\n \r\n}\r\n\r\ncontract BronPresale is Ownable {\r\n //variables\r\n //storing contract_amount collected for the event\r\n address public owner;\r\n uint256 public _bank = 0; \r\n\r\n using SafeMath for uint256;\r\n\r\n\r\n  constructor() public {\r\n  owner = msg.sender;\r\n  }\r\n\r\n  event invest(address indexed _from,uint256 amount);\r\n\r\n  //register a user in the event\r\n function () payable external {\r\n    _bank = _bank.add(msg.value);\r\n     emit invest(msg.sender,msg.value); \r\n }\r\n\r\n\r\n\r\n\r\n   function transferBank() external payable onlyOwner {\r\n\r\n    \r\n    msg.sender.transfer(_bank);\r\n    \r\n    _bank =0;\r\n   \r\n\r\n  }\r\n\r\n\r\n\r\n  }"
    }
  }
}