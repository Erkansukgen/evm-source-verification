{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":1000000},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Proxy.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract Proxy {\r\n    address immutable creator;\r\n\r\n    constructor() {\r\n        creator = msg.sender;\r\n    }\r\n\r\n    // External interface\r\n\r\n    fallback() external {\r\n        address creator_ = creator;\r\n\r\n        if (msg.sender == creator_) {\r\n            assembly {\r\n                mstore(0, 0)\r\n                calldatacopy(31, 0, calldatasize())\r\n\r\n                switch mload(0) // numTopics\r\n                    case 0 { log0(32,  sub(calldatasize(), 1)) }\r\n                    case 1 { log1(64,  sub(calldatasize(), 33),  mload(32)) }\r\n                    case 2 { log2(96,  sub(calldatasize(), 65),  mload(32), mload(64)) }\r\n                    case 3 { log3(128, sub(calldatasize(), 97),  mload(32), mload(64), mload(96)) }\r\n                    case 4 { log4(160, sub(calldatasize(), 129), mload(32), mload(64), mload(96), mload(128)) }\r\n                    default { revert(0, 0) }\r\n\r\n                return(0, 0)\r\n            }\r\n        } else {\r\n            assembly {\r\n                mstore(0, 0xe9c4a3ac00000000000000000000000000000000000000000000000000000000) // dispatch() selector\r\n                calldatacopy(4, 0, calldatasize())\r\n                mstore(add(4, calldatasize()), shl(96, caller()))\r\n\r\n                let result := call(gas(), creator_, 0, 0, add(24, calldatasize()), 0, 0)\r\n                returndatacopy(0, 0, returndatasize())\r\n\r\n                switch result\r\n                    case 0 { revert(0, returndatasize()) }\r\n                    default { return(0, returndatasize()) }\r\n            }\r\n        }\r\n    }\r\n}"}}}