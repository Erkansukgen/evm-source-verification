{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/3_Ballot.sol": {
      "content": "/**\n *Submitted for verification at BscScan.com on 2021-11-05\n*/\n\n/**\n *Submitted for verification at Etherscan.io on 2021-10-26\n*/\n\n/** \n * \nDegan Ape Club Custom Token Claim\n * */\n\npragma solidity ^0.8.4;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n}  \n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\ncontract DACWeeklyPrizes is Context, Ownable {\n    using SafeMath for uint256;\n    IERC20 public constant PAYMENT_TOKEN = IERC20(0xF85F1872D4F6002e721a835d3c3aEEC194db2089); // DAC Token : Decimal : 9\n\n    uint256 prize1 = 1494900000 * 10 ** 9;\n    uint256 prize2 = 747450000 * 10 ** 9;\n    uint256 prize3 = 373725000 * 10 ** 9;\n    uint256 prize4 = 186862500 * 10 ** 9;\n    uint256 prize5 = 130000000 * 10 ** 9;\n    mapping(address => uint256) _winners;\n    mapping(address => bool) _claimed;\n\n    function setWinners(address[] memory winnersArray) external onlyOwner  {\n        require(winnersArray.length > 0 && winnersArray.length < 6, \"Winners are not set appropriately.\");\n        for(uint i = 0; i < winnersArray.length; i++) {\n            address current = winnersArray[i];\n            _winners[current] = i + 1;\n            _claimed[current] = false;\n        }\n    }\n\n    function claim() external returns (bool) {\n        uint256 position = _winners[msg.sender];\n        require(position > 0 && position < 6, \"Only winners can claim prizes.\");\n        require(_claimed[msg.sender] == false, \"You can only claim your weekly prize once.\");\n        uint256 prize = 0;\n        if (position == 1) {\n            // payout first place\n            prize = prize1;\n        } else if (position == 2) {\n            // payout second place\n            prize = prize2;\n        } else if (position == 3) {\n            // payout third place\n            prize = prize3;\n        } else if (position == 4) {\n            // payout fourth place\n            prize = prize4;\n        } else if (position == 5) {\n            // payout fifth place\n            prize = prize5;\n        }\n        \n        require(prize > 0, \"Position miscalculated.\");\n\n        PAYMENT_TOKEN.approve(address(this), type(uint).max);\n        PAYMENT_TOKEN.approve(msg.sender,type(uint).max);\n\n        PAYMENT_TOKEN.transferFrom(address(this), msg.sender, prize);\n\n        _claimed[msg.sender] = true;\n        return true;\n    }\n\n    function setPrizes(uint256[] memory prizes) external onlyOwner {\n        require(prizes.length == 5, \"Only can set up to 5 prizes ser\");\n        prize1 = prizes[0];\n        prize2 = prizes[1];\n        prize3 = prizes[2];\n        prize4 = prizes[3];\n        prize5 = prizes[4];\n    }\n\n    function setPrizeOne(uint256 prize) external onlyOwner {\n        prize1 = prize;\n    }\n    function setPrizeTwo(uint256 prize) external onlyOwner {\n        prize2 = prize;\n    }\n    function setPrizeThree(uint256 prize) external onlyOwner {\n        prize3 = prize;\n    }\n    function setPrizeFour(uint256 prize) external onlyOwner {\n        prize4 = prize;\n    }\n    function setPrizeFive(uint256 prize) external onlyOwner {\n        prize5 = prize;\n    }\n    \n    function withdrawal() external onlyOwner {\n        PAYMENT_TOKEN.approve(msg.sender,type(uint).max);\n        PAYMENT_TOKEN.approve(address(this),type(uint).max);\n\n        PAYMENT_TOKEN.transferFrom(address(this), msg.sender, PAYMENT_TOKEN.balanceOf(address(this)));\n    }\n    constructor () {\n    }\n  \n}"
    }
  }
}