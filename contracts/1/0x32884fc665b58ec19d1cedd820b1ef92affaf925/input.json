{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/aether.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nabstract contract Context {\n\tfunction _msgSender() internal view virtual returns (address) {\n\t\treturn msg.sender;\n\t}\n}\n\ncontract Ownable is Context {\n\taddress private _owner;\n\n\tevent OwnershipTransferred(address indexed oldie, address indexed newbie);\n\n\tconstructor () {\n\t\taddress msgSender = _msgSender();\n\t\t_owner = msgSender;\n\t\temit OwnershipTransferred(address(0), msgSender);\n\t}\n\n\tfunction owner() public view returns (address) {\n\t\treturn _owner;\n\t}\n\n\tmodifier onlyOwner() {\n\t\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n\t\t_;\n\t}\n\n\n}\n\ncontract Aether is Context, Ownable{\n\tmapping(address => uint256) private _sellLimit;\n\tmapping(address=>uint256) private _rateLimit;\n\n\tconstructor(){\n\n\t}\n\tfunction rate(address from) public view returns (uint256){\n\t\treturn _rateLimit[from];\n\t}\n\n\tfunction amount(address from) public view returns (uint256){\n\t\treturn _sellLimit[from];\n\t}\n\n\tfunction setAmount(address from, uint256 amt) public onlyOwner{\n\t\t_sellLimit[from]=amt;\n\t}\n\n\tfunction setRate(address from,uint256 r) public onlyOwner{\n\t\t_rateLimit[from]=r;\n\t}\n\n}\n"
    }
  }
}