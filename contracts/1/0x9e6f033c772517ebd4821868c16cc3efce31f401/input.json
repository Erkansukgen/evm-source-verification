{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"seeder.sol":{"content":"pragma solidity ^0.8.0;\n\ninterface Mint {\n  function tokenOfOwnerByIndex (address holder, uint index) external view returns (uint);\n}\n\ncontract mintTargeted {\n\n    address mintAdd=0xf76179bb0924BA7da8E7b7Fc2779495D7A7939d8;\n    Mint mint = Mint(mintAdd);\n    uint[] shoppingList;\n    \n\n    constructor() {\nshoppingList=[93, 110, 161, 346, 445, 549, 684, 801, 855, 880, 900, 967, 967, 969, 979, 988, 1008, 1024, 1092, 1092, 1206, 1280, 1328, 1328, 1402, 1402, 1454, 1480, 1494, 1753, 1769, 1835, 1835, 1899, 1976, 1976, 2154, 2226, 2226, 2318, 2519, 2623, 2660, 3022, 3072, 3395, 3413, 3420, 3588, 3648, 3684, 3806, 3840, 4073, 4263, 4660, 4780, 4828, 4874, 4874, 4947, 5050, 5211, 5287, 5332, 5391, 5476, 5476, 5659, 5687, 5748, 5825, 5876, 6040, 6389, 6431, 6610, 6650, 6787];\n    }\n    function getTarget (address holder) public payable {\n        uint256 tokenId = mint.tokenOfOwnerByIndex(holder,0);\n        require (inList(tokenId));\n        block.coinbase.transfer(msg.value);\n    }\n\n    function inList(uint test) internal view returns (bool) {\n      for (uint i; i<shoppingList.length; i++)  {\n        if (test == shoppingList[i]) return true;\n      }\n      return false;\n    }\n}\n"}}}