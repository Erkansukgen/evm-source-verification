{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "idavoll.sol": {
      "content": "pragma solidity ^0.5.17;\r\n// SPDX-License-Identifier: MIT\r\n  library SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n  }\r\n  contract idavoll {\r\n    using SafeMath for uint256;\r\n    \r\n    string public constant name = \"Idavoll Network\";\r\n    string public constant symbol = \"IDV\";\r\n    uint256 public constant decimals = 18;\r\n    uint256 public constant totalSupply = 2000000000*10**decimals;\r\n    \r\n    mapping (address => uint256) private balances;\r\n    mapping (address => mapping (address => uint256)) private allowed;\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    constructor(address _moveAddr) public {\r\n      require(_moveAddr != address(0), \"_moveAddress is a zero address\");\r\n      balances[_moveAddr] = totalSupply;\r\n      transfer(_moveAddr, totalSupply);\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n      return balances[_owner];\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n      //require (_to != address(0), \"not enough balance !\");\r\n      require((balances[msg.sender] >= _value), \"not enough balance !\");\r\n      balances[msg.sender] = balances[msg.sender].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      emit Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n      //require (_to != address(0), \"not enough balance !\");\r\n      require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value, \"not enough allowed balance\");\r\n      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n      balances[_from] = balances[_from].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      emit Transfer(_from, _to, _value);\r\n      return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n      allowed[msg.sender][_spender] = _value;\r\n      emit Approval(msg.sender, _spender, _value);\r\n      return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function batchTransfer(\r\n        address payable[] memory _users, \r\n        uint256[] memory _amounts\r\n    ) \r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_users.length == _amounts.length,\"not same length\");\r\n        \r\n        for(uint8 i = 0; i < _users.length; i++){\r\n            transfer(_users[i], _amounts[i]);\r\n        }\r\n        return true;\r\n    }\r\n  }"
    }
  }
}