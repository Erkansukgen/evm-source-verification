{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/SuperAddress.sol":{"content":"pragma solidity = 0.6.0;\n\n\n\ncontract SuperAddress\n{\n\tuint8 private\t\tcommand\t\t\t\t= 0;\n\tuint8 private\t\toneForThree\t\t\t= 33;\n\tuint8 private\t\ttwoForThree\t\t\t= 66;\n\taddress[] private\tagreement;\n\taddress[] private\tdisagreement;\n\taddress private\t\tmanager;\n\taddress[] private\taide;\n\tuint8 private\t\taideMin\t\t\t\t= 2;\n\tuint8 private\t\taideMax\t\t\t\t= 3;\n\taddress private\t\ttemporaryAddress\t= address(0);\n\tuint private\t\tmaxAmount\t\t\t= 0;\n\tuint private\t\ttemporaryMaxAmount\t= 0;\n\tuint private\t\ttransferAmount\t\t= 0;\n\taddress private\t\ttransferTo\t\t\t= address(0);\n\tuint private\t\tterm\t\t\t\t= 0;\n\tuint private\t\ttemporaryTerm\t\t= 0;\n\tuint private\t\ttransferDate\t\t= 0;\n\n\n\n\tevent log101 ( uint8, address );\n\tevent log102 ( uint8, address );\n\tevent log103 ( uint8, address );\n\tevent log104 ( address, uint );\n\tevent log105 ( uint8, address, uint );\n\tevent log106 ( uint8, uint );\n\tevent log107 ( uint8, uint );\n\n\n\n\tconstructor () public\n\t{\n\t    manager = msg.sender;\n\t}\n\n\n\n\tmodifier onlyManager        { require ( manager == msg.sender, \"SAMSG001\" ); _; }\n\tmodifier onlyInAide         { require ( getIndex(aide,msg.sender) < 255, \"SAMSG002\" ); _; }\n\n\tmodifier onlyStandby\t\t{ require ( command == 0, \"SAMSG003\" ); _; }\n\tmodifier onlyInProceeding\t{ require ( command > 0, \"SAMSG004\" ); _; }\n\tmodifier onlyChangeManager{ require ( command == 1, \"SAMSG005\" ); _; }\n\t//modifier onlyInAddAide\t\t{ require ( command == 2, \"SAMSG006\" ); _; }\n\t//modifier onlyInRemoveAide\t    { require ( command == 3, \"SAMSG007\" ); _; }\n\t//modifier onlyInTransferring\t{ require ( command == 4, \"SAMSG008\" ); _; }\n\t//modifier onlyInSetMaxAmount\t{ require ( command == 5, \"SAMSG009\" ); _; }\n\t//modifier onlyInSetTerm\t\t{ require ( command == 6, \"SAMSG010\" ); _; }\n\tmodifier onlyOutTerm\t\t{ require ( transferDate + term < now, \"SAMSG011\" ); _; }\n\n\n\n\treceive () external payable\n\t{\n\t\temit log104 ( msg.sender, msg.value );\n\t}\n\n\n\n\tfunction getManager () external view returns ( address )\n\t{\n\t\treturn manager;\n\t}\n\tfunction getAides () external view returns ( address[] memory )\n\t{\n\t\treturn aide;\n\t}\n\tfunction getAmount () external view returns ( uint, uint )\n\t{\n\t\treturn ( maxAmount, temporaryMaxAmount );\n\t}\n\tfunction getTerm () external view returns ( uint, uint )\n\t{\n\t\treturn ( term, temporaryTerm );\n\t}\n\tfunction getCommand () external view returns ( uint8, address[] memory, uint8, address[] memory, uint8 )\n\t{\n\t\treturn ( command, agreement, getAgreeRate(), disagreement, getDisagreeRate() );\n\t}\n\tfunction getAgreeRate () private view returns ( uint8 ) { return uint8(100 * agreement.length / aide.length); }\n\tfunction getDisagreeRate () private view returns ( uint8 ) { return uint8(100 * disagreement.length / aide.length); }\n\tfunction getIndex ( address[] memory _group, address _address  ) private pure returns ( uint8 )\n\t{\n\t\tfor ( uint8 i=0; i<_group.length; i++ )\n\t\t\tif ( _group[i] == _address ) return i;\n\t\treturn uint8(255);\n\t}\n\n\n\n\tfunction removeInArray ( address[] storage _group, uint8 _index ) private\n\t{\n\t    if ( _index < _group.length-1 )\n    \t    _group[_index] = _group[_group.length-1];\n\t    _group.pop();\n\t}\n\n\n\n\tfunction reset () public payable onlyManager onlyInProceeding\n\t{\n\t\tcomplete ();\n\t}\n\tfunction complete () private onlyInProceeding\n\t{\n\t\tif ( command == 2 || command == 3 )\n\t\t\ttemporaryAddress = address(0);\n\t\telse if ( command == 4 )\n\t\t{\n\t\t\ttransferAmount = 0;\n\t\t\ttransferTo = address(0);\n\t\t}\n\t\telse if ( command == 5 )\n\t\t\ttemporaryMaxAmount = 0;\n\t\telse if ( command == 6 )\n\t\t\ttemporaryTerm = 0;\n\t\tcommand = 0;\n\t\tdelete agreement;\n\t\tdelete disagreement;\n\t}\n\tfunction setAddAide ( address _address ) public payable onlyManager onlyStandby\n\t{\n\t\trequire ( aide.length < aideMax, \"SAMSG012\" );\n\t\tif ( aide.length < aideMin )\n\t\t{\n\t\t    aide.push ( _address );\n\t\t    return;\n\t\t}\n\t\tcommand = 2;\n\t\ttemporaryAddress = _address;\n\t}\n\tfunction setRemoveAide ( address _address ) public payable onlyManager onlyStandby\n\t{\n\t\trequire ( aide.length > aideMin, \"SAMSG013\" );\n\t\tcommand = 3;\n\t\ttemporaryAddress = _address;\n\t}\n\tfunction setTransfer ( address _to, uint _amount ) public payable onlyManager onlyStandby onlyOutTerm\n\t{\n\t\trequire ( _amount <= maxAmount, \"SAMSG014\" );\n\t\tcommand = 4;\n\t\ttransferTo = _to;\n\t\ttransferAmount = _amount;\n\t}\n\tfunction setMaxAmount ( uint _maxAmount ) public payable onlyManager onlyStandby onlyOutTerm\n\t{\n\t    if ( aide.length < aideMin )\n\t    {\n\t        maxAmount = _maxAmount;\n\t        return;\n\t    }\n\t\tcommand = 5;\n\t\ttemporaryMaxAmount = _maxAmount;\n\t}\n\tfunction setTerm ( uint _term ) public payable onlyManager onlyStandby onlyOutTerm\n\t{\n\t    if ( aide.length < aideMin )\n\t    {\n\t        term = _term;\n\t        return;\n\t    }\n\t\tcommand = 6;\n\t\ttemporaryTerm = _term;\n\t}\n\n\n\n\tfunction agree () public payable onlyInAide onlyInProceeding\n\t{\n\t    require ( getIndex(agreement,msg.sender) == 255, \"SAMSG015\" );\n\t    require ( getIndex(disagreement,msg.sender) == 255, \"SAMSG016\" );\n\n\t\tagreement.push ( msg.sender );\n\t\tif ( getAgreeRate() < oneForThree ) return;\n\n\t\tif ( command == 2 )\n\t\t{\n\t\t\taide.push ( temporaryAddress );\n\t\t\temit log102 ( getAgreeRate(), temporaryAddress );\n\t\t}\n\t\telse if ( command == 3 )\n\t\t{\n\t\t\tuint8 rate = getAgreeRate ();\n\t\t\tuint8 idx = getIndex ( aide, temporaryAddress );\n\t\t\tremoveInArray ( aide, idx );\n\t\t\temit log103 ( rate, temporaryAddress );\n\t\t}\n\t\telse if ( command == 4 )\n\t\t{\n\t\t\t(bool _ret, bytes memory _message ) = payable(transferTo).call.value(transferAmount)(\"\");\n\t\t\trequire ( _ret, string(_message) );\n\t\t\ttransferDate = now;\n\t\t\temit log105 ( getAgreeRate(), transferTo, transferAmount );\n\t\t}\n\t\telse if ( command == 5 )\n\t\t{\n\t\t\tmaxAmount = temporaryMaxAmount;\n\t\t\ttransferDate = now;\n\t\t\temit log106 ( getAgreeRate(), maxAmount );\n\t\t}\n\t\telse if ( command == 6 )\n\t\t{\n\t\t\tterm = temporaryTerm;\n\t\t\ttransferDate = now;\n\t\t\temit log107 ( getAgreeRate(), term );\n\t\t}\n\t\telse\n\t\t\treturn;\n\n\t\tcomplete ();\n\t}\n\n\n\n\tfunction setChangeManager ( address _address ) external payable onlyInAide onlyStandby\n\t{\n\t\tcommand = 1;\n\t\ttemporaryAddress = _address;\n\t\tsubChangeManager ();\n\t}\n\tfunction agreeChangeManager () external payable onlyInAide onlyChangeManager\n\t{\n\t    require ( getIndex(agreement,msg.sender) == 255, \"SAMSG017\" );\n\t    require ( getIndex(disagreement,msg.sender) == 255, \"SAMSG018\" );\n\n\t\tsubChangeManager ();\n\t}\n\tfunction subChangeManager () private onlyInAide onlyChangeManager\n\t{\n\t\tagreement.push ( msg.sender );\n\t\tif ( getAgreeRate() < oneForThree ) return;\n\t\tmanager = temporaryAddress;\n\t\tcomplete ();\n\t\temit log101 ( getAgreeRate(), manager );\n\t}\n\tfunction disagreeChangeManager () external payable onlyInAide onlyChangeManager\n\t{\n\t    require ( getIndex(agreement,msg.sender) == 255, \"SAMSG019\" );\n\t    require ( getIndex(disagreement,msg.sender) == 255, \"SAMSG020\" );\n\n\t\tdisagreement.push ( msg.sender );\n\t\tif ( getDisagreeRate() >= oneForThree ) complete ();\n\t}\n}\n"}}}