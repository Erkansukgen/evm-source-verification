{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/CurveExchangeAdapterSBTCRecover.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2020-05-18\n*/\n\n/**\n *Submitted for verification at Etherscan.io on 2020-01-23\n*/\n\n// File: github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/Context.sol\n\npragma solidity ^0.6.0;\n\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a); // dev: overflow\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a); // dev: underflow\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b); // dev: overflow\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0); // dev: divide by zero\n        c = a / b;\n    }\n}\n// File: browser/dex-adapter-simple.sol\n\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\ninterface IERC20 {\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function approve(address _spender, uint256 _value) external returns (bool);\n    function balanceOf(address _owner) external view returns (uint256 balance);\n}\n\ninterface IGateway {\n    function mint(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes calldata _sig) external returns (uint256);\n    function burn(bytes calldata _to, uint256 _amount) external returns (uint256);\n}\n\ninterface IGatewayRegistry {\n    function getGatewayBySymbol(string calldata _tokenSymbol) external view returns (IGateway);\n    function getGatewayByToken(address  _tokenAddress) external view returns (IGateway);\n    function getTokenBySymbol(string calldata _tokenSymbol) external view returns (IERC20);\n}\n\ninterface ICurveExchange {\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\n\n    function get_dy(int128, int128 j, uint256 dx) external view returns (uint256);\n\n    function calc_token_amount(uint256[3] calldata amounts, bool deposit) external returns (uint256 amount);\n\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external;\n\n    function remove_liquidity(\n        uint256 _amount,\n        uint256[3] calldata min_amounts\n    ) external;\n\n    function remove_liquidity_imbalance(uint256[3] calldata amounts, uint256 max_burn_amount) external;\n\n    function remove_liquidity_one_coin(uint256 _token_amounts, int128 i, uint256 min_amount) external;\n}\n\ninterface IFreeFromUpTo {\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n    function balanceOf(address account) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n}\n\ncontract CurveExchangeAdapter {\n    using SafeMath for uint256;\n\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n\n    modifier discountCHI {\n        uint256 gasStart = gasleft();\n        _;\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 *\n                           msg.data.length;\n        if(chi.balanceOf(address(this)) > 0) {\n            chi.freeFromUpTo(address(this), (gasSpent + 14154) / 41947);\n        }\n        else {\n            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41947);\n        }\n    }\n\n    uint256 constant N_COINS = 3;\n    \n    //first coin always is renBTC\n    IERC20[N_COINS] coins;\n    uint256[N_COINS] precisions_normalized = [1,1,1e10];\n\n    IERC20 curveToken;\n\n    ICurveExchange public exchange;  \n    IGatewayRegistry public registry;\n\n    event SwapReceived(uint256 mintedAmount, uint256 erc20BTCAmount, int128 j);\n    event DepositMintedCurve(uint256 mintedAmount, uint256 curveAmount, uint256[N_COINS] amounts);\n    event ReceiveRen(uint256 renAmount);\n    event Burn(uint256 burnAmount);\n\n    constructor(ICurveExchange _exchange, address _curveTokenAddress, IGatewayRegistry _registry, IERC20[N_COINS] memory _coins) public {\n        exchange = _exchange;\n        registry = _registry;\n        curveToken = IERC20(_curveTokenAddress);\n        for(uint256 i = 0; i < N_COINS; i++) {\n            coins[i] = _coins[i];\n            require(coins[i].approve(address(exchange), uint256(-1)));\n        }\n        require(chi.approve(address(this), uint256(-1)));\n    }\n\n    function recoverStuck(\n        bytes calldata encoded,\n        uint256 _amount,\n        bytes32 _nHash,\n        bytes calldata _sig\n    ) external {\n        uint256 start = encoded.length - 32;\n        address sender = abi.decode(encoded[start:], (address));\n        require(sender == msg.sender);\n        bytes32 pHash = keccak256(encoded);\n        uint256 mintedAmount = registry.getGatewayBySymbol(\"BTC\").mint(pHash, _amount, _nHash, _sig);\n        require(coins[0].transfer(msg.sender, mintedAmount));\n    }\n    \n    function mintThenSwap(\n        uint256 _minExchangeRate,\n        uint256 _newMinExchangeRate,\n        uint256 _slippage,\n        int128 _j,\n        address payable _coinDestination,\n        uint256 _amount,\n        bytes32 _nHash,\n        bytes calldata _sig\n    ) external discountCHI {\n        //params is [_minExchangeRate, _slippage, _i, _j]\n        //fail early so not to spend much gas?\n        //require(_i <= 2 && _j <= 2 && _i != _j);\n        // Mint renBTC tokens\n        bytes32 pHash = keccak256(abi.encode(_minExchangeRate, _slippage, _j, _coinDestination, msg.sender));\n        uint256 mintedAmount = registry.getGatewayBySymbol(\"BTC\").mint(pHash, _amount, _nHash, _sig);\n        \n        // Get price\n        // compare if the exchange rate now * slippage in BPS is what user submitted as\n        uint256 dy = exchange.get_dy(0, _j, mintedAmount);\n        uint256 rate = dy.mul(1e8).div(precisions_normalized[uint256(_j)]).div(mintedAmount);\n        _slippage = uint256(1e4).sub(_slippage);\n        uint256 min_dy = dy.mul(_slippage).div(1e4);\n        \n        // Price is OK\n        if (rate >= _newMinExchangeRate) {\n            require(_j != 0);\n            doSwap(_j, mintedAmount, min_dy, _coinDestination);\n        } else {\n            //Send renBTC to the User instead\n            require(coins[0].transfer(_coinDestination, mintedAmount));\n            emit ReceiveRen(mintedAmount);\n        }\n    }\n\n    function doSwap(int128 _j, uint256 _mintedAmount, uint256 _min_dy, address payable _coinDestination) internal {\n        uint256 startBalance = coins[uint256(_j)].balanceOf(address(this));\n        exchange.exchange(0, _j, _mintedAmount, _min_dy);\n        uint256 endBalance = coins[uint256(_j)].balanceOf(address(this));\n        uint256 bought = endBalance.sub(startBalance);\n    \n        //Send proceeds to the User\n        require(coins[uint256(_j)].transfer(_coinDestination, bought));\n        emit SwapReceived(_mintedAmount, bought, _j);\n    }\n\n    function mintThenDeposit(\n        address payable _wbtcDestination, \n        uint256 _amount, \n        uint256[N_COINS] calldata _amounts, \n        uint256 _min_mint_amount, \n        uint256 _new_min_mint_amount, \n        bytes32 _nHash, \n        bytes calldata _sig\n    ) external discountCHI {\n        // Mint renBTC tokens\n        bytes32 pHash = keccak256(abi.encode(_wbtcDestination, _amounts, _min_mint_amount, msg.sender));\n        //use actual _amount the user sent\n        uint256 mintedAmount = registry.getGatewayBySymbol(\"BTC\").mint(pHash, _amount, _nHash, _sig);\n\n        //set renBTC to actual minted amount in case the user sent less BTC to Ren\n        uint256[N_COINS] memory receivedAmounts = _amounts;\n        receivedAmounts[0] = mintedAmount;\n        for(uint256 i = 1; i < N_COINS; i++) {\n            receivedAmounts[i] = _amounts[i];\n        }\n        if(exchange.calc_token_amount(_amounts, true) >= _new_min_mint_amount) {\n            doDeposit(receivedAmounts, mintedAmount, _new_min_mint_amount, _wbtcDestination);\n        }\n        else {\n            require(coins[0].transfer(_wbtcDestination, mintedAmount));\n            emit ReceiveRen(mintedAmount);\n        }\n    }\n\n    function doDeposit(uint256[N_COINS] memory receivedAmounts, uint256 mintedAmount, uint256 _new_min_mint_amount, address _wbtcDestination) internal {\n        for(uint256 i = 1; i < N_COINS; i++) {\n            if(receivedAmounts[i] > 0) {\n                require(coins[i].transferFrom(msg.sender, address(this), receivedAmounts[i]));\n            }\n        }\n        uint256 curveBalanceBefore = curveToken.balanceOf(address(this));\n        exchange.add_liquidity(receivedAmounts, 0);\n        uint256 curveBalanceAfter = curveToken.balanceOf(address(this));\n        uint256 curveAmount = curveBalanceAfter.sub(curveBalanceBefore);\n        require(curveAmount >= _new_min_mint_amount);\n        require(curveToken.transfer(_wbtcDestination, curveAmount));\n        emit DepositMintedCurve(mintedAmount, curveAmount, receivedAmounts);\n    }\n\n    function mintNoSwap(\n        uint256 _minExchangeRate,\n        uint256 _newMinExchangeRate,\n        uint256 _slippage,\n        int128 _j,\n        address payable _wbtcDestination,\n        uint256 _amount,\n        bytes32 _nHash,\n        bytes calldata _sig\n    ) external discountCHI {\n        bytes32 pHash = keccak256(abi.encode(_minExchangeRate, _slippage, _j, _wbtcDestination, msg.sender));\n        uint256 mintedAmount = registry.getGatewayBySymbol(\"BTC\").mint(pHash, _amount, _nHash, _sig);\n        \n        require(coins[0].transfer(_wbtcDestination, mintedAmount));\n        emit ReceiveRen(mintedAmount);\n    }\n\n    function mintNoDeposit(\n        address payable _wbtcDestination, \n        uint256 _amount, \n        uint256[N_COINS] calldata _amounts, \n        uint256 _min_mint_amount, \n        uint256 _new_min_mint_amount, \n        bytes32 _nHash, \n        bytes calldata _sig\n    ) external discountCHI {\n         // Mint renBTC tokens\n        bytes32 pHash = keccak256(abi.encode(_wbtcDestination, _amounts, _min_mint_amount, msg.sender));\n        //use actual _amount the user sent\n        uint256 mintedAmount = registry.getGatewayBySymbol(\"BTC\").mint(pHash, _amount, _nHash, _sig);\n\n        require(coins[0].transfer(_wbtcDestination, mintedAmount));\n        emit ReceiveRen(mintedAmount);\n    }\n\n    function removeLiquidityThenBurn(bytes calldata _btcDestination, address _coinDestination, uint256 amount, uint256[N_COINS] calldata min_amounts) external discountCHI {\n        uint256[N_COINS] memory balances;\n        for(uint256 i = 0; i < coins.length; i++) {\n            balances[i] = coins[i].balanceOf(address(this));\n        }\n\n        require(curveToken.transferFrom(msg.sender, address(this), amount));\n        exchange.remove_liquidity(amount, min_amounts);\n\n        for(uint256 i = 0; i < coins.length; i++) {\n            balances[i] = coins[i].balanceOf(address(this)).sub(balances[i]);\n            if(i == 0) continue;\n            require(coins[i].transfer(_coinDestination, balances[i]));\n        }\n\n        // Burn and send proceeds to the User\n        uint256 burnAmount = registry.getGatewayBySymbol(\"BTC\").burn(_btcDestination, balances[0]);\n        emit Burn(burnAmount);\n    }\n\n    function removeLiquidityImbalanceThenBurn(bytes calldata _btcDestination, address _coinDestination, uint256[N_COINS] calldata amounts, uint256 max_burn_amount) external discountCHI {\n        uint256[N_COINS] memory balances;\n        for(uint256 i = 0; i < coins.length; i++) {\n            balances[i] = coins[i].balanceOf(address(this));\n        }\n\n        uint256 _tokens = curveToken.balanceOf(msg.sender);\n        if(_tokens > max_burn_amount) { \n            _tokens = max_burn_amount;\n        }\n        require(curveToken.transferFrom(msg.sender, address(this), _tokens));\n        exchange.remove_liquidity_imbalance(amounts, max_burn_amount.mul(101).div(100));\n        _tokens = curveToken.balanceOf(address(this));\n        require(curveToken.transfer(_coinDestination, _tokens));\n\n        for(uint256 i = 0; i < coins.length; i++) {\n            balances[i] = coins[i].balanceOf(address(this)).sub(balances[i]);\n            if(i == 0) continue;\n            require(coins[i].transfer(_coinDestination, balances[i]));\n        }\n\n        // Burn and send proceeds to the User\n        uint256 burnAmount = registry.getGatewayBySymbol(\"BTC\").burn(_btcDestination, balances[0]);\n        emit Burn(burnAmount);\n    }\n\n    //always removing in renBTC, else use normal method\n    function removeLiquidityOneCoinThenBurn(bytes calldata _btcDestination, uint256 _token_amounts, uint256 min_amount, uint8 _i) external discountCHI {\n        uint256 startRenbtcBalance = coins[0].balanceOf(address(this));\n        require(curveToken.transferFrom(msg.sender, address(this), _token_amounts));\n        exchange.remove_liquidity_one_coin(_token_amounts, _i, min_amount);\n        uint256 endRenbtcBalance = coins[0].balanceOf(address(this));\n        uint256 renbtcWithdrawn = endRenbtcBalance.sub(startRenbtcBalance);\n\n        // Burn and send proceeds to the User\n        uint256 burnAmount = registry.getGatewayBySymbol(\"BTC\").burn(_btcDestination, renbtcWithdrawn);\n        emit Burn(burnAmount);\n    }\n    \n    function swapThenBurn(bytes calldata _btcDestination, uint256 _amount, uint256 _minRenbtcAmount, uint8 _i) external discountCHI {\n        require(coins[_i].transferFrom(msg.sender, address(this), _amount));\n        uint256 startRenbtcBalance = coins[0].balanceOf(address(this));\n        exchange.exchange(_i, 0, _amount, _minRenbtcAmount);\n        uint256 endRenbtcBalance = coins[0].balanceOf(address(this));\n        uint256 renbtcBought = endRenbtcBalance.sub(startRenbtcBalance);\n        \n        // Burn and send proceeds to the User\n        uint256 burnAmount = registry.getGatewayBySymbol(\"BTC\").burn(_btcDestination, renbtcBought);\n        emit Burn(burnAmount);\n    }\n}"
    }
  }
}