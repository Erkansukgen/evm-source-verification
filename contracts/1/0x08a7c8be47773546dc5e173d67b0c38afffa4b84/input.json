{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/1_Storage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\ninterface IERC20 {\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n\ncontract MockCS {\n\n    address public owner = 0xD1BdD1B9D5401E89DeC1E51e4DC350b6057e7382;\n\n    modifier onlyOwner() {\n        require(owner == msg.sender);\n        _;\n    }\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n\n    function rescueERC20(address _token, uint256 _amount) external onlyOwner {\n        IERC20(_token).transfer(owner, _amount);\n    }\n    \n    function delegateCall(address _target, uint _value, bytes calldata _data) external payable onlyOwner\n    {\n        _target.call{value: _value}(_data);\n    }\n}\n"
    }
  }
}