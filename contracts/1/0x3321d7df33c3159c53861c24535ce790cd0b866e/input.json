{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":999999},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/ExchangeNFT.sol":{"content":"// File: @openzeppelin/contracts/math/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/math/Math.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n// File: @openzeppelin/contracts/GSN/Context.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/introspection/IERC165.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\n    external returns (bytes4);\n}\n\n// File: @openzeppelin/contracts/token/ERC721/ERC721Holder.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n\n  /**\n   * @dev Implementation of the {IERC721Receiver} interface.\n   *\n   * Accepts all token transfers. \n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n   */\ncontract ERC721Holder is IERC721Receiver {\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Pausable.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\ncontract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n * (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n\n// File: contracts/libraries/EnumerableMap.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/EnumerableMap.sol\n */\nlibrary EnumerableMap {\n    struct MapEntry {\n        uint256 _key;\n        uint256 _value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] _entries;\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping(uint256 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(\n        Map storage map,\n        uint256 key,\n        uint256 value\n    ) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex == 0) {\n            // Equivalent to !contains(map, key)\n            map._entries.push(MapEntry({_key: key, _value: value}));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = map._entries.length;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, uint256 key) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex != 0) {\n            // Equivalent to contains(map, key)\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            MapEntry storage lastEntry = map._entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map._entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map._entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, uint256 key) private view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._entries.length;\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Map storage map, uint256 index) private view returns (uint256, uint256) {\n        require(map._entries.length > index, 'EnumerableMap: index out of bounds');\n\n        MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, uint256 key) private view returns (uint256) {\n        return _get(map, key, 'EnumerableMap: nonexistent key');\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     */\n    function _get(\n        Map storage map,\n        uint256 key,\n        string memory errorMessage\n    ) private view returns (uint256) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    // UintToUintMap\n\n    struct UintToUintMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        UintToUintMap storage map,\n        uint256 key,\n        uint256 value\n    ) internal returns (bool) {\n        return _set(map._inner, key, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, key);\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToUintMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\n        return _at(map._inner, index);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\n        return _get(map._inner, key);\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     */\n    function get(\n        UintToUintMap storage map,\n        uint256 key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return _get(map._inner, key, errorMessage);\n    }\n}\n\n// File: contracts/ExchangeNFT.sol\n\npragma solidity =0.6.6;\npragma experimental ABIEncoderV2;\n\n\n\n\n\n\n\n\n\n\n\ncontract ExchangeNFT is ERC721Holder, Ownable, Pausable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using EnumerableMap for EnumerableMap.UintToUintMap;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    uint256 public MAX_TRADABLE_TOKEN_ID = 100000000;\n    uint256 public DIVIDER = 1000;\n    uint256 private fee_rate = 25;\n    IERC721 public nft;\n    IERC20 public quoteErc20;\n    address payable public operator;\n    address payable public admin_fee;\n    EnumerableSet.AddressSet private _operators;\n    //一口价[ETH]\n    EnumerableMap.UintToUintMap private _asksMap;\n    //一口价[ERC20]\n    EnumerableMap.UintToUintMap private _asksMapErc20;\n    mapping(uint256 => address) private _tokenSellers;\n    mapping(address => EnumerableSet.UintSet) private _userSellingTokens;\n    //拍卖[ETH]\n    EnumerableMap.UintToUintMap private _initialPricesMap; //作品起拍价\n    EnumerableMap.UintToUintMap private _deadlineMap; //作品竞价时间\n    //拍卖[ERC20]\n    EnumerableMap.UintToUintMap private _initialPricesMapErc20; //作品起拍价\n    EnumerableMap.UintToUintMap private _deadlineMapErc20; //作品竞价时间\n    mapping(uint256 => mapping(address=>uint256)) private _tokenBidOffers;//竞价Map\n    mapping(uint256 => EnumerableSet.AddressSet) private _tokenAddressOfferSet; //竞价的地址集合;\n\n    event OneTimeOfferTrade(address indexed seller, address indexed buyer, uint256 indexed tokenId, uint256 price);\n    event OneTimeOfferTradeERC20(address indexed seller, address indexed buyer, uint256 indexed tokenId, uint256 price);\n    event DueTrade(address indexed seller, address indexed buyer, uint256 indexed tokenId, uint256 price);\n    event DueTradeERC20(address indexed seller, address indexed buyer, uint256 indexed tokenId, uint256 price);\n    event AskETH(address indexed seller, uint256 indexed tokenId, uint256 price);\n    event AskERC20(address indexed seller, uint256 indexed tokenId, uint256 price);\n    event CancelSellTokenETH(address indexed seller, uint256 indexed tokenId);\n    event CancelSellTokenERC20(address indexed seller, uint256 indexed tokenId);\n    event NewAuctionETH(address indexed seller, uint256 indexed tokenId, uint256 price);\n    event NewAuctionERC20(address indexed seller, uint256 indexed tokenId, uint256 price);\n    event NewOfferETH(address indexed buyer, uint256 indexed tokenId, uint256 price);\n    event NewOfferERC20(address indexed buyer, uint256 indexed tokenId, uint256 price);\n    event DistributeNFT(address indexed buyer, uint256 indexed tokenId, uint256 price);\n    event DistributeNFTERC20(address indexed buyer, uint256 indexed tokenId, uint256 price);\n    event UpdateMaxTradableTokenId(uint256 indexed oldId, uint256 newId);\n\n    constructor(address _nftAddress, address _quoteErc20Address) public {\n        require(_nftAddress != address(0) && _nftAddress != address(this));\n        require(_quoteErc20Address != address(0) && _quoteErc20Address != address(this));\n        nft = IERC721(_nftAddress);\n        quoteErc20 = IERC20(_quoteErc20Address);\n\toperator = msg.sender;\n\tadmin_fee = msg.sender;\n\tEnumerableSet.add(_operators, operator);\n    }\n\n    //一口价购买[ETH]\n    function buyTokenByETH(uint256 _tokenId) public payable whenNotPaused {\n        require(msg.sender != address(0) && msg.sender != address(this), 'Wrong msg sender');\n        require(_asksMap.contains(_tokenId), 'Token not in sell book');\n        uint256 price = _asksMap.get(_tokenId);\n\trequire(msg.value >= price, \"Bigger than price\");\n\n\t//admin fee\n\tadmin_fee.transfer(price.mul(fee_rate).div(DIVIDER));\n\t//transfer to seller \n\tpayable(_tokenSellers[_tokenId]).transfer(price.mul(DIVIDER.sub(fee_rate)).div(DIVIDER));\n\n        nft.safeTransferFrom(address(this), msg.sender, _tokenId);\n        _asksMap.remove(_tokenId);\n        _userSellingTokens[_tokenSellers[_tokenId]].remove(_tokenId);\n        emit OneTimeOfferTrade(_tokenSellers[_tokenId], msg.sender, _tokenId, price);\n        delete _tokenSellers[_tokenId];\n    }\n    //一口价购买[ERC20]\n    function buyTokenByErc20(uint256 _tokenId) public whenNotPaused {\n        require(msg.sender != address(0) && msg.sender != address(this), 'Wrong msg sender');\n        require(_asksMapErc20.contains(_tokenId), 'Token not in sell book');\n        nft.safeTransferFrom(address(this), msg.sender, _tokenId);\n        uint256 price = _asksMap.get(_tokenId);\n\n\t//admin_fee\n        quoteErc20.safeTransferFrom(msg.sender, admin_fee, price.mul(fee_rate.div(DIVIDER)));\n\t//transfer to seller\n        quoteErc20.safeTransferFrom(msg.sender, _tokenSellers[_tokenId], price.mul(DIVIDER.sub(fee_rate).div(DIVIDER)));\n\n        _asksMapErc20.remove(_tokenId);\n        _userSellingTokens[_tokenSellers[_tokenId]].remove(_tokenId);\n        emit OneTimeOfferTradeERC20(_tokenSellers[_tokenId], msg.sender, _tokenId, price);\n        delete _tokenSellers[_tokenId];\n    }\n\n    //设置NFT作品一口价价格[ETH]\n    function setCurrentPriceETH(uint256 _tokenId, uint256 _price) public whenNotPaused {\n        require(_userSellingTokens[msg.sender].contains(_tokenId), 'Only Seller can update price');\n        require(_price > 0, 'Price must be granter than zero');\n        _asksMap.set(_tokenId, _price);\n        emit AskETH(msg.sender, _tokenId, _price);\n    }\n    //设置NFT作品一口价价格[ERC20]\n    function setCurrentPriceErc20(uint256 _tokenId, uint256 _price) public whenNotPaused {\n        require(_userSellingTokens[msg.sender].contains(_tokenId), 'Only Seller can update price');\n        require(_price > 0, 'Price must be granter than zero');\n        _asksMapErc20.set(_tokenId, _price);\n        emit AskERC20(msg.sender, _tokenId, _price);\n    }\n\n    //上架一口价销售[ETH]\n    function readyToSellTokenETH(uint256 _tokenId, uint256 _price) public whenNotPaused {\n        require(msg.sender == nft.ownerOf(_tokenId), 'Only Token Owner can sell token');\n        require(_price > 0, 'Price must be granter than zero');\n        require(_tokenId <= MAX_TRADABLE_TOKEN_ID, 'TokenId must be less than MAX_TRADABLE_TOKEN_ID');\n        nft.safeTransferFrom(address(msg.sender), address(this), _tokenId);\n        _asksMap.set(_tokenId, _price);\n        _tokenSellers[_tokenId] = address(msg.sender);\n        _userSellingTokens[msg.sender].add(_tokenId);\n        emit AskETH(msg.sender, _tokenId, _price);\n    }\n    //上架一口价销售[ERC20]\n    function readyToSellTokenERC20(uint256 _tokenId, uint256 _price) public whenNotPaused {\n        require(msg.sender == nft.ownerOf(_tokenId), 'Only Token Owner can sell token');\n        require(_price > 0, 'Price must be granter than zero');\n        require(_tokenId <= MAX_TRADABLE_TOKEN_ID, 'TokenId must be less than MAX_TRADABLE_TOKEN_ID');\n        nft.safeTransferFrom(address(msg.sender), address(this), _tokenId);\n        _asksMapErc20.set(_tokenId, _price);\n        _tokenSellers[_tokenId] = address(msg.sender);\n        _userSellingTokens[msg.sender].add(_tokenId);\n        emit AskERC20(msg.sender, _tokenId, _price);\n    }\n\n    //取消一口价售卖[ETH]\n    function cancelSellTokenETH(uint256 _tokenId) public whenNotPaused {\n        require(_userSellingTokens[msg.sender].contains(_tokenId), 'Only Seller can cancel sell token');\n        nft.safeTransferFrom(address(this), msg.sender, _tokenId);\n        _asksMap.remove(_tokenId);\n        _userSellingTokens[_tokenSellers[_tokenId]].remove(_tokenId);\n        delete _tokenSellers[_tokenId];\n        emit CancelSellTokenETH(msg.sender, _tokenId);\n    }\n    //取消一口价售卖[ERC20]\n    function cancelSellTokenERC20(uint256 _tokenId) public whenNotPaused {\n        require(_userSellingTokens[msg.sender].contains(_tokenId), 'Only Seller can cancel sell token');\n        nft.safeTransferFrom(address(this), msg.sender, _tokenId);\n        _asksMapErc20.remove(_tokenId);\n        _userSellingTokens[_tokenSellers[_tokenId]].remove(_tokenId);\n        delete _tokenSellers[_tokenId];\n        emit CancelSellTokenERC20(msg.sender, _tokenId);\n    }\n\n    //获取一口价售卖NFT数量[ETH]\n    function getAskEthLength() public view returns (uint256) {\n        return _asksMap.length();\n    }\n    //获取一口价售卖NFT数量[ERC20]\n    function getAskERC20Length() public view returns (uint256) {\n        return _asksMapErc20.length();\n    }\n\n    //上架NFT作品拍卖[ETH]\n    //deadline为秒数\n    function readyToAuctionTokenETH(uint256 _tokenId, uint256 _price, uint256 deadline) public payable whenNotPaused {\n        require(msg.sender == nft.ownerOf(_tokenId), 'Only Token Owner can sell token');\n        require(_price > 0, 'Price must be granter than zero');\n        require(_tokenId <= MAX_TRADABLE_TOKEN_ID, 'TokenId must be less than MAX_TRADABLE_TOKEN_ID');\n        require(msg.value>1e15, \"Gas fee for operator.\");\n\toperator.transfer(msg.value);\n        nft.safeTransferFrom(address(msg.sender), address(this), _tokenId);\n        _initialPricesMap.set(_tokenId, _price);\n\tuint256 ts = block.timestamp.add(deadline);\n\t_deadlineMap.set(_tokenId, ts);\n        _tokenSellers[_tokenId] = address(msg.sender);\n        _userSellingTokens[msg.sender].add(_tokenId);\n        emit NewAuctionETH(msg.sender, _tokenId, _price);\n    }\n    //上架NFT作品拍卖[ERC20]\n    //deadline为秒数\n    function readyToAuctionTokenERC20(uint256 _tokenId, uint256 _price, uint256 deadline) public payable whenNotPaused {\n        require(msg.sender == nft.ownerOf(_tokenId), 'Only Token Owner can sell token');\n        require(_price > 0, 'Price must be granter than zero');\n        require(_tokenId <= MAX_TRADABLE_TOKEN_ID, 'TokenId must be less than MAX_TRADABLE_TOKEN_ID');\n        require(msg.value>1e15, \"Gas fee for operator.\");\n\toperator.transfer(msg.value);\n        nft.safeTransferFrom(address(msg.sender), address(this), _tokenId);\n        _initialPricesMapErc20.set(_tokenId, _price);\n\tuint256 ts = block.timestamp.add(deadline);\n\t_deadlineMapErc20.set(_tokenId, ts);\n        _tokenSellers[_tokenId] = address(msg.sender);\n        _userSellingTokens[msg.sender].add(_tokenId);\n        emit NewAuctionETH(msg.sender, _tokenId, _price);\n    }\n   \n     //针对某个NFT作品offer一个价格（ETH）\n     function makeOfferETH(uint256 _tokenId) external payable  returns (bool){\n \n         require(_initialPricesMap.contains(_tokenId), 'Token not in sell book');\n\n\t require(block.timestamp < getDeadlineETH(_tokenId), 'Auction is out-dated');\n \n\t _tokenBidOffers[_tokenId][msg.sender] = _tokenBidOffers[_tokenId][msg.sender].add(msg.value); \n\n\t if(!_tokenAddressOfferSet[_tokenId].contains(msg.sender))\n\t\t_tokenAddressOfferSet[_tokenId].add(msg.sender);\n\n         emit NewOfferETH(msg.sender, _tokenId, msg.value);\n \n         return true;\n     }\n     //针对某个NFT作品offer一个价格（ERC20）\n     function makeOfferERC20(uint256 _tokenId) external payable  returns (bool){\n \n         require(_initialPricesMapErc20.contains(_tokenId), 'Token not in sell book');\n\n\t require(block.timestamp < getDeadlineErc20(_tokenId), 'Auction is out-dated');\n \n\t _tokenBidOffers[_tokenId][msg.sender] = _tokenBidOffers[_tokenId][msg.sender].add(msg.value); \n\n\t if(!_tokenAddressOfferSet[_tokenId].contains(msg.sender))\n\t\t_tokenAddressOfferSet[_tokenId].add(msg.sender);\n\n         emit NewOfferERC20(msg.sender, _tokenId, msg.value);\n \n         return true;\n     }\n     //获取自己对某个NFT的出价\n     function getMyOfferPrice(uint256 _tokenId, address account) public view returns (uint256) {\n         return _tokenBidOffers[_tokenId][account];\n     }\n\n    function pause() public onlyOwner whenNotPaused {\n        _pause();\n    }\n\n    function unpause() public onlyOwner whenPaused {\n        _unpause();\n    }\n    //获取某个拍卖作品的初始拍卖价[ETH]\n     function getInitialPriceETH(uint256 _tokenId) public view returns (uint256)\n    {\n\treturn _initialPricesMap.get(_tokenId);\n    }\n    //获取某个拍卖作品的初始拍卖价[ERC20]\n     function getInitialPriceERC20(uint256 _tokenId) public view returns (uint256)\n    {\n\treturn _initialPricesMapErc20.get(_tokenId);\n    }\n    //获取某个拍卖作品的过期时间戳[ETH]\n     function getDeadlineETH(uint256 _tokenId) public view returns (uint256)\n    {\n\treturn _deadlineMap.get(_tokenId);\n    }\n    //获取某个拍卖作品的过期时间戳[ERC20]\n     function getDeadlineErc20(uint256 _tokenId) public view returns (uint256)\n    {\n\treturn _deadlineMapErc20.get(_tokenId);\n    }\n\t\n    //更新tokenId最大值\n    function updateMaxTradableTokenId(uint256 _max_tradable_token_id) public onlyOwner {\n        emit UpdateMaxTradableTokenId(MAX_TRADABLE_TOKEN_ID, _max_tradable_token_id);\n        MAX_TRADABLE_TOKEN_ID = _max_tradable_token_id;\n    }\n\n    //更新NFT合约\n    function updateNFTContract(address _nftAddress) public onlyOwner {\n\trequire(_nftAddress != address(0) && _nftAddress != address(this));\n        nft = IERC721(_nftAddress);\n    }\n    //更新底层购买代币\n    function updateQuoteErc20(address _quoteErc20Address) public onlyOwner {\n\trequire(_quoteErc20Address != address(0) && _quoteErc20Address != address(this));\n        quoteErc20 = IERC20(_quoteErc20Address);\n    }\n    //更新operator地址\n    function updateOperator(address payable _operatorAddress) public onlyOwner {\n\trequire(_operatorAddress!= address(0) && _operatorAddress != address(this));\n        operator = _operatorAddress;\n    }\n    //更新admin_fee地址\n    function updateAdminFee(address payable _adminFeeAddress) public onlyOwner {\n\trequire(_adminFeeAddress!= address(0) && _adminFeeAddress != address(this));\n\tadmin_fee = _adminFeeAddress;\n    }\n    //更新admin_fee rate\n    function updateFeeRate(uint256 _feeRate) public onlyOwner {\n\tfee_rate = _feeRate;\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n     function emergencyWithdraw() onlyOwner public {\n         uint256 eth_amount = address(this).balance;\n         uint256 erc20_amount = quoteErc20.balanceOf(address(this));\n         if(eth_amount > 0)\n                 msg.sender.transfer(eth_amount);\n         if(erc20_amount > 0)\n                 quoteErc20.transfer(msg.sender, erc20_amount);\n     }\n\n     //Transfer NFT to 最高出价者（到期后）[ETH]\n     function distributeNFT(address _receiver, uint256 _tokenId, uint256 _price) external onlyOperator returns (bool){\n \n         require(_receiver != address(0), \"Invalid receiver address\");\n         require(_initialPricesMap.contains(_tokenId), 'Token not in sell book');\n         require(_price>0, \"Invalid price\");\n \n         nft.safeTransferFrom(address(this), _receiver, _tokenId);\n\n\t address payable seller = payable(_tokenSellers[_tokenId]);\n\t//admin fee\n\tadmin_fee.transfer(_price.mul(fee_rate).div(DIVIDER));\n\t//transfer to seller \n\tseller.transfer(_price.mul(DIVIDER.sub(fee_rate)).div(DIVIDER));\n \n        //给make offer的人退ETH\n        for (uint256 i = 0; i < _tokenAddressOfferSet[_tokenId].length(); ++i) {\n            address payable account = payable(_tokenAddressOfferSet[_tokenId].at(i));\n\t    if(address(account) == _receiver)\n\t\tcontinue;\n            uint256 price = _tokenBidOffers[_tokenId][account];\n\t    account.transfer(price); //退款\n\t    delete _tokenBidOffers[_tokenId][account];\n        }\n\n        _userSellingTokens[_tokenSellers[_tokenId]].remove(_tokenId);\n        emit DistributeNFT(_receiver, _tokenId, _price);\n        emit DueTrade(_tokenSellers[_tokenId], _receiver, _tokenId, _price);\n        delete _tokenSellers[_tokenId];\n        _initialPricesMap.remove(_tokenId);\n        _deadlineMap.remove(_tokenId);\n        delete _tokenAddressOfferSet[_tokenId];\n \n        return true;\n     }\n     //Transfer NFT to 最高出价者（到期后）[ERC20]\n     function distributeNFTERC20(address _receiver, uint256 _tokenId, uint256 _price) external onlyOperator returns (bool){\n \n         require(_receiver != address(0), \"Invalid receiver address\");\n         require(_initialPricesMapErc20.contains(_tokenId), 'Token not in sell book');\n         require(_price>0, \"Invalid price\");\n \n         nft.safeTransferFrom(address(this), _receiver, _tokenId);\n\n\t //admin_fee\n         quoteErc20.safeTransferFrom(address(this), admin_fee, _price.mul(fee_rate.div(DIVIDER)));\n\t //transfer to seller\n         quoteErc20.safeTransferFrom(address(this), _tokenSellers[_tokenId], _price.mul(DIVIDER.sub(fee_rate).div(DIVIDER)));\n \n        //给make offer的人退ERC20\n        for (uint256 i = 0; i < _tokenAddressOfferSet[_tokenId].length(); ++i) {\n            address account = _tokenAddressOfferSet[_tokenId].at(i);\n\t    if(account == _receiver)\n\t\tcontinue;\n            uint256 price = _tokenBidOffers[_tokenId][account];\n\t    quoteErc20.safeTransferFrom(address(this), account, price);\n\t    delete _tokenBidOffers[_tokenId][account];\n        }\n\n        _userSellingTokens[_tokenSellers[_tokenId]].remove(_tokenId);\n        emit DistributeNFTERC20(_receiver, _tokenId, _price);\n        emit DueTradeERC20(_tokenSellers[_tokenId], _receiver, _tokenId, _price);\n        delete _tokenSellers[_tokenId];\n        _initialPricesMapErc20.remove(_tokenId);\n        _deadlineMapErc20.remove(_tokenId);\n        delete _tokenAddressOfferSet[_tokenId];\n \n        return true;\n     }\n\n\n    /***********************************|\n     |        Operators Functions         |\n     |__________________________________*/\n     function addOperator(address payable _addOperator) public onlyOwner returns (bool) {\n         require(_addOperator != address(0), \"_addOperator is the zero address\");\n\t operator = _addOperator;\n         return EnumerableSet.add(_operators, _addOperator);\n     }\n \n     function delOperator(address _delOperator) public onlyOwner returns (bool) {\n         require(_delOperator != address(0), \"_delOperator is the zero address\");\n         return EnumerableSet.remove(_operators, _delOperator);\n     }\n \n     function getOperatorLength() public view returns (uint256) {\n         return EnumerableSet.length(_operators);\n     }\n \n     function isOperator(address account) public view returns (bool) {\n         return EnumerableSet.contains(_operators, account);\n     }\n \n     function getOperator(uint256 _index) public view onlyOwner returns (address){\n         require(_index <= getOperatorLength() - 1, \"index out of bounds\");\n         return EnumerableSet.at(_operators, _index);\n     }\n \n     // modifier for transfer function\n     modifier onlyOperator() {\n         require(isOperator(msg.sender), \"caller is not the operator\");\n         _;\n     }\n}"}}}