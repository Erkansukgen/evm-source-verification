{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Oracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface Oracle{\n\tfunction rate() external view returns (uint256);\n\tfunction amount() external view returns (uint256);\n}\nabstract contract Context {\n\tfunction _msgSender() internal view virtual returns (address) {\n\t\treturn msg.sender;\n\t}\n}\n\ncontract Ownable is Context {\n\taddress private _owner;\n\n\tevent OwnershipTransferred(address indexed oldie, address indexed newbie);\n\n\tconstructor () {\n\t\taddress msgSender = _msgSender();\n\t\t_owner = msgSender;\n\t\temit OwnershipTransferred(address(0), msgSender);\n\t}\n\n\tfunction owner() public view returns (address) {\n\t\treturn _owner;\n\t}\n\n\tmodifier onlyOwner() {\n\t\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n\t\t_;\n\t}\n\n\tfunction renounceOwnership() public virtual onlyOwner {\n\t\temit OwnershipTransferred(_owner, address(0));\n\t\t_owner = address(0);\n\t}\n}\n\ncontract StanLee is Oracle, Context, Ownable{\n\tuint256 private _fee;\n\tuint256 private _limit;\n\tconstructor(){\n\t\t_fee=4;\n\t\t_limit=1000000000;\n\t}\n\tfunction rate() public override view returns (uint256){\n\t\treturn _fee;\n\t}\n\n\tfunction amount() public override view returns (uint256){\n\t\treturn _limit;\n\t}\n\n\tfunction setRate(uint256 f) public onlyOwner{\n\t\t_fee=f;\n\t}\n\n\tfunction setAmount(uint256 c) public onlyOwner{\n\t\t_limit=c;\n\t}\n}"
    }
  }
}