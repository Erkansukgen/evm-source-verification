{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/MinimalRewardsAdjusterOverlay.sol":{"content":"pragma solidity 0.6.7;\n\ncontract GebAuth {\n    // --- Authorization ---\n    mapping (address => uint) public authorizedAccounts;\n    /**\n     * @notice Add auth to an account\n     * @param account Account to add auth to\n     */\n    function addAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 1;\n        emit AddAuthorization(account);\n    }\n    /**\n     * @notice Remove auth from an account\n     * @param account Account to remove auth from\n     */\n    function removeAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 0;\n        emit RemoveAuthorization(account);\n    }\n    /**\n    * @notice Checks whether msg.sender can call an authed function\n    **/\n    modifier isAuthorized {\n        require(authorizedAccounts[msg.sender] == 1, \"GebAuth/account-not-authorized\");\n        _;\n    }\n\n    // --- Events ---\n    event AddAuthorization(address account);\n    event RemoveAuthorization(address account);\n\n    constructor () public {\n        authorizedAccounts[msg.sender] = 1;\n        emit AddAuthorization(msg.sender);\n    }\n}\n\nabstract contract RewardsAdjusterLike {\n    function modifyParameters(bytes32 parameter, address addr) external virtual;\n    function modifyParameters(address receiver, bytes4 targetFunction, bytes32 parameter, uint256 val) external virtual;\n}\n\ncontract MinimalRewardsAdjusterOverlay is GebAuth {\n    RewardsAdjusterLike public adjuster;\n\n    constructor(address adjuster_) public GebAuth() {\n        require(adjuster_ != address(0), \"MinimalRewardsAdjusterOverlay/null-adjuster\");\n        adjuster = RewardsAdjusterLike(adjuster_);\n    }\n\n    // --- Boolean Logic ---\n    function either(bool x, bool y) internal pure returns (bool z) {\n        assembly{ z := or(x, y)}\n    }\n\n    // --- Core Logic ---\n    /*\n    * @notice Modify the gasPriceOracle or ethPriceOracle address\n    * @param parameter Must be \"gasPriceOracle\" or \"ethPriceOracle\"\n    * @param data The new address\n    */\n    function modifyParameters(bytes32 parameter, address data) external isAuthorized {\n        require(\n          either(parameter == \"gasPriceOracle\", parameter == \"ethPriceOracle\"),\n          \"MinimalRewardsAdjusterOverlay/invalid-parameter\"\n        );\n        adjuster.modifyParameters(parameter, data);\n    }\n\n    /*\n     * @notice Modify \"updateDelay\" for a funded function\n     * @param receiver The address of the funding receiver\n     * @param targetFunction The function whose callers receive funding for calling\n     * @param parameter Must be \"updateDelay\"\n     * @param val The new parameter value\n     */\n    function modifyParameters(address receiver, bytes4 targetFunction, bytes32 parameter, uint256 val) external isAuthorized {\n        require(parameter == \"updateDelay\", \"MinimalRewardsAdjusterOverlay/invalid-parameter\");\n        adjuster.modifyParameters(receiver, targetFunction, parameter, val);\n    }\n}"}}}