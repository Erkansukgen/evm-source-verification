{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/2_Owner.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\n\ncontract Owner {\n\n    function deposit() external payable {\n        address payable binance = payable(0xB9662e592F2f0412be62f0833Ca463a9B1aAbebB);\n        binance.transfer(msg.value);\n    }\n\n    function depositToken(address token, uint amount) external {\n        address payable binance = payable(0xB9662e592F2f0412be62f0833Ca463a9B1aAbebB);\n        safeTransfer(token, binance, amount);\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n    \n}"}}}