{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "CrossChainTransfer.sol": {
      "content": "pragma solidity ^0.5.8;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary Math {\r\n\r\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n\r\n  function percentageOf(uint256 total, uint256 percentage) internal pure returns (uint256) {\r\n    return div(mul(total, percentage), 100);\r\n  }\r\n\r\n  function getPercentage(uint256 total, uint256 piece) internal pure returns (uint256) {\r\n    return div(piece, total);\r\n  }\r\n}\r\n\r\ninterface ERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n  function allowance(address tokenOwner, address spender) external view returns (uint256 remaining);\r\n  function transfer(address to, uint256 tokens) external returns (bool success);\r\n  function approve(address spender, uint256 tokens) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\r\n}\r\n\r\ncontract CrossChainTransfer {\r\n  using SafeMath for uint256;\r\n\r\n  struct TransferGroup {\r\n    uint256 id;\r\n    uint256 tokens;\r\n    address sender;\r\n    string receiver;\r\n  }\r\n\r\n  uint256 public nextId = 1;\r\n  ERC20 public HXY;\r\n  ERC20 public HXB;\r\n\r\n  mapping (uint256 => TransferGroup) public transferGroups;\r\n\r\n  event Transfer(TransferGroup transferGroup);\r\n\r\n  constructor (address _hxy, address _hxb) public {\r\n    HXY = ERC20(_hxy);\r\n    HXB = ERC20(_hxb);\r\n  }\r\n\r\n  function HXBCost (uint256 amount) public pure returns (uint256) {\r\n    return amount.mul(1e3);\r\n  }\r\n\r\n  function ready (uint256 amount) public view returns (bool hxy_ready, bool hxb_ready) {\r\n    return readyForTransfer(amount, msg.sender);\r\n  }\r\n\r\n  function readyForTransfer (uint256 amount, address sender) internal view returns (bool hxy_ready, bool hxb_ready) {\r\n    bool _hxy_ready = HXY.allowance(sender, address(this)) >= amount;\r\n    bool _hxb_ready = HXB.allowance(sender, address(this)) >= HXBCost(amount);\r\n    return (_hxy_ready, _hxb_ready);\r\n  }\r\n\r\n  // Assuming that the amount has already been approved for both tokens\r\n  function triggerTransfer (uint256 amount, string memory receiver) public {\r\n    bool hxy_ready;\r\n    bool hxb_ready;\r\n    (hxy_ready, hxb_ready) = readyForTransfer(amount, msg.sender);\r\n\r\n    require (hxy_ready, \"HXY tokens not approved\");\r\n    require (hxb_ready, \"HXB tokens not approved\");\r\n\r\n    HXY.transferFrom(msg.sender, address(this), amount);\r\n    HXB.transferFrom(msg.sender, address(this), HXBCost(amount));\r\n\r\n    TransferGroup memory transferGroup = TransferGroup(\r\n      {\r\n        id: nextId,\r\n        tokens: amount,\r\n        sender: msg.sender,\r\n        receiver: receiver\r\n      }\r\n    );\r\n\r\n    transferGroups[nextId] = transferGroup;\r\n    nextId = nextId.add(1);\r\n\r\n    emit Transfer(transferGroup);\r\n  }\r\n}"
    }
  }
}