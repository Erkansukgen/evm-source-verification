{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/advancessd.sol": {
      "content": "pragma solidity 0.7.1;\r\n// SPDX-License-Identifier: MIT\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IESDS {\r\n    function deposit(uint256) external;\r\n    function balanceOfStaged(address) external view returns (uint256);\r\n    function bond(uint256) external;\r\n    function balanceOfBonded(address) external view returns (uint256);\r\n    function unbondUnderlying(uint256) external;\r\n    function withdraw(uint256) external; // \"unstage\"\r\n    function advance() external;\r\n    function epoch() external view returns (uint256);\r\n    function epochTime() external view returns (uint256);\r\n    function totalRedeemable() external view returns (uint256);\r\n}\r\n\r\ninterface ICHI {\r\n    function freeFromUpTo(address _addr, uint256 _amount) external returns (uint256);\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n// @notice Example code for use by bot runners\r\n// @dev The `advanceAndRedeemMany` function allows you to attempt to redeem several sets of coupons\r\n//    in a single tx.\r\n//    It will call \"advance\" first, if needed.\r\n//    It will do partial fills if/when totalRedeemable is less than the number of coupons you're trying to redeem.\r\n//    It will continue execution if one attempt fails (using try/catch).\r\n//    It will free gas tokens (assuming you have some in your account and have approved this contract to spend them).\r\n// @dev You should test this code with low-value transactions first to make sure it behaves the way you think it does.\r\n//    This is unaudited code, so please exercise prudence.\r\ncontract ExampleRedeemer is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    // external contracts and addresses\r\n    address constant private esd = 0x7BF5898A9c24818A90D9763BBF4Cd1432645c17f;\r\n    IESDS constant private esds = IESDS(0x68098cff6338425cd1a253a9a26eF63712646e46);\r\n    ICHI  constant private chi = ICHI(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n\r\n    \r\n    // frees CHI to reduce gas costs\r\n    // requires that msg.sender has approved this contract to spend its CHI\r\n    modifier useCHI {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n        uint256 gasSpent = 21000 + gasStart - gasleft() + (16 * msg.data.length);\r\n        chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41947);\r\n    }\r\n    \r\n    fallback() external payable {}\r\n    receive() external payable {}\r\n    \r\n    constructor() {\r\n        // approve ESDS contract to move ESD (needed to stage and bond)\r\n        // (Not needed to redeem coupons but is nice to have if you want to use this contract as an ESD wallet)\r\n        IERC20(esd).approve(address(esds), uint256(uint128(-1)));\r\n    }\r\n    \r\n    // @notice Call this function with the bot. Use a high gas price.\r\n    // @param _targetEpoch the future epoch we are trying to advance to.\r\n    // @param _users Array of users whose copouns you're trying to redeem\r\n    // @param _epochs Array of epochs at which the users' coupons were purchased\r\n    // @param _couponAmounts The amounts of the users' coupons you're trying to redeem.\r\n    // @dev Consider using a gas limit of `700_000 + (N * 300_000)`  where `N` is the length of the `_users` array.\r\n    //    This may be overkill, but out-of-gas errors can really hurt, so best to avoid them.\r\n    function start(uint16 _targetEpoch) external useCHI onlyOwner {\r\n        \r\n        // Abort if this tx is mined too early (extreamly cheap)\r\n        uint256 epochStartTime = getEpochStartTime(_targetEpoch);\r\n        if (block.timestamp < epochStartTime) {\r\n            // We ended up in the wrong block. The new epoch hasn't started yet.\r\n            return;\r\n        }\r\n        \r\n        // If ESDS.advance() has NOT already been called and advanced to the target epoch then we'll advance\r\n        if (esds.epoch() != _targetEpoch) {\r\n            // Then we can advance the epoch \r\n            // Try to call the ESDS.advance() function, but use try/catch so we can use gas tokens\r\n            // in the case that the call fails (for example, if we passed in an incorrect `_targetEpoch` value\r\n            try esds.advance() {\r\n                // Success! We advanced the epoch.\r\n            } catch {\r\n                // Failure! Someone else advanced the epoch before us.\r\n            }\r\n        }\r\n        \r\n        // Now we know the epoch has been advanced (whether or not we advanced it), so we attempt to redeem coupons\r\n        \r\n        return;\r\n    }\r\n\r\n    // @notice Returns the timestamp at which the _targetEpoch starts\r\n    function getEpochStartTime(uint256 _targetEpoch) public pure returns (uint256) {\r\n        return _targetEpoch.sub(12).mul(7200).add(1610200800);\r\n    }\r\n    \r\n    // BASIC WALLET FUNCTIONS\r\n    \r\n    function withdrawETH() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n    \r\n    function withdrawERC20(address _token) external onlyOwner {\r\n        uint256 balance = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(owner(), balance);\r\n    }\r\n    \r\n    // Used for approving the Uniswap V2 router to move this contract's ESD tokens\r\n    // e.g. _token = ESD, _spender = UniswapV2Router02, _amount = uint128(-1)\r\n    function ERC20Approve(address _token, address _spender, uint256 _amount) external onlyOwner {\r\n        IERC20(_token).approve(_spender, _amount);\r\n    }\r\n    \r\n    // ESD/ESDS WALLET FUNCTIONS \r\n    \r\n    // stage (aka \"deposit\") ESD \r\n    function deposit(uint256 _amountOfESD) external onlyOwner {\r\n        esds.deposit(_amountOfESD);\r\n    }\r\n    \r\n    // bond ESD (to get ESDS)\r\n    // @param _amountOfESD The amount of ESD you want to bond.\r\n    function bond(uint256 _amountOfESD) external onlyOwner {\r\n        esds.bond(_amountOfESD);\r\n    }\r\n    \r\n    // stage (aka \"deposit\") and then bond in a single tx to save gas\r\n    function depositAndBond(uint256 _amountOfESD) external onlyOwner {\r\n        esds.deposit(_amountOfESD);\r\n        esds.bond(_amountOfESD);\r\n    }\r\n    \r\n    // unbond ESDS (to get ESD)\r\n    // @param _amountOfESD The amount of ESD you want to get out! (NOT the amount of ESDS you want to unbond)\r\n    function unbond(uint256 _amountOfESD) external onlyOwner {\r\n        esds.unbondUnderlying(_amountOfESD);\r\n    }\r\n    \r\n    // \"unstage\" (aka \"withdraw\") ESD (so it can be sold, transferred out, etc)\r\n    function unstage(uint256 _amountOfESD) external onlyOwner {\r\n        esds.withdraw(_amountOfESD);\r\n    }\r\n    \r\n    // view ESD balance (amount that can be sold, transferred, etc rn)\r\n    function getBalanceOf() external view returns (uint256) {\r\n        return IERC20(esd).balanceOf(address(this));\r\n    }\r\n    \r\n    // view balanceOfStaged (amount that is staged)\r\n    function getBalanceOfStaged() external view returns (uint256) {\r\n        return esds.balanceOfStaged(address(this));   \r\n    }\r\n    \r\n    // get balanceOfBonded (amount of bonded ESD)\r\n    // @returns uint256 The amount of ESD bonded (NOT ESDS!!!)\r\n    function getBalanceOfBonded() external view returns (uint256) {\r\n        return esds.balanceOfBonded(address(this));\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"
    }
  }
}