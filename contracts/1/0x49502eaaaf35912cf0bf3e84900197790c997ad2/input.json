{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"BaoSynths.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\npragma solidity 0.8.6;\r\n\r\nlibrary Math {\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function approve(address, uint256) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns (uint256);\r\n    function symbol() external view returns (string memory);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface CEth {\r\n    function mint() external payable;\r\n    function borrow(uint256) external returns (uint256);\r\n    function repayBorrow() external payable;\r\n    function borrowBalanceCurrent(address) external returns (uint256);\r\n    function exchangeRateCurrent() external returns (uint256);\r\n    function supplyRatePerBlock() external returns (uint256);\r\n    function redeem(uint) external returns (uint);\r\n    function redeemUnderlying(uint) external returns (uint);\r\n}\r\n\r\ninterface CErc20 {\r\n    function mint(uint256) external returns (uint256);\r\n    function exchangeRateCurrent() external returns (uint256);\r\n    function supplyRatePerBlock() external returns (uint256);\r\n    function redeem(uint) external returns (uint);\r\n    function redeemUnderlying(uint) external returns (uint);\r\n    function borrow(uint256) external returns (uint256);\r\n    function borrowRatePerBlock() external view returns (uint256);\r\n    function borrowBalanceCurrent(address) external returns (uint256);\r\n    function repayBorrow(uint256) external returns (uint256);\r\n    function approve(address, uint256) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns (uint256);\r\n    function symbol() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface Oracle {\r\n    struct ReferenceData {\r\n        uint256 rate; // base/quote exchange rate, multiplied by 1e18.\r\n        uint256 lastUpdatedBase; // UNIX epoch of the last time when base price gets updated.\r\n        uint256 lastUpdatedQuote; // UNIX epoch of the last time when quote price gets updated.\r\n    }\r\n    \r\n    function getReferenceData(string memory _base, string memory _quote)\r\n        external\r\n        view\r\n        returns (ReferenceData memory);\r\n}\r\n\r\ninterface cToken {\r\n    function underlying() external view returns (address);\r\n}\r\n\r\ninterface comptroller {\r\n    function getAllMarkets() external view returns (address[] memory);\r\n    function markets(address _market) external view returns (bool isListed, uint256 collateralFactorMantissa, bool isComped);\r\n    function getAccountLiquidity(address) external view returns (uint256, uint256, uint256);\r\n    function claimComp(address holder) external;\r\n}\r\n\r\ninterface ibtroller {\r\n    function getAllMarkets() external view returns (address[] memory);\r\n    function markets(address _market) external view returns (bool isListed, uint256 collateralFactorMantissa);\r\n}\r\n\r\ninterface aavecore {\r\n    struct ReserveConfigurationMap {\r\n        //bit 0-15: LTV\r\n        //bit 16-31: Liq. threshold\r\n        //bit 32-47: Liq. bonus\r\n        //bit 48-55: Decimals\r\n        //bit 56: Reserve is active\r\n        //bit 57: reserve is frozen\r\n        //bit 58: borrowing is enabled\r\n        //bit 59: stable rate borrowing enabled\r\n        //bit 60-63: reserved\r\n        //bit 64-79: reserve factor\r\n        uint256 data;\r\n    }\r\n    function getReserveConfiguration(address _market) external view returns (uint, uint, uint, bool);\r\n    function getConfiguration(address _market) external view returns (ReserveConfigurationMap memory);\r\n}\r\n\r\ninterface aaveRewards {\r\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\r\n    function claimRewards(address[] calldata assets, uint256 amount, address to) external returns (uint256);\r\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\r\n    function REWARD_TOKEN() external view returns (address);\r\n}\r\n\r\ninterface vaultparams {\r\n    function initialCollateralRatio(address _token) external view returns (uint);\r\n}\r\n\r\ninterface SushiswapV2Router02 {\r\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface ILendingPool{\r\n    function withdraw(address asset, uint256 amount, address to) external returns (uint256);\r\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\r\n    function borrow(address asset, uint256 amount, uint256 interestRateMode, uint16 referralCode, address onBehalfOf) external;\r\n    function repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\r\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\r\n    function rebalanceStableBorrowRate(address asset, address user) external;\r\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\r\n }\r\n\r\ncontract FixedUSD is Ownable {\r\n    string public constant name = \"Bao Gold\";\r\n    string public constant symbol = \"bGOLD\";\r\n    uint8 public constant decimals = 18;\r\n    \r\n    address public _oracle = 0xDA7a001b254CD22e46d3eAB04d937489c93174C3;\r\n    address public _stable = 0x45804880De22913dAFE09f4980848ECE6EcbAf78;\r\n    address public _router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address public _aaveRewards = 0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5;\r\n    address public constant zeroAddress = 0x0000000000000000000000000000000000000000;\r\n    address public constant _aavev2 = address(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9);\r\n    address public constant _ib = address(0xAB1c342C7bf5Ec5F02ADEA1c2270670bCa144CbB);\r\n    address public constant _unit = address(0x203153522B9EAef4aE17c6e99851EE7b2F7D312E);\r\n    address public constant _weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    string public constant _quote = \"XAU\";\r\n    bool public OnOff;\r\n    bool public isRedeemOnly;\r\n    uint public withdrawFee;\r\n    uint public depositFee;\r\n    uint public stabilityFeeMul;\r\n    uint public stabilityFeeDiv;\r\n    \r\n    uint constant _BASE = 100;\r\n    uint constant _LIQUIDITY_THRESHOLD = 5;\r\n    uint constant _LIQUIDATION_VALUE = 90;\r\n    uint constant _CACHE = 1 days;\r\n    uint constant _minLiquidity = 500000e18;\r\n    \r\n    /// @notice Total number of tokens in circulation\r\n    uint public totalSupply = 0;\r\n    \r\n    mapping(address => mapping (address => uint)) internal allowances;\r\n    mapping(address => uint) internal balances;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n    event Approval(address indexed owner, address indexed spender, uint amount);\r\n    \r\n    mapping(address => mapping(address => uint)) public credit;\r\n    mapping(address => mapping(address => uint)) public collateral;\r\n    mapping(address => mapping(address => uint)) public lastBlockTimestamp;\r\n    mapping(address => mapping(address => uint)) public feeDebt;\r\n    \r\n    mapping(address => uint) public credits;\r\n    mapping(address => uint) public collaterals;\r\n    \r\n    mapping(address => uint) public ltvs;\r\n    mapping(address => uint) _ltvCaches;\r\n    \r\n    mapping(address => uint) public liquidities;\r\n    mapping(address => uint) _liquidityCaches;\r\n    \r\n    mapping(address => uint) public fallbackQuote;\r\n    mapping(address => address) public compWrap;\r\n    mapping(address => address) public aaveWrap;\r\n    mapping(address => address) public IBwrap;\r\n    \r\n    uint public arb;\r\n    \r\n    event Mint(address indexed from, address indexed asset, address indexed to, uint amount);\r\n    event Burn(address indexed from, address indexed asset, address indexed to, uint amount);\r\n    event Liquidate(address indexed from, address indexed asset, address indexed to, uint amount);\r\n    \r\n    \r\n    function validateLTV(uint __ltv) public pure returns (bool) {\r\n        if ((__ltv == 60) || (__ltv == 65) || (__ltv == 70) || (__ltv == 75)) {\r\n            return true;\r\n        } else if ((__ltv == 80) || (__ltv == 85) || __ltv >= 90) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function gentleRepaymentCalculator(uint __ltv, uint debt, uint value) public pure returns (uint repayment) {\r\n        if (__ltv == 60) {\r\n            return Math.min((debt - value) * 310 / _BASE, debt);\r\n        } else if (__ltv == 65) {\r\n            return Math.min((debt - value) * 370 / _BASE, debt);\r\n        } else if (__ltv == 70) {\r\n            return Math.min((debt - value) * 460 / _BASE, debt);\r\n        } else if (__ltv == 75) {\r\n            return Math.min((debt - value) * 610 / _BASE, debt);\r\n        } else if (__ltv == 80) {\r\n            return Math.min((debt - value) * 910 / _BASE, debt);\r\n        } else if (__ltv == 85) {\r\n            return Math.min((debt - value) * 1810 / _BASE, debt);\r\n        } else if (__ltv >= 90) {\r\n            return debt;\r\n        }\r\n    }\r\n    \r\n    function _lookup(address quoted, uint amount) internal returns (uint) {\r\n        uint _quoted = Oracle(_oracle).getReferenceData(IERC20(quoted).symbol(), _quote).rate;\r\n        if (_quoted == 0 && fallbackQuote[quoted] != 0) {\r\n            _quoted = fallbackQuote[quoted];\r\n        } else {\r\n            fallbackQuote[quoted] = _quoted;\r\n        }\r\n        return  _quoted * (amount * _ltv(quoted) / _BASE) / 10 ** IERC20(quoted).decimals();\r\n    }\r\n    \r\n    function lookup(address quoted, uint amount) public view returns (uint) {\r\n        uint _quoted = Oracle(_oracle).getReferenceData(IERC20(quoted).symbol(), _quote).rate;\r\n        if (_quoted == 0 && fallbackQuote[quoted] != 0) {\r\n            _quoted = fallbackQuote[quoted];\r\n        }\r\n        return _quoted * (amount * ltvs[quoted] / _BASE) / 10 ** IERC20(quoted).decimals();\r\n    }\r\n    \r\n    function lookup(address quoted) external view returns (uint) {\r\n        return Oracle(_oracle).getReferenceData(IERC20(quoted).symbol(), _quote).rate;\r\n    }\r\n    \r\n    function lookupLiq(address quoted, uint amount) public view returns (uint) {\r\n        return Oracle(_oracle).getReferenceData(IERC20(quoted).symbol(), _quote).rate * (amount * _LIQUIDATION_VALUE / _BASE) / 10 ** IERC20(quoted).decimals();\r\n    }\r\n    \r\n    function mintArb(uint amount) external {\r\n    if((OnOff == true) && (isRedeemOnly != true)){\r\n            _mintArb(amount, msg.sender);\r\n         }\r\n    }\r\n    \r\n    function mintArb(uint amount, address recipient) external {\r\n    if((OnOff == true) && (isRedeemOnly != true)){\r\n            _mintArb(amount, recipient);\r\n        }\r\n    }\r\n    \r\n    function _mintArb(uint amount, address recipient) internal {\r\n        _safeTransferFrom(_stable, msg.sender, address(this), amount);\r\n        _mint(recipient, amount);\r\n        arb += amount;\r\n        emit Mint(msg.sender, _stable, recipient, amount);\r\n    }\r\n    \r\n    function burnArb(uint amount) external {\r\n    if(OnOff == true){\r\n        _burnArb(amount, msg.sender);\r\n    }\r\n    }\r\n    \r\n    function burnArb(uint amount, address recipient) external {\r\n    if(OnOff == true){\r\n        _burnArb(amount, recipient);\r\n    }\r\n    }\r\n    \r\n    function _burnArb(uint amount, address recipient) internal {\r\n        _burn(msg.sender, amount);\r\n        _safeTransfer(_stable, recipient, amount);\r\n        arb -= amount;\r\n        emit Burn(msg.sender, _stable, recipient, amount);\r\n    }\r\n    \r\n    function mint(address asset, uint amount, uint minted) external {\r\n        _mint(asset, amount, minted, msg.sender);\r\n    }\r\n    \r\n    function mint(address asset, uint amount, uint minted, address recipient) external {\r\n        _mint(asset, amount, minted, recipient);\r\n    }\r\n    \r\n    function _mint(address asset, uint amount, uint minted, address recipient) internal {\r\n    if((OnOff == true) && (isRedeemOnly != true)){\r\n        uint256 addDebt;\r\n        addDebt = currentDebt(msg.sender, asset);\r\n        if(compWrap[asset] != zeroAddress){ \r\n                if (amount > 0) {\r\n                    _safeTransferFrom(asset, msg.sender, address(this), amount);\r\n                }\r\n        \r\n                collateral[msg.sender][asset] += amount;\r\n                collaterals[asset] += amount;\r\n        \r\n                credit[msg.sender][asset] += minted;\r\n                credits[asset] += minted;\r\n        \r\n                require(_liquidity(asset, collaterals[asset]) >= credits[asset]);\r\n                require(_lookup(asset, collateral[msg.sender][asset]) >= credit[msg.sender][asset]);\r\n                _mint(recipient, minted);\r\n                emit Mint(msg.sender, asset, recipient, amount);\r\n                CErc20 wrapcToken = CErc20(compWrap[asset]);\r\n                wrapcToken.mint(amount);\r\n        } else if(aaveWrap[asset] != zeroAddress) {\r\n                if (amount > 0) {\r\n                    _safeTransferFrom(asset, msg.sender, address(this), amount);\r\n                }\r\n                collateral[msg.sender][asset] += amount;\r\n                collaterals[asset] += amount;\r\n        \r\n                credit[msg.sender][asset] += minted;\r\n                credits[asset] += minted;\r\n        \r\n                require(_liquidity(asset, collaterals[asset]) >= credits[asset]);\r\n                require(_lookup(asset, collateral[msg.sender][asset]) >= credit[msg.sender][asset]);\r\n                _mint(recipient, minted);\r\n                emit Mint(msg.sender, asset, recipient, amount);\r\n                ILendingPool wrapAToken = ILendingPool(_aavev2);\r\n                wrapAToken.deposit(asset, amount, address(this), 0);\r\n            } else if (IBwrap[asset] != zeroAddress){ \r\n                if (amount > 0) {\r\n                    _safeTransferFrom(asset, msg.sender, address(this), amount);\r\n                }\r\n        \r\n                collateral[msg.sender][asset] += amount;\r\n                collaterals[asset] += amount;\r\n        \r\n                credit[msg.sender][asset] += minted;\r\n                credits[asset] += minted;\r\n        \r\n                require(_liquidity(asset, collaterals[asset]) >= credits[asset]);\r\n                require(_lookup(asset, collateral[msg.sender][asset]) >= credit[msg.sender][asset]);\r\n                _mint(recipient, minted);\r\n                emit Mint(msg.sender, asset, recipient, amount);\r\n                CErc20 wrapcToken = CErc20(compWrap[asset]);\r\n                wrapcToken.mint(amount);\r\n        } else {\r\n            if (amount > 0) {\r\n                    _safeTransferFrom(asset, msg.sender, address(this), amount);\r\n                }\r\n        \r\n                collateral[msg.sender][asset] += amount;\r\n                collaterals[asset] += amount;\r\n        \r\n                credit[msg.sender][asset] += minted;\r\n                credits[asset] += minted;\r\n        \r\n                require(_liquidity(asset, collaterals[asset]) >= credits[asset]);\r\n                require(_lookup(asset, collateral[msg.sender][asset]) >= credit[msg.sender][asset]);\r\n                _mint(recipient, minted);\r\n                emit Mint(msg.sender, asset, recipient, amount);\r\n                addDebt = currentDebt(msg.sender, asset);\r\n                credit[msg.sender][asset] += addDebt;\r\n                credits[asset] += addDebt;\r\n                lastBlockTimestamp[msg.sender][asset] = block.timestamp;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function burn(address asset, uint amount, uint burned) external {\r\n        _burn(asset, amount, burned, msg.sender);\r\n    }\r\n    \r\n    function burn(address asset, uint amount, uint burned, address recipient) external {\r\n        _burn(asset, amount, burned, recipient);\r\n    }\r\n    \r\n    function _burn(address asset, uint amount, uint burned, address recipient) internal {\r\n    if(OnOff == true){\r\n        uint256 addDebt = currentDebt(msg.sender, asset);\r\n        _burn(msg.sender, burned);\r\n        \r\n        credit[msg.sender][asset] -= burned;\r\n        credits[asset] -= burned;\r\n        collateral[msg.sender][asset] -= amount;\r\n        collaterals[asset] -= amount;\r\n        \r\n        require(lookup(asset, collateral[msg.sender][asset]) >= credit[msg.sender][asset]);\r\n        if (amount > 0) {\r\n            if(compWrap[asset] != zeroAddress){\r\n                CErc20 compWithdraw = CErc20(compWrap[asset]);\r\n                compWithdraw.redeemUnderlying(amount);\r\n                _safeTransfer(asset, recipient, amount);\r\n            } else if(aaveWrap[asset] != zeroAddress){\r\n                ILendingPool aaveWithdraw = ILendingPool(aaveWrap[asset]);\r\n                aaveWithdraw.withdraw(asset, amount, address(this));\r\n                _safeTransfer(asset, recipient, amount);\r\n            } else if(IBwrap[asset] != zeroAddress){\r\n                CErc20 compWithdraw = CErc20(compWrap[asset]);\r\n                compWithdraw.redeemUnderlying(amount);\r\n                _safeTransfer(asset, recipient, amount);\r\n            } else {\r\n                _safeTransfer(asset, recipient, amount);\r\n                }\r\n            }\r\n            emit Burn(msg.sender, asset, recipient, amount);\r\n        }\r\n    }\r\n    \r\n    function repaymentCalculator(address owner, address asset) external view returns (uint) {\r\n        uint _nominal = collateral[owner][asset];\r\n        \r\n        uint _backed = lookup(asset, _nominal);\r\n        uint _debt = credit[owner][asset];\r\n        if (_backed < _debt) {\r\n            return gentleRepaymentCalculator(ltvs[asset], _debt, _backed);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    function paymentCalculator(address owner, address asset) external view returns (uint) {\r\n        uint _nominal = collateral[owner][asset];\r\n        \r\n        uint _backed = lookup(asset, _nominal);\r\n        uint _debt = credit[owner][asset];\r\n        if (_backed < _debt) {\r\n            uint _repayment = gentleRepaymentCalculator(ltvs[asset], _debt, _backed);\r\n            return Math.min(_nominal * _repayment / lookupLiq(asset, _nominal), _nominal);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    function TokenApprover(address _cErc20Contract, uint256 _numTokensToApprove) public onlyOwner {\r\n        // Create a reference to the underlying asset contract, like DAI.\r\n        IERC20 approvalUnderlying = IERC20(_cErc20Contract);\r\n        \r\n        // Approve transfer on the ERC20 contract\r\n        approvalUnderlying.approve(_cErc20Contract, _numTokensToApprove);\r\n    }\r\n    \r\n    function liquidate(address owner, address asset, uint max) external {\r\n    if(OnOff == true){\r\n        uint _nominal = collateral[owner][asset];\r\n        currentDebt(owner, asset);\r\n        uint _backed = _lookup(asset, _nominal);\r\n        uint _debt = credit[owner][asset];\r\n        require(_backed < _debt);\r\n        \r\n        uint _repayment = gentleRepaymentCalculator(_ltv(asset), _debt, _backed);\r\n        require(_repayment <= max);\r\n        uint _payment = Math.min(_nominal * _repayment / lookupLiq(asset, _nominal), _nominal);\r\n        \r\n        _burn(msg.sender, _repayment);\r\n        \r\n        credit[owner][asset] -= _repayment;\r\n        credits[asset] -= _repayment;\r\n        collateral[owner][asset] -= _payment;\r\n        collaterals[asset] -= _payment;\r\n        \r\n        require(_lookup(asset, collateral[owner][asset]) >= credit[owner][asset]);\r\n        if(compWrap[asset] != zeroAddress){\r\n            CErc20 compRedeemer = CErc20(compWrap[asset]);\r\n            compRedeemer.redeemUnderlying(_payment);\r\n            _safeTransfer(asset, msg.sender, _payment);\r\n        } else if(aaveWrap[asset] != zeroAddress){\r\n            ILendingPool aaveRedeemer = ILendingPool(aaveWrap[asset]);\r\n            aaveRedeemer.withdraw(asset, _payment, address(this));\r\n            _safeTransfer(asset, msg.sender, _payment);\r\n        } else if(IBwrap[asset] != zeroAddress){\r\n            CErc20 compRedeemer = CErc20(compWrap[asset]);\r\n            compRedeemer.redeemUnderlying(_payment);\r\n            _safeTransfer(asset, msg.sender, _payment);\r\n        } else {\r\n            _safeTransfer(asset, msg.sender, _payment);\r\n        }\r\n        emit Liquidate(msg.sender, asset, owner, _repayment);\r\n        }\r\n    }\r\n    \r\n    function _mint(address dst, uint amount) internal {\r\n        // mint the amount\r\n        totalSupply += amount;\r\n        // transfer the amount to the recipient\r\n        balances[dst] += amount;\r\n        emit Transfer(address(0), dst, amount);\r\n    }\r\n    \r\n    function _burn(address dst, uint amount) internal {\r\n        // burn the amount\r\n        totalSupply -= amount;\r\n        // transfer the amount from the recipient\r\n        balances[dst] -= amount;\r\n        emit Transfer(dst, address(0), amount);\r\n    }\r\n    \r\n    function allowance(address account, address spender) external view returns (uint) {\r\n        return allowances[account][spender];\r\n    }\r\n\r\n    function approve(address spender, uint amount) external returns (bool) {\r\n        allowances[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint) {\r\n        return balances[account];\r\n    }\r\n\r\n    function transfer(address dst, uint amount) external returns (bool) {\r\n        _transferTokens(msg.sender, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint amount) external returns (bool) {\r\n        address spender = msg.sender;\r\n        uint spenderAllowance = allowances[src][spender];\r\n\r\n        if (spender != src && spenderAllowance != type(uint).max) {\r\n            uint newAllowance = spenderAllowance - amount;\r\n            allowances[src][spender] = newAllowance;\r\n\r\n            emit Approval(src, spender, newAllowance);\r\n        }\r\n\r\n        _transferTokens(src, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transferTokens(address src, address dst, uint amount) internal {\r\n        balances[src] -= amount;\r\n        balances[dst] += amount;\r\n        \r\n        emit Transfer(src, dst, amount);\r\n    }\r\n    \r\n    function _safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n    \r\n    function _safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n    \r\n\r\n    \r\n    uint256 constant _LTV_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000;\r\n    \r\n    function _getParamsMemory(aavecore.ReserveConfigurationMap memory self) internal pure returns (uint256) { \r\n        return (self.data & ~_LTV_MASK);\r\n    }\r\n    \r\n    function _lookupMarket(address _core, address _token) internal view returns (address) {\r\n        address[] memory _list = comptroller(_core).getAllMarkets();\r\n        for (uint i = 0; i < _list.length; i++) {\r\n            if (_list[i] != address(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5) && _list[i] != address(0xD06527D5e56A3495252A528C4987003b712860eE)) {\r\n                if (cToken(_list[i]).underlying() == _token) {\r\n                    return _list[i];\r\n                }\r\n            }\r\n        }\r\n        return address(0x0);\r\n    }\r\n    \r\n    function _liquidityV(address token, uint amount) internal view returns (uint, bool) {\r\n        if (block.timestamp > _liquidityCaches[token]) {\r\n            if (token == _weth) {\r\n                return (_liquidityVWETH(amount), true);\r\n            } else {\r\n                address[] memory _path = new address[](3);\r\n                _path[0] = token;\r\n                _path[1] = _weth;\r\n                _path[2] = _stable;\r\n                uint _liq = SushiswapV2Router02(_router).getAmountsOut(amount, _path)[2];\r\n                uint _liquid = liquidities[token];\r\n                if (_liq > _liquid) {\r\n                    _liquid += _liquid * _LIQUIDITY_THRESHOLD / _BASE;\r\n                }\r\n                return (_liquid, true);\r\n            }\r\n        } else {\r\n            return (liquidities[token], false);\r\n        }\r\n    }\r\n    \r\n    function _liquidityVWETH(uint amount) internal view returns (uint) {\r\n        address[] memory _path = new address[](2);\r\n        _path[0] = _weth;\r\n        _path[1] = _stable;\r\n        uint _liq = SushiswapV2Router02(_router).getAmountsOut(amount, _path)[1];\r\n        uint _liquid = liquidities[_weth];\r\n        if (_liq > _liquid) {\r\n            _liquid += _liquid * _LIQUIDITY_THRESHOLD / _BASE;\r\n        }\r\n        return _liquid;\r\n    }\r\n    \r\n    function _liquidity(address token, uint amount) internal returns (uint) {\r\n        if (_liquidityCaches[token] == 0) {\r\n            liquidities[token] = _minLiquidity;\r\n        }\r\n        (uint _val, bool _updated) = _liquidityV(token, amount);\r\n        if (_updated) {\r\n            _liquidityCaches[token] = block.timestamp + _CACHE;\r\n            liquidities[token] = _val;\r\n        }\r\n        return _val;\r\n    }\r\n    \r\n    function liquidity(address token, uint amount) external view returns (uint val) {\r\n        (val,) = _liquidityV(token, amount);\r\n    }\r\n    \r\n    function _getLTVIB(address token) internal view returns (uint ib) {\r\n        (,ib) = ibtroller(_ib).markets(_lookupMarket(_ib, token));\r\n        ib = ib / 1e16;\r\n    }\r\n    \r\n    function _getLTVUnit(address _token) internal view returns (uint unit) {\r\n        unit = vaultparams(_unit).initialCollateralRatio(_token);\r\n    }\r\n    \r\n    function _getLTVAaveV2(address token) internal view returns (uint aavev2) {\r\n        (aavev2) = _getParamsMemory(aavecore(_aavev2).getConfiguration(token));\r\n        aavev2 = aavev2 / 1e2;\r\n    }\r\n    \r\n    function _ltv(address token) internal returns (uint) {\r\n        (uint _val, bool _updated) = _ltvV(token);\r\n        if (_updated) {\r\n            _ltvCaches[token] = block.timestamp + _CACHE;\r\n            ltvs[token] = _val;\r\n        }\r\n        return _val;\r\n    }\r\n    \r\n    function ltv(address token) external view returns (uint val) {\r\n        (val,) = _ltvV(token);\r\n    }\r\n    \r\n    function _ltvV(address token) internal view returns (uint, bool) {\r\n        if (block.timestamp > _ltvCaches[token]) {\r\n            uint _max = 0;\r\n            uint _tmp =  _getLTVIB(token);\r\n            if (_tmp > _max) {\r\n                _max = _tmp;\r\n            }\r\n            _tmp = _getLTVAaveV2(token);\r\n            if (_tmp > _max) {\r\n                _max = _tmp;\r\n            }\r\n            _tmp = _getLTVUnit(token);\r\n            if (_tmp > _max) {\r\n                _max = _tmp;\r\n            }\r\n            _max = _max / 5 * 5;\r\n            if (_max < 60) {\r\n                _max = 0;\r\n            }\r\n            return (_max, true);\r\n        } else {\r\n            return (ltvs[token], false);\r\n        }\r\n    }\r\n    \r\n    function updateRouter(address newRouter) public onlyOwner{\r\n        _router = newRouter;\r\n    }\r\n    \r\n    function updateStable(address newStable) public onlyOwner{\r\n        _stable = newStable;\r\n    }\r\n    \r\n    function updateOracle(address newOracle) public onlyOwner{\r\n        _oracle = newOracle;\r\n    }\r\n    \r\n    function updateAaveRewards(address newAave) public onlyOwner{\r\n        _aaveRewards = newAave;\r\n    }\r\n    \r\n    function checkCompoundDelta(address _address) public returns (uint256) {\r\n        IERC20 token = IERC20(_address);\r\n        CErc20 wrappedToken = CErc20(compWrap[_address]);\r\n        uint256 delta = ((wrappedToken.balanceOf(address(this)) / (wrappedToken.exchangeRateCurrent() / (1 * 10 ** (18 + token.decimals() - wrappedToken.decimals()))))) - collaterals[_address];\r\n        return delta;\r\n    }\r\n    \r\n    function checkAaveDelta(address _address) public view returns (uint256) {\r\n        IERC20 token = IERC20(_address);\r\n        uint256 aTokenBalance = token.balanceOf(address(this));\r\n        uint256 collateralsOwedOut = collaterals[_address];\r\n        uint256 delta = aTokenBalance - collateralsOwedOut;\r\n        return delta;\r\n    }\r\n    \r\n    function checkIBDelta(address _address) public returns (uint256) {\r\n        IERC20 token = IERC20(_address);\r\n        CErc20 wrappedToken = CErc20(compWrap[_address]);\r\n        uint256 delta = ((wrappedToken.balanceOf(address(this)) / (wrappedToken.exchangeRateCurrent() / (1 * 10 ** (18 + token.decimals() - wrappedToken.decimals()))))) - collaterals[_address];\r\n        return delta;\r\n    }\r\n\r\n    function claimCompoundDelta(address _address) public {\r\n        if(compWrap[_address] != zeroAddress){\r\n            uint256 finalDelta = checkCompoundDelta(_address);\r\n            CErc20 wrappedToken = CErc20(compWrap[_address]);\r\n            address ownerAddress = owner();\r\n            if(finalDelta > 0){\r\n                uint256 returnAmount = wrappedToken.redeemUnderlying(finalDelta);\r\n                if(returnAmount == 0){\r\n                    _safeTransferFrom(_address, ownerAddress, address(this), finalDelta);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function claimIBDelta(address _address) public {\r\n        if(IBwrap[_address] != zeroAddress){\r\n            uint256 finalDelta = checkIBDelta(_address);\r\n            CErc20 wrappedToken = CErc20(IBwrap[_address]);\r\n            address ownerAddress = owner();\r\n            if(finalDelta > 0){\r\n                uint256 returnAmount = wrappedToken.redeemUnderlying(finalDelta);\r\n                if(returnAmount == 0){\r\n                    _safeTransferFrom(_address, ownerAddress, address(this), finalDelta);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function claimAaveDelta(address _address) public {\r\n        if(aaveWrap[_address] != zeroAddress){\r\n            uint256 finalDelta = checkAaveDelta(_address);\r\n            IERC20 token = IERC20(aaveWrap[_address]);\r\n            address ownerAddress = owner();\r\n            if(finalDelta > 0){\r\n                _safeTransferFrom(aaveWrap[_address], ownerAddress, address(this), finalDelta);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function claimAave(address[] memory claimAssets, uint256 amount) public {\r\n        address currentOwner = owner();\r\n        aaveRewards aaveClaim = aaveRewards(_aaveRewards);\r\n        aaveClaim.claimRewards(claimAssets, amount, currentOwner);\r\n    }\r\n    \r\n    function claimComp(address _core, address compToken) public {\r\n        comptroller currentComptroller = comptroller(_core);\r\n        currentComptroller.claimComp(address(this));\r\n        IERC20 comp = IERC20(compToken);\r\n        address currentOwner = owner();\r\n        comp.transfer(currentOwner, comp.balanceOf(address(this)));\r\n    }\r\n    \r\n    function addToComp(address asset, address wrappedAsset) public onlyOwner {\r\n        compWrap[asset] = wrappedAsset;        \r\n    }\r\n    \r\n    function addToIB(address asset, address wrappedAsset) public onlyOwner {\r\n        IBwrap[asset] = wrappedAsset;        \r\n    }\r\n    \r\n    function addToAave(address asset, address wrappedAsset) public onlyOwner {\r\n        aaveWrap[asset] = wrappedAsset;\r\n    }\r\n    \r\n    function removeFromComp(address asset, address wrappedAsset) public onlyOwner {\r\n        compWrap[asset] = zeroAddress;\r\n    }\r\n    \r\n    function removeFromIB(address asset, address wrappedAsset) public onlyOwner {\r\n        IBwrap[asset] = zeroAddress;\r\n    }\r\n    \r\n    function removeFromAave(address asset, address wrappedAsset) public onlyOwner {\r\n        aaveWrap[asset] = zeroAddress;\r\n    }\r\n    \r\n    function turnOnOff(bool _OnOff) public onlyOwner{\r\n        OnOff = _OnOff;\r\n    }\r\n    \r\n    function setRedeemOnly(bool _redeemOnly) public onlyOwner{\r\n        isRedeemOnly = _redeemOnly;\r\n    }\r\n    \r\n    function currentDebt(address _user, address _asset) public returns(uint256) {\r\n        uint256 previousBlock = lastBlockTimestamp[_user][_asset];\r\n        uint256 varcurrentDebt = ((((credit[_user][_asset]) * (stabilityFeeMul)) / (stabilityFeeDiv)) / 31536000) * (block.timestamp - previousBlock);\r\n        uint256 addFeeDebt = (feeDebt[_user][_asset] += varcurrentDebt);\r\n        credit[_user][_asset] += addFeeDebt;\r\n        feeDebt[_user][_asset] = 0;\r\n        lastBlockTimestamp[_user][_asset] = block.timestamp;\r\n        return varcurrentDebt;\r\n    }\r\n    \r\n    function viewDebt(address _user, address _asset) public view returns(uint256){\r\n        uint256 previousBlock = lastBlockTimestamp[_user][_asset];\r\n        uint256 viewcurrentDebt = ((((credit[_user][_asset]) * (stabilityFeeMul)) / (stabilityFeeDiv)) / 31536000) * (block.timestamp - previousBlock);\r\n        uint256 prevFeeDebt = feeDebt[_user][_asset];\r\n        uint256 currentFeeDebt = prevFeeDebt + viewcurrentDebt;\r\n        return currentFeeDebt;\r\n    }\r\n\r\n}"}}}