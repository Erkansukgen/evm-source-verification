{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/99/LinkPrice.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor ()  {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract LinkPrice is Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    struct Rate {\r\n        uint16 r1;\r\n        uint16 r2;\r\n        uint16 r3;\r\n        uint16 r4;\r\n        uint16 r5;\r\n    }\r\n  mapping(address=>Rate) private _coinrate;\r\n  mapping(address=>string) private _coinlist;\r\n  mapping(string=>uint256) private _coinprice;\r\n  mapping(address=>bool) private _openuser;\r\n  mapping(address=>uint16) private _coinborrowrate;\r\n  constructor (){\r\n       _coinprice[\"USDT\"]=100000000;\r\n      _coinlist[0xdAC17F958D2ee523a2206206994597C13D831ec7]=\"USDT\";\r\n      _coinlist[0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE]=\"SHIB\";\r\n      _coinrate[0xdAC17F958D2ee523a2206206994597C13D831ec7]=Rate(390,520,1000,2000,3300);\r\n      _coinrate[0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE]=Rate(600,850,1300,2700,4000);//SHIB\";\r\n\r\n  }\r\n   \r\n    function setContract(address coincontract,string memory symbol,uint256 price)public onlyOwner returns (bool) {\r\n        require(address(coincontract)!=address(0),\"Error address(0)\");\r\n        _coinlist[coincontract]=symbol;\r\n        _coinprice[symbol]=price;\r\n        return true;\r\n    }\r\n    function addUser(address coincontract,bool isopen)public onlyOwner returns (bool) {\r\n        _openuser[coincontract]=isopen;\r\n        return true;\r\n    }\r\n    function setRate(address coincontract,uint16 r1,uint16 r2,uint16 r3,uint16 r4,uint16 r5)public onlyOwner returns (bool) {\r\n        _coinrate[coincontract]=Rate(r1,r2,r3,r4,r5);\r\n        return true;\r\n    }\r\n    function setBorrowRate(address coincontract,uint16 rate)public onlyOwner returns (bool) {\r\n        _coinborrowrate[coincontract]=rate;\r\n        return true;\r\n    }\r\n    function setPrice(uint256 p4)public onlyOwner returns (bool) {\r\n        _coinprice[\"SHIB\"]=p4;\r\n        return true;\r\n    }\r\n    function setPrice(address coincontract,uint256 price)public onlyOwner returns (bool) {\r\n        require(address(coincontract)!=address(0),\"Error address(0)\");\r\n        require(_compareStr(_coinlist[coincontract],\"\")==false,\"Error contract\");\r\n        _coinprice[_coinlist[coincontract]]=price;\r\n        return true;\r\n    }\r\n    function setPrice(string memory symbol,uint256 price)public onlyOwner returns (bool) {\r\n        _coinprice[symbol]=price;\r\n        return true;\r\n    }\r\n     function getSymbol(address coincontract) public view returns(string memory){\r\n        return  _coinlist[coincontract];\r\n    }\r\n    function getPrice(string memory symbol) public view returns(uint256){\r\n        return _coinprice[symbol];\r\n    }\r\n    function getPrice(address coincontract) public view returns(uint256){\r\n        return  _coinprice[_coinlist[coincontract]];\r\n    }\r\n    function getIsOpen() public view returns(bool){\r\n        bool isopenuser= _openuser[msg.sender];\r\n        return isopenuser;\r\n    }\r\n    function checkPrice(address coincontract,uint256 price)public view returns (bool) {\r\n        bool isopenuser= _openuser[msg.sender];\r\n        if(isopenuser==true && _compareStr(_coinlist[coincontract],\"\")==false){\r\n            uint256 saveprice=_coinprice[_coinlist[coincontract]];\r\n            uint256 peroff=saveprice.div(20);\r\n            if(saveprice>price && saveprice<=price.add(peroff) || saveprice<price && saveprice>=price.sub(peroff) || saveprice==price){\r\n                 return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    function checkPrice(string memory symbol,uint256 price)public view returns (bool) {\r\n        bool isopenuser= _openuser[msg.sender];\r\n        if(isopenuser==true && _compareStr(symbol,\"\")==false){\r\n            uint256 saveprice=_coinprice[symbol];\r\n            uint256 peroff=saveprice.div(20);\r\n            if(saveprice>price && saveprice<=price.add(peroff) || saveprice<price && saveprice>=price.sub(peroff) || saveprice==price){\r\n                 return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    function getRate(address coincontract) public view returns (uint16,uint16,uint16,uint16,uint16){\r\n        Rate memory _r= _coinrate[coincontract];\r\n        return(_r.r1,_r.r2,_r.r3,_r.r4,_r.r5);\r\n    }\r\n    function getBorrowRate(address coincontract) public view returns (uint16){\r\n        return _coinborrowrate[coincontract];\r\n    }\r\n    function _compareStr(string memory _str1, string memory _str2) public pure returns(bool) {\r\n        if(bytes(_str1).length == bytes(_str2).length){\r\n            if(keccak256(abi.encodePacked(_str1)) == keccak256(abi.encodePacked(_str2))) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}"
    }
  }
}