{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"rartest.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.7.0 <0.8.0;\r\n\r\n\r\n\r\ninterface RaribleInterface {\r\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\r\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n}\r\n\r\ncontract NFTStakingTest {\r\n    \r\n    RaribleInterface rarible =  RaribleInterface(0xd07dc4262BCDbf85190C01c996b4C06a461d2430);\r\n\r\n    function depositNFT(uint id, uint value) public {\r\n        rarible.setApprovalForAll(address(this), true);\r\n        require(rarible.balanceOf(address(msg.sender), id) >= value);\r\n        rarible.safeTransferFrom(address(msg.sender), address(this), id, value, \"\");\r\n    }\r\n\r\n    function withdrawNFT(uint id, uint value) public {\r\n        rarible.safeTransferFrom(address(this), address(msg.sender), id, value, \"\");\r\n    }\r\n\r\n    function nftIDBalance(uint id) public view returns(uint) {\r\n        uint nftBalance = rarible.balanceOf(address(msg.sender), id);\r\n        return nftBalance;\r\n    }\r\n}"}}}