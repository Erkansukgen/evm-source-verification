{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/CompoundMonitor.sol": {
      "content": "pragma solidity ^0.6.0;\npragma experimental ABIEncoderV2;\n\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint256 supply);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        external\n        returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    function decimals() external view returns (uint256 digits);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\nabstract contract GasTokenInterface is ERC20 {\n    function free(uint256 value) public virtual returns (bool success);\n\n    function freeUpTo(uint256 value) public virtual returns (uint256 freed);\n\n    function freeFrom(address from, uint256 value) public virtual returns (bool success);\n\n    function freeFromUpTo(address from, uint256 value) public virtual returns (uint256 freed);\n}\n\ncontract GasBurner {\n    // solhint-disable-next-line const-name-snakecase\n    GasTokenInterface public constant gasToken = GasTokenInterface(0x0000000000b3F879cb30FE243b4Dfee438691c04);\n\n    modifier burnGas(uint _amount) {\n        uint gst2Amount = _amount;\n\n        if (_amount == 0) {\n            gst2Amount = (gasleft() + 14154) / (2 * 24000 - 6870);\n            gst2Amount = gst2Amount - (gst2Amount / 3); // 33.3% less because of gaslimit != gas_used\n        }\n\n        if (gasToken.balanceOf(address(this)) >= gst2Amount) {\n            gasToken.free(gst2Amount);\n        }\n\n        _;\n    }\n}\n\nabstract contract DSProxyInterface {\n\n    /// Truffle wont compile if this isn't commented\n    // function execute(bytes memory _code, bytes memory _data)\n    //     public virtual\n    //     payable\n    //     returns (address, bytes32);\n\n    function execute(address _target, bytes memory _data) public virtual payable returns (bytes32);\n\n    function setCache(address _cacheAddr) public virtual payable returns (bool);\n\n    function owner() public virtual returns (address);\n}\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// SPDX-License-Identifier: MIT\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     */\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract AdminAuth {\n\n    using SafeERC20 for ERC20;\n\n    address public owner;\n    address public admin;\n\n    modifier onlyOwner() {\n        require(owner == msg.sender);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\n    /// @param _admin Address of multisig that becomes admin\n    function setAdminByOwner(address _admin) public {\n        require(msg.sender == owner);\n        require(admin == address(0));\n\n        admin = _admin;\n    }\n\n    /// @notice Admin is able to set new admin\n    /// @param _admin Address of multisig that becomes new admin\n    function setAdminByAdmin(address _admin) public {\n        require(msg.sender == admin);\n\n        admin = _admin;\n    }\n\n    /// @notice Admin is able to change owner\n    /// @param _owner Address of new owner\n    function setOwnerByAdmin(address _owner) public {\n        require(msg.sender == admin);\n\n        owner = _owner;\n    }\n\n    /// @notice Destroy the contract\n    function kill() public onlyOwner {\n        selfdestruct(payable(owner));\n    }\n\n    /// @notice  withdraw stuck funds\n    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n            payable(owner).transfer(_amount);\n        } else {\n            ERC20(_token).safeTransfer(owner, _amount);\n        }\n    }\n}\n\n/// @title Contract with the actuall DSProxy permission calls the automation operations\ncontract CompoundMonitorProxy is AdminAuth {\n\n    using SafeERC20 for ERC20;\n\n    uint public CHANGE_PERIOD;\n    address public monitor;\n    address public newMonitor;\n    address public lastMonitor;\n    uint public changeRequestedTimestamp;\n\n    mapping(address => bool) public allowed;\n\n    event MonitorChangeInitiated(address oldMonitor, address newMonitor);\n    event MonitorChangeCanceled();\n    event MonitorChangeFinished(address monitor);\n    event MonitorChangeReverted(address monitor);\n\n    // if someone who is allowed become malicious, owner can't be changed\n    modifier onlyAllowed() {\n        require(allowed[msg.sender] || msg.sender == owner);\n        _;\n    }\n\n    modifier onlyMonitor() {\n        require (msg.sender == monitor);\n        _;\n    }\n\n    constructor(uint _changePeriod) public {\n        CHANGE_PERIOD = _changePeriod * 1 days;\n    }\n\n    /// @notice Only monitor contract is able to call execute on users proxy\n    /// @param _owner Address of cdp owner (users DSProxy address)\n    /// @param _compoundSaverProxy Address of CompoundSaverProxy\n    /// @param _data Data to send to CompoundSaverProxy\n    function callExecute(address _owner, address _compoundSaverProxy, bytes memory _data) public payable onlyMonitor {\n        // execute reverts if calling specific method fails\n        DSProxyInterface(_owner).execute{value: msg.value}(_compoundSaverProxy, _data);\n\n        // return if anything left\n        if (address(this).balance > 0) {\n            msg.sender.transfer(address(this).balance);\n        }\n    }\n\n    /// @notice Allowed users are able to set Monitor contract without any waiting period first time\n    /// @param _monitor Address of Monitor contract\n    function setMonitor(address _monitor) public onlyAllowed {\n        require(monitor == address(0));\n        monitor = _monitor;\n    }\n\n    /// @notice Allowed users are able to start procedure for changing monitor\n    /// @dev after CHANGE_PERIOD needs to call confirmNewMonitor to actually make a change\n    /// @param _newMonitor address of new monitor\n    function changeMonitor(address _newMonitor) public onlyAllowed {\n        require(changeRequestedTimestamp == 0);\n\n        changeRequestedTimestamp = now;\n        lastMonitor = monitor;\n        newMonitor = _newMonitor;\n\n        emit MonitorChangeInitiated(lastMonitor, newMonitor);\n    }\n\n    /// @notice At any point allowed users are able to cancel monitor change\n    function cancelMonitorChange() public onlyAllowed {\n        require(changeRequestedTimestamp > 0);\n\n        changeRequestedTimestamp = 0;\n        newMonitor = address(0);\n\n        emit MonitorChangeCanceled();\n    }\n\n    /// @notice Anyone is able to confirm new monitor after CHANGE_PERIOD if process is started\n    function confirmNewMonitor() public onlyAllowed {\n        require((changeRequestedTimestamp + CHANGE_PERIOD) < now);\n        require(changeRequestedTimestamp != 0);\n        require(newMonitor != address(0));\n\n        monitor = newMonitor;\n        newMonitor = address(0);\n        changeRequestedTimestamp = 0;\n\n        emit MonitorChangeFinished(monitor);\n    }\n\n    /// @notice Its possible to revert monitor to last used monitor\n    function revertMonitor() public onlyAllowed {\n        require(lastMonitor != address(0));\n\n        monitor = lastMonitor;\n\n        emit MonitorChangeReverted(monitor);\n    }\n\n\n    /// @notice Allowed users are able to add new allowed user\n    /// @param _user Address of user that will be allowed\n    function addAllowed(address _user) public onlyAllowed {\n        allowed[_user] = true;\n    }\n\n    /// @notice Allowed users are able to remove allowed user\n    /// @dev owner is always allowed even if someone tries to remove it from allowed mapping\n    /// @param _user Address of allowed user\n    function removeAllowed(address _user) public onlyAllowed {\n        allowed[_user] = false;\n    }\n\n    function setChangePeriod(uint _periodInDays) public onlyAllowed {\n        require(_periodInDays * 1 days > CHANGE_PERIOD);\n\n        CHANGE_PERIOD = _periodInDays * 1 days;\n    }\n\n    /// @notice In case something is left in contract, owner is able to withdraw it\n    /// @param _token address of token to withdraw balance\n    function withdrawToken(address _token) public onlyOwner {\n        uint balance = ERC20(_token).balanceOf(address(this));\n        ERC20(_token).safeTransfer(msg.sender, balance);\n    }\n\n    /// @notice In case something is left in contract, owner is able to withdraw it\n    function withdrawEth() public onlyOwner {\n        uint balance = address(this).balance;\n        msg.sender.transfer(balance);\n    }\n}\n\n/// @title Stores subscription information for Compound automatization\ncontract CompoundSubscriptions is AdminAuth {\n\n    struct CompoundHolder {\n        address user;\n        uint128 minRatio;\n        uint128 maxRatio;\n        uint128 optimalRatioBoost;\n        uint128 optimalRatioRepay;\n        bool boostEnabled;\n    }\n\n    struct SubPosition {\n        uint arrPos;\n        bool subscribed;\n    }\n\n    CompoundHolder[] public subscribers;\n    mapping (address => SubPosition) public subscribersPos;\n\n    uint public changeIndex;\n\n    event Subscribed(address indexed user);\n    event Unsubscribed(address indexed user);\n    event Updated(address indexed user);\n    event ParamUpdates(address indexed user, uint128, uint128, uint128, uint128, bool);\n\n    /// @dev Called by the DSProxy contract which owns the Compound position\n    /// @notice Adds the users Compound poistion in the list of subscriptions so it can be monitored\n    /// @param _minRatio Minimum ratio below which repay is triggered\n    /// @param _maxRatio Maximum ratio after which boost is triggered\n    /// @param _optimalBoost Ratio amount which boost should target\n    /// @param _optimalRepay Ratio amount which repay should target\n    /// @param _boostEnabled Boolean determing if boost is enabled\n    function subscribe(uint128 _minRatio, uint128 _maxRatio, uint128 _optimalBoost, uint128 _optimalRepay, bool _boostEnabled) external {\n\n        // if boost is not enabled, set max ratio to max uint\n        uint128 localMaxRatio = _boostEnabled ? _maxRatio : uint128(-1);\n        require(checkParams(_minRatio, localMaxRatio), \"Must be correct params\");\n\n        SubPosition storage subInfo = subscribersPos[msg.sender];\n\n        CompoundHolder memory subscription = CompoundHolder({\n                minRatio: _minRatio,\n                maxRatio: localMaxRatio,\n                optimalRatioBoost: _optimalBoost,\n                optimalRatioRepay: _optimalRepay,\n                user: msg.sender,\n                boostEnabled: _boostEnabled\n            });\n\n        changeIndex++;\n\n        if (subInfo.subscribed) {\n            subscribers[subInfo.arrPos] = subscription;\n\n            emit Updated(msg.sender);\n            emit ParamUpdates(msg.sender, _minRatio, localMaxRatio, _optimalBoost, _optimalRepay, _boostEnabled);\n        } else {\n            subscribers.push(subscription);\n\n            subInfo.arrPos = subscribers.length - 1;\n            subInfo.subscribed = true;\n\n            emit Subscribed(msg.sender);\n        }\n    }\n\n    /// @notice Called by the users DSProxy\n    /// @dev Owner who subscribed cancels his subscription\n    function unsubscribe() external {\n        _unsubscribe(msg.sender);\n    }\n\n    /// @dev Checks limit if minRatio is bigger than max\n    /// @param _minRatio Minimum ratio, bellow which repay can be triggered\n    /// @param _maxRatio Maximum ratio, over which boost can be triggered\n    /// @return Returns bool if the params are correct\n    function checkParams(uint128 _minRatio, uint128 _maxRatio) internal pure returns (bool) {\n\n        if (_minRatio > _maxRatio) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /// @dev Internal method to remove a subscriber from the list\n    /// @param _user The actual address that owns the Compound position\n    function _unsubscribe(address _user) internal {\n        require(subscribers.length > 0, \"Must have subscribers in the list\");\n\n        SubPosition storage subInfo = subscribersPos[_user];\n\n        require(subInfo.subscribed, \"Must first be subscribed\");\n\n        address lastOwner = subscribers[subscribers.length - 1].user;\n\n        SubPosition storage subInfo2 = subscribersPos[lastOwner];\n        subInfo2.arrPos = subInfo.arrPos;\n\n        subscribers[subInfo.arrPos] = subscribers[subscribers.length - 1];\n        subscribers.pop(); // remove last element and reduce arr length\n\n        changeIndex++;\n        subInfo.subscribed = false;\n        subInfo.arrPos = 0;\n\n        emit Unsubscribed(msg.sender);\n    }\n\n    /// @dev Checks if the user is subscribed\n    /// @param _user The actual address that owns the Compound position\n    /// @return If the user is subscribed\n    function isSubscribed(address _user) public view returns (bool) {\n        SubPosition storage subInfo = subscribersPos[_user];\n\n        return subInfo.subscribed;\n    }\n\n    /// @dev Returns subscribtion information about a user\n    /// @param _user The actual address that owns the Compound position\n    /// @return Subscription information about the user if exists\n    function getHolder(address _user) public view returns (CompoundHolder memory) {\n        SubPosition storage subInfo = subscribersPos[_user];\n\n        return subscribers[subInfo.arrPos];\n    }\n\n    /// @notice Helper method to return all the subscribed CDPs\n    /// @return List of all subscribers\n    function getSubscribers() public view returns (CompoundHolder[] memory) {\n        return subscribers;\n    }\n\n    /// @notice Helper method for the frontend, returns all the subscribed CDPs paginated\n    /// @param _page What page of subscribers you want\n    /// @param _perPage Number of entries per page\n    /// @return List of all subscribers for that page\n    function getSubscribersByPage(uint _page, uint _perPage) public view returns (CompoundHolder[] memory) {\n        CompoundHolder[] memory holders = new CompoundHolder[](_perPage);\n\n        uint start = _page * _perPage;\n        uint end = start + _perPage;\n\n        end = (end > holders.length) ? holders.length : end;\n\n        uint count = 0;\n        for (uint i = start; i < end; i++) {\n            holders[count] = subscribers[i];\n            count++;\n        }\n\n        return holders;\n    }\n\n    ////////////// ADMIN METHODS ///////////////////\n\n    /// @notice Admin function to unsubscribe a CDP\n    /// @param _user The actual address that owns the Compound position\n    function unsubscribeByAdmin(address _user) public onlyOwner {\n        SubPosition storage subInfo = subscribersPos[_user];\n\n        if (subInfo.subscribed) {\n            _unsubscribe(_user);\n        }\n    }\n}\n\ncontract DSMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x / y;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x <= y ? x : y;\n    }\n\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x >= y ? x : y;\n    }\n\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n        return x <= y ? x : y;\n    }\n\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n        return x >= y ? x : y;\n    }\n\n    uint256 constant WAD = 10**18;\n    uint256 constant RAY = 10**27;\n\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\ncontract DefisaverLogger {\n    event LogEvent(\n        address indexed contractAddress,\n        address indexed caller,\n        string indexed logName,\n        bytes data\n    );\n\n    // solhint-disable-next-line func-name-mixedcase\n    function Log(address _contract, address _caller, string memory _logName, bytes memory _data)\n        public\n    {\n        emit LogEvent(_contract, _caller, _logName, _data);\n    }\n}\n\nabstract contract CompoundOracleInterface {\n    function getUnderlyingPrice(address cToken) external view virtual returns (uint);\n}\n\nabstract contract ComptrollerInterface {\n    function enterMarkets(address[] calldata cTokens) external virtual returns (uint256[] memory);\n\n    function exitMarket(address cToken) external virtual returns (uint256);\n\n    function getAssetsIn(address account) external virtual view returns (address[] memory);\n\n    function markets(address account) public virtual view returns (bool, uint256);\n\n    function getAccountLiquidity(address account) external virtual view returns (uint256, uint256, uint256);\n\n    function claimComp(address holder) virtual public;\n}\n\nabstract contract CTokenInterface is ERC20 {\n    function mint(uint256 mintAmount) external virtual returns (uint256);\n\n    function mint() external virtual payable;\n\n    function accrueInterest() public virtual returns (uint);\n\n    function redeem(uint256 redeemTokens) external virtual returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external virtual returns (uint256);\n\n    function borrow(uint256 borrowAmount) external virtual returns (uint256);\n\n    function repayBorrow(uint256 repayAmount) external virtual returns (uint256);\n\n    function repayBorrow() external virtual payable;\n\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external virtual returns (uint256);\n\n    function repayBorrowBehalf(address borrower) external virtual payable;\n\n    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral)\n        external virtual\n        returns (uint256);\n\n    function liquidateBorrow(address borrower, address cTokenCollateral) external virtual payable;\n\n    function exchangeRateCurrent() external virtual returns (uint256);\n\n    function supplyRatePerBlock() external virtual returns (uint256);\n\n    function borrowRatePerBlock() external virtual returns (uint256);\n\n    function totalReserves() external virtual returns (uint256);\n\n    function reserveFactorMantissa() external virtual returns (uint256);\n\n    function borrowBalanceCurrent(address account) external virtual returns (uint256);\n\n    function totalBorrowsCurrent() external virtual returns (uint256);\n\n    function getCash() external virtual returns (uint256);\n\n    function balanceOfUnderlying(address owner) external virtual returns (uint256);\n\n    function underlying() external virtual returns (address);\n\n    function getAccountSnapshot(address account) external virtual view returns (uint, uint, uint, uint);\n}\n\ncontract CarefulMath {\n\n    /**\n     * @dev Possible error codes that we can return\n     */\n    enum MathError {\n        NO_ERROR,\n        DIVISION_BY_ZERO,\n        INTEGER_OVERFLOW,\n        INTEGER_UNDERFLOW\n    }\n\n    /**\n    * @dev Multiplies two numbers, returns an error on overflow.\n    */\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\n        if (a == 0) {\n            return (MathError.NO_ERROR, 0);\n        }\n\n        uint c = a * b;\n\n        if (c / a != b) {\n            return (MathError.INTEGER_OVERFLOW, 0);\n        } else {\n            return (MathError.NO_ERROR, c);\n        }\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\n        if (b == 0) {\n            return (MathError.DIVISION_BY_ZERO, 0);\n        }\n\n        return (MathError.NO_ERROR, a / b);\n    }\n\n    /**\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\n        if (b <= a) {\n            return (MathError.NO_ERROR, a - b);\n        } else {\n            return (MathError.INTEGER_UNDERFLOW, 0);\n        }\n    }\n\n    /**\n    * @dev Adds two numbers, returns an error on overflow.\n    */\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\n        uint c = a + b;\n\n        if (c >= a) {\n            return (MathError.NO_ERROR, c);\n        } else {\n            return (MathError.INTEGER_OVERFLOW, 0);\n        }\n    }\n\n    /**\n    * @dev add a and b and then subtract c\n    */\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\n        (MathError err0, uint sum) = addUInt(a, b);\n\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, 0);\n        }\n\n        return subUInt(sum, c);\n    }\n}\n\ncontract Exponential is CarefulMath {\n    uint constant expScale = 1e18;\n    uint constant halfExpScale = expScale/2;\n    uint constant mantissaOne = expScale;\n\n    struct Exp {\n        uint mantissa;\n    }\n\n    /**\n     * @dev Creates an exponential from numerator and denominator values.\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\n     *            or if `denom` is zero.\n     */\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\n        if (err1 != MathError.NO_ERROR) {\n            return (err1, Exp({mantissa: 0}));\n        }\n\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\n    }\n\n    /**\n     * @dev Adds two exponentials, returning a new exponential.\n     */\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\n\n        return (error, Exp({mantissa: result}));\n    }\n\n    /**\n     * @dev Subtracts two exponentials, returning a new exponential.\n     */\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\n\n        return (error, Exp({mantissa: result}));\n    }\n\n    /**\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\n     */\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\n    }\n\n    /**\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\n     */\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\n        if (err != MathError.NO_ERROR) {\n            return (err, 0);\n        }\n\n        return (MathError.NO_ERROR, truncate(product));\n    }\n\n    /**\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\n     */\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\n        if (err != MathError.NO_ERROR) {\n            return (err, 0);\n        }\n\n        return addUInt(truncate(product), addend);\n    }\n\n    /**\n     * @dev Divide an Exp by a scalar, returning a new Exp.\n     */\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\n    }\n\n    /**\n     * @dev Divide a scalar by an Exp, returning a new Exp.\n     */\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\n        /*\n          We are doing this as:\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\n\n          How it works:\n          Exp = a / b;\n          Scalar = s;\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\n        */\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n        return getExp(numerator, divisor.mantissa);\n    }\n\n    /**\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\n     */\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\n        if (err != MathError.NO_ERROR) {\n            return (err, 0);\n        }\n\n        return (MathError.NO_ERROR, truncate(fraction));\n    }\n\n    /**\n     * @dev Multiplies two exponentials, returning a new exponential.\n     */\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n\n        // We add half the scale before dividing so that we get rounding instead of truncation.\n        //  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\n        if (err1 != MathError.NO_ERROR) {\n            return (err1, Exp({mantissa: 0}));\n        }\n\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\n        assert(err2 == MathError.NO_ERROR);\n\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\n    }\n\n    /**\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\n     */\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\n    }\n\n    /**\n     * @dev Multiplies three exponentials, returning a new exponential.\n     */\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\n        (MathError err, Exp memory ab) = mulExp(a, b);\n        if (err != MathError.NO_ERROR) {\n            return (err, ab);\n        }\n        return mulExp(ab, c);\n    }\n\n    /**\n     * @dev Divides two exponentials, returning a new exponential.\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\n     */\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n        return getExp(a.mantissa, b.mantissa);\n    }\n\n    /**\n     * @dev Truncates the given exp to a whole number value.\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\n     */\n    function truncate(Exp memory exp) pure internal returns (uint) {\n        // Note: We are not using careful math here as we're performing a division that cannot fail\n        return exp.mantissa / expScale;\n    }\n\n    /**\n     * @dev Checks if first Exp is less than second Exp.\n     */\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\n        return left.mantissa < right.mantissa;\n    }\n\n    /**\n     * @dev Checks if left Exp <= right Exp.\n     */\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\n        return left.mantissa <= right.mantissa;\n    }\n\n    /**\n     * @dev Checks if left Exp > right Exp.\n     */\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\n        return left.mantissa > right.mantissa;\n    }\n\n    /**\n     * @dev returns true if Exp is exactly zero\n     */\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\n        return value.mantissa == 0;\n    }\n}\n\ncontract CompoundSafetyRatio is Exponential, DSMath {\n    // solhint-disable-next-line const-name-snakecase\n    ComptrollerInterface public constant comp = ComptrollerInterface(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\n\n    // solhint-disable-next-line const-name-snakecase\n    CompoundOracleInterface public constant oracle = CompoundOracleInterface(0xDDc46a3B076aec7ab3Fc37420A8eDd2959764Ec4);\n\n\n    /// @notice Calcualted the ratio of debt / adjusted collateral\n    /// @param _user Address of the user\n    function getSafetyRatio(address _user) public view returns (uint) {\n        // For each asset the account is in\n        address[] memory assets = comp.getAssetsIn(_user);\n\n        uint sumCollateral = 0;\n        uint sumBorrow = 0;\n\n        for (uint i = 0; i < assets.length; i++) {\n            address asset = assets[i];\n\n            (, uint cTokenBalance, uint borrowBalance, uint exchangeRateMantissa)\n                                        = CTokenInterface(asset).getAccountSnapshot(_user);\n\n            Exp memory oraclePrice;\n\n            if (cTokenBalance != 0 || borrowBalance != 0) {\n                oraclePrice = Exp({mantissa: oracle.getUnderlyingPrice(asset)});\n            }\n\n            // Sum up collateral in Eth\n            if (cTokenBalance != 0) {\n\n                (, uint collFactorMantissa) = comp.markets(address(asset));\n\n                Exp memory collateralFactor = Exp({mantissa: collFactorMantissa});\n                Exp memory exchangeRate = Exp({mantissa: exchangeRateMantissa});\n\n                (, Exp memory tokensToEther) = mulExp3(collateralFactor, exchangeRate, oraclePrice);\n\n                (, sumCollateral) = mulScalarTruncateAddUInt(tokensToEther, cTokenBalance, sumCollateral);\n            }\n\n            // Sum up debt in Eth\n            if (borrowBalance != 0) {\n                (, sumBorrow) = mulScalarTruncateAddUInt(oraclePrice, borrowBalance, sumBorrow);\n            }\n        }\n\n        if (sumBorrow == 0) return uint(-1);\n\n        uint borrowPowerUsed = (sumBorrow * 10**18) / sumCollateral;\n        return wdiv(1e18, borrowPowerUsed);\n    }\n}\n\n/// @title Contract implements logic of calling boost/repay in the automatic system\ncontract CompoundMonitor is AdminAuth, DSMath, CompoundSafetyRatio, GasBurner {\n\n    using SafeERC20 for ERC20;\n\n    enum Method { Boost, Repay }\n\n    uint public REPAY_GAS_TOKEN = 30;\n    uint public BOOST_GAS_TOKEN = 19;\n\n    uint constant public MAX_GAS_PRICE = 80000000000; // 80 gwei\n\n    uint public REPAY_GAS_COST = 2200000;\n    uint public BOOST_GAS_COST = 1500000;\n\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\n    address public constant DEFISAVER_LOGGER = 0x5c55B921f590a89C1Ebe84dF170E655a82b62126;\n\n    CompoundMonitorProxy public compoundMonitorProxy;\n    CompoundSubscriptions public subscriptionsContract;\n    address public compoundFlashLoanTakerAddress;\n\n    DefisaverLogger public logger = DefisaverLogger(DEFISAVER_LOGGER);\n\n    /// @dev Addresses that are able to call methods for repay and boost\n    mapping(address => bool) public approvedCallers;\n\n    modifier onlyApproved() {\n        require(approvedCallers[msg.sender]);\n        _;\n    }\n\n    /// @param _compoundMonitorProxy Proxy contracts that actually is authorized to call DSProxy\n    /// @param _subscriptions Subscriptions contract for Compound positions\n    /// @param _compoundFlashLoanTaker Contract that actually performs Repay/Boost\n    constructor(address _compoundMonitorProxy, address _subscriptions, address _compoundFlashLoanTaker) public {\n        approvedCallers[msg.sender] = true;\n\n        compoundMonitorProxy = CompoundMonitorProxy(_compoundMonitorProxy);\n        subscriptionsContract = CompoundSubscriptions(_subscriptions);\n        compoundFlashLoanTakerAddress = _compoundFlashLoanTaker;\n    }\n\n    /// @notice Bots call this method to repay for user when conditions are met\n    /// @dev If the contract ownes gas token it will try and use it for gas price reduction\n    /// @param _data Amount and exchange data [amount, minPrice, exchangeType, gasCost, 0xPrice]\n    /// @param _addrData cTokens addreses and exchange [cCollAddress, cBorrowAddress, exchangeAddress]\n    /// @param _callData 0x callData\n    /// @param _user The actual address that owns the Compound position\n    function repayFor(\n        uint[5] memory _data, // amount, minPrice, exchangeType, gasCost, 0xPrice\n        address[3] memory _addrData, // cCollAddress, cBorrowAddress, exchangeAddress\n        bytes memory _callData,\n        address _user\n    ) public payable onlyApproved burnGas(REPAY_GAS_TOKEN) {\n\n        (bool isAllowed, uint ratioBefore) = canCall(Method.Repay, _user);\n        require(isAllowed); // check if conditions are met\n\n        _data[3] = calcGasCost(REPAY_GAS_COST);\n\n        compoundMonitorProxy.callExecute{value: msg.value}(\n            _user,\n            compoundFlashLoanTakerAddress,\n            abi.encodeWithSignature(\"repayWithLoan(uint256[5],address[3],bytes)\",\n            _data, _addrData, _callData));\n\n        (bool isGoodRatio, uint ratioAfter) = ratioGoodAfter(Method.Repay, _user);\n        require(isGoodRatio); // check if the after result of the actions is good\n\n        returnEth();\n\n        logger.Log(address(this), _user, \"AutomaticCompoundRepay\", abi.encode(ratioBefore, ratioAfter));\n    }\n\n    /// @notice Bots call this method to boost for user when conditions are met\n    /// @dev If the contract ownes gas token it will try and use it for gas price reduction\n    /// @param _data Amount and exchange data [amount, minPrice, exchangeType, gasCost, 0xPrice]\n    /// @param _addrData cTokens addreses and exchange [cCollAddress, cBorrowAddress, exchangeAddress]\n    /// @param _callData 0x callData\n    /// @param _user The actual address that owns the Compound position\n    function boostFor(\n        uint[5] memory _data, // amount, minPrice, exchangeType, gasCost, 0xPrice\n        address[3] memory _addrData, // cCollAddress, cBorrowAddress, exchangeAddress\n        bytes memory _callData,\n        address _user\n    ) public payable onlyApproved burnGas(BOOST_GAS_TOKEN) {\n\n        (bool isAllowed, uint ratioBefore) = canCall(Method.Boost, _user);\n        require(isAllowed); // check if conditions are met\n\n        _data[3] = calcGasCost(BOOST_GAS_COST);\n\n        compoundMonitorProxy.callExecute{value: msg.value}(\n            _user,\n            compoundFlashLoanTakerAddress,\n            abi.encodeWithSignature(\"boostWithLoan(uint256[5],address[3],bytes)\",\n            _data, _addrData, _callData));\n\n\n        (bool isGoodRatio, uint ratioAfter) = ratioGoodAfter(Method.Boost, _user);\n        require(isGoodRatio);  // check if the after result of the actions is good\n\n        returnEth();\n\n        logger.Log(address(this), _user, \"AutomaticCompoundBoost\", abi.encode(ratioBefore, ratioAfter));\n    }\n\n/******************* INTERNAL METHODS ********************************/\n    function returnEth() internal {\n        // return if some eth left\n        if (address(this).balance > 0) {\n            msg.sender.transfer(address(this).balance);\n        }\n    }\n\n/******************* STATIC METHODS ********************************/\n\n    /// @notice Checks if Boost/Repay could be triggered for the CDP\n    /// @dev Called by MCDMonitor to enforce the min/max check\n    /// @param _method Type of action to be called\n    /// @param _user The actual address that owns the Compound position\n    /// @return Boolean if it can be called and the ratio\n    function canCall(Method _method, address _user) public view returns(bool, uint) {\n        bool subscribed = subscriptionsContract.isSubscribed(_user);\n        CompoundSubscriptions.CompoundHolder memory holder = subscriptionsContract.getHolder(_user);\n\n        // check if cdp is subscribed\n        if (!subscribed) return (false, 0);\n\n        // check if boost and boost allowed\n        if (_method == Method.Boost && !holder.boostEnabled) return (false, 0);\n\n        uint currRatio = getSafetyRatio(_user);\n\n        if (_method == Method.Repay) {\n            return (currRatio < holder.minRatio, currRatio);\n        } else if (_method == Method.Boost) {\n            return (currRatio > holder.maxRatio, currRatio);\n        }\n    }\n\n    /// @dev After the Boost/Repay check if the ratio doesn't trigger another call\n    /// @param _method Type of action to be called\n    /// @param _user The actual address that owns the Compound position\n    /// @return Boolean if the recent action preformed correctly and the ratio\n    function ratioGoodAfter(Method _method, address _user) public view returns(bool, uint) {\n        CompoundSubscriptions.CompoundHolder memory holder;\n\n        holder= subscriptionsContract.getHolder(_user);\n\n        uint currRatio = getSafetyRatio(_user);\n\n        if (_method == Method.Repay) {\n            return (currRatio < holder.maxRatio, currRatio);\n        } else if (_method == Method.Boost) {\n            return (currRatio > holder.minRatio, currRatio);\n        }\n    }\n\n    /// @notice Calculates gas cost (in Eth) of tx\n    /// @dev Gas price is limited to MAX_GAS_PRICE to prevent attack of draining user CDP\n    /// @param _gasAmount Amount of gas used for the tx\n    function calcGasCost(uint _gasAmount) public view returns (uint) {\n        uint gasPrice = tx.gasprice <= MAX_GAS_PRICE ? tx.gasprice : MAX_GAS_PRICE;\n\n        return mul(gasPrice, _gasAmount);\n    }\n\n/******************* OWNER ONLY OPERATIONS ********************************/\n\n    /// @notice Allows owner to change gas cost for boost operation, but only up to 3 millions\n    /// @param _gasCost New gas cost for boost method\n    function changeBoostGasCost(uint _gasCost) public onlyOwner {\n        require(_gasCost < 3000000);\n\n        BOOST_GAS_COST = _gasCost;\n    }\n\n    /// @notice Allows owner to change gas cost for repay operation, but only up to 3 millions\n    /// @param _gasCost New gas cost for repay method\n    function changeRepayGasCost(uint _gasCost) public onlyOwner {\n        require(_gasCost < 3000000);\n\n        REPAY_GAS_COST = _gasCost;\n    }\n\n    /// @notice Adds a new bot address which will be able to call repay/boost\n    /// @param _caller Bot address\n    function addCaller(address _caller) public onlyOwner {\n        approvedCallers[_caller] = true;\n    }\n\n    /// @notice Removes a bot address so it can't call repay/boost\n    /// @param _caller Bot address\n    function removeCaller(address _caller) public onlyOwner {\n        approvedCallers[_caller] = false;\n    }\n\n    /// @notice If any tokens gets stuck in the contract owner can withdraw it\n    /// @param _tokenAddress Address of the ERC20 token\n    /// @param _to Address of the receiver\n    /// @param _amount The amount to be sent\n    function transferERC20(address _tokenAddress, address _to, uint _amount) public onlyOwner {\n        ERC20(_tokenAddress).safeTransfer(_to, _amount);\n    }\n\n    /// @notice If any Eth gets stuck in the contract owner can withdraw it\n    /// @param _to Address of the receiver\n    /// @param _amount The amount to be sent\n    function transferEth(address payable _to, uint _amount) public onlyOwner {\n        _to.transfer(_amount);\n    }\n}"
    }
  }
}