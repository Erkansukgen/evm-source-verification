{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/GasToken1.sol": {
      "content": "pragma solidity ^0.6.12;\n\ninterface DAO {\n    function advance() external;\n}\n\ninterface Token {\n    function balanceOf(address) external view returns(uint256);\n    function transfer(address, uint256) external;\n}\n\ncontract GasToken {\n    address private owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function call(address root) public {\n        require(msg.sender == owner, \"ERROR\");\n\n        DAO rootDAO = DAO(root);\n        rootDAO.advance();\n    }\n    \n    function transfer(address d) public {\n        require(msg.sender == owner, \"ERROR\");\n        \n        Token rootToken = Token(d);\n        rootToken.transfer(owner, rootToken.balanceOf(address(this)));\n    }\n}\n"
    }
  }
}