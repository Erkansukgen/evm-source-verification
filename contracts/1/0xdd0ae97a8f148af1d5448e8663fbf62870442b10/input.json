{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/moapog.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2020-12-20\n*/\n\n/** \n\n\n█▀▄▀█ █▀█ ▀█▀ █░█ █▀▀ █▀█   █▀█ █▀▀   ▄▀█ █░░ █░░   █▀█ █▀█ █▄░█ ▀█ █ █▀\n█░▀░█ █▄█ ░█░ █▀█ ██▄ █▀▄   █▄█ █▀░   █▀█ █▄▄ █▄▄   █▀▀ █▄█ █░▀█ █▄ █ ▄█\n\ninfo: 𝕀𝕋𝕊 𝕁𝕌𝕊𝕋 𝔸 ℙ𝕆ℕℤ𝕀 𝔹ℝ𝕆\n\n\n*/\n\npragma solidity 0.6.12;\n\n// SPDX-License-Identifier: MIT\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this;\n        return msg.data;\n    }\n}\n\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\nlibrary Address {\n    \n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) internal _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n\ninterface IUniswapSync {\n    function sync() external;\n}\n\ncontract MOAP is ERC20, Ownable {\n    \n    using SafeMath for uint256;\n\n    event LogRebase(uint256 indexed _epoch, uint256 totalSupply);\n    event LogUserBanStatusUpdated(address user, bool banned);\n\n    modifier validRecipient(address to) {\n        require(to != address(0x0));\n        require(to != address(this));\n        _;\n    }\n\n    uint256 private constant DECIMALS = 18;\n    uint256 private constant MAX_UINT256 = ~uint256(0);\n    uint256 private constant INITIAL_SUPPLY = 38000 * 10**DECIMALS;\n    uint256 private constant INITIAL_SHARES = (MAX_UINT256) - (MAX_UINT256 % INITIAL_SUPPLY);\n\n    uint256 private _totalShares;\n    uint256 private _totalSupply;\n    address public _moapUniswapLPContract;\n\n    uint256 private _epoch; \n    uint256 public _MoapRebasePercent = 50; \n    uint256 public _transferFee = 5;\n    uint256 private _moapFeeTotal;            \n    \n    mapping(address => uint256) private _shareBalances;\n    mapping (address => uint256) private _moapBalances;    \n    mapping (address => mapping (address => uint256)) private _allowedMOAP;\n\n    uint256 public antiJeet;\n    bool public muteTransfers;\n    bool public PauseRebases;\n\n    mapping(address => bool) public transferPauseExemptList;\n\n    mapping (address => bool) private _isExcluded;\n    address[] private _excluded;\n\n\n    constructor() public ERC20(\"MOAP\", \"MOAP\") { \n        _totalShares = INITIAL_SHARES;\n        _totalSupply = INITIAL_SUPPLY;\n        _shareBalances[owner()] = _totalShares;\n\n        emit Transfer(address(0x0), owner(), _totalSupply);\n  }\n  \n\n    function setJeetTimer()\n        public\n        onlyOwner\n    {\n        antiJeet = now;\n    }\n\n    function MuteTransfers(bool _muteTransfers)\n        public\n        onlyOwner\n    {\n        muteTransfers = _muteTransfers;\n    }\n\n    function setTransferPauseExempt(address user, bool exempt)\n        public\n        onlyOwner\n    {\n        if (exempt) {\n            transferPauseExemptList[user] = true;\n        } else {\n            delete transferPauseExemptList[user];\n        }\n    }\n\n    function SetPauseRebases(bool _pauseRebases)\n        public\n        onlyOwner\n    {\n        PauseRebases = _pauseRebases;\n    }\n\n    function MoapRebasePercent (uint256 _moaprebasepercent)\n        public\n        onlyOwner\n    {\n        _MoapRebasePercent = _moaprebasepercent;\n    }\n    \n    function setTransferFee(uint256 _newTransferFee)\n        public\n        onlyOwner\n    {\n        _transferFee = _newTransferFee;\n    }\n    \n    function setLPContract(address _setlpcontract)\n        public\n        onlyOwner\n    {\n        _setlpcontract = _setlpcontract;\n    }\n    \n    function rebase()\n        public\n        onlyOwner\n        returns (uint256)\n    {\n        require(!PauseRebases, \"Rebases are paused\");\n        \n        _totalSupply = _totalSupply.add(_totalSupply.mul(_MoapRebasePercent).div(100));\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_moapBalances[_excluded[i]] > 0) {\n                _moapBalances[_excluded[i]] = _moapBalances[_excluded[i]].sub(_moapBalances[_excluded[i]].mul(_MoapRebasePercent).div(100));\n            }\n        }\n}\n\n    function getTotalShares()\n        public\n        view\n        returns (uint256)\n    {\n        return _totalShares;\n    }\n\n    function sharesOf(address user)\n        public\n        view\n        returns (uint256)\n    {\n        return _shareBalances[user];\n    }\n\n    function totalSupply()\n        public\n        override\n        view\n        returns (uint256)\n    {\n        return _totalSupply;\n    }\n    \n    function transfer(address recipient, uint256 amount) \n        public \n        override(ERC20) \n        validRecipient(recipient)\n        returns (bool) \n    {\n        require(!muteTransfers || transferPauseExemptList[msg.sender], \"muted\");\n        require(now.sub(antiJeet) >= 300 || amount <= 49 * 10**DECIMALS);\n        \n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner_, address spender)\n        public\n        override\n        view\n        returns (uint256)\n    {\n        return _allowedMOAP[owner_][spender];\n    }\n\n    function approve(address spender, uint256 value)\n        public\n        override\n        returns (bool)\n    {\n        require(!muteTransfers || transferPauseExemptList[msg.sender], \"muted\");\n\n        _allowedMOAP[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n    \n    function transferFrom(address sender, address recipient, uint256 amount) \n        public \n        override \n        validRecipient(recipient)\n        returns (bool) \n    {\n        require(!muteTransfers || transferPauseExemptList[msg.sender], \"muted\");\n        \n        _transfer(sender, recipient, amount);\n        approve(sender, _allowedMOAP[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        override\n        returns (bool)\n    {\n        require(!muteTransfers || transferPauseExemptList[msg.sender], \"muted\");\n\n        _allowedMOAP[msg.sender][spender] = _allowedMOAP[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowedMOAP[msg.sender][spender]);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        override\n        returns (bool)\n    {\n        require(!muteTransfers || transferPauseExemptList[msg.sender], \"muted\");\n\n        uint256 oldValue = _allowedMOAP[msg.sender][spender];\n        if (subtractedValue >= oldValue) {\n            _allowedMOAP[msg.sender][spender] = 0;\n        } else {\n            _allowedMOAP[msg.sender][spender] = oldValue.sub(subtractedValue);\n        }\n        emit Approval(msg.sender, spender, _allowedMOAP[msg.sender][spender]);\n        return true;\n    }\n    \n    \n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _moapBalances[account];\n        return tokenFromReflection(_shareBalances[account]);\n    }\n\n    function isExcluded(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function totalFees() public view returns (uint256) {\n        return _moapFeeTotal;\n    }\n\n    function reflect(uint256 moapAmount) public {\n        address sender = _msgSender();\n        require(!_isExcluded[sender], \"Excluded addresses cant call this function\");\n        (uint256 shareAmount,,,,) = _getValues(moapAmount);\n        _shareBalances[sender] = _shareBalances[sender].sub(shareAmount);\n        _totalShares = _totalShares.sub(shareAmount);\n        _moapFeeTotal = _moapFeeTotal.add(moapAmount);\n    }\n\n    function reflectionFromToken(uint256 moapAmount, bool deductTransferFee) public view returns(uint256) {\n        require(moapAmount <= _totalSupply, \"Amount must be less than supply\");\n        if (!deductTransferFee) {\n            (uint256 shareAmount,,,,) = _getValues(moapAmount);\n            return shareAmount;\n        } else {\n            (,uint256 shareTransferAmount,,,) = _getValues(moapAmount);\n            return shareTransferAmount;\n        }\n    }\n\n    function tokenFromReflection(uint256 shareAmount) public view returns(uint256) {\n        require(shareAmount <= _totalShares, \"Amount must be less than _totalShares\");\n        uint256 currentRate = _getRateForReflection();\n        return shareAmount.div(currentRate);\n    }\n\n    function excludeAccount(address account) external onlyOwner() {\n        require(!_isExcluded[account], \"Account is already excluded\");\n        if(_shareBalances[account] > 0) {\n            _moapBalances[account] = tokenFromReflection(_shareBalances[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n    function includeAccount(address account) external onlyOwner() {\n        require(_isExcluded[account], \"Account is already included\");\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _moapBalances[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n    \n    function _transfer(address sender, address recipient, uint256 amount) internal override(ERC20) {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n            _transferFromExcluded(sender, recipient, amount);\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferToExcluded(sender, recipient, amount);\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n            _transferStandard(sender, recipient, amount);\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferBothExcluded(sender, recipient, amount);\n        } else {\n            _transferStandard(sender, recipient, amount);\n        }\n    }\n\n    function _transferStandard(address sender, address recipient, uint256 moapAmount) private {\n        (uint256 shareAmount, uint256 shareTransferAmount, uint256 shareFee, uint256 moapTransferAmount, uint256 moapFee) = _getValues(moapAmount);\n        _shareBalances[sender] = _shareBalances[sender].sub(shareAmount);\n        _shareBalances[recipient] = _shareBalances[recipient].add(shareTransferAmount);       \n        _reflectFee(shareFee, moapFee);\n        emit Transfer(sender, recipient, moapTransferAmount);\n    }\n\n    function _transferToExcluded(address sender, address recipient, uint256 moapAmount) private {\n        (uint256 shareAmount, uint256 shareTransferAmount, uint256 shareFee, uint256 moapTransferAmount, uint256 moapFee) = _getValues(moapAmount);\n        _shareBalances[sender] = _shareBalances[sender].sub(shareAmount);\n        _moapBalances[recipient] = _moapBalances[recipient].add(moapTransferAmount);\n        _shareBalances[recipient] = _shareBalances[recipient].add(shareTransferAmount);           \n        _reflectFee(shareFee, moapFee);\n        emit Transfer(sender, recipient, moapTransferAmount);\n    }\n\n    function _transferFromExcluded(address sender, address recipient, uint256 moapAmount) private {\n        (uint256 shareAmount, uint256 shareTransferAmount, uint256 shareFee, uint256 moapTransferAmount, uint256 moapFee) = _getValues(moapAmount);\n        _moapBalances[sender] = _moapBalances[sender].sub(moapAmount);\n        _shareBalances[sender] = _shareBalances[sender].sub(shareAmount);\n        _shareBalances[recipient] = _shareBalances[recipient].add(shareTransferAmount);   \n        _reflectFee(shareFee, moapFee);\n        emit Transfer(sender, recipient, moapTransferAmount);\n    }\n\n    function _transferBothExcluded(address sender, address recipient, uint256 moapAmount) private {\n        (uint256 shareAmount, uint256 shareTransferAmount, uint256 shareFee, uint256 moapTransferAmount, uint256 moapFee) = _getValues(moapAmount);\n        _moapBalances[sender] = _moapBalances[sender].sub(moapAmount);\n        _shareBalances[sender] = _shareBalances[sender].sub(shareAmount);\n        _moapBalances[recipient] = _moapBalances[recipient].add(moapTransferAmount);\n        _shareBalances[recipient] = _shareBalances[recipient].add(shareTransferAmount);        \n        _reflectFee(shareFee, moapFee);\n        emit Transfer(sender, recipient, moapTransferAmount);\n    }\n\n    function _reflectFee(uint256 shareFee, uint256 moapFee) private {\n        _totalShares = _totalShares.sub(shareFee);\n        _moapFeeTotal = _moapFeeTotal.add(moapFee);\n    }\n\n    function _getValues(uint256 moapAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\n        (uint256 moapTransferAmount, uint256 moapFee) = _getTValues(moapAmount);\n        uint256 currentRate =  _getRateForReflection();\n        (uint256 shareAmount, uint256 shareTransferAmount, uint256 shareFee) = _getRValues(moapAmount, moapFee, currentRate);\n        return (shareAmount, shareTransferAmount, shareFee, moapTransferAmount, moapFee);\n    }\n\n    function _getTValues(uint256 moapAmount) private view returns (uint256, uint256) {\n        uint256 moapFee = moapAmount.div(100).mul(_transferFee);\n        uint256 moapTransferAmount = moapAmount.sub(moapFee);\n        return (moapTransferAmount, moapFee);\n    }\n\n    function _getRValues(uint256 moapAmount, uint256 moapFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n        uint256 shareAmount = moapAmount.mul(currentRate);\n        uint256 shareFee = moapFee.mul(currentRate);\n        uint256 shareTransferAmount = shareAmount.sub(shareFee);\n        return (shareAmount, shareTransferAmount, shareFee);\n    }\n\n    function _getRateForReflection() private view returns(uint256) {\n        (uint256 shareSupply, uint256 moapSupply) = _getCurrentSupplyForReflection();\n        return shareSupply.div(moapSupply);\n    }\n\n    function _getCurrentSupplyForReflection() private view returns(uint256, uint256) {\n        uint256 shareSupply = _totalShares;\n        uint256 moapSupply = _totalSupply;      \n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_shareBalances[_excluded[i]] > shareSupply || _moapBalances[_excluded[i]] > moapSupply) return (_totalShares, _totalSupply);\n            shareSupply = shareSupply.sub(_shareBalances[_excluded[i]]);\n            moapSupply = moapSupply.sub(_moapBalances[_excluded[i]]);\n        }\n        if (shareSupply < _totalShares.div(_totalSupply)) return (_totalShares, _totalSupply);\n        return (shareSupply, moapSupply);\n    }\n}"
    }
  }
}