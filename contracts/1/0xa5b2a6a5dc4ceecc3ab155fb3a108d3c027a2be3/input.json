{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/aaaaaaaaaaaaa.sol": {
      "content": "pragma solidity 0.7.1;\n//  mainnet 0x2a1c5eafc10aa9fb4080d9841a117ecbcfa847f1\n// kyber https://developer.kyber.network/docs/API_ABI-KyberNetworkProxy/\n// balancer https://soliditydeveloper.com/balancer\nimport \"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\";\nimport \"https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Pair.sol\";\n\n// example 0x906681829b1b89b4d5b4907dc64de5db1d367311\n// https://kovan.etherscan.io/address/0x906681829b1b89b4d5b4907dc64de5db1d367311#writeContract\n// getSwapFee\n// getspotprice\n// approve ->\n// swapExactAmountIn tokenaddress tokenamountin tokenoutaddress minamountout maxprice\n// getBalance tokenaddress\n\ninterface ERC20 {\n    function approve(address _spender, uint _value)  external returns (bool success);\n    function transfer(address to, uint tokens) external returns (bool success);\n    function balanceOf(address tokenOwner) external  returns (uint balance);\n    function deposit() external payable;\n    function withdraw(uint) external;\n    function allowance(address, address) external returns (uint);\n\n}\n\ninterface IFreeFromUpTo {\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n}\n\n\ncontract BalancerUniSushi {\n  address internal constant UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D ;\n  address internal constant UNISWAP_FACTORY_ADDRESS =  0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n  address internal constant SUSHI_ROUTER_ADDRESS = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F ;\n  address internal constant SUSHI_FACTORY_ADDRESS =  0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac;\n\n\n  IUniswapV2Router02 uniswapRouter;\n    IUniswapV2Router02 public sushiRouter;\n\n  IUniswapV2Factory uniswapFactory;\n  IUniswapV2Factory sushiFactory;\n  address internal WETH_Address;\n\n    \n    address  internal  owner;\nconstructor() { \n    owner= msg.sender;\n    uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\n    uniswapFactory = IUniswapV2Factory(UNISWAP_FACTORY_ADDRESS);\n    sushiRouter = IUniswapV2Router02(SUSHI_ROUTER_ADDRESS);\n    sushiFactory = IUniswapV2Factory(SUSHI_FACTORY_ADDRESS);\n\n    WETH_Address = uniswapRouter.WETH();\n\n}\n\nmodifier onlyOwner() {\n  if ( owner  == msg.sender) _;\n}\n\nIFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n\nmodifier discountCHI {\n    uint256 gasStart = gasleft();\n    _;\n    uint256 gasSpent = uint(21000) + gasStart - gasleft() + uint(16) * msg.data.length;\n    chi.freeFromUpTo(address(this), (gasSpent + 14154) / 41947);\n}\n\n  function withdrawETHAndTokens() public onlyOwner{\n        ERC20 WETH = ERC20(WETH_Address);\n        uint wethBalance = WETH.balanceOf(address(this));\n\n    if (wethBalance > 0) {\n        // refund leftover ETH\n      WETH.transfer( msg.sender, WETH.balanceOf(address(this)));\n\n    }\n\n       // WETH.transfer( msg.sender, WETH.balanceOf(address(this)));\n        msg.sender.send(address(this).balance);\n    }\n\n    function withdrawExactETH(uint Am) public onlyOwner discountCHI{\n\n      msg.sender.send(Am);\n    }\n\n  \n\n    function withdrawExactToken(address me) public onlyOwner discountCHI{\n\n     ERC20 SendMe = ERC20(me);\n\n\n     SendMe.transfer( msg.sender, SendMe.balanceOf(address(this)));\n        //require(success, \"ERR_ETH_FAILED\");\n    \n       // WETH.transfer( msg.sender, WETH.balanceOf(address(this)));\n    }\n\n\n\n    function convertUni(uint Amount, uint PairNo, uint MinAmountOut, uint _FirstOrSecondOfPair) public onlyOwner discountCHI{\n  \n    address Pair = uniswapFactory.allPairs(PairNo);\n    IUniswapV2Pair uniswapPair = IUniswapV2Pair(Pair);\n    address buyTokenAddress; \n\n    if (_FirstOrSecondOfPair == 0) {\n         buyTokenAddress = uniswapPair.token0();\n      }\n      else if (_FirstOrSecondOfPair == 1){\n        buyTokenAddress = uniswapPair.token1();\n      }    \n      \n\n\n    uint deadline = block.timestamp + 15; // using 'now' for convenience, for mainnet pass deadline from frontend!\n    ERC20 TokenToBuy = ERC20(buyTokenAddress);\n    address [] memory addresses0 = new address[](2); // A -> B\n    addresses0[0] = WETH_Address;\n    addresses0[1] = buyTokenAddress;\n    uint256 [] memory amounts = getPriceFromOracleActual(addresses0, Amount );\n    uint256 resultingTokens = amounts[1];\n    require(resultingTokens > MinAmountOut, \"Brah\");\n\n\n    uniswapRouter.swapExactETHForTokens{ value: Amount }(resultingTokens-1, getPathForTwoTokens(WETH_Address, buyTokenAddress ), address(this), deadline);\n    }\n\n\n    function convertBackUni(uint PairNo, uint _FirstOrSecondOfPair) public onlyOwner discountCHI{\n    \n    address Pair = uniswapFactory.allPairs(PairNo);\n    IUniswapV2Pair  uniswapPair = IUniswapV2Pair(Pair);\n    address sellTokenAddress; \n\n\n    if (_FirstOrSecondOfPair == 0) {\n         sellTokenAddress = uniswapPair.token0();\n      }\n      else if (_FirstOrSecondOfPair == 1){\n        sellTokenAddress = uniswapPair.token1();\n      }    \n    ERC20 TokenToSell = ERC20(sellTokenAddress);\n    uint MyBalance = TokenToSell.balanceOf(address(this));\n    require(MyBalance > 0, \"Brah\");\n\n    \n    uint deadline = block.timestamp + 15; // using 'now' for convenience, for mainnet pass deadline from frontend!\n    address [] memory addresses0 = new address[](2); // A -> B\n    addresses0[0] = sellTokenAddress;\n    addresses0[1] = WETH_Address;\n    uint256 [] memory amounts = getPriceFromOracleActual(addresses0, MyBalance );\n    uint256 resultingWETH = amounts[1];\n\n    TokenToSell.approve(address(uniswapRouter), type(uint).max);\n    uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(MyBalance, \n      resultingWETH-1, \n      getPathForTwoTokens(sellTokenAddress,WETH_Address),\n      address(this), \n      deadline);\n  }\n\n    function convertSushi(uint Amount, uint PairNo, uint MinAmountOut, uint _FirstOrSecondOfPair) public onlyOwner discountCHI{\n  \n    address Pair = sushiFactory.allPairs(PairNo);\n    IUniswapV2Pair uniswapPair = IUniswapV2Pair(Pair);\n    address buyTokenAddress; \n\n    if (_FirstOrSecondOfPair == 0) {\n         buyTokenAddress = uniswapPair.token0();\n      }\n      else if (_FirstOrSecondOfPair == 1){\n        buyTokenAddress = uniswapPair.token1();\n      }    \n      \n\n\n    uint deadline = block.timestamp + 15; // using 'now' for convenience, for mainnet pass deadline from frontend!\n    ERC20 TokenToBuy = ERC20(buyTokenAddress);\n    address [] memory addresses0 = new address[](2); // A -> B\n    addresses0[0] = WETH_Address;\n    addresses0[1] = buyTokenAddress;\n    uint256 [] memory amounts = getPriceFromOracleActual(addresses0, Amount );\n    uint256 resultingTokens = amounts[1];\n    require(resultingTokens > MinAmountOut, \"Brah\");\n\n    sushiRouter.swapExactETHForTokens{ value: Amount }(resultingTokens-1, getPathForTwoTokens(WETH_Address, buyTokenAddress ), address(this), deadline);\n    }\n\n   function convertBackSushi(uint PairNo, uint _FirstOrSecondOfPair) public onlyOwner discountCHI{\n    \n    address Pair = sushiFactory.allPairs(PairNo);\n    IUniswapV2Pair  uniswapPair = IUniswapV2Pair(Pair);\n    address sellTokenAddress; \n\n    if (_FirstOrSecondOfPair == 0) {\n         sellTokenAddress = uniswapPair.token0();\n      }\n      else if (_FirstOrSecondOfPair == 1){\n        sellTokenAddress = uniswapPair.token1();\n      }    \n      \n    \n    uint deadline = block.timestamp + 15; // using 'now' for convenience, for mainnet pass deadline from frontend!\n    ERC20 TokenToSell = ERC20(sellTokenAddress);\n    address [] memory addresses0 = new address[](2); // A -> B\n    addresses0[0] = sellTokenAddress;\n    addresses0[1] = WETH_Address;\n    uint MyBalance = TokenToSell.balanceOf(address(this));\n    require(MyBalance > 0, \"Brah\");\n    \n    uint256 [] memory amounts = getPriceFromOracleActual(addresses0, MyBalance );\n    uint256 resultingWETH = amounts[1];\n\n    TokenToSell.approve(address(uniswapRouter), type(uint).max);\n    sushiRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(MyBalance, \n      resultingWETH-1, \n      getPathForTwoTokens(sellTokenAddress,WETH_Address),\n      address(this), \n      deadline);\n  }\n\n    function getPriceFromOracleActual(address  [] memory theAddresses, uint amount) public view returns (uint256[] memory amounts1){\n        uint256 [] memory amounts = uniswapRouter.getAmountsOut(amount,theAddresses );\n        return amounts;\n    }\n      \n\n    // refund leftover ETH to user\n //   (bool success,) = msg.sender.call{ value: address(this).balance }(\"\");\n //   require(success, \"refund failed\");\n  \n   \n   // uint256 currentTokenBalance = WETH.balanceOf(address(this));\n   // WETH.transfer(msg.sender, currentTokenBalance);\n  \n  \n  \n  \n\n // function getEstimatedETHforDAI(uint daiAmount) public view returns (uint[] memory) {\n //   return uniswapRouter.getAmountsIn(daiAmount, getPathForTokens(uniswapRouter.WETH(),uniswapRouter.WETH()));\n // }\n\n  function getPathForTwoTokens(address add1, address add2) private view returns (address[] memory) {\n    address[] memory path = new address[](2);\n//    path[0] = uniswapRouter.WETH();\n    path[0] = add1;\n    path[1] = add2;\n    return path;\n  }\n  \n\n  // important to receive ETH\n  receive() external payable {}\n}"
    },
    "https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    }
  }
}