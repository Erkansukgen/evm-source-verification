{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "SwapCalculatorBase.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity >=0.6.0 <0.8.0; // use 0.6.12 to compile this file\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"
    },
    "SwapPriceCalculatorInterface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ISwapPriceCalculator\r\n{\r\n    function calc(uint256 receivedEthAmount,\r\n                  uint256 expectedTokensAmount,\r\n                  uint16  slippage,\r\n                  uint256 ethReserve,\r\n                  uint256 tokensSold,\r\n                  bool \t  excludeFee) external view returns (uint256 actualTokensAmount,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t uint256 ethFeeAdd,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t uint256 actualEthAmount);\r\n}"
    },
    "browser/SwapPriceCalculator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.6.12;\r\n\r\nimport \"SwapCalculatorBase.sol\";\r\nimport \"SwapPriceCalculatorInterface.sol\";\r\n\r\ncontract SwapPriceCalculator is ISwapPriceCalculator\r\n{\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 private xMax;\r\n    uint256 private yMax;\r\n    uint256 private startPrice;\r\n    uint256 private targetEth;\r\n    uint256 private steps;\r\n    uint256 private xStep;\r\n    uint256 private priceStep;\r\n    uint256 private constant DECIMALS = 10**18;\r\n    \r\n    constructor(uint256 _xMax, uint256 _yMax, uint256 _startPrice, uint256 _targetEth, uint32 _steps) public\r\n    {\r\n        xMax = _xMax;\r\n        yMax = _yMax;\r\n        startPrice = _startPrice;\r\n        targetEth = _targetEth;\r\n        steps = _steps;\r\n        \r\n        xStep = xMax / steps;\r\n        priceStep = (yMax.sub(startPrice)) / steps;\r\n        \r\n        require(xMax > 0 && yMax > 0 && startPrice > 0 && targetEth > 0 && xStep > 0 && priceStep > 0 && steps <= 1000);\r\n    }\r\n    \r\n    function getState() external view returns (uint256 xMax_,\r\n                                               uint256 yMax_,\r\n                                               uint256 startPrice_,\r\n                                               uint256 targetEth_,\r\n                                               uint256 xStep_,\r\n                                               uint256 priceStep_)\r\n    {\r\n        xMax_ = xMax;\r\n        yMax_ = yMax;\r\n        startPrice_ = startPrice;\r\n        targetEth_ = targetEth;\r\n        xStep_ = xStep;\r\n        priceStep_ = priceStep;\r\n    }\r\n\r\n    function calc(uint256 _receivedEthAmount,\r\n                  uint256 _expectedTokensAmount,\r\n                  uint16  _slippage,\r\n                  uint256 _ethReserve,\r\n                  uint256 _tokensSold,\r\n                  bool _excludeFee) external view override returns (uint256 actualTokensAmount_,\r\n                                                                    uint256 ethFeeAdd_,\r\n                                                                    uint256 actualEthAmount_)\r\n    {\r\n        require(_receivedEthAmount > 0, \"ERR_ZERO_RECEIVED_ETH\");\r\n        \r\n        actualEthAmount_ = _receivedEthAmount;\r\n        \r\n        if(!_excludeFee)\r\n        {\r\n            ethFeeAdd_ = _receivedEthAmount.mul(3).div(1000);\r\n            _receivedEthAmount = _receivedEthAmount.sub(ethFeeAdd_);\r\n        }\r\n        \r\n        if(targetEth.sub(_ethReserve) != 0 && _receivedEthAmount >= targetEth.sub(_ethReserve))\r\n        {\r\n            return (xMax.sub(_tokensSold), ethFeeAdd_, ethFeeAdd_.add(targetEth.sub(_ethReserve)));\r\n        }\r\n\r\n        uint256 currentStep = _tokensSold.div(xStep);\r\n        uint256 tokensLeftOnThisStep;\r\n        uint256 ethsLeftOnThisStep;\r\n        uint256 ethsLeftToSell = _receivedEthAmount;\r\n        while(ethsLeftToSell != 0) // anti-pattern?\r\n        {\r\n            tokensLeftOnThisStep = xStep.mul(currentStep + 1).sub(_tokensSold);\r\n            ethsLeftOnThisStep = currentStepPrice(currentStep).mul(tokensLeftOnThisStep).div(DECIMALS);\r\n            if(ethsLeftOnThisStep >= ethsLeftToSell) \r\n            {\r\n                actualTokensAmount_ = actualTokensAmount_.add(ethsLeftToSell.mul(DECIMALS).div(currentStepPrice(currentStep)));\r\n                ethsLeftToSell = 0;\r\n            }\r\n            else\r\n            {\r\n                actualTokensAmount_ = actualTokensAmount_.add(tokensLeftOnThisStep);\r\n                _ethReserve = _ethReserve.add(ethsLeftOnThisStep);\r\n                _tokensSold = _tokensSold.add(tokensLeftOnThisStep);\r\n                ethsLeftToSell = ethsLeftToSell.sub(ethsLeftOnThisStep);\r\n                ++currentStep;\r\n            }\r\n        }\r\n        \r\n        if(_expectedTokensAmount == 0)\r\n            return (actualTokensAmount_, ethFeeAdd_, actualEthAmount_);\r\n        \r\n        require((actualTokensAmount_ >= _expectedTokensAmount)\r\n                || (uint256(1000).mul(_expectedTokensAmount.sub(actualTokensAmount_)) <= _expectedTokensAmount.mul(_slippage)),\r\n                \"ERR_SLIPPAGE\");\r\n    }\r\n    \r\n    function currentStepPrice(uint256 _currentStep) private view returns (uint256) \r\n    {\r\n        return startPrice.add(priceStep.mul(_currentStep));\r\n    }\r\n    \r\n    //////////// debug\r\n    \r\n    function tokensLeftOnThisStep(uint256 _currentStep, uint256 _tokensSold) public view returns (uint256)\r\n    {\r\n        return xStep.mul(_currentStep + 1).sub(_tokensSold);\r\n    }\r\n    \r\n    function ethLeftOnThisStep(uint256 _currentStep) external view returns (uint256 actualEthAmount_)\r\n    {\r\n        uint32 step = 0;\r\n        while(step <= _currentStep)\r\n        {\r\n                actualEthAmount_ = actualEthAmount_.add(currentStepPrice(step).mul(xStep));\r\n                step = step + 1;\r\n        }\r\n        actualEthAmount_ = actualEthAmount_.div(DECIMALS);\r\n    }\r\n}"
    }
  }
}