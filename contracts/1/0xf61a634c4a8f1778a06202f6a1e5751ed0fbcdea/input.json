{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Rightshare.sol":{"content":"// SPDX-License-Identifier: https://github.com/lendroidproject/Rightshare-contracts/blob/master/LICENSE.md\n\n\n// File: openzeppelin-solidity/contracts/utils/Address.sol\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\n\npragma solidity ^0.6.2;\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transfered from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\n\npragma solidity ^0.6.2;\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\n\npragma solidity ^0.6.2;\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\n    external returns (bytes4);\n}\n\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\n\npragma solidity ^0.6.0;\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\ncontract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/utils/EnumerableSet.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n * (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n\n// File: openzeppelin-solidity/contracts/utils/EnumerableMap.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMap {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct MapEntry {\n        bytes32 _key;\n        bytes32 _value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] _entries;\n\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n            map._entries.push(MapEntry({ _key: key, _value: value }));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = map._entries.length;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            MapEntry storage lastEntry = map._entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map._entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map._entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._entries.length;\n    }\n\n   /**\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n    *\n    * Note that there are no guarantees on the ordering of entries inside the\n    * array, and it may change when more entries are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\n\n        MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        return _get(map, key, \"EnumerableMap: nonexistent key\");\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     */\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint256(_get(map._inner, bytes32(key))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\n    }\n}\n\n// File: openzeppelin-solidity/contracts/utils/Strings.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = byte(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\n\npragma solidity ^0.6.0;\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\n    using SafeMath for uint256;\n    using Address for address;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\n    using Strings for uint256;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from holder address to their (enumerable) set of owned tokens\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\n\n    // Enumerable mapping from token ids to their owners\n    EnumerableMap.UintToAddressMap private _tokenOwners;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    // Base URI\n    string private _baseURI;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    /*\n     *     bytes4(keccak256('name()')) == 0x06fdde03\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n     *\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /*\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n     *\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n\n        return _holderTokens[owner].length();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n\n        // If there is no base URI, return the token URI.\n        if (bytes(_baseURI).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(_baseURI, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(_baseURI, tokenId.toString()));\n    }\n\n    /**\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\n    * to the token ID if no specific URI is set for that token ID.\n    */\n    function baseURI() public view returns (string memory) {\n        return _baseURI;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\n        return _holderTokens[owner].at(index);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n        return _tokenOwners.length();\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\n        (uint256 tokenId, ) = _tokenOwners.at(index);\n        return tokenId;\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mecanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return _tokenOwners.contains(tokenId);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     d*\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n\n        _holderTokens[owner].remove(tokenId);\n\n        _tokenOwners.remove(tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _holderTokens[from].remove(tokenId);\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Internal function to set the base URI for all token IDs. It is\n     * automatically added as a prefix to the value returned in {tokenURI},\n     * or to the token ID if {tokenURI} is empty.\n     */\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        _baseURI = baseURI_;\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\n            IERC721Receiver(to).onERC721Received.selector,\n            _msgSender(),\n            from,\n            tokenId,\n            _data\n        ), \"ERC721: transfer to non ERC721Receiver implementer\");\n        bytes4 retval = abi.decode(returndata, (bytes4));\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    function _approve(address to, uint256 tokenId) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Holder.sol\n\npragma solidity ^0.6.0;\n\n\n  /**\n   * @dev Implementation of the {IERC721Receiver} interface.\n   *\n   * Accepts all token transfers. \n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n   */\ncontract ERC721Holder is IERC721Receiver {\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/Ownable.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/chi/ChiWrapper.sol\n\npragma solidity 0.6.11;\n\n\n\n\ninterface IfreeUpTo {\n    function freeUpTo(uint256 value) external returns (uint256 freed);\n    function balanceOf(address account) external view returns (uint256);\n}\n\n\ncontract ChiWrapper is Ownable {\n  IfreeUpTo public chi;\n\n  // stores whether discounted gas costs using Chi tokens is allowed\n  bool public discountChiActivated = false;\n\n  modifier discountCHI {\n      if (discountChiActivated) {\n          require(address(chi) != address(0), \"chi address is not set\");\n          uint256 gasStart = gasleft();\n          _;\n          uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n          if (chi.balanceOf(address(this)) >= gasSpent) {\n              chi.freeUpTo((gasSpent + 14154) / 41130);\n          }\n      }\n      else {\n        _;\n      }\n  }\n\n  function setChi(address chiAddress) external onlyOwner {\n      chi = IfreeUpTo(chiAddress);\n  }\n\n  /**\n    * @notice Internal function to record if gas costs can be discounted\n    * @dev set discountChiActivated value as true or false\n    * @param activate : bool indicating the toggle value\n    */\n  function toggleDiscountChi(bool activate) external onlyOwner {\n    if (activate) {\n      require(!discountChiActivated, \"discount chi is already activated\");\n    }\n    else {\n      require(discountChiActivated, \"discount chi is already deactivated\");\n    }\n    discountChiActivated = activate;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/utils/Counters.sol\n\npragma solidity ^0.6.0;\n\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n\n// File: contracts/ExtendedStrings.sol\n\npragma solidity 0.6.11;\n\n/**\n * @title ExtendedStrings\n * @notice Library contract via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n * @dev Audit Report https://github.com/lendroidproject/Rightshare-contracts/blob/master/audit-report.pdf\n */\nlibrary ExtendedStrings {\n  function strConcat(string memory a, string memory b, string memory c, string memory d, string memory e) internal pure returns (string memory) {\n      bytes memory ba = bytes(a);\n      bytes memory bb = bytes(b);\n      bytes memory bc = bytes(c);\n      bytes memory bd = bytes(d);\n      bytes memory be = bytes(e);\n      string memory abcde = new string(ba.length + bb.length + bc.length + bd.length + be.length);\n      bytes memory babcde = bytes(abcde);\n      uint k = 0;\n      for (uint i = 0; i < ba.length; i++) babcde[k++] = ba[i];\n      for (uint i = 0; i < bb.length; i++) babcde[k++] = bb[i];\n      for (uint i = 0; i < bc.length; i++) babcde[k++] = bc[i];\n      for (uint i = 0; i < bd.length; i++) babcde[k++] = bd[i];\n      for (uint i = 0; i < be.length; i++) babcde[k++] = be[i];\n      return string(babcde);\n    }\n\n    function strConcat(string memory a, string memory b, string memory c, string memory d) internal pure returns (string memory) {\n        return strConcat(a, b, c, d, \"\");\n    }\n\n    function strConcat(string memory a, string memory b, string memory c) internal pure returns (string memory) {\n        return strConcat(a, b, c, \"\", \"\");\n    }\n\n    function strConcat(string memory a, string memory b) internal pure returns (string memory) {\n        return strConcat(a, b, \"\", \"\", \"\");\n    }\n\n    function uint2str(uint i) internal pure returns (string memory _uintAsString) {\n        if (i == 0) {\n            return \"0\";\n        }\n        uint j = i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (i != 0) {\n            bstr[k--] = byte(uint8(48 + i % 10));\n            i /= 10;\n        }\n        return string(bstr);\n    }\n\n    function bool2str(bool b) internal pure returns (string memory _boolAsString) {\n        _boolAsString = b ? \"1\" : \"0\";\n    }\n\n    function address2str(address addr) internal pure returns (string memory addressAsString) {\n        bytes32 _bytes = bytes32(uint256(addr));\n        bytes memory HEX = \"0123456789abcdef\";\n        bytes memory _string = new bytes(42);\n        _string[0] = '0';\n        _string[1] = 'x';\n        for(uint i = 0; i < 20; i++) {\n            _string[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\n            _string[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\n        }\n        addressAsString = string(_string);\n    }\n}\n\n// File: contracts/Right.sol\n\npragma solidity 0.6.11;\n\n\n\n\n\n\n/** @title Right\n * @author Lendroid Foundation\n * @notice A smart contract for NFT Rights\n * @dev Audit certificate : https://github.com/lendroidproject/Rightshare-contracts/blob/master/audit-report.pdf\n */\nabstract contract Right is ERC721, Ownable {\n\n  using ExtendedStrings for string;\n  using Counters for Counters.Counter;\n\n  Counters.Counter private _tokenIdTracker;\n\n  function _mintTo(address to) internal {\n    uint256 newTokenId = _getNextTokenId();\n    _mint(to, newTokenId);\n    _incrementTokenId();\n  }\n\n  /**\n    * @notice Allows owner to mint a a token to a given address\n    * dev Mints a new token to the given address, increments currentTokenId\n    * @param to address of the future owner of the token\n    */\n  function mintTo(address to) public onlyOwner {\n    _mintTo(to);\n  }\n\n  /**\n    * @notice Displays the id of the latest token that was minted\n    * @return uint256 : latest minted token id\n    */\n  function currentTokenId() public view returns (uint256) {\n    return _tokenIdTracker.current();\n  }\n\n  /**\n    * @notice Displays the id of the next token that will be minted\n    * @dev Calculates the next token ID based on value of _currentTokenId\n    * @return uint256 : id of the next token\n    */\n  function _getNextTokenId() private view returns (uint256) {\n    return _tokenIdTracker.current().add(1);\n  }\n\n  /**\n    * @notice Increments the value of _currentTokenId\n    * @dev Internal function that increases the value of _currentTokenId by 1\n    */\n  function _incrementTokenId() private  {\n    _tokenIdTracker.increment();\n  }\n\n  /**\n    * @notice set the base api url of the Right token\n    * @param url : string representing the api url\n    */\n  function setApiBaseUrl(string memory url) external onlyOwner {\n    _setBaseURI(url);\n  }\n\n}\n\n// File: contracts/FRight.sol\n\npragma solidity 0.6.11;\n\n\n\n/** @title FRight\n  * @author Lendroid Foundation\n  * @notice A smart contract for Frozen Rights\n  * @dev Audit certificate : https://github.com/lendroidproject/Rightshare-contracts/blob/master/audit-report.pdf\n  */\ncontract FRight is Right {\n  // This stores metadata about a FRight token\n  struct Metadata {\n    uint256 version; // version of the FRight\n    uint256 tokenId; // id of the FRight\n    uint256 startTime; // timestamp when the FRight was created\n    uint256 endTime; // timestamp until when the FRight is deemed useful\n    address baseAssetAddress; // address of original NFT locked in the DAO\n    uint256 baseAssetId; // id of original NFT locked in the DAO\n    bool isExclusive; // indicates if the FRight is exclusive, aka, has only one IRight\n    uint256 maxISupply; // maximum summply of IRights for this FRight\n    uint256 circulatingISupply; // circulating summply of IRights for this FRight\n  }\n\n  // stores a Metadata struct for each FRight.\n  mapping(uint256 => Metadata) public metadata;\n  // stores information of original NFTs\n  mapping(address => mapping(uint256 => bool)) public isFrozen;\n\n  constructor() ERC721(\"FRight Token\", \"FRT\") public {}\n\n  /**\n    * @notice Adds metadata about a FRight Token\n    * @param version : uint256 representing the version of the FRight\n    * @param startTime : uint256 creation timestamp of the FRight\n    * @param endTime : uint256 expiry timestamp of the FRight\n    * @param baseAssetAddress : address of original NFT\n    * @param baseAssetId : id of original NFT\n    * @param maxISupply : uint256 indicating maximum summply of IRights\n    * @param circulatingISupply : uint256 indicating circulating summply of IRights\n    */\n  function _updateMetadata(uint256 version, uint256 startTime, uint256 endTime, address baseAssetAddress, uint256 baseAssetId, uint256 maxISupply, uint256 circulatingISupply) private  {\n    Metadata storage _meta = metadata[currentTokenId()];\n    _meta.tokenId = currentTokenId();\n    _meta.version = version;\n    _meta.startTime = startTime;\n    _meta.endTime = endTime;\n    _meta.baseAssetAddress = baseAssetAddress;\n    _meta.baseAssetId = baseAssetId;\n    _meta.isExclusive = maxISupply == 1;\n    _meta.maxISupply = maxISupply;\n    _meta.circulatingISupply = circulatingISupply;\n  }\n\n  /**\n    * @notice Updates the api uri of a FRight token\n    * @dev Reconstructs and saves the uri from the FRight metadata\n    * @param tokenId : uint256 representing the FRight id\n    */\n  function _updateTokenURI(uint256 tokenId) private {\n    require(tokenId > 0, \"invalid token id\");\n    Metadata storage _meta = metadata[tokenId];\n    require(_meta.tokenId == tokenId, \"FRT: token does not exist\");\n    string memory _tokenURI = ExtendedStrings.strConcat(\n        ExtendedStrings.strConcat(\"f/\", ExtendedStrings.address2str(_meta.baseAssetAddress), \"/\", ExtendedStrings.uint2str(_meta.baseAssetId), \"/\"),\n        ExtendedStrings.strConcat(ExtendedStrings.uint2str(_meta.endTime), \"/\", ExtendedStrings.bool2str(_meta.isExclusive), \"/\"),\n        ExtendedStrings.strConcat(ExtendedStrings.uint2str(_meta.maxISupply), \"/\", ExtendedStrings.uint2str(_meta.circulatingISupply) , \"/\", ExtendedStrings.uint2str(_meta.version))\n    );\n    _setTokenURI(tokenId, _tokenURI);\n  }\n\n  /**\n    * @notice Creates a new FRight Token\n    * @dev Mints FRight Token, and updates metadata & currentTokenId\n    * @param addresses : address array [_to, baseAssetAddress]\n    * @param values : uint256 array [endTime, baseAssetId, maxISupply, version]\n    * @return uint256 : updated currentTokenId\n    */\n  function freeze(address[2] calldata addresses, uint256[4] calldata values) external onlyOwner returns (uint256) {\n    require(addresses[1].isContract(), \"invalid base asset address\");\n    require(values[0] > block.timestamp, \"invalid expiry\");\n    require(values[1] > 0, \"invalid base asset id\");\n    require(values[2] > 0, \"invalid maximum I supply\");\n    require(values[3] > 0, \"invalid version\");\n    require(!isFrozen[addresses[1]][values[1]], \"Asset is already frozen\");\n    isFrozen[addresses[1]][values[1]] = true;\n    mintTo(addresses[0]);\n    _updateMetadata(values[3], now, values[0], addresses[1], values[1], values[2], 1);\n    return currentTokenId();\n  }\n\n  /**\n    * @notice Checks if a FRight can be unfrozen\n    * @dev Returns true if the FRight either has expired, or has 0 circulating supply of IRights\n    * @param tokenId : uint256 representing the FRight id\n    * @return bool : indicating if the FRight can be unfrozen\n    */\n  function isUnfreezable(uint256 tokenId) public view returns (bool) {\n    require(tokenId > 0, \"invalid token id\");\n    Metadata storage _meta = metadata[tokenId];\n    require(_meta.tokenId == tokenId, \"FRT: token does not exist\");\n    return (now >= _meta.endTime) || (_meta.circulatingISupply == 0);\n  }\n\n  /**\n    * @notice Unfreezes a FRight\n    * @dev Deletes the metadata and burns the FRight token\n    * @param tokenId : uint256 representing the FRight id\n    */\n  function unfreeze(address from, uint256 tokenId) external onlyOwner {\n    require(isUnfreezable(tokenId), \"FRT: token is not unfreezable\");\n    require(from != address(0), \"from address cannot be zero\");\n    delete isFrozen[metadata[tokenId].baseAssetAddress][metadata[tokenId].baseAssetId];\n    delete metadata[tokenId];\n    _burn(tokenId);\n  }\n\n  /**\n    * @notice Increment circulating supply of IRights for a FRight\n    * @dev Update circulatingISupply of the FRight metadata\n    * @param tokenId : uint256 representing the FRight id\n    * @param amount : uint256 indicating increment amount\n    */\n  function incrementCirculatingISupply(uint256 tokenId, uint256 amount) external onlyOwner {\n    require(tokenId > 0, \"invalid token id\");\n    require(amount > 0, \"amount cannot be zero\");\n    Metadata storage _meta = metadata[tokenId];\n    require(_meta.tokenId == tokenId, \"FRT: token does not exist\");\n    require(_meta.maxISupply.sub(_meta.circulatingISupply) >= amount, \"Circulating I Supply cannot be incremented\");\n    _meta.circulatingISupply = _meta.circulatingISupply.add(amount);\n    _updateTokenURI(tokenId);\n  }\n\n  /**\n    * @notice Decrement circulating supply of IRights for a FRight\n    * @dev Decrement circulatingISupply and maxISupply of the FRight metadata\n    * @param tokenId : uint256 representing the FRight id\n    * @param amount : uint256 indicating decrement amount\n    */\n  function decrementCirculatingISupply(uint256 tokenId, uint256 amount) external onlyOwner {\n    require(tokenId > 0, \"invalid token id\");\n    require(amount > 0, \"amount cannot be zero\");\n    Metadata storage _meta = metadata[tokenId];\n    require(_meta.tokenId == tokenId, \"FRT: token does not exist\");\n    require(_meta.maxISupply.sub(amount) >= _meta.circulatingISupply.sub(amount), \"invalid amount\");\n    _meta.circulatingISupply = _meta.circulatingISupply.sub(amount);\n    _meta.maxISupply = _meta.maxISupply.sub(amount);\n    _updateTokenURI(tokenId);\n  }\n\n  /**\n    * @notice Displays information about the original NFT of a FRight token\n    * @param tokenId : uint256 representing the FRight id\n    * @return baseAssetAddress : address of original NFT\n    * @return baseAssetId : id of original NFT\n    */\n  function baseAsset(uint256 tokenId) external view returns (address baseAssetAddress, uint256 baseAssetId) {\n    require(tokenId > 0, \"invalid token id\");\n    Metadata storage _meta = metadata[tokenId];\n    require(_meta.tokenId == tokenId, \"FRT: token does not exist\");\n    baseAssetAddress = _meta.baseAssetAddress;\n    baseAssetId = _meta.baseAssetId;\n  }\n\n  /**\n    * @notice Displays if a IRight can be minted from the given FRight\n    * @param tokenId : uint256 representing the FRight id\n    * @return bool : indicating if a IRight can be minted\n    */\n  function isIMintable(uint256 tokenId) external view returns (bool) {\n    require(tokenId > 0, \"invalid token id\");\n    Metadata storage _meta = metadata[tokenId];\n    require(_meta.tokenId == tokenId, \"FRT: token does not exist\");\n    require(!_meta.isExclusive, \"cannot mint exclusive iRight\");\n    if (_meta.maxISupply.sub(_meta.circulatingISupply) > 0) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n    * @notice Displays the expiry of a FRight token\n    * @param tokenId : uint256 representing the FRight id\n    * @return uint256 : expiry as a timestamp\n    */\n  function endTime(uint256 tokenId) external view returns (uint256) {\n    require(tokenId > 0, \"invalid token id\");\n    Metadata storage _meta = metadata[tokenId];\n    require(_meta.tokenId == tokenId, \"FRT: token does not exist\");\n    return _meta.endTime;\n  }\n}\n\n// File: contracts/IRight.sol\n\npragma solidity 0.6.11;\npragma experimental ABIEncoderV2;\n\n\n\n/** @title IRight\n  * @author Lendroid Foundation\n  * @notice A smart contract for Interim Rights\n  * @dev Audit certificate : https://github.com/lendroidproject/Rightshare-contracts/blob/master/audit-report.pdf\n  */\ncontract IRight is Right {\n\n  enum Category { ENCUMBERED_EXCLUSIVE, ENCUMBERED_NONEXCLUSIVE, UNENCUMBERED }\n\n  // This stores metadata about a IRight token\n  struct Metadata {\n    uint256 version; // version of the IRight\n    uint256 parentId; // id of the FRight\n    uint256 tokenId; // id of the IRight\n    uint256 startTime; // timestamp when the IRight was created\n    uint256 endTime; // timestamp until when the IRight is deemed useful\n    address baseAssetAddress; // address of original NFT locked in the DAO\n    uint256 baseAssetId; // id of original NFT locked in the DAO\n    Category category; // category of IRight\n    string purpose; // purpose for which the IRight can be used\n    string description; // details of the IRight\n    string imageUrl; // surce of the IRight image\n    string termsUrl; // surce of the IRight terms and conditions\n  }\n\n  // stores a `Metadata` struct for each IRight.\n  mapping(uint256 => Metadata) public metadata;\n\n  // [address][tokenAddress][tokenId] = tokens owned by address\n  mapping(address => mapping(address => mapping(uint256 => mapping(string => Counters.Counter)))) public rights;\n\n  constructor() ERC721(\"IRight Token\", \"IRT\") public {}\n\n  function _burn(address owner, uint256 tokenId) internal {\n    require(tokenId > 0, \"invalid token id\");\n    require(owner != address(0), \"from address cannot be zero\");\n    Metadata storage _meta = metadata[tokenId];\n    require(_meta.tokenId == tokenId, \"IRT: token does not exist\");\n    super._burn(tokenId);\n    rights[owner][_meta.baseAssetAddress][_meta.baseAssetId][_meta.purpose].decrement();\n    delete metadata[tokenId];\n  }\n\n  function _transfer(address from, address to, uint256 tokenId) internal override {\n    Metadata storage _meta = metadata[tokenId];\n    require(_meta.tokenId == tokenId, \"IRT: token does not exist\");\n    (address baseAssetAddress, uint256 baseAssetId) = baseAsset(tokenId);\n    super._transfer(from, to, tokenId);\n    rights[from][baseAssetAddress][baseAssetId][_meta.purpose].decrement();\n    rights[to][baseAssetAddress][baseAssetId][_meta.purpose].increment();\n  }\n\n  /**\n    * @notice Adds metadata about a IRight Token\n    * @param version : uint256 representing the version of the IRight\n    * @param parentId : uint256 representing the id of the FRight\n    * @param startTime : uint256 creation timestamp of the IRight\n    * @param endTime : uint256 expiry timestamp of the IRight\n    * @param baseAssetAddress : address of original NFT\n    * @param baseAssetId : id of original NFT\n    */\n  function _updateMetadata(\n      uint256 version, uint256 parentId, uint256 startTime, uint256 endTime,\n      address baseAssetAddress, uint256 baseAssetId, Category category,\n      string[4] calldata stringValues) private  {\n    Metadata storage _meta = metadata[currentTokenId()];\n    _meta.tokenId = currentTokenId();\n    _meta.version = version;\n    _meta.parentId = parentId;\n    _meta.startTime = startTime;\n    _meta.endTime = endTime;\n    _meta.baseAssetAddress = baseAssetAddress;\n    _meta.baseAssetId = baseAssetId;\n    _meta.category = category;\n    _meta.purpose = stringValues[0];\n    _meta.description = stringValues[1];\n    _meta.imageUrl = stringValues[2];\n    _meta.termsUrl = stringValues[3];\n\n    string memory _tokenURI = ExtendedStrings.strConcat(\n        ExtendedStrings.strConcat(\"i/\", ExtendedStrings.address2str(_meta.baseAssetAddress), \"/\", ExtendedStrings.uint2str(_meta.baseAssetId), \"/\"),\n        ExtendedStrings.strConcat(ExtendedStrings.uint2str(_meta.endTime), \"/\", ExtendedStrings.uint2str(uint(_meta.category)), \"/\"),\n        ExtendedStrings.strConcat(ExtendedStrings.uint2str(_meta.version), \"/\"),\n        ExtendedStrings.strConcat(_meta.purpose, \"/\"),\n        ExtendedStrings.strConcat(_meta.description, \"/\", _meta.imageUrl, \"/\", _meta.imageUrl)\n    );\n    _setTokenURI(_meta.tokenId, _tokenURI);\n  }\n\n  /**\n    * @notice Creates a new IRight Token\n    * @dev Mints IRight Token, and updates metadata & currentTokenId\n    * @param addresses : address array [_to, baseAssetAddress]\n    * @param isExclusive : boolean indicating exclusivity of the FRight Token\n    * @param uint256Values : uint256 array [parentId, endTime, baseAssetId, version]\n    * @param stringValues : string array [purpose, description, imageUrl, termsUrl]\n    */\n  function issue(address[2] calldata addresses, bool isExclusive, uint256[4] calldata uint256Values, string[4] calldata stringValues) external onlyOwner {\n    require(addresses[1].isContract(), \"invalid base asset address\");\n    require(uint256Values[1] > block.timestamp, \"invalid expiry\");\n    require(uint256Values[2] > 0, \"invalid base asset id\");\n    require(uint256Values[3] > 0, \"invalid version\");\n    Category category = Category.UNENCUMBERED;\n    if (uint256Values[0] > 0) {\n      category = isExclusive ? Category.ENCUMBERED_EXCLUSIVE : Category.ENCUMBERED_NONEXCLUSIVE;\n    }\n    rights[addresses[0]][addresses[1]][uint256Values[2]][stringValues[0]].increment();\n    mintTo(addresses[0]);\n\n    _updateMetadata(uint256Values[3], uint256Values[0], now, uint256Values[1], addresses[1], uint256Values[2], category, stringValues);\n  }\n\n  /**\n    * @notice Revokes a IRight\n    * @dev Deletes the metadata and burns the IRight token\n    * @param from : address of the IRight owner\n    * @param tokenId : uint256 representing the IRight id\n    */\n  function revoke(address from, uint256 tokenId) external onlyOwner {\n    _burn(from, tokenId);\n  }\n\n  /**\n    * @notice Displays the FRight id of a IRight token\n    * @param tokenId : uint256 representing the FRight id\n    * @return uint256 : parentId from the IRights metadata\n    */\n  function parentId(uint256 tokenId) external view returns (uint256) {\n    require(tokenId > 0, \"invalid token id\");\n    Metadata storage _meta = metadata[tokenId];\n    require(_meta.tokenId == tokenId, \"IRT: token does not exist\");\n    return _meta.parentId;\n  }\n\n  /**\n    * @notice Displays information about the original NFT of a IRight token\n    * @param tokenId : uint256 representing the IRight id\n    * @return baseAssetAddress : address of original NFT\n    * @return baseAssetId : id of original NFT\n    */\n  function baseAsset(uint256 tokenId) public view returns (address baseAssetAddress, uint256 baseAssetId) {\n    require(tokenId > 0, \"invalid token id\");\n    Metadata storage _meta = metadata[tokenId];\n    require(_meta.tokenId == tokenId, \"IRT: token does not exist\");\n    baseAssetAddress = _meta.baseAssetAddress;\n    baseAssetId = _meta.baseAssetId;\n  }\n\n  function hasRight(address who, address baseAssetAddress, uint256 baseAssetId, string calldata purpose) external view returns (bool) {\n    return rights[who][baseAssetAddress][baseAssetId][purpose].current() > 0;\n  }\n\n}\n\n// File: contracts/RightsDao.sol\n\npragma solidity 0.6.11;\n\n\n\n\n\n\n\n\n\n/** @title RightsDao\n * @author Lendroid Foundation\n * @notice DAO that handles NFTs, FRights, and IRights\n * @dev Audit certificate : https://github.com/lendroidproject/Rightshare-contracts/blob/master/audit-report.pdf\n */\ncontract RightsDao is ChiWrapper, ERC721Holder {\n\n  using Address for address;\n  using SafeMath for uint256;\n\n  int128 constant CONTRACT_TYPE_RIGHT_F = 1;\n  int128 constant CONTRACT_TYPE_RIGHT_I = 2;\n\n  // stores contract addresses of FRight and IRight\n  mapping(int128 => address) public contracts;\n\n  // stores addresses that have been whitelisted to perform freeze calls\n  mapping(address => bool) public isWhitelisted;\n\n  // stores whether freeze calls require caller to be whitelisted\n  bool public whitelistedFreezeActivated = true;\n\n  // stores latest current version of FRight\n  mapping(int128 => uint256) public currentRightVersions;\n  // return value for safeTransferFrom function calls of older ERC721 versions\n  bytes4 constant ERC721_RECEIVED_OLD = 0xf0b9e5ba;\n\n  constructor(address fRightContractAddress, address iRightContractAddress) public {\n    require(fRightContractAddress.isContract(), \"invalid fRightContractAddress\");\n    require(iRightContractAddress.isContract(), \"invalid iRightContractAddress\");\n    contracts[CONTRACT_TYPE_RIGHT_F] = fRightContractAddress;\n    contracts[CONTRACT_TYPE_RIGHT_I] = iRightContractAddress;\n    currentRightVersions[CONTRACT_TYPE_RIGHT_F] = 1;\n    currentRightVersions[CONTRACT_TYPE_RIGHT_I] = 1;\n  }\n\n  function onERC721Received(address, uint256, bytes memory) public pure returns (bytes4) {\n    return ERC721_RECEIVED_OLD;\n  }\n\n  /**\n    * @notice Internal function to record if freeze calls must be made only by whitelisted accounts\n    * @dev set whitelistedFreezeActivated value as true or false\n    * @param activate : bool indicating the toggle value\n    */\n  function toggleWhitelistedFreeze(bool activate) external onlyOwner {\n    if (activate) {\n      require(!whitelistedFreezeActivated, \"whitelisted freeze is already activated\");\n    }\n    else {\n      require(whitelistedFreezeActivated, \"whitelisted freeze is already deactivated\");\n    }\n    whitelistedFreezeActivated = activate;\n  }\n\n\n  /**\n    * @notice Allows owner to add / remove given address to / from whitelist\n    * @param addr : given address\n    * @param status : bool indicating whitelist status of given address\n    */\n  function toggleWhitelistStatus(address addr, bool status) external onlyOwner {\n    require(addr != address(0), \"invalid address\");\n    isWhitelisted[addr] = status;\n  }\n\n  /**\n    * @notice Allows owner to increment the current f version\n    * @dev Increment currentFVersion by 1\n    */\n  function incrementCurrentRightVersion(int128 rightType) external onlyOwner {\n    require((rightType == CONTRACT_TYPE_RIGHT_F) || (rightType == CONTRACT_TYPE_RIGHT_I), \"invalid contract type\");\n    currentRightVersions[rightType] = currentRightVersions[rightType].add(1);\n  }\n\n  /**\n    * @notice Allows owner to set the base api url of F or I Right token\n    * @dev Set base url of the server API representing the metadata of a Right Token\n    * @param rightType type of Right contract\n    * @param url API base url\n    */\n  function setRightApiBaseUrl(int128 rightType, string calldata url) external onlyOwner {\n    require((rightType == CONTRACT_TYPE_RIGHT_F) || (rightType == CONTRACT_TYPE_RIGHT_I), \"invalid contract type\");\n    if (rightType == CONTRACT_TYPE_RIGHT_F) {\n      FRight(contracts[rightType]).setApiBaseUrl(url);\n    }\n    if (rightType == CONTRACT_TYPE_RIGHT_I) {\n      IRight(contracts[rightType]).setApiBaseUrl(url);\n    }\n  }\n\n  /**\n    * @notice Freezes a given NFT Token\n    * @dev Send the NFT to this contract, mint 1 FRight Token and 1 IRight Token\n    * @param baseAssetAddress : address of the NFT\n    * @param baseAssetId : id of the NFT\n    * @param expiry : timestamp until which the NFT is locked in the dao\n    * @param uint256Values : uint256 array [maxISupply, f_version, i_version]\n    * @param stringValues : string array [purpose, description, imageUrl, termsUrl]\n    */\n  function freeze(address baseAssetAddress, uint256 baseAssetId, uint256 expiry, uint256[3] calldata uint256Values, string[4] calldata stringValues) external discountCHI {\n    if (whitelistedFreezeActivated) {\n      require(isWhitelisted[msg.sender], \"sender is not whitelisted\");\n    }\n    require(uint256Values[0] > 0, \"invalid maximum I supply\");\n    require(expiry > block.timestamp, \"expiry should be in the future\");\n    require((uint256Values[1] > 0) && (uint256Values[1] <= currentRightVersions[CONTRACT_TYPE_RIGHT_F]), \"invalid f version\");\n    require((uint256Values[2] > 0) && (uint256Values[2] <= currentRightVersions[CONTRACT_TYPE_RIGHT_I]), \"invalid i version\");\n    uint256 fRightId = FRight(contracts[CONTRACT_TYPE_RIGHT_F]).freeze([msg.sender, baseAssetAddress], [expiry, baseAssetId, uint256Values[0], uint256Values[1]]);\n    // set exclusivity of IRights for the NFT\n    bool isExclusive = uint256Values[0] == 1;\n    IRight(contracts[CONTRACT_TYPE_RIGHT_I]).issue([msg.sender, baseAssetAddress], isExclusive, [fRightId, expiry, baseAssetId, uint256Values[2]], stringValues);\n    ERC721(baseAssetAddress).safeTransferFrom(msg.sender, address(this), baseAssetId);\n  }\n\n  /**\n    * @notice Unfreezes a given FRight.\n    * @dev Burn the FRight token for a given token Id, and return the original NFT back to the caller\n    * @param fRightId : id of the FRight token.\n    */\n  function unfreeze(uint256 fRightId) external discountCHI {\n    address fRightOwner = FRight(contracts[CONTRACT_TYPE_RIGHT_F]).ownerOf(fRightId);\n    require(fRightOwner == msg.sender);\n    (address baseAssetAddress, uint256 baseAssetId) = FRight(contracts[CONTRACT_TYPE_RIGHT_F]).baseAsset(fRightId);\n    FRight(contracts[CONTRACT_TYPE_RIGHT_F]).unfreeze(fRightOwner, fRightId);\n    ERC721(baseAssetAddress).transferFrom(address(this), msg.sender, baseAssetId);\n  }\n\n  /**\n    * @notice Issues a IRight for a given FRight\n    * @dev Check if IRight can be minted, Mint 1 IRight, Increment FRight.circulatingISupply by 1\n    * @param baseAssetAddress : address of base NFT asset\n    * @param uint256Values : uint256 array [baseAssetId, fRightId, expiry, i_version]\n    * @param stringValues : string array [purpose, description, imageUrl, termsUrl]\n    */\n  function issueI(address baseAssetAddress, uint256[4] calldata uint256Values, string[4] calldata stringValues) external discountCHI {\n    if (whitelistedFreezeActivated) {\n      require(isWhitelisted[msg.sender], \"sender is not whitelisted\");\n    }\n    require(uint256Values[2] > block.timestamp, \"expiry should be in the future\");\n    require((uint256Values[3] > 0) && (uint256Values[3] <= currentRightVersions[CONTRACT_TYPE_RIGHT_I]), \"invalid i version\");\n    if (uint256Values[1] > 0) {\n      require(FRight(contracts[CONTRACT_TYPE_RIGHT_F]).isIMintable(uint256Values[1]), \"cannot mint iRight\");\n      require(msg.sender == FRight(contracts[CONTRACT_TYPE_RIGHT_F]).ownerOf(uint256Values[1]), \"sender is not the owner of fRight\");\n      uint256 fEndTime = FRight(contracts[CONTRACT_TYPE_RIGHT_F]).endTime(uint256Values[0]);\n      require(uint256Values[1] <= fEndTime, \"expiry cannot exceed fRight expiry\");\n      (address fBaseAssetAddress, uint256 fBaseAssetId) = FRight(contracts[CONTRACT_TYPE_RIGHT_F]).baseAsset(uint256Values[1]);\n      require(fBaseAssetAddress == baseAssetAddress);\n      require(fBaseAssetId == uint256Values[0]);\n      FRight(contracts[CONTRACT_TYPE_RIGHT_F]).incrementCirculatingISupply(uint256Values[1], 1);\n    }\n    else {\n      require(msg.sender == ERC721(baseAssetAddress).ownerOf(uint256Values[0]));\n    }\n    IRight(contracts[CONTRACT_TYPE_RIGHT_I]).issue([msg.sender, baseAssetAddress], false, [uint256Values[1], uint256Values[2], uint256Values[0], uint256Values[3]], stringValues);\n  }\n\n  /**\n    * @notice Revokes a given IRight. The IRight can be revoked at any time.\n    * @dev Burn the IRight token. If the corresponding FRight exists, decrement its circulatingISupply by 1.\n    * @param iRightId : id of the IRight token.\n    */\n  function revokeI(uint256 iRightId) external discountCHI {\n    address iRightOwner = IRight(contracts[CONTRACT_TYPE_RIGHT_I]).ownerOf(iRightId);\n    require(msg.sender == iRightOwner, \"sender is not the owner of iRight\");\n    (address baseAssetAddress, uint256 baseAssetId) = IRight(contracts[CONTRACT_TYPE_RIGHT_I]).baseAsset(iRightId);\n    bool isBaseAssetFrozen = FRight(contracts[CONTRACT_TYPE_RIGHT_F]).isFrozen(baseAssetAddress, baseAssetId);\n    if (isBaseAssetFrozen) {\n      uint256 fRightId = IRight(contracts[CONTRACT_TYPE_RIGHT_I]).parentId(iRightId);\n      FRight(contracts[CONTRACT_TYPE_RIGHT_F]).decrementCirculatingISupply(fRightId, 1);\n    }\n    IRight(contracts[CONTRACT_TYPE_RIGHT_I]).revoke(iRightOwner, iRightId);\n  }\n\n}\n"}}}