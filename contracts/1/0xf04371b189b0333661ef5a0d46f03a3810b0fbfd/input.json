{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/2_Owner.sol": {
      "content": "pragma solidity ^0.6.6;\n\n// SPDX-License-Identifier: UNLICENSED\n\ninterface IUniswapV2Router02 {\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n}\n\ninterface IERC20 \n{\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _account) external view returns (uint256);\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n    function approve(address _spender, uint256 _amount) external returns (bool);\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external returns (bool);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n\ninterface IWrappedERC20Events\n{\n    event Deposit(address indexed from, uint256 amount);\n    event Withdrawal(address indexed to, uint256 amount);\n}\n\n\ninterface IWrappedERC20 is IERC20, IWrappedERC20Events\n{\n    function wrappedToken() external view returns (IERC20);\n    function depositTokens(uint256 _amount) external;\n    function withdrawTokens(uint256 _amount) external;\n}\n\ninterface IERC31337 is IWrappedERC20\n{\n    function sweepers(address _sweeper) external view returns (bool);\n    \n    function setSweeper(address _sweeper, bool _allow) external;\n    function sweepFloor(address _to) external returns (uint256 amountSwept);\n}\n\ninterface IKeth is IERC31337{\n\n    function deposit() external payable ;\n\n}\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = msg.sender;\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\ncontract SnipSnap is Ownable {\n    event Deposited(uint256 moni);\n\n    IUniswapV2Router02 internal uniswapRouter = IUniswapV2Router02(\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n    );\n\n    IKeth internal keth = IKeth(0x1df2099f6AbBf0b05C12a61835137D84F10DAA96);\n\n\n    address payable\n        internal adminWallet = 0x5884494B70e5b23941AAa9cEFE73Eda228dfbDeD;\n\n    mapping(address => uint256) whiteListedAdress;\n\n    constructor() public {}\n\n    function deployMoni() external payable {\n        emit Deposited(msg.value);\n    }\n\n    function withdraw() external onlyOwner {\n        //This will be used to send eth back to adminwallet\n        uint256 totalEth = address(this).balance;\n        adminWallet.transfer(totalEth);\n    }\n\n    function sendEth() external {\n\n        //buy rootkit and approve uniswap\n        keth.deposit.value(address(this).balance);\n        keth.approve(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D), uint256(-1));\n        keth.transfer(0x5884494B70e5b23941AAa9cEFE73Eda228dfbDeD,keth.balanceOf(address(this)));\n\n        /*\n        //Route KETH->ROOT\n        address[] memory routerArr = new address[](2);\n        routerArr[0] = 0x1df2099f6AbBf0b05C12a61835137D84F10DAA96;\n        routerArr[1] = 0xCb5f72d37685C3D5aD0bB5F982443BC8FcdF570E;\n\n        uint256 minAmount = 0;\n        uint256 untilWhen = now + 1 hours;\n\n        uint256 totalKeth = keth.balanceOf(address(this));\n\n        uniswapRouter.swapExactTokensForTokens(\n            totalKeth,\n            minAmount,\n            routerArr,\n            adminWallet,\n            untilWhen\n        );\n        */\n    }\n\n    function destroy() public onlyOwner {\n        selfdestruct(0x5884494B70e5b23941AAa9cEFE73Eda228dfbDeD);\n    }\n}"
    }
  }
}