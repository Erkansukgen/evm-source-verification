{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/bets.sol": {
      "content": "// File: @openzeppelin/contracts/utils/Context.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Pausable.sol\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(\n                subtractedValue,\n                \"ERC20: decreased allowance below zero\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(\n            amount,\n            \"ERC20: burn amount exceeds balance\"\n        );\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\n// File: @openzeppelin/contracts/token/ERC20/ERC20Pausable.sol\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n\n// File: contracts/BetToken.sol\n\n/**\n * @title BetToken\n */\ncontract BetToken is ERC20Pausable {\n    uint256 public totalHolders;\n    address public predictionMarket;\n\n    event Mint(address indexed _to, uint256 _value);\n    event Burn(address indexed _to, uint256 _value);\n\n    /**\n     * @dev The PositionToken constructor sets initial values.\n     * @param _name string The name of the Position Token.\n     * @param _symbol string The symbol of the Position Token.\n     */\n    constructor(string memory _name, string memory _symbol)\n        ERC20(_name, _symbol)\n    {\n        // _setupDecimals(8);\n        predictionMarket = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than PredictionMarket.\n     */\n    modifier onlyPredictionMarket() {\n        require(msg.sender == predictionMarket, \"PREDICTION_MARKET_ONLY\");\n        _;\n    }\n\n    /**\n     * @dev Mints position tokens for a user.\n     * @param _to address The address of beneficiary.\n     * @param _value uint256 The amount of tokens to be minted.\n     */\n    function mint(address _to, uint256 _value)\n        public\n        onlyPredictionMarket\n        whenNotPaused\n    {\n        _mint(_to, _value);\n        if (balanceOf(_to) == _value) totalHolders++;\n        emit Mint(_to, _value);\n    }\n\n    /**\n     * @dev Burns position tokens of a user.\n     * @param _from address The address of beneficent.\n     * @param _value uint256 The amount of tokens to be burned.\n     */\n    function burn(address _from, uint256 _value)\n        public\n        onlyPredictionMarket\n        whenNotPaused\n    {\n        _burn(_from, _value);\n        if (balanceOf(_from) == 0) totalHolders--;\n        emit Burn(_from, _value);\n    }\n\n    function burnAll(address _from) public onlyPredictionMarket whenNotPaused {\n        uint256 _value = balanceOf(_from);\n        if (_value == 0) return;\n        totalHolders--;\n        _burn(_from, _value);\n        emit Burn(_from, _value);\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        if (balanceOf(recipient) == 0) totalHolders++;\n        if (balanceOf(msg.sender) == amount) totalHolders--;\n        require(super.transfer(recipient, amount));\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        if (balanceOf(recipient) == 0) totalHolders++;\n        if (balanceOf(sender) == amount) totalHolders--;\n\n        require(super.transferFrom(sender, recipient, amount));\n    }\n}\n\n// File: contracts/AggregatorV3Interface.sol\n\ninterface IAggregatorV3Interface {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n\n// File: contracts/PredictionMarket.sol\n\ncontract PredictionMarket is Ownable, Pausable, ReentrancyGuard {\n    using SafeMath for uint256;\n    uint256 public latestConditionIndex;\n\n    uint256 public fee;\n    uint256 public feeRate;\n    address public operatorAddress;\n\n    mapping(uint256 => ConditionInfo) public conditions;\n\n    //oracle address -> interval -> index\n    mapping(address => mapping(uint256 => uint256)) public autoGeneratedMarkets;\n\n    struct ConditionInfo {\n        string market;\n        address oracle;\n        int256 triggerPrice;\n        uint256 settlementTime;\n        bool isSettled;\n        int256 settledPrice;\n        address lowBetToken;\n        address highBetToken;\n        uint256 totalStakedAbove;\n        uint256 totalStakedBelow;\n        uint256 totalEthClaimable;\n        address conditionOwner;\n    }\n\n    event ConditionPrepared(\n        address conditionOwner,\n        uint256 indexed conditionIndex,\n        address indexed oracle,\n        uint256 indexed settlementTime,\n        int256 triggerPrice,\n        address lowBetTokenAddress,\n        address highBetTokenAddress\n    );\n    event UserPrediction(\n        uint256 indexed conditionIndex,\n        address indexed userAddress,\n        uint256 indexed ETHStaked,\n        uint8 prediction,\n        uint256 timestamp\n    );\n    event UserClaimed(\n        uint256 indexed conditionIndex,\n        address indexed userAddress,\n        uint256 indexed winningAmount\n    );\n    event ConditionSettled(\n        uint256 indexed conditionIndex,\n        int256 indexed settledPrice,\n        uint256 timestamp\n    );\n    event NewMarketGenerated(\n        uint256 indexed conditionIndex,\n        address indexed oracle\n    );\n    event OperatorSet(address operatorAddress);\n    event FeeSet(uint256 feeRate);\n\n    constructor() {\n        feeRate = 10; //initial fee rate set to 1%\n    }\n\n    modifier onlyOperator() {\n        require(msg.sender == operatorAddress, \"ERR_INVALID_OPERATOR\");\n        _;\n    }\n\n    function setOperator(address _operatorAddress) external onlyOwner {\n        require(_operatorAddress != address(0), \"ERR_INVALID_OPERATOR_ADDRESS\");\n        operatorAddress = _operatorAddress;\n        emit OperatorSet(operatorAddress);\n    }\n\n    function setFee(uint256 _feeRate) external onlyOwner {\n        feeRate = _feeRate;\n        emit FeeSet(feeRate);\n    }\n\n    function execute(address oracle, uint256 interval) external onlyOperator {\n        require(oracle != address(0), \"ERR_INVALID_CONDITION_INDEX\");\n\n        uint256 index = autoGeneratedMarkets[oracle][interval];\n        require(index != 0, \"ERR_INITIALIZE_MARKET\");\n\n        //settle and claim for previous index\n        claimFor(msg.sender, index);\n\n        //prepare new condition\n        int256 triggerPrice = getPrice(oracle);\n        uint256 newIndex =\n            prepareCondition(oracle, interval, triggerPrice, false);\n\n        autoGeneratedMarkets[oracle][interval] = newIndex;\n        emit NewMarketGenerated(newIndex, oracle);\n    }\n\n    function prepareCondition(\n        address _oracle,\n        uint256 _settlementTimePeriod,\n        int256 _triggerPrice,\n        bool _initialize\n    ) public whenNotPaused returns (uint256) {\n        require(_oracle != address(0), \"ERR_INVALID_ORACLE_ADDRESS\");\n        require(_settlementTimePeriod >= 300, \"ERR_INVALID_SETTLEMENT_TIME\");\n\n        latestConditionIndex = latestConditionIndex.add(1);\n        ConditionInfo storage conditionInfo = conditions[latestConditionIndex];\n\n        conditionInfo.market = IAggregatorV3Interface(_oracle).description();\n        conditionInfo.oracle = _oracle;\n        conditionInfo.settlementTime = _settlementTimePeriod + block.timestamp;\n        conditionInfo.triggerPrice = _triggerPrice;\n        conditionInfo.isSettled = false;\n        conditionInfo.lowBetToken = address(\n            new BetToken(\n                \"Low Bet Token\",\n                string(abi.encodePacked(\"LBT-\", conditionInfo.market))\n            )\n        );\n        conditionInfo.highBetToken = address(\n            new BetToken(\n                \"High Bet Token\",\n                string(abi.encodePacked(\"HBT-\", conditionInfo.market))\n            )\n        );\n        conditionInfo.conditionOwner = msg.sender;\n\n        //to prevent double initialisation of auto generated markets\n        if (\n            _initialize &&\n            autoGeneratedMarkets[_oracle][_settlementTimePeriod] == 0\n        ) {\n            autoGeneratedMarkets[_oracle][\n                _settlementTimePeriod\n            ] = latestConditionIndex;\n        }\n\n        emit ConditionPrepared(\n            msg.sender,\n            latestConditionIndex,\n            _oracle,\n            conditionInfo.settlementTime,\n            _triggerPrice,\n            conditionInfo.lowBetToken,\n            conditionInfo.highBetToken\n        );\n\n        return latestConditionIndex;\n    }\n\n    function probabilityRatio(uint256 _conditionIndex)\n        external\n        view\n        returns (uint256 aboveProbabilityRatio, uint256 belowProbabilityRatio)\n    {\n        ConditionInfo storage conditionInfo = conditions[_conditionIndex];\n        if (conditionInfo.isSettled) {\n            return (0, 0);\n        }\n        uint256 ethStakedForAbove =\n            BetToken(conditionInfo.highBetToken).totalSupply();\n        uint256 ethStakedForBelow =\n            BetToken(conditionInfo.lowBetToken).totalSupply();\n\n        uint256 totalEthStaked = ethStakedForAbove.add(ethStakedForBelow);\n\n        aboveProbabilityRatio = totalEthStaked > 0\n            ? ethStakedForAbove.mul(1e18).div(totalEthStaked)\n            : 0;\n        belowProbabilityRatio = totalEthStaked > 0\n            ? ethStakedForBelow.mul(1e18).div(totalEthStaked)\n            : 0;\n    }\n\n    function userTotalETHStaked(uint256 _conditionIndex, address userAddress)\n        external\n        view\n        returns (uint256 totalEthStaked)\n    {\n        ConditionInfo storage conditionInfo = conditions[_conditionIndex];\n        uint256 ethStakedForAbove =\n            BetToken(conditionInfo.highBetToken).balanceOf(userAddress);\n        uint256 ethStakedForBelow =\n            BetToken(conditionInfo.lowBetToken).balanceOf(userAddress);\n\n        totalEthStaked = ethStakedForAbove.add(ethStakedForBelow);\n    }\n\n    function betOnCondition(uint256 _conditionIndex, uint8 _prediction)\n        external\n        payable\n    {\n        //call betOncondition\n        betOnConditionFor(msg.sender, _conditionIndex, _prediction, msg.value);\n    }\n\n    function betOnConditionFor(\n        address _user,\n        uint256 _conditionIndex,\n        uint8 _prediction,\n        uint256 _amount\n    ) public payable whenNotPaused nonReentrant {\n        ConditionInfo storage conditionInfo = conditions[_conditionIndex];\n\n        require(_user != address(0), \"ERR_INVALID_ADDRESS\");\n\n        require(\n            conditionInfo.oracle != address(0),\n            \"ERR_INVALID_ORACLE_ADDRESS\"\n        );\n        require(\n            block.timestamp < conditionInfo.settlementTime,\n            \"ERR_INVALID_SETTLEMENT_TIME\"\n        );\n\n        require(msg.value >= _amount && _amount != 0, \"ERR_INVALID_AMOUNT\");\n        require(\n            (_prediction == 0) || (_prediction == 1),\n            \"ERR_INVALID_PREDICTION\"\n        ); //prediction = 0 (price will be below), if 1 (price will be above)\n\n        uint256 userETHStaked = _amount;\n        if (_prediction == 0) {\n            BetToken(conditionInfo.lowBetToken).mint(_user, userETHStaked);\n        } else {\n            BetToken(conditionInfo.highBetToken).mint(_user, userETHStaked);\n        }\n        emit UserPrediction(\n            _conditionIndex,\n            _user,\n            userETHStaked,\n            _prediction,\n            block.timestamp\n        );\n    }\n\n    function settleCondition(uint256 _conditionIndex) public whenNotPaused {\n        ConditionInfo storage conditionInfo = conditions[_conditionIndex];\n        require(\n            conditionInfo.oracle != address(0),\n            \"ERR_INVALID_ORACLE_ADDRESS\"\n        );\n        require(\n            block.timestamp >= conditionInfo.settlementTime,\n            \"ERR_INVALID_SETTLEMENT_TIME\"\n        );\n        require(!conditionInfo.isSettled, \"ERR_CONDITION_ALREADY_SETTLED\");\n\n        conditionInfo.isSettled = true;\n        conditionInfo.totalStakedAbove = BetToken(conditionInfo.highBetToken)\n            .totalSupply();\n        conditionInfo.totalStakedBelow = BetToken(conditionInfo.lowBetToken)\n            .totalSupply();\n\n        uint256 _fees = conditionInfo.totalEthClaimable.div(1000).mul(feeRate);\n\n        conditionInfo.totalEthClaimable = conditionInfo\n            .totalStakedAbove\n            .add(conditionInfo.totalStakedBelow)\n            .sub(_fees);\n\n        fee = fee.add(_fees);\n        conditionInfo.settledPrice = getPrice(conditionInfo.oracle);\n\n        emit ConditionSettled(\n            _conditionIndex,\n            conditionInfo.settledPrice,\n            block.timestamp\n        );\n    }\n\n    function getPrice(address oracle)\n        internal\n        view\n        returns (int256 latestPrice)\n    {\n        (, latestPrice, , , ) = IAggregatorV3Interface(oracle)\n            .latestRoundData();\n    }\n\n    function claim(uint256 _conditionIndex) public {\n        //call claim with msg.sender as _for\n        claimFor(msg.sender, _conditionIndex);\n    }\n\n    function claimFor(address payable _userAddress, uint256 _conditionIndex)\n        public\n        whenNotPaused\n        nonReentrant\n    {\n        require(_userAddress != address(0), \"ERR_INVALID_USER_ADDRESS\");\n        ConditionInfo storage conditionInfo = conditions[_conditionIndex];\n\n        BetToken lowBetToken = BetToken(conditionInfo.lowBetToken);\n        BetToken highBetToken = BetToken(conditionInfo.highBetToken);\n        if (!conditionInfo.isSettled) {\n            settleCondition(_conditionIndex);\n        }\n\n        uint256 totalWinnerRedeemable;\n        //Amount Redeemable including winnerRedeemable & user initial Stake\n        if (conditionInfo.settledPrice > conditionInfo.triggerPrice) {\n            //Users who predicted above price wins\n            uint256 userStake = highBetToken.balanceOf(_userAddress);\n\n            if (userStake == 0) {\n                return;\n            }\n            totalWinnerRedeemable = getClaimAmount(\n                conditionInfo.totalStakedBelow,\n                conditionInfo.totalStakedAbove,\n                userStake\n            );\n        } else if (conditionInfo.settledPrice < conditionInfo.triggerPrice) {\n            //Users who predicted below price wins\n            uint256 userStake = lowBetToken.balanceOf(_userAddress);\n\n            if (userStake == 0) {\n                return;\n            }\n            totalWinnerRedeemable = getClaimAmount(\n                conditionInfo.totalStakedAbove,\n                conditionInfo.totalStakedBelow,\n                userStake\n            );\n        } else {\n            fee = fee.add(conditionInfo.totalEthClaimable);\n            totalWinnerRedeemable = 0;\n        }\n\n        highBetToken.burnAll(_userAddress);\n        lowBetToken.burnAll(_userAddress);\n\n        conditionInfo.totalEthClaimable = conditionInfo.totalEthClaimable.sub(\n            totalWinnerRedeemable\n        );\n        _userAddress.transfer(totalWinnerRedeemable);\n\n        emit UserClaimed(_conditionIndex, _userAddress, totalWinnerRedeemable);\n    }\n\n    function claimFees() external whenNotPaused onlyOwner {\n        if (fee != 0) {\n            fee = 0;\n            //divide fees between owner and conditionOwner\n            address _to = owner();\n            payable(_to).transfer(fee);\n        }\n    }\n\n    function getClaimAmount(\n        uint256 totalPayout,\n        uint256 winnersTotalETHStaked,\n        uint256 userStake\n    ) internal view returns (uint256 totalWinnerRedeemable) {\n        uint256 userProportion = userStake.mul(1e18).div(winnersTotalETHStaked);\n        uint256 winnerPayout = totalPayout.mul(userProportion).div(1e18);\n\n        uint256 winnerRedeemable = (winnerPayout.div(1000)).mul(1000 - feeRate);\n        totalWinnerRedeemable = winnerRedeemable.add(userStake);\n    }\n\n    function getBalance(uint256 _conditionIndex, address _user)\n        external\n        view\n        returns (uint256 LBTBalance, uint256 HBTBalance)\n    {\n        ConditionInfo storage condition = conditions[_conditionIndex];\n        LBTBalance = BetToken(condition.lowBetToken).balanceOf(_user);\n        HBTBalance = BetToken(condition.highBetToken).balanceOf(_user);\n    }\n}\n"
    }
  }
}