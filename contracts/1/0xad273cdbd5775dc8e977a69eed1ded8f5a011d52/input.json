{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/recovery.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.0;\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract recovery {\n    \n    address public owner;\n    \n    constructor() {\n        owner = msg.sender;\n    }\n    \n    function sendOut(address _token, address _to) public {\n        require(msg.sender == owner);\n        IERC20(_token).transferFrom(address(this), _to, IERC20(_token).balanceOf(address(this)));\n    }\n    \n}"}}}