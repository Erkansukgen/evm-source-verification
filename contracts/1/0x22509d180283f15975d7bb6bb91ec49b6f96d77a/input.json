{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/SmartBuyer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./WyvernExchange.sol\";\n\ncontract SmartBuyer {\n\n    event MatchSuccessful(bytes32 orderHash);\n    event MatchFailed(bytes32 orderHash);\n\n    struct AtomicMatch {\n        bytes32 orderHash;\n        uint256 value;\n        address[14] addrs;\n        uint[18] uints;\n        uint8[8] feeMethodsSidesKindsHowToCalls;\n        bytes calldataBuy;\n        bytes calldataSell;\n        bytes replacementPatternBuy;\n        bytes replacementPatternSell;\n        bytes staticExtradataBuy;\n        bytes staticExtradataSell;\n        uint8[2] vs;\n        bytes32[5] rssMetadata;\n    }\n\n    function matchOrders(AtomicMatch[] calldata orders, WyvernExchange _exchange)\n        public\n        payable\n    {\n        for(uint i = 0; i < orders.length; i++) {\n            AtomicMatch memory order = orders[i];\n            try _exchange.atomicMatch_{value: order.value}(\n                order.addrs, \n                order.uints, \n                order.feeMethodsSidesKindsHowToCalls, \n                order.calldataBuy, \n                order.calldataSell, \n                order.replacementPatternBuy, \n                order.replacementPatternSell, \n                order.staticExtradataBuy, \n                order.staticExtradataSell, \n                order.vs, \n                order.rssMetadata){\n                    emit MatchSuccessful(order.orderHash);\n                } catch {\n                    emit MatchFailed(order.orderHash);\n                }\n        }\n\n        (payable (msg.sender)).transfer(address(this).balance);\n    }\n}"
    },
    "contracts/WyvernExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract WyvernExchange {\n    function atomicMatch_(\n        address[14] memory addrs,\n        uint[18] memory uints,\n        uint8[8] memory feeMethodsSidesKindsHowToCalls,\n        bytes memory calldataBuy,\n        bytes memory calldataSell,\n        bytes memory replacementPatternBuy,\n        bytes memory replacementPatternSell,\n        bytes memory staticExtradataBuy,\n        bytes memory staticExtradataSell,\n        uint8[2] memory vs,\n        bytes32[5] memory rssMetadata)\n        external\n        payable\n    {\n        \n    }\n}"
    }
  }
}