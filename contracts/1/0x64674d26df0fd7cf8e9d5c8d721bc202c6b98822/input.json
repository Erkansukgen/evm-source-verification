{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/Swap.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\n\ncontract Context {\n  constructor() {}\n  // solhint-disable-previous-line no-empty-blocks\n  function _msgSender() internal view returns(address payable) {\n    return msg.sender;\n  }\n}\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface IERC20 {\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n\n\ncontract swapping is Ownable\n{\n    address tokenv1;\n    address tokenv2;\n    bool continueswapping;\n    constructor(address _tokenv1,address _tokenv2)\n    {\n          tokenv1 =_tokenv1;\n          tokenv2 =_tokenv2;\n          continueswapping = true;\n    }\n    \n    function getSwappingStatus() external view returns (bool) {\n        return continueswapping;\n    }\n\t\n\tfunction migratetoken(address token , uint256 amount) external\n    {\n        require(continueswapping,\"Swapping is disabled\");\n        require(token==tokenv1,\"Incorrect token Address\");\n        require(IERC20(tokenv1).transferFrom(msg.sender,owner(),amount),\"Unable to transfer from caller to owner\");\n        require(IERC20(tokenv2).transferFrom(owner(),msg.sender,amount),\"Unable to transfer from owner to caller\");\n    }\n    \n    function changeSwappingState(bool _allowSwapping) external onlyOwner{\n        continueswapping = _allowSwapping;\n    }\n    \n    \n}"}}}