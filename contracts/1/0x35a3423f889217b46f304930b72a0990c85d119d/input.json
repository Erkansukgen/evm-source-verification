{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/BeeHive.sol":{"content":"\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n\t/**\n\t * @dev Returns the amount of tokens in existence.\n\t */\n\tfunction totalSupply() external view returns (uint256);\n\n\t/**\n\t * @dev Returns the amount of tokens owned by `account`.\n\t */\n\tfunction balanceOf(address account) external view returns (uint256);\n\n\t/**\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\n\t *\n\t * Returns a boolean value indicating whether the operation succeeded.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n\n\t/**\n\t * @dev Returns the remaining number of tokens that `spender` will be\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\n\t * zero by default.\n\t *\n\t * This value changes when {approve} or {transferFrom} are called.\n\t */\n\tfunction allowance(address owner, address spender) external view returns (uint256);\n\n\t/**\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n\t *\n\t * Returns a boolean value indicating whether the operation succeeded.\n\t *\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\n\t * that someone may use both the old and the new allowance by unfortunate\n\t * transaction ordering. One possible solution to mitigate this race\n\t * condition is to first reduce the spender's allowance to 0 and set the\n\t * desired value afterwards:\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\t *\n\t * Emits an {Approval} event.\n\t */\n\tfunction approve(address spender, uint256 amount) external returns (bool);\n\n\t/**\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\n\t * allowance mechanism. `amount` is then deducted from the caller's\n\t * allowance.\n\t *\n\t * Returns a boolean value indicating whether the operation succeeded.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n\t/**\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\n\t * another (`to`).\n\t *\n\t * Note that `value` may be zero.\n\t */\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t/**\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n\t * a call to {approve}. `value` is the new allowance.\n\t */\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n\t/**\n\t * @dev Returns the addition of two unsigned integers, reverting on\n\t * overflow.\n\t *\n\t * Counterpart to Solidity's `+` operator.\n\t *\n\t * Requirements:\n\t *\n\t * - Addition cannot overflow.\n\t */\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\n\t * overflow (when the result is negative).\n\t *\n\t * Counterpart to Solidity's `-` operator.\n\t *\n\t * Requirements:\n\t *\n\t * - Subtraction cannot overflow.\n\t */\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\n\t}\n\n\t/**\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n\t * overflow (when the result is negative).\n\t *\n\t * Counterpart to Solidity's `-` operator.\n\t *\n\t * Requirements:\n\t *\n\t * - Subtraction cannot overflow.\n\t */\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n\t\trequire(b <= a, errorMessage);\n\t\tuint256 c = a - b;\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\n\t * overflow.\n\t *\n\t * Counterpart to Solidity's `*` operator.\n\t *\n\t * Requirements:\n\t *\n\t * - Multiplication cannot overflow.\n\t */\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint256 c = a * b;\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Returns the integer division of two unsigned integers. Reverts on\n\t * division by zero. The result is rounded towards zero.\n\t *\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\n\t * uses an invalid opcode to revert (consuming all remaining gas).\n\t *\n\t * Requirements:\n\t *\n\t * - The divisor cannot be zero.\n\t */\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn div(a, b, \"SafeMath: division by zero\");\n\t}\n\n\t/**\n\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n\t * division by zero. The result is rounded towards zero.\n\t *\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\n\t * uses an invalid opcode to revert (consuming all remaining gas).\n\t *\n\t * Requirements:\n\t *\n\t * - The divisor cannot be zero.\n\t */\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n\t\trequire(b > 0, errorMessage);\n\t\tuint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n\t * Reverts when dividing by zero.\n\t *\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\n\t * invalid opcode to revert (consuming all remaining gas).\n\t *\n\t * Requirements:\n\t *\n\t * - The divisor cannot be zero.\n\t */\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\n\t}\n\n\t/**\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n\t * Reverts with custom message when dividing by zero.\n\t *\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\n\t * invalid opcode to revert (consuming all remaining gas).\n\t *\n\t * Requirements:\n\t *\n\t * - The divisor cannot be zero.\n\t */\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n\t\trequire(b != 0, errorMessage);\n\t\treturn a % b;\n\t}\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n\t/**\n\t * @dev Returns true if `account` is a contract.\n\t *\n\t * [IMPORTANT]\n\t * ====\n\t * It is unsafe to assume that an address for which this function returns\n\t * false is an externally-owned account (EOA) and not a contract.\n\t *\n\t * Among others, `isContract` will return false for the following\n\t * types of addresses:\n\t *\n\t *  - an externally-owned account\n\t *  - a contract in construction\n\t *  - an address where a contract will be created\n\t *  - an address where a contract lived, but was destroyed\n\t * ====\n\t */\n\tfunction isContract(address account) internal view returns (bool) {\n\t\t// According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n\t\t// and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n\t\t// for accounts without code, i.e. `keccak256('')`\n\t\tbytes32 codehash;\n\t\tbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\t\t// solhint-disable-next-line no-inline-assembly\n\t\tassembly { codehash := extcodehash(account) }\n\t\treturn (codehash != accountHash && codehash != 0x0);\n\t}\n\n\t/**\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n\t * `recipient`, forwarding all available gas and reverting on errors.\n\t *\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\n\t * imposed by `transfer`, making them unable to receive funds via\n\t * `transfer`. {sendValue} removes this limitation.\n\t *\n\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n\t *\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\n\t * taken to not create reentrancy vulnerabilities. Consider using\n\t * {ReentrancyGuard} or the\n\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n\t */\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\t\t// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n\t\t(bool success, ) = recipient.call{ value: amount }(\"\");\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\n\t}\n\n\t/**\n\t * @dev Performs a Solidity function call using a low level `call`. A\n\t * plain`call` is an unsafe replacement for a function call: use this\n\t * function instead.\n\t *\n\t * If `target` reverts with a revert reason, it is bubbled up by this\n\t * function (like regular Solidity function calls).\n\t *\n\t * Returns the raw returned data. To convert to the expected return value,\n\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n\t *\n\t * Requirements:\n\t *\n\t * - `target` must be a contract.\n\t * - calling `target` with `data` must not revert.\n\t *\n\t * _Available since v3.1._\n\t */\n\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\n\t  return functionCall(target, data, \"Address: low-level call failed\");\n\t}\n\n\t/**\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n\t * `errorMessage` as a fallback revert reason when `target` reverts.\n\t *\n\t * _Available since v3.1._\n\t */\n\tfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n\t\treturn _functionCallWithValue(target, data, 0, errorMessage);\n\t}\n\n\t/**\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n\t * but also transferring `value` wei to `target`.\n\t *\n\t * Requirements:\n\t *\n\t * - the calling contract must have an ETH balance of at least `value`.\n\t * - the called Solidity function must be `payable`.\n\t *\n\t * _Available since v3.1._\n\t */\n\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n\t\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n\t}\n\n\t/**\n\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n\t * with `errorMessage` as a fallback revert reason when `target` reverts.\n\t *\n\t * _Available since v3.1._\n\t */\n\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n\t\trequire(address(this).balance >= value, \"Address: insufficient balance for call\");\n\t\treturn _functionCallWithValue(target, data, value, errorMessage);\n\t}\n\n\tfunction _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n\t\trequire(isContract(target), \"Address: call to non-contract\");\n\n\t\t// solhint-disable-next-line avoid-low-level-calls\n\t\t(bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n\t\tif (success) {\n\t\t\treturn returndata;\n\t\t} else {\n\t\t\t// Look for revert reason and bubble it up if present\n\t\t\tif (returndata.length > 0) {\n\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\n\n\t\t\t\t// solhint-disable-next-line no-inline-assembly\n\t\t\t\tassembly {\n\t\t\t\t\tlet returndata_size := mload(returndata)\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trevert(errorMessage);\n\t\t\t}\n\t\t}\n\t}\n}\n\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n\n\n\npragma solidity ^0.6.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n\tusing SafeMath for uint256;\n\tusing Address for address;\n\n\tfunction safeTransfer(IERC20 token, address to, uint256 value) internal {\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n\t}\n\n\tfunction safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n\t}\n\n\t/**\n\t * @dev Deprecated. This function has issues similar to the ones found in\n\t * {IERC20-approve}, and its usage is discouraged.\n\t *\n\t * Whenever possible, use {safeIncreaseAllowance} and\n\t * {safeDecreaseAllowance} instead.\n\t */\n\tfunction safeApprove(IERC20 token, address spender, uint256 value) internal {\n\t\t// safeApprove should only be called when setting an initial allowance,\n\t\t// or when resetting it to zero. To increase and decrease it, use\n\t\t// 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n\t\t// solhint-disable-next-line max-line-length\n\t\trequire((value == 0) || (token.allowance(address(this), spender) == 0),\n\t\t\t\"SafeERC20: approve from non-zero to non-zero allowance\"\n\t\t);\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n\t}\n\n\tfunction safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n\t\tuint256 newAllowance = token.allowance(address(this), spender).add(value);\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n\t}\n\n\tfunction safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n\t\tuint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n\t}\n\n\t/**\n\t * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n\t * on the return value: the return value is optional (but if data is returned, it must not be false).\n\t * @param token The token targeted by the call.\n\t * @param data The call data (encoded using abi.encode or one of its variants).\n\t */\n\tfunction _callOptionalReturn(IERC20 token, bytes memory data) private {\n\t\t// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n\t\t// we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n\t\t// the target address contains contract code and also asserts for success in the low-level call.\n\n\t\tbytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n\t\tif (returndata.length > 0) { // Return data is optional\n\t\t\t// solhint-disable-next-line max-line-length\n\t\t\trequire(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\t\t}\n\t}\n}\n\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\n\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n * (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n\t// To implement this library for multiple types with as little code\n\t// repetition as possible, we write it in terms of a generic Set type with\n\t// bytes32 values.\n\t// The Set implementation uses private functions, and user-facing\n\t// implementations (such as AddressSet) are just wrappers around the\n\t// underlying Set.\n\t// This means that we can only create new EnumerableSets for types that fit\n\t// in bytes32.\n\n\tstruct Set {\n\t\t// Storage of set values\n\t\tbytes32[] _values;\n\n\t\t// Position of the value in the `values` array, plus 1 because index 0\n\t\t// means a value is not in the set.\n\t\tmapping (bytes32 => uint256) _indexes;\n\t}\n\n\t/**\n\t * @dev Add a value to a set. O(1).\n\t *\n\t * Returns true if the value was added to the set, that is if it was not\n\t * already present.\n\t */\n\tfunction _add(Set storage set, bytes32 value) private returns (bool) {\n\t\tif (!_contains(set, value)) {\n\t\t\tset._values.push(value);\n\t\t\t// The value is stored at length-1, but we add 1 to all indexes\n\t\t\t// and use 0 as a sentinel value\n\t\t\tset._indexes[value] = set._values.length;\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Removes a value from a set. O(1).\n\t *\n\t * Returns true if the value was removed from the set, that is if it was\n\t * present.\n\t */\n\tfunction _remove(Set storage set, bytes32 value) private returns (bool) {\n\t\t// We read and store the value's index to prevent multiple reads from the same storage slot\n\t\tuint256 valueIndex = set._indexes[value];\n\n\t\tif (valueIndex != 0) { // Equivalent to contains(set, value)\n\t\t\t// To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n\t\t\t// the array, and then remove the last element (sometimes called as 'swap and pop').\n\t\t\t// This modifies the order of the array, as noted in {at}.\n\n\t\t\tuint256 toDeleteIndex = valueIndex - 1;\n\t\t\tuint256 lastIndex = set._values.length - 1;\n\n\t\t\t// When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n\t\t\t// so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n\t\t\tbytes32 lastvalue = set._values[lastIndex];\n\n\t\t\t// Move the last value to the index where the value to delete is\n\t\t\tset._values[toDeleteIndex] = lastvalue;\n\t\t\t// Update the index for the moved value\n\t\t\tset._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n\t\t\t// Delete the slot where the moved value was stored\n\t\t\tset._values.pop();\n\n\t\t\t// Delete the index for the deleted slot\n\t\t\tdelete set._indexes[value];\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Returns true if the value is in the set. O(1).\n\t */\n\tfunction _contains(Set storage set, bytes32 value) private view returns (bool) {\n\t\treturn set._indexes[value] != 0;\n\t}\n\n\t/**\n\t * @dev Returns the number of values on the set. O(1).\n\t */\n\tfunction _length(Set storage set) private view returns (uint256) {\n\t\treturn set._values.length;\n\t}\n\n   /**\n\t* @dev Returns the value stored at position `index` in the set. O(1).\n\t*\n\t* Note that there are no guarantees on the ordering of values inside the\n\t* array, and it may change when more values are added or removed.\n\t*\n\t* Requirements:\n\t*\n\t* - `index` must be strictly less than {length}.\n\t*/\n\tfunction _at(Set storage set, uint256 index) private view returns (bytes32) {\n\t\trequire(set._values.length > index, \"EnumerableSet: index out of bounds\");\n\t\treturn set._values[index];\n\t}\n\n\t// AddressSet\n\n\tstruct AddressSet {\n\t\tSet _inner;\n\t}\n\n\t/**\n\t * @dev Add a value to a set. O(1).\n\t *\n\t * Returns true if the value was added to the set, that is if it was not\n\t * already present.\n\t */\n\tfunction add(AddressSet storage set, address value) internal returns (bool) {\n\t\treturn _add(set._inner, bytes32(uint256(value)));\n\t}\n\n\t/**\n\t * @dev Removes a value from a set. O(1).\n\t *\n\t * Returns true if the value was removed from the set, that is if it was\n\t * present.\n\t */\n\tfunction remove(AddressSet storage set, address value) internal returns (bool) {\n\t\treturn _remove(set._inner, bytes32(uint256(value)));\n\t}\n\n\t/**\n\t * @dev Returns true if the value is in the set. O(1).\n\t */\n\tfunction contains(AddressSet storage set, address value) internal view returns (bool) {\n\t\treturn _contains(set._inner, bytes32(uint256(value)));\n\t}\n\n\t/**\n\t * @dev Returns the number of values in the set. O(1).\n\t */\n\tfunction length(AddressSet storage set) internal view returns (uint256) {\n\t\treturn _length(set._inner);\n\t}\n\n   /**\n\t* @dev Returns the value stored at position `index` in the set. O(1).\n\t*\n\t* Note that there are no guarantees on the ordering of values inside the\n\t* array, and it may change when more values are added or removed.\n\t*\n\t* Requirements:\n\t*\n\t* - `index` must be strictly less than {length}.\n\t*/\n\tfunction at(AddressSet storage set, uint256 index) internal view returns (address) {\n\t\treturn address(uint256(_at(set._inner, index)));\n\t}\n\n\n\t// UintSet\n\n\tstruct UintSet {\n\t\tSet _inner;\n\t}\n\n\t/**\n\t * @dev Add a value to a set. O(1).\n\t *\n\t * Returns true if the value was added to the set, that is if it was not\n\t * already present.\n\t */\n\tfunction add(UintSet storage set, uint256 value) internal returns (bool) {\n\t\treturn _add(set._inner, bytes32(value));\n\t}\n\n\t/**\n\t * @dev Removes a value from a set. O(1).\n\t *\n\t * Returns true if the value was removed from the set, that is if it was\n\t * present.\n\t */\n\tfunction remove(UintSet storage set, uint256 value) internal returns (bool) {\n\t\treturn _remove(set._inner, bytes32(value));\n\t}\n\n\t/**\n\t * @dev Returns true if the value is in the set. O(1).\n\t */\n\tfunction contains(UintSet storage set, uint256 value) internal view returns (bool) {\n\t\treturn _contains(set._inner, bytes32(value));\n\t}\n\n\t/**\n\t * @dev Returns the number of values on the set. O(1).\n\t */\n\tfunction length(UintSet storage set) internal view returns (uint256) {\n\t\treturn _length(set._inner);\n\t}\n\n   /**\n\t* @dev Returns the value stored at position `index` in the set. O(1).\n\t*\n\t* Note that there are no guarantees on the ordering of values inside the\n\t* array, and it may change when more values are added or removed.\n\t*\n\t* Requirements:\n\t*\n\t* - `index` must be strictly less than {length}.\n\t*/\n\tfunction at(UintSet storage set, uint256 index) internal view returns (uint256) {\n\t\treturn uint256(_at(set._inner, index));\n\t}\n}\n\n// File: @openzeppelin/contracts/GSN/Context.sol\n\n\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n\tfunction _msgSender() internal view virtual returns (address payable) {\n\t\treturn msg.sender;\n\t}\n\n\tfunction _msgData() internal view virtual returns (bytes memory) {\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\t\treturn msg.data;\n\t}\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n\taddress private _owner;\n\taddress private _timelock;\n\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\t/**\n\t * @dev Initializes the contract setting the deployer as the initial owner.\n\t */\n\tconstructor () internal {\n\t\taddress msgSender = _msgSender();\n\t\t_owner = msgSender;\n\t\t_timelock = _owner;\n\t\temit OwnershipTransferred(address(0), msgSender);\n\t}\n\n\t/**\n\t * @dev Returns the address of the current owner.\n\t */\n\tfunction owner() public view returns (address) {\n\t\treturn _owner;\n\t}\n\n\t/**\n\t * @dev Throws if called by any account other than the owner.\n\t */\n\tmodifier onlyOwner() {\n\t\trequire(_timelock == _msgSender(), \"Ownable: caller is not the owner\");\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Leaves the contract without owner. It will not be possible to call\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\n\t *\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\n\t * thereby removing any functionality that is only available to the owner.\n\t */\n\tfunction renounceOwnership() public virtual onlyOwner {\n\t\temit OwnershipTransferred(_owner, address(0));\n\t\t_owner = address(0);\n\t}\n\n\t/**\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\n\t * Can only be called by the current owner.\n\t */\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\t\temit OwnershipTransferred(_owner, newOwner);\n\t\t_owner = newOwner;\n\t}\n}\n\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n\n\n\npragma solidity ^0.6.0;\n\n\n\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n\tusing SafeMath for uint256;\n\tusing Address for address;\n\n\tmapping (address => uint256) private _balances;\n\n\tmapping (address => mapping (address => uint256)) private _allowances;\n\n\tuint256 private _totalSupply;\n\n\tstring private _name;\n\tstring private _symbol;\n\tuint8 private _decimals;\n\n\t/**\n\t * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n\t * a default value of 18.\n\t *\n\t * To select a different value for {decimals}, use {_setupDecimals}.\n\t *\n\t * All three of these values are immutable: they can only be set once during\n\t * construction.\n\t */\n\tconstructor (string memory name, string memory symbol) public {\n\t\t_name = name;\n\t\t_symbol = symbol;\n\t\t_decimals = 18;\n\t}\n\n\t/**\n\t * @dev Returns the name of the token.\n\t */\n\tfunction name() public view returns (string memory) {\n\t\treturn _name;\n\t}\n\n\t/**\n\t * @dev Returns the symbol of the token, usually a shorter version of the\n\t * name.\n\t */\n\tfunction symbol() public view returns (string memory) {\n\t\treturn _symbol;\n\t}\n\n\t/**\n\t * @dev Returns the number of decimals used to get its user representation.\n\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\n\t * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n\t *\n\t * Tokens usually opt for a value of 18, imitating the relationship between\n\t * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n\t * called.\n\t *\n\t * NOTE: This information is only used for _display_ purposes: it in\n\t * no way affects any of the arithmetic of the contract, including\n\t * {IERC20-balanceOf} and {IERC20-transfer}.\n\t */\n\tfunction decimals() public view returns (uint8) {\n\t\treturn _decimals;\n\t}\n\n\t/**\n\t * @dev See {IERC20-totalSupply}.\n\t */\n\tfunction totalSupply() public view override returns (uint256) {\n\t\treturn _totalSupply;\n\t}\n\n\t/**\n\t * @dev See {IERC20-balanceOf}.\n\t */\n\tfunction balanceOf(address account) public view override returns (uint256) {\n\t\treturn _balances[account];\n\t}\n\n\t/**\n\t * @dev See {IERC20-transfer}.\n\t *\n\t * Requirements:\n\t *\n\t * - `recipient` cannot be the zero address.\n\t * - the caller must have a balance of at least `amount`.\n\t */\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n\t\t_transfer(_msgSender(), recipient, amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev See {IERC20-allowance}.\n\t */\n\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\n\t\treturn _allowances[owner][spender];\n\t}\n\n\t/**\n\t * @dev See {IERC20-approve}.\n\t *\n\t * Requirements:\n\t *\n\t * - `spender` cannot be the zero address.\n\t */\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\n\t\t_approve(_msgSender(), spender, amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev See {IERC20-transferFrom}.\n\t *\n\t * Emits an {Approval} event indicating the updated allowance. This is not\n\t * required by the EIP. See the note at the beginning of {ERC20};\n\t *\n\t * Requirements:\n\t * - `sender` and `recipient` cannot be the zero address.\n\t * - `sender` must have a balance of at least `amount`.\n\t * - the caller must have allowance for ``sender``'s tokens of at least\n\t * `amount`.\n\t */\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n\t\t_transfer(sender, recipient, amount);\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Atomically increases the allowance granted to `spender` by the caller.\n\t *\n\t * This is an alternative to {approve} that can be used as a mitigation for\n\t * problems described in {IERC20-approve}.\n\t *\n\t * Emits an {Approval} event indicating the updated allowance.\n\t *\n\t * Requirements:\n\t *\n\t * - `spender` cannot be the zero address.\n\t */\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\n\t *\n\t * This is an alternative to {approve} that can be used as a mitigation for\n\t * problems described in {IERC20-approve}.\n\t *\n\t * Emits an {Approval} event indicating the updated allowance.\n\t *\n\t * Requirements:\n\t *\n\t * - `spender` cannot be the zero address.\n\t * - `spender` must have allowance for the caller of at least\n\t * `subtractedValue`.\n\t */\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Moves tokens `amount` from `sender` to `recipient`.\n\t *\n\t * This is internal function is equivalent to {transfer}, and can be used to\n\t * e.g. implement automatic token fees, slashing mechanisms, etc.\n\t *\n\t * Emits a {Transfer} event.\n\t *\n\t * Requirements:\n\t *\n\t * - `sender` cannot be the zero address.\n\t * - `recipient` cannot be the zero address.\n\t * - `sender` must have a balance of at least `amount`.\n\t */\n\tfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n\t\t_beforeTokenTransfer(sender, recipient, amount);\n\n\t\t_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n\t\t_balances[recipient] = _balances[recipient].add(amount);\n\t\temit Transfer(sender, recipient, amount);\n\t}\n\n\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\n\t * the total supply.\n\t *\n\t * Emits a {Transfer} event with `from` set to the zero address.\n\t *\n\t * Requirements\n\t *\n\t * - `to` cannot be the zero address.\n\t */\n\tfunction _mint(address account, uint256 amount) internal virtual {\n\t\trequire(account != address(0), \"ERC20: mint to the zero address\");\n\n\t\t_beforeTokenTransfer(address(0), account, amount);\n\n\t\t_totalSupply = _totalSupply.add(amount);\n\t\t_balances[account] = _balances[account].add(amount);\n\t\temit Transfer(address(0), account, amount);\n\t}\n\n\t/**\n\t * @dev Destroys `amount` tokens from `account`, reducing the\n\t * total supply.\n\t *\n\t * Emits a {Transfer} event with `to` set to the zero address.\n\t *\n\t * Requirements\n\t *\n\t * - `account` cannot be the zero address.\n\t * - `account` must have at least `amount` tokens.\n\t */\n\tfunction _burn(address account, uint256 amount) internal virtual {\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\n\n\t\t_beforeTokenTransfer(account, address(0), amount);\n\n\t\t_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n\t\t_totalSupply = _totalSupply.sub(amount);\n\t\temit Transfer(account, address(0), amount);\n\t}\n\n\t/**\n\t * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n\t *\n\t * This is internal function is equivalent to `approve`, and can be used to\n\t * e.g. set automatic allowances for certain subsystems, etc.\n\t *\n\t * Emits an {Approval} event.\n\t *\n\t * Requirements:\n\t *\n\t * - `owner` cannot be the zero address.\n\t * - `spender` cannot be the zero address.\n\t */\n\tfunction _approve(address owner, address spender, uint256 amount) internal virtual {\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\n\n\t\t_allowances[owner][spender] = amount;\n\t\temit Approval(owner, spender, amount);\n\t}\n\n\t/**\n\t * @dev Sets {decimals} to a value other than the default one of 18.\n\t *\n\t * WARNING: This function should only be called from the constructor. Most\n\t * applications that interact with token contracts will not expect\n\t * {decimals} to ever change, and may work incorrectly if it does.\n\t */\n\tfunction _setupDecimals(uint8 decimals_) internal {\n\t\t_decimals = decimals_;\n\t}\n\n\t/**\n\t * @dev Hook that is called before any transfer of tokens. This includes\n\t * minting and burning.\n\t *\n\t * Calling conditions:\n\t *\n\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n\t * will be to transferred to `to`.\n\t * - when `from` is zero, `amount` tokens will be minted for `to`.\n\t * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n\t * - `from` and `to` are never both zero.\n\t *\n\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n\t */\n\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n// File: contracts/HoneyToken.sol\n\npragma solidity 0.6.12;\n\n\n\n\n// HoneyToken with Governance.\ncontract HoneyToken is ERC20(\"HoneyToken\", \"HONEY\"), Ownable {\n\t/// @notice Creates `_amount` token to `_to`. Must only be called by the owner (BeeHive).\n\tfunction mint(address _to, uint256 _amount) public onlyOwner {\n\t\t_mint(_to, _amount);\n\t\t_moveDelegates(address(0), _delegates[_to], _amount);\n\t}\n\n\t// Copied and modified from YAM code:\n\t// https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\n\t// https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\n\t// Which is copied and modified from COMPOUND:\n\t// https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\n\n\t/// @notice A record of each accounts delegate\n\tmapping (address => address) internal _delegates;\n\n\t/// @notice A checkpoint for marking number of votes from a given block\n\tstruct Checkpoint {\n\t\tuint32 fromBlock;\n\t\tuint256 votes;\n\t}\n\n\t/// @notice A record of votes checkpoints for each account, by index\n\tmapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\n\n\t/// @notice The number of checkpoints for each account\n\tmapping (address => uint32) public numCheckpoints;\n\n\t/// @notice The EIP-712 typehash for the contract's domain\n\tbytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n\t/// @notice The EIP-712 typehash for the delegation struct used by the contract\n\tbytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n\t/// @notice A record of states for signing / validating signatures\n\tmapping (address => uint) public nonces;\n\n\t  /// @notice An event thats emitted when an account changes its delegate\n\tevent DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n\t/// @notice An event thats emitted when a delegate account's vote balance changes\n\tevent DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\n\n\t/**\n\t * @notice Delegate votes from `msg.sender` to `delegatee`\n\t * @param delegator The address to get delegatee for\n\t */\n\tfunction delegates(address delegator)\n\t\texternal\n\t\tview\n\t\treturns (address)\n\t{\n\t\treturn _delegates[delegator];\n\t}\n\n   /**\n\t* @notice Delegate votes from `msg.sender` to `delegatee`\n\t* @param delegatee The address to delegate votes to\n\t*/\n\tfunction delegate(address delegatee) external {\n\t\treturn _delegate(msg.sender, delegatee);\n\t}\n\n\t/**\n\t * @notice Delegates votes from signatory to `delegatee`\n\t * @param delegatee The address to delegate votes to\n\t * @param nonce The contract state required to match the signature\n\t * @param expiry The time at which to expire the signature\n\t * @param v The recovery byte of the signature\n\t * @param r Half of the ECDSA signature pair\n\t * @param s Half of the ECDSA signature pair\n\t */\n\tfunction delegateBySig(\n\t\taddress delegatee,\n\t\tuint nonce,\n\t\tuint expiry,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t)\n\t\texternal\n\t{\n\t\tbytes32 domainSeparator = keccak256(\n\t\t\tabi.encode(\n\t\t\t\tDOMAIN_TYPEHASH,\n\t\t\t\tkeccak256(bytes(name())),\n\t\t\t\tgetChainId(),\n\t\t\t\taddress(this)\n\t\t\t)\n\t\t);\n\n\t\tbytes32 structHash = keccak256(\n\t\t\tabi.encode(\n\t\t\t\tDELEGATION_TYPEHASH,\n\t\t\t\tdelegatee,\n\t\t\t\tnonce,\n\t\t\t\texpiry\n\t\t\t)\n\t\t);\n\n\t\tbytes32 digest = keccak256(\n\t\t\tabi.encodePacked(\n\t\t\t\t\"\\x19\\x01\",\n\t\t\t\tdomainSeparator,\n\t\t\t\tstructHash\n\t\t\t)\n\t\t);\n\n\t\taddress signatory = ecrecover(digest, v, r, s);\n\t\trequire(signatory != address(0), \"HONEY::delegateBySig: invalid signature\");\n\t\trequire(nonce == nonces[signatory]++, \"HONEY::delegateBySig: invalid nonce\");\n\t\trequire(now <= expiry, \"HONEY::delegateBySig: signature expired\");\n\t\treturn _delegate(signatory, delegatee);\n\t}\n\n\t/**\n\t * @notice Gets the current votes balance for `account`\n\t * @param account The address to get votes balance\n\t * @return The number of current votes for `account`\n\t */\n\tfunction getCurrentVotes(address account)\n\t\texternal\n\t\tview\n\t\treturns (uint256)\n\t{\n\t\tuint32 nCheckpoints = numCheckpoints[account];\n\t\treturn nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n\t}\n\n\t/**\n\t * @notice Determine the prior number of votes for an account as of a block number\n\t * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n\t * @param account The address of the account to check\n\t * @param blockNumber The block number to get the vote balance at\n\t * @return The number of votes the account had as of the given block\n\t */\n\tfunction getPriorVotes(address account, uint blockNumber)\n\t\texternal\n\t\tview\n\t\treturns (uint256)\n\t{\n\t\trequire(blockNumber < block.number, \"HONEY::getPriorVotes: not yet determined\");\n\n\t\tuint32 nCheckpoints = numCheckpoints[account];\n\t\tif (nCheckpoints == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// First check most recent balance\n\t\tif (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n\t\t\treturn checkpoints[account][nCheckpoints - 1].votes;\n\t\t}\n\n\t\t// Next check implicit zero balance\n\t\tif (checkpoints[account][0].fromBlock > blockNumber) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint32 lower = 0;\n\t\tuint32 upper = nCheckpoints - 1;\n\t\twhile (upper > lower) {\n\t\t\tuint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n\t\t\tCheckpoint memory cp = checkpoints[account][center];\n\t\t\tif (cp.fromBlock == blockNumber) {\n\t\t\t\treturn cp.votes;\n\t\t\t} else if (cp.fromBlock < blockNumber) {\n\t\t\t\tlower = center;\n\t\t\t} else {\n\t\t\t\tupper = center - 1;\n\t\t\t}\n\t\t}\n\t\treturn checkpoints[account][lower].votes;\n\t}\n\n\tfunction _delegate(address delegator, address delegatee)\n\t\tinternal\n\t{\n\t\taddress currentDelegate = _delegates[delegator];\n\t\tuint256 delegatorBalance = balanceOf(delegator); // balance of underlying HONEYs (not scaled);\n\t\t_delegates[delegator] = delegatee;\n\n\t\temit DelegateChanged(delegator, currentDelegate, delegatee);\n\n\t\t_moveDelegates(currentDelegate, delegatee, delegatorBalance);\n\t}\n\n\tfunction _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\n\t\tif (srcRep != dstRep && amount > 0) {\n\t\t\tif (srcRep != address(0)) {\n\t\t\t\t// decrease old representative\n\t\t\t\tuint32 srcRepNum = numCheckpoints[srcRep];\n\t\t\t\tuint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n\t\t\t\tuint256 srcRepNew = srcRepOld.sub(amount);\n\t\t\t\t_writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n\t\t\t}\n\n\t\t\tif (dstRep != address(0)) {\n\t\t\t\t// increase new representative\n\t\t\t\tuint32 dstRepNum = numCheckpoints[dstRep];\n\t\t\t\tuint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n\t\t\t\tuint256 dstRepNew = dstRepOld.add(amount);\n\t\t\t\t_writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _writeCheckpoint(\n\t\taddress delegatee,\n\t\tuint32 nCheckpoints,\n\t\tuint256 oldVotes,\n\t\tuint256 newVotes\n\t)\n\t\tinternal\n\t{\n\t\tuint32 blockNumber = safe32(block.number, \"HONEY::_writeCheckpoint: block number exceeds 32 bits\");\n\n\t\tif (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n\t\t\tcheckpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n\t\t} else {\n\t\t\tcheckpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n\t\t\tnumCheckpoints[delegatee] = nCheckpoints + 1;\n\t\t}\n\n\t\temit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n\t}\n\n\tfunction safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\n\t\trequire(n < 2**32, errorMessage);\n\t\treturn uint32(n);\n\t}\n\n\tfunction getChainId() internal pure returns (uint) {\n\t\tuint256 chainId;\n\t\tassembly { chainId := chainid() }\n\t\treturn chainId;\n\t}\n}\n\n// File: contracts/BeeHive.sol\n\npragma solidity 0.6.12;\n\n\n\n\n\n\n\n\ninterface IMigratorChef {\n\t// Perform LP token migration from legacy UniswapV2 to HoneyDex.\n\t// Take the current LP token address and return the new LP token address.\n\t// Migrator should have full access to the caller's LP token.\n\t// Return the new LP token address.\n\t//\n\t// XXX Migrator must have allowance access to UniswapV2 LP tokens.\n\t// HoneyDex must mint EXACTLY the same amount of HoneyDex LP tokens or\n\t// else something bad will happen. Traditional UniswapV2 does not\n\t// do that so be careful!\n\tfunction migrate(IERC20 token) external returns (IERC20);\n}\n\n// BeeHive is the master of Honey. He can make Honey and he is a fair guy.\n//\n// Note that it's ownable and the owner wields tremendous power. The ownership\n// will be transferred to a governance smart contract once HONEY is sufficiently\n// distributed and the community can show to govern itself.\n//\n// Have fun reading it. Hopefully it's bug-free. God bless.\ncontract BeeHive is Ownable {\n\tusing SafeMath for uint256;\n\tusing SafeERC20 for IERC20;\n\n\t// Info of each user.\n\tstruct UserInfo {\n\t\tuint256 amount;     // How many LP tokens the user has provided.\n\t\tuint256 rewardDebt; // Reward debt. See explanation below.\n\t\t//\n\t\t// We do some fancy math here. Basically, any point in time, the amount of HONEYs\n\t\t// entitled to a user but is pending to be distributed is:\n\t\t//\n\t\t//   pending reward = (user.amount * pool.accHoneyPerShare) - user.rewardDebt\n\t\t//\n\t\t// Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n\t\t//   1. The pool's `accHoneyPerShare` (and `lastRewardBlock`) gets updated.\n\t\t//   2. User receives the pending reward sent to his/her address.\n\t\t//   3. User's `amount` gets updated.\n\t\t//   4. User's `rewardDebt` gets updated.\n\t}\n\n\t// Info of each pool.\n\tstruct PoolInfo {\n\t\tIERC20 lpToken;           // Address of LP token contract.\n\t\tuint256 allocPoint;       // How many allocation points assigned to this pool. HONEYs to distribute per block.\n\t\tuint256 lastRewardBlock;  // Last block number that HONEYs distribution occurs.\n\t\tuint256 accHoneyPerShare; // Accumulated HONEYs per share, times 1e12. See below.\n\t}\n\n\t// The HONEY TOKEN!\n\tHoneyToken public honey;\n\t// Dev address.\n\taddress public devaddr;\n\t// Block number when bonus HONEY period ends.\n\tuint256 public bonusEndBlock;\n\t// HONEY tokens created per block.\n\tuint256 public honeyPerBlock;\n\t// Bonus muliplier for early honey makers.\n\tuint256 public constant BONUS_MULTIPLIER = 10;\n\t// The migrator contract. It has a lot of power. Can only be set through governance (owner).\n\tIMigratorChef public migrator;\n\n\t// Info of each pool.\n\tPoolInfo[] public poolInfo;\n\t// Info of each user that stakes LP tokens.\n\tmapping (uint256 => mapping (address => UserInfo)) public userInfo;\n\t// Total allocation points. Must be the sum of all allocation points in all pools.\n\tuint256 public totalAllocPoint = 0;\n\t// The block number when HONEY mining starts.\n\tuint256 public startBlock;\n\n\tevent Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n\tevent Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\tevent EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n\tconstructor(\n\t\tHoneyToken _honey,\n\t\taddress _devaddr,\n\t\tuint256 _honeyPerBlock,\n\t\tuint256 _startBlock,\n\t\tuint256 _bonusEndBlock\n\t) public {\n\t\thoney = _honey;\n\t\tdevaddr = _devaddr;\n\t\thoneyPerBlock = _honeyPerBlock;\n\t\tbonusEndBlock = _bonusEndBlock;\n\t\tstartBlock = _startBlock;\n\t}\n\n\tfunction poolLength() external view returns (uint256) {\n\t\treturn poolInfo.length;\n\t}\n\n\t// Add a new lp to the pool. Can only be called by the owner.\n\t// XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n\tfunction add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) public onlyOwner {\n\t\tif (_withUpdate) {\n\t\t\tmassUpdatePools();\n\t\t}\n\t\tuint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n\t\ttotalAllocPoint = totalAllocPoint.add(_allocPoint);\n\t\tpoolInfo.push(PoolInfo({\n\t\t\tlpToken: _lpToken,\n\t\t\tallocPoint: _allocPoint,\n\t\t\tlastRewardBlock: lastRewardBlock,\n\t\t\taccHoneyPerShare: 0\n\t\t}));\n\t}\n\n\t// Update the given pool's HONEY allocation point. Can only be called by the owner.\n\tfunction set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\n\t\tif (_withUpdate) {\n\t\t\tmassUpdatePools();\n\t\t}\n\t\ttotalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n\t\tpoolInfo[_pid].allocPoint = _allocPoint;\n\t}\n\n\t// Set the migrator contract. Can only be called by the owner.\n\tfunction setMigrator(IMigratorChef _migrator) public onlyOwner {\n\t\tmigrator = _migrator;\n\t}\n\n\t// Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\n\tfunction migrate(uint256 _pid) public {\n\t\trequire(address(migrator) != address(0), \"migrate: no migrator\");\n\t\tPoolInfo storage pool = poolInfo[_pid];\n\t\tIERC20 lpToken = pool.lpToken;\n\t\tuint256 bal = lpToken.balanceOf(address(this));\n\t\tlpToken.safeApprove(address(migrator), bal);\n\t\tIERC20 newLpToken = migrator.migrate(lpToken);\n\t\trequire(bal == newLpToken.balanceOf(address(this)), \"migrate: bad\");\n\t\tpool.lpToken = newLpToken;\n\t}\n\n\t// Return reward multiplier over the given _from to _to block.\n\tfunction getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n\t\tif (_to <= bonusEndBlock) {\n\t\t\treturn _to.sub(_from).mul(BONUS_MULTIPLIER);\n\t\t} else if (_from >= bonusEndBlock) {\n\t\t\treturn _to.sub(_from);\n\t\t} else {\n\t\t\treturn bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\n\t\t\t\t_to.sub(bonusEndBlock)\n\t\t\t);\n\t\t}\n\t}\n\n\t// View function to see pending HONEYs on frontend.\n\tfunction pendingHoney(uint256 _pid, address _user) external view returns (uint256) {\n\t\tPoolInfo storage pool = poolInfo[_pid];\n\t\tUserInfo storage user = userInfo[_pid][_user];\n\t\tuint256 accHoneyPerShare = pool.accHoneyPerShare;\n\t\tuint256 lpSupply = pool.lpToken.balanceOf(address(this));\n\t\tif (block.number > pool.lastRewardBlock && lpSupply != 0) {\n\t\t\tuint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n\t\t\tuint256 honeyReward = multiplier.mul(honeyPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n\t\t\taccHoneyPerShare = accHoneyPerShare.add(honeyReward.mul(1e12).div(lpSupply));\n\t\t}\n\t\treturn user.amount.mul(accHoneyPerShare).div(1e12).sub(user.rewardDebt);\n\t}\n\n\t// Update reward variables for all pools. Be careful of gas spending!\n\tfunction massUpdatePools() public {\n\t\tuint256 length = poolInfo.length;\n\t\tfor (uint256 pid = 0; pid < length; ++pid) {\n\t\t\tupdatePool(pid);\n\t\t}\n\t}\n\n\t// Update reward variables of the given pool to be up-to-date.\n\tfunction updatePool(uint256 _pid) public {\n\t\tPoolInfo storage pool = poolInfo[_pid];\n\t\tif (block.number <= pool.lastRewardBlock) {\n\t\t\treturn;\n\t\t}\n\t\tuint256 lpSupply = pool.lpToken.balanceOf(address(this));\n\t\tif (lpSupply == 0) {\n\t\t\tpool.lastRewardBlock = block.number;\n\t\t\treturn;\n\t\t}\n\t\tuint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n\t\tuint256 honeyReward = multiplier.mul(honeyPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n\t\thoney.mint(devaddr, honeyReward.div(20));\n\t\thoney.mint(address(this), honeyReward);\n\t\tpool.accHoneyPerShare = pool.accHoneyPerShare.add(honeyReward.mul(1e12).div(lpSupply));\n\t\tpool.lastRewardBlock = block.number;\n\t}\n\n\t// Deposit LP tokens to BeeHive for HONEY allocation.\n\tfunction deposit(uint256 _pid, uint256 _amount) public {\n\t\tPoolInfo storage pool = poolInfo[_pid];\n\t\tUserInfo storage user = userInfo[_pid][msg.sender];\n\t\tupdatePool(_pid);\n\t\tif (user.amount > 0) {\n\t\t\tuint256 pending = user.amount.mul(pool.accHoneyPerShare).div(1e12).sub(user.rewardDebt);\n\t\t\tif(pending > 0) {\n\t\t\t\tsafeHoneyTransfer(msg.sender, pending);\n\t\t\t}\n\t\t}\n\t\tif(_amount > 0) {\n\t\t\tpool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n\t\t\tuser.amount = user.amount.add(_amount);\n\t\t}\n\t\tuser.rewardDebt = user.amount.mul(pool.accHoneyPerShare).div(1e12);\n\t\temit Deposit(msg.sender, _pid, _amount);\n\t}\n\n\t// Withdraw LP tokens from BeeHive.\n\tfunction withdraw(uint256 _pid, uint256 _amount) public {\n\t\tPoolInfo storage pool = poolInfo[_pid];\n\t\tUserInfo storage user = userInfo[_pid][msg.sender];\n\t\trequire(user.amount >= _amount, \"withdraw: not good\");\n\t\tupdatePool(_pid);\n\t\tuint256 pending = user.amount.mul(pool.accHoneyPerShare).div(1e12).sub(user.rewardDebt);\n\t\tif(pending > 0) {\n\t\t\tsafeHoneyTransfer(msg.sender, pending);\n\t\t}\n\t\tif(_amount > 0) {\n\t\t\tuser.amount = user.amount.sub(_amount);\n\t\t\tpool.lpToken.safeTransfer(address(msg.sender), _amount);\n\t\t}\n\t\tuser.rewardDebt = user.amount.mul(pool.accHoneyPerShare).div(1e12);\n\t\temit Withdraw(msg.sender, _pid, _amount);\n\t}\n\n\t// Withdraw without caring about rewards. EMERGENCY ONLY.\n\tfunction emergencyWithdraw(uint256 _pid) public {\n\t\tPoolInfo storage pool = poolInfo[_pid];\n\t\tUserInfo storage user = userInfo[_pid][msg.sender];\n\t\tuint256 amount = user.amount;\n\t\tuser.amount = 0;\n\t\tuser.rewardDebt = 0;\n\t\tpool.lpToken.safeTransfer(address(msg.sender), amount);\n\t\temit EmergencyWithdraw(msg.sender, _pid, amount);\n\t}\n\n\t// Safe honey transfer function, just in case if rounding error causes pool to not have enough HONEYs.\n\tfunction safeHoneyTransfer(address _to, uint256 _amount) internal {\n\t\tuint256 honeyBal = honey.balanceOf(address(this));\n\t\tif (_amount > honeyBal) {\n\t\t\thoney.transfer(_to, honeyBal);\n\t\t} else {\n\t\t\thoney.transfer(_to, _amount);\n\t\t}\n\t}\n\n\t// Update dev address by the previous dev.\n\tfunction dev(address _devaddr) public {\n\t\trequire(msg.sender == devaddr, \"dev: wut?\");\n\t\tdevaddr = _devaddr;\n\t}\n}"}}}