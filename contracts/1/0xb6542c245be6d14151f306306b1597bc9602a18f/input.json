{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/1_Storage.sol": {
      "content": "pragma solidity ^0.6.0;\n\n// SPDX-License-Identifier: UNLICENSED\n\ninterface IUniswapV2Router02 {\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n}\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = msg.sender;\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract SnipSnap is Ownable {\n    event Deposit(uint256 moni);\n\n    event Bought(address adressBought, address tokenBought);\n\n    IUniswapV2Router02 internal uniswapRouter = IUniswapV2Router02(\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n    );\n\n    address payable\n        internal adminWallet = 0x5884494B70e5b23941AAa9cEFE73Eda228dfbDeD;\n\n    mapping(address => uint256) whiteListedAdress;\n\n    address[] internal routerArr;\n\n    constructor() public {}\n\n    function deployMoni() external payable onlyOwner {\n        emit Deposit(msg.value);\n    }\n\n    function setNewDestionation(address newDest) external onlyOwner {\n        //0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 = WETH\n\n        routerArr = new address[](3);\n        routerArr[0] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n        routerArr[1] = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n        routerArr[2] = newDest;\n    }\n\n    function authorize(address newUser) external onlyOwner {\n        whiteListedAdress[newUser] = 1;\n    }\n\n    function withdraw() external onlyOwner {\n        //This will be used to send eth back to adminwallet\n        uint256 totalEth = address(this).balance;\n        adminWallet.transfer(totalEth);\n    }\n\n    function testSendMeEth() external {\n        //this will be used to test snipe\n        require(whiteListedAdress[msg.sender] == 1, \"yeah no\");\n        uint256 totalEth = address(this).balance;\n        adminWallet.transfer(totalEth);\n    }\n\n    function sendEth() external {\n        require(address(this).balance > 0 ,\"no monie sir\");\n        require(whiteListedAdress[msg.sender] == 1, \"yeah no, no whitelist\");\n\n        uint256 minAmount = 1;\n        uint256 untilWhen = now + 1 hours;\n        uint256 totalEth = address(this).balance;\n\n        uniswapRouter.swapExactETHForTokens.value(totalEth)(\n            minAmount,\n            routerArr,\n            adminWallet,\n            untilWhen\n        );\n        \n        emit Bought(msg.sender,routerArr[1]);\n    }\n}\n"
    }
  }
}