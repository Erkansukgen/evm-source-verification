{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/DKN.sol": {
      "content": "pragma solidity 0.8.5;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this;\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nabstract contract Freezable is Context {\n    event Freeze(address indexed holder);\n    event Unfreeze(address indexed holder);\n\n    mapping(address => bool) private _frozenAccount;\n\n    modifier whenNotFrozen(address holder) {\n        require(!_frozenAccount[holder]);\n        _;\n    }\n\n    function isFrozen(address holder) public view virtual returns (bool frozen) {\n        return _frozenAccount[holder];\n    }\n\n    function _freezeAccount(address holder) internal virtual returns (bool success) {\n        require(!isFrozen(holder));\n        _frozenAccount[holder] = true;\n        emit Freeze(holder);\n        success = true;\n    }\n\n    function _unfreezeAccount(address holder) internal virtual returns (bool success) {\n        require(isFrozen(holder));\n        _frozenAccount[holder] = false;\n        emit Unfreeze(holder);\n        success = true;\n    }\n}\n\nabstract contract Pausable is Context {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor() {\n        _paused = false;\n    }\n\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) internal _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n    unchecked {\n        _approve(sender, _msgSender(), currentAllowance - amount);\n    }\n\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n    unchecked {\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n    }\n\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n    unchecked {\n        _balances[sender] = senderBalance - amount;\n    }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n    unchecked {\n        _balances[account] = accountBalance - amount;\n    }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\nabstract contract ERC20Burnable is Context, ERC20, Ownable {\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n    unchecked {\n        _approve(account, _msgSender(), currentAllowance - amount);\n    }\n        _burn(account, amount);\n    }\n}\n\nlibrary Roles {\n    struct Role {\n        mapping(address => bool) bearer;\n    }\n\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n        role.bearer[account] = true;\n    }\n\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n        role.bearer[account] = false;\n    }\n\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract MinterRole is Ownable {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function removeMinter(address account) public onlyOwner {\n        _removeMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\nabstract contract ERC20Mintable is ERC20, MinterRole {\n\n    function mint(address to, uint256 value) public onlyMinter returns (bool success) {\n        _mint(to, value);\n        success = true;\n    }\n}\n\nabstract contract ERC20Lockable is ERC20, Ownable {\n    struct LockInfo {\n        uint256 _releaseTime;\n        uint256 _amount;\n    }\n\n    mapping(address => LockInfo[]) internal _locks;\n    mapping(address => uint256) internal _totalLocked;\n\n    event Lock(address indexed from, uint256 amount, uint256 releaseTime);\n    event Unlock(address indexed from, uint256 amount);\n\n    modifier checkLock(address from, uint256 amount) {\n        uint256 length = _locks[from].length;\n        if (length > 0) {\n            autoUnlock(from);\n        }\n        require(_balances[from] >= _totalLocked[from] + amount, \"checkLock : balance exceed\");\n        _;\n    }\n\n    function _lock(address from, uint256 amount, uint256 releaseTime) internal returns (bool success)\n    {\n        require(\n            _balances[from] >= amount + _totalLocked[from],\n            \"lock : locked total should be smaller than balance\"\n        );\n        _totalLocked[from] = _totalLocked[from] + amount;\n        _locks[from].push(LockInfo(releaseTime, amount));\n        emit Lock(from, amount, releaseTime);\n        success = true;\n    }\n\n    function _unlock(address from, uint256 index) internal returns (bool success) {\n        LockInfo storage info = _locks[from][index];\n        _totalLocked[from] = _totalLocked[from] - info._amount;\n        emit Unlock(from, info._amount);\n        _locks[from][index] = _locks[from][_locks[from].length - 1];\n        _locks[from].pop();\n        success = true;\n    }\n\n    function lock(address recipient, uint256 amount, uint256 releaseTime) public onlyOwner returns (bool success) {\n        require(_balances[recipient] >= amount, \"There is not enough balance of holder.\");\n        _lock(recipient, amount, releaseTime);\n\n        success = true;\n    }\n\n    function autoUnlock(address from) public returns (bool success) {\n        for (uint256 i = 0; i < _locks[from].length; i++) {\n            if (_locks[from][i]._releaseTime < block.timestamp) {\n                _unlock(from, i);\n            }\n        }\n        success = true;\n    }\n\n    function unlock(address from, uint256 idx) public onlyOwner returns (bool success) {\n        require(_locks[from].length > idx, \"There is not lock info.\");\n        _unlock(from, idx);\n        success = true;\n    }\n\n    function releaseLock(address from) external onlyOwner returns (bool success){\n        require(_locks[from].length > 0, \"There is not lock info.\");\n        //        uint256 i = _locks[from].length - 1;\n        //        _unlock(from, i);\n        for (uint256 i = _locks[from].length; i > 0; i--) {\n            _unlock(from, i - 1);\n        }\n        success = true;\n    }\n\n    function transferWithLock(address recipient, uint256 amount, uint256 releaseTime) external onlyOwner returns (bool success)\n    {\n        require(recipient != address(0));\n        _transfer(msg.sender, recipient, amount);\n        _lock(recipient, amount, releaseTime);\n        success = true;\n    }\n\n    function lockInfo(address locked, uint256 index) public view returns (uint256 releaseTime, uint256 amount)\n    {\n        LockInfo memory info = _locks[locked][index];\n        releaseTime = info._releaseTime;\n        amount = info._amount;\n    }\n\n    function totalLocked(address locked) public view returns (uint256 amount, uint256 length){\n        amount = _totalLocked[locked];\n        length = _locks[locked].length;\n    }\n}\n\ncontract DKN is ERC20, Pausable, Freezable, ERC20Burnable, ERC20Mintable, ERC20Lockable {\n\n    constructor() ERC20(\"DK Network\", \"DKN\") {\n        _mint(msg.sender, 999999999 * (10 ** decimals()));\n    }\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    function freezeAccount(address holder) public onlyOwner {\n        _freezeAccount(holder);\n    }\n\n    function unfreezeAccount(address holder) public onlyOwner {\n        _unfreezeAccount(holder);\n    }\n\n    function transfer(address to, uint256 amount) public checkLock(msg.sender, amount) override returns (bool) {\n        return super.transfer(to, amount);\n    }\n\n    function transferFrom(address from, address to, uint256 amount) public checkLock(from, amount) override returns (bool) {\n        return super.transferFrom(from, to, amount);\n    }\n\n    function balanceOf(address holder) public view override returns (uint256 balance) {\n        uint256 totalBalance = super.balanceOf(holder);\n        uint256 avaliableBalance = 0;\n        (uint256 lockedBalance, uint256 lockedLength) = totalLocked(holder);\n        require(totalBalance >= lockedBalance);\n\n        if (lockedLength > 0) {\n            for (uint i = 0; i < lockedLength; i++) {\n                (uint256 releaseTime, uint256 amount) = lockInfo(holder, i);\n                if (releaseTime <= block.timestamp) {\n                    avaliableBalance += amount;\n                }\n            }\n        }\n\n        balance = totalBalance - lockedBalance + avaliableBalance;\n    }\n\n    function balanceOfTotal(address holder) public view returns (uint256 balance) {\n        balance = super.balanceOf(holder);\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal whenNotPaused whenNotFrozen(from) override {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    }
  }
}