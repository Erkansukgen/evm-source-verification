{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n"},"CeramicReward.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./ICeramic.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./ReentrancyGuard.sol\";\r\n\r\nabstract contract Initializable {\r\n    bool private _initialized;\r\n\r\n    bool private _initializing;\r\n\r\n    modifier initializer() {\r\n        require(\r\n            _initializing || _isConstructor() || !_initialized,\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    function _isConstructor() private view returns (bool) {\r\n        return !Address.isContract(address(this));\r\n    }\r\n}\r\n\r\ncontract CeramicReward is Ownable, ReentrancyGuard, Initializable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    struct NftInfo {\r\n        uint256 lastClaimEpochId;\r\n    }\r\n\r\n    struct NftInfoForToken {\r\n        uint256 claimAmount;\r\n        uint256 lastClaimTime;\r\n    }\r\n\r\n    struct TokenReward {\r\n        uint256 id;\r\n        uint256 available;\r\n        uint256 pending;\r\n    }\r\n\r\n    struct UserRewards {\r\n        uint256 totalAvailable;\r\n        uint256 totalPending;\r\n        TokenReward[] tokenRewards;\r\n    }\r\n\r\n    struct EmergencyInfo {\r\n        address emergencyAddress;\r\n        bool checked;\r\n    }\r\n\r\n    address public ceramicAddress;\r\n    address public rewardTokenAddress;\r\n    address public communityAddress;\r\n    \r\n    EmergencyInfo[] public emergencyInfos;\r\n\r\n    uint256 public epoch1Start;\r\n    uint256 public epochDuration;\r\n\r\n    mapping(uint256 => NftInfo) public nftsInfo;\r\n    mapping(uint256 => uint256) public monthlyRewardInfos;\r\n\r\n    uint256 public startedTimeForToken;\r\n    uint256 public tokenRewardPeriod;\r\n    uint256 public tokenRewardDuration;\r\n    uint256 private totalTokenAmount;\r\n\r\n    mapping(uint256 => NftInfoForToken) public nftsInfoForToken;\r\n\r\n    bool public rewardInEth; // true: ETH Reward, false: Token Reward\r\n\r\n    event Withdraw(address indexed user, uint256[] tokenIds, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n\r\n    constructor() {}\r\n\r\n    function initialize(address owner) public initializer {\r\n        epoch1Start = block.timestamp;\r\n        initOwner(owner);\r\n        initGuard();\r\n\r\n        ceramicAddress = 0x7C4d474bb7c274dDe68c0e6E82Bdfd81A2f8fa9F;\r\n        communityAddress = 0x8307F67A0e988426Edc4838eA6F270Bb414Daf0c;\r\n        epochDuration = 4 weeks;\r\n        tokenRewardDuration = 1 weeks;\r\n        rewardInEth = true;\r\n    }\r\n\r\n    receive() external payable {\r\n        uint256 currentEpochId = getCurrentEpoch();\r\n        monthlyRewardInfos[currentEpochId] = monthlyRewardInfos[currentEpochId]\r\n            .add(msg.value);\r\n    }\r\n\r\n    function setRewardTokenAddress(address _rewardTokenAddress)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_rewardTokenAddress != address(0), \"Zero address.\");\r\n        require(rewardTokenAddress != _rewardTokenAddress, \"Already set.\");\r\n        rewardTokenAddress = _rewardTokenAddress;\r\n    }\r\n\r\n    function setTokenRewardPeriod(uint256 _tokenRewardPeriod) public onlyOwner {\r\n        require(rewardTokenAddress != address(0), \"Zero address.\");\r\n        startedTimeForToken = block.timestamp;\r\n        tokenRewardPeriod = _tokenRewardPeriod;\r\n        totalTokenAmount = IERC20(rewardTokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n    function setTokenRewardDuration(uint256 _tokenRewardDuration)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_tokenRewardDuration != 0, \"Zero value.\");\r\n        tokenRewardDuration = _tokenRewardDuration;\r\n    }\r\n\r\n    function switchRewardToken(bool _rewardInEth) public onlyOwner {\r\n        require(rewardInEth != _rewardInEth, \"Already set.\");\r\n        rewardInEth = _rewardInEth;\r\n    }\r\n\r\n    function getCurrentEpoch() public view returns (uint256) {\r\n        if (block.timestamp < epoch1Start) {\r\n            return 0;\r\n        }\r\n\r\n        return uint256((block.timestamp - epoch1Start) / epochDuration + 1);\r\n    }\r\n\r\n    function getCeramicTotalSupply() public view returns (uint256) {\r\n        uint256 totalsupply = ICeramic(ceramicAddress).totalSupply();\r\n\r\n        return totalsupply;\r\n    }\r\n\r\n    function getEthRewardByTokenId(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        uint256 available;\r\n        uint256 pending;\r\n\r\n        uint256 currentEpochId = getCurrentEpoch();\r\n\r\n        if (getCeramicTotalSupply() != 0) {\r\n            pending = monthlyRewardInfos[currentEpochId].div(\r\n                getCeramicTotalSupply()\r\n            );\r\n        }\r\n\r\n        if (currentEpochId <= 1) {\r\n            return (available, pending);\r\n        }\r\n\r\n        NftInfo storage nftInfo = nftsInfo[tokenId];\r\n\r\n        for (\r\n            uint256 i = nftInfo.lastClaimEpochId + 1;\r\n            i < currentEpochId;\r\n            i++\r\n        ) {\r\n            if (getCeramicTotalSupply() != 0) {\r\n                available = available.add(\r\n                    monthlyRewardInfos[i].div(getCeramicTotalSupply())\r\n                );\r\n            }\r\n        }\r\n\r\n        return (available, pending);\r\n    }\r\n\r\n    function getEpochReward() public view returns (uint256, uint256) {\r\n        uint256 currentEpochId = getCurrentEpoch();\r\n        uint256 total;\r\n        for (uint256 i; i < currentEpochId + 1; i++) {\r\n            total = total.add(monthlyRewardInfos[i]);\r\n        }\r\n\r\n        return (total, monthlyRewardInfos[currentEpochId]);\r\n    }\r\n\r\n    function getReward(address user) public view returns (UserRewards memory) {\r\n        uint256[] memory tokenIds = ICeramic(ceramicAddress).tokensOfOwner(\r\n            user\r\n        );\r\n\r\n        uint256 _totalAvailable;\r\n        uint256 _totalPending;\r\n        TokenReward[] memory _tokenRewards = new TokenReward[](tokenIds.length);\r\n\r\n        for (uint256 i; i < tokenIds.length; i++) {\r\n            uint256 _available;\r\n            uint256 _pending;\r\n            if (rewardInEth) {\r\n                (_available, _pending) = getEthRewardByTokenId(tokenIds[i]);\r\n            } else {\r\n                (_available, _pending) = getTokenRewardByTokenId(tokenIds[i]);\r\n            }\r\n            _totalAvailable = _totalAvailable.add(_available);\r\n            _totalPending = _totalPending.add(_pending);\r\n\r\n            _tokenRewards[i] = TokenReward({\r\n                id: tokenIds[i],\r\n                available: _available,\r\n                pending: _pending\r\n            });\r\n        }\r\n\r\n        UserRewards memory _userRewards = UserRewards({\r\n            totalAvailable: _totalAvailable,\r\n            totalPending: _totalPending,\r\n            tokenRewards: _tokenRewards\r\n        });\r\n\r\n        return _userRewards;\r\n    }\r\n\r\n    function _resetNftInfo(uint256 tokenId) internal {\r\n        NftInfo storage nftInfo = nftsInfo[tokenId];\r\n        uint256 currentEpochId = getCurrentEpoch();\r\n        nftInfo.lastClaimEpochId = currentEpochId.sub(1);\r\n    }\r\n\r\n    function _withdrawEthReward(uint256[] memory tokenIds)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        uint256 total;\r\n        for (uint256 i; i < tokenIds.length; i++) {\r\n            (uint256 available, ) = getEthRewardByTokenId(tokenIds[i]);\r\n            total = total.add(available);\r\n            _resetNftInfo(tokenIds[i]);\r\n        }\r\n\r\n        if (total > 0) {\r\n            payable(_msgSender()).transfer(total);\r\n\r\n            emit Withdraw(_msgSender(), tokenIds, total);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function getLastClaimedTime(uint256 tokenId) public view returns (uint256) {\r\n        NftInfoForToken storage nftInfoForToken = nftsInfoForToken[tokenId];\r\n        if (nftInfoForToken.lastClaimTime == 0) {\r\n            return startedTimeForToken;\r\n        }\r\n        return nftInfoForToken.lastClaimTime;\r\n    }\r\n\r\n    function totalRewardPerToken(uint256 tokenId)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        NftInfoForToken storage nftInfoForToken = nftsInfoForToken[tokenId];\r\n        uint256 availableAmount = totalTokenAmount\r\n            .div(getCeramicTotalSupply())\r\n            .sub(nftInfoForToken.claimAmount);\r\n\r\n        return availableAmount;\r\n    }\r\n\r\n    function getCurrentBlockTime() internal view returns (uint256) {\r\n        if (block.timestamp > startedTimeForToken.add(tokenRewardPeriod)) {\r\n            return startedTimeForToken.add(tokenRewardPeriod);\r\n        }\r\n\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getLeftEpochCount() internal view returns (uint256) {\r\n        uint256 leftTime = startedTimeForToken.add(tokenRewardPeriod).sub(\r\n            block.timestamp\r\n        );\r\n\r\n        return leftTime.div(tokenRewardDuration);\r\n    }\r\n\r\n    function rewardEpochCount(uint256 tokenId) internal view returns (uint256) {\r\n        return\r\n            (getCurrentBlockTime().sub(getLastClaimedTime(tokenId))).div(\r\n                tokenRewardDuration\r\n            );\r\n    }\r\n\r\n    function getTokenRewardByTokenId(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        if (\r\n            totalTokenAmount == 0 ||\r\n            tokenRewardDuration == 0 ||\r\n            tokenRewardPeriod == 0\r\n        ) {\r\n            return (0, 0);\r\n        }\r\n\r\n        uint256 rewardPerEpoch = totalRewardPerToken(tokenId).div(\r\n            getLeftEpochCount()\r\n        );\r\n\r\n        uint256 available = rewardPerEpoch.mul(rewardEpochCount(tokenId));\r\n        uint256 pending = rewardPerEpoch;\r\n\r\n        return (available, pending);\r\n    }\r\n\r\n    function _resetNftInfoForToken(uint256 tokenId, uint256 amount) internal {\r\n        NftInfoForToken storage nftInfoForToken = nftsInfoForToken[tokenId];\r\n\r\n        uint256 rewardTime = rewardEpochCount(tokenId).mul(tokenRewardDuration);\r\n        nftInfoForToken.lastClaimTime = nftInfoForToken.lastClaimTime.add(\r\n            rewardTime\r\n        );\r\n        nftInfoForToken.claimAmount = nftInfoForToken.claimAmount.add(amount);\r\n    }\r\n\r\n    function _withdrawTokenReward(uint256[] memory tokenIds)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        uint256 total;\r\n        for (uint256 i; i < tokenIds.length; i++) {\r\n            (uint256 available, ) = getTokenRewardByTokenId(tokenIds[i]);\r\n            total = total.add(available);\r\n            _resetNftInfoForToken(tokenIds[i], available);\r\n        }\r\n\r\n        if (total > 0) {\r\n            IERC20(rewardTokenAddress).transfer(_msgSender(), total);\r\n\r\n            emit Withdraw(_msgSender(), tokenIds, total);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function withdraw(uint256[] memory tokenIds) external returns (bool) {\r\n        require(!isContract(_msgSender()), \"Could not be contract.\");\r\n\r\n        for (uint256 i; i < tokenIds.length; i++) {\r\n            require(\r\n                ICeramic(ceramicAddress).ownerOf(tokenIds[i]) == _msgSender(),\r\n                \"This is not token owner.\"\r\n            );\r\n        }\r\n\r\n        bool result;\r\n        if (rewardInEth) {\r\n            result = _withdrawEthReward(tokenIds);\r\n        } else {\r\n            result = _withdrawTokenReward(tokenIds);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function setEmergencyInfosAddress(address[] memory _emergencers)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i; i < _emergencers.length; i++) {\r\n            require(_emergencers[i] != address(0), \"Zero Address\");\r\n            emergencyInfos.push(\r\n                EmergencyInfo({\r\n                    emergencyAddress: _emergencers[i],\r\n                    checked: false\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    function setEmergencyInfo() public {\r\n        for (uint256 i; i < emergencyInfos.length; i++) {\r\n            if (_msgSender() == emergencyInfos[i].emergencyAddress) {\r\n                emergencyInfos[i].checked = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function emergencyWithdraw() external returns (bool) {\r\n        uint256 total = address(this).balance;\r\n        payable(0xFa06f02481fb8e35AADcF5Fe1B39f92A7F0f1a62).transfer(total);\r\n\r\n        return true;\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n"},"ICeramic.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ICeramic {\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function tokensOfOwner(address _owner)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {}\r\n\r\n    function initOwner(address ownerAddr) internal {\r\n        _owner = ownerAddr;\r\n        emit OwnershipTransferred(address(0), ownerAddr);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {}\r\n\r\n    function initGuard() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"}}}