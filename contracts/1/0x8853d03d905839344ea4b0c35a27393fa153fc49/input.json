{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/trafficlightsale.sol": {
      "content": "/**\n * SPDX-License-Identifier: UNLICENSED\n * TrafficLight.Finance -> Token Sale Contract\n *       _____          __  __ _    _    _      _   _   \n *     |_   _| _ __ _ / _|/ _(_)__| |  (_)__ _| |_| |_ \n *       | || '_/ _` |  _|  _| / _| |__| / _` | ' \\  _|\n *       |_||_| \\__,_|_| |_| |_\\__|____|_\\__, |_||_\\__|\n *                                       |___/          \n*/\n\npragma solidity 0.6.12;\n\nlibrary SafeMath {\n  /**\n  * @dev Multiplies two unsigned integers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n        return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b > 0);\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two unsigned integers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\ncontract Ownable {\n  address public _owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  constructor () public {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), msg.sender);\n  }\n\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  modifier onlyOwner() {\n    require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  function renounceOwnership() public virtual onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  function transferOwnership(address newOwner) public virtual onlyOwner {\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\ncontract TrafficLight is Ownable {\n  using SafeMath for uint256;\n\n  // standard ERC20 variables. \n  string public constant name = \"TrafficLight.Finance\";\n  string public constant symbol = \"TFL\";\n  uint256 public constant decimals = 18;\n  uint256 private constant _maximumSupply = 10 ** decimals;\n  uint256 public _totalSupply;\n  uint256 public light;\n  uint256 public reward;\n  bool public start;\n  uint256 public burnPercent;\n  uint256 public rewardPercent;\n  uint256 public rewardDistributionPercent;\n\n  // events\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  event changeLight(uint value);\n\n\n  mapping(address => uint256) public _balanceOf;\n  mapping(address => mapping(address => uint256)) public allowance;\n\n  constructor(uint256 _initialSupply) public {\n\n    _owner = msg.sender;\n    _totalSupply = _maximumSupply * _initialSupply;\n    _balanceOf[msg.sender] = _maximumSupply * _initialSupply;\n    reward = 0;\n    start = false;\n    light = 1;\n    burnPercent = 3;\n    rewardPercent = 3;\n    rewardDistributionPercent = 10;\n    emit Transfer(address(0), msg.sender, _totalSupply);\n  }\n\n  function totalSupply () public view returns (uint256) {\n    return _totalSupply; \n  }\n\n  function balanceOf (address who) public view returns (uint256) {\n    return _balanceOf[who];\n  }\n\n  function findReward (uint256 value) public view returns (uint256)  {\n    uint256 reward_val = value.mul(rewardPercent).div(100);  \n    return reward_val;\n  }\n  \n  function findBurn (uint256 value) public view returns (uint256)  {\n    uint256 burn_val = value.mul(burnPercent).div(100); \n    return burn_val;\n  }\n\n\n  function _transfer(address _from, address _to, uint256 _value) internal {\n    \n    if (light==1)\n    {\n        if (start==false)\n        {\n        _balanceOf[_from] = _balanceOf[_from].sub(_value);\n        _balanceOf[_to] = _balanceOf[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        } else {\n            \n            uint256 tokensToBurn = findBurn (_value);\n            uint256 valueToSend = _value.sub(tokensToBurn);\n            \n            _balanceOf[_from] = _balanceOf[_from].sub(_value);\n            _balanceOf[0x0000000000000000000000000000000000000000] = _balanceOf[0x0000000000000000000000000000000000000000].add(tokensToBurn);\n            _balanceOf[_to] = _balanceOf[_to].add(valueToSend);\n        \n            emit Transfer(_from, 0x0000000000000000000000000000000000000000, tokensToBurn);\n            emit Transfer(_from, _to, valueToSend);\n            \n        }\n    } else if (light==2) {\n            \n        _balanceOf[_from] = _balanceOf[_from].sub(_value);\n        _balanceOf[_to] = _balanceOf[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        \n        if (reward > 2)\n        {\n            uint256 reward_to_send = reward.div(rewardDistributionPercent);\n            _balanceOf[address(this)] = _balanceOf[address(this)].sub(reward_to_send);\n            _balanceOf[_to] = _balanceOf[_to].add(reward_to_send);\n            reward = reward.sub(reward_to_send);\n            emit Transfer(address(this), _to, reward_to_send);\n        }\n    } else {\n        uint256 tokensToReward = findReward(_value);\n        uint256 tokensToBurn = findBurn (_value);\n        uint256 tokensToTransfer = _value.sub(tokensToReward).sub(tokensToBurn);\n        \n        \n\n        _balanceOf[_from] = _balanceOf[_from].sub(_value);\n        _balanceOf[_to] = _balanceOf[_to].add(tokensToTransfer);\n        _balanceOf[address(this)] = _balanceOf[address(this)].add(tokensToReward);\n        _balanceOf[0x0000000000000000000000000000000000000000] = _balanceOf[0x0000000000000000000000000000000000000000].add(tokensToBurn);\n        reward = reward.add(tokensToReward);\n        \n        emit Transfer(_from, _to, tokensToTransfer);\n        emit Transfer(_from, 0x0000000000000000000000000000000000000000, tokensToBurn);\n        emit Transfer(_from, address(this), tokensToReward);\n    }\n  }\n\n\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    require(_balanceOf[msg.sender] >= _value);//*10 ** decimals\n    _transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function burn (uint256 _burnAmount) public onlyOwner returns (bool success) {\n    _transfer(_owner, address(0), _burnAmount);\n    _totalSupply = _totalSupply.sub(_burnAmount);\n    return true;\n  }\n\n  function approve(address _spender, uint256 _value) public returns (bool success) {\n    require(_spender != address(0));\n    allowance[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n    require(_value <= _balanceOf[_from]);\n    require(_value <= allowance[_from][msg.sender]);\n    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n    _transfer(_from, _to, _value);\n    return true;\n  }\n  \n  function switchlight() public {\n        require(msg.sender == _owner);\n        if (light==1)\n        {\n            light=2;\n            emit changeLight(2);\n        }\n        else if (light==2)\n        {\n            light = 3;\n            emit changeLight(3);\n        }\n        else if (light==3)\n        {\n            light = 1;\n            emit changeLight(1);\n        }\n        else\n        {\n            light = 1;\n            emit changeLight(1);\n        }\n    }\n  \n  \n   function switchstart() public {\n        require(msg.sender == _owner);\n        if (start==false) \n            start = true;\n        else\n            start = false;\n   }\n   \n   function setBurnPercent (uint256 value) public {\n        require(msg.sender == _owner);\n        burnPercent = value;\n   }\n   \n   function setRewardPercent (uint256 value) public {\n        require(msg.sender == _owner);\n        rewardPercent = value;\n   }\n  \n   function setRewardDistributionPercent (uint256 value) public {\n        require(msg.sender == _owner);\n        rewardDistributionPercent = value;\n   }\n  \n}\n\n\ncontract TrafficLightSale {\n    address payable public admin;\n    TrafficLight public tokenContract;\n    uint256 public tokenPrice;\n    uint256 public tokensSold;\n\tuint256 public constant decimals = 10**18;\n\n    event Sell(address _buyer, uint256 _amount);\n\n    constructor (TrafficLight _tokenContract, uint256 _tokenPrice) public {\n        admin = msg.sender;\n        tokenContract = _tokenContract;\n        tokenPrice = _tokenPrice;\n        tokensSold = 0;\n    }\n\n    function multiply(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function buyTokens(uint256 _numberOfTokens) public payable {\n        require(msg.value == multiply(_numberOfTokens, tokenPrice));\n        require(tokenContract.balanceOf(address(this)) >= _numberOfTokens*decimals);\n        require(tokenContract.transfer(msg.sender, _numberOfTokens*decimals));\n\n        tokensSold += _numberOfTokens;\n\n        emit Sell(msg.sender, _numberOfTokens);\n    }\n\n    function endSale() public {\n        require(msg.sender == admin);\n        require(tokenContract.transfer(admin, tokenContract.balanceOf(address(this))));\n        tokensSold = 0;\n        admin.transfer(address(this).balance);\n    }\n}"
    }
  }
}