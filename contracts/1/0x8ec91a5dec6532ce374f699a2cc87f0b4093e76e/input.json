{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/BasisDollar/OracleMultiPairV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IBPool is IERC20 {\n    function version() external view returns(uint);\n    function swapExactAmountIn(address, uint, address, uint, uint) external returns (uint, uint);\n\n    function swapExactAmountOut(address, uint, address, uint, uint) external returns (uint, uint);\n\n    function calcInGivenOut(uint, uint, uint, uint, uint, uint) external pure returns (uint);\n\n    function calcOutGivenIn(uint, uint, uint, uint, uint, uint) external pure returns (uint);\n\n    function getDenormalizedWeight(address) external view returns (uint);\n\n    function swapFee() external view returns (uint);\n\n    function setSwapFee(uint _swapFee) external;\n\n    function bind(address token, uint balance, uint denorm) external;\n\n    function rebind(address token, uint balance, uint denorm) external;\n\n    function finalize(\n        uint _swapFee,\n        uint _initPoolSupply,\n        address[] calldata _bindTokens,\n        uint[] calldata _bindDenorms\n    ) external;\n\n    function setPublicSwap(bool _publicSwap) external;\n    function setController(address _controller) external;\n    function setExchangeProxy(address _exchangeProxy) external;\n    function getFinalTokens() external view returns (address[] memory tokens);\n\n\n    function getTotalDenormalizedWeight() external view returns (uint);\n\n    function getBalance(address token) external view returns (uint);\n\n\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\n    function joinPoolFor(address account, uint rewardAmountOut, uint[] calldata maxAmountsIn) external;\n    function joinswapPoolAmountOut(address tokenIn, uint poolAmountOut, uint maxAmountIn) external returns (uint tokenAmountIn);\n\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\n    function exitswapPoolAmountIn(address tokenOut, uint poolAmountIn, uint minAmountOut) external returns (uint tokenAmountOut);\n    function exitswapExternAmountOut(address tokenOut, uint tokenAmountOut, uint maxPoolAmountIn) external returns (uint poolAmountIn);\n    function joinswapExternAmountIn(\n        address tokenIn,\n        uint tokenAmountIn,\n        uint minPoolAmountOut\n    ) external returns (uint poolAmountOut);\n    function finalizeRewardFundInfo(address _rewardFund, uint _unstakingFrozenTime) external;\n    function addRewardPool(IERC20 _rewardToken, uint256 _startBlock, uint256 _endRewardBlock, uint256 _rewardPerBlock,\n        uint256 _lockRewardPercent, uint256 _startVestingBlock, uint256 _endVestingBlock) external;\n    function isBound(address t) external view returns (bool);\n    function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint spotPrice);\n}\n\nlibrary Babylonian {\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n        // else z = 0\n    }\n}\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\nlibrary FixedPoint {\n    // range: [0, 2**112 - 1]\n    // resolution: 1 / 2**112\n    struct uq112x112 {\n        uint224 _x;\n    }\n\n    // range: [0, 2**144 - 1]\n    // resolution: 1 / 2**112\n    struct uq144x112 {\n        uint256 _x;\n    }\n\n    uint8 private constant RESOLUTION = 112;\n    uint256 private constant Q112 = uint256(1) << RESOLUTION;\n    uint256 private constant Q224 = Q112 << RESOLUTION;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n        return uq112x112(uint224(x) << RESOLUTION);\n    }\n\n    // encodes a uint144 as a UQ144x112\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n        return uq144x112(uint256(x) << RESOLUTION);\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n        require(x != 0, \"FixedPoint: DIV_BY_ZERO\");\n        return uq112x112(self._x / uint224(x));\n    }\n\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\n    // reverts on overflow\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\n        uint256 z;\n        require(y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x), \"FixedPoint: MULTIPLICATION_OVERFLOW\");\n        return uq144x112(z);\n    }\n\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n    // equivalent to encode(numerator).div(denominator)\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n    }\n\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\n        return uint112(self._x >> RESOLUTION);\n    }\n\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n        return uint144(self._x >> RESOLUTION);\n    }\n\n    // take the reciprocal of a UQ112x112\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n        require(self._x != 0, \"FixedPoint: ZERO_RECIPROCAL\");\n        return uq112x112(uint224(Q224 / self._x));\n    }\n\n    // square root of a UQ112x112\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\n    }\n}\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n// range: [0, 2**112 - 1]\n// resolution: 1 / 2**112\nlibrary UQ112x112 {\n    uint224 constant Q112 = 2**112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112; // never overflows\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}\n\ninterface IDecimals {\n    function decimals() external view returns (uint8);\n}\n\n// fixed window oracle that recomputes the average price for the entire epochPeriod once every epochPeriod\n// note that the price average is only guaranteed to be over at least 1 epochPeriod, but may be over a longer epochPeriod\n// @dev This version 2 supports querying twap with shorted period (ie 2hrs for BSDB reference price)\ncontract OracleMultiPairV2 is Ownable {\n    using FixedPoint for *;\n    using SafeMath for uint256;\n    using UQ112x112 for uint224;\n\n    /* ========= CONSTANT VARIABLES ======== */\n\n    uint256 public constant BPOOL_BONE = 10**18;\n    uint256 public constant ORACLE_RESERVE_MINIMUM = 10000 ether; // $10,000\n\n    /* ========== STATE VARIABLES ========== */\n\n    // governance\n    address public operator;\n\n    // epoch\n    uint256 public startTime;\n    uint256 public lastEpochTime;\n    uint256 public epoch; // for display only\n    uint256 public epochPeriod;\n\n    // 2-hours update\n    uint256 public lastUpdateHour;\n    uint256 public updatePeriod;\n\n    mapping(uint256 => uint112) public epochPrice;\n\n    // BPool\n    address public mainToken;\n    address[] public sideTokens;\n    uint256[] public sideTokenDecimals;\n    IBPool[] public pools;\n\n    // Pool price for update in cumulative epochPeriod\n    uint32 public blockTimestampCumulativeLast;\n    uint public priceCumulative;\n\n    // oracle\n    uint32 public blockTimestampLast;\n    uint256 public priceCumulativeLast;\n    FixedPoint.uq112x112 public priceAverage;\n\n    event Updated(uint256 priceCumulativeLast);\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        address[] memory _pools,\n        address _mainToken,\n        address[] memory _sideTokens,\n        uint256 _epoch,\n        uint256 _epochPeriod,\n        uint256 _lastEpochTime,\n        uint256 _updatePeriod,\n        uint256 _lastUpdateHour\n    ) public {\n        require(_pools.length == _sideTokens.length, \"ERR_LENGTH_MISMATCH\");\n\n        mainToken = _mainToken;\n\n        for (uint256 i = 0; i < _pools.length; i++) {\n            IBPool pool = IBPool(_pools[i]);\n            require(pool.isBound(_mainToken) && pool.isBound(_sideTokens[i]), \"!bound\");\n            require(pool.getBalance(_mainToken) != 0 && pool.getBalance(_sideTokens[i]) != 0, \"OracleMultiPair: NO_RESERVES\"); // ensure that there's liquidity in the pool\n\n            pools.push(pool);\n            sideTokens.push(_sideTokens[i]);\n            sideTokenDecimals.push(IDecimals(_sideTokens[i]).decimals());\n        }\n\n        epoch = _epoch;\n        epochPeriod = _epochPeriod;\n        lastEpochTime = _lastEpochTime;\n        lastUpdateHour = _lastUpdateHour;\n        updatePeriod = _updatePeriod;\n\n        operator = msg.sender;\n    }\n\n    /* ========== GOVERNANCE ========== */\n\n    function setOperator(address _operator) external onlyOperator {\n        operator = _operator;\n    }\n\n    function setEpoch(uint256 _epoch) external onlyOperator {\n        epoch = _epoch;\n    }\n\n    function setEpochPeriod(uint256 _epochPeriod) external onlyOperator {\n        require(_epochPeriod >= 1 hours && _epochPeriod <= 48 hours, '_epochPeriod out of range');\n        epochPeriod = _epochPeriod;\n    }\n\n    function setLastUpdateHour(uint256 _lastUpdateHour) external onlyOperator {\n        require(_lastUpdateHour % 3600 == 0, '_lastUpdateHour is not valid');\n        lastUpdateHour = _lastUpdateHour;\n    }\n\n    function setUpdatePeriod(uint256 _updatePeriod) external onlyOperator {\n        require(_updatePeriod >= 1 hours && _updatePeriod <= epochPeriod, '_updatePeriod out of range');\n        updatePeriod = _updatePeriod;\n    }\n\n    function addPool(address _pool, address _sideToken) public onlyOperator {\n        IBPool pool = IBPool(_pool);\n        require(pool.isBound(mainToken) && pool.isBound(_sideToken), \"!bound\");\n        require(pool.getBalance(mainToken) != 0 && pool.getBalance(_sideToken) != 0, \"OracleMultiPair: NO_RESERVES\");\n        // ensure that there's liquidity in the pool\n\n        pools.push(pool);\n        sideTokens.push(_sideToken);\n        sideTokenDecimals.push(IDecimals(_sideToken).decimals());\n    }\n\n    function removePool(address _pool, address _sideToken) public onlyOperator {\n        uint last = pools.length - 1;\n\n        for (uint256 i = 0; i < pools.length; i++) {\n            if (address(pools[i]) == _pool && sideTokens[i] == _sideToken) {\n                pools[i] = pools[last];\n                sideTokens[i] = sideTokens[last];\n                sideTokenDecimals[i] = sideTokenDecimals[last];\n\n                pools.pop();\n                sideTokens.pop();\n                sideTokenDecimals.pop();\n\n                break;\n            }\n        }\n    }\n\n    /* =================== Modifier =================== */\n\n    modifier checkEpoch {\n        uint256 _nextEpochPoint = nextEpochPoint();\n        require(now >= _nextEpochPoint, \"OracleMultiPair: not opened yet\");\n\n        _;\n\n        for (;;) {\n            lastEpochTime = _nextEpochPoint;\n            ++epoch;\n            _nextEpochPoint = nextEpochPoint();\n            if (now < _nextEpochPoint) break;\n        }\n    }\n\n    modifier onlyOperator() {\n        require(operator == msg.sender, \"OracleMultiPair: caller is not the operator\");\n        _;\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    function nextEpochPoint() public view returns (uint256) {\n        return lastEpochTime.add(epochPeriod);\n    }\n\n    function nextUpdateHour() public view returns (uint256) {\n        return lastUpdateHour.add(updatePeriod);\n    }\n\n    /* ========== MUTABLE FUNCTIONS ========== */\n    // update reserves and, on the first call per block, price accumulators\n    function updateCumulative() public {\n        uint256 _nextUpdateHour = lastUpdateHour.add(updatePeriod);\n        if (now >= _nextUpdateHour) {\n            uint totalMainPriceWeight;\n            uint totalMainPoolBal;\n\n            for (uint256 i = 0; i < pools.length; i++) {\n                uint _decimalFactor = 10 ** (uint256(18).sub(sideTokenDecimals[i]));\n                uint tokenMainPrice = pools[i].getSpotPrice(sideTokens[i], mainToken).mul(_decimalFactor);\n                require(tokenMainPrice != 0, \"!price\");\n\n                uint reserveBal = pools[i].getBalance(sideTokens[i]).mul(_decimalFactor);\n                require(reserveBal >= ORACLE_RESERVE_MINIMUM, \"!min reserve\");\n\n                uint tokenBal = pools[i].getBalance(mainToken);\n                totalMainPriceWeight = totalMainPriceWeight.add(tokenMainPrice.mul(tokenBal).div(BPOOL_BONE));\n                totalMainPoolBal = totalMainPoolBal.add(tokenBal);\n            }\n\n            require(totalMainPriceWeight <= uint112(- 1) && totalMainPoolBal <= uint112(- 1), 'BPool: OVERFLOW');\n            uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\n            uint32 timeElapsed = blockTimestamp - blockTimestampCumulativeLast; // overflow is desired\n\n            if (timeElapsed > 0 && totalMainPoolBal != 0) {\n                // * never overflows, and + overflow is desired\n                priceCumulative += uint(UQ112x112.encode(uint112(totalMainPriceWeight)).uqdiv(uint112(totalMainPoolBal))) * timeElapsed;\n\n                blockTimestampCumulativeLast = blockTimestamp;\n            }\n\n            lastUpdateHour = _nextUpdateHour;\n        }\n    }\n\n    /** @dev Updates 1-day EMA price.  */\n    function update() external checkEpoch {\n        updateCumulative();\n\n        uint32 timeElapsed = blockTimestampCumulativeLast - blockTimestampLast; // overflow is desired\n\n        if (timeElapsed == 0) {\n            // prevent divided by zero\n            return;\n        }\n\n        // overflow is desired, casting never truncates\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n        priceAverage = FixedPoint.uq112x112(uint224((priceCumulative - priceCumulativeLast) / timeElapsed));\n\n        priceCumulativeLast = priceCumulative;\n        blockTimestampLast = blockTimestampCumulativeLast;\n\n        epochPrice[epoch] = priceAverage.decode();\n        emit Updated(priceCumulative);\n    }\n\n    // note this will always return 0 before update has been called successfully for the first time.\n    function consult(address token, uint256 amountIn) external view returns (uint144 amountOut) {\n        require(token == mainToken, \"OracleMultiPair: INVALID_TOKEN\");\n        require(now.sub(blockTimestampLast) <= epochPeriod, \"OracleMultiPair: Price out-of-date\");\n        amountOut = priceAverage.mul(amountIn).decode144();\n    }\n\n    function twap(uint256 _amountIn) external view returns (uint144) {\n        uint32 timeElapsed = blockTimestampCumulativeLast - blockTimestampLast;\n        return (timeElapsed == 0) ? priceAverage.mul(_amountIn).decode144() : FixedPoint.uq112x112(uint224((priceCumulative - priceCumulativeLast) / timeElapsed)).mul(_amountIn).decode144();\n    }\n\n    function governanceRecoverUnsupported(IERC20 _token, uint256 _amount, address _to) external onlyOperator {\n        _token.transfer(_to, _amount);\n    }\n}\n"
    }
  }
}