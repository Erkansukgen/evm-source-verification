{
  "language": "Solidity",
  "sources": {
    "Vesting.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\n// Copyright (c) WildCredit - All rights reserved\n// https://twitter.com/WildCredit\n\npragma solidity 0.8.6;\n\nimport \"IERC20.sol\";\n\nimport \"SafeOwnable.sol\";\n\ncontract Vesting is SafeOwnable {\n\n  IERC20 public asset;\n\n  uint public startTime;\n  uint public durationTime;\n  uint public released;\n\n  constructor(\n    IERC20 _asset,\n    uint _startTime,\n    uint _durationTime\n  ) {\n\n    require(_asset != IERC20(address(0)), \"Vesting: _asset is zero address\");\n    require(_startTime + _durationTime > block.timestamp, \"Vesting: final time is before current time\");\n    require(_durationTime > 0, \"Vesting: _duration == 0\");\n\n    asset = _asset;\n    startTime = _startTime;\n    durationTime = _durationTime;\n  }\n\n  function release(uint _amount) external onlyOwner {\n\n    require(block.timestamp > startTime, \"Vesting: not started yet\");\n    uint unreleased = releasableAmount();\n\n    require(unreleased > 0, \"Vesting: no assets are due\");\n    require(unreleased >= _amount, \"Vesting: _amount too high\");\n\n    released += _amount;\n    asset.transfer(owner, _amount);\n  }\n\n  function releasableAmount() public view returns (uint) {\n    return vestedAmount() - released;\n  }\n\n  function vestedAmount() public view returns (uint) {\n    uint currentBalance = asset.balanceOf(address(this));\n    uint totalBalance = currentBalance + released;\n\n    if (block.timestamp >= startTime + durationTime) {\n      return totalBalance;\n    } else {\n      return totalBalance * (block.timestamp - startTime) / durationTime;\n    }\n  }\n}"
    },
    "IERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.7.0;\n\ninterface IERC20 {\n  function totalSupply() external view returns (uint);\n  function balanceOf(address account) external view returns(uint);\n  function transfer(address recipient, uint256 amount) external returns(bool);\n  function allowance(address owner, address spender) external view returns(uint);\n  function decimals() external view returns(uint8);\n  function approve(address spender, uint amount) external returns(bool);\n  function transferFrom(address sender, address recipient, uint amount) external returns(bool);\n}"
    },
    "SafeOwnable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.8.6;\n\nimport \"IOwnable.sol\";\n\ncontract SafeOwnable is IOwnable {\n\n  uint public constant RENOUNCE_TIMEOUT = 1 hours;\n\n  address public override owner;\n  address public pendingOwner;\n  uint public renouncedAt;\n\n  event OwnershipTransferInitiated(address indexed previousOwner, address indexed newOwner);\n  event OwnershipTransferConfirmed(address indexed previousOwner, address indexed newOwner);\n\n  constructor() {\n    owner = msg.sender;\n    emit OwnershipTransferConfirmed(address(0), msg.sender);\n  }\n\n  modifier onlyOwner() {\n    require(isOwner(), \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  function isOwner() public view returns (bool) {\n    return msg.sender == owner;\n  }\n\n  function transferOwnership(address _newOwner) external override onlyOwner {\n    require(_newOwner != address(0), \"Ownable: new owner is the zero address\");\n    emit OwnershipTransferInitiated(owner, _newOwner);\n    pendingOwner = _newOwner;\n  }\n\n  function acceptOwnership() external override {\n    require(msg.sender == pendingOwner, \"Ownable: caller is not pending owner\");\n    emit OwnershipTransferConfirmed(msg.sender, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n\n  function initiateRenounceOwnership() external onlyOwner {\n    require(renouncedAt == 0, \"Ownable: already initiated\");\n    renouncedAt = block.timestamp;\n  }\n\n  function acceptRenounceOwnership() external onlyOwner {\n    require(renouncedAt > 0, \"Ownable: not initiated\");\n    require(block.timestamp - renouncedAt > RENOUNCE_TIMEOUT, \"Ownable: too early\");\n    owner = address(0);\n    pendingOwner = address(0);\n    renouncedAt = 0;\n  }\n\n  function cancelRenounceOwnership() external onlyOwner {\n    require(renouncedAt > 0, \"Ownable: not initiated\");\n    renouncedAt = 0;\n  }\n}"
    },
    "IOwnable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.8.6;\n\ninterface IOwnable {\n  function owner() external view returns(address);\n  function transferOwnership(address _newOwner) external;\n  function acceptOwnership() external;\n}"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}