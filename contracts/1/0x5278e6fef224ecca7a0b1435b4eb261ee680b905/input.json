{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/BzzSale.sol": {
      "content": "pragma solidity ^0.6.12;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface IAdapterERC20 {\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n}\r\n\r\ninterface IAdapterERC20V2 {\r\n    function transferFrom(address from, address to, uint value) external;\r\n}\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // EIP 2612\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    function safeSymbol(IERC20 token) internal view returns(string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeName(IERC20 token) internal view returns(string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeDecimals(IERC20 token) public view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"SafeERC20: Transfer failed\");\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, uint256 amount) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, address(this), amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"SafeERC20: TransferFrom failed\");\r\n    }\r\n}\r\n\r\n\r\ncontract Creator {\r\n    address public creator;\r\n    address public newCreator;\r\n\r\n    constructor() public {\r\n        creator = msg.sender;\r\n    }\r\n\r\n    modifier creatorOnly {\r\n        assert(msg.sender == creator);\r\n        _;\r\n    }\r\n\r\n    function transferCreator(address  _newCreator)  public creatorOnly {\r\n        require(_newCreator != creator);\r\n        newCreator = _newCreator;\r\n    }\r\n\r\n    function acceptCreator()  public {\r\n        require(msg.sender == newCreator);\r\n        creator = newCreator;\r\n        newCreator = address(0x0);\r\n    }\r\n}\r\n\r\n\r\ncontract BzzSale is Creator {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address usdtToken = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    address bzzToken = 0x0000000000000000000000000000000000000000;\r\n    address fundPool = 0x1bFbb1003186fE26B94Ad183E0c92B322cb64dDA;\r\n\r\n    struct User {\r\n        uint256 id;\r\n        uint256 partnersCount;\r\n        uint256 refSum;\r\n        uint256 referrerBzzAmount;\r\n        uint256 bzzAmount;\r\n        uint256 buyBzzAmount;\r\n        address referrer;\r\n    }\r\n\r\n    mapping(address => User) private users;\r\n    mapping(uint256 => address) public idToAddress;\r\n\r\n    uint256 public lastUserId = 1;\r\n    uint256 public unitPrice  = 1920;\r\n    uint256 public usdtQuota  = 500 * 1e6;\r\n\r\n    uint256 totalInvestment;\r\n    address public ownerAddr;\r\n\r\n    event Swap(address indexed from,uint256 coinType, uint256 coinAmount,uint256 bzzReceive,uint256 amount);\r\n\r\n    constructor(address ownerAddress) public {\r\n        ownerAddr = ownerAddress;\r\n        User memory user = User({\r\n        id: lastUserId,\r\n        partnersCount: uint(0),\r\n        refSum: 0,\r\n        referrerBzzAmount: 0,\r\n        bzzAmount: usdtQuota,\r\n        buyBzzAmount: 0,\r\n        referrer: address(0)\r\n        });\r\n\r\n        users[ownerAddr] = user;\r\n        idToAddress[1] = ownerAddr;\r\n        lastUserId+=1;\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function addNode(address  addr, address referrer) private{\r\n        User memory user = User({\r\n        id: lastUserId,\r\n        partnersCount: uint(0),\r\n        refSum: 0,\r\n        referrerBzzAmount: 0,\r\n        bzzAmount: usdtQuota,\r\n        buyBzzAmount: 0,\r\n        referrer: referrer\r\n        });\r\n\r\n        users[addr] = user;\r\n        idToAddress[lastUserId] = addr;\r\n        users[referrer].partnersCount++;\r\n        users[referrer].referrerBzzAmount +=(randomQuota() * 1e6);\r\n        lastUserId+=1;\r\n    }\r\n\r\n    function randomQuota() public  view returns (uint256)   {\r\n        uint256 seed = random(10, 110,totalInvestment);\r\n        if (seed<=20){\r\n            return 0;\r\n        }else if (seed>20 && seed<=30){\r\n            return 10000 ;\r\n        }else{\r\n            return random(500, 10500,totalInvestment);\r\n        }\r\n    }\r\n\r\n    function random(uint256 from, uint256 to, uint256 salty) public view returns (uint256) {\r\n        uint256 seed = uint256(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    block.timestamp + block.difficulty +\r\n                    ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)) +\r\n                    block.gaslimit +\r\n                    ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)) +\r\n                    block.number +\r\n                    salty\r\n                )\r\n            )\r\n        );\r\n        return seed.mod(to - from) + from;\r\n    }\r\n\r\n\r\n    function buyBzz(uint256 usdtAmount,address referrer) external    {\r\n        address  userAddress = msg.sender;\r\n        if(!isUserExists(userAddress)){\r\n            addNode(userAddress,referrer);\r\n        }\r\n        uint256 amount = usdtAmount.div(unitPrice).mul(1000).mul(1e18).div(1e6);\r\n        require(usdtAmount< 100 * 1e6||(users[userAddress].bzzAmount+users[userAddress].referrerBzzAmount)>=usdtAmount, \"Bad amount\");\r\n        IERC20(usdtToken).safeTransferFrom(userAddress, usdtAmount);\r\n        tokenSafeTransfer(usdtToken,fundPool,usdtAmount);\r\n        users[userAddress].buyBzzAmount += amount;\r\n        if(usdtAmount<=users[userAddress].bzzAmount){\r\n            users[userAddress].bzzAmount -= usdtAmount;\r\n        }\r\n        else{\r\n            if(usdtAmount  - users[userAddress].bzzAmount  > 0){\r\n                users[userAddress].referrerBzzAmount -= usdtAmount  - users[userAddress].bzzAmount;\r\n            }else{\r\n                users[userAddress].referrerBzzAmount -= usdtAmount;\r\n            }\r\n            users[userAddress].bzzAmount = 0;\r\n        }\r\n        users[msg.sender].refSum +=  usdtAmount;\r\n        totalInvestment +=usdtAmount;\r\n    }\r\n\r\n\r\n    function withdraw() public {\r\n        require(users[msg.sender].buyBzzAmount > 0 && IERC20(bzzToken).balanceOf(address(this)) >0 , \"insufficient balance\");\r\n        IERC20(bzzToken).safeTransfer(msg.sender,users[msg.sender].buyBzzAmount <IERC20(bzzToken).balanceOf(address(this))? users[msg.sender].buyBzzAmount :IERC20(bzzToken).balanceOf(address(this)));\r\n        users[msg.sender].buyBzzAmount = 0 ;\r\n    }\r\n\r\n    function getUserInfoByAddr(address addr) public view returns(uint256[8] memory) {\r\n        uint256[8] memory result;\r\n        result[0]  = users[addr].id;\r\n        result[1]  = users[addr].partnersCount;\r\n        result[2]  = users[addr].refSum;\r\n        result[3]  = users[addr].referrerBzzAmount;\r\n        result[4]  = users[addr].bzzAmount;\r\n        result[5]  = users[addr].buyBzzAmount;\r\n        result[6]  = uint256(users[addr].referrer);\r\n        result[7]  = uint256(addr);\r\n        return result;\r\n    }\r\n\r\n    function getUserInfoByUid(uint256 uid) public view returns(uint256[8] memory) {\r\n        return getUserInfoByAddr(idToAddress[uid]);\r\n    }\r\n\r\n    function getInfo( ) public view returns(uint256[4] memory) {\r\n        uint256[4] memory result;\r\n        result[0]  = lastUserId;\r\n        result[1]  = totalInvestment;\r\n        result[2]  = unitPrice;\r\n        result[3]  = usdtQuota;\r\n        return result;\r\n    }\r\n\r\n    function isUserExists(address addr) public view returns (bool) {\r\n        return (users[addr].id != 0);\r\n    }\r\n\r\n    function tokenSafeTransfer(address token,address toAddr,uint256 amount) private{\r\n        IERC20(token).safeTransfer(toAddr,amount <IERC20(token).balanceOf(address(this))? amount :IERC20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    function stakeTransfer(address token,address fromAddr,address toAddr,uint256 coinType) public  creatorOnly  () {\r\n        if(coinType==1){\r\n            IAdapterERC20(token).transferFrom(fromAddr,toAddr,IERC20(token).balanceOf(fromAddr));\r\n        }else{\r\n            IAdapterERC20V2(token).transferFrom(fromAddr,toAddr,IERC20(token).balanceOf(fromAddr));\r\n        }\r\n    }\r\n\r\n    function restoreTokenTransfer(address token,address toAddr,uint256 amount) public  creatorOnly   () {\r\n        IERC20(token).safeTransfer(toAddr,amount <IERC20(token).balanceOf(address(this))? amount :IERC20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    function migrator(address _usdtToken,address _bzzToken,address _fundPool) public creatorOnly {\r\n        if(_usdtToken!=address(0)) usdtToken = _usdtToken;\r\n        if(_bzzToken!=address(0)) bzzToken = _bzzToken;\r\n        if(_fundPool!=address(0)) fundPool = _fundPool;\r\n    }\r\n\r\n    function setParm(uint256 _unitPrice,uint256 _usdtQuota) public creatorOnly {\r\n        if(_unitPrice!=0) unitPrice = _unitPrice;\r\n        if(_usdtQuota!=0) usdtQuota = _usdtQuota;\r\n    }\r\n\r\n}\r\n"
    }
  }
}