{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/ethsend_v1.sol": {
      "content": "pragma solidity >=0.4.22 <0.7.0;\r\n\r\ncontract ethsend {\r\n    address payable public operator; \r\n    struct balance_struct {\r\n       uint256 balance;\r\n    }\r\n    mapping(bytes32 => balance_struct) public emailBalance;\r\n\r\nfunction addressToEmail(string memory recipEml) public payable {\r\n    require(msg.value>0, \"Amount must be greater than zero\");\r\n    bytes memory rb = bytes(recipEml);\r\n    emailBalance[keccak256(rb)].balance += msg.value;\r\n}\r\n\r\nfunction emailToEmail(string memory fromEml, string memory recipEml, uint256 amount_wei) public payable {\r\n    require(msg.sender == operator, \"Only operator can call this function\");\r\n    bytes memory fb = bytes(fromEml);\r\n    bytes memory rb = bytes(recipEml);\r\n    require(emailBalance[keccak256(fb)].balance>=amount_wei, \"Insufficient balance\"); \r\n    emailBalance[keccak256(fb)].balance -= amount_wei;\r\n    emailBalance[keccak256(rb)].balance += amount_wei;\r\n}\r\n\r\nfunction emailToAddress(string memory fromEml, address payable toAddress, uint256 amount_wei) public payable {\r\n    require(msg.sender == operator, \"Only operator can call this function\");\r\n    bytes memory fb = bytes(fromEml);\r\n    require(emailBalance[keccak256(fb)].balance>=amount_wei, \"Insufficient balance\"); \r\n    emailBalance[keccak256(fb)].balance -= amount_wei;\r\n    toAddress.transfer(amount_wei);\r\n}\r\n\r\nfunction checkBalance(string memory email) public returns (uint256 balance_wei) {\r\n    require(msg.sender == operator, \"Only operator can call this function\");\r\n    bytes memory eb = bytes(email);\r\n    return(emailBalance[keccak256(eb)].balance); \r\n}\r\n\r\nfunction test(string memory param) public returns (bytes32 res) {\r\n    bytes memory rslt = bytes(param);\r\n    bytes32 rslt_enc = keccak256(rslt);\r\n    return(rslt_enc);\r\n}\r\n\r\nfunction withdraw(address payable towhom, uint amount_wei) public {\r\n        require(msg.sender == operator, \"Only operator can call this function\");\r\n        towhom.transfer(amount_wei);\r\n    }\r\n    \r\n\r\nfunction changeOperator(address payable new_operator) public {\r\n        require(msg.sender == operator, \"Only operator can call this function\");\r\n        operator = new_operator;\r\n    }\r\n\r\n    constructor() public {\r\n        operator = msg.sender;\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n"
    }
  }
}