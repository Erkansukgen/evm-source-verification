{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200000},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/Counters.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"base/DS.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface DS {\r\n  enum ContractNames { EStore, RIStore, Rauction, I0NS, ZZZ_LAST }\r\n  enum BulkActs { Mint, Transfer, Burn, Feature }\r\n  enum FeatureStyles { ROYALTY, FIXED, MIXED }\r\n\r\n  struct TokenData {\r\n    uint256 tokenId;\r\n    TokenMeta tokenMeta;\r\n    AuctionItem auctionItem;\r\n    bool auctionLive;\r\n  }\r\n\r\n  struct TokenMeta {\r\n    address minter;\r\n    string minterName;\r\n    address currentOwner;\r\n    string currentOwnerName;\r\n    bool burnable;\r\n    bool valid;\r\n    FeatureDetails featureDetails;\r\n    XNFT xNft;\r\n  }\r\n\r\n  struct XNFT {\r\n    bool valid;\r\n    address xOwner;\r\n    address xContract;\r\n    uint256 xTokenId;\r\n  }\r\n\r\n  struct FeatureDetails {\r\n    uint featurePrice;\r\n    uint featureRoyalty;\r\n    uint featuredTokenId;\r\n    uint featureStartTime;\r\n    FeatureStyles style;\r\n    bool available;\r\n    bool live;\r\n    bool valid;\r\n    bool autoRestart;\r\n  }\r\n\r\n  struct AuctionItem {\r\n    AuctionParams auctionParams;\r\n    FeaturedParams featuredParams;\r\n\r\n    // Check struct is init\r\n    bool valid;\r\n\r\n    address highestBidder;\r\n    string highestBidderName;\r\n    uint256 highestBid;\r\n\r\n    uint256 balance;\r\n\r\n    uint256 startedOn;\r\n\r\n    // Item auction ended and settled\r\n    bool settled;\r\n  }\r\n\r\n  struct AuctionParams {\r\n    uint startTime;\r\n    uint endTime;\r\n    uint duration;\r\n    bool bidToBegin;\r\n\r\n    uint buyPrice;\r\n    uint buyThreshold;\r\n\r\n    bool featured;\r\n\r\n    uint minBid;\r\n    uint8 reward;\r\n    uint8 incrementRate;\r\n    uint8 royalty;\r\n\r\n    uint8 houseFees;\r\n\r\n    bool restart;\r\n  }\r\n\r\n  struct FeaturedParams {\r\n    uint featureRoyalty;\r\n    uint featureSpotId;\r\n    bool valid;\r\n  }\r\n\r\n  struct Validators {\r\n    uint256 minAuctionTime;\r\n    uint256 maxAuctionTime;\r\n    uint256 minMinBid;\r\n    uint8 minReward;\r\n    uint8 maxReward;\r\n    uint8 minRoyalty;\r\n    uint8 maxRoyalty;\r\n    uint8 minIncrement;\r\n    uint8 maxIncrement;\r\n    uint8 houseFees;\r\n    uint256 minBuyPrice;\r\n    uint256 minBuyThreshold;\r\n  }\r\n\r\n  struct Profits {\r\n    bool share;\r\n    uint256 shareStartId;\r\n    uint256 shareEndId;\r\n  }\r\n}\r\n"},"base/Foundation.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface Foundation {\r\n    function fees() external view returns (uint256);\r\n//    function contractPaused() external view returns (bool);\r\n    function circuitBreaker() external;\r\n    function close() external;\r\n    function isAddressAdmin(address sender) external view returns (bool);\r\n}\r\n"},"base/Foundation_Impl.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"./Foundation.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\nabstract contract Foundation_Impl is Foundation, Ownable, Initializable {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint8;\r\n\r\n    uint256 public override fees = 0.1 ether;\r\n\r\n    bool /*public override */contractPaused = false;\r\n\r\n    address constant RESERVE_ADDR = address(3);\r\n    address constant PROFITS_ADDR = address(6);\r\n    address constant DEPOSIT_ADDR = address(9);\r\n\r\n    function isAddressAdmin(address sender) override virtual public view returns (bool);\r\n\r\n    modifier isAdmin() virtual {\r\n        require(isAddressAdmin(msg.sender), \"403\");\r\n        _;\r\n    }\r\n\r\n    function circuitBreaker() override public isAdmin { // onlyOwner can call\r\n        if (!contractPaused) { contractPaused = true; }\r\n        else { contractPaused = false; }\r\n    }\r\n    // If the contract is paused, stop the modified function\r\n    // Attach this modifier to all public functions\r\n    modifier checkIfPaused() {\r\n        require(!contractPaused || isAddressAdmin(msg.sender), \"405\");\r\n        _;\r\n    }\r\n\r\n    modifier strlen(string memory str, uint256 max) {\r\n        require(bytes(str).length <= max, \"429\");\r\n        _;\r\n    }\r\n\r\n    uint8 public maxNameLength = 16;\r\n    function setMaxNameLength(uint8 _max) public isAdmin {\r\n        maxNameLength = _max;\r\n    }\r\n\r\n    function close() override virtual public onlyOwner {\r\n        (bool success, ) = payable(owner()).call{value: address(this).balance}('');\r\n        require(success, \"\");\r\n    }\r\n\r\n    receive() virtual external payable {\r\n    }\r\n\r\n    fallback() external payable {\r\n\r\n    }\r\n}\r\n"},"ions/ERC721_Remote_Store.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\nimport \"../store/RIStore_Impl.sol\";\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\nabstract contract ERC721_RS is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    RIStore _ristore;\r\n    EternalStore _estore;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC721).interfaceId\r\n        || interfaceId == type(IERC721Metadata).interfaceId\r\n        || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"430\");\r\n//        return _ristore.tokenBalances(owner);\r\n        return _estore.uIntStorage(keccak256(abi.encodePacked(\"tokenBalance\", owner)));\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _estore.addressStorage(keccak256(abi.encodePacked(\"tokenOwner\", tokenId)));//.tokenOwners(tokenId);\r\n        require(owner != address(0), \"431\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"432\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0\r\n            ? string(abi.encodePacked(baseURI, tokenId.toString(), \".json\"))\r\n            : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\r\n     * in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"433\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"434\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"435\");\r\n        return _estore.addressStorage(keccak256(abi.encodePacked(\"tokenApproval\", tokenId)));\r\n//        return _ristore.tokenApprovals(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"436\");\r\n\r\n        _ristore.setTokenOperatorApproval(_msgSender(), operator, approved);\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n//        return _ristore.tokenOperatorApproval(owner, operator);\r\n        return _estore.boolStorage(keccak256(abi.encodePacked(\"tokenOperatorApproval\", owner, operator)));\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"437\");\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"437\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"438\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n//        return _ristore.tokenOwners(tokenId) != address(0);\r\n        return _estore.addressStorage(keccak256(abi.encodePacked(\"tokenOwner\", tokenId))) != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"439\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || _estore.isAddressAdmin(spender)\r\n            || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"438\");\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"440\");\r\n        require(!_exists(tokenId), \"441\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _ristore.updateTokenBalance(to, 1);\r\n        _ristore.setTokenOwner(tokenId, to);\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _ristore.updateTokenBalance(owner, 0);\r\n        _ristore.setTokenOwner(tokenId, address(0));\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ownerOf(tokenId) == from, \"442\");\r\n        require(to != address(0), \"443\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _ristore.updateTokenBalance(from, 0);\r\n        _ristore.updateTokenBalance(to, 1);\r\n        _ristore.setTokenOwner(tokenId, to);\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _estore.setAddress(keccak256(abi.encodePacked(\"tokenApproval\", tokenId)), to);\r\n//        _ristore.setTokenApproval(tokenId, to);\r\n        emit Approval(ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return ret bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n    private returns (bool ret) {\r\n        ret = true;\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"438\");\r\n                } else {\r\n                    // solhint-disable-next-line no-inline-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\r\n}\r\n"},"ions/I0NS.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\r\nimport \"../base/Foundation.sol\";\r\nimport \"../rauction/Rauction.sol\";\r\nimport \"../store/RIStore.sol\";\r\n\r\ninterface I0NS is Foundation, IERC721, IERC721Metadata {\r\n\r\n  function init(EternalStore _estore, RIStore _store, Rauction _rauction) external;\r\n\r\n  function setRIStore(RIStore) external;\r\n  function setRauction(Rauction _rauction) external;\r\n\r\n  /// Returns tokenId\r\n  function mint(address to, string calldata _minterName, bool burnable) external payable returns (uint256);\r\n\r\n  /// Returns feesCharged, admin only call\r\n  function mintId(uint tokenId, DS.TokenMeta memory/*address to, string calldata _minterName*/) external payable returns (uint256);\r\n\r\n  function burn(uint) external;\r\n\r\n  function nameTransfer(address from, address to, string memory receiver, uint256 tokenId) external;\r\n\r\n  function checkApproval(uint256 tokenId, address sender) external view returns (bool);\r\n\r\n\r\n  function setBaseURI(string memory _baseUri) external;\r\n\r\n  function updateFeatureDetails(uint256 featureTokenId, DS.FeatureDetails memory _details) external payable;\r\n\r\n  function featureItem(uint featureTokenId, uint tokenId) external payable returns (uint256);\r\n\r\n  function bulkUpdateFeatures(DS.FeatureDetails[] calldata details) external;\r\n}\r\n"},"ions/I0NS_Impl.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"./I0NS.sol\";\r\nimport \"./ERC721_Remote_Store.sol\";\r\nimport \"../base/DS.sol\";\r\nimport \"../store/RS_Foundation_Impl.sol\";\r\n\r\ncontract I0NS_Impl is RS_Foundation_Impl, I0NS, ERC721_RS {\r\n  Rauction rauction;\r\n\r\n  string baseUri;\r\n\r\n  constructor() ERC721_RS(\"I0NS\", \"I0NS\") { }\r\n\r\n  function init(EternalStore estore_, RIStore store_, Rauction _rauctionAddr) override public initializer {\r\n    estore = estore_;\r\n    ristore = store_;\r\n    _estore = estore_;\r\n    _ristore = store_;\r\n    rauction = _rauctionAddr;\r\n\r\n    baseUri = \"ipfs://ipns/rauction.house/i0n/\";\r\n  }\r\n\r\n  modifier onlyApproved(uint256 tokenId) {\r\n    require(_isApprovedOrOwner(msg.sender, tokenId), \"437\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyApprovedSender(uint256 tokenId, address sender) {\r\n    require(_isApprovedOrOwner(sender, tokenId), \"437\");\r\n    _;\r\n  }\r\n\r\n  function checkApproval(uint256 tokenId, address sender) override public view onlyApprovedSender(tokenId, sender) returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  function setRauction(Rauction _rauctionAddr) override public isAdmin {\r\n    rauction = _rauctionAddr;\r\n  }\r\n  function setRIStore(RIStore _store) override public virtual isAdmin {\r\n    ristore = _store;\r\n  }\r\n\r\n  function mint(address to, string calldata _minterName, bool burnable) override public payable checkIfPaused strlen(_minterName, maxNameLength) returns (uint256) {\r\n    uint256 tokenId = ristore.generateTokenId();\r\n    DS.TokenMeta memory meta;\r\n    meta.minter = to;\r\n    meta.minterName = _minterName;\r\n    meta.burnable = burnable;\r\n    mintId(tokenId, meta);\r\n    return tokenId;\r\n  }\r\n\r\n  function mintId(uint tokenId, DS.TokenMeta memory meta) override public payable checkIfPaused isAdmin strlen(meta.minterName, maxNameLength) returns (uint256) {\r\n    uint charged;\r\n    if (!isAddressAdmin(msg.sender) || !estore.minters(meta.minter)) {\r\n      charged = takeFees(fees);\r\n    }\r\n    _mint(meta.minter, tokenId);\r\n\r\n    meta.currentOwner = meta.minter;\r\n    meta.currentOwnerName = meta.minterName;\r\n    meta.valid = true;\r\n\r\n    estore.updateTokenMeta(tokenId, meta);\r\n    return charged;\r\n  }\r\n\r\n  function setBaseURI(string calldata _baseUri) override public onlyOwner {\r\n    baseUri = _baseUri;\r\n  }\r\n\r\n  function burn(uint256 tokenId) override public onlyApproved(tokenId) {\r\n    DS.TokenMeta memory meta = estore.getTokenMeta(tokenId);\r\n    require(meta.valid && meta.burnable, \"485\");\r\n    if (meta.xNft.valid) estore.xTransfer(tokenId, meta.xNft.xOwner);\r\n    _burn(tokenId);\r\n  }\r\n\r\n  function _baseURI() override internal view virtual returns (string memory) {\r\n    return baseUri;\r\n  }\r\n\r\n  function _beforeTokenTransfer(address from, address to, uint256 tokenId) override internal virtual {\r\n    require(!ristore.isLive(tokenId), \"407\");\r\n    from; to;\r\n  }\r\n\r\n  function _transfer(address from, address to, uint256 tokenId) override internal {\r\n    DS.TokenMeta memory meta = estore.getTokenMeta(tokenId);\r\n    if (meta.valid && meta.xNft.valid) {\r\n      estore.xTransfer(tokenId, to);\r\n      _burn(tokenId);\r\n//    super._transfer(from, address(0), tokenId);\r\n    } else {\r\n      super._transfer(from, to, tokenId);\r\n    }\r\n  }\r\n\r\n  function nameTransfer(address from, address to, string calldata receiver, uint256 tokenId)\r\n      override public onlyApproved(tokenId) strlen(receiver, maxNameLength) {\r\n    safeTransferFrom(from, to, tokenId);\r\n    ristore.transferOwner(to, receiver, tokenId);\r\n  }\r\n\r\n  function updateFeatureDetails(uint256 featureTokenId, DS.FeatureDetails calldata _details) override public onlyApproved(featureTokenId) checkIfPaused payable {\r\n    DS.TokenMeta memory meta = estore.getTokenMeta(featureTokenId);\r\n    require(meta.valid, \"404\");\r\n    DS.FeatureDetails memory featureSpot = meta.featureDetails;\r\n    bool isAdmin = isAddressAdmin(msg.sender);\r\n    if (!featureSpot.valid) {\r\n      require(isAdmin, \"403\");\r\n      featureSpot.valid = true;\r\n      featureSpot.live = false;\r\n    } else {\r\n      checkApproval(featureTokenId, msg.sender);\r\n      if (isAdmin) featureSpot.live =_details.live;\r\n      else require(!featureSpot.live, \"411\");\r\n    }\r\n\r\n    featureSpot.available = _details.available;\r\n    featureSpot.featurePrice = _details.featurePrice;\r\n    featureSpot.featureRoyalty = _details.featureRoyalty;\r\n    featureSpot.style = _details.style;\r\n    meta.featureDetails = featureSpot;\r\n    estore.updateTokenMeta(featureTokenId, meta);\r\n  }\r\n\r\n  function featureItem(uint featureTokenId, uint tokenId) override public checkIfPaused payable returns (uint256) {\r\n    DS.TokenMeta memory meta = estore.getTokenMeta(featureTokenId);\r\n    DS.FeatureDetails memory featureSpot = meta.featureDetails;\r\n    uint256 fees = 0;\r\n\r\n    require(featureSpot.valid && !featureSpot.live && featureSpot.available, \"412\");\r\n\r\n    if (featureSpot.style != DS.FeatureStyles.ROYALTY && featureSpot.featurePrice > 0) {\r\n      require(msg.value >= featureSpot.featurePrice, \"413\");\r\n      fees = featureSpot.featurePrice;\r\n      estore.updateAccountBalance{value: fees}(estore.tokenOwners(featureTokenId), fees, true);\r\n    }\r\n    featureSpot.live = true;\r\n    featureSpot.available = false;\r\n    featureSpot.featuredTokenId = tokenId;\r\n    featureSpot.featureStartTime = block.timestamp;\r\n    meta.featureDetails = featureSpot;\r\n    estore.updateTokenMeta(featureTokenId, meta);\r\n\r\n    DS.AuctionItem memory item = estore.getAuctionItem(tokenId, true);\r\n    DS.FeaturedParams memory featuredParams;\r\n    featuredParams.featureSpotId = featureTokenId;\r\n    featuredParams.featureRoyalty = featureSpot.featureRoyalty;\r\n    featuredParams.valid = true;\r\n    item.featuredParams = featuredParams;\r\n    estore.updateAuctionItem(tokenId, item);\r\n    return fees;\r\n  }\r\n\r\n  function bulkMode(uint256[] calldata ids, address owner, string calldata name, DS.BulkActs act) public isAdmin {\r\n    DS.TokenMeta memory meta;\r\n    meta.minter = owner;\r\n    meta.minterName = name;\r\n\r\n    for (uint256 i = 0; i < ids.length; i++) {\r\n      uint256 id = ids[i];\r\n      if (act == DS.BulkActs.Transfer) nameTransfer(ownerOf(id), owner, name, id);\r\n      else if (act == DS.BulkActs.Mint) mintId(id, meta);\r\n      else if (act == DS.BulkActs.Burn) burn(id);\r\n    }\r\n  }\r\n\r\n  /// Use featuredTokenId for tokenId\r\n  function bulkUpdateFeatures(DS.FeatureDetails[] calldata details) override public isAdmin {\r\n    for (uint256 i = 0; i < details.length; i++) {\r\n      DS.FeatureDetails calldata d = details[i];\r\n      updateFeatureDetails(details[i].featuredTokenId, d);\r\n    }\r\n  }\r\n}\r\n"},"rauction/Rauction.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"../base/DS.sol\";\r\nimport \"../store/RIStore.sol\";\r\nimport \"../store/EternalStore.sol\";\r\nimport \"../base/Foundation.sol\";\r\nimport \"../ions/I0NS.sol\";\r\n\r\ninterface Rauction is Foundation {\r\n  // Events that will be emitted on changes.\r\n  event RauctionStarted(uint256 indexed tokenId, uint256 minBid, uint256 reward, uint256 incrementRate);\r\n  event SuccessfulBid(uint256 indexed tokenId, address bidder, string name, uint256 amount, uint256 minbid);\r\n  event BidReward(uint256 indexed tokenId, address indexed rewardee, string name, uint256 bid, uint256 reward);\r\n  event RoyaltyPayment(uint256 indexed tokenId, address indexed minter, string name, uint256 amount);\r\n  event RauctionEnded(uint256 indexed tokenId, address indexed winner, string name, uint256 highestBid, uint256 amount);\r\n\r\n  function init(EternalStore _estore, RIStore _store, I0NS _ion) external;\r\n\r\n  function setRIStore(RIStore) external;\r\n  function setI0NS(I0NS _ion) external;\r\n\r\n  /// returns fees charged\r\n  function upsertItem(uint _tokenId, DS.AuctionParams memory params, address sender) external payable returns (uint256);\r\n\r\n\r\n  //    function getItem(uint tokenId) view external returns (DS.AuctionItem memory);\r\n\r\n  //    function isLive(uint tokenId) view external returns (bool);\r\n\r\n  //    function getBalance() view external returns (uint256);\r\n\r\n  function bid(uint tokenId) payable external;\r\n\r\n  function balanceBid(uint tokenId, uint256 bidAmount, string memory bidder, bool useBalance) payable external;\r\n\r\n  function endAuction(uint tokenId) external;\r\n\r\n  function validatorValues() external view returns (DS.Validators memory);\r\n}\r\n"},"store/EternalStore.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"../base/Foundation.sol\";\r\nimport \"../base/DS.sol\";\r\n\r\n\r\ninterface EternalStore is Foundation {\r\n  event BalanceCollected(address minter, uint256 amount);\r\n  event BalanceTransferred(address source, address destination, uint256 amount);\r\n  event BalanceUpdated(address wallet, uint256 amount, bool addsub);\r\n\r\n\r\n  function contractAddress(DS.ContractNames _name) external view returns (address);\r\n  function setContractAddress(DS.ContractNames _name, address _addr) external;\r\n\r\n  function minters(address m) external view returns (bool);\r\n  function updateRole(address roler, bool status, bool isMinter) external;\r\n\r\n  function beneficiary() external view returns (address);\r\n  function accountBalances(address id) external view returns (uint);\r\n  function updateAccountBalance(address _to, uint256 val, bool add) external payable;\r\n  function transferAccountBalance(address from, address to, uint256 _val) external;\r\n  /// Collect your account balance\r\n  function collect() external returns (bool success);\r\n\r\n  function tokenOwners(uint256 id) external view returns (address);\r\n  function listOwnerTokens(address owner) external view returns (uint256[] memory);\r\n  function modOwnerTokens(address, uint, bool) external;\r\n  function xTransfer(uint, address) external;\r\n  function getTokenMeta(uint256 tokenId) external view returns (DS.TokenMeta memory);\r\n  function updateTokenMeta(uint256 tokenId, DS.TokenMeta memory meta) external;\r\n  function deleteTokenMeta(uint256 tokenId) external;\r\n  function getAuctionItem(uint tokenId, bool check) external view returns (DS.AuctionItem memory);\r\n  function updateAuctionItem(uint256 tokenId, DS.AuctionItem memory item) external;\r\n  function deleteAuctionItem(uint256 tokenId) external;\r\n\r\n  function uIntStorage(bytes32 m) external view returns (uint);\r\n  function stringStorage(bytes32 m) external view returns (string memory);\r\n  function addressStorage(bytes32 m) external view returns (address);\r\n  function bytesStorage(bytes32 m) external view returns (bytes memory);\r\n  function boolStorage(bytes32 m) external view returns (bool);\r\n  function intStorage(bytes32 m) external view returns (int);\r\n\r\n  function setUint(bytes32 _key, uint _value) external;\r\n  function setString(bytes32 _key, string memory _value) external;\r\n  function setAddress(bytes32 _key, address _value) external;\r\n  function setBytes(bytes32 _key, bytes memory _value) external;\r\n  function setBool(bytes32 _key, bool _value) external;\r\n  function setInt(bytes32 _key, int _value) external;\r\n\r\n  function deleteUint(bytes32 _key) external;\r\n  function deleteString(bytes32 _key) external;\r\n  function deleteAddress(bytes32 _key) external;\r\n  function deleteBytes(bytes32 _key) external;\r\n  function deleteBool(bytes32 _key) external;\r\n  function deleteInt(bytes32 _key) external;\r\n}\r\n"},"store/EternalStore_Impl.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"../base/DS.sol\";\r\nimport \"../base/Foundation_Impl.sol\";\r\nimport \"./EternalStore.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\r\nimport \"./RIStore.sol\";\r\nimport \"../rauction/Rauction.sol\";\r\nimport \"../ions/I0NS.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\ncontract EternalStore_Impl is Foundation_Impl, EternalStore, ReentrancyGuard, ERC721Holder {\r\n  RIStore ristore;\r\n  I0NS i0ns;\r\n  Rauction rauction;\r\n\r\n  address public override beneficiary;\r\n  mapping(address => uint) public override accountBalances;\r\n  mapping(uint256 => DS.AuctionItem) auctionItems;\r\n  mapping(address => uint[]) ownerTokens;\r\n  mapping(uint256 => DS.TokenMeta) tokenMeta;\r\n\r\n  mapping(bytes32 => uint) public override uIntStorage;\r\n  mapping(bytes32 => string) public override stringStorage;\r\n  mapping(bytes32 => address) public override addressStorage;\r\n  mapping(bytes32 => bytes) public override bytesStorage;\r\n  mapping(bytes32 => bool) public override boolStorage;\r\n  mapping(bytes32 => int) public override intStorage;\r\n\r\n  function init(RIStore _ristore, I0NS _i0ns, Rauction _rauction) public initializer {\r\n    boolStorage[keccak256(abi.encodePacked(\"admins\", owner()))] = true;\r\n    updateRole(owner(), true, true);\r\n\r\n    ristore = _ristore;\r\n    i0ns = _i0ns;\r\n    rauction = _rauction;\r\n\r\n    setContractAddress(DS.ContractNames.EStore, address(this));\r\n    setContractAddress(DS.ContractNames.RIStore, address(ristore));\r\n    setContractAddress(DS.ContractNames.I0NS, address(i0ns));\r\n    setContractAddress(DS.ContractNames.Rauction, address(rauction));\r\n\r\n    // Reserve ID 0 to 96310\r\n    ristore.init(this, i0ns, rauction, 96311);\r\n    i0ns.init(this, ristore, rauction);\r\n    rauction.init(this, ristore, i0ns);\r\n\r\n    beneficiary = owner();\r\n  }\r\n\r\n  function contractAddress(DS.ContractNames _name) override public view returns (address) {\r\n    return addressStorage[keccak256(abi.encodePacked(\"contract\", _name))];\r\n  }\r\n  function minters(address m) override public view returns (bool) {\r\n    return boolStorage[keccak256(abi.encodePacked(\"minters\", m))];\r\n  }\r\n  function isAddressAdmin(address sender) override(Foundation, Foundation_Impl) public view returns (bool) {\r\n    return sender == address(this) || sender == owner() || boolStorage[keccak256(abi.encodePacked(\"admins\", sender))];\r\n  }\r\n  function updateRole(address roler, bool status, bool isMinter) override public isAdmin {\r\n    bytes32 key = keccak256(abi.encodePacked((isMinter ? \"minters\" : \"admins\"), roler));\r\n    if (status) boolStorage[key] = true;\r\n    else delete boolStorage[key];\r\n  }\r\n  function setContractAddress(DS.ContractNames _name, address _addr) override public isAdmin {\r\n    bytes32 key = keccak256(abi.encodePacked(\"contract\", _name));\r\n    if (addressStorage[key] != address(0)) updateRole(addressStorage[key], false, false);\r\n    addressStorage[key] = _addr;\r\n    updateRole(_addr, true, false);\r\n  }\r\n\r\n  function changeBeneficiary(address _beneficiary) public isAdmin {\r\n    transferAccountBalance(beneficiary, _beneficiary, 0);\r\n    beneficiary = _beneficiary;\r\n  }\r\n\r\n  function updateAccountBalance(address _to, uint256 val, bool add) override public payable isAdmin {\r\n    //        address to = (_to == address(0) ? beneficiary : _to);\r\n    if (add) accountBalances[_to] += val;\r\n    else accountBalances[_to] -= val;\r\n    emit BalanceUpdated(_to, val, add);\r\n  }\r\n\r\n  function transferAccountBalance(address _from, address _to, uint256 _val) override public isAdmin {\r\n    uint256 val = (_val == 0 ? accountBalances[_from] : _val);\r\n    //        address to = (_to == address(0) ? beneficiary : _to);\r\n    accountBalances[_from] -= val;\r\n    accountBalances[_to] += val;\r\n    emit BalanceTransferred(_from, _to, _val);\r\n  }\r\n\r\n  /// Collect your account balance\r\n  function collect() override public checkIfPaused nonReentrant returns (bool success) {\r\n    uint256 amount = accountBalances[msg.sender];\r\n    success = false;\r\n    if (amount > 0) {\r\n      accountBalances[msg.sender] = 0;\r\n      (success, ) = payable(msg.sender).call{value:amount}('');\r\n\r\n      if (success) emit BalanceCollected(msg.sender, amount);\r\n      else accountBalances[msg.sender] = amount;\r\n    }\r\n  }\r\n\r\n  function getTokenMeta(uint256 tokenId) override public view returns (DS.TokenMeta memory) {\r\n    return tokenMeta[tokenId];\r\n  }\r\n  function getAuctionItem(uint256 tokenId, bool check) override public view returns (DS.AuctionItem memory) {\r\n    DS.AuctionItem memory item = auctionItems[tokenId];\r\n    if (check) require(item.valid, \"404\");\r\n    return item;\r\n  }\r\n  function updateTokenMeta(uint256 tokenId, DS.TokenMeta memory meta) override public isAdmin {\r\n    tokenMeta[tokenId] = meta;\r\n  }\r\n  function updateAuctionItem(uint256 tokenId, DS.AuctionItem memory item) override public isAdmin {\r\n    auctionItems[tokenId] = item;\r\n  }\r\n  function deleteTokenMeta(uint256 tokenId) override public isAdmin {\r\n    delete tokenMeta[tokenId];\r\n  }\r\n  function deleteAuctionItem(uint256 tokenId) override public isAdmin {\r\n    delete auctionItems[tokenId];\r\n  }\r\n\r\n  function tokenOwners(uint256 id) override public view returns (address) {\r\n    return addressStorage[keccak256(abi.encodePacked(\"tokenOwner\", id))];\r\n  }\r\n  function listOwnerTokens(address owner) override public view returns (uint256[] memory) {\r\n    return ownerTokens[owner];\r\n  }\r\n  function modOwnerTokens(address owner, uint256 i, bool push) override isAdmin checkIfPaused public {\r\n    uint256[] storage tokens = ownerTokens[owner];\r\n    if (push) tokens.push(i);\r\n    else {\r\n      tokens[i] = tokens[tokens.length - 1];\r\n      tokens.pop();\r\n    }\r\n\r\n  }\r\n\r\n  function xTransfer(uint256 tokenId, address to) override public isAdmin checkIfPaused {\r\n    DS.TokenMeta memory meta = tokenMeta[tokenId];\r\n    require(meta.valid && meta.xNft.valid, \"484\");\r\n    try IERC721(meta.xNft.xContract).safeTransferFrom(address(this), to, meta.xNft.xTokenId) {\r\n      return;\r\n    } catch (bytes memory) { revert(\"481\"); }\r\n  }\r\n\r\n\r\n  function setUint(bytes32 _key, uint256 _value) override isAdmin checkIfPaused public {\r\n    uIntStorage[_key] = _value;\r\n  }\r\n\r\n  function setString(bytes32 _key, string calldata _value) override isAdmin checkIfPaused public {\r\n    stringStorage[_key] = _value;\r\n  }\r\n\r\n  function setAddress(bytes32 _key, address _value) override isAdmin checkIfPaused public {\r\n    addressStorage[_key] = _value;\r\n  }\r\n\r\n  function setBytes(bytes32 _key, bytes calldata _value) override isAdmin checkIfPaused public {\r\n    bytesStorage[_key] = _value;\r\n  }\r\n\r\n  function setBool(bytes32 _key, bool _value) override isAdmin checkIfPaused public {\r\n    boolStorage[_key] = _value;\r\n  }\r\n\r\n  function setInt(bytes32 _key, int _value) override isAdmin checkIfPaused public {\r\n    intStorage[_key] = _value;\r\n  }\r\n\r\n  function deleteUint(bytes32 _key) override isAdmin checkIfPaused public {\r\n    delete uIntStorage[_key];\r\n  }\r\n\r\n  function deleteString(bytes32 _key) override isAdmin checkIfPaused public {\r\n    delete stringStorage[_key];\r\n  }\r\n\r\n  function deleteAddress(bytes32 _key) override isAdmin checkIfPaused public {\r\n    delete addressStorage[_key];\r\n  }\r\n\r\n  function deleteBytes(bytes32 _key) override isAdmin checkIfPaused public {\r\n    delete bytesStorage[_key];\r\n  }\r\n\r\n  function deleteBool(bytes32 _key) override isAdmin checkIfPaused public {\r\n    delete boolStorage[_key];\r\n  }\r\n\r\n  function deleteInt(bytes32 _key) override isAdmin checkIfPaused public {\r\n    delete intStorage[_key];\r\n  }\r\n\r\n  function upgradeI0ns(I0NS upgraded) public onlyOwner {\r\n    upgraded.init(this, ristore, rauction);\r\n    rauction.setI0NS(upgraded);\r\n    ristore.setI0NS(upgraded);\r\n    setContractAddress(DS.ContractNames.I0NS, address(upgraded));\r\n    i0ns.circuitBreaker();\r\n    i0ns = upgraded;\r\n  }\r\n  function upgradeRauction(Rauction upgraded) public onlyOwner {\r\n    upgraded.init(this, ristore, i0ns);\r\n    i0ns.setRauction(upgraded);\r\n    ristore.setRauction(upgraded);\r\n    setContractAddress(DS.ContractNames.Rauction, address(upgraded));\r\n    rauction.circuitBreaker();\r\n    rauction = upgraded;\r\n  }\r\n  function upgradeRIStore(RIStore upgraded) public onlyOwner {\r\n    upgraded.init(this, i0ns, rauction, ristore.getCounter());\r\n    i0ns.setRIStore(upgraded);\r\n    rauction.setRIStore(upgraded);\r\n    setContractAddress(DS.ContractNames.RIStore, address(upgraded));\r\n    ristore.circuitBreaker();\r\n    ristore = upgraded;\r\n  }\r\n}\r\n"},"store/RIStore.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.7;\r\nimport \"../base/DS.sol\";\r\nimport \"../base/Foundation.sol\";\r\nimport \"./EternalStore.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"../ions/I0NS.sol\";\r\nimport \"../rauction/Rauction.sol\";\r\n\r\ninterface RIStore is Foundation {\r\n  event DataCharge(uint256);\r\n  event ProfitDistributed(uint256);\r\n  event Deposit(address indexed, uint256);\r\n  event Withdraw(address indexed, uint256);\r\n\r\n  function init(EternalStore, I0NS, Rauction, uint256) external;\r\n  function setRauction(Rauction _rauction) external;\r\n  function setI0NS(I0NS _ion) external;\r\n\r\n  /// acts: bool[5]): 0: Mint, 1: Rauction, 2: Feature\r\n  function doRIActs(bool[3] calldata, DS.TokenData calldata) payable external returns (uint);\r\n  function processDeposit(bytes32,address,uint) external;\r\n//   function deposit() payable external;\r\n//   function withdraw(address,uint) external;\r\n\r\n  // Rauction\r\n  function getCounter() external returns (uint256);\r\n  function setCounter(uint) external;\r\n  function generateTokenId() external returns (uint256);\r\n\r\n  function isLive(uint) external view returns (bool);\r\n  function getTokens(uint256[] calldata) external view returns (DS.TokenData[] memory);\r\n\r\n  // ERC721_RS calls\r\n  function transferOwner(address, string memory, uint256) external;\r\n  function setTokenOperatorApproval(address, address, bool) external;\r\n  function setTokenApproval(uint256, address) external;\r\n  function setTokenOwner(uint256, address) external;\r\n  function updateTokenBalance(address, uint256) external;\r\n}\r\n"},"store/RIStore_Impl.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"./RIStore.sol\";\r\nimport \"./EternalStore.sol\";\r\nimport \"../base/DS.sol\";\r\nimport \"../base/Foundation.sol\";\r\nimport \"../base/Foundation_Impl.sol\";\r\nimport \"../ions/I0NS.sol\";\r\nimport \"../rauction/Rauction.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"./EternalStore_Impl.sol\";\r\n\r\ncontract RIStore_Impl is RIStore, Foundation_Impl, ReentrancyGuard {\r\n  using Counters for Counters.Counter;\r\n\r\n  EternalStore estore;\r\n  I0NS i0ns;\r\n  Rauction rauction;\r\n  Counters.Counter autoTokenId;\r\n  DS.Profits profits;\r\n  mapping(bytes32 => bool) processedTx;\r\n\r\n  function init(EternalStore _estore, I0NS _i0ns, Rauction _rauction, uint256 _tokenId) override public initializer {\r\n    estore = _estore;\r\n    i0ns = _i0ns;\r\n    rauction = _rauction;\r\n    autoTokenId._value = _tokenId;\r\n  }\r\n  function setRauction(Rauction _rauctionAddr) override public isAdmin {\r\n    rauction = _rauctionAddr;\r\n  }\r\n  function setI0NS(I0NS _ions) override public isAdmin {\r\n    i0ns = _ions;\r\n  }\r\n  function isAddressAdmin(address sender) override(Foundation, Foundation_Impl) public view returns (bool) {\r\n    return estore.isAddressAdmin(sender);\r\n  }\r\n\r\n  function doRIActs(\r\n    bool[3] calldata acts,\r\n    DS.TokenData calldata tokenData\r\n  ) override public payable checkIfPaused returns (uint) {\r\n    uint tokenId = tokenData.tokenId;\r\n    DS.TokenMeta memory meta = tokenData.tokenMeta;\r\n    DS.AuctionItem calldata aItem = tokenData.auctionItem;\r\n    bool isAdmin = isAddressAdmin(msg.sender);\r\n    bool isFree = isAdmin || estore.minters(msg.sender);\r\n    uint256 bal = msg.value;\r\n    address actor = msg.sender;\r\n\r\n    if (acts[0]) {\r\n      if (meta.xNft.xContract != address(0)) {\r\n        xNft(meta.xNft);\r\n        meta.xNft.valid = true;\r\n        meta.xNft.xOwner = meta.minter;\r\n        meta.minter = address(estore);\r\n        actor = meta.minter;\r\n      }\r\n      if (!isAdmin) tokenId = generateTokenId();\r\n      bal -= i0ns.mintId{value: (isFree ? 0 : i0ns.fees())}(tokenId, meta);\r\n    }\r\n\r\n    if (acts[1]) {\r\n      i0ns.checkApproval(tokenId, actor);\r\n      bal -= rauction.upsertItem{value: (isFree ? 0 : rauction.fees())}(tokenId, aItem.auctionParams, actor);\r\n\r\n      if (acts[2]) {\r\n        DS.TokenMeta memory fspot = estore.getTokenMeta(aItem.featuredParams.featureSpotId);\r\n        bal -= i0ns.featureItem{value: fspot.featureDetails.featurePrice}(aItem.featuredParams.featureSpotId, tokenId);\r\n      }\r\n    }\r\n\r\n    if (bal > 0) {\r\n      estore.updateAccountBalance{value: bal}(PROFITS_ADDR, bal, true);\r\n//      emit DataCharge(bal);\r\n    }\r\n\r\n    return tokenId;\r\n  }\r\n\r\n    function processDeposit(bytes32 txHash, address sender, uint256 value) public override isAdmin {\r\n        require(!processedTx[txHash], \"471\");\r\n        estore.updateAccountBalance(sender, value, true);\r\n        processedTx[txHash] = true;\r\n    } \r\n\r\n//   function withdraw(address wallet, uint256 amount) override public isAdmin {\r\n//     uint256 bal = estore.uIntStorage(keccak256(abi.encodePacked(\"deposit\", msg.sender)));\r\n//     require(bal > amount, \"469\");\r\n//     estore.updateAccountBalance(DEPOSIT_ADDR, amount, false);\r\n//     estore.setUint(keccak256(abi.encodePacked(\"deposit\", msg.sender)), bal - amount);\r\n\r\n//     (bool success, ) = payable(wallet).call{value:amount}('');\r\n//     require(success, \"470\");\r\n//     emit Withdraw(wallet, amount);\r\n//   }\r\n\r\n  // I0NS calls\r\n  function getCounter() override public view returns (uint256) {\r\n    return autoTokenId._value;\r\n  }\r\n  function setCounter(uint256 _counter) override public isAdmin {\r\n    autoTokenId._value = _counter;\r\n  }\r\n  function generateTokenId() override public returns (uint256) {\r\n    uint256 tokenId = autoTokenId.current();\r\n    require(tokenId < (type(uint).max - 1), \"402\");\r\n    autoTokenId.increment();\r\n    bool exists = estore.tokenOwners(tokenId) != address(0);\r\n    if (exists) return generateTokenId();\r\n    return tokenId;\r\n  }\r\n\r\n  function getTokens(uint256[] calldata tokenIds) override public view returns (DS.TokenData[] memory) {\r\n    DS.TokenData[] memory result = new DS.TokenData[](tokenIds.length);\r\n    for (uint256 i = 0; i < tokenIds.length; i++) {\r\n      uint256 tid = tokenIds[i];\r\n      result[i].tokenId = tid;\r\n      result[i].tokenMeta = estore.getTokenMeta(tid);\r\n      result[i].auctionItem = estore.getAuctionItem(tid, false);\r\n      result[i].auctionLive = isLive(tid);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function transferOwner(address owner, string memory receiver, uint256 tokenId) override public isAdmin {\r\n    DS.TokenMeta memory meta = estore.getTokenMeta(tokenId);\r\n    meta.currentOwner = owner;\r\n    meta.currentOwnerName = receiver;\r\n    estore.updateTokenMeta(tokenId, meta);\r\n  }\r\n\r\n  // Rauction calls\r\n  function isLive(uint256 tokenId) override public view returns (bool) {\r\n    DS.TokenMeta memory meta = estore.getTokenMeta(tokenId);\r\n    DS.AuctionItem memory item = estore.getAuctionItem(tokenId, false);\r\n    return (\r\n    item.valid\r\n    && !item.settled\r\n    && (\r\n    (item.auctionParams.bidToBegin && item.highestBidder == address(0))\r\n    || (item.auctionParams.startTime > block.timestamp && item.auctionParams.endTime < block.timestamp)\r\n    || (meta.featureDetails.valid && meta.featureDetails.live)\r\n    )\r\n    );\r\n  }\r\n\r\n\r\n  function setTokenApproval(uint256 tokenId, address to) override public isAdmin {\r\n    estore.setAddress(keccak256(abi.encodePacked(\"tokenApproval\", tokenId)), to);\r\n  }\r\n  function setTokenOperatorApproval(address owner, address operator, bool approval) override public isAdmin {\r\n    estore.setBool(keccak256(abi.encodePacked(\"tokenOperatorApproval\", owner, operator)), approval);\r\n  }\r\n  function setTokenOwner(uint256 tokenId, address to) override public isAdmin {\r\n    bytes32 key = keccak256(abi.encodePacked(\"tokenOwner\", tokenId));\r\n    address old = estore.addressStorage(key);\r\n    if (old != address(0)) {\r\n      uint[] memory oldTokens = estore.listOwnerTokens(old);\r\n      for (uint i = 0; i < oldTokens.length; i++) {\r\n        if (oldTokens[i] == tokenId) {\r\n          estore.modOwnerTokens(old, i, false);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (to == address(0)) {\r\n      estore.deleteAddress(key);\r\n      estore.deleteTokenMeta(tokenId);\r\n    } else {\r\n      estore.modOwnerTokens(to, tokenId, true);\r\n      estore.setAddress(key, to);\r\n      transferOwner(to, '', tokenId);\r\n    }\r\n  }\r\n  function updateTokenBalance(address to, uint256 diff) override public isAdmin {\r\n    bytes32 key = keccak256(abi.encodePacked(\"tokenBalance\", to));\r\n    if (diff == 0) estore.setUint(key, estore.uIntStorage(key) - 1);\r\n    else estore.setUint(key, estore.uIntStorage(key) + diff);\r\n  }\r\n\r\n\r\n  // X NFT\r\n  function xNft(DS.XNFT memory xNftData) internal {\r\n    try IERC165(xNftData.xContract).supportsInterface(type(IERC721).interfaceId) returns (bool erc721Supported) {\r\n      if (!erc721Supported) revert(\"490\"); // Not an NFT\r\n      try IERC721(xNftData.xContract).ownerOf(xNftData.xTokenId) returns (address xOwner) {\r\n        if (msg.sender != xOwner) revert(\"489\"); // Sender not owner\r\n        try IERC721(xNftData.xContract).safeTransferFrom(msg.sender, address(estore), xNftData.xTokenId) {\r\n          return;\r\n        } catch Error(string memory err) { revert(err); } // Unable to transfer NFT\r\n        catch (bytes memory) { revert(\"488\"); } // Unable to transfer NFT\r\n      } catch (bytes memory) { revert(\"489\"); } // Sender not owner\r\n    } catch (bytes memory) { revert(\"490\"); } // Unable to transfer NFT\r\n  }\r\n\r\n  // Profit distribution\r\n\r\n  function distribute() public isAdmin {\r\n    uint256 total = estore.accountBalances(PROFITS_ADDR);\r\n    uint256 balance = total;\r\n\r\n    if (profits.share) {\r\n      uint256 shares = profits.shareEndId - profits.shareStartId;\r\n      for (uint256 i = profits.shareStartId; i < profits.shareEndId; i++) {\r\n        address receiver = estore.tokenOwners(i);\r\n        uint256 profit = (( 1 /  shares) * total);\r\n        estore.updateAccountBalance(receiver, profit, true);\r\n        balance -= profit;\r\n      }\r\n      emit ProfitDistributed(total);\r\n    }\r\n    estore.updateAccountBalance(estore.beneficiary(), balance, true);\r\n    estore.updateAccountBalance(PROFITS_ADDR, total, false);\r\n  }\r\n\r\n  function updateProfits(bool _share, uint256 startId, uint256 endId) public isAdmin {\r\n    profits.share = _share;\r\n    profits.shareStartId = startId;\r\n    profits.shareEndId = endId;\r\n  }\r\n}\r\n"},"store/RS_Foundation_Impl.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"../base/Foundation_Impl.sol\";\r\nimport \"./RIStore_Impl.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\r\n\r\n// Remote store Foundation\r\nabstract contract RS_Foundation_Impl is Foundation_Impl {\r\n    RIStore internal ristore;\r\n    EternalStore internal estore;\r\n\r\n    constructor () {\r\n    }\r\n\r\n    modifier checkFees() {\r\n        if (!estore.minters(msg.sender)) {\r\n            require(msg.value >= fees, \"414\");\r\n        }\r\n        _;\r\n    }\r\n/*\r\n\r\n    modifier onlyMinters() {\r\n        require(estore.minters(_msgSender()), \"415\");\r\n        _;\r\n    }\r\n*/\r\n\r\n    function isAddressAdmin(address sender) override public view returns (bool) {\r\n        return estore.isAddressAdmin(sender);\r\n    }\r\n\r\n    function setFees(uint256 _fees) public isAdmin {\r\n        fees = _fees;\r\n    }\r\n\r\n    function takeFees(uint256 _fees) internal returns (uint256){\r\n//        if (estore.minters(msg.sender)) return 0;\r\n      require(msg.value >= fees, \"414\");\r\n      estore.updateAccountBalance{value: _fees}(PROFITS_ADDR, _fees, true);\r\n      return _fees;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) override virtual public onlyOwner {\r\n        super.transferOwnership(newOwner);\r\n        estore.updateRole(newOwner, true, false);\r\n        // Not unsetting old admin as that may still be owner/admin on other contracts\r\n        // Unset only if all contracts have been migrated and admin should no longer have rights\r\n    }\r\n\r\n    function close() override virtual public isAdmin {\r\n        (bool success, ) = payable(estore.beneficiary()).call{value: address(this).balance}('');\r\n        require(success, \"\");\r\n    }\r\n\r\n    function destroy() public onlyOwner {\r\n        selfdestruct(payable(owner()));\r\n    }\r\n}\r\n"}}}