{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Address.sol": {
      "content": "pragma solidity 0.6.4;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}"
    },
    "browser/HXYF.sol": {
      "content": "//HXYF.sol\n//\n//\n\npragma solidity 0.6.4;\n\nimport \"./SafeMath.sol\";\nimport \"./IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ninterface IUniswapV2Pair {\n  event Approval(address indexed owner, address indexed spender, uint value);\n  event Transfer(address indexed from, address indexed to, uint value);\n\n  function name() external pure returns (string memory);\n  function symbol() external pure returns (string memory);\n  function decimals() external pure returns (uint8);\n  function totalSupply() external view returns (uint);\n  function balanceOf(address owner) external view returns (uint);\n  function allowance(address owner, address spender) external view returns (uint);\n\n  function approve(address spender, uint value) external returns (bool);\n  function transfer(address to, uint value) external returns (bool);\n  function transferFrom(address from, address to, uint value) external returns (bool);\n\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\n  function nonces(address owner) external view returns (uint);\n\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n  event Mint(address indexed sender, uint amount0, uint amount1);\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n  event Swap(\n      address indexed sender,\n      uint amount0In,\n      uint amount1In,\n      uint amount0Out,\n      uint amount1Out,\n      address indexed to\n  );\n  event Sync(uint112 reserve0, uint112 reserve1);\n\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\n  function factory() external view returns (address);\n  function token0() external view returns (address);\n  function token1() external view returns (address);\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n  function price0CumulativeLast() external view returns (uint);\n  function price1CumulativeLast() external view returns (uint);\n  function kLast() external view returns (uint);\n\n  function mint(address to) external returns (uint liquidity);\n  function burn(address to) external returns (uint amount0, uint amount1);\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n  function skim(address to) external;\n  function sync() external;\n}\n\n////////////////////////////////////////////////\n////////////////////EVENTS/////////////////////\n//////////////////////////////////////////////\n\ncontract TokenEvents {\n\n    //when a user freezes tokens\n    event LpFreeze(\n        address indexed user,\n        uint value,\n        address indexed lpToken\n    );\n\n    //when a user unfreezes tokens\n    event LpUnfreeze(\n        address indexed user,\n        uint value,\n        address indexed lpToken\n    );\n    \n\n    \n}\n\n//////////////////////////////////////\n//////////HXYFINANCE TOKEN CONTRACT////////\n////////////////////////////////////\ncontract HXYFINANCE is IERC20, TokenEvents {\n\n    using SafeMath for uint256;\n    using SafeMath for uint64;\n    using SafeMath for uint32;\n    using SafeMath for uint16;\n    using SafeMath for uint8;\n\n    using SafeERC20 for HXYFINANCE;\n    \n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    //uniswap setup\n    address public uniETHHXYF = address(0);\n    address public uniETHHXY = address(0x8349fBbd8F229b0B6298e7c14b3778eaDf4426DD);\n    address public uniHEXHXB = address(0x938Af9DE4Fe7Fd683F9eDf29E12457181E01Ca46);\n    address public uniETHHXP = address(0x55dB1Ca87CB8f0e6AaEa44BeE5E6DcE5B72DA9c0);\n    IUniswapV2Pair internal uniETHHXYFInterface = IUniswapV2Pair(uniETHHXYF);\n    IUniswapV2Pair internal uniETHHXYInterface = IUniswapV2Pair(uniETHHXY);\n    IUniswapV2Pair internal uniHEXHXBInterface = IUniswapV2Pair(uniHEXHXB);\n    IUniswapV2Pair internal uniETHHXPInterface = IUniswapV2Pair(uniETHHXP);\n\n    //apy setup\n    uint32 public hxyfApy = 100;\n    uint32 public hxyApy = 333;\n    uint32 public hxbApy = 500;\n    uint32 public hxpApy = 1000;\n    uint32 public globalApy = 100;\n    uint16 public halvening = 1;\n    \n    //lp freeze setup\n    uint constant internal MINUTESECONDS = 60;\n    uint256 public totalHxyfLpFrozen = 0;\n    uint256 public totalHxyLpFrozen = 0;\n    uint256 public totalHxbLpFrozen = 0;\n    uint256 public totalHxpLpFrozen = 0;\n    \n    mapping (address => uint) public hxyfLpFrozenBalances;//balance of ETHHXYF LP frozen mapped by user\n    mapping (address => uint) public hxyLpFrozenBalances;//balance of ETHHXY LP frozen mapped by user\n    mapping (address => uint) public hxbLpFrozenBalances;//balance of HEXHXB LP frozen mapped by user\n    mapping (address => uint) public hxpLpFrozenBalances;//balance of HXPETH LP frozen mapped by user\n\n    //tokenomics\n    uint256 internal _totalSupply;\n    string public constant name = \"hxy.finance\";\n    string public constant symbol = \"HXYF\";\n    uint8 public constant decimals = 18;\n    \n    //airdrop contract\n    address payable public airdropContract = address(0);\n\n    //admin\n    address payable internal _p1 = 0x55db05F51b31F45EBEDefdD4467ebEc2D026a820;\n    address payable internal _p2 = 0x993e189a1b8B9D0D8259E09479ADD07c084b8e75;\n    \n    bool private sync;\n    \n    mapping(address => bool) admins;\n    \n    mapping (address => Farmer) public farmer;\n    struct Farmer{\n        uint256 hxyfFreezeStartTimestamp;\n        uint256 hxyFreezeStartTimestamp;\n        uint256 hxbFreezeStartTimestamp;\n        uint256 hxpFreezeStartTimestamp;\n        uint256 totalFarmedHxyf;\n    }\n    \n    modifier onlyAdmins(){\n        require(admins[msg.sender], \"not an admin\");\n        _;\n    }\n    \n    //protects against potential reentrancy\n    modifier synchronized {\n        require(!sync, \"Sync lock\");\n        sync = true;\n        _;\n        sync = false;\n    }\n\n    constructor(uint256 initialTokens) public {\n        admins[_p1] = true;\n        admins[_p2] = true;\n        admins[msg.sender] = true;\n        //mint initial tokens\n        mintInitialTokens(initialTokens);\n    }\n\n\n    receive() external payable{\n        donate();\n    }\n\n    \n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n     \n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply unless mintBLock is true\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        uint256 amt = amount;\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amt);\n        _balances[account] = _balances[account].add(amt);\n        emit Transfer(address(0), account, amt);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    //mint HXYF initial tokens (only ever called in constructor)\n    function mintInitialTokens(uint amount)\n        internal\n        synchronized\n    {\n        _mint(_p1, amount.div(4).mul(3));//mint HXYF to p1\n        _mint(_p2, amount.div(4));//mint HXYF to p2\n    }\n\n    ////////////////////////////////////////////////////////\n    /////////////////PUBLIC FACING - HXYF CONTROL//////////\n    //////////////////////////////////////////////////////\n    \n    //freeze ETHHXYF LP tokens to contract, approval needed\n    function FreezeEthHxyfLP(uint amt)\n        public\n    {\n        require(amt > 0, \"zero input\");\n        require(lpBalance(uniETHHXYF) >= amt, \"Error: insufficient balance\");//ensure user has enough funds\n        if(isHarvestable(msg.sender, uniETHHXYF)){\n            uint256 interest = calcHarvestRewards(msg.sender, uniETHHXYF);\n            if(interest > 0){\n                harvest(interest);\n            }\n        }\n        //update balances\n        hxyfLpFrozenBalances[msg.sender] = hxyfLpFrozenBalances[msg.sender].add(amt);\n        totalHxyfLpFrozen = totalHxyfLpFrozen.add(amt);\n        farmer[msg.sender].hxyfFreezeStartTimestamp = now;\n        uniETHHXYFInterface.transferFrom(msg.sender, address(this), amt);//make transfer\n        emit LpFreeze(msg.sender, amt, uniETHHXYF);\n    }\n    \n    //unfreeze ETHHXYF LP tokens from contract\n    function UnfreezeEthHxyfLP()\n        public\n        synchronized\n    {\n        require(hxyfLpFrozenBalances[msg.sender] > 0,\"Error: unsufficient frozen balance\");//ensure user has enough frozen funds\n        uint amt = hxyfLpFrozenBalances[msg.sender];\n        if(isHarvestable(msg.sender, uniETHHXYF)){\n            uint256 interest = calcHarvestRewards(msg.sender, uniETHHXYF);\n            if(interest > 0){\n                harvest(interest);\n            }\n        }\n        hxyfLpFrozenBalances[msg.sender] = 0;\n        farmer[msg.sender].hxyfFreezeStartTimestamp = 0;\n        totalHxyfLpFrozen = totalHxyfLpFrozen.sub(amt);\n        uniETHHXYFInterface.transfer(msg.sender, amt);//make transfer\n        emit LpUnfreeze(msg.sender, amt, uniETHHXYF);\n    }\n    \n    //freeze ETHHXY LP tokens to contract, approval needed\n    function FreezeEthHxyLP(uint amt)\n        public\n    {\n        require(amt > 0, \"zero input\");\n        require(lpBalance(uniETHHXY) >= amt, \"Error: insufficient balance\");//ensure user has enough funds\n        if(isHarvestable(msg.sender, uniETHHXY)){\n            uint256 interest = calcHarvestRewards(msg.sender, uniETHHXY);\n            if(interest > 0){\n                harvest(interest);\n            }\n        }\n        //update balances\n        hxyLpFrozenBalances[msg.sender] = hxyLpFrozenBalances[msg.sender].add(amt);\n        totalHxyLpFrozen = totalHxyLpFrozen.add(amt);\n        farmer[msg.sender].hxyFreezeStartTimestamp = now;\n        uniETHHXYInterface.transferFrom(msg.sender, address(this), amt);//make transfer\n        emit LpFreeze(msg.sender, amt, uniETHHXY);\n    }\n    \n    //unfreeze ETHHXY LP tokens from contract\n    function UnfreezeEthHxyLP()\n        public\n        synchronized\n    {\n        require(hxyLpFrozenBalances[msg.sender] > 0,\"Error: unsufficient frozen balance\");//ensure user has enough frozen funds\n        uint amt = hxyLpFrozenBalances[msg.sender];\n        if(isHarvestable(msg.sender, uniETHHXY)){\n            uint256 interest = calcHarvestRewards(msg.sender, uniETHHXY);\n            if(interest > 0){\n                harvest(interest);\n            }\n        }\n        hxyLpFrozenBalances[msg.sender] = 0;\n        farmer[msg.sender].hxyFreezeStartTimestamp = 0;\n        totalHxyLpFrozen = totalHxyLpFrozen.sub(amt);\n        uniETHHXYInterface.transfer(msg.sender, amt);//make transfer\n        emit LpUnfreeze(msg.sender, amt, uniETHHXY);\n    }\n    \n    //freeze HEXHXB LP tokens to contract, approval needed\n    function FreezeHexHxbLP(uint amt)\n        public\n    {\n        require(amt > 0, \"zero input\");\n        require(lpBalance(uniHEXHXB) >= amt, \"Error: insufficient balance\");//ensure user has enough funds\n        if(isHarvestable(msg.sender, uniHEXHXB)){\n            uint256 interest = calcHarvestRewards(msg.sender, uniHEXHXB);\n            if(interest > 0){\n                harvest(interest);\n            }\n        }\n        //update balances\n        hxbLpFrozenBalances[msg.sender] = hxbLpFrozenBalances[msg.sender].add(amt);\n        totalHxbLpFrozen = totalHxbLpFrozen.add(amt);\n        farmer[msg.sender].hxbFreezeStartTimestamp = now;\n        uniHEXHXBInterface.transferFrom(msg.sender, address(this), amt);//make transfer\n        emit LpFreeze(msg.sender, amt, uniHEXHXB);\n    }\n    \n    //unfreeze HEXHXB LP tokens from contract\n    function UnfreezeHexHxbLP()\n        public\n        synchronized\n    {\n        require(hxbLpFrozenBalances[msg.sender] > 0,\"Error: unsufficient frozen balance\");//ensure user has enough frozen funds\n        uint amt = hxbLpFrozenBalances[msg.sender];\n        if(isHarvestable(msg.sender, uniHEXHXB)){\n            uint256 interest = calcHarvestRewards(msg.sender, uniHEXHXB);\n            if(interest > 0){\n                harvest(interest);\n            }\n        }\n        hxbLpFrozenBalances[msg.sender] = 0;\n        farmer[msg.sender].hxbFreezeStartTimestamp = 0;\n        totalHxbLpFrozen = totalHxbLpFrozen.sub(amt);\n        uniHEXHXBInterface.transfer(msg.sender, amt);//make transfer\n        emit LpUnfreeze(msg.sender, amt, uniHEXHXB);\n    }\n    \n    //freeze HXPETH LP tokens to contract, approval needed\n    function FreezeEthHxpLP(uint amt)\n        public\n    {\n        require(amt > 0, \"zero input\");\n        require(lpBalance(uniETHHXP) >= amt, \"Error: insufficient balance\");//ensure user has enough funds\n        if(isHarvestable(msg.sender, uniETHHXP)){\n            uint256 interest = calcHarvestRewards(msg.sender, uniETHHXP);\n            if(interest > 0){\n                harvest(interest);\n            }\n        }\n        //update balances\n        hxpLpFrozenBalances[msg.sender] = hxpLpFrozenBalances[msg.sender].add(amt);\n        totalHxpLpFrozen = totalHxpLpFrozen.add(amt);\n        farmer[msg.sender].hxpFreezeStartTimestamp = now;\n        uniETHHXPInterface.transferFrom(msg.sender, address(this), amt);//make transfer\n        emit LpFreeze(msg.sender, amt, uniETHHXP);\n    }\n    \n    //unfreeze HXPETH LP tokens from contract\n    function UnfreezeEthHxpLP()\n        public\n        synchronized\n    {\n        require(hxpLpFrozenBalances[msg.sender] > 0,\"Error: unsufficient frozen balance\");//ensure user has enough frozen funds\n        uint amt = hxpLpFrozenBalances[msg.sender];\n        if(isHarvestable(msg.sender, uniETHHXP)){\n            uint256 interest = calcHarvestRewards(msg.sender, uniETHHXP);\n            if(interest > 0){\n                harvest(interest);\n            }\n        }\n        hxpLpFrozenBalances[msg.sender] = 0;\n        farmer[msg.sender].hxpFreezeStartTimestamp = 0;\n        totalHxpLpFrozen = totalHxpLpFrozen.sub(amt);\n        uniETHHXPInterface.transfer(msg.sender, amt);//make transfer\n        emit LpUnfreeze(msg.sender, amt, uniETHHXP);\n    }\n\n    function harvest(uint rewards)\n        internal\n    {\n        _mint(msg.sender, rewards);\n        _mint(airdropContract, rewards);\n        _mint(_p1, rewards.div(2));\n        _mint(_p2, rewards.div(2));\n    }\n\n    //harvest HXYF from ETHHXYF lp\n    function HarvestHxyfLp()\n        public\n    {\n        require(hxyfLpFrozenBalances[msg.sender] > 0,\"Error: unsufficient lp balance\");//ensure user has enough lp frozen \n        uint256 interest = calcHarvestRewards(msg.sender, uniETHHXYF);\n        if(interest > 0){\n            harvest(interest);\n            farmer[msg.sender].hxyfFreezeStartTimestamp = now;\n            farmer[msg.sender].totalFarmedHxyf += interest;\n        }\n    }\n    \n    //harvest HXYF from ETHHXY lp\n    function HarvestHxyLp()\n        public\n    {\n        require(hxyLpFrozenBalances[msg.sender] > 0,\"Error: unsufficient lp balance\");//ensure user has enough lp frozen \n        uint256 interest = calcHarvestRewards(msg.sender, uniETHHXY);\n        if(interest > 0){\n            harvest(interest);\n            farmer[msg.sender].hxyFreezeStartTimestamp = now;\n            farmer[msg.sender].totalFarmedHxyf += interest;\n        }\n    }\n\n    //harvest HXYF from HEXHXB lp\n    function HarvestHxbLp()\n        public\n    {\n        require(hxbLpFrozenBalances[msg.sender] > 0,\"Error: unsufficient lp balance\");//ensure user has enough lp frozen \n        uint256 interest = calcHarvestRewards(msg.sender, uniHEXHXB);\n        if(interest > 0){\n            harvest(interest);\n            farmer[msg.sender].hxbFreezeStartTimestamp = now;\n            farmer[msg.sender].totalFarmedHxyf += interest;\n        }\n    }\n\n    //harvest HXYF from HEXHXP lp\n    function HarvestHxpLp()\n        public\n    {\n        require(hxpLpFrozenBalances[msg.sender] > 0,\"Error: unsufficient lp balance\");//ensure user has enough lp frozen \n        uint256 interest = calcHarvestRewards(msg.sender, uniETHHXP);\n        if(interest > 0){\n            harvest(interest);\n            farmer[msg.sender].hxpFreezeStartTimestamp = now;\n            farmer[msg.sender].totalFarmedHxyf += interest;\n        }\n    }\n\n    //returns freezing reward in HXY\n    function calcHarvestRewards(address _user, address _lp)\n        public\n        view\n        returns(uint)\n    {   \n        if(_lp == uniETHHXYF){\n            return ((hxyfLpFrozenBalances[_user].mul(globalApy.div(halvening)).div(hxyfApy)).mul(minsPastFreezeTime(_user, _lp)));\n        }\n        else if(_lp == uniETHHXY){\n            return ((hxyLpFrozenBalances[_user].mul(globalApy.div(halvening)).div(hxyApy)).mul(minsPastFreezeTime(_user, _lp))); \n        }\n        else if(_lp == uniHEXHXB){\n            return ((hxbLpFrozenBalances[_user].mul(globalApy.div(halvening)).div(hxbApy)).mul(minsPastFreezeTime(_user, _lp)));\n        }\n        else if(_lp == uniETHHXP){\n            return ((hxpLpFrozenBalances[_user].mul(globalApy.div(halvening)).div(hxpApy)).mul(minsPastFreezeTime(_user, _lp)));\n        }\n        else{\n            revert();\n        }\n    }\n    \n    \n    //returns amount of minutes past since lp freeze start - min 1 minute\n    function minsPastFreezeTime(address _user, address _lp)\n        public\n        view\n        returns(uint)\n    {\n        if(_lp == uniETHHXYF){\n            if(farmer[_user].hxyfFreezeStartTimestamp == 0){\n                return 0;\n            }\n            uint minsPast = now.sub(farmer[_user].hxyfFreezeStartTimestamp).div(MINUTESECONDS);\n            if(minsPast >= 1){\n                return minsPast;// returns 0 if under 1 min passed\n            }\n            else{\n                return 0;\n            }\n        }\n        else if(_lp == uniETHHXY){\n            if(farmer[_user].hxyFreezeStartTimestamp == 0){\n                return 0;\n            }\n            uint minsPast = now.sub(farmer[_user].hxyFreezeStartTimestamp).div(MINUTESECONDS);\n            if(minsPast >= 1){\n                return minsPast;// returns 0 if under 1 min passed\n            }\n            else{\n                return 0;\n            }\n        }\n        else if(_lp == uniHEXHXB){\n            if(farmer[_user].hxbFreezeStartTimestamp == 0){\n                return 0;\n            }\n            uint minsPast = now.sub(farmer[_user].hxbFreezeStartTimestamp).div(MINUTESECONDS);\n            if(minsPast >= 1){\n                return minsPast;// returns 0 if under 1 min passed\n            }\n            else{\n                return 0;\n            }\n        }\n        else if(_lp == uniETHHXP){\n            if(farmer[_user].hxpFreezeStartTimestamp == 0){\n                return 0;\n            }\n            uint minsPast = now.sub(farmer[_user].hxpFreezeStartTimestamp).div(MINUTESECONDS);\n            if(minsPast >= 1){\n                return minsPast;// returns 0 if under 1 min passed\n            }\n            else{\n                return 0;\n            }\n        }\n        else{\n            revert();\n        }\n    }\n    \n    function burnHxyf(uint amt)\n        public\n    {\n        require(amt > 0, \"value must be greater than 0\");\n        _burn(msg.sender, amt);\n    }\n    \n    ///////////////////////////////\n    ////////ADMIN ONLY//////////////\n    ///////////////////////////////\n    \n    function newHalvening()\n        public\n        onlyAdmins\n    {   \n        halvening = halvening * 2;\n    }\n\n    function setGlobalApy(uint32 _apy)\n        public\n        onlyAdmins\n    {   \n          globalApy = _apy;\n    }\n    \n    function setApy(uint32 _apy, address _lp)\n        public\n        onlyAdmins\n    {\n        if(_lp == uniETHHXYF){\n            hxyfApy = _apy;\n        }\n        else if(_lp == uniETHHXY){\n            hxyApy = _apy;\n        }\n        else if(_lp == uniHEXHXB){\n            hxbApy = _apy;\n        }\n        else if(_lp == uniETHHXP){\n            hxpApy = _apy;\n        }\n        else{\n            revert();\n        }\n    }\n    \n    //set airdropcontract for can only be set once\n    function setAirdropContract(address payable _airdropContract)\n        public\n        onlyAdmins\n    {\n        require(_airdropContract != address(0), \"cannot be null address\");\n        airdropContract = _airdropContract;\n    }\n\n    function setHXYFExchange(address exchange)\n        public\n        onlyAdmins\n    {\n        uniETHHXYF = exchange;\n        uniETHHXYFInterface = IUniswapV2Pair(uniETHHXYF);\n    }\n        function setHXYExchange(address exchange)\n        public\n        onlyAdmins\n    {\n        uniETHHXY = exchange;\n        uniETHHXYInterface = IUniswapV2Pair(uniETHHXY);\n    }\n        function setHXBExchange(address exchange)\n        public\n        onlyAdmins\n    {\n        uniHEXHXB = exchange;\n        uniHEXHXBInterface = IUniswapV2Pair(uniHEXHXB);\n    }\n        function setHXPExchange(address exchange)\n        public\n        onlyAdmins\n    {\n        uniETHHXP = exchange;\n        uniETHHXPInterface = IUniswapV2Pair(uniETHHXP);\n    }\n    \n    ///////////////////////////////\n    ////////VIEW ONLY//////////////\n    ///////////////////////////////\n\n    //total HXY frozen in contract\n    function totalFrozenLpBalance(address _lp)\n        public\n        view\n        returns (uint256)\n    {\n        if(_lp == uniETHHXYF){\n            return totalHxyfLpFrozen;\n        }\n        else if(_lp == uniETHHXY){\n            return totalHxyLpFrozen;\n        }\n        else if(_lp == uniHEXHXB){\n            return totalHxbLpFrozen;\n        }\n        else if(_lp == uniETHHXP){\n            return totalHxpLpFrozen;\n        }\n        else{\n            revert();\n        }\n    }\n\n    //HXYF balance of caller\n    function hxyfBalance()\n        public\n        view\n        returns (uint256)\n    {\n        return balanceOf(msg.sender);\n    }\n    \n    //LP balance of caller\n    function lpBalance(address _lp)\n        public\n        view\n        returns (uint256)\n    {\n        if(_lp == uniETHHXYF){\n            return uniETHHXYFInterface.balanceOf(msg.sender);\n        }\n        else if(_lp == uniETHHXY){\n            return uniETHHXYInterface.balanceOf(msg.sender);\n\n        }\n        else if(_lp == uniHEXHXB){\n            return uniHEXHXBInterface.balanceOf(msg.sender);\n        }\n        else if(_lp == uniETHHXP){\n            return uniETHHXPInterface.balanceOf(msg.sender);\n        }\n        else{\n            revert();\n        }\n\n    }\n\n    //check if user can harvest HXYF yet\n    function isHarvestable(address _user, address _lp)\n        public\n        view\n        returns(bool)\n    {\n        if(_lp == uniETHHXYF){\n            if(farmer[_user].hxyfFreezeStartTimestamp == 0){\n                return false;\n            }\n            else{\n               return farmer[_user].hxyfFreezeStartTimestamp.add((MINUTESECONDS.div(24))) <= now; \n            }\n        }\n        else if(_lp == uniETHHXY){\n            if(farmer[_user].hxyFreezeStartTimestamp == 0){\n                return false;\n            }\n            else{\n               return farmer[_user].hxyFreezeStartTimestamp.add((MINUTESECONDS.div(24))) <= now; \n            }\n        }\n        else if(_lp == uniHEXHXB){\n            if(farmer[_user].hxbFreezeStartTimestamp == 0){\n                return false;\n            }\n            else{\n               return farmer[_user].hxbFreezeStartTimestamp.add((MINUTESECONDS.div(24))) <= now; \n            }\n        }\n        else if(_lp == uniETHHXP){\n            if(farmer[_user].hxpFreezeStartTimestamp == 0){\n                return false;\n            }\n            else{\n               return farmer[_user].hxpFreezeStartTimestamp.add((MINUTESECONDS.div(24))) <= now; \n            }\n        }\n        else{\n            revert();\n        }\n    }\n    \n    function donate() public payable {\n        require(msg.value > 0);\n        bool success = false;\n        uint256 balance = msg.value;\n        //distribute\n        (success, ) =  _p1.call{value:balance.mul(50).div(100)}{gas:21000}('');\n        require(success, \"Transfer failed\");\n        (success, ) =  _p2.call{value:balance.mul(50).div(100)}{gas:21000}('');\n        require(success, \"Transfer failed\");\n    }\n\n}\n"
    },
    "browser/IERC20.sol": {
      "content": "pragma solidity 0.6.4;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"
    },
    "browser/SafeMath.sol": {
      "content": "pragma solidity 0.6.4;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"
    }
  }
}