{"language":"Solidity","settings":{"evmVersion":"istanbul","libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/github/NEST-Protocol/NEST-oracle-V3/Lib/SafeMath.sol":{"content":"pragma solidity 0.6.0;\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"},"browser/github/NEST-Protocol/NEST-oracle-V3/VoteContract/Nest_3_VoteFactory.sol":{"content":"pragma solidity 0.6.0;\n\nimport \"../Lib/SafeMath.sol\";\n\n/**\n * @title Voting factory + mapping\n * @dev Vote creating method\n */\ncontract Nest_3_VoteFactory {\n    using SafeMath for uint256;\n    \n    uint256 _limitTime = 7 days;                                    //  Vote duration\n    uint256 _NNLimitTime = 1 days;                                  //  NestNode raising time\n    uint256 _circulationProportion = 51;                            //  Proportion of votes to pass\n    uint256 _NNUsedCreate = 10;                                     //  The minimum number of NNs to create a voting contract\n    uint256 _NNCreateLimit = 100;                                   //  The minimum number of NNs needed to start voting\n    uint256 _emergencyTime = 0;                                     //  The emergency state start time\n    uint256 _emergencyTimeLimit = 3 days;                           //  The emergency state duration\n    uint256 _emergencyNNAmount = 1000;                              //  The number of NNs required to switch the emergency state\n    ERC20 _NNToken;                                                 //  NestNode Token\n    ERC20 _nestToken;                                               //  NestToken\n    mapping(string => address) _contractAddress;                    //  Voting contract mapping\n    mapping(address => bool) _modifyAuthority;                      //  Modify permissions\n    mapping(address => address) _myVote;                            //  Personal voting address\n    mapping(address => uint256) _emergencyPerson;                   //  Emergency state personal voting number\n    mapping(address => bool) _contractData;                         //  Voting contract data\n    bool _stateOfEmergency = false;                                 //  Emergency state\n    address _destructionAddress;                                    //  Destroy contract address\n\n    event ContractAddress(address contractAddress);\n    \n    /**\n    * @dev Initialization method\n    */\n    constructor () public {\n        _modifyAuthority[address(msg.sender)] = true;\n    }\n    \n    /**\n    * @dev Reset contract\n    */\n    function changeMapping() public onlyOwner {\n        _NNToken = ERC20(checkAddress(\"nestNode\"));\n        _destructionAddress = address(checkAddress(\"nest.v3.destruction\"));\n        _nestToken = ERC20(address(checkAddress(\"nest\")));\n    }\n    \n    /**\n    * @dev Create voting contract\n    * @param implementContract The executable contract address for voting\n    * @param nestNodeAmount Number of NNs to pledge\n    */\n    function createVote(address implementContract, uint256 nestNodeAmount) public {\n        require(address(tx.origin) == address(msg.sender), \"It can't be a contract\");\n        require(nestNodeAmount >= _NNUsedCreate);\n        Nest_3_VoteContract newContract = new Nest_3_VoteContract(implementContract, _stateOfEmergency, nestNodeAmount);\n        require(_NNToken.transferFrom(address(tx.origin), address(newContract), nestNodeAmount), \"Authorization transfer failed\");\n        _contractData[address(newContract)] = true;\n        emit ContractAddress(address(newContract));\n    }\n    \n    /**\n    * @dev Use NEST to vote\n    * @param contractAddress Vote contract address\n    */\n    function nestVote(address contractAddress) public {\n        require(address(msg.sender) == address(tx.origin), \"It can't be a contract\");\n        require(_contractData[contractAddress], \"It's not a voting contract\");\n        require(!checkVoteNow(address(msg.sender)));\n        Nest_3_VoteContract newContract = Nest_3_VoteContract(contractAddress);\n        newContract.nestVote();\n        _myVote[address(tx.origin)] = contractAddress;\n    }\n    \n    /**\n    * @dev Vote using NestNode Token\n    * @param contractAddress Vote contract address\n    * @param NNAmount Amount of NNs to pledge\n    */\n    function nestNodeVote(address contractAddress, uint256 NNAmount) public {\n        require(address(msg.sender) == address(tx.origin), \"It can't be a contract\");\n        require(_contractData[contractAddress], \"It's not a voting contract\");\n        Nest_3_VoteContract newContract = Nest_3_VoteContract(contractAddress);\n        require(_NNToken.transferFrom(address(tx.origin), address(newContract), NNAmount), \"Authorization transfer failed\");\n        newContract.nestNodeVote(NNAmount);\n    }\n    \n    /**\n    * @dev Excecute contract\n    * @param contractAddress Vote contract address\n    */\n    function startChange(address contractAddress) public {\n        require(address(msg.sender) == address(tx.origin), \"It can't be a contract\");\n        require(_contractData[contractAddress], \"It's not a voting contract\");\n        Nest_3_VoteContract newContract = Nest_3_VoteContract(contractAddress);\n        require(_stateOfEmergency == newContract.checkStateOfEmergency());\n        addSuperManPrivate(address(newContract));\n        newContract.startChange();\n        deleteSuperManPrivate(address(newContract));\n    }\n    \n    /**\n    * @dev Switch emergency state-transfer in NestNode Token\n    * @param amount Amount of NNs to transfer\n    */\n    function sendNestNodeForStateOfEmergency(uint256 amount) public {\n        require(_NNToken.transferFrom(address(tx.origin), address(this), amount));\n        _emergencyPerson[address(tx.origin)] = _emergencyPerson[address(tx.origin)].add(amount);\n    }\n    \n    /**\n    * @dev Switch emergency state-transfer out NestNode Token\n    */\n    function turnOutNestNodeForStateOfEmergency() public {\n        require(_emergencyPerson[address(tx.origin)] > 0);\n        require(_NNToken.transfer(address(tx.origin), _emergencyPerson[address(tx.origin)]));\n        _emergencyPerson[address(tx.origin)] = 0;\n        uint256 nestAmount = _nestToken.balanceOf(address(this));\n        require(_nestToken.transfer(address(_destructionAddress), nestAmount));\n    }\n    \n    /**\n    * @dev Modify emergency state\n    */\n    function changeStateOfEmergency() public {\n        if (_stateOfEmergency) {\n            require(now > _emergencyTime.add(_emergencyTimeLimit));\n            _stateOfEmergency = false;\n            _emergencyTime = 0;\n        } else {\n            require(_emergencyPerson[address(msg.sender)] > 0);\n            require(_NNToken.balanceOf(address(this)) >= _emergencyNNAmount);\n            _stateOfEmergency = true;\n            _emergencyTime = now;\n        }\n    }\n    \n    /**\n    * @dev Check whether participating in the voting\n    * @param user Address to check\n    * @return bool Whether voting\n    */\n    function checkVoteNow(address user) public view returns (bool) {\n        if (_myVote[user] == address(0x0)) {\n            return false;\n        } else {\n            Nest_3_VoteContract vote = Nest_3_VoteContract(_myVote[user]);\n            if (vote.checkContractEffective() || vote.checkPersonalAmount(user) == 0) {\n                return false;\n            }\n            return true;\n        }\n    }\n    \n    /**\n    * @dev Check my voting\n    * @param user Address to check\n    * @return address Address recently participated in the voting contract address\n    */\n    function checkMyVote(address user) public view returns (address) {\n        return _myVote[user];\n    }\n    \n    //  Check the voting time\n    function checkLimitTime() public view returns (uint256) {\n        return _limitTime;\n    }\n    \n    //  Check the NestNode raising time\n    function checkNNLimitTime() public view returns (uint256) {\n        return _NNLimitTime;\n    }\n    \n    //  Check the voting proportion to pass\n    function checkCirculationProportion() public view returns (uint256) {\n        return _circulationProportion;\n    }\n    \n    //  Check the minimum number of NNs to create a voting contract\n    function checkNNUsedCreate() public view returns (uint256) {\n        return _NNUsedCreate;\n    }\n    \n    //  Check the minimum number of NNs raised to start a vote\n    function checkNNCreateLimit() public view returns (uint256) {\n        return _NNCreateLimit;\n    }\n    \n    //  Check whether in emergency state\n    function checkStateOfEmergency() public view returns (bool) {\n        return _stateOfEmergency;\n    }\n    \n    //  Check the start time of the emergency state\n    function checkEmergencyTime() public view returns (uint256) {\n        return _emergencyTime;\n    }\n    \n    //  Check the duration of the emergency state\n    function checkEmergencyTimeLimit() public view returns (uint256) {\n        return _emergencyTimeLimit;\n    }\n    \n    //  Check the amount of personal pledged NNs\n    function checkEmergencyPerson(address user) public view returns (uint256) {\n        return _emergencyPerson[user];\n    }\n    \n    //  Check the number of NNs required for the emergency\n    function checkEmergencyNNAmount() public view returns (uint256) {\n        return _emergencyNNAmount;\n    }\n    \n    //  Verify voting contract data\n    function checkContractData(address contractAddress) public view returns (bool) {\n        return _contractData[contractAddress];\n    }\n    \n    //  Modify voting time\n    function changeLimitTime(uint256 num) public onlyOwner {\n        require(num > 0, \"Parameter needs to be greater than 0\");\n        _limitTime = num;\n    }\n    \n    //  Modify the NestNode raising time\n    function changeNNLimitTime(uint256 num) public onlyOwner {\n        require(num > 0, \"Parameter needs to be greater than 0\");\n        _NNLimitTime = num;\n    }\n    \n    //  Modify the voting proportion\n    function changeCirculationProportion(uint256 num) public onlyOwner {\n        require(num > 0, \"Parameter needs to be greater than 0\");\n        _circulationProportion = num;\n    }\n    \n    //  Modify the minimum number of NNs to create a voting contract\n    function changeNNUsedCreate(uint256 num) public onlyOwner {\n        _NNUsedCreate = num;\n    }\n    \n    //  Modify the minimum number of NNs to raised to start a voting\n    function checkNNCreateLimit(uint256 num) public onlyOwner {\n        _NNCreateLimit = num;\n    }\n    \n    //  Modify the emergency state duration\n    function changeEmergencyTimeLimit(uint256 num) public onlyOwner {\n        require(num > 0);\n        _emergencyTimeLimit = num.mul(1 days);\n    }\n    \n    //  Modify the number of NNs required for emergency state\n    function changeEmergencyNNAmount(uint256 num) public onlyOwner {\n        require(num > 0);\n        _emergencyNNAmount = num;\n    }\n    \n    //  Check address\n    function checkAddress(string memory name) public view returns (address contractAddress) {\n        return _contractAddress[name];\n    }\n    \n    //  Add contract mapping address\n    function addContractAddress(string memory name, address contractAddress) public onlyOwner {\n        _contractAddress[name] = contractAddress;\n    }\n    \n    //  Add administrator address \n    function addSuperMan(address superMan) public onlyOwner {\n        _modifyAuthority[superMan] = true;\n    }\n    function addSuperManPrivate(address superMan) private {\n        _modifyAuthority[superMan] = true;\n    }\n    \n    //  Delete administrator address\n    function deleteSuperMan(address superMan) public onlyOwner {\n        _modifyAuthority[superMan] = false;\n    }\n    function deleteSuperManPrivate(address superMan) private {\n        _modifyAuthority[superMan] = false;\n    }\n    \n    //  Delete voting contract data\n    function deleteContractData(address contractAddress) public onlyOwner {\n        _contractData[contractAddress] = false;\n    }\n    \n    //  Check whether the administrator\n    function checkOwners(address man) public view returns (bool) {\n        return _modifyAuthority[man];\n    }\n    \n    //  Administrator only\n    modifier onlyOwner() {\n        require(checkOwners(msg.sender), \"No authority\");\n        _;\n    }\n}\n\n/**\n * @title Voting contract\n */\ncontract Nest_3_VoteContract {\n    using SafeMath for uint256;\n    \n    Nest_3_Implement _implementContract;                //  Executable contract\n    Nest_3_TokenSave _tokenSave;                        //  Lock-up contract\n    Nest_3_VoteFactory _voteFactory;                    //  Voting factory contract\n    Nest_3_TokenAbonus _tokenAbonus;                    //  Bonus logic contract\n    ERC20 _nestToken;                                   //  NestToken\n    ERC20 _NNToken;                                     //  NestNode Token\n    address _miningSave;                                //  Mining pool contract\n    address _implementAddress;                          //  Executable contract address\n    address _destructionAddress;                        //  Destruction contract address\n    uint256 _createTime;                                //  Creation time\n    uint256 _endTime;                                   //  End time\n    uint256 _totalAmount;                               //  Total votes\n    uint256 _circulation;                               //  Passed votes\n    uint256 _destroyedNest;                             //  Destroyed NEST\n    uint256 _NNLimitTime;                               //  NestNode raising time\n    uint256 _NNCreateLimit;                             //  Minimum number of NNs to create votes\n    uint256 _abonusTimes;                               //  Period number of used snapshot in emergency state\n    uint256 _allNNAmount;                               //  Total number of NNs\n    bool _effective = false;                            //  Whether vote is effective\n    bool _nestVote = false;                             //  Whether NEST vote can be performed\n    bool _isChange = false;                             //  Whether NEST vote is executed\n    bool _stateOfEmergency;                             //  Whether the contract is in emergency state\n    mapping(address => uint256) _personalAmount;        //  Number of personal votes\n    mapping(address => uint256) _personalNNAmount;      //  Number of NN personal votes\n    \n    /**\n    * @dev Initialization method\n    * @param contractAddress Executable contract address\n    * @param stateOfEmergency Whether in emergency state\n    * @param NNAmount Amount of NNs\n    */\n    constructor (address contractAddress, bool stateOfEmergency, uint256 NNAmount) public {\n        Nest_3_VoteFactory voteFactory = Nest_3_VoteFactory(address(msg.sender));\n        _voteFactory = voteFactory;\n        _nestToken = ERC20(voteFactory.checkAddress(\"nest\"));\n        _NNToken = ERC20(voteFactory.checkAddress(\"nestNode\"));\n        _implementContract = Nest_3_Implement(address(contractAddress));\n        _implementAddress = address(contractAddress);\n        _destructionAddress = address(voteFactory.checkAddress(\"nest.v3.destruction\"));\n        _personalNNAmount[address(tx.origin)] = NNAmount;\n        _allNNAmount = NNAmount;\n        _createTime = now;                                    \n        _endTime = _createTime.add(voteFactory.checkLimitTime());\n        _NNLimitTime = voteFactory.checkNNLimitTime();\n        _NNCreateLimit = voteFactory.checkNNCreateLimit();\n        _stateOfEmergency = stateOfEmergency;\n        if (stateOfEmergency) {\n            //  If in emergency state, read the last two periods of bonus lock-up and total circulation data\n            _tokenAbonus = Nest_3_TokenAbonus(voteFactory.checkAddress(\"nest.v3.tokenAbonus\"));\n            _abonusTimes = _tokenAbonus.checkTimes().sub(2);\n            require(_abonusTimes > 0);\n            _circulation = _tokenAbonus.checkTokenAllValueHistory(address(_nestToken),_abonusTimes).mul(voteFactory.checkCirculationProportion()).div(100);\n        } else {\n            _miningSave = address(voteFactory.checkAddress(\"nest.v3.miningSave\"));\n            _tokenSave = Nest_3_TokenSave(voteFactory.checkAddress(\"nest.v3.tokenSave\"));\n            _circulation = (uint256(10000000000 ether).sub(_nestToken.balanceOf(address(_miningSave))).sub(_nestToken.balanceOf(address(_destructionAddress)))).mul(voteFactory.checkCirculationProportion()).div(100);\n        }\n        if (_allNNAmount >= _NNCreateLimit) {\n            _nestVote = true;\n        }\n    }\n    \n    /**\n    * @dev NEST voting\n    */\n    function nestVote() public onlyFactory {\n        require(now <= _endTime, \"Voting time exceeded\");\n        require(!_effective, \"Vote in force\");\n        require(_nestVote);\n        require(_personalAmount[address(tx.origin)] == 0, \"Have voted\");\n        uint256 amount;\n        if (_stateOfEmergency) {\n            //  If in emergency state, read the last two periods of bonus lock-up and total circulation data\n            amount = _tokenAbonus.checkTokenSelfHistory(address(_nestToken),_abonusTimes, address(tx.origin));\n        } else {\n            amount = _tokenSave.checkAmount(address(tx.origin), address(_nestToken));\n        }\n        _personalAmount[address(tx.origin)] = amount;\n        _totalAmount = _totalAmount.add(amount);\n        ifEffective();\n    }\n    \n    /**\n    * @dev NEST voting cancellation\n    */\n    function nestVoteCancel() public {\n        require(address(msg.sender) == address(tx.origin), \"It can't be a contract\");\n        require(now <= _endTime, \"Voting time exceeded\");\n        require(!_effective, \"Vote in force\");\n        require(_personalAmount[address(tx.origin)] > 0, \"No vote\");                     \n        _totalAmount = _totalAmount.sub(_personalAmount[address(tx.origin)]);\n        _personalAmount[address(tx.origin)] = 0;\n    }\n    \n    /**\n    * @dev  NestNode voting\n    * @param NNAmount Amount of NNs\n    */\n    function nestNodeVote(uint256 NNAmount) public onlyFactory {\n        require(now <= _createTime.add(_NNLimitTime), \"Voting time exceeded\");\n        require(!_nestVote);\n        _personalNNAmount[address(tx.origin)] = _personalNNAmount[address(tx.origin)].add(NNAmount);\n        _allNNAmount = _allNNAmount.add(NNAmount);\n        if (_allNNAmount >= _NNCreateLimit) {\n            _nestVote = true;\n        }\n    }\n    \n    /**\n    * @dev Withdrawing lock-up NNs\n    */\n    function turnOutNestNode() public {\n        if (_nestVote) {\n            //  Normal NEST voting\n            if (!_stateOfEmergency || !_effective) {\n                //  Non-emergency state\n                require(now > _endTime, \"Vote unenforceable\");\n            }\n        } else {\n            //  NN voting\n            require(now > _createTime.add(_NNLimitTime));\n        }\n        require(_personalNNAmount[address(tx.origin)] > 0);\n        //  Reverting back the NNs\n        require(_NNToken.transfer(address(tx.origin), _personalNNAmount[address(tx.origin)]));\n        _personalNNAmount[address(tx.origin)] = 0;\n        //  Destroying NEST Tokens \n        uint256 nestAmount = _nestToken.balanceOf(address(this));\n        _destroyedNest = _destroyedNest.add(nestAmount);\n        require(_nestToken.transfer(address(_destructionAddress), nestAmount));\n    }\n    \n    /**\n    * @dev Execute the contract\n    */\n    function startChange() public onlyFactory {\n        require(!_isChange);\n        _isChange = true;\n        if (_stateOfEmergency) {\n            require(_effective, \"Vote unenforceable\");\n        } else {\n            require(_effective && now > _endTime, \"Vote unenforceable\");\n        }\n        //  Add the executable contract to the administrator list\n        _voteFactory.addSuperMan(address(_implementContract));\n        //  Execute\n        _implementContract.doit();\n        //  Delete the authorization\n        _voteFactory.deleteSuperMan(address(_implementContract));\n    }\n    \n    /**\n    * @dev check whether the vote is effective\n    */\n    function ifEffective() private {\n        if (_totalAmount >= _circulation) {\n            _effective = true;\n        }\n    }\n    \n    /**\n    * @dev Check whether the vote is over\n    */\n    function checkContractEffective() public view returns (bool) {\n        if (_effective || now > _endTime) {\n            return true;\n        } \n        return false;\n    }\n    \n    //  Check the executable implement contract address\n    function checkImplementAddress() public view returns (address) {\n        return _implementAddress;\n    }\n    \n    //  Check the voting start time\n    function checkCreateTime() public view returns (uint256) {\n        return _createTime;\n    }\n    \n    //  Check the voting end time\n    function checkEndTime() public view returns (uint256) {\n        return _endTime;\n    }\n    \n    //  Check the current total number of votes\n    function checkTotalAmount() public view returns (uint256) {\n        return _totalAmount;\n    }\n    \n    //  Check the number of votes to pass\n    function checkCirculation() public view returns (uint256) {\n        return _circulation;\n    }\n    \n    //  Check the number of personal votes\n    function checkPersonalAmount(address user) public view returns (uint256) {\n        return _personalAmount[user];\n    }\n    \n    //  Check the destroyed NEST\n    function checkDestroyedNest() public view returns (uint256) {\n        return _destroyedNest;\n    }\n    \n    //  Check whether the contract is effective\n    function checkEffective() public view returns (bool) {\n        return _effective;\n    }\n    \n    //  Check whether in emergency state\n    function checkStateOfEmergency() public view returns (bool) {\n        return _stateOfEmergency;\n    }\n    \n    //  Check NestNode raising time\n    function checkNNLimitTime() public view returns (uint256) {\n        return _NNLimitTime;\n    }\n    \n    //  Check the minimum number of NNs to create a vote\n    function checkNNCreateLimit() public view returns (uint256) {\n        return _NNCreateLimit;\n    }\n    \n    //  Check the period number of snapshot used in the emergency state\n    function checkAbonusTimes() public view returns (uint256) {\n        return _abonusTimes;\n    }\n    \n    //  Check number of personal votes\n    function checkPersonalNNAmount(address user) public view returns (uint256) {\n        return _personalNNAmount[address(user)];\n    }\n    \n    //  Check the total number of NNs\n    function checkAllNNAmount() public view returns (uint256) {\n        return _allNNAmount;\n    }\n    \n    //  Check whether NEST voting is available\n    function checkNestVote() public view returns (bool) {\n        return _nestVote;\n    }\n    \n    //  Check whether it has been excecuted\n    function checkIsChange() public view returns (bool) {\n        return _isChange;\n    }\n    \n    //  Vote Factory contract only\n    modifier onlyFactory() {\n        require(address(_voteFactory) == address(msg.sender), \"No authority\");\n        _;\n    }\n}\n\n//  Executable contract\ninterface Nest_3_Implement {\n    //  Execute\n    function doit() external;\n}\n\n//  NEST lock-up contract\ninterface Nest_3_TokenSave {\n    //  Check lock-up amount\n    function checkAmount(address sender, address token) external view returns (uint256);\n}\n\n//  Bonus logic contract\ninterface Nest_3_TokenAbonus {\n    //  Check NEST circulation snapshot\n    function checkTokenAllValueHistory(address token, uint256 times) external view returns (uint256);\n    //  Check NEST user balance snapshot\n    function checkTokenSelfHistory(address token, uint256 times, address user) external view returns (uint256);\n    //  Check bonus ledger period\n    function checkTimes() external view returns (uint256);\n}\n\n//  Erc20 contract\ninterface ERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"}}}