{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/LootCreativeDomain.sol":{"content":"pragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: contracts/LootCreativeDomain.sol\n\npragma solidity 0.7.4;\n\n\n\n\ninterface LCDProject {\n    function mintWithLoot(address minter, uint256 tokenId) external;\n    function mintWithoutLoot(address minter, uint256 tokenId) external payable;\n    function mintAsCurator(address minter, uint256 tokenId) external;\n    function getProps(uint256 tokenId) external view returns(string memory);\n    function tokenURI(uint256 tokenId) external view returns(string memory);\n    function ownerOf(uint256 tokenId) external view returns(address);\n}\n\ninterface LCDCustomProject {\n    function mintCustom(address minter, uint256 tokenId) external payable;\n    function mintCustomAsCurator(address minter, uint256 tokenId) external;\n    function getProps(uint256 tokenId) external view returns(string memory);\n    function tokenURI(uint256 tokenId) external view returns(string memory);\n    function ownerOf(uint256 tokenId) external view returns(address);\n}\n\ninterface LootInterface {\n    function ownerOf(uint256 tokenId) external view returns (address);\n}\n\n\ncontract LootCreativeDomain is ReentrancyGuard {\n    using SafeMath for uint256;\n\n    uint256 private registryPrice = 50000000000000000; // initiated at 0.05 ETH\n    uint256 private customPropPrice = 10000000000000000; // initiated at 0.01 ETH\n\n    uint256 private constant NUM_LOOT = 8000;\n    uint256 public protocolClaimableFees;\n\n    address public lootAddress = 0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7;\n    LootInterface lootContract = LootInterface(lootAddress);\n\n    address public gov;\n    address public protocol;\n    IERC20 public lcdToken;\n\n    mapping(address => Project) projectRegistry;\n\n    mapping(address => mapping(uint256 => string)) projectToTokenIdToLambdaProp;\n    mapping(address => mapping(uint256 => string)) projectToTokenIdToOmegaProp;\n    mapping(address => mapping(uint256 => string)) projectToTokenIdToCustomURI;\n\n    mapping(address => uint256) affiliateOrCuratorFeesClaimable;\n    mapping(address => mapping(uint256 => bool)) tokenRegistry;\n\n    event ProjectRegister(\n        address indexed _project,\n        uint256 _lootPrice,\n        uint256 _nonLootPrice,\n        uint256 _nonLootMintCap,\n        uint256 _curatorMintCap,\n        uint256 _timestamp,\n        bool _isCustomProject\n    );\n\n    event Endorse(\n        address indexed _project,\n        uint256 _amountPerMint,\n        uint256 _timestamp\n    );\n\n    event RevokeEndorse(\n        address indexed _project,\n        uint256 _timestamp\n    );\n\n    event LCDMint(\n        address indexed _project,\n        address indexed _minter,\n        uint256 _tokenId,\n        bool _mintWithLoot\n    );\n\n    event FeeClaim(\n        address indexed _claimer,\n        uint256 _amount,\n        uint256 _timestamp\n    );\n\n    event ProtocolClaim(\n        uint256 _amount,\n        uint256 _timestamp\n    );\n\n    event LambdaPropSet(\n        address indexed _project,\n        uint256 indexed _tokenId,\n        string _lambdaProp,\n        address indexed _affiliate\n    );\n\n    event OmegaPropSet(\n        address indexed _project,\n        uint256 indexed _tokenId,\n        string _omegaProp,\n        address indexed _affiliate\n    );\n\n    event CustomURISet(\n        address indexed _project,\n        uint256 indexed _tokenId,\n        string _customURI,\n        address indexed _affiliate\n    );\n\n    struct Project {\n        address curator;\n        uint256 lootPrice;\n        uint256 nonLootPrice;\n        uint256 nonLootMintCap;\n        uint256 nonLootMints;\n        uint256 curatorMintCap;\n        uint256 curatorMints;\n        uint256 endorsementPerMint;\n        bool isCustomURIEnabled;\n        bool isCustomProject;\n    }\n\n    constructor(IERC20 _lcdToken) public {\n        gov = msg.sender;\n        protocol = msg.sender;\n        lcdToken = _lcdToken;\n    }\n\n    modifier onlyGov {\n        require(msg.sender == gov, \"Not gov\");\n        _;\n    }\n\n    modifier onlyProtocol {\n        require(msg.sender == protocol, \"Not protocol\");\n        _;\n    }\n\n    /*\n    *\n    * Mint\n    *\n    */\n\n    /*\n    * Mint on standard projects as Loot holder\n    */\n    function mintWithLoot(address _project, uint256 _lootId) public payable nonReentrant {\n        Project memory project = projectRegistry[_project];\n        require(lootContract.ownerOf(_lootId) == msg.sender, \"Not owner\");\n        require(msg.value == project.lootPrice, \"Incorrect value\");\n        require(!project.isCustomProject, \"Custom project\");\n\n        LCDProject(_project).mintWithLoot(msg.sender, _lootId);\n\n        _registerId(_project, _lootId);\n        _registerFeesFromMint(_project, project.lootPrice);\n        _distributeEndorsement(msg.sender, project.endorsementPerMint);\n\n        emit LCDMint(_project, msg.sender, _lootId, true);\n    }\n\n    /*\n    * Mint on standard projects as non-Loot holder\n    * Note that the tokenId is not accepted as a param; it's generated linearly\n    */\n    function mintWithoutLoot(address _project) public payable nonReentrant {\n        Project memory project = projectRegistry[_project];\n        require(msg.value == project.nonLootPrice, \"Incorrect value\");\n        require(project.nonLootMints < project.nonLootMintCap, \"Capped\");\n        require(!project.isCustomProject, \"Custom project\");\n\n        project.nonLootMints++;\n        uint256 tokenId = NUM_LOOT.add(project.nonLootMints);\n\n        LCDProject(_project).mintWithoutLoot(msg.sender, tokenId);\n\n        _registerId(_project, tokenId);\n        _registerFeesFromMint(_project, project.nonLootPrice);\n        _distributeEndorsement(msg.sender, project.endorsementPerMint);\n\n        emit LCDMint(_project, msg.sender, tokenId, false);\n    }\n\n    /*\n    * Mint on custom projects as anyone\n    */\n    function mintCustom(address _project, uint256 _tokenId) public payable {\n        Project memory project = projectRegistry[_project];\n        require(project.isCustomProject, \"Not custom project\");\n        require(msg.value == project.nonLootPrice, \"Incorrect value\");\n        require(_tokenId > 0 && _tokenId <= project.nonLootMintCap, \"Invalid id\");\n\n        LCDCustomProject(_project).mintCustom(msg.sender, _tokenId);\n        project.nonLootMints++;\n\n        _registerId(_project, _tokenId);\n        _registerFeesFromMint(_project, project.nonLootPrice);\n        _distributeEndorsement(msg.sender, project.endorsementPerMint);\n\n        emit LCDMint(_project, msg.sender, _tokenId, false);\n    }\n\n    /*\n    * Mint on standard projects as curator\n    */\n    function mintAsCurator(address _project, uint256 _tokenId) public {\n        Project memory project = projectRegistry[_project];\n        require(msg.sender == project.curator, \"Not curator\");\n        require(!project.isCustomProject, \"Custom project\");\n        require(project.curatorMints < project.curatorMintCap, \"No more mints\");\n        require(\n            _tokenId > NUM_LOOT.add(project.nonLootMintCap) &&\n            _tokenId <= NUM_LOOT.add(project.nonLootMintCap).add(project.curatorMintCap),\n            \"Invalid id\"\n        );\n\n        LCDProject(_project).mintAsCurator(msg.sender, _tokenId);\n        _registerId(_project, _tokenId);\n\n        emit LCDMint(_project, msg.sender, _tokenId, false);\n    }\n\n    /*\n    * Mint on custom projects as curator\n    */\n    function mintCustomAsCurator(address _project, uint256 _tokenId) public {\n        Project memory project = projectRegistry[_project];\n        require(msg.sender == project.curator, \"Not curator\");\n        require(project.isCustomProject, \"Not custom project\");\n        require(\n            _tokenId > project.nonLootMintCap &&\n            _tokenId <= project.nonLootMintCap.add(project.curatorMintCap), \"Invalid id\"\n        );\n\n        LCDCustomProject(_project).mintCustomAsCurator(msg.sender, _tokenId);\n        _registerId(_project, _tokenId);\n\n        emit LCDMint(_project, msg.sender, _tokenId, false);\n    }\n\n    /*\n    *\n    * Gov\n    *\n    */\n\n    /*\n    * Called to incentivize minters with LCD tokens on certain projects\n    */\n    function endorse(address _project, uint256 _endorsementPerMint) public onlyGov {\n        require(_endorsementPerMint <= 5e16, \"Too high\");\n        projectRegistry[_project].endorsementPerMint = _endorsementPerMint;\n\n        emit Endorse(_project, _endorsementPerMint, block.timestamp);\n    }\n\n    /*\n    * Called to no longer incentivize a project\n    */\n    function revokeEndorsement(address _project) public onlyGov {\n        projectRegistry[_project].endorsementPerMint = 0;\n\n        emit RevokeEndorse(_project, block.timestamp);\n    }\n\n    /*\n    * Change ETH amount required to register custom prop on LCD (wei notation)\n    */\n    function changeCustomPropPrice(uint256 _newPrice) public onlyGov {\n        customPropPrice = _newPrice;\n    }\n\n    /*\n    * Change ETH amount required to register project on LCD (wei notation)\n    */\n    function changeRegistryPrice(uint256 _newPrice) public onlyGov {\n        registryPrice = _newPrice;\n    }\n\n    /*\n    * Withdraw ERC20s from contract\n    */\n    function withdrawTokens(address token) public onlyGov {\n        IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\n    }\n\n    /*\n    * Set new gov address\n    */\n    function setGov(address _gov) public onlyGov {\n        require(_gov != address(0));\n        gov = _gov;\n    }\n\n    /*\n    * Set new protocol address\n    */\n    function setProtocol(address _protocol) public onlyProtocol {\n        require(_protocol != address(0));\n        protocol = _protocol;\n    }\n\n    /*\n    *\n    * Claim Fees\n    *\n    */\n\n    /*\n    * Affiliate or curator claim of ETH fees\n    */\n    function claim(address _claimer) public nonReentrant {\n        require(msg.sender == _claimer, \"Not affiliate/curator\");\n        uint256 claimable = affiliateOrCuratorFeesClaimable[_claimer];\n        require(claimable > 0, \"Nothing to claim\");\n        affiliateOrCuratorFeesClaimable[_claimer] = 0;\n\n        (bool sent, ) = _claimer.call{value: claimable}(\"\");\n        require(sent, \"Failed\");\n\n        emit FeeClaim(_claimer, claimable, block.timestamp);\n    }\n\n    /*\n    * Protocol claim of ETH fees\n    */\n    function protocolClaim() public onlyProtocol {\n        uint256 claimable = protocolClaimableFees;\n        protocolClaimableFees = 0;\n        (bool sent, ) = protocol.call{value: claimable}(\"\");\n        require(sent, \"Failed\");\n\n        emit ProtocolClaim(claimable, block.timestamp);\n    }\n\n    /*\n    *\n    * Curator\n    *\n    */\n\n    /*\n    * Registers NFT project where Loot owners are entitled to mint with respective lootId\n    * _project: NFT address\n    * _lootPrice: ETH payable per Loot mint (can be 0) - wei notation\n    * _nonLootPrice: ETH payable per non-Loot mint (can be 0) - wei notation\n    * _nonLootMintCap: Tokens mintable to non-Loot owners\n    * _curatorMintCap: Tokens mintable by curator\n    * _isCustomURIEnabled: bool for whether token holders can set Custom URI for token on LCD contract\n    */\n    function registerProject(\n        address _project,\n        uint256 _lootPrice,\n        uint256 _nonLootPrice,\n        uint256 _nonLootMintCap,\n        uint256 _curatorMintCap,\n        bool _isCustomURIEnabled\n    ) public payable {\n        require(msg.value == registryPrice, \"Incorrect value\");\n        Project storage project = projectRegistry[_project];\n        require(project.curator == address(0), \"Project exists\");\n\n        project.curator = msg.sender;\n        project.lootPrice = _lootPrice;\n        project.nonLootPrice = _nonLootPrice;\n        project.nonLootMintCap = _nonLootMintCap;\n        project.curatorMintCap = _curatorMintCap;\n        project.isCustomURIEnabled = _isCustomURIEnabled;\n\n        _registerFeesFromProp(address(0), registryPrice);\n\n        emit ProjectRegister(_project, _lootPrice, _nonLootPrice, _nonLootMintCap, _curatorMintCap, block.timestamp, false);\n    }\n\n    /*\n    * Registers NFT project where minting is not linked to Loot ownership\n    * _project: NFT address\n    * _price: ETH payable per mint (can be 0) - wei notation\n    * _mintCap: total Rokens mintable by public\n    * _curatorMintCap: Tokens mintable by curator\n    * _isCustomURIEnabled: bool for whether token holders can set Custom URI for token on LCD contract\n    */\n    function registerCustomProject(\n        address _project,\n        uint256 _price,\n        uint256 _mintCap,\n        uint256 _curatorMintCap,\n        bool _isCustomURIEnabled\n    ) public payable {\n        require(msg.value == registryPrice, \"Incorrect value\");\n        Project storage project = projectRegistry[_project];\n        require(project.curator == address(0), \"Project exists\");\n\n        project.curator = msg.sender;\n        project.nonLootPrice = _price;\n        project.nonLootMintCap = _mintCap;\n        project.curatorMintCap = _curatorMintCap;\n        project.isCustomProject = true;\n        project.isCustomURIEnabled = _isCustomURIEnabled;\n\n        _registerFeesFromProp(address(0), registryPrice);\n\n        emit ProjectRegister(_project, 0, _price, _mintCap, _curatorMintCap, block.timestamp, true);\n    }\n\n    /*\n    * Changes curator of project and recipient of future mint fees\n    */\n    function changeCurator(address _project, address _newCurator) public {\n        require(msg.sender == projectRegistry[_project].curator, \"Not curator\");\n        require(_newCurator != address(0));\n        projectRegistry[_project].curator = _newCurator;\n    }\n\n    /*\n    *\n    * Props\n    *\n    */\n\n    /*\n    * Set a custom string prop\n    * Lambda prop has no specific intended use case. Developers can use this\n    * prop to unlock whichever features or experiences they want to incorporate\n    * into their creation\n    * _affiliate is (for example) the developer of gaming or visual experience\n    * that integrates the NFT\n    * Affiliate earns 80% of ETH fee\n    */\n    function setLambdaProp(\n        address _project,\n        uint256 _tokenId,\n        string memory _lambdaProp,\n        address _affiliate\n    ) public payable nonReentrant {\n        require(msg.sender == LCDProject(_project).ownerOf(_tokenId), \"Not owner\");\n        require(msg.value == customPropPrice, \"Incorrect value\");\n\n        projectToTokenIdToLambdaProp[_project][_tokenId] = _lambdaProp;\n        _registerFeesFromProp(_affiliate, customPropPrice);\n\n        emit LambdaPropSet(_project, _tokenId, _lambdaProp, _affiliate);\n    }\n\n    /*\n    * Set a custom string prop\n    * Omega prop has no specific intended use case. Developers can use this\n    * prop to unlock whichever features or experiences they want to incorporate\n    * into their creation\n    * _affiliate is (for example) the developer of gaming or visual experience\n    * that integrates the NFT\n    * Omega prop price == 2x Lambda prop price\n    * Affiliate earns 80% of ETH fee\n    */\n    function setOmegaProp(\n        address _project,\n        uint256 _tokenId,\n        string memory _omegaProp,\n        address _affiliate\n    ) public payable nonReentrant {\n        require(msg.sender == LCDProject(_project).ownerOf(_tokenId), \"Not owner\");\n        require(msg.value == customPropPrice * 2, \"Incorrect value\");\n\n        projectToTokenIdToOmegaProp[_project][_tokenId] = _omegaProp;\n        _registerFeesFromProp(_affiliate, customPropPrice * 2);\n\n        emit OmegaPropSet(_project, _tokenId, _omegaProp, _affiliate);\n    }\n\n    /*\n    * LCD allows token holders to set a custom URI of their choosing if curator has enabled feature\n    * See LootVanGogh project for example use case, where rarity/properties are returned statically\n    * via getProps but user can modify custom URI interpretation of those props\n    * Example of _customURI prop would be an IPFS url\n    * _affiliate is (for example) the developer of gaming or visual experience\n    * that integrates the NFT\n    * Affiliate earns 80% of ETH fee\n    */\n    function setCustomURI(\n        address _project,\n         uint256 _tokenId,\n         string memory _customURI,\n         address _affiliate\n    ) public payable nonReentrant {\n        require(projectRegistry[_project].isCustomURIEnabled, \"Disabled\");\n        require(msg.sender == LCDProject(_project).ownerOf(_tokenId), \"Not owner\");\n        require(msg.value == customPropPrice, \"Incorrect value\");\n\n        projectToTokenIdToCustomURI[_project][_tokenId] = _customURI;\n        _registerFeesFromProp(_affiliate, customPropPrice);\n\n        emit CustomURISet(_project, _tokenId, _customURI, _affiliate);\n    }\n\n    /*\n    *\n    * Reads\n    *\n    */\n\n    /*\n    * Returns whether token is included in LCD canonical registry\n    */\n    function isTokenRegistered(address _project, uint256 _tokenId) public view returns(bool){\n        return tokenRegistry[_project][_tokenId];\n    }\n\n    /*\n    * Returns a custom string set on LCD contract via setLambdaProp\n    * Lambda prop has no specific intended use case. Developers can use this\n    * prop to unlock whichever features or experiences they want to incorporate\n    * into their creation\n    */\n    function getLambdaProp(address _project, uint256 _tokenId) public view returns(string memory){\n        return projectToTokenIdToLambdaProp[_project][_tokenId];\n    }\n\n    /*\n    * Returns a custom string set on LCD contract via setOmegaProp\n    * Omega prop has no specific intended use case. Developers can use this\n    * prop to unlock whichever features or experiences they want to incorporate\n    * into their creation\n    */\n    function getOmegaProp(address _project, uint256 _tokenId) public view returns(string memory){\n        return projectToTokenIdToOmegaProp[_project][_tokenId];\n    }\n\n    /*\n    * Returns either a custom URI set on LCD contract or tokenURI from respective project contract\n    */\n    function tokenURI(address _project, uint256 _tokenId) public view returns(string memory){\n        if(bytes(projectToTokenIdToCustomURI[_project][_tokenId]).length > 0){\n            return projectToTokenIdToCustomURI[_project][_tokenId];\n        }\n        return LCDProject(_project).tokenURI(_tokenId);\n    }\n\n    /*\n    * Randomly-generated, constantly changing number for a given token to be used interpretatively\n    * (as creator sees fit) on contracts, frontends, game experiences, etc.\n    */\n    function getRandomProp(address _project, uint256 _tokenId) public view returns(uint256){\n        return uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, _project, _tokenId))).div(1e18);\n    }\n\n    function getCustomTokenURI(address _project, uint256 _tokenId) public view returns(string memory){\n        return projectToTokenIdToCustomURI[_project][_tokenId];\n    }\n\n    /*\n    * Returns concatenated prop string for tokenId with global LCD properties\n    * and project-specific properties\n    */\n    function getProps(address _project, uint256 _tokenId) public view returns(string memory){\n        require(isTokenRegistered(_project, _tokenId), \"Unregistered\");\n        return string(\n            abi.encodePacked(\n                LCDProject(_project).getProps(_tokenId),\n                \" + lambda:\",\n                getLambdaProp(_project, _tokenId),\n                \" + omega:\",\n                getOmegaProp(_project, _tokenId),\n                \" + URI:\",\n                tokenURI(_project, _tokenId)\n            )\n        );\n    }\n\n    /*\n    * Returns registry price, custom URI/lambdaProp price, omegaPropPrice\n    */\n    function getPropPrices() public view returns(uint256, uint256, uint256){\n        return (registryPrice, customPropPrice, customPropPrice * 2);\n    }\n\n    /*\n    * Returns claimable ETH amount for given affiliate or curator\n    */\n    function getAffiliateOrCuratorClaimable(address _claimer) public view returns(uint256){\n        return affiliateOrCuratorFeesClaimable[_claimer];\n    }\n\n    /*\n    * Returns basic project info\n    */\n    function getBasicProjectInfo(address _project) public view returns(\n        address,\n        uint256,\n        uint256,\n        uint256,\n        bool\n    ){\n        return (\n            projectRegistry[_project].curator,\n            projectRegistry[_project].lootPrice,\n            projectRegistry[_project].nonLootPrice,\n            projectRegistry[_project].endorsementPerMint,\n            projectRegistry[_project].isCustomProject\n        );\n    }\n\n    /*\n    * Returns advanced project info\n    */\n    function getAdvancedProjectInfo(address _project) public view returns(\n        uint256,\n        uint256,\n        uint256,\n        bool\n    ) {\n        return (\n            projectRegistry[_project].nonLootMints,\n            projectRegistry[_project].curatorMintCap,\n            projectRegistry[_project].curatorMints,\n            projectRegistry[_project].isCustomURIEnabled\n        );\n    }\n\n    function isProjectEndorsed(address _project) public view returns(bool){\n        return projectRegistry[_project].endorsementPerMint > 0;\n    }\n\n    function getOwnerOf(address _project, uint256 _tokenId) public view returns(address){\n        if(tokenRegistry[_project][_tokenId]){\n            return LCDProject(_project).ownerOf(_tokenId);\n        }\n        return address(0);\n    }\n\n    /*\n    *\n    * Private\n    *\n    */\n\n    /*\n    * Distributes LCD tokens to minters of endorsed projects\n    */\n    function _distributeEndorsement(address _minter, uint256 _amount) private {\n        if(_amount > 0 && lcdToken.balanceOf(address(this)) >= _amount){\n            lcdToken.transfer(_minter, _amount);\n        }\n    }\n\n    /*\n    * Registers tokenIds to global registry\n    */\n    function _registerId(address _project, uint256 _tokenId) private {\n        require(!tokenRegistry[_project][_tokenId], \"Already registered\");\n        tokenRegistry[_project][_tokenId] = true;\n    }\n\n    /*\n    * Registers respective shares of mint fee to curator and protocol\n    */\n    function _registerFeesFromMint(address _project, uint256 _amount) private {\n        if(_amount > 0){\n            uint256 protocolShare = _amount.div(5);\n            affiliateOrCuratorFeesClaimable[projectRegistry[_project].curator] =\n                affiliateOrCuratorFeesClaimable[projectRegistry[_project].curator].add(_amount.sub(protocolShare));\n            protocolClaimableFees = protocolClaimableFees.add(protocolShare);\n        }\n    }\n\n    /*\n    * Registers respective shares of prop or registry fee to affiliate and protocol\n    */\n    function _registerFeesFromProp(address _affiliate, uint256 _amount) private {\n        if(_affiliate == address(0)){\n            protocolClaimableFees = protocolClaimableFees.add(_amount);\n        } else {\n            uint256 protocolShare = _amount.div(5);\n            affiliateOrCuratorFeesClaimable[_affiliate] = affiliateOrCuratorFeesClaimable[_affiliate].add(_amount.sub(protocolShare));\n            protocolClaimableFees = protocolClaimableFees.add(protocolShare);\n        }\n    }\n}"}}}