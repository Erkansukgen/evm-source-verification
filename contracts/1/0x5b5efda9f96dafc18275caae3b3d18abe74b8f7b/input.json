{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "BankProtocolLocking.sol": {
      "content": "pragma solidity ^0.6.12;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ninterface BankProtocol {\r\n    function balanceOf(address) external returns (uint);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n}\r\n\r\ncontract BankProtocolLocking is Ownable {\r\n    using SafeMath for uint;\r\n    \r\n    address public constant tokenAddress = 0xe1B3ecdf26aF3C631715b6a49A74470e306D455b;\r\n    \r\n    uint public constant tokensLocked = 150000e18;         // 150,000 BKP\r\n    uint public constant unlockRate =   150000;            \r\n    uint public constant lockDuration = 90 days;           // Before 90 Days, Its impossible to unlock...\r\n    uint public lastClaimedTime;\r\n    uint public deployTime;\r\n\r\n    \r\n    constructor() public {\r\n        deployTime = now;\r\n        lastClaimedTime = now;\r\n    }\r\n    \r\n    function claim() public onlyOwner {\r\n        uint pendingUnlocked = getPendingUnlocked();\r\n        uint contractBalance = BankProtocol(tokenAddress).balanceOf(address(this));\r\n        uint amountToSend = pendingUnlocked;\r\n        if (contractBalance < pendingUnlocked) {\r\n            amountToSend = contractBalance;\r\n        }\r\n        require(BankProtocol(tokenAddress).transfer(owner, amountToSend), \"Could not transfer Tokens.\");\r\n        lastClaimedTime = now;\r\n    }\r\n    \r\n    function getPendingUnlocked() public view returns (uint) {\r\n        uint timeDiff = now.sub(lastClaimedTime);\r\n        uint pendingUnlocked = tokensLocked\r\n                                    .mul(unlockRate)\r\n                                    .mul(timeDiff)\r\n                                    .div(lockDuration)\r\n                                    .div(1e4);\r\n        return pendingUnlocked;\r\n    }\r\n    \r\n    // function to allow admin to claim *other than BKP* ERC20 tokens sent to this contract (by mistake) like USDT\r\n    // BKP can't be unlocked untill 90 days over\r\n    \r\n    function transferAnyERC20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {\r\n        require(_tokenAddr != tokenAddress, \"Cannot transfer out reward tokens\");\r\n        BankProtocol(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n\r\n}"
    }
  }
}