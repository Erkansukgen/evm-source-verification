{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 300
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/FixedCollection.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address internal _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string internal _name;\n\n    // Token symbol\n    string internal _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n\n/**\n * @dev Interface for the NFT Royalty Standard\n */\ninterface IERC2981 is IERC165 {\n    /** \n     * ERC165 bytes to add to interface array - set in parent contract\n     * implementing this standard\n     *\n     * bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\n     * bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\n     * _registerInterface(_INTERFACE_ID_ERC2981);\n     */\n\n    /**\n     * @notice Called with the sale price to determine how much royalty\n     *          is owed and to whom.\n     * @param _tokenId - the NFT asset queried for royalty information\n     * @param _salePrice - the sale price of the NFT asset specified by _tokenId\n     * @return receiver - address of who should be sent the royalty payment\n     * @return royaltyAmount - the royalty payment amount for _salePrice\n     */\n    function royaltyInfo(\n        uint256 _tokenId,\n        uint256 _salePrice\n    ) external view returns (\n        address receiver,\n        uint256 royaltyAmount\n    );\n}\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n/**\n * @dev External interface of the EaselyPayout contract\n */\ninterface IEaselyPayout {\n    /**\n     * @dev Takes in a payable amount and splits it among the given royalties. \n     * Also takes a cut of the payable amount depending on the sender and the primaryPayout address.\n     * Ensures that this method never splits over 100% of the payin amount.\n     */\n    function splitPayable(address primaryPayout, address[] memory royalties, uint256[] memory bps) external payable;\n}\n\n/** \n * @dev Extension of the ERC721Enumerable contract that integrates a marketplace so that simple lazy-sales\n * and auctions do not have to be done on another contract. This saves gas fees on secondary sales because\n * buyers will not have to pay a gas fee to setApprovalForAll for another marketplace contract after buying.\n *\n * Easely will help power the lazy-selling and auctions as well as lazy minting that take place on \n * directly on the collection, which is why we take a cut of these transactions. Our cut can \n * be publically seen in the connected EaselyPayout contract.\n */\nabstract contract EaselyMarketplaceCollection is ERC721Enumerable, Ownable {\n    using ECDSA for bytes32;\n    using Strings for uint256;\n\n    /**\n     * @dev Auction structure that includes:\n     * \n     * @param address topBidder - Current top bidder who has already paid the price param below. Is\n     *        initialized with address(0) when there have been no bids. When a bidder gets outBid,\n     *        the old topBidder will get the price they paid returned.\n     * @param uint256 price - Current top price paid by the topBidder.\n     * @param uint256 startTimestamp - When the auction can start getting bidded on.\n     * @param uint256 endTimestamp - When the auction can no longer get bid on.\n     * @param uint256 minBidIncrement - The minimum each new bid has to be greater than the previous\n     *        bid in order to be the next topBidder.\n     * @param uint256 minLastBidDuration - The minimum time each bid must hold the highest price before\n     *        the auction can settle. If people keep bidding, the auction can last for much longer than \n     *        the initial endTimestamp, and endTimestamp will continually be updated.\n     */\n    struct Auction {\n        address topBidder;\n        uint256 tokenId;\n        uint256 price;\n        uint256 startTimestamp;\n        uint256 endTimestamp;\n        uint256 minBidIncrement;\n        uint256 minLastBidDuration;\n    }\n\n    /* see {IEaselyPayout} for more */\n    address public payoutContractAddress;\n    /* Let's the owner enable another address to lazy mint */\n    address public alternateSignerAddress;\n    uint256 internal nextAuctionId;\n    uint256 public timePerDecrement;\n\n    uint256 public constant maxRoyaltiesBPS = 9500;\n    /* Optional basis points for the owner for secondary sales of this collection */\n    uint256 public constant maxSecondaryBPS = 1000;\n    \n    /* Optional basis points for the owner for secondary sales of this collection */\n    uint256 public secondaryOwnerBPS;\n    /* Optional addresses to distribute royalties for primary sales of this collection */\n    address[] public royalties;\n    /* Optional basis points for above royalties addresses for primary sales of this collection */\n    uint256[] public royaltiesBPS;\n\n    /* Mapping if a tokenId has an active auction or not */\n    mapping(uint256 => uint256) private _tokenIdToAuctionId;\n    /* Mapping for all auctions that have happened. */\n    mapping(uint256 => Auction) private _auctionIdToAuction;\n\n    /* Mapping to the active version for all signed transactions */\n    mapping(address => uint256) internal _addressToActiveVersion;\n    /* Cancelled or finalized sales by hash to determine buyabliity */\n    mapping(bytes32 => bool) internal _cancelledOrFinalizedSales;\n\n    // Events related to an auction\n    event AuctionCreated(uint256 indexed auctionId, uint256 indexed tokenId, uint256 startingPrice, uint256 startingTimestamp, uint256 endingTimestamp, uint256 minBidIncrement, uint256 minLastBidDuration, address indexed seller);\n    event AuctionTimeAltered(uint256 indexed auctionId, uint256 indexed tokenId, uint256 startTime, uint256 endTime, address indexed seller);\n    event AuctionCancelled(uint256 indexed auctionId, uint256 indexed tokenId, address indexed seller);\n    event AuctionBidded(uint256 indexed auctionId, uint256 indexed tokenId, uint256 newPrice, uint256 timestamp, address indexed bidder);\n    event AuctionSettled(uint256 indexed auctionId, uint256 indexed tokenId, uint256 price, address buyer, address indexed seller);\n\n    // Events related to lazy selling\n    event SaleCancelled(address indexed seller, bytes32 hash);\n    event SaleCompleted(uint256 indexed tokenId, uint256 price, address indexed seller, address indexed buyer, bytes32 hash);\n\n    // Miscellaneous events\n    event VersionChanged(address indexed seller, uint256 version);\n    event AltSignerChanged(address newSigner);\n    \n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId \n            || interfaceId == type(Ownable).interfaceId\n            || interfaceId == type(IERC2981).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev see {IERC2981-supportsInterface}\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view returns (address receiver, uint256 royaltyAmount) {\n        uint256 royalty = _salePrice * secondaryOwnerBPS / 10000;\n        return (owner(), royalty);\n    }\n\n    /**\n     * @dev Returns the current auction variables for a tokenId if the auction is present\n     */\n    function getAuctionForTokenId(uint256 tokenId) external view returns (Auction memory) {\n        // _getAuctionId will error if token is not on an auction\n        uint256 auctionId = _getAuctionId(tokenId);\n\n        return _auctionIdToAuction[auctionId];\n    }\n\n    /**\n     * @dev See {_getAuctionId}\n     */\n    function getAuctionId(uint256 tokenId) external view returns (uint256) {\n        return _getAuctionId(tokenId);\n    }\n\n    /**\n     * @dev Returns the current auction variables for a tokenId if the auction is present\n     */\n    function getAuction(uint256 auctionId) external view returns (Auction memory) {\n        require(_auctionIdToAuction[auctionId].minBidIncrement != 0, \"This auction does not exist\");\n        return _auctionIdToAuction[auctionId];\n    }\n\n    /** \n     * @dev See {_currentPrice}\n     */\n    function getCurrentPrice(uint256[4] memory pricesAndTimestamps) external view returns (uint256) {\n        return _currentPrice(pricesAndTimestamps);\n    }\n\n    /**\n     * @dev Returns the current activeVersion of an address both used to create signatures\n     * and to verify signatures of {buyToken} and {buyNewToken}\n     */\n    function getActiveVersion(address address_) external view returns (uint256) {\n        return _addressToActiveVersion[address_];\n    }\n\n    /**\n     * @dev Allows the owner to change who the alternate signer is \n     */\n    function setAltSigner(address alt) external onlyOwner {\n        alternateSignerAddress = alt;\n        emit AltSignerChanged(alt);\n    }\n\n    /**\n     * @dev see {_setRoyalties}\n     */\n    function setRoyalties(address[4] memory newRoyalties, uint256[4] memory bps) external onlyOwner {\n        _setRoyalties(newRoyalties, bps);\n    }\n\n    /**\n     * @dev see {_setSecondary}\n     */\n    function setSecondaryBPS(uint256 bps) external onlyOwner() {\n        _setSecondary(bps);\n    }\n\n    /**\n     * @dev Usable by any user to update the version that they want their signatures to check. This is helpful if\n     * an address wants to mass invalidate their signatures without having to call cancelSale on each one.\n     */\n    function updateVersion(uint256 version) external {\n        _addressToActiveVersion[_msgSender()] = version;\n        emit VersionChanged(_msgSender(), version);\n    }\n\n    /**\n     * @dev Creates an auction for a token and locks it from being transferred until the auction ends\n     * the auction can end if the endTimestamp has been reached and can be cancelled prematurely if\n     * there has been no bids yet.\n     *\n     * @param tokenId uint256 for the token to put on auction. Must exist and be on the auction already\n     * @param startingPrice uint256 for the starting price an interested owner must bid\n     * @param startingTimestamp uint256 for when the auction can start taking bids\n     * @param endingTimestamp uint256 for when the auction has concluded and can no longer take bids\n     * @param minBidIncrement uint256 the minimum each interested owner must bid over the latest bid\n     * @param minLastBidDuration uint256 the minimum time a bid needs to be live before the auction can end.\n     *        this means that an auction can extend past its original endingTimestamp\n     */\n    function createAuction(\n        uint256 tokenId,\n        uint256 startingPrice,\n        uint256 startingTimestamp,\n        uint256 endingTimestamp,\n        uint256 minBidIncrement,\n        uint256 minLastBidDuration\n    ) external {\n        require(endingTimestamp > block.timestamp, \"Cannot create an auction in the past\");\n        require(!_onAuction(tokenId), \"Token is already on auction\");\n        require(minBidIncrement > 0, \"Min bid must be a positive number\");\n        require(_msgSender() == ownerOf(tokenId), \"Must own token to create auction\");\n\n        Auction memory auction = Auction(address(0), tokenId, startingPrice, startingTimestamp, endingTimestamp, minBidIncrement, minLastBidDuration);\n        // This locks the token from being sold\n        _tokenIdToAuctionId[tokenId] = nextAuctionId;\n        _auctionIdToAuction[nextAuctionId] = auction;\n        \n        emit AuctionCreated(nextAuctionId, tokenId, startingPrice, startingTimestamp, endingTimestamp, minBidIncrement, minLastBidDuration, ownerOf(tokenId));\n        nextAuctionId += 1;\n    }\n\n    /** \n     * @dev Lets the token owner alter the start and end time of an auction in case they want to \n     * end an auction early, extend the auction, or start it early. \n     * \n     * Changes to endTime can only be made when the auction is not within a minLastBidDuration from ending.\n     * Changes to startTime can only be made when the auction has not yet started.\n     */\n    function alterAuctionTime(uint256 tokenId, uint256 startTime, uint256 endTime) external {\n        // _getAuctionId will error if token is not on an auction\n        uint256 auctionId = _getAuctionId(tokenId);\n        uint256 time = block.timestamp;\n\n        require(_msgSender() == ownerOf(tokenId), \"Only token owner can alter end time\");\n        Auction memory auction = _auctionIdToAuction[auctionId];\n        require(auction.endTimestamp > time + auction.minLastBidDuration, \"Auction has ended or is close to ending\");\n\n        // if the auction has already started we cannot change the start time\n        if (auction.startTimestamp > time) {\n            auction.startTimestamp = startTime;\n        }\n        auction.endTimestamp = endTime;\n\n        _auctionIdToAuction[auctionId] = auction;\n        emit AuctionTimeAltered(auctionId, tokenId, startTime, endTime, ownerOf(tokenId));\n    }\n\n    /**\n     * @dev Allows the token owner to cancel an auction that does not yet have a bid.\n     */\n    function cancelAuction(uint256 tokenId) external {\n        // _getAuctionId will error if token is not on an auction\n        uint256 auctionId = _getAuctionId(tokenId);\n\n        require(_msgSender() == ownerOf(tokenId), \"Only token owner can cancel auction\");\n        require(_auctionIdToAuction[auctionId].topBidder == address(0), \"Cannot cancel an auction with a bid\");\n\n        _tokenIdToAuctionId[tokenId] = 0;\n\n        emit AuctionCancelled(auctionId, tokenId, ownerOf(tokenId));\n    }\n\n    /**\n     * @dev Method that anyone can call to settle the auction. It is available to everyone\n     * because the settlement is not dependent on the message sender, and will allow either\n     * the buyer, the seller, or a third party to cover the gas fees to settle. The burdern of\n     * the auction to settle should be on the seller, but in case there are issues with\n     * the seller settling we will not be locked from settling.\n     *\n     * If the seller is the contract owner, this is considered a primary sale and royalties will\n     * be paid to primiary royalties. If the seller is a user then it is a secondary sale and\n     * the contract owner will get a secondary sale cut.\n     */\n    function settleAuction(uint256 tokenId) external {\n        // _getAuctionId will error if token is not on an auction\n        uint256 auctionId = _getAuctionId(tokenId);        \n        \n        Auction memory auction = _auctionIdToAuction[auctionId];\n        address tokenOwner = ownerOf(tokenId);\n        require(block.timestamp > auction.endTimestamp, \"Auction must end to be settled\");\n        require(auction.topBidder != address(0), \"No bidder, cancel the auction instead\");\n\n        // This will allow transfers again\n        _tokenIdToAuctionId[tokenId] = 0;\n\n        _transfer(tokenOwner, auction.topBidder, tokenId);\n    \n        if (tokenOwner == owner()) {\n            IEaselyPayout(payoutContractAddress).splitPayable{ value: auction.price }(tokenOwner, royalties, royaltiesBPS);\n        } else {\n            address[] memory ownerRoyalties = new address[](1);\n            uint256[] memory ownerBPS = new uint256[](1);\n            ownerRoyalties[0] = owner();\n            ownerBPS[0] = secondaryOwnerBPS;\n\n            IEaselyPayout(payoutContractAddress).splitPayable{ value: auction.price }(tokenOwner, ownerRoyalties, ownerBPS);\n        }\n\n        emit AuctionSettled(auctionId, tokenId, auction.price, auction.topBidder, tokenOwner);\n    }\n\n    /**\n     * @dev Allows any potential buyer to submit a bid on a token with an auction. When outbidding the current topBidder\n     * the contract returns the value that the previous bidder had escrowed to the contract.\n     */\n    function bidOnAuction(uint256 tokenId) external payable {\n        // _getAuctionId will error if token is not on an auction\n        uint256 auctionId = _getAuctionId(tokenId);      \n        \n        uint256 timestamp = block.timestamp;\n        Auction memory auction = _auctionIdToAuction[auctionId];\n        uint256 msgValue = msg.value;\n\n        address prevBidder = auction.topBidder;\n        uint256 prevPrice = auction.price;\n\n        // Tokens that are not on auction always have an endTimestamp of 0\n        require(timestamp <= auction.endTimestamp, \"Auction has already ended\");\n        require(timestamp >= auction.startTimestamp, \"Auction has not started yet\");\n\n        uint256 minPrice = prevPrice + auction.minBidIncrement;\n        if (prevBidder == address(0)) {\n            minPrice = prevPrice;\n        }\n        require(msgValue >= minPrice, \"Bid is too small\");\n\n        uint256 endTime = auction.endTimestamp;\n        if (endTime < auction.minLastBidDuration + timestamp) {\n            endTime = timestamp + auction.minLastBidDuration;\n        }\n\n        auction.endTimestamp = endTime;\n        auction.price = msgValue;\n        auction.topBidder = _msgSender();\n\n        _auctionIdToAuction[auctionId] = auction;\n        \n        if (prevBidder != address(0)) {\n            // Give the old top bidder their money back\n            payable(prevBidder).transfer(prevPrice);\n        }\n        emit AuctionBidded(auctionId, tokenId, auction.price, timestamp, auction.topBidder);\n    }\n\n    /**\n     * @dev Usable by the owner of any token initiate a sale for their token. This does not\n     * lock the tokenId and the owner can freely trade their token because unlike auctions\n     * sales would be immediate.\n     */\n    function hashToSignToSellToken(\n        uint256 version,\n        uint256 nonce,\n        uint256 tokenId,\n        uint256[4] memory pricesAndTimestamps\n    ) external view returns (bytes32) {\n        require(_msgSender() == ownerOf(tokenId), \"Not the owner of the token\");\n        return _hashForSale(_msgSender(), version, nonce, tokenId, pricesAndTimestamps);\n    }\n\n    /**\n     * @dev With a hash signed by the method {hashToSignToSellToken} any user sending enough value can buy\n     * the token from the seller. These are all considered secondary sales and will give a cut to the \n     * owner of the contract based on the secondaryOwnerBPS.\n     */\n    function buyToken(\n        address seller,\n        uint256 version,\n        uint256 nonce,\n        uint256 tokenId,\n        uint256[4] memory pricesAndTimestamps,\n        bytes memory signature\n    ) external payable {\n        uint256 currentPrice = _currentPrice(pricesAndTimestamps);\n\n        require(_addressToActiveVersion[seller] == version, \"Incorrect signature version\");\n        require(msg.value >= currentPrice, \"Not enough ETH to buy\");\n\n        _markHashSold(seller, version, nonce, tokenId, pricesAndTimestamps, currentPrice, signature);\n\n        _transfer(seller, _msgSender(), tokenId);\n\n        IEaselyPayout(payoutContractAddress).splitPayable{ value: currentPrice }(seller, _ownerRoyalties(), _ownerBPS());\n        payable(_msgSender()).transfer(msg.value - currentPrice);\n    }\n\n    /**\n     * @dev Usable to cancel hashes generated from {hashToSignToSellToken}\n     */\n    function cancelSale(\n        uint256 version,\n        uint256 nonce,\n        uint256 tokenId,\n        uint256[4] memory pricesAndTimestamps\n    ) external {\n        bytes32 hash = _hashToCheckForSale(_msgSender(), version, nonce, tokenId, pricesAndTimestamps);\n        _cancelledOrFinalizedSales[hash] = true;\n        emit SaleCancelled(_msgSender(), hash);\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual override returns (string memory) {\n        return \"ipfs://\";\n    }\n\n    /**\n     * @dev Changing _beforeTokenTransfer to lock tokens that are in an auction so\n     * that owner cannot transfer the token as people are bidding on it.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override { \n        require(!_onAuction(tokenId), \"Cannot transfer a token in an auction\");\n\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev checks if a token is in an auction or not. We make sure that no active auction can \n     * have an endTimestamp of 0.\n     */\n    function _onAuction(uint256 tokenId) internal view returns (bool) {\n        return _tokenIdToAuctionId[tokenId] != 0;\n    }\n\n    /**\n     * @dev returns the auctionId of a tokenId if the token is on auction.\n     */\n    function _getAuctionId(uint256 tokenId) internal view returns (uint256) {\n        require(_onAuction(tokenId), \"This token is not on auction\");\n        return _tokenIdToAuctionId[tokenId];\n    }\n\n    /**\n     * @dev helper method get ownerRoyalties into an array form\n     */\n    function _ownerRoyalties() internal view returns (address[] memory) {\n        address[] memory ownerRoyalties = new address[](1);\n        ownerRoyalties[0] = owner();\n        return ownerRoyalties;\n    }\n\n    /**\n     * @dev helper method get secondary BPS into array form\n     */\n    function _ownerBPS() internal view returns (uint256[] memory) {\n        uint256[] memory ownerBPS = new uint256[](1);\n        ownerBPS[0] = secondaryOwnerBPS;\n        return ownerBPS;\n    }\n\n    /**\n     * @dev Current price for a sale which is calculated for the case of a descending auction. So\n     * the ending price must be less than the starting price and the auction must have already started.\n     * Standard single fare sales will have a matching starting and ending price.\n     */\n    function _currentPrice(uint256[4] memory pricesAndTimestamps) internal view returns (uint256) {\n        uint256 startingPrice = pricesAndTimestamps[0];\n        uint256 endingPrice = pricesAndTimestamps[1];\n        uint256 startingTimestamp = pricesAndTimestamps[2];\n        uint256 endingTimestamp = pricesAndTimestamps[3];\n\n        uint256 currTime = block.timestamp;\n        require(currTime >= startingTimestamp, \"Has not started yet\");\n        require(startingTimestamp < endingTimestamp, \"Must end after it starts\");\n        require(startingPrice >= endingPrice, \"Ending price cannot be bigger\");\n\n        if (startingPrice == endingPrice || currTime > endingTimestamp) {\n            return endingPrice;\n        }\n\n        uint256 diff = startingPrice - endingPrice;\n        uint256 decrements = (currTime - startingTimestamp) / timePerDecrement;\n        if (decrements == 0) {\n            return startingPrice;\n        }\n\n        // decrements will equal 0 before totalDecrements does so we will not divide by 0\n        uint256 totalDecrements = (endingTimestamp - startingTimestamp) / timePerDecrement;\n\n        return startingPrice - diff / totalDecrements * decrements;\n    }\n\n    /**\n     * @dev Sets secondary BPS amount\n     */\n    function _setSecondary(uint256 secondary) internal {\n        secondaryOwnerBPS = secondary;\n        require(secondaryOwnerBPS <= maxSecondaryBPS, \"Cannot take more than 10% of secondaries\");\n    }\n\n    /**\n     * @dev Sets primary royalties\n     */\n    function _setRoyalties(address[4] memory newRoyalties, uint256[4] memory bps) internal {\n        require(bps[0] + bps[1] + bps[2] + bps[3] <= maxRoyaltiesBPS, \"Royalties too high\");\n        royalties = newRoyalties;\n        royaltiesBPS = bps;\n    }\n\n    /**\n     * @dev Checks if an address is either the owner, or the approved alternate signer.\n     */\n    function _checkValidSigner(address signer) internal view {\n        require(signer == owner() || signer == alternateSignerAddress, \"Not valid signer.\");\n    }\n\n    /**\n     * toEthSignedMessageHash\n     * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\n     * and hash the result\n     */\n    function _toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev First checks if a sale is valid by checking that the hash has not been cancelled or already completed\n     * and that the correct address has given the signature. If both checks pass we mark the hash as complete and\n     * emit an event.\n     */\n    function _markHashSold(\n        address owner,\n        uint256 version,\n        uint256 nonce,\n        uint256 tokenId,\n        uint256[4] memory pricesAndTimestamps,\n        uint256 salePrice,\n        bytes memory signature\n    ) internal {\n        bytes32 hash = _hashToCheckForSale(owner, version, nonce, tokenId, pricesAndTimestamps);\n        require(!_cancelledOrFinalizedSales[hash], \"Sale no longer active\");\n        require(hash.recover(signature) == owner, \"Not signed by current token owner\");\n        _cancelledOrFinalizedSales[hash] = true;\n\n        emit SaleCompleted(tokenId, salePrice, owner, _msgSender(), hash);\n    }\n\n    /**\n     * @dev Hash an order, returning the hash that a client must sign, including the standard message prefix\n     * @return Hash of message prefix and order hash per Ethereum format\n     */\n    function _hashToCheckForSale(\n        address owner,\n        uint256 version,\n        uint256 nonce,\n        uint256 tokenId,\n        uint256[4] memory pricesAndTimestamps\n    ) internal view returns (bytes32) {\n        return _toEthSignedMessageHash(_hashForSale(owner, version, nonce, tokenId, pricesAndTimestamps));\n    }\n\n    /**\n     * @dev Hash an order, returning the hash that a client must sign, including the standard message prefix\n     * @return Hash of message prefix and order hash per Ethereum format\n     */\n    function _hashForSale(\n        address owner,\n        uint256 version,\n        uint256 nonce,\n        uint256 tokenId,\n        uint256[4] memory pricesAndTimestamps\n    ) internal view returns (bytes32) {\n        return keccak256(abi.encode(address(this), block.chainid, owner, version, nonce, tokenId, pricesAndTimestamps));\n    }\n}\n\n/**\n * @dev External interface of the EaselyContractInitializer. Formatted to enable ContractFactory\n * to have a single method that can deploy a wide variety of different contracts.\n */\ninterface IEaselyContractInitializer {\n    function init(bool[8] memory bools, address[8] memory addresses, uint256[32] memory uints, string[8] memory strings) external;\n}\n\n/**\n * @dev This implements a lazy-minted, fixed collection of EaselyMarketplaceCollection.\n * It requires that the creator knows the total number of NFTs they want and has an IPFS\n * hash that is a directory with all the tokenIds from 0 to the #NFTs - 1.\n *\n * It has two main methods to lazy-mint, one allows the owner to approve single use signatures\n * for specific wallet addresses and the other allows a general mint signature that anyone can use.\n *\n * Minting from this fixed collection is always random, this can be done either with a reveal\n * mechanism that has a random offset, or on-chain randomness if the collection is already revealed. \n */\ncontract EaselyFixedCollection is EaselyMarketplaceCollection, IEaselyContractInitializer {  \n    using ECDSA for bytes32;  \n    using Strings for uint256;\n\n    bool public burnable;\n    bool public isRevealed = false;\n    bool private hasInit = false;\n\n    uint256 public constant MAX_SUPPLY_LIMIT = 10 ** 9;\n    uint256 public maxSupply;\n    // Limits how much any single transaction can be\n    uint256 public transactionMax;\n    // Limits how much any single wallet can mint on a collection.\n    uint256 public maxMint;\n    \n    mapping(address => uint256) public mintCount;\n\n    // Used to shuffle tokenURI upon reveal\n    uint256 public offset;\n    // Used when switching from incremental tokenId to \n    uint256 private randOffset;\n\n    // Mapping to enable constant time onchain randomness\n    uint256[MAX_SUPPLY_LIMIT] private indices;\n    string private ipfsHash;\n\n    event Minted(address indexed buyer, uint256 amount, uint256 unitPrice, bytes32 hash);\n    event IpfsRevealed(string indexed ipfsHash, bool locked);\n\n    /**\n     * @dev Constructor function\n     */\n    constructor(\n        bool[8] memory bools, address[8] memory addresses, uint256[32] memory uints, string[8] memory strings\n    ) ERC721(strings[0], strings[1]) {\n        addresses[0] = _msgSender();\n        _init(bools, addresses, uints, strings);\n    }\n\n    function init(\n        bool[8] memory bools, \n        address[8] memory addresses, \n        uint256[32] memory uints, \n        string[8] memory strings\n    ) external override {\n        _init(bools, addresses, uints, strings);\n    }\n\n    function _init(\n        bool[8] memory bools, \n        address[8] memory addresses, \n        uint256[32] memory uints, \n        string[8] memory strings\n    ) internal {\n        require(!hasInit, \"Already has be initiated\");\n        hasInit = true;\n\n        burnable = bools[0];\n        isRevealed = bools[1];\n        if (isRevealed) {\n            emit IpfsRevealed(ipfsHash, false);\n        }\n\n        _owner = addresses[0];\n        address[4] memory royaltiesAddrs = [addresses[1], addresses[2], addresses[3], addresses[4]];\n        alternateSignerAddress = addresses[5];\n        \n        payoutContractAddress = 0x68f5C1e24677Ac4ae845Dde07504EAaD98f82572; \n\n        /* Start at 1 because we reserve 0 for tokens that are not on auction */\n        nextAuctionId = 1;\n        _setSecondary(uints[0]);\n        _setRoyalties(royaltiesAddrs, [uints[1], uints[2], uints[3], uints[4]]);\n        maxSupply = uints[5];\n        require(maxSupply < MAX_SUPPLY_LIMIT, \"Collection is too big\");\n\n        if (uints[6] != 0) {\n            timePerDecrement = uints[6];\n        } else {\n            timePerDecrement = 300;\n        }\n\n        if (uints[7] != 0){\n            transactionMax = uints[7];\n        } else {\n            transactionMax = 10;\n        }\n        maxMint = uints[8];\n\n        _name = strings[0];\n        _symbol = strings[1];\n        ipfsHash = strings[2];\n    }\n\n    /**\n     * @dev If this collection was created with burnable on, owners of tokens\n     * can use this method to burn their tokens. Easely will keep track of \n     * burns in case creators want to reward users for burning tokens.\n     */\n    function burn(uint256 tokenId) external {\n        require(ownerOf(tokenId) == _msgSender(), \"Cannot burn a token you do not own\");\n        require(burnable, \"Tokens from this collection are not burnable\");\n\n        _burn(tokenId);\n    }\n    \n    /**\n     * @dev Method used if the creator wants to keep their collection hidden until\n     * a later release date. On reveal, a creator can decide if they want to \n     * lock the unminted tokens or enable them for on-chain randomness minting.\n     * \n     * IMPORTANT - this function can only be called ONCE, if a wrong IPFS hash\n     * is submitted by the owner, it cannot ever be switched to a different one.\n     */\n    function lockTokenURI(string calldata revealIPFSHash, bool lockOnReveal) external onlyOwner {\n        require(!isRevealed, \"The token URI has already been set\");\n        offset = _random(maxSupply);\n        ipfsHash = revealIPFSHash;\n        isRevealed = true;\n\n        if (!lockOnReveal) {\n            // so we know what index to start generating random numbers from\n            randOffset = totalSupply();\n        } else {\n            // This will lock the unminted tokens at reveal time\n            maxSupply = totalSupply();\n        }\n\n        emit IpfsRevealed(revealIPFSHash, lockOnReveal);\n    }\n\n    /**\n     * @dev tokenURI of a tokenId, will change to include the tokeId and an offset in\n     * the URI once the collection has been revealed.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!isRevealed) {\n            return string(abi.encodePacked(_baseURI(), ipfsHash));\n        }\n\n        require(_exists(tokenId), \"URI query for nonexistent token\");\n\n        uint256 offsetId = (tokenId + offset) % maxSupply;\n        return string(abi.encodePacked(_baseURI(), ipfsHash, \"/\", offsetId.toString()));\n    }\n\n    /**\n     * @dev Hash that the owner or approved alternate signer then sign that the approved buyer\n     * can use in order to call the {mintAllow} method.\n     */\n    function hashToSignForAllowList(\n        address allowedAddress,\n        uint256 version,\n        uint256 nonce,\n        uint256 price,\n        uint256 amount\n    ) external view returns (bytes32) {\n        _checkValidSigner(_msgSender());\n        return _hashForAllowList(allowedAddress, version, nonce, price, amount);\n    }\n\n    /**\n     * @dev A way to invalidate a signature so the given params cannot be used in the {mintAllow} method.\n     */\n    function cancelAllowList(\n        address allowedAddress,\n        uint256 version,\n        uint256 nonce,\n        uint256 price,\n        uint256 amount\n    ) external {\n        _checkValidSigner(_msgSender());\n        bytes32 hash = _hashToCheckForAllowList(allowedAddress, version, nonce, price, amount);\n        _cancelledOrFinalizedSales[hash] = true;\n        emit SaleCancelled(_msgSender(), hash);\n    }\n    \n    /**\n     * @dev Allows a user with an approved signature to mint at a price and quantity specified by the\n     * contract. A user is still limited by totalSupply, transactionMax, and mintMax if populated.\n     */\n    function mintAllow(\n        address allowedAddress,\n        uint256 version,\n        uint256 nonce,\n        uint256 price,\n        uint256 amount,\n        uint256 buyAmount,\n        bytes memory signature\n    ) external payable {\n        require(totalSupply() + buyAmount <= maxSupply, \"Over token supply limit\");\n        require(buyAmount <= amount, \"Over signature amount\");\n        require(buyAmount <= transactionMax, \"Over transaction limit\");\n        require(version == _addressToActiveVersion[owner()], \"This presale version is disabled\");\n        require(allowedAddress == _msgSender(), \"Invalid sender\");\n\n        uint256 totalPrice = price * buyAmount;\n        uint256 msgValue = msg.value;\n        require(msgValue >= totalPrice, \"Msg value too small\");\n\n        bytes32 hash = _hashToCheckForAllowList(allowedAddress, version, nonce, price, amount);\n        require(!_cancelledOrFinalizedSales[hash], \"Signature no longer active\");\n        address signer = hash.recover(signature);\n        _checkValidSigner(signer);\n        _cancelledOrFinalizedSales[hash] = true;\n\n        _mintRandom(_msgSender(), buyAmount);\n        emit Minted(_msgSender(), buyAmount, price, hash);\n\n        IEaselyPayout payoutContract = IEaselyPayout(payoutContractAddress);\n        payoutContract.splitPayable{ value: totalPrice }(owner(), royalties, royaltiesBPS);\n        payable(_msgSender()).transfer(msgValue - totalPrice);\n    }\n\n    /**\n     * @dev Hash that the owner or approved alternate signer then sign that buyers use \n     * in order to call the {mint} method.\n     */\n    function hashToSignForMint(uint256 version, uint256 amount, uint256[4] memory pricesAndTimestamps) external view returns (bytes32) {\n        _checkValidSigner(_msgSender());\n        require(amount <= transactionMax, \"Over transaction limit\");\n\n        return _hashForMint(version, amount, pricesAndTimestamps);\n    }\n\n    /**\n     * @dev A way to invalidate a signature so the given params cannot be used in the {mint} method.\n     */\n    function cancelMint(uint256 version, uint256 amount, uint256[4] memory pricesAndTimestamps) external {\n        _checkValidSigner(_msgSender());\n        bytes32 hash = _hashToCheckForMint(version, amount, pricesAndTimestamps);\n        _cancelledOrFinalizedSales[hash] = true;\n        emit SaleCancelled(_msgSender(), hash);\n    }\n\n    /**\n     * @dev Allows anyone to buy an amount of tokens at a price which matches\n     * the signature that the owner or alternate signer has approved\n     */\n    function mint(\n        uint256 version,\n        uint256 amount,\n        uint256[4] memory pricesAndTimestamps, \n        bytes memory signature\n    ) external payable {\n        require(totalSupply() + amount <= maxSupply, \"Over token supply limit\");\n        require(amount <= transactionMax, \"Over transaction limit\");\n        require(version == _addressToActiveVersion[owner()], \"Invalid version\");\n\n        uint256 unitPrice = _currentPrice(pricesAndTimestamps);\n        uint256 totalPrice = amount * unitPrice;\n        uint256 msgValue = msg.value;\n        require(msgValue >= totalPrice, \"Msg value too small\");\n\n        bytes32 hash = _hashToCheckForMint(version, amount, pricesAndTimestamps);\n        require(!_cancelledOrFinalizedSales[hash], \"Signature no longer active\");\n        address signer = hash.recover(signature);\n        _checkValidSigner(signer);\n\n        _mintRandom(_msgSender(), amount);\n        emit Minted(_msgSender(), amount, unitPrice, hash);\n\n        IEaselyPayout payoutContract = IEaselyPayout(payoutContractAddress);\n        payoutContract.splitPayable{ value: totalPrice }(owner(), royalties, royaltiesBPS);\n        payable(_msgSender()).transfer(msgValue - totalPrice);\n    }\n\n    /**\n     * @dev Hash an order that we need to check against the signature to see who the signer is.\n     * see {_hashForAllowList} to see the hash that needs to be signed.\n     */\n    function _hashToCheckForAllowList(\n        address allowedAddress,\n        uint256 nonce,\n        uint256 version,\n        uint256 price,\n        uint256 amount\n    ) internal view returns (bytes32) {\n        return _toEthSignedMessageHash(_hashForAllowList(allowedAddress, nonce, version, price, amount));\n    }\n\n    /**\n     * @dev Hash that the owner or alternate wallet must sign to enable a {mintAllow} for a user\n     * @return Hash of message prefix and order hash per Ethereum format\n     */\n    function _hashForAllowList(        \n        address allowedAddress,\n        uint256 nonce,\n        uint256 version,\n        uint256 price,\n        uint256 amount\n    ) internal view returns (bytes32) {\n        return keccak256(abi.encode(address(this), block.chainid, owner(), allowedAddress, nonce, version, price, amount));\n    }\n\n    /**\n     * @dev Hash an order that we need to check against the signature to see who the signer is.\n    * see {_hashForMint} to see the hash that needs to be signed.\n     */\n    function _hashToCheckForMint(\n        uint256 version,\n        uint256 amount,\n        uint256[4] memory pricesAndTimestamps\n    ) internal view returns (bytes32) {\n        return _toEthSignedMessageHash(_hashForMint(version, amount, pricesAndTimestamps));\n    }\n\n    /**\n     * @dev Hash that the owner or alternate wallet must sign to enable {mint} for all users \n     */\n    function _hashForMint(        \n        uint256 version,\n        uint256 amount,\n        uint256[4] memory pricesAndTimestamps\n    ) internal view returns (bytes32) {\n        return keccak256(abi.encode(address(this), block.chainid, owner(), amount, pricesAndTimestamps, version));\n    }\n\n    /// @notice Generates a pseudo random index of our tokens that has not been used so far\n    function _mintRandomIndex(address buyer, uint256 amount) internal {\n        //  number of tokens left to create\n        uint256 totalSize = maxSupply - totalSupply();\n\n        for (uint256 i = 0; i < amount; i++) {\n            // generate a random index\n            uint256 index = _random(totalSize);\n            uint256 tokenAtPlace = indices[index];\n\n            uint256 tokenId;\n            // if we havent stored a replacement token...\n            if (tokenAtPlace == 0) {\n                //... we just return the current index\n                tokenId = index;\n            } else {\n                // else we take the replace we stored with logic below\n                tokenId = tokenAtPlace;\n            }\n\n            // get the highest token id we havent handed out\n            uint256 lastTokenAvailable = indices[totalSize - 1];\n            // we need to store a replacement token for the next time we roll the same index\n            // if the last token is still unused...\n            if (lastTokenAvailable == 0) {\n                // ... we store the last token as index\n                indices[index] = totalSize - 1;\n            } else {\n                // ... we store the token that was stored for the last token\n                indices[index] = lastTokenAvailable;\n            }\n\n            _safeMint(buyer, tokenId + randOffset);\n            totalSize--;\n        }\n    }\n\n    /// @notice Generates a pseudo random number based on arguments with decent entropy\n    /// @param max The maximum value we want to receive\n    /// @return A random number less than the max\n    function _random(uint256 max) internal view returns (uint256) {\n        if (max == 0) {\n            return 0;\n        }\n\n        uint256 rand = uint256(\n            keccak256(\n                abi.encode(\n                    msg.sender,\n                    block.difficulty,\n                    block.timestamp,\n                    blockhash(block.number - 1)\n                )\n            )\n        );\n        return rand % max;\n    }\n\n    /**\n     * @dev Wrapper around {_mintRandomIndex} that incrementally if the collection has not \n     * been revealed yet, which also checks the buyer has not exceeded maxMint count \n     */\n    function _mintRandom(address buyer, uint256 amount) internal {\n        require(maxMint == 0 || mintCount[buyer] + amount <= maxMint, \"Buyer over mint maximum\");\n        mintCount[buyer] += amount;\n\n        if (isRevealed) {\n            _mintRandomIndex(buyer, amount);\n            return;\n        }\n\n        uint256 nextTokenId = totalSupply();\n\n        for (uint256 i = 0; i < amount; i++) {\n            _safeMint(buyer, nextTokenId + i);\n        }\n    }\n}"
    }
  }
}