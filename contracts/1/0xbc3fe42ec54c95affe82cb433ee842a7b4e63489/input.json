{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/StrategyDai.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n}\n\ninterface USDT {\n    function approve(address guy, uint256 wad) external;\n\n    function transfer(address _to, uint256 _value) external;\n\n    function transferFrom(address _from, address _to, uint256 _value) external;\n}\n\ninterface ICurveFi_2 {\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\n}\n\ninterface IVault {\n    function deposit(uint256) external;\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n}\n\nlibrary Math {\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\ncontract ToolCcrv {\n    using SafeMath for uint256;\n\n    address public constant cDeposit = 0xeB21209ae4C2c9FF2a86ACA31E123764A3B6Bc06;\n    // cCrv\n    address public constant want = 0x845838DF265Dcd2c412A1Dc9e959c7d08537f8a2;\n    // bcCRV\n    address public constant bToken = 0xB34620D0b30648C9597799193E2265bee04606a8;\n\n    // stablecoins\n    address public constant dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address public constant usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n\n    event Recycled(address indexed user, uint256 sentDai, uint256 sentUsdc, uint256 sentWant, uint256 receivedBToken);\n\n    constructor() public {\n        IERC20(dai).approve(cDeposit, uint256(- 1));\n        IERC20(usdc).approve(cDeposit, uint256(- 1));\n        IERC20(want).approve(bToken, uint256(- 1));\n    }\n\n    function recycleExactAmounts(address sender, uint256 _dai, uint256 _usdc, uint256 _want) internal {\n        if (_dai > 0) {\n            IERC20(dai).transferFrom(sender, address(this), _dai);\n        }\n        if (_usdc > 0) {\n            IERC20(usdc).transferFrom(sender, address(this), _usdc);\n        }\n        if (_want > 0) {\n            IERC20(want).transferFrom(sender, address(this), _want);\n        }\n\n        uint256[2] memory depositAmounts = [_dai, _usdc];\n        if (_usdc.add(_dai) > 0) {\n            ICurveFi_2(cDeposit).add_liquidity(depositAmounts, 0);\n        }\n\n        uint256 wantBalance = IERC20(want).balanceOf(address(this));\n        if (wantBalance > 0) {\n            IVault(bToken).deposit(wantBalance);\n        }\n\n        uint256 _bToken = IERC20(bToken).balanceOf(address(this));\n        if (_bToken > 0) {\n            IERC20(bToken).transfer(sender, _bToken);\n        }\n\n        assert(IERC20(bToken).balanceOf(address(this)) == 0);\n\n        emit Recycled(sender, _dai, _usdc, _want, _bToken);\n    }\n\n    function recycle() external {\n        uint256 _dai = Math.min(IERC20(dai).balanceOf(msg.sender), IERC20(dai).allowance(msg.sender, address(this)));\n        uint256 _usdc = Math.min(IERC20(usdc).balanceOf(msg.sender), IERC20(usdc).allowance(msg.sender, address(this)));\n        uint256 _want = Math.min(IERC20(want).balanceOf(msg.sender), IERC20(want).allowance(msg.sender, address(this)));\n\n        recycleExactAmounts(msg.sender, _dai, _usdc, _want);\n    }\n\n\n    function recycleExact(uint256 _dai, uint256 _usdc, uint256 _want) external {\n        recycleExactAmounts(msg.sender, _dai, _usdc, _want);\n    }\n}\n"}}}