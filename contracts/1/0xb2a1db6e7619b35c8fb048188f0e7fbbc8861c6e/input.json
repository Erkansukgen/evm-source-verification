{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "WDXSale.sol": {
      "content": "pragma solidity ^0.5.8;\r\n\r\ninterface IERC20Token {\r\n    function balanceOf(address owner) external returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function decimals() external returns (uint256);\r\n}\r\n\r\ncontract WDXSale {\r\n    IERC20Token public tokenContract;  // the token being sold\r\n    uint256 public price;              // the price, in wei, per token\r\n    address owner;\r\n\r\n    uint256 public tokensSold;\r\n\r\n    event Sold(address buyer, uint256 amount);\r\n\r\n    constructor(IERC20Token _tokenContract, uint256 _price) public {\r\n        owner = msg.sender;\r\n        tokenContract = _tokenContract;\r\n        price = _price;\r\n    }\r\n\r\n    // Guards against integer overflows\r\n    function safeMultiply(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        } else {\r\n            uint256 c = a * b;\r\n            assert(c / a == b);\r\n            return c;\r\n        }\r\n    }\r\n    \r\n    function safeDivision(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b > 0);\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function buyTokens(uint256 numberOfTokens) public payable {\r\n        require(msg.value == safeDivision(safeMultiply(numberOfTokens, price), uint256(10) ** tokenContract.decimals()));\r\n        require(tokenContract.balanceOf(address(this)) >= numberOfTokens);\r\n\r\n\r\n        emit Sold(msg.sender, numberOfTokens);\r\n        tokensSold += numberOfTokens;\r\n\r\n        tokenContract.transfer(msg.sender, numberOfTokens);\r\n    }\r\n    \r\n    function() external payable {\r\n        uint256 numberOfTokens = safeMultiply(safeDivision(msg.value, price), uint256(10) ** tokenContract.decimals());\r\n\r\n        emit Sold(msg.sender, numberOfTokens);\r\n        tokensSold += numberOfTokens;\r\n\r\n        tokenContract.transfer(msg.sender, numberOfTokens);\r\n    }\r\n    \r\n    \r\n    function endSale() public {\r\n        require(msg.sender == owner);\r\n\r\n        // Send unsold tokens to the owner.\r\n        address payable recipient = address(0x69361E320344FF2FD782F2dc6ba52fb436b74CaF);\r\n        require(tokenContract.transfer(recipient, tokenContract.balanceOf(address(this))));\r\n\r\n        recipient.transfer(address(this).balance);\r\n    }\r\n    \r\n    function getEther() public {\r\n        require(msg.sender == owner);\r\n        address payable recipient = address(0x69361E320344FF2FD782F2dc6ba52fb436b74CaF);\r\n        recipient.transfer(address(this).balance);\r\n    }\r\n    \r\n    function updateWDXPrice(uint256 _price) public {\r\n        require(msg.sender == owner);\r\n        price = _price;\r\n    }\r\n}"
    }
  }
}