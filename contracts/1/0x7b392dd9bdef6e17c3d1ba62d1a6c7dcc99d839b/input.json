{"language":"Solidity","settings":{"evmVersion":"istanbul","libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/garfield.sol":{"content":"/**\n * \n * $GARFIELD - GARFIELD TOKEN\n *\n * \n * \n * üíª Website: https://thegarfieldtoken.com/\n * üí¨ Telegram: https://t.me/garfieldtokeneth\n * üê¶ Twitter: hhttps://twitter.com/GarfieldETH\n * \n * \n * \n *  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°¥‚†û‚†â‚¢â‚£≠‚£ø‚£ø‚†ø‚£≥‚£§‚†¥‚†ñ‚†õ‚£õ‚£ø‚£ø‚°∑‚†ñ‚£∂‚£§‚°Ä‚†Ä‚†Ä‚†Ä\n *  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚†Å‚¢Ä‚£∂‚¢ª‚°ü‚†ø‚†ã‚£¥‚†ø‚¢ª‚£ß‚°¥‚†ü‚†ã‚†ø‚†õ‚††‚†æ‚¢õ‚£µ‚£ø‚†Ä‚†Ä‚†Ä‚†Ä\n *  ‚£º‚£ø‚°ø‚¢∂‚£Ñ‚†Ä‚¢Ä‚°á‚¢Ä‚°ø‚†Å‚†à‚†Ä‚†Ä‚£Ä‚£â‚£Ä‚†ò‚£ø‚†Ä‚†Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†õ‚°π‚†ã‚†Ä‚†Ä‚†Ä‚†Ä\n *  ‚£≠‚£§‚°à‚¢ë‚£º‚£ª‚£ø‚£ß‚°å‚†Å‚†Ä‚¢Ä‚£¥‚†ü‚†ã‚†â‚†â‚†õ‚£ø‚£¥‚†ü‚†ã‚†ô‚†ª‚£¶‚°∞‚£û‚†Å‚¢Ä‚£§‚£¶‚£§‚†Ä\n *  ‚†Ä‚†Ä‚£∞‚¢´‚£æ‚†ã‚£Ω‚†ü‚†ë‚†õ‚¢†‚°ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ª‚°Ñ‚†Ä‚†Ä‚†Ä‚†ò‚£∑‚°à‚†ª‚£ç‚†§‚¢§‚£å‚£Ä\n *  ‚¢Ä‚°û‚£°‚°å‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚°Ä‚†Ä‚†Ä‚†Ä‚†∏‚£á‚†Ä‚¢æ‚£∑‚¢§‚£¨‚£â\n *  ‚°û‚£º‚£ø‚£§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†Ä‚†∏‚£ø‚£á‚†à‚†ª\n *  ‚¢∞‚£ø‚°ø‚¢π‚†É‚†Ä‚£†‚†§‚†∂‚£º‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚£ø‚†õ‚°Ñ‚†Ä\n *  ‚†à‚†â‚†Å‚†Ä‚†Ä‚†Ä‚°ü‚°Ä‚†Ä‚†à‚°ó‚†≤‚†∂‚†¶‚¢§‚£§‚£§‚£Ñ‚£Ä‚£Ä‚£∏‚£ß‚£§‚£§‚†§‚†§‚£ø‚£Ä‚°Ä‚†â‚£º‚°á‚†Ä\n *  ‚£ø‚£¥‚£¥‚°Ü‚†Ä‚†Ä‚†ª‚£Ñ‚†Ä‚†Ä‚†°‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†ã‚†Ä‚†Ä‚†Ä‚°à‚†Ä‚†ª‚†ü‚†Ä‚¢Ä‚†ã‚†â‚†ô‚¢∑‚°ø‚°á‚†Ä\n *  ‚£ª‚°ø‚†è‚†Å‚†Ä‚†Ä‚¢†‚°ü‚†Ä‚†Ä‚†Ä‚†£‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†à‚†Ä‚¢Ä‚£Ä‚°æ‚£¥‚†É‚†Ä\n *  ‚¢ø‚†õ‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†¢‚†Ñ‚£Ä‚††‚†º‚£Å‚†Ä‚°±‚†§‚†§‚†ê‚†Å‚†Ä‚†Ä‚£∏‚†ã‚¢ª‚°ü‚†Ä‚†Ä\n *  ‚†à‚¢ß‚£Ä‚£§‚£∂‚°Ñ‚†ò‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚†ñ‚†õ‚†ª‚£Ñ‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚°æ‚†ã‚¢Ä‚°û‚†Ä‚†Ä‚†Ä\n *  ‚†Ä‚†Ä‚†ª‚£ø‚£ø‚°á‚†Ä‚†à‚†ì‚¢¶‚£§‚£§‚£§‚°§‚†û‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†í‚†ö‚¢©‚°Ö‚£†‚°¥‚†ã‚†Ä‚†Ä‚†Ä‚†Ä\n *  ‚†Ä‚†Ä‚†Ä‚†à‚†ª‚¢ß‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚£ª‚†ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n *  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ì‚†∂‚£§‚£Ñ‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£†‚°¥‚†ñ‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n *\n * \n *    _________                        _____\n *   /    ___  \\                      /  _  \\\n *  |    /   )__)                    |  ( )__)\n *  |   |             _____   _____  |  |   ______  _____  __      _____\n *  |   |     _____  /  _  \\ |  _  \\ |  |__(_    _)|   __)|  |    |     \\\n *  |   |    (_   _)|  (_)  || (_) / |   __) |  |  |  (__ |  |    |  |\\  |\n *  |    \\____/  |  |       ||    <  |  |    |  |  |   __)|  |    |  | ) |\n *  |            |  |   _   ||     \\ |  |   _|  |_ |  (__ |  |___ |  |/  |\n *   \\__________/   |__( )__||__(\\__\\|__|  (______)|_____)|______)|_____/\n * \n * \n * Tokenomics:\n * \n * Normal Buy and Sell Tax is 10% \n * \n * Anti-dump Tokenomics where sell tax will be proportional to price impact\n * \n * 10% of all taxes collected will be redistributed to reward the holders\n * \n * Early snipers/movers advantage will be limited.\n * \n * Contract will not be renounced as we need it for the game as well as CEX listings,\n * but removed all functions that may affect the investors.\n * \n * SPDX-License-Identifier: UNLICENSED \n * \n*/\n\npragma solidity ^0.8.4;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if(a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n}  \n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\ncontract Garfield is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    mapping (address => uint256) private _rOwned;\n    mapping (address => uint256) private _tOwned;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => bool) private _isExcludedFromFee;\n    mapping (address => bool) private _bots;\n    mapping (address => User) private trader;\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private constant _tTotal = 1e12 * 10**9;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _tFeeTotal;\n    string private constant _name = unicode\"Garfield Token\";\n    string private constant _symbol = unicode\"GARFIELD\";\n    uint8 private constant _decimals = 9;\n    uint256 private _taxFee = 1;\n    uint256 private _teamFee = 6;\n    uint256 private _launchTime;\n    uint256 private _previousTaxFee = _taxFee;\n    uint256 private _previousteamFee = _teamFee;\n    uint256 private _maxBuyAmount;\n    address payable private _FeeAddress;\n    address payable private _marketingWalletAddress;\n    IUniswapV2Router02 private uniswapV2Router;\n    address private uniswapV2Pair;\n    bool private tradingOpen = false;\n    bool private _cooldownEnabled = true;\n    bool private _communityMode = false;\n    bool private inSwap = false;\n    uint256 private _launchBlock = 0;\n    uint256 private buyLimitEnd;\n    // uint256 private consecutiveBuyCounter = 0;\n    // uint256 private consecutiveSellCounter = 0;\n    uint256 private _snipersTaxed = 0;\n    uint256 private _impactMultiplier = 1000;\n\n\n    struct User {\n        uint256 buyCD;\n        bool exists;\n    }\n\n    event MaxBuyAmountUpdated(uint _maxBuyAmount);\n    event CooldownEnabledUpdated(bool _cooldown);\n    event FeeMultiplierUpdated(uint _multiplier);\n    event FeeRateUpdated(uint _rate);\n\n    modifier lockTheSwap {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n    constructor (address payable FeeAddress, address payable marketingWalletAddress) {\n        _FeeAddress = FeeAddress;\n        _marketingWalletAddress = marketingWalletAddress;\n        _rOwned[_msgSender()] = _rTotal;\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[FeeAddress] = true;\n        _isExcludedFromFee[marketingWalletAddress] = true;\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public pure override returns (uint256) {\n        return _tTotal;\n    }\n\n    function snipersTaxed() public view returns (uint256) {\n        return _snipersTaxed;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function tokenFromReflection(uint256 rAmount) private view returns(uint256) {\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n        uint256 currentRate =  _getRate();\n        return rAmount.div(currentRate);\n    }\n\n    function removeAllFee() private {\n        if(_taxFee == 0 && _teamFee == 0) return;\n        _previousTaxFee = _taxFee;\n        _previousteamFee = _teamFee;\n        _taxFee = 0;\n        _teamFee = 0;\n    }\n    \n    function restoreAllFee() private {\n        _taxFee = _previousTaxFee;\n        _teamFee = _previousteamFee;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    \n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n\n        if(from != owner() && to != owner()) {\n            \n            require(!_bots[from] && !_bots[to]);\n            \n            if(!trader[msg.sender].exists) {\n                trader[msg.sender] = User(0,true);\n            }\n            uint256 totalFee = 10;\n            // buy\n            if(from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to]) {\n                require(tradingOpen, \"Trading not yet enabled.\");\n                \n                if(block.number < _launchBlock + 3) {\n                    totalFee = 90;\n                    _snipersTaxed++;\n                } else if(block.timestamp > _launchTime + (2 minutes)) {\n                    totalFee = 10;\n                } else if (block.timestamp > _launchTime + (1 minutes)) {\n                    totalFee = 20;\n                } else {\n                    totalFee = 40;\n                }\n                \n                _taxFee = (totalFee).div(10);\n                _teamFee = (totalFee.mul(9)).div(10);\n                \n                if(_cooldownEnabled) {\n                    if(buyLimitEnd > block.timestamp) {\n                        require(amount <= _maxBuyAmount);\n                        require(trader[to].buyCD < block.timestamp, \"Your buy cooldown has not expired.\");\n                        trader[to].buyCD = block.timestamp + (45 seconds);\n                    }\n                }\n            \n                \n            }\n            uint256 contractTokenBalance = balanceOf(address(this));\n\n            // sell\n            if(!inSwap && from != uniswapV2Pair && tradingOpen) {\n\n                //price impact based sell tax\n                uint256 amountImpactMultiplier = amount.mul(_impactMultiplier);\n                uint256 priceImpact = amountImpactMultiplier.div(balanceOf(uniswapV2Pair).add(amount));\n                \n                if (priceImpact <= 10) {\n                    totalFee = 10;\n                } else if (priceImpact >= 40) {\n                    totalFee = 40;\n                } else if (priceImpact.mod(2) != 0) {\n                    totalFee = ++priceImpact;\n                } else {\n                    totalFee = priceImpact;\n                }\n                \n                _taxFee = (totalFee).div(10);\n                _teamFee = (totalFee.mul(9)).div(10);\n\n                //To limit big dumps by the contract before the sells\n                if(contractTokenBalance > 0) {\n                    if(contractTokenBalance > balanceOf(uniswapV2Pair).mul(5).div(100)) {\n                        contractTokenBalance = balanceOf(uniswapV2Pair).mul(5).div(100);\n                    }\n                    swapTokensForEth(contractTokenBalance);\n                }\n                uint256 contractETHBalance = address(this).balance;\n                if(contractETHBalance > 0) {\n                    sendETHToFee(address(this).balance);\n                }\n            }\n        }\n        bool takeFee = true;\n\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to] || _communityMode){\n            takeFee = false;\n        }\n        \n        _tokenTransfer(from,to,amount,takeFee);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n        \n    function sendETHToFee(uint256 amount) private {\n        _FeeAddress.transfer(amount.div(2));\n        _marketingWalletAddress.transfer(amount.div(2));\n    }\n    \n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\n        if(!takeFee)\n            removeAllFee();\n        _transferStandard(sender, recipient, amount);\n        if(!takeFee)\n            restoreAllFee();\n    }\n\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \n\n        _takeTeam(tTeam);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _taxFee, _teamFee);\n        uint256 currentRate =  _getRate();\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\n    }\n\n    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {\n        uint256 tFee = tAmount.mul(taxFee).div(100);\n        uint256 tTeam = tAmount.mul(TeamFee).div(100);\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\n        return (tTransferAmount, tFee, tTeam);\n    }\n\n    function _getRate() private view returns(uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _getCurrentSupply() private view returns(uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        if(rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n        uint256 rAmount = tAmount.mul(currentRate);\n        uint256 rFee = tFee.mul(currentRate);\n        uint256 rTeam = tTeam.mul(currentRate);\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n    function _takeTeam(uint256 tTeam) private {\n        uint256 currentRate =  _getRate();\n        uint256 rTeam = tTeam.mul(currentRate);\n\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\n    }\n\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\n        _rTotal = _rTotal.sub(rFee);\n        _tFeeTotal = _tFeeTotal.add(tFee);\n    }\n\n    receive() external payable {}\n    \n    function openTrading() external onlyOwner() {\n        require(!tradingOpen,\"trading is already open\");\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        uniswapV2Router = _uniswapV2Router;\n        _approve(address(this), address(uniswapV2Router), _tTotal);\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n        _maxBuyAmount = 5000000000 * 10**9;\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\n        tradingOpen = true;\n        buyLimitEnd = block.timestamp + (20 seconds);\n        _launchTime = block.timestamp;\n        _launchBlock = block.number;\n    }\n\n    function setMarketingWallet (address payable marketingWalletAddress) external {\n        require(_msgSender() == _FeeAddress);\n        _isExcludedFromFee[_marketingWalletAddress] = false;\n        _marketingWalletAddress = marketingWalletAddress;\n        _isExcludedFromFee[marketingWalletAddress] = true;\n    }\n    \n    function excludeFromFee (address payable ad) external {\n        require(_msgSender() == _FeeAddress);\n        _isExcludedFromFee[ad] = true;\n    }\n    \n    function includeToFee (address payable ad) external {\n        require(_msgSender() == _FeeAddress);\n        _isExcludedFromFee[ad] = false;\n    }\n    \n    function setBots(address[] memory bots_) public onlyOwner {\n        //Cannot set bots after 20 minutes of launch time to ensure contract is SAFU without renounce as well\n        if (block.timestamp < _launchTime + (20 minutes)) {\n            for (uint i = 0; i < bots_.length; i++) {\n                if (bots_[i] != uniswapV2Pair && bots_[i] != address(uniswapV2Router)) {\n                    _bots[bots_[i]] = true;\n                }\n            }\n        }\n    }\n    \n    function delBot(address notbot) public onlyOwner {\n        _bots[notbot] = false;\n    }\n    \n    function isBot(address ad) public view returns (bool) {\n        return _bots[ad];\n    }\n    \n    function setCooldownEnabled(bool onoff) external onlyOwner() {\n        _cooldownEnabled = onoff;\n        emit CooldownEnabledUpdated(_cooldownEnabled);\n    }\n\n    function thisBalance() public view returns (uint) {\n        return balanceOf(address(this));\n    }\n\n    function cooldownEnabled() public view returns (bool) {\n        return _cooldownEnabled;\n    }\n\n    function timeToBuy(address buyer) public view returns (uint) {\n        return block.timestamp - trader[buyer].buyCD;\n    }\n    \n    function amountInPool() public view returns (uint) {\n        return balanceOf(uniswapV2Pair);\n    }\n}"}}}