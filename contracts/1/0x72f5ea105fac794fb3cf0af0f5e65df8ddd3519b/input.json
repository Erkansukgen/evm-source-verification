{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "RECToken.sol": {
      "content": "pragma solidity ^0.4.22;\r\n\r\ncontract RECToken {\r\n\r\n    string public name = \"REC\";\r\n    string public symbol = \"REC\";\r\n    uint256 public constant decimals = 18;\r\n    address public adminWallet;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    uint256 public totalSupply = 0;\r\n    bool public stopped = false;\r\n    uint public constant supplyNumber = 255000000;\r\n    uint public constant powNumber = 10;\r\n    uint public constant TOKEN_SUPPLY_TOTAL = supplyNumber * powNumber ** decimals;\r\n    uint256 constant valueFounder = TOKEN_SUPPLY_TOTAL;\r\n    address owner = 0x0;\r\n\r\n    modifier isOwner {\r\n        assert(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier isRunning {\r\n        assert(!stopped);\r\n        _;\r\n    }\r\n\r\n    modifier validAddress {\r\n        assert(0x0 != msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        adminWallet = owner;\r\n        totalSupply = valueFounder;\r\n        balanceOf[owner] = valueFounder;\r\n        emit Transfer(0x0, owner, valueFounder);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public isRunning validAddress returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public isRunning validAddress returns (bool success) {\r\n\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        require(allowance[_from][msg.sender] >= _value);\r\n        balanceOf[_to] += _value;\r\n        balanceOf[_from] -= _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public isRunning validAddress returns (bool success) {\r\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function stop() public isOwner {\r\n        stopped = true;\r\n    }\r\n\r\n    function start() public isOwner {\r\n        stopped = false;\r\n    }\r\n\r\n    function setName(string _name) public isOwner {\r\n        name = _name;\r\n    }\r\n\r\n    function setSymbol(string _symbol) public isOwner {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function burn(uint256 _value) public {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[0x0] += _value;\r\n        emit Transfer(msg.sender, 0x0, _value);\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}"
    }
  }
}