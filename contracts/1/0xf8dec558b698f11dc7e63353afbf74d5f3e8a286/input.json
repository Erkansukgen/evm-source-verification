{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/MinimalIncreasingTreasuryRelayerOverlay.sol":{"content":"pragma solidity 0.6.7;\n\ncontract GebAuth {\n    // --- Authorization ---\n    mapping (address => uint) public authorizedAccounts;\n    /**\n     * @notice Add auth to an account\n     * @param account Account to add auth to\n     */\n    function addAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 1;\n        emit AddAuthorization(account);\n    }\n    /**\n     * @notice Remove auth from an account\n     * @param account Account to remove auth from\n     */\n    function removeAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 0;\n        emit RemoveAuthorization(account);\n    }\n    /**\n    * @notice Checks whether msg.sender can call an authed function\n    **/\n    modifier isAuthorized {\n        require(authorizedAccounts[msg.sender] == 1, \"GebAuth/account-not-authorized\");\n        _;\n    }\n\n    // --- Events ---\n    event AddAuthorization(address account);\n    event RemoveAuthorization(address account);\n\n    constructor () public {\n        authorizedAccounts[msg.sender] = 1;\n        emit AddAuthorization(msg.sender);\n    }\n}\n\nabstract contract IncreasingTreasuryRelayerLike {\n    function modifyParameters(bytes32, address) virtual external;\n}\ncontract MinimalIncreasingTreasuryRelayerOverlay is GebAuth {\n    // --- Variables ---\n    mapping(address => uint256) public relayers;\n\n    // --- Events ---\n    event ToggleRelayer(address relayer, uint256 whitelisted);\n\n    constructor() public GebAuth() {}\n\n    // --- Administration ---\n    /*\n    * @notice Whitelist/blacklist a relayer contract\n    * @param relayer The relayer address\n    */\n    function toggleRelayer(address relayer) external isAuthorized {\n        if (relayers[relayer] == 0) {\n          relayers[relayer] = 1;\n        } else {\n          relayers[relayer] = 0;\n        }\n        emit ToggleRelayer(relayer, relayers[relayer]);\n    }\n\n    /*\n    * @notify Modify \"refundRequestor\"\n    * @param relayer The relayer address\n    * @param parameter Must be \"refundRequestor\"\n    * @param data The new value for refundRequestor\n    */\n    function modifyParameters(address relayer, bytes32 parameter, address data) external isAuthorized {\n        require(relayers[relayer] == 1, \"MinimalIncreasingTreasuryRelayerOverlay/not-whitelisted\");\n        if (parameter == \"refundRequestor\") {\n          IncreasingTreasuryRelayerLike(relayer).modifyParameters(parameter, data);\n        } else revert(\"MinimalIncreasingTreasuryRelayerOverlay/modify-forbidden-param\");\n    }\n}"}}}