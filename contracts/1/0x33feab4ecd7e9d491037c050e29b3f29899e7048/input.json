{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/Dgas.sol":{"content":"pragma solidity >=0.5.0;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n\ncontract ERC20Token {\n    using SafeMath for uint;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    uint public totalSupply;\n    mapping(address => uint) public balanceOf;\n    mapping(address => mapping(address => uint)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n\n    function _transfer(address from, address to, uint value) private {\n        require(balanceOf[from] >= value, 'ERC20Token: INSUFFICIENT_BALANCE');\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        if (to == address(0)) { // burn\n            totalSupply = totalSupply.sub(value);\n        }\n        emit Transfer(from, to, value);\n    }\n\n    function approve(address spender, uint value) external returns (bool) {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external returns (bool) {\n        require(allowance[from][msg.sender] >= value, 'ERC20Token: INSUFFICIENT_ALLOWANCE');\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n}\n\n\ncontract UpgradableProduct {\n    address public impl;\n\n    event ImplChanged(address indexed _oldImpl, address indexed _newImpl);\n\n    constructor() public {\n        impl = msg.sender;\n    }\n\n    modifier requireImpl() {\n        require(msg.sender == impl, 'FORBIDDEN');\n        _;\n    }\n\n    function upgradeImpl(address _newImpl) public requireImpl {\n        require(_newImpl != address(0), 'INVALID_ADDRESS');\n        require(_newImpl != impl, 'NO_CHANGE');\n        address lastImpl = impl;\n        impl = _newImpl;\n        emit ImplChanged(lastImpl, _newImpl);\n    }\n}\n\ncontract UpgradableGovernance {\n    address public governor;\n\n    event GovernorChanged(address indexed _oldGovernor, address indexed _newGovernor);\n\n    constructor() public {\n        governor = msg.sender;\n    }\n\n    modifier requireGovernor() {\n        require(msg.sender == governor, 'FORBIDDEN');\n        _;\n    }\n\n    function upgradeGovernance(address _newGovernor) public requireGovernor {\n        require(_newGovernor != address(0), 'INVALID_ADDRESS');\n        require(_newGovernor != governor, 'NO_CHANGE');\n        address lastGovernor = governor;\n        governor = _newGovernor;\n        emit GovernorChanged(lastGovernor, _newGovernor);\n    }\n}\n\n\n/*\n\tThe Objective of MintToken is to implement a decentralized staking mechanism, which calculates users' share\n\tby accumulating productiviy * time. And calculates users revenue from anytime t0 to t1 by the formula below:\n\n        user_accumulated_productivity(time1) - user_accumulated_productivity(time0)\n       _____________________________________________________________________________  * (gross_product(t1) - gross_product(t0))\n       total_accumulated_productivity(time1) - total_accumulated_productivity(time0)\n\n*/\ncontract MintToken is ERC20Token, UpgradableProduct, UpgradableGovernance {\n    using SafeMath for uint;\n\n    uint public mintCumulation;\n\n    struct Production {\n        uint amount;        \t// how many tokens could be produced on block basis\n        uint total;\t\t\t\t// total produced tokens\n        uint block;\t\t        // last updated block number\n    }\n\n    Production public grossProduct = Production(0, 0, 0);\n\n    struct Productivity {\n        uint product;           // user's productivity\n        uint total;             // total productivity\n        uint block;             // record's block number\n        uint user;              // accumulated products\n        uint global;            // global accumulated products\n        uint gross;             // global gross products\n    }\n\n    Productivity public global;\n    mapping(address => Productivity)    public users;\n\n    event AmountPerBlockChanged\t(uint oldValue, uint newValue);\n    event ProductivityIncreased\t(address indexed user, uint value);\n    event ProductivityDecreased (address indexed user, uint value);\n\n    uint private unlocked = 1;\n\n    modifier lock() {\n        require(unlocked == 1, 'Locked');\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n\n\t// When calling _computeBlockProduct() it calculates the area of productivity * time since last time and accumulate it.\n    function _computeBlockProduct() private view returns (uint) {\n        uint elapsed = block.number.sub(grossProduct.block);\n        return grossProduct.amount.mul(elapsed);\n    }\n\n    // compute productivity returns total productivity of a user.\n    function _computeProductivity(Productivity memory user) private view returns (uint) {\n        uint blocks = block.number.sub(user.block);\n        return user.total.mul(blocks);\n    }\n\n    // update users' productivity by value with boolean value indicating increase  or decrease.\n    function _updateProductivity(Productivity storage user, uint value, bool increase) private {\n        user.product      = user.product.add(_computeProductivity(user));\n        global.product    = global.product.add(_computeProductivity(global));\n\n        require(global.product <= uint(-1), 'GLOBAL_PRODUCT_OVERFLOW');\n\n        user.block      = block.number;\n        global.block    = block.number;\n        if(increase) {\n            user.total   = user.total.add(value);\n            global.total = global.total.add(value);\n        }\n        else {\n            user.total   = user.total.sub(value);\n            global.total = global.total.sub(value);\n        }\n    }\n\n    // External function call\n    // This function adjust how many token will be produced by each block, eg:\n    // changeAmountPerBlock(100)\n    // will set the produce rate to 100/block.\n    function changeAmountPerBlock(uint value) external requireGovernor returns (bool) {\n        uint old = grossProduct.amount;\n        require(value != old, 'AMOUNT_PER_BLOCK_NO_CHANGE');\n\n        uint product                = _computeBlockProduct();\n        grossProduct.total          = grossProduct.total.add(product);\n        grossProduct.block          = block.number;\n        grossProduct.amount         = value;\n        require(grossProduct.total <= uint(-1), 'BLOCK_PRODUCT_OVERFLOW');\n\n        emit AmountPerBlockChanged(old, value);\n        return true;\n    }\n\n    // External function call\n    // This function increase user's productivity and updates the global productivity.\n    // the users' actual share percentage will calculated by:\n    // Formula:     user_productivity / global_productivity\n    function increaseProductivity(address user, uint value) external requireImpl returns (bool) {\n        require(value > 0, 'PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO');\n        Productivity storage product        = users[user];\n\n        if (product.block == 0) {\n            product.gross = grossProduct.total.add(_computeBlockProduct());\n        }\n        \n        _updateProductivity(product, value, true);\n        emit ProductivityIncreased(user, value);\n        return true;\n    }\n\n    // External function call \n    // This function will decreases user's productivity by value, and updates the global productivity\n    // it will record which block this is happenning and accumulates the area of (productivity * time)\n    function decreaseProductivity(address user, uint value) external requireImpl returns (bool) {\n        Productivity storage product = users[user];\n\n        require(value > 0 && product.total >= value, 'INSUFFICIENT_PRODUCTIVITY');\n        \n        _updateProductivity(product, value, false);\n        emit ProductivityDecreased(user, value);\n        return true;\n    }\n\n\n    // External function call\n    // When user calls this function, it will calculate how many token will mint to user from his productivity * time\n    // Also it calculates global token supply from last time the user mint to this time.\n    function mint() external lock returns (uint) {\n        (uint gp, uint userProduct, uint globalProduct, uint amount) = _computeUserProduct();\n        require(amount > 0, 'NO_PRODUCTIVITY');\n        Productivity storage product = users[msg.sender];\n        product.gross   = gp;\n        product.user    = userProduct;\n        product.global  = globalProduct;\n\n        balanceOf[msg.sender]   = balanceOf[msg.sender].add(amount);\n        totalSupply             = totalSupply.add(amount);\n        mintCumulation          = mintCumulation.add(amount);\n\n        emit Transfer(address(0), msg.sender, amount);\n        return amount;\n    }\n\n    // Returns how many token he will be able to mint.\n    function _computeUserProduct() private view returns (uint gp, uint userProduct, uint globalProduct, uint amount) {\n        Productivity memory product    = users[msg.sender];\n\n        gp              = grossProduct.total.add(_computeBlockProduct());\n        userProduct     = product.product.add(_computeProductivity(product));\n        globalProduct   = global.product.add(_computeProductivity(global));\n\n        uint deltaBlockProduct  = gp.sub(product.gross);\n        uint numerator          = userProduct.sub(product.user);\n        uint denominator        = globalProduct.sub(product.global);\n\n        if (denominator > 0) {\n            amount = deltaBlockProduct.mul(numerator) / denominator;\n        }\n    }\n\n    // Returns how many productivity a user has and global has.\n    function getProductivity(address user) external view returns (uint, uint) {\n        return (users[user].total, global.total);\n    }\n\n    // Returns the current gorss product rate.\n    function amountPerBlock() external view returns (uint) {\n        return grossProduct.amount;\n    }\n\n    // Returns how much a user could earn.\n    function take() external view returns (uint) {\n        (, , , uint amount) = _computeUserProduct();\n        return amount;\n    }\n\n    // Returns how much a user could earn plus the giving block number.\n    function takes() external view returns (uint, uint) {\n        (, , , uint amount) = _computeUserProduct();\n        return (amount, block.number);\n    }\n}\n\ncontract Dgas is MintToken {\n\n    constructor() UpgradableProduct() UpgradableGovernance() public {\n        name        = 'Demax Gas';\n        symbol      = 'DGAS';\n        decimals    = 18;\n        grossProduct.amount = 100 * (10 ** 18);\n        grossProduct.block  = block.number;\n    }\n}\n\n"}}}