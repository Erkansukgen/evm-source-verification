{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 9999999
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/SimpleMinter.sol": {
      "content": "pragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\n\npragma solidity ^0.8.0;\n\n////import \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\npragma solidity ^0.8.0;\n\n/* @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\npragma solidity ^0.8.0;\n\n////import \"../utils/Context.sol\";\n\n/* @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\npragma solidity ^0.8.0;\n\n////import \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\npragma solidity ^0.8.0;\n\n////import \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n////import \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n////import \"@openzeppelin/contracts/access/Ownable.sol\";\n////import \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\ncontract SimpleMinter is Ownable, IERC721Receiver {\n    address public targetAddress;\n    IMC private TARGET;\n\n    constructor() {\n        targetAddress = 0xfFD287647F3F5ac7e5d613911B75023311712F93;\n        TARGET = IMC(targetAddress);\n    }\n\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    function exec(uint256 blockNumber, uint price, uint16 count) external payable onlyOwner {\n        require(blockNumber >= block.number, \"BLOCK_TARGET_EXCEEDED\");\n\n        uint pairPrice = price * count;\n        TARGET.publicSalesMint{value: pairPrice}(count);\n    }\n\n    function execTimed(uint64 time, uint256 blockNumber, uint price, uint16 count) external payable onlyOwner {\n       require(block.timestamp >= time, \"TIME_TARGET_EARLY\");\n       this.exec(blockNumber, price, count);\n    }\n\n    function execMulti(uint256 blockNumber, uint price, uint16 count) external payable onlyOwner {\n        require(blockNumber >= block.number, \"BLOCK_TARGET_EXCEEDED\");\n        \n        uint pairPrice = price * count;\n        while(address(this).balance >= pairPrice && IERC721Enumerable(address(TARGET)).totalSupply() + count < 5555){\n            TARGET.publicSalesMint{value: pairPrice}(count);\n        }\n    }\n\n    function execMultiTimed(uint64 time, uint256 blockNumber, uint price, uint16 count) external payable onlyOwner {\n       require(block.timestamp >= time, \"TIME_TARGET_EARLY\");\n       this.execMulti(blockNumber, price, count);\n    }\n\n    function execMultiTransfered(uint256 blockNumber, uint price, uint16 count, uint256 limit) external payable onlyOwner {\n        require(blockNumber >= block.number, \"BLOCK_TARGET_EXCEEDED\");\n        \n        uint pairPrice = price * count;\n        uint limitValue = price * limit;\n        while(address(this).balance >= pairPrice && IERC721Enumerable(address(TARGET)).totalSupply() + limit < 5555){\n            CMT instance = new CMT(targetAddress,owner());\n            instance.executeMulti{value: limitValue}(price, count, limit);\n        }\n    }\n\n    function execMultiTransferedTimed(uint64 time, uint256 blockNumber, uint price, uint16 count, uint256 limit) external payable onlyOwner {\n       require(block.timestamp >= time, \"TIME_TARGET_EARLY\");\n       this.execMultiTransfered(blockNumber, price, count, limit);\n    }\n\n    function withdrawBalance(address to) external onlyOwner {\n        (bool success, ) = to.call{value: address(this).balance}(\"\");\n        require(success, \"BALANCE_TRANSFER_FAILURE\");\n    }\n\n    function withdrawERC721(\n        IERC721 token,\n        address receiver,\n        uint256 tokenId\n    ) external onlyOwner {\n        token.transferFrom(address(this), receiver, tokenId);\n    }\n\n    function balanceOf() public view returns (uint256) {\n        return IERC721Enumerable(targetAddress).balanceOf(address(this));\n    }\n\n    function withdrawETH() external onlyOwner{\n        payable(owner()).transfer(address(this).balance);\n    }\n\n    function balanceETH() external view returns (uint256){\n        return address(this).balance;\n    }\n\n    function withdrawTokens(IERC721 token, uint256[] calldata tokenIds) external onlyOwner{\n        uint256 balance = IERC721Enumerable(targetAddress).balanceOf(address(this));\n        require(tokenIds.length <= balance, \"WITHDRAW_COUNT_EXCEED_BALANCE\");\n\n        uint len = tokenIds.length;\n        for (uint256 i = 0; i < len; ++i) {\n            uint256 tokenId = tokenIds[i];\n            token.transferFrom(address(this), owner(), tokenId);\n        }   \n    }\n\n    function safeWithdrawTokens(IERC721 token, uint256[] calldata tokenIds) external onlyOwner{\n        uint256 balance = IERC721Enumerable(targetAddress).balanceOf(address(this));\n        require(tokenIds.length <= balance, \"WITHDRAW_COUNT_EXCEED_BALANCE\");\n\n        uint len = tokenIds.length;\n        for (uint256 i = 0; i < len; ++i) {\n            uint256 tokenId = tokenIds[i];\n            token.safeTransferFrom(address(this), owner(), tokenId);\n        }   \n    }\n\n    function withdraw() external onlyOwner {\n        uint256 balance = IERC721Enumerable(targetAddress).balanceOf(address(this));\n        for(uint256 i = 0; i < balance; i++){\n            uint256 tokenId = IERC721Enumerable(targetAddress).tokenOfOwnerByIndex(address(this), 0);\n            IERC721Enumerable(targetAddress).transferFrom(address(this), owner(), tokenId);\n        }\n    }\n\n    function safeWithdraw() external onlyOwner {\n        uint256 balance = IERC721Enumerable(targetAddress).balanceOf(address(this));\n        for(uint256 i = 0; i < balance; i++){\n            uint256 tokenId = IERC721Enumerable(targetAddress).tokenOfOwnerByIndex(address(this), 0);\n            IERC721Enumerable(targetAddress).safeTransferFrom(address(this), owner(), tokenId);\n        }\n    }\n\n    function approve() external onlyOwner {\n        IERC721Enumerable(targetAddress).setApprovalForAll(owner(), true);\n    }\n\n}\n\ncontract CMT is Ownable, IERC721Receiver {\n    address private receiver;\n\n    IMC private TARGET;\n\n    constructor(address _target, address _receiver) {\n        TARGET = IMC(_target);\n        receiver = _receiver;\n    }\n\n    function executeMulti(uint price, uint16 count_per_tx, uint256 limit) external payable onlyOwner {\n        uint pairPrice = price * count_per_tx;\n\n        uint256 counter = 0;\n\n        while(\n            counter < limit &&\n            address(this).balance >= pairPrice &&\n            IERC721Enumerable(address(TARGET)).totalSupply() + count_per_tx <  5555\n        ){\n            TARGET.publicSalesMint{value: pairPrice}(count_per_tx);\n            counter += count_per_tx;\n        }\n\n        selfdestruct(payable(receiver));\n    }\n\n    function onERC721Received(\n        address operator,\n        address,\n        uint256 tokenId,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        if (address(TARGET) == msg.sender) {\n            IERC721 sender = IERC721(msg.sender);\n            sender.transferFrom(operator, receiver, tokenId);\n        }\n        return this.onERC721Received.selector;\n    }\n}\n\ninterface IMC {\n    function publicSalesMint(uint16 _count) external payable;\n}"
    }
  }
}