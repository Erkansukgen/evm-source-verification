{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/defl.sol":{"content":"// https://soliditydeveloper.com/uniswap2\r\n// https://ethereum.stackexchange.com/questions/84639/swap-ether-to-tokens-on-uniswap-v2-router-02-fails/84640#84640\r\n// https://ethereum.stackexchange.com/questions/9469/how-to-get-the-token-balance-of-an-external-token-in-my-contract\r\npragma solidity ^0.6.0;\r\n\r\n// import \"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\";\r\n// import \"https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IERC20.sol\";\r\n// import \"./browser/Owner.sol\";\r\n\r\n    contract Ownable {\r\n      address public owner;\r\n      constructor () public {\r\n        owner = msg.sender;\r\n      }\r\n      modifier onlyOwner() {\r\n        require(msg.sender == owner, \"You is not owner\");\r\n        _;\r\n      }\r\n      function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n      }\r\n    }\r\n\r\n\r\n    interface ROUTER{\r\n        function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n        function swapExactTokensForTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint[] memory amounts);\r\n        function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint[] memory amounts);\r\n    }\r\n\r\n    interface ERC20{\r\n         function balanceOf(address account) external returns (uint256);\r\n         function allowance(address owner, address spender) external returns (uint256);\r\n         function approve(address spender, uint256 amount) external returns (bool);\r\n         function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    }\r\n\r\ncontract AUtrader  is Ownable {\r\n  uint ethIn;\r\n  address[] _path;\r\n  address addr;\r\n\r\n  address internal constant UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D ;\r\n  address internal constant UNDB_ADDRESS = 0xd03B6ae96CaE26b743A6207DceE7Cbe60a425c70;\r\n  uint private licencePrice = 0;\r\n\r\n  struct FeeAddress {\r\n      address payable recipient;\r\n      bool isExist;\r\n  }\r\n  mapping (address => FeeAddress) public addresses; // feeAddress=>recipient\r\n\r\n  ROUTER private uniswapRouter;\r\n  ERC20 private UNDB;\r\n\r\n  constructor() public {\r\n    uniswapRouter = ROUTER(UNISWAP_ROUTER_ADDRESS);\r\n    UNDB = ERC20(UNDB_ADDRESS);\r\n  }\r\n\r\n function exchange(address[] memory path, uint amountIn, uint minOutAmount, bool isTaxToken ) public payable returns(bool){\r\n     FeeAddress storage recipientEL = addresses[msg.sender];\r\n     require(recipientEL.isExist, \"Not attached feeAddress\");\r\n     address recipient = recipientEL.recipient;\r\n     uint deadline = now + 120;\r\n     ERC20 tokenIn = ERC20(path[0]);\r\n     require(UNDB.balanceOf(recipient) >= licencePrice, \"insufficient balance UNDB\");\r\n     require(tokenIn.balanceOf(recipient) >= amountIn, \"insufficient balance input token\");\r\n     require(tokenIn.allowance(recipient, address(this)) >= amountIn, \"Not approved amountIn\");\r\n     TransferHelper.safeTransferFrom(path[0], recipient, address(this), amountIn);\r\n     \r\n     if(tokenIn.allowance(address(this), UNISWAP_ROUTER_ADDRESS) < amountIn){\r\n        TransferHelper.safeApprove(path[0], UNISWAP_ROUTER_ADDRESS, amountIn * 100);\r\n     }\r\n     \r\n     if(!isTaxToken){\r\n        uniswapRouter.swapExactTokensForTokens(amountIn, minOutAmount, path, recipient, deadline);\r\n     } else {\r\n        amountIn = tokenIn.balanceOf(address(this));\r\n        uniswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, minOutAmount, path, recipient, deadline);\r\n     }\r\n }\r\n\r\n function attachAddress(address payable feeAddress) public {\r\n    addresses[feeAddress] = FeeAddress(msg.sender, true);\r\n }\r\n\r\n function licencePriceChange(uint newPrice) public onlyOwner{\r\n     licencePrice = newPrice;\r\n }\r\n}\r\n\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelperUNDB::safeApprove: approve failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelperUNDB::transferFrom: transferFrom failed'\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n//   address private DAI = 0xaD6D458402F60fD3Bd25163575031ACDce07538D;\r\n//   address private WETH = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\r\n// 1000000000000000000\r\n\r\n// [\"0xaD6D458402F60fD3Bd25163575031ACDce07538D\", \"0xc778417E063141139Fce010982780140Aa0cD5Ab\"]\r\n// [\"0xc778417E063141139Fce010982780140Aa0cD5Ab\", \"0xaD6D458402F60fD3Bd25163575031ACDce07538D\"]\r\n\r\n// [\"0x8046085fb6806cAa9b19a4Cd7b3cd96374dD9573\", \"0xc778417E063141139Fce010982780140Aa0cD5Ab\"]\r\n// 0xdD870fA1b7C4700F2BD7f44238821C26f7392148\r\n"}}}