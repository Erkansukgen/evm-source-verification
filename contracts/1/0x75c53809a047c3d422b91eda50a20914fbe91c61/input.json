{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Upgrader.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\ninterface Proxy {\r\n  function upgradeTo(address newImplementation) external;\r\n}\r\n\r\ncontract Upgrader {\r\n  event Upgraded(address indexed proxyAddress, address indexed implementationAddress);\r\n\r\n  address public admin;\r\n  address public pendingAdmin;\r\n  address public superAdmin;\r\n  address public pendingSuperAdmin;\r\n\r\n  constructor(address adminAddress, address superAdminAddress) public {\r\n    admin = adminAddress;\r\n    superAdmin = superAdminAddress;\r\n  }\r\n\r\n  // ADMIN\r\n  // *************************************************************************************\r\n  function setPendingAdmin(address newPendingAdmin) public {\r\n    require(msg.sender == admin, 'not admin');\r\n    pendingAdmin = newPendingAdmin;\r\n  }\r\n\r\n  function acceptAdmin() public {\r\n    require(msg.sender == pendingAdmin && msg.sender != address(0), 'not pendingAdmin');\r\n    admin = pendingAdmin;\r\n    pendingAdmin = address(0);\r\n  }\r\n\r\n  function setPendingSuperAdmin(address newPendingSuperAdmin) public {\r\n    require(msg.sender == superAdmin, 'not superAdmin');\r\n    pendingSuperAdmin = newPendingSuperAdmin;\r\n  }\r\n\r\n  function acceptSuperAdmin() public {\r\n    require(msg.sender == pendingSuperAdmin && msg.sender != address(0), 'not pendingSuperAdmin');\r\n    superAdmin = pendingSuperAdmin;\r\n    pendingSuperAdmin = address(0);\r\n  }\r\n\r\n  // UPGRADE\r\n  // *************************************************************************************\r\n  function upgrade(address proxyAddress, address implementationAddress) external {\r\n    require(msg.sender == admin || msg.sender == superAdmin, 'not admin');\r\n    Proxy proxy = Proxy(proxyAddress);\r\n    proxy.upgradeTo(implementationAddress);\r\n    emit Upgraded(proxyAddress, implementationAddress);\r\n  }\r\n}"}}}