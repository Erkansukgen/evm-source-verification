{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/3_Ballot.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\n/** \n * @title Ballot\n * @dev Implements voting process along with vote delegation\n\n\n */\ninterface ILendingPairAndFeeRec {\n    function accrueAccount (address _account) external ;\n    function convert(address _pair, bytes memory _path, uint _minWildOut) external;\n}\n\ncontract conti { \n   \n    function accr(address[] memory addis, address pair, bytes memory path, uint minOut) public {\n        require(msg.sender == 0xD56705548111F08CCB3e1A73806c53Dc706F2e75, \"no\");\n\nfor (uint i=0; i<addis.length; i++) {\n ILendingPairAndFeeRec(0x3550e61886E1184B8BB732bb7135BDA9B7461801).accrueAccount(addis[i]);\n    \n}\n  ILendingPairAndFeeRec(0x487502F921BA3DADAcF63dBF7a57a978C241B72C).convert(pair,path,minOut);\n\n    }\n}\n    \n    \n"}}}