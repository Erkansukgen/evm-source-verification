{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"browser/ethbox Token.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.2;\r\n\r\n\r\n//------------------------------------------------------------------------------------------------------------------\r\n//\r\n// ethbox Token\r\n//\r\n// Token symbol:    EBOX\r\n// Token name:      ethbox Token\r\n// \r\n// Total supply:    65.000.000 * 10^18\r\n// Decimals:        18\r\n//\r\n//------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\ncontract SafeMath\r\n{\r\n    //\r\n    // Standard overflow / underflow proof basic maths library\r\n    //\r\n    \r\n    function safeAdd(uint a, uint b) public pure returns (uint c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function safeSub(uint a, uint b) public pure returns (uint c)\r\n    {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function safeMul(uint a, uint b) public pure returns (uint c)\r\n    {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) public pure returns (uint c)\r\n    {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\ninterface ERC20Interface\r\n{\r\n    //\r\n    // Standard ERC-20 token interface\r\n    //\r\n    \r\n    function totalSupply() external view returns(uint);\r\n    function balanceOf(address tokenOwner) external view returns(uint);\r\n    function allowance(address tokenOwner, address spender) external view returns(uint);\r\n    function approve(address spender, uint tokens) external returns(bool);\r\n    function transfer(address to, uint tokens) external returns(bool);\r\n    function transferFrom(address from, address to, uint tokens) external returns(bool);\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n}\r\n\r\n\r\ncontract ethboxToken is ERC20Interface, SafeMath\r\n{\r\n    //\r\n    // Standard ERC-20 token\r\n    //\r\n    \r\n\r\n    string  public symbol       = \"EBOX\";\r\n    string  public name         = \"ethbox Token\";\r\n    uint8   public decimals     = 18;\r\n    uint    public _totalSupply = 65000000e18;\r\n    \r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    \r\n    \r\n    constructor()\r\n    {\r\n        balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n    \r\n    fallback() external payable\r\n    {\r\n        revert(\"Please don't send funds directly to the ethbox Token contract.\");\r\n    }\r\n    \r\n    function totalSupply() override external view returns(uint)\r\n    {\r\n        return safeSub(_totalSupply, balances[address(0)]);\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) override external view returns(uint)\r\n    {\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n    function allowance(address tokenOwner, address spender) override external view returns(uint)\r\n    {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint tokens) override external returns(bool)\r\n    {\r\n        allowed[msg.sender][spender] = tokens;\r\n        \r\n        emit Approval(msg.sender, spender, tokens);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transfer(address to, uint tokens) override external returns(bool)\r\n    {\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        \r\n        emit Transfer(msg.sender, to, tokens);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint tokens) override external returns(bool)\r\n    {\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        \r\n        emit Transfer(from, to, tokens);\r\n        \r\n        return true;\r\n    }\r\n}"}}}