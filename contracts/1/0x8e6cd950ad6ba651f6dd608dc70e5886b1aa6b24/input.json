{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/StarLink.sol": {
      "content": "/**\r *Submitted for verification at Etherscan.io on 2021-05-02\r*/\r\r// SPDX-License-Identifier: MIT\r\r// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\r\r\rpragma solidity ^0.8.0;\r\r/**\r * @dev Interface of the ERC20 standard as defined in the EIP.\r */\rinterface IERC20 {\r    /**\r     * @dev Returns the amount of tokens in existence.\r     */\r    function totalSupply() external view returns (uint256);\r\r    /**\r     * @dev Returns the amount of tokens owned by `account`.\r     */\r    function balanceOf(address account) external view returns (uint256);\r\r    /**\r     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r     *\r     * Returns a boolean value indicating whether the operation succeeded.\r     *\r     * Emits a {Transfer} event.\r     */\r    function transfer(address recipient, uint256 amount) external returns (bool);\r\r    /**\r     * @dev Returns the remaining number of tokens that `spender` will be\r     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r     * zero by default.\r     *\r     * This value changes when {approve} or {transferFrom} are called.\r     */\r    function allowance(address owner, address spender) external view returns (uint256);\r\r    /**\r     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r     *\r     * Returns a boolean value indicating whether the operation succeeded.\r     *\r     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r     * that someone may use both the old and the new allowance by unfortunate\r     * transaction ordering. One possible solution to mitigate this race\r     * condition is to first reduce the spender's allowance to 0 and set the\r     * desired value afterwards:\r     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r     *\r     * Emits an {Approval} event.\r     */\r    function approve(address spender, uint256 amount) external returns (bool);\r\r    /**\r     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r     * allowance mechanism. `amount` is then deducted from the caller's\r     * allowance.\r     *\r     * Returns a boolean value indicating whether the operation succeeded.\r     *\r     * Emits a {Transfer} event.\r     */\r    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\r    /**\r     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r     * another (`to`).\r     *\r     * Note that `value` may be zero.\r     */\r    event Transfer(address indexed from, address indexed to, uint256 value);\r\r    /**\r     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r     * a call to {approve}. `value` is the new allowance.\r     */\r    event Approval(address indexed owner, address indexed spender, uint256 value);\r}\r\r// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\r\r\rpragma solidity ^0.8.0;\r\r\r/**\r * @dev Interface for the optional metadata functions from the ERC20 standard.\r *\r * _Available since v4.1._\r */\rinterface IERC20Metadata is IERC20 {\r    /**\r     * @dev Returns the name of the token.\r     */\r    function name() external view returns (string memory);\r\r    /**\r     * @dev Returns the symbol of the token.\r     */\r    function symbol() external view returns (string memory);\r\r    /**\r     * @dev Returns the decimals places of the token.\r     */\r    function decimals() external view returns (uint8);\r}\r\r// File: @openzeppelin/contracts/utils/Context.sol\r\r\r\rpragma solidity ^0.8.0;\r\r/*\r * @dev Provides information about the current execution context, including the\r * sender of the transaction and its data. While these are generally available\r * via msg.sender and msg.data, they should not be accessed in such a direct\r * manner, since when dealing with meta-transactions the account sending and\r * paying for execution may not be the actual sender (as far as an application\r * is concerned).\r *\r * This contract is only required for intermediate, library-like contracts.\r */\rabstract contract Context {\r    function _msgSender() internal view virtual returns (address) {\r        return msg.sender;\r    }\r\r    function _msgData() internal view virtual returns (bytes calldata) {\r        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r        return msg.data;\r    }\r}\r\r// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\r\r\rpragma solidity ^0.8.0;\r\r\r\r\r/**\r * @dev Implementation of the {IERC20} interface.\r *\r * This implementation is agnostic to the way tokens are created. This means\r * that a supply mechanism has to be added in a derived contract using {_mint}.\r * For a generic mechanism see {ERC20PresetMinterPauser}.\r *\r * TIP: For a detailed writeup see our guide\r * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r * to implement supply mechanisms].\r *\r * We have followed general OpenZeppelin guidelines: functions revert instead\r * of returning `false` on failure. This behavior is nonetheless conventional\r * and does not conflict with the expectations of ERC20 applications.\r *\r * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r * This allows applications to reconstruct the allowance for all accounts just\r * by listening to said events. Other implementations of the EIP may not emit\r * these events, as it isn't required by the specification.\r *\r * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r * functions have been added to mitigate the well-known issues around setting\r * allowances. See {IERC20-approve}.\r */\rcontract ERC20 is Context, IERC20, IERC20Metadata {\r    mapping (address => uint256) private _balances;\r\r    mapping (address => mapping (address => uint256)) private _allowances;\r\r    uint256 private _totalSupply;\r\r    string private _name;\r    string private _symbol;\r\r    /**\r     * @dev Sets the values for {name} and {symbol}.\r     *\r     * The defaut value of {decimals} is 18. To select a different value for\r     * {decimals} you should overload it.\r     *\r     * All two of these values are immutable: they can only be set once during\r     * construction.\r     */\r    constructor (string memory name_, string memory symbol_) {\r        _name = name_;\r        _symbol = symbol_;\r    }\r\r    /**\r     * @dev Returns the name of the token.\r     */\r    function name() public view virtual override returns (string memory) {\r        return _name;\r    }\r\r    /**\r     * @dev Returns the symbol of the token, usually a shorter version of the\r     * name.\r     */\r    function symbol() public view virtual override returns (string memory) {\r        return _symbol;\r    }\r\r    /**\r     * @dev Returns the number of decimals used to get its user representation.\r     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r     *\r     * Tokens usually opt for a value of 18, imitating the relationship between\r     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r     * overridden;\r     *\r     * NOTE: This information is only used for _display_ purposes: it in\r     * no way affects any of the arithmetic of the contract, including\r     * {IERC20-balanceOf} and {IERC20-transfer}.\r     */\r    function decimals() public view virtual override returns (uint8) {\r        return 18;\r    }\r\r    /**\r     * @dev See {IERC20-totalSupply}.\r     */\r    function totalSupply() public view virtual override returns (uint256) {\r        return _totalSupply;\r    }\r\r    /**\r     * @dev See {IERC20-balanceOf}.\r     */\r    function balanceOf(address account) public view virtual override returns (uint256) {\r        return _balances[account];\r    }\r\r    /**\r     * @dev See {IERC20-transfer}.\r     *\r     * Requirements:\r     *\r     * - `recipient` cannot be the zero address.\r     * - the caller must have a balance of at least `amount`.\r     */\r    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r        _transfer(_msgSender(), recipient, amount);\r        return true;\r    }\r\r    /**\r     * @dev See {IERC20-allowance}.\r     */\r    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r        return _allowances[owner][spender];\r    }\r\r    /**\r     * @dev See {IERC20-approve}.\r     *\r     * Requirements:\r     *\r     * - `spender` cannot be the zero address.\r     */\r    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r        _approve(_msgSender(), spender, amount);\r        return true;\r    }\r\r    /**\r     * @dev See {IERC20-transferFrom}.\r     *\r     * Emits an {Approval} event indicating the updated allowance. This is not\r     * required by the EIP. See the note at the beginning of {ERC20}.\r     *\r     * Requirements:\r     *\r     * - `sender` and `recipient` cannot be the zero address.\r     * - `sender` must have a balance of at least `amount`.\r     * - the caller must have allowance for ``sender``'s tokens of at least\r     * `amount`.\r     */\r    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r        _transfer(sender, recipient, amount);\r\r        uint256 currentAllowance = _allowances[sender][_msgSender()];\r        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r        _approve(sender, _msgSender(), currentAllowance - amount);\r\r        return true;\r    }\r\r    /**\r     * @dev Atomically increases the allowance granted to `spender` by the caller.\r     *\r     * This is an alternative to {approve} that can be used as a mitigation for\r     * problems described in {IERC20-approve}.\r     *\r     * Emits an {Approval} event indicating the updated allowance.\r     *\r     * Requirements:\r     *\r     * - `spender` cannot be the zero address.\r     */\r    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r        return true;\r    }\r\r    /**\r     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r     *\r     * This is an alternative to {approve} that can be used as a mitigation for\r     * problems described in {IERC20-approve}.\r     *\r     * Emits an {Approval} event indicating the updated allowance.\r     *\r     * Requirements:\r     *\r     * - `spender` cannot be the zero address.\r     * - `spender` must have allowance for the caller of at least\r     * `subtractedValue`.\r     */\r    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r        uint256 currentAllowance = _allowances[_msgSender()][spender];\r        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\r        return true;\r    }\r\r    /**\r     * @dev Moves tokens `amount` from `sender` to `recipient`.\r     *\r     * This is internal function is equivalent to {transfer}, and can be used to\r     * e.g. implement automatic token fees, slashing mechanisms, etc.\r     *\r     * Emits a {Transfer} event.\r     *\r     * Requirements:\r     *\r     * - `sender` cannot be the zero address.\r     * - `recipient` cannot be the zero address.\r     * - `sender` must have a balance of at least `amount`.\r     */\r    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r        require(sender != address(0), \"ERC20: transfer from the zero address\");\r        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\r        _beforeTokenTransfer(sender, recipient, amount);\r\r        uint256 senderBalance = _balances[sender];\r        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r        _balances[sender] = senderBalance - amount;\r        _balances[recipient] += amount;\r\r        emit Transfer(sender, recipient, amount);\r    }\r\r    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r     * the total supply.\r     *\r     * Emits a {Transfer} event with `from` set to the zero address.\r     *\r     * Requirements:\r     *\r     * - `to` cannot be the zero address.\r     */\r    function _mint(address account, uint256 amount) internal virtual {\r        require(account != address(0), \"ERC20: mint to the zero address\");\r\r        _beforeTokenTransfer(address(0), account, amount);\r\r        _totalSupply += amount;\r        _balances[account] += amount;\r        emit Transfer(address(0), account, amount);\r    }\r\r    /**\r     * @dev Destroys `amount` tokens from `account`, reducing the\r     * total supply.\r     *\r     * Emits a {Transfer} event with `to` set to the zero address.\r     *\r     * Requirements:\r     *\r     * - `account` cannot be the zero address.\r     * - `account` must have at least `amount` tokens.\r     */\r    function _burn(address account, uint256 amount) internal virtual {\r        require(account != address(0), \"ERC20: burn from the zero address\");\r\r        _beforeTokenTransfer(account, address(0), amount);\r\r        uint256 accountBalance = _balances[account];\r        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r        _balances[account] = accountBalance - amount;\r        _totalSupply -= amount;\r\r        emit Transfer(account, address(0), amount);\r    }\r\r    /**\r     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r     *\r     * This internal function is equivalent to `approve`, and can be used to\r     * e.g. set automatic allowances for certain subsystems, etc.\r     *\r     * Emits an {Approval} event.\r     *\r     * Requirements:\r     *\r     * - `owner` cannot be the zero address.\r     * - `spender` cannot be the zero address.\r     */\r    function _approve(address owner, address spender, uint256 amount) internal virtual {\r        require(owner != address(0), \"ERC20: approve from the zero address\");\r        require(spender != address(0), \"ERC20: approve to the zero address\");\r\r        _allowances[owner][spender] = amount;\r        emit Approval(owner, spender, amount);\r    }\r\r    /**\r     * @dev Hook that is called before any transfer of tokens. This includes\r     * minting and burning.\r     *\r     * Calling conditions:\r     *\r     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r     * will be to transferred to `to`.\r     * - when `from` is zero, `amount` tokens will be minted for `to`.\r     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r     * - `from` and `to` are never both zero.\r     *\r     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r     */\r    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r}\r\r// File: contracts/token/ERC20/behaviours/ERC20Decimals.sol\r\r\r\rpragma solidity ^0.8.0;\r\r\r/**\r * @title ERC20Decimals\r * @dev Implementation of the ERC20Decimals. Extension of {ERC20} that adds decimals storage slot.\r */\rcontract StarLink is ERC20 {\r    uint8 immutable private _decimals = 18;\r    uint256 private _totalSupply = 10000000000000 * 10 ** 18;\r\r    /**\r     * @dev Sets the value of the `decimals`. This value is immutable, it can only be\r     * set once during construction.\r     */\r    constructor () ERC20('StarLink', 'STARL') {\r        _mint(_msgSender(), _totalSupply);\r    }\r\r    function decimals() public view virtual override returns (uint8) {\r        return _decimals;\r    }\r}\r"
    }
  }
}