{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"sushiarb.sol":{"content":"// Dependency file: @openzeppelin/contracts/utils/Address.sol\n\n\n\n// pragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [// importANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * // importANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\n\n\n\n// pragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// Dependency file: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n\n\n\n// pragma solidity ^0.6.0;\n\n// import \"./IERC20.sol\";\n// import \"../../math/SafeMath.sol\";\n// import \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\n\n\n\n// pragma solidity ^0.6.0;\n\n// import \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// Dependency file: contracts/interfaces/external/IUniswapV2Router01.sol\n\n// pragma solidity 0.6.10;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n// Dependency file: contracts/interfaces/external/IUniswapV2Pair.sol\n\n// pragma solidity 0.6.10;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n// Dependency file: @openzeppelin/contracts/math/SignedSafeMath.sol\n\n\n\n// pragma solidity ^0.6.0;\n\n/**\n * @title SignedSafeMath\n * @dev Signed math operations with safety checks that revert on error.\n */\nlibrary SignedSafeMath {\n    int256 constant private _INT256_MIN = -2**255;\n\n        /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\n\n        return c;\n    }\n}\n\n// Dependency file: contracts/issuance-arb-bot/Withdrawable.sol\n\n// pragma solidity 0.6.10;\n\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n// import { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\n/**\n    Ensures that any contract that inherits from this contract is able to\n    withdraw funds that are accidentally received or stuck.\n */\n \ncontract Withdrawable is Ownable {\n    using SafeERC20 for IERC20;\n    address constant ETHER = address(0);\n\n    event LogWithdraw(\n        address indexed _from,\n        address indexed _assetAddress,\n        uint amount\n    );\n\n    /**\n     * @dev Withdraw asset.\n     * @param _assetAddress Asset to be withdrawn.\n     */\n    function withdraw(address _assetAddress) public onlyOwner {\n        uint assetBalance;\n        if (_assetAddress == ETHER) {\n            address self = address(this); // workaround for a possible solidity bug\n            assetBalance = self.balance;\n            msg.sender.transfer(assetBalance);\n        } else {\n            assetBalance = IERC20(_assetAddress).balanceOf(address(this));\n            IERC20(_assetAddress).safeTransfer(msg.sender, assetBalance);\n        }\n        emit LogWithdraw(msg.sender, _assetAddress, assetBalance);\n    }\n}\n\n// Dependency file: contracts/interfaces/external/ICallee.sol\n\n// pragma solidity 0.6.10;\n// \n\n// import { Account } from \"./ISoloMargin.sol\";\n\n\n/**\n * @title ICallee\n * @author dYdX\n *\n * Interface that Callees for Solo must implement in order to ingest data.\n */\nabstract contract ICallee {\n\n    // ============ Public Functions ============\n\n    /**\n     * Allows users to send this contract arbitrary data.\n     *\n     * @param  sender       The msg.sender to Solo\n     * @param  accountInfo  The account from which the data is being sent\n     * @param  data         Arbitrary data given by the sender\n     */\n    function callFunction(\n        address sender,\n        Account.Info memory accountInfo,\n        bytes memory data\n    )\n        public\n        virtual;\n}\n// Dependency file: contracts/interfaces/external/ISoloMargin.sol\n\n// pragma solidity 0.6.10;\n// \n\n\nlibrary Account {\n    enum Status {Normal, Liquid, Vapor}\n    struct Info {\n        address owner; // The address that owns the account\n        uint256 number; // A nonce that allows a single address to control many accounts\n    }\n    struct Storage {\n        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\n        Status status;\n    }\n}\n\n\nlibrary Actions {\n    enum ActionType {\n        Deposit, // supply tokens\n        Withdraw, // borrow tokens\n        Transfer, // transfer balance between accounts\n        Buy, // buy an amount of some token (publicly)\n        Sell, // sell an amount of some token (publicly)\n        Trade, // trade tokens against another account\n        Liquidate, // liquidate an undercollateralized or expiring account\n        Vaporize, // use excess tokens to zero-out a completely negative account\n        Call // send arbitrary data to an address\n    }\n\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\n\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\n\n    struct ActionArgs {\n        ActionType actionType;\n        uint256 accountId;\n        Types.AssetAmount amount;\n        uint256 primaryMarketId;\n        uint256 secondaryMarketId;\n        address otherAddress;\n        uint256 otherAccountId;\n        bytes data;\n    }\n\n    struct DepositArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 market;\n        address from;\n    }\n\n    struct WithdrawArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 market;\n        address to;\n    }\n\n    struct TransferArgs {\n        Types.AssetAmount amount;\n        Account.Info accountOne;\n        Account.Info accountTwo;\n        uint256 market;\n    }\n\n    struct BuyArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 makerMarket;\n        uint256 takerMarket;\n        address exchangeWrapper;\n        bytes orderData;\n    }\n\n    struct SellArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 takerMarket;\n        uint256 makerMarket;\n        address exchangeWrapper;\n        bytes orderData;\n    }\n\n    struct TradeArgs {\n        Types.AssetAmount amount;\n        Account.Info takerAccount;\n        Account.Info makerAccount;\n        uint256 inputMarket;\n        uint256 outputMarket;\n        address autoTrader;\n        bytes tradeData;\n    }\n\n    struct LiquidateArgs {\n        Types.AssetAmount amount;\n        Account.Info solidAccount;\n        Account.Info liquidAccount;\n        uint256 owedMarket;\n        uint256 heldMarket;\n    }\n\n    struct VaporizeArgs {\n        Types.AssetAmount amount;\n        Account.Info solidAccount;\n        Account.Info vaporAccount;\n        uint256 owedMarket;\n        uint256 heldMarket;\n    }\n\n    struct CallArgs {\n        Account.Info account;\n        address callee;\n        bytes data;\n    }\n}\n\n\nlibrary Decimal {\n    struct D256 {\n        uint256 value;\n    }\n}\n\n\nlibrary Interest {\n    struct Rate {\n        uint256 value;\n    }\n\n    struct Index {\n        uint96 borrow;\n        uint96 supply;\n        uint32 lastUpdate;\n    }\n}\n\n\nlibrary Monetary {\n    struct Price {\n        uint256 value;\n    }\n    struct Value {\n        uint256 value;\n    }\n}\n\n\nlibrary Storage {\n    // All information necessary for tracking a market\n    struct Market {\n        // Contract address of the associated ERC20 token\n        address token;\n        // Total aggregated supply and borrow amount of the entire market\n        Types.TotalPar totalPar;\n        // Interest index of the market\n        Interest.Index index;\n        // Contract address of the price oracle for this market\n        address priceOracle;\n        // Contract address of the interest setter for this market\n        address interestSetter;\n        // Multiplier on the marginRatio for this market\n        Decimal.D256 marginPremium;\n        // Multiplier on the liquidationSpread for this market\n        Decimal.D256 spreadPremium;\n        // Whether additional borrows are allowed for this market\n        bool isClosing;\n    }\n\n    // The global risk parameters that govern the health and security of the system\n    struct RiskParams {\n        // Required ratio of over-collateralization\n        Decimal.D256 marginRatio;\n        // Percentage penalty incurred by liquidated accounts\n        Decimal.D256 liquidationSpread;\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\n        Decimal.D256 earningsRate;\n        // The minimum absolute borrow value of an account\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\n        Monetary.Value minBorrowedValue;\n    }\n\n    // The maximum RiskParam values that can be set\n    struct RiskLimits {\n        uint64 marginRatioMax;\n        uint64 liquidationSpreadMax;\n        uint64 earningsRateMax;\n        uint64 marginPremiumMax;\n        uint64 spreadPremiumMax;\n        uint128 minBorrowedValueMax;\n    }\n\n    // The entire storage state of Solo\n    struct State {\n        // number of markets\n        uint256 numMarkets;\n        // marketId => Market\n        mapping(uint256 => Market) markets;\n        // owner => account number => Account\n        mapping(address => mapping(uint256 => Account.Storage)) accounts;\n        // Addresses that can control other users accounts\n        mapping(address => mapping(address => bool)) operators;\n        // Addresses that can control all users accounts\n        mapping(address => bool) globalOperators;\n        // mutable risk parameters of the system\n        RiskParams riskParams;\n        // immutable risk limits of the system\n        RiskLimits riskLimits;\n    }\n}\n\n\nlibrary Types {\n    enum AssetDenomination {\n        Wei, // the amount is denominated in wei\n        Par // the amount is denominated in par\n    }\n\n    enum AssetReference {\n        Delta, // the amount is given as a delta from the current value\n        Target // the amount is given as an exact number to end up at\n    }\n\n    struct AssetAmount {\n        bool sign; // true if positive\n        AssetDenomination denomination;\n        AssetReference ref;\n        uint256 value;\n    }\n\n    struct TotalPar {\n        uint128 borrow;\n        uint128 supply;\n    }\n\n    struct Par {\n        bool sign; // true if positive\n        uint128 value;\n    }\n\n    struct Wei {\n        bool sign; // true if positive\n        uint256 value;\n    }\n}\n\n\nabstract contract ISoloMargin {\n    struct OperatorArg {\n        address operator;\n        bool trusted;\n    }\n\n    function ownerSetSpreadPremium(\n        uint256 marketId,\n        Decimal.D256 memory spreadPremium\n    ) public virtual;\n\n    function getIsGlobalOperator(address operator) public virtual view returns (bool);\n\n    function getMarketTokenAddress(uint256 marketId)\n        public virtual\n        view\n        returns (address);\n\n    function ownerSetInterestSetter(uint256 marketId, address interestSetter)\n        public virtual;\n\n    function getAccountValues(Account.Info memory account)\n        public virtual\n        view\n        returns (Monetary.Value memory, Monetary.Value memory);\n\n    function getMarketPriceOracle(uint256 marketId)\n        public virtual\n        view\n        returns (address);\n\n    function getMarketInterestSetter(uint256 marketId)\n        public virtual\n        view\n        returns (address);\n\n    function getMarketSpreadPremium(uint256 marketId)\n        public virtual\n        view\n        returns (Decimal.D256 memory);\n\n    function getNumMarkets() public virtual view returns (uint256);\n\n    function ownerWithdrawUnsupportedTokens(address token, address recipient)\n        public virtual\n        returns (uint256);\n\n    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue)\n        public virtual;\n\n    function ownerSetLiquidationSpread(Decimal.D256 memory spread) public virtual;\n\n    function ownerSetEarningsRate(Decimal.D256 memory earningsRate) public virtual;\n\n    function getIsLocalOperator(address owner, address operator)\n        public virtual\n        view\n        returns (bool);\n\n    function getAccountPar(Account.Info memory account, uint256 marketId)\n        public virtual\n        view\n        returns (Types.Par memory);\n\n    function ownerSetMarginPremium(\n        uint256 marketId,\n        Decimal.D256 memory marginPremium\n    ) public virtual;\n\n    function getMarginRatio() public virtual view returns (Decimal.D256 memory);\n\n    function getMarketCurrentIndex(uint256 marketId)\n        public virtual\n        view\n        returns (Interest.Index memory);\n\n    function getMarketIsClosing(uint256 marketId) public virtual view returns (bool);\n\n    function getRiskParams() public virtual view returns (Storage.RiskParams memory);\n\n    function getAccountBalances(Account.Info memory account)\n        public virtual\n        view\n        returns (address[] memory, Types.Par[] memory, Types.Wei[] memory);\n\n    function renounceOwnership() public virtual;\n\n    function getMinBorrowedValue() public virtual view returns (Monetary.Value memory);\n\n    function setOperators(OperatorArg[] memory args) public virtual;\n\n    function getMarketPrice(uint256 marketId) public virtual view returns (address);\n\n    function owner() public virtual view returns (address);\n\n    function isOwner() public virtual view returns (bool);\n\n    function ownerWithdrawExcessTokens(uint256 marketId, address recipient)\n        public virtual\n        returns (uint256);\n\n    function ownerAddMarket(\n        address token,\n        address priceOracle,\n        address interestSetter,\n        Decimal.D256 memory marginPremium,\n        Decimal.D256 memory spreadPremium\n    ) public virtual;\n\n    function operate(\n        Account.Info[] memory accounts,\n        Actions.ActionArgs[] memory actions\n    ) public virtual;\n\n    function getMarketWithInfo(uint256 marketId)\n        public virtual\n        view\n        returns (\n            Storage.Market memory,\n            Interest.Index memory,\n            Monetary.Price memory,\n            Interest.Rate memory\n        );\n\n    function ownerSetMarginRatio(Decimal.D256 memory ratio) public virtual;\n\n    function getLiquidationSpread() public virtual view returns (Decimal.D256 memory);\n\n    function getAccountWei(Account.Info memory account, uint256 marketId)\n        public virtual\n        view\n        returns (Types.Wei memory);\n\n    function getMarketTotalPar(uint256 marketId)\n        public virtual\n        view\n        returns (Types.TotalPar memory);\n\n    function getLiquidationSpreadForPair(\n        uint256 heldMarketId,\n        uint256 owedMarketId\n    ) public virtual view returns (Decimal.D256 memory);\n\n    function getNumExcessTokens(uint256 marketId)\n        public virtual\n        view\n        returns (Types.Wei memory);\n\n    function getMarketCachedIndex(uint256 marketId)\n        public virtual\n        view\n        returns (Interest.Index memory);\n\n    function getAccountStatus(Account.Info memory account)\n        public virtual\n        view\n        returns (uint8);\n\n    function getEarningsRate() public virtual view returns (Decimal.D256 memory);\n\n    function ownerSetPriceOracle(uint256 marketId, address priceOracle) public virtual;\n\n    function getRiskLimits() public virtual view returns (Storage.RiskLimits memory);\n\n    function getMarket(uint256 marketId)\n        public virtual\n        view\n        returns (Storage.Market memory);\n\n    function ownerSetIsClosing(uint256 marketId, bool isClosing) public virtual;\n\n    function ownerSetGlobalOperator(address operator, bool approved) public virtual;\n\n    function transferOwnership(address newOwner) public virtual;\n\n    function getAdjustedAccountValues(Account.Info memory account)\n        public virtual\n        view\n        returns (Monetary.Value memory, Monetary.Value memory);\n\n    function getMarketMarginPremium(uint256 marketId)\n        public virtual\n        view\n        returns (Decimal.D256 memory);\n\n    function getMarketInterestRate(uint256 marketId)\n        public virtual\n        view\n        returns (Interest.Rate memory);\n}\n\n// Dependency file: contracts/interfaces/external/DydxFlashloanBase.sol\n\n// pragma solidity 0.6.10;\n// \n\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// import \"./ISoloMargin.sol\";\n\n\ncontract DydxFlashloanBase {\n    using SafeMath for uint256;\n\n    // -- Internal Helper functions -- //\n\n    function _getMarketIdFromTokenAddress(address _solo, address token)\n        internal\n        view\n        returns (uint256)\n    {\n        ISoloMargin solo = ISoloMargin(_solo);\n\n        uint256 numMarkets = solo.getNumMarkets();\n\n        address curToken;\n        for (uint256 i = 0; i < numMarkets; i++) {\n            curToken = solo.getMarketTokenAddress(i);\n\n            if (curToken == token) {\n                return i;\n            }\n        }\n\n        revert(\"No marketId found for provided token\");\n    }\n\n    function _getRepaymentAmountInternal(uint256 amount)\n        internal\n        view\n        returns (uint256)\n    {\n        // Needs to be overcollateralize\n        // Needs to provide +2 wei to be safe\n        return amount.add(2);\n    }\n\n    function _getAccountInfo() internal view returns (Account.Info memory) {\n        return Account.Info({owner: address(this), number: 1});\n    }\n\n    function _getWithdrawAction(uint marketId, uint256 amount)\n        internal\n        view\n        returns (Actions.ActionArgs memory)\n    {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Withdraw,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: false,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: amount\n                }),\n                primaryMarketId: marketId,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: \"\"\n            });\n    }\n\n    function _getCallAction(bytes memory data)\n        internal\n        view\n        returns (Actions.ActionArgs memory)\n    {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Call,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: false,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: 0\n                }),\n                primaryMarketId: 0,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: data\n            });\n    }\n\n    function _getDepositAction(uint marketId, uint256 amount)\n        internal\n        view\n        returns (Actions.ActionArgs memory)\n    {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Deposit,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: true,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: amount\n                }),\n                primaryMarketId: marketId,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: \"\"\n            });\n    }\n}\n\n// Dependency file: contracts/interfaces/external/IUniswapV2Router02.sol\n\n/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n*/\n\n// pragma solidity 0.6.10;\n\n// import \"./IUniswapV2Router01.sol\";\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n// Dependency file: contracts/issuance-arb-bot/lib/UniswapV2Library.sol\n\n// pragma solidity 0.6.10;\n\n// import { IUniswapV2Pair } from \"../../interfaces/external/IUniswapV2Pair.sol\";\n\n// import { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nlibrary UniswapV2Library {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n            ))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n// Dependency file: contracts/lib/PreciseUnitMath.sol\n\n/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n*/\n\n// pragma solidity 0.6.10;\n// \n\n// import { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\n// import { SignedSafeMath } from \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n\n/**\n * @title PreciseUnitMath\n * @author Set Protocol\n *\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\n * dYdX's BaseMath library.\n */\nlibrary PreciseUnitMath {\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n\n    // The number One in precise units.\n    uint256 constant internal PRECISE_UNIT = 10 ** 18;\n    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\n\n    // Max unsigned integer value\n    uint256 constant internal MAX_UINT_256 = type(uint256).max;\n    // Max and min signed integer value\n    int256 constant internal MAX_INT_256 = type(int256).max;\n    int256 constant internal MIN_INT_256 = type(int256).min;\n\n    /**\n     * @dev Getter function since constants can't be read directly from libraries.\n     */\n    function preciseUnit() internal pure returns (uint256) {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @dev Getter function since constants can't be read directly from libraries.\n     */\n    function preciseUnitInt() internal pure returns (int256) {\n        return PRECISE_UNIT_INT;\n    }\n\n    /**\n     * @dev Getter function since constants can't be read directly from libraries.\n     */\n    function maxUint256() internal pure returns (uint256) {\n        return MAX_UINT_256;\n    }\n\n    /**\n     * @dev Getter function since constants can't be read directly from libraries.\n     */\n    function maxInt256() internal pure returns (int256) {\n        return MAX_INT_256;\n    }\n\n    /**\n     * @dev Getter function since constants can't be read directly from libraries.\n     */\n    function minInt256() internal pure returns (int256) {\n        return MIN_INT_256;\n    }\n\n    /**\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\n     * of a number with 18 decimals precision.\n     */\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a.mul(b).div(PRECISE_UNIT);\n    }\n\n    /**\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\n     * significand of a number with 18 decimals precision.\n     */\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\n        return a.mul(b).div(PRECISE_UNIT_INT);\n    }\n\n    /**\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\n     * of a number with 18 decimals precision.\n     */\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\n    }\n\n    /**\n     * @dev Divides value a by value b (result is rounded down).\n     */\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a.mul(PRECISE_UNIT).div(b);\n    }\n\n\n    /**\n     * @dev Divides value a by value b (result is rounded towards 0).\n     */\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\n        return a.mul(PRECISE_UNIT_INT).div(b);\n    }\n\n    /**\n     * @dev Divides value a by value b (result is rounded up or away from 0).\n     */\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"Cant divide by 0\");\n\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\n    }\n\n    /**\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\n     */\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"Cant divide by 0\");\n        require(a != MIN_INT_256 || b != -1, \"Invalid input\");\n\n        int256 result = a.div(b);\n        if (a ^ b < 0 && a % b != 0) {\n            result = result.sub(1);\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Multiplies value a by value b where rounding is towards the lesser number. \n     * (positive values are rounded towards zero and negative values are rounded away from 0). \n     */\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\n    }\n\n    /**\n     * @dev Divides value a by value b where rounding is towards the lesser number. \n     * (positive values are rounded towards zero and negative values are rounded away from 0). \n     */\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\n    }\n}\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n\n// pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * // importANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// Dependency file: contracts/interfaces/ISetToken.sol\n\n/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n*/\n// pragma solidity 0.6.10;\npragma experimental \"ABIEncoderV2\";\n\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title ISetToken\n * @author Set Protocol\n *\n * Interface for operating with SetTokens.\n */\ninterface ISetToken is IERC20 {\n\n    /* ============ Enums ============ */\n\n    enum ModuleState {\n        NONE,\n        PENDING,\n        INITIALIZED\n    }\n\n    /* ============ Structs ============ */\n    /**\n     * The base definition of a SetToken Position\n     *\n     * @param component           Address of token in the Position\n     * @param module              If not in default state, the address of associated module\n     * @param unit                Each unit is the # of components per 10^18 of a SetToken\n     * @param positionState       Position ENUM. Default is 0; External is 1\n     * @param data                Arbitrary data\n     */\n    struct Position {\n        address component;\n        address module;\n        int256 unit;\n        uint8 positionState;\n        bytes data;\n    }\n\n    /**\n     * A struct that stores a component's cash position details and external positions\n     * This data structure allows O(1) access to a component's cash position units and \n     * virtual units.\n     *\n     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\n     *                                  updating all units at once via the position multiplier. Virtual units are achieved\n     *                                  by dividing a \"real\" value by the \"positionMultiplier\"\n     * @param componentIndex            \n     * @param externalPositionModules   List of external modules attached to each external position. Each module\n     *                                  maps to an external position\n     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\n     */\n    struct ComponentPosition {\n      int256 virtualUnit;\n      address[] externalPositionModules;\n      mapping(address => ExternalPosition) externalPositions;\n    }\n\n    /**\n     * A struct that stores a component's external position details including virtual unit and any\n     * auxiliary data.\n     *\n     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\n     * @param data              Arbitrary data\n     */\n    struct ExternalPosition {\n      int256 virtualUnit;\n      bytes data;\n    }\n\n\n    /* ============ Functions ============ */\n    \n    function addComponent(address _component) external;\n    function removeComponent(address _component) external;\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\n    function addExternalPositionModule(address _component, address _positionModule) external;\n    function removeExternalPositionModule(address _component, address _positionModule) external;\n    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\n    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\n\n    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\n\n    function editPositionMultiplier(int256 _newMultiplier) external;\n\n    function mint(address _account, uint256 _quantity) external;\n    function burn(address _account, uint256 _quantity) external;\n\n    function lock() external;\n    function unlock() external;\n\n    function addModule(address _module) external;\n    function removeModule(address _module) external;\n    function initializeModule() external;\n\n    function setManager(address _manager) external;\n\n    function manager() external view returns (address);\n    function moduleStates(address _module) external view returns (ModuleState);\n    function getModules() external view returns (address[] memory);\n    \n    function getDefaultPositionRealUnit(address _component) external view returns(int256);\n    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\n    function getComponents() external view returns(address[] memory);\n    function getExternalPositionModules(address _component) external view returns(address[] memory);\n    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\n    function isExternalPositionModule(address _component, address _module) external view returns(bool);\n    function isComponent(address _component) external view returns(bool);\n    \n    function positionMultiplier() external view returns (int256);\n    function getPositions() external view returns (Position[] memory);\n    function getTotalComponentRealUnits(address _component) external view returns(int256);\n\n    function isInitializedModule(address _module) external view returns(bool);\n    function isPendingModule(address _module) external view returns(bool);\n    function isLocked() external view returns (bool);\n}\n// Dependency file: contracts/interfaces/IDebtIssuanceModule.sol\n\n/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n*/\n// pragma solidity 0.6.10;\n\n// import { ISetToken } from \"./ISetToken.sol\";\n\ninterface IDebtIssuanceModule {\n    function getRequiredComponentIssuanceUnits(\n        ISetToken _setToken,\n        uint256 _quantity\n    ) external view returns(address[] memory, uint256[] memory, uint256[] memory);\n\n    function getRequiredComponentRedemptionUnits(\n        ISetToken _setToken,\n        uint256 _quantity\n    ) external view returns(address[] memory, uint256[] memory, uint256[] memory);\n\n    function issue(ISetToken _setToken, uint256 _quantity, address _to) external;\n\n    function redeem(ISetToken _setToken, uint256 _quantity, address _to) external;\n}\n// Dependency file: contracts/interfaces/external/IWETH.sol\n\n/*\n    Copyright 2018 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n// pragma solidity 0.6.10;\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title IWETH\n * @author Set Protocol\n *\n * Interface for Wrapped Ether. This interface allows for interaction for wrapped ether's deposit and withdrawal\n * functionality.\n */\ninterface IWETH is IERC20 {\n    function deposit()\n        external\n        payable;\n\n    function withdraw(\n        uint256 wad\n    )\n        external;\n}\n// Dependency file: contracts/interfaces/ICompoundLeverageModule.sol\n\n// pragma solidity 0.6.10;\n// pragma experimental \"ABIEncoderV2\";\n\n// import { ISetToken } from \"./ISetToken.sol\";\n\ninterface ICompoundLeverageModule {\n    function sync(\n        ISetToken _setToken,\n        bool _shouldAccrueInterest\n    ) external;\n\n    function lever(\n        ISetToken _setToken,\n        address _borrowAsset,\n        address _collateralAsset,\n        uint256 _borrowQuantity,\n        uint256 _minReceiveQuantity,\n        string memory _tradeAdapterName,\n        bytes memory _tradeData\n    ) external;\n\n    function delever(\n        ISetToken _setToken,\n        address _collateralAsset,\n        address _repayAsset,\n        uint256 _redeemQuantity,\n        uint256 _minRepayQuantity,\n        string memory _tradeAdapterName,\n        bytes memory _tradeData\n    ) external;\n\n    function gulp(\n        ISetToken _setToken,\n        address _collateralAsset,\n        uint256 _minNotionalReceiveQuantity,\n        string memory _tradeAdapterName,\n        bytes memory _tradeData\n    ) external;\n}\n// Dependency file: contracts/interfaces/external/ICErc20.sol\n\n/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n// pragma solidity 0.6.10;\n\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\n/**\n * @title ICErc20\n * @author Set Protocol\n *\n * Interface for interacting with Compound cErc20 tokens (e.g. Dai, USDC)\n */\ninterface ICErc20 is IERC20 {\n\n    function borrowBalanceCurrent(address _account) external returns (uint256);\n\n    function borrowBalanceStored(address _account) external view returns (uint256);\n\n    /**\n     * Calculates the exchange rate from the underlying to the CToken\n     *\n     * @notice Accrue interest then return the up-to-date exchange rate\n     * @return Calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateCurrent() external returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    function underlying() external view returns (address);\n\n    /**\n     * Sender supplies assets into the market and receives cTokens in exchange\n     *\n     * @notice Accrues interest whether or not the operation succeeds, unless reverted\n     * @param _mintAmount The amount of the underlying asset to supply\n     * @return uint256 0=success, otherwise a failure\n     */\n    function mint(uint256 _mintAmount) external returns (uint256);\n\n    /**\n     * @notice Sender redeems cTokens in exchange for the underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param _redeemTokens The number of cTokens to redeem into underlying\n     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeem(uint256 _redeemTokens) external returns (uint256);\n\n    /**\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param _redeemAmount The amount of underlying to redeem\n     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeemUnderlying(uint256 _redeemAmount) external returns (uint256);\n\n    /**\n      * @notice Sender borrows assets from the protocol to their own address\n      * @param _borrowAmount The amount of the underlying asset to borrow\n      * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function borrow(uint256 _borrowAmount) external returns (uint256);\n\n    /**\n     * @notice Sender repays their own borrow\n     * @param _repayAmount The amount to repay\n     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function repayBorrow(uint256 _repayAmount) external returns (uint256);\n\n    function isCToken() external view returns (bool);\n}\n// Dependency file: contracts/interfaces/external/ICEth.sol\n\n/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n// pragma solidity 0.6.10;\n\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\n/**\n * @title ICEth\n * @author Set Protocol\n *\n * Interface for interacting with Compound Ether\n */\ninterface ICEth is IERC20 {\n\n    /**\n     * Calculates the exchange rate from the underlying to the CToken\n     *\n     * @notice Accrue interest then return the up-to-date exchange rate\n     * @return Calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateCurrent() external returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    /**\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\n     * @dev Reverts upon any failure\n     */\n    function mint() external payable;\n\n    /**\n     * @notice Sender redeems cTokens in exchange for the underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param _redeemTokens The number of cTokens to redeem into underlying\n     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeem(uint256 _redeemTokens) external returns (uint256);\n\n    /**\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param _redeemAmount The amount of underlying to redeem\n     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeemUnderlying(uint256 _redeemAmount) external returns (uint256);\n\n    /**\n      * @notice Sender borrows assets from the protocol to their own address\n      * @param _borrowAmount The amount of the underlying asset to borrow\n      * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function borrow(uint256 _borrowAmount) external returns (uint256);\n\n    /**\n     * @notice Sender repays their own borrow\n     * @dev Reverts upon any failure\n     */\n    function repayBorrow() external payable;\n}\n\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n\n\n\n// pragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Dependency file: @openzeppelin/contracts/utils/SafeCast.sol\n\n\n\n// pragma solidity ^0.6.0;\n\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n\n/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n*/\npragma solidity 0.6.10;\n\n\n// import { SafeCast } from \"@openzeppelin/contracts/utils/SafeCast.sol\";\n// import { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// import { ICEth } from \"../interfaces/external/ICEth.sol\";\n// import { ICErc20 } from \"../interfaces/external/ICErc20.sol\";\n// import { ICompoundLeverageModule } from \"../interfaces/ICompoundLeverageModule.sol\";\n// import { IWETH } from \"../interfaces/external/IWETH.sol\";\n// import { IDebtIssuanceModule } from \"../interfaces/IDebtIssuanceModule.sol\";\n// import { ISetToken } from \"../interfaces/ISetToken.sol\";\n// import { PreciseUnitMath } from \"../lib/PreciseUnitMath.sol\";\n// import { UniswapV2Library } from \"./lib/UniswapV2Library.sol\";\n// import { IUniswapV2Router02 } from \"../interfaces/external/IUniswapV2Router02.sol\";\n\n// import { DydxFlashloanBase } from \"../interfaces/external/DydxFlashloanBase.sol\";\n// import { Account, Actions, ISoloMargin } from \"../interfaces/external/ISoloMargin.sol\";\n// import { ICallee } from \"../interfaces/external/ICallee.sol\";\n// import { Withdrawable } from \"./Withdrawable.sol\";\n\n// Contract that executes an issuance arb for a SetToken using Uniswap, Sushiswap and dYdX. In this version SetToken is pooled\n// on Sushiswap\ncontract CTokenDebtIssuanceSushiArb is ICallee, DydxFlashloanBase, Withdrawable {\n    using PreciseUnitMath for uint256;\n    using SafeMath for uint256;\n    using SafeCast for int256;\n\n    /* ============ State ============ */\n\n    IDebtIssuanceModule public debtIssuanceModule;\n    IUniswapV2Router02 public uniswapRouter;\n    IUniswapV2Router02 public sushiswapRouter;\n    IWETH public weth;\n    ISoloMargin public solo;\n    address uniswapFactory;\n    ICEth public cEther;\n    ICompoundLeverageModule public compoundLeverageModule;\n\n    /* ============ Structs ============ */\n\n    struct IssuanceArbData {\n        ISetToken setToken;\n        uint256 setTokenQuantity;\n        uint256 tradeSlippage;\n        uint256 repayAmount;\n        bool[] useUniswap;\n        bool isIssueArb;\n        address setPoolToken;\n        uint256 maxGasPrice;\n    }\n\n    /* ============ Constructor ============ */\n\n    constructor(\n        ISoloMargin _solo,\n        IUniswapV2Router02 _uniswapRouter,\n        IUniswapV2Router02 _sushiswapRouter,\n        IWETH _weth,\n        IDebtIssuanceModule _debtIssuanceModule,\n        address _uniswapFactory,\n        ICEth _cEther,\n        ICompoundLeverageModule _compoundLeverageModule\n    )\n        public\n        payable\n    {\n        solo = _solo;\n        uniswapRouter = _uniswapRouter;\n        sushiswapRouter = _sushiswapRouter;\n        weth = _weth;\n        debtIssuanceModule = _debtIssuanceModule;\n        uniswapFactory = _uniswapFactory;\n        cEther = _cEther;\n        compoundLeverageModule = _compoundLeverageModule;\n\n        // Deposit 2 wei from deployer to contract\n        weth.deposit{value: msg.value}();\n\n        // Approve to dYdX solo\n        weth.approve(address(solo), PreciseUnitMath.maxUint256());\n\n        // Approve to Uniswap router\n        weth.approve(address(uniswapRouter), PreciseUnitMath.maxUint256());\n\n        // Approve to Sushiswap router\n        weth.approve(address(sushiswapRouter), PreciseUnitMath.maxUint256());\n\n        // Approve to DebtIssuanceModule\n        weth.approve(address(debtIssuanceModule), PreciseUnitMath.maxUint256());\n\n        // Get operations and deposit 2 wei\n        uint256 marketId = _getMarketIdFromTokenAddress(address(solo), address(weth));\n\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](1);\n        operations[0] = _getDepositAction(marketId, msg.value);\n\n        Account.Info[] memory accountInfos = new Account.Info[](1);\n        accountInfos[0] = _getAccountInfo();\n\n        solo.operate(accountInfos, operations);\n    }\n\n    /* ============ External Functions ============ */\n\n    function executeFlashLoanArb(\n        ISetToken _setToken,\n        uint256 _setTokenQuantity,\n        uint256 _loanAmount,\n        uint256 _maxTradeSlippage,\n        uint256 _poolSetReserves,\n        bool[] memory _useUniswap,\n        bool _isIssueArb,\n        address _setPoolToken,\n        uint256 _maxGasPrice\n    )\n        external\n        onlyOwner\n    {\n        (uint256 actualPoolSetReserves, ) = UniswapV2Library.getReserves(uniswapFactory, address(_setToken), _setPoolToken);\n        // Skip arb if Set is already sold into the pool greater than our tolerance, in case a bot front runs us\n        if (\n            (_isIssueArb && actualPoolSetReserves > _poolSetReserves)\n            || (!_isIssueArb && actualPoolSetReserves < _poolSetReserves)\n        ) {\n            return;\n        }\n\n        // Get marketId from token address\n        uint256 marketId = _getMarketIdFromTokenAddress(address(solo), address(weth));\n\n        // Calculate repay amount (_loanAmount + (2 wei))\n        // Approve transfer from\n        uint256 repayAmount = _getRepaymentAmountInternal(_loanAmount);\n\n        // 1. Withdraw $\n        // 2. Call callFunction(...)\n        // 3. Deposit back $\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\n\n        operations[0] = _getWithdrawAction(marketId, _loanAmount);\n        operations[1] = _getCallAction(\n            // Encode IssuanceArbData for callFunction\n            abi.encode(\n                IssuanceArbData({\n                    setToken: _setToken,\n                    setTokenQuantity: _setTokenQuantity,\n                    tradeSlippage: _maxTradeSlippage,\n                    repayAmount: repayAmount,\n                    useUniswap: _useUniswap,\n                    isIssueArb: _isIssueArb,\n                    setPoolToken: _setPoolToken,\n                    maxGasPrice: _maxGasPrice\n                })\n            )\n        );\n        operations[2] = _getDepositAction(marketId, repayAmount);\n\n        Account.Info[] memory accountInfos = new Account.Info[](1);\n        accountInfos[0] = _getAccountInfo();\n\n        solo.operate(accountInfos, operations);\n\n        // Unwrap\n        uint256 balanceOfWeth = weth.balanceOf(address(this));\n        weth.withdraw(balanceOfWeth);\n\n        // Send ETH back to sender\n        msg.sender.transfer(balanceOfWeth);\n    }\n\n    function getSpread(\n        ISetToken _setToken,\n        uint256 _setTokenQuantity,\n        bool[] memory _useUniswap,\n        address _setPoolToken\n    )\n        external\n        view\n        returns(uint256, uint256)\n    {\n        uint256 issuanceSpread = _getIssuanceSpread(_setToken, _setTokenQuantity, _useUniswap, _setPoolToken);\n\n        uint256 redemptionSpread = _getRedemptionSpread(_setToken, _setTokenQuantity, _useUniswap, _setPoolToken);\n\n        return (issuanceSpread, redemptionSpread);\n    }\n\n    receive() external payable {} // solium-disable-line quotes\n\n    /* ============ Internal Functions ============ */\n\n    // This is the function that will be called postLoan\n    // i.e. Encode the logic to handle your flashloaned funds here\n    function callFunction(\n        address _sender,\n        Account.Info memory _account,\n        bytes memory _data\n    )\n        public\n        override\n    {\n        IssuanceArbData memory issueArbData = abi.decode(_data, (IssuanceArbData));\n\n        if (issueArbData.isIssueArb) {\n            _executeIssueArb(issueArbData);\n        } else {\n            // Sync positions to account for accrued interest on Compound\n            compoundLeverageModule.sync(issueArbData.setToken, true);\n            _executeRedeemArb(issueArbData);\n        }\n\n        uint256 balanceOfWeth = weth.balanceOf(address(this));\n        // Note that you can ignore the line below\n        // if your dydx account (this contract in this case)\n        // has deposited at least ~2 Wei of assets into the account\n        // to balance out the collaterization ratio\n        require(\n            balanceOfWeth >= issueArbData.repayAmount,\n            \"Not enough funds to repay loan!\"\n        );\n    }\n\n    function _executeIssueArb(IssuanceArbData memory _issueArbData) internal {\n        (\n            address[] memory components,\n            uint256[] memory totalEquityUnits,\n            uint256[] memory totalDebtUnits\n        ) = debtIssuanceModule.getRequiredComponentIssuanceUnits(\n            _issueArbData.setToken,\n            _issueArbData.setTokenQuantity\n        );\n\n        _tradeWethForComponents(_issueArbData, components, totalEquityUnits);\n\n        // Issue Set with traded tokens from Uniswap\n        debtIssuanceModule.issue(_issueArbData.setToken, _issueArbData.setTokenQuantity, address(this));\n\n        // Sell SetToken for WETH\n        _sellSetTokenForWeth(_issueArbData);\n\n        // Attempt to throw off MEV frontrunners\n        if (tx.gasprice > _issueArbData.maxGasPrice) {\n            return;\n        }\n\n        // Trade debt components from issue\n        _tradeComponentsForWeth(_issueArbData, components, totalDebtUnits);\n    }\n\n    function _executeRedeemArb(IssuanceArbData memory _issueArbData) internal {\n        (\n            address[] memory components,\n            uint256[] memory totalEquityUnits,\n            uint256[] memory totalDebtUnits\n        ) = debtIssuanceModule.getRequiredComponentRedemptionUnits(\n            _issueArbData.setToken,\n            _issueArbData.setTokenQuantity\n        );\n\n        // Trade borrowed WETH for debt components\n        _tradeWethForComponents(_issueArbData, components, totalDebtUnits);\n\n        // Buy SetToken with WETH\n        _buySetTokenWithWeth(_issueArbData);\n        \n        // Redeem Set with traded debt tokens\n        debtIssuanceModule.redeem(_issueArbData.setToken, _issueArbData.setTokenQuantity, address(this));\n\n        // Attempt to throw off MEV frontrunners\n        if (tx.gasprice > _issueArbData.maxGasPrice) {\n            return;\n        }\n\n        // Trade equity components redeemed for WETH\n        _tradeComponentsForWeth(_issueArbData, components, totalEquityUnits);\n    }\n\n    function _tradeWethForComponents(\n        IssuanceArbData memory _issueArbData,\n        address[] memory _components,\n        uint256[] memory _totalUnits\n    )\n        internal\n    {\n        // Loop through components trade for components on Uni / Sushi\n        for (uint256 i = 0; i < _components.length; i++) {\n            address currentComponent = _components[i];\n            uint256 currentNotional = _totalUnits[i];\n\n            // If equity units is greater than 0 then trade into the component\n            if (currentNotional > 0) {\n                // Approve unlimited tokens to the Set issuance module if needed\n                IERC20 currentComponentInstance = IERC20(currentComponent);\n                if (currentComponentInstance.allowance(address(this), address(debtIssuanceModule)) < currentNotional) {\n                    currentComponentInstance.approve(address(debtIssuanceModule), PreciseUnitMath.maxUint256());\n                }\n\n                // Get underlying component and token quantity required for issuance. Set current component and notional to underlying\n                if (currentComponent == address(cEther)) {\n                    currentComponent = address(weth);\n                    // Convert total notional to underlying units\n                    currentNotional = currentNotional.preciseMulCeil(cEther.exchangeRateStored());\n                } else {\n                    try ICErc20(currentComponent).isCToken() {\n                        address underlying = ICErc20(currentComponent).underlying();\n                        uint256 exchangeRate = ICErc20(currentComponent).exchangeRateStored();\n                        currentComponent = underlying;\n                        currentNotional = currentNotional.preciseMulCeil(exchangeRate);\n                    } catch {}\n                }\n                \n                // Skip trade if current component is WETH\n                if (currentComponent == address(weth)) {\n                    // If cETH unwrap ETH and mint, else approve underlying to cToken and mint\n                    // Get underlying component and token quantity required for issuance. Set current component and notional to underlying\n                    if (_components[i] == address(cEther)) {\n                        weth.withdraw(currentNotional);\n\n                        cEther.mint{value: currentNotional}();\n                    }\n                    continue;\n                }\n\n                // Construct path of trade starting with WETH and ending with the Set component\n                address[] memory buyPath = new address[](2);\n                buyPath[0] = address(weth);\n                buyPath[1] = currentComponent;\n\n                // If useUniswap is true, then route to Uniswap, otherwise route to Sushiswap\n                if (_issueArbData.useUniswap[i]) {\n                    // Calculate the min weth amount required for component\n                    uint256[] memory amounts = uniswapRouter.getAmountsIn(currentNotional, buyPath);\n                    uint256 minWethAmount = amounts[0];\n                    \n                    // Calculate max weth inputted using the trade slippage param\n                    uint256 maxWethInput = _issueArbData.tradeSlippage.preciseMul(minWethAmount).add(minWethAmount);\n\n                    // Swap borrowed WETH for Set component\n                    uniswapRouter.swapTokensForExactTokens(currentNotional, maxWethInput, buyPath, address(this), block.timestamp);\n                } else {\n                    // Calculate the min weth amount required for component\n                    uint256[] memory amounts = sushiswapRouter.getAmountsIn(currentNotional, buyPath);\n                    uint256 minWethAmount = amounts[0];\n                    \n                    // Calculate max weth inputted using the trade slippage param\n                    uint256 maxWethInput = _issueArbData.tradeSlippage.preciseMul(minWethAmount).add(minWethAmount);\n\n                    // Swap borrowed WETH for Set component\n                    sushiswapRouter.swapTokensForExactTokens(currentNotional, maxWethInput, buyPath, address(this), block.timestamp);\n                }\n\n                try ICErc20(_components[i]).isCToken() {\n                    // Approve token if needed\n                    if (IERC20(currentComponent).allowance(address(this), _components[i]) < currentNotional) {\n                        IERC20(currentComponent).approve(_components[i], PreciseUnitMath.maxUint256());\n                    }\n\n                    ICErc20(_components[i]).mint(currentNotional);\n                } catch {}\n            }\n        }\n    }\n\n    function _tradeComponentsForWeth(\n        IssuanceArbData memory _issueArbData,\n        address[] memory _components,\n        uint256[] memory _totalUnits\n    )\n        internal\n    {\n        // Loop through components to trade debt units into WETH\n        for (uint256 i = 0; i < _components.length; i++) {\n            address currentComponent = _components[i];\n            uint256 currentNotional = _totalUnits[i];\n\n            // If equity units is greater than 0 then trade equity into WETH\n            if (currentNotional > 0) {\n                // If cETH unwrap ETH and mint, else approve underlying to cToken and mint\n                // Get underlying component and token quantity required for issuance. Set current component and notional to underlying\n                if (currentComponent == address(cEther)) {\n\n                    cEther.redeem(currentNotional);\n\n                    currentComponent = address(weth);\n                    // Convert total notional to underlying units\n                    currentNotional = currentNotional.preciseMul(cEther.exchangeRateStored());\n\n                    weth.deposit{value: currentNotional}();\n                } else {\n                    try ICErc20(currentComponent).isCToken() {\n                        ICErc20(currentComponent).redeem(currentNotional);\n\n                        address underlying = ICErc20(currentComponent).underlying();\n                        uint256 exchangeRate = ICErc20(currentComponent).exchangeRateStored();\n                        currentComponent = underlying;\n                        currentNotional = currentNotional.preciseMul(exchangeRate);\n                    } catch {}\n                }\n\n                // Skip trade if current component is WETH\n                if (currentComponent == address(weth)) {\n                    continue;\n                }\n\n                // Construct path of trade starting with component and ending with WETH\n                address[] memory componentSellPath = new address[](2);\n                componentSellPath[0] = currentComponent;\n                componentSellPath[1] = address(weth);\n\n                // If useUniswap is true, then route to Uniswap, otherwise route to Sushiswap\n                if (_issueArbData.useUniswap[i]) {\n                    // Approve token if needed\n                    if (IERC20(currentComponent).allowance(address(this), address(uniswapRouter)) < currentNotional) {\n                        IERC20(currentComponent).approve(address(uniswapRouter), PreciseUnitMath.maxUint256());\n                    }\n\n                    uniswapRouter.swapExactTokensForTokens(currentNotional, 0, componentSellPath, address(this), block.timestamp);\n                } else {\n                    // Approve token if needed\n                    if (IERC20(currentComponent).allowance(address(this), address(sushiswapRouter)) < currentNotional) {\n                        IERC20(currentComponent).approve(address(sushiswapRouter), PreciseUnitMath.maxUint256());\n                    }\n\n                    sushiswapRouter.swapExactTokensForTokens(currentNotional, 0, componentSellPath, address(this), block.timestamp);\n                }\n            }\n        }\n    }\n\n    function _sellSetTokenForWeth(IssuanceArbData memory _issueArbData) internal {\n        // Approve token if needed\n        if (_issueArbData.setToken.allowance(address(this), address(sushiswapRouter)) < _issueArbData.setTokenQuantity) {\n            _issueArbData.setToken.approve(address(sushiswapRouter), PreciseUnitMath.maxUint256());\n        }\n\n        // Construct path of trade starting with Set and ending with WETH\n        address[] memory setSellPath;\n        if (_issueArbData.setPoolToken == address(weth)) {\n            setSellPath = new address[](2);\n            setSellPath[0] = address(_issueArbData.setToken);\n            setSellPath[1] = address(weth);\n        } else {\n            setSellPath = new address[](3);\n            setSellPath[0] = address(_issueArbData.setToken);\n            setSellPath[1] = _issueArbData.setPoolToken;\n            setSellPath[2] = address(weth);\n        }\n\n        // No restriction of slippage on SetToken. In case price is way above NAV, we want to have transaction go through\n        // even at high slippage on SUSHI\n        sushiswapRouter.swapExactTokensForTokens(_issueArbData.setTokenQuantity, 0, setSellPath, address(this), block.timestamp);\n    }\n\n    function _buySetTokenWithWeth(IssuanceArbData memory _issueArbData) internal {\n        // Construct path of trade starting with WETH and ending with Set\n        address[] memory setBuyPath;\n        if (_issueArbData.setPoolToken == address(weth)) {\n            setBuyPath = new address[](2);\n            setBuyPath[0] = address(weth);\n            setBuyPath[1] = address(_issueArbData.setToken);\n        } else {\n            setBuyPath = new address[](3);\n            setBuyPath[0] = address(weth);\n            setBuyPath[1] = _issueArbData.setPoolToken;\n            setBuyPath[2] = address(_issueArbData.setToken);\n        }\n\n        // Swap borrowed WETH for Set component on SUSHI\n        sushiswapRouter.swapTokensForExactTokens(_issueArbData.setTokenQuantity, PreciseUnitMath.maxUint256(), setBuyPath, address(this), block.timestamp);\n    }\n\n    function _getIssuanceSpread(\n        ISetToken _setToken,\n        uint256 _setTokenQuantity,\n        bool[] memory _useUniswap,\n        address _setPoolToken\n    )\n        internal\n        view\n        returns(uint256)\n    {\n        (\n            address[] memory components,\n            uint256[] memory totalEquityUnits,\n            uint256[] memory totalDebtUnits\n        ) = debtIssuanceModule.getRequiredComponentIssuanceUnits(\n            _setToken,\n            _setTokenQuantity\n        );\n\n        // Calculate total WETH needed to buy equity components\n        uint256 totalWethForEquity = _getTotalWethForComponents(components, totalEquityUnits, _useUniswap);\n\n        // Calculate max WETH received from selling Set\n        uint256 totalWethFromSet;\n        if (_setPoolToken == address(weth)) {\n            address[] memory setSellPath = new address[](2);\n            setSellPath[0] = address(_setToken);\n            setSellPath[1] = address(weth);\n            uint256[] memory sellAmounts = uniswapRouter.getAmountsOut(_setTokenQuantity, setSellPath);\n            totalWethFromSet = sellAmounts[1];\n        } else {\n            address[] memory setSellPath = new address[](3);\n            setSellPath[0] = address(_setToken);\n            setSellPath[1] = _setPoolToken;\n            setSellPath[2] = address(weth);\n            uint256[] memory sellAmounts = uniswapRouter.getAmountsOut(_setTokenQuantity, setSellPath);\n            totalWethFromSet = sellAmounts[2];\n        }\n\n        // Get total WETH from selling debt components\n        uint256 totalWethFromDebt = _getTotalWethFromComponents(components, totalDebtUnits, _useUniswap);\n\n        // Get issuance spread\n        if (totalWethForEquity <= totalWethFromSet.add(totalWethFromDebt)) {\n            return totalWethFromSet.add(totalWethFromDebt).sub(totalWethForEquity);\n        } else {\n            return 0;\n        }\n    }\n\n    function _getRedemptionSpread(\n        ISetToken _setToken,\n        uint256 _setTokenQuantity,\n        bool[] memory _useUniswap,\n        address _setPoolToken\n    )\n        internal\n        view\n        returns(uint256)\n    {\n        (\n            address[] memory components,\n            uint256[] memory totalEquityUnits,\n            uint256[] memory totalDebtUnits\n        ) = debtIssuanceModule.getRequiredComponentRedemptionUnits(\n            _setToken,\n            _setTokenQuantity\n        );\n\n        uint256 totalWethForDebt = _getTotalWethForComponents(components, totalDebtUnits, _useUniswap);\n\n        // Calculate WETH needed to buy Set\n        uint256 totalWethForSet;\n        if (_setPoolToken == address(weth)) {\n            address[] memory setBuyPath = new address[](2);\n            setBuyPath[0] = address(weth);\n            setBuyPath[1] = address(_setToken);\n            uint256[] memory sellAmounts = uniswapRouter.getAmountsIn(_setTokenQuantity, setBuyPath);\n            totalWethForSet = sellAmounts[0];\n        } else {\n            address[] memory setBuyPath = new address[](3);\n            setBuyPath[0] = address(weth);\n            setBuyPath[1] = _setPoolToken;\n            setBuyPath[2] = address(_setToken);\n            uint256[] memory sellAmounts = uniswapRouter.getAmountsIn(_setTokenQuantity, setBuyPath);\n            totalWethForSet = sellAmounts[0];\n        }\n\n        uint256 totalWethFromEquity = _getTotalWethFromComponents(components, totalEquityUnits, _useUniswap);\n\n        // Get redemption spread\n        if (totalWethFromEquity >= totalWethForSet.add(totalWethForDebt)) {\n            return totalWethFromEquity.sub(totalWethForSet).sub(totalWethForDebt);\n        } else {\n            return 0;\n        }\n    }\n\n    function _getTotalWethForComponents(\n        address[] memory _components,\n        uint256[] memory _totalUnits,\n        bool[] memory _useUniswap\n    )\n        internal\n        view\n        returns(uint256)\n    {\n        uint256 totalWethForComponents;\n        for (uint256 i = 0; i < _components.length; i++) {\n            address currentComponent = _components[i];\n            uint256 currentNotional = _totalUnits[i];\n\n            // If equity units is greater than 0 then trade into the component\n            if (currentNotional > 0) {\n                // Get underlying component and token quantity required for issuance. Set current component and notional to underlying\n                if (currentComponent == address(cEther)) {\n                    currentComponent = address(weth);\n                    // Convert total notional to underlying units\n                    currentNotional = currentNotional.preciseMulCeil(cEther.exchangeRateStored());\n                } else {\n                    try ICErc20(currentComponent).isCToken() {\n                        address underlying = ICErc20(currentComponent).underlying();\n                        uint256 exchangeRate = ICErc20(currentComponent).exchangeRateStored();\n                        currentComponent = underlying;\n                        currentNotional = currentNotional.preciseMulCeil(exchangeRate);\n                    } catch {}\n                }\n                \n                // Skip trade if current component is WETH\n                if (currentComponent == address(weth)) {\n                    totalWethForComponents = currentNotional.add(totalWethForComponents);\n                    continue;\n                }\n\n                // Construct path of trade starting with WETH and ending with the Set component\n                address[] memory componentBuyPath = new address[](2);\n                componentBuyPath[0] = address(weth);\n                componentBuyPath[1] = currentComponent;\n\n                // Get trade info from Sushiswap / Uniswap depending on flag\n                uint256[] memory componentBuyAmounts;\n                if (_useUniswap[i]) {\n                    // UNISWAP: Calculate the min weth amount required for component\n                    componentBuyAmounts = uniswapRouter.getAmountsIn(currentNotional, componentBuyPath);\n                } else {\n                    // UNISWAP: Calculate the min weth amount required for component\n                    componentBuyAmounts = sushiswapRouter.getAmountsIn(currentNotional, componentBuyPath);\n                }\n\n                totalWethForComponents = componentBuyAmounts[0].add(totalWethForComponents);\n            }\n        }\n        return totalWethForComponents;\n    }\n\n    function _getTotalWethFromComponents(\n        address[] memory _components,\n        uint256[] memory _totalUnits,\n        bool[] memory _useUniswap\n    )\n        internal\n        view\n        returns(uint256)\n    {\n        uint256 totalWethFromComponents;\n        for (uint256 i = 0; i < _components.length; i++) {\n            address currentComponent = _components[i];\n            uint256 currentNotional = _totalUnits[i];\n\n            // If equity units is greater than 0 then trade equity into WETH\n            if (currentNotional > 0) {\n                // If cETH unwrap ETH and mint, else approve underlying to cToken and mint\n                // Get underlying component and token quantity required for issuance. Set current component and notional to underlying\n                if (currentComponent == address(cEther)) {\n                    currentComponent = address(weth);\n                    // Convert total notional to underlying units\n                    currentNotional = currentNotional.preciseMul(cEther.exchangeRateStored());\n                } else {\n                    try ICErc20(currentComponent).isCToken() {\n                        address underlying = ICErc20(currentComponent).underlying();\n                        uint256 exchangeRate = ICErc20(currentComponent).exchangeRateStored();\n                        currentComponent = underlying;\n                        currentNotional = currentNotional.preciseMul(exchangeRate);\n                    } catch {}\n                }\n\n                // Skip trade if current component is WETH\n                if (currentComponent == address(weth)) {\n                    totalWethFromComponents = currentNotional.add(totalWethFromComponents);\n                    continue;\n                }\n\n                // Construct path of trade starting with the Set component and ending with WETH\n                address[] memory debtSellPath = new address[](2);\n                debtSellPath[0] = currentComponent;\n                debtSellPath[1] = address(weth);\n\n                uint256[] memory componentSellAmounts;\n                if (_useUniswap[i]) {\n                    componentSellAmounts = uniswapRouter.getAmountsOut(currentNotional, debtSellPath);\n                } else {\n                    componentSellAmounts = uniswapRouter.getAmountsOut(currentNotional, debtSellPath);\n                }\n\n                totalWethFromComponents = componentSellAmounts[1].add(totalWethFromComponents);\n            }\n        }\n        return totalWethFromComponents;\n    }\n}\n"}}}