{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "ArbitrageV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity = 0.7.6;\npragma experimental ABIEncoderV2;\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) =\n            target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function functionStaticCall(address target, bytes memory data)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function functionDelegateCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        bytes memory returndata =\n            address(token).functionCall(\n                data,\n                \"SafeERC20: low-level call failed\"\n            );\n        if (returndata.length > 0) {\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n    address private _dev;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        _dev = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function dev() public view returns (address) {\n        return _dev;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    modifier onlyDev() {\n        require(_dev == _msgSender(), \"Ownable: caller is not the dev\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function transferDevship(address newDev) public virtual onlyDev {\n        require(newDev != address(0), \"Ownable: new dev is the zero address\");\n        _dev = newDev;\n    }\n}\n\ninterface IUniswapV2Pair {\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n}\n\n\ninterface TokenInterface is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n\ninterface IFreeFromUpTo {\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n}\n\nlibrary Math {\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n}\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n}\n\ncontract SwapBot is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using SafeERC20 for TokenInterface;\n\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n\n    uint16 private _devFee;\n\n    TokenInterface private _weth;\n\n    address[] private _routers;\n    ISwapRouter private _uniswapV3Router;\n\n    address[] private _runners;\n\n    struct Pair {\n        uint8 routerId;\n        address pair;\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        uint256 amountMinOut;\n        bool isReserveIn;\n    }\n\n    struct Root {\n        Pair[] pairList;\n        uint256 amountIn;\n        uint256 chiAmount;\n    }\n\n    modifier onlyRunner() {\n        (bool exist, ) = checkRunner(_msgSender());\n        require(exist, \"caller is not the runner\");\n        _;\n    }\n\n    modifier discountCHI(uint256 chiAmount) {\n        if (chiAmount > 0) {\n            uint256 gasStart = gasleft();\n            _;\n            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n            chi.freeFromUpTo(_msgSender(), Math.min((gasSpent + 14154) / 41947, chiAmount));\n        } else {\n            _;\n        }\n    }\n\n    constructor() {\n        _weth = TokenInterface(address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2));\n\n        _routers.push(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D));\n        _routers.push(address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F));\n        _routers.push(address(0xE592427A0AEce92De3Edee1F18E0157C05861564));\n\n        // Uniswap V3 Router\n        _uniswapV3Router = ISwapRouter(_routers[2]);\n\n        _runners.push(_msgSender());\n\n        _devFee = 1000; // dev fee is 10%, must be divided by 10,000 when calculating\n    }\n\n    receive() external payable {\n    }\n\n    function deposit(uint256 depositAmount) public onlyDev {\n        _weth.deposit{value: depositAmount}();\n    }\n\n    function runnerLength() public view returns (uint8) {\n        return uint8(_runners.length);\n    }\n    \n    function checkRunner(address runner)\n        public\n        view\n        returns (bool exist, uint8 index)\n    {\n        uint8 length = runnerLength();\n        exist = false;\n        for (uint8 i = 0; i < length; i++) {\n            if (_runners[i] == runner) {\n                exist = true;\n                index = i;\n                break;\n            }\n        }\n    }\n\n    function addRunner(address runner) external onlyDev {\n        require(runner != address(0), \"Invalid runner address.\");\n\n        _runners.push(address(runner));\n    }\n\n    function withdrawProfit(address withdrawAddress, uint256 withdrawAmount)\n        public\n        onlyOwner\n        returns (bool sent)\n    {\n        uint256 balance = _weth.balanceOf(address(this));\n        require(balance > withdrawAmount, \"Invalid Withdraw Amount\");\n\n        _weth.withdraw(withdrawAmount);\n        (sent, ) = withdrawAddress.call{value: withdrawAmount}(\"\");\n        require(sent, \"Invalid withdraw ETH\");\n    }\n\n    function emergencyWithdraw(address withdrawAddress) \n        public\n        onlyDev\n        returns (bool sent)\n    {\n        uint256 withdrawAmount = _weth.balanceOf(address(this));\n        _weth.withdraw(withdrawAmount);\n\n        uint256 ethAmount = address(this).balance;\n        (sent, ) = withdrawAddress.call{value: ethAmount}(\"\");\n        require(sent, \"Invalid withdraw ETH\");\n    }\n\n    function run(\n        Root memory arbitrageRouter\n    ) public onlyRunner discountCHI(arbitrageRouter.chiAmount) {\n        uint8 pairLength = uint8(arbitrageRouter.pairList.length);\n        uint256 amountIn = arbitrageRouter.amountIn;\n\n        for (uint8 i = 0; i < pairLength; i += 1) {\n            // Call Swap\n            amountIn = _swapTokenToToken(\n                amountIn,\n                arbitrageRouter.pairList[i]\n            );\n\n            require(\n                amountIn >= arbitrageRouter.pairList[i].amountMinOut,\n                \"Swapped amount should be greater than expected amount\"\n            );\n        }\n    }\n\n    function swapTokenToToken(\n        uint256 inAmount,\n        Pair memory pairInfo\n    ) external onlyDev {\n        _swapTokenToToken(inAmount, pairInfo);\n    }\n\n    function _swapTokenToToken(\n        uint256 inAmount,\n        Pair memory pairInfo\n    ) internal returns (uint256 amountOut) {\n        uint256 oldTokenOutAmount = TokenInterface(pairInfo.tokenOut).balanceOf(address(this));\n        \n        if (pairInfo.routerId < 2) { // Uniswap V2 or Sushiswap V2\n            _uniswapV2Swap(inAmount, pairInfo);\n        } else if (pairInfo.routerId == 2) {\n            _uniswapV3Swap(inAmount, pairInfo);\n        }\n        \n        uint256 newTokenOutAmount = TokenInterface(pairInfo.tokenOut).balanceOf(address(this));\n        amountOut = newTokenOutAmount.sub(oldTokenOutAmount);\n    }\n\n    function _getAmountOut(\n        bool isReserveIn,\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        (reserveIn, reserveOut) = \n            isReserveIn ? (reserveIn, reserveOut) : (reserveOut, reserveIn);\n\n        uint256 amountInWithFee = amountIn.mul(997);\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    function _uniswapV2Swap(\n        uint256 inAmount,\n        Pair memory pairInfo\n    ) internal {\n        // Get Pair\n        IUniswapV2Pair pair = IUniswapV2Pair(pairInfo.pair);\n        // Get Reserves\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n        // Get Output Amount\n        uint256 outputAmount = _getAmountOut(\n            pairInfo.isReserveIn,\n            inAmount,\n            reserve0,\n            reserve1\n        );\n\n        // Token Transfer\n        TokenInterface(pairInfo.tokenIn).safeTransfer(address(pairInfo.pair), inAmount);\n\n        (uint256 amount0Out, uint256 amount1Out) =\n            pairInfo.isReserveIn\n                ? (uint256(0), outputAmount)\n                : (outputAmount, uint256(0));\n\n        // Call Swap\n        pair.swap(amount0Out, amount1Out, address(this), new bytes(0));\n    }\n\n    function _uniswapV3Swap(\n        uint256 inAmount,\n        Pair memory pairInfo\n    ) internal {\n        // Get Deadline\n        uint256 deadLine = (uint256)(block.timestamp).add(1000);\n\n        // Get SwapParams\n        ISwapRouter.ExactInputSingleParams memory swapParams = ISwapRouter.ExactInputSingleParams(\n            pairInfo.tokenIn,\n            pairInfo.tokenOut,\n            pairInfo.fee,\n            address(this),\n            deadLine,\n            inAmount,\n            0,\n            0\n        );\n\n        // Approve tokenIn\n        TokenInterface(pairInfo.tokenIn).safeApprove(address(_uniswapV3Router), inAmount);\n\n        // Call Swap\n        _uniswapV3Router.exactInputSingle(swapParams);\n    }\n}\n"
    }
  }
}