{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"parent.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.4;\n\ncontract Parent {\n  event Upgraded(address indexed implementation);\n  event ProxyAdminChanged(address);\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n  address public proxyAdmin;\n\n  constructor() {\n      proxyAdmin=msg.sender;\n      emit ProxyAdminChanged(msg.sender);\n  }\n  \n  function setProxyAdmin(address newProxyAdmin) public onlyProxyAdmin(){\n      proxyAdmin=newProxyAdmin;\n      emit ProxyAdminChanged(newProxyAdmin);\n  }\n \n  function getImplementation() public view returns (address impl){\n      bytes32 slot = IMPLEMENTATION_SLOT;\n      assembly {\n          impl := sload(slot)\n      }\n    }\n    \n  fallback() external payable {\n    address adrs=getImplementation();\n    assembly {\n      calldatacopy(0, 0, calldatasize())\n      let result := delegatecall(gas(), adrs, 0, calldatasize(), 0, 0)\n      // Copy the returned data.\n      returndatacopy(0, 0, returndatasize())\n      switch result\n        case 0 {\n          revert(0, returndatasize())\n        }\n        default {\n          return(0, returndatasize())\n        }\n    }\n  }\n  modifier onlyProxyAdmin() {\n    require(msg.sender==proxyAdmin,\"Must be a proxy admin\");\n    _;\n  }\n\n  function isContract(address _addr) internal view returns (bool) {\n    bytes32 codehash;\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n    assembly { codehash := extcodehash(_addr) }\n    return (codehash != 0x0 && codehash != accountHash);\n  }\n\n  function setImplementation(address newImplementation) public onlyProxyAdmin{\n      require(isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n      require(msg.sender==proxyAdmin);\n      bytes32 slot = IMPLEMENTATION_SLOT;\n      assembly {\n        sstore(slot, newImplementation)\n      }\n      emit Upgraded(newImplementation);\n      (bool success, bytes memory data) = newImplementation.delegatecall(\n        abi.encodeWithSignature(\"initialize()\")\n      );\n  }\n}"}}}