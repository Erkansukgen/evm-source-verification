{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/Test.sol": {
      "content": "contract SafetyFirst {\r\n    address payable owner;\r\n    \r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function proxyMessage(address payable to, bytes calldata data) external payable {\r\n        if (msg.value == 0) {\r\n            (bool success,) = to.call(data);\r\n            if (!success) {\r\n                revert(\"Proxy Contract Failure\");\r\n            }\r\n        } else {\r\n            uint startingBalance = address(this).balance;\r\n            (bool success,) = to.call{value:msg.value}(data);\r\n            if (!success) {\r\n                revert(\"Proxy Contract Failure\");\r\n            }\r\n            if (address(this).balance < startingBalance) {\r\n                revert(\"Contract Lost Value!\");\r\n            }\r\n        }\r\n    }\r\n    \r\n    receive() external payable {}\r\n    \r\n    function withdraw() external {\r\n        require(msg.sender == owner);\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n}"
    }
  }
}