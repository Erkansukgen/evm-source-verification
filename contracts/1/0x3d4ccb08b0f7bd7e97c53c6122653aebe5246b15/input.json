{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description()\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"},"gaoyu/PriceConsumer.sol":{"content":"pragma solidity ^0.6.7;\n\nimport \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\";\n\ncontract PriceConsumer {\n\n    AggregatorV3Interface internal priceFeedADA;\n    AggregatorV3Interface internal priceFeedBCH;\n    AggregatorV3Interface internal priceFeedBNB;\n    AggregatorV3Interface internal priceFeedBTC;\n    AggregatorV3Interface internal priceFeedCOIN;\n    AggregatorV3Interface internal priceFeedDOGE;\n    AggregatorV3Interface internal priceFeedDOT;\n    AggregatorV3Interface internal priceFeedEOS;\n    AggregatorV3Interface internal priceFeedETC;\n    AggregatorV3Interface internal priceFeedETH;\n    AggregatorV3Interface internal priceFeedHT;\n    AggregatorV3Interface internal priceFeedOKB;\n    AggregatorV3Interface internal priceFeedTRX;\n    AggregatorV3Interface internal priceFeedUNI;\n    AggregatorV3Interface internal priceFeedXRP;\n    AggregatorV3Interface internal priceFeedLINK;\n    AggregatorV3Interface internal priceFeedLTC;\n    AggregatorV3Interface internal priceFeedMATIC;\n    AggregatorV3Interface internal priceFeedAVAX;\n    AggregatorV3Interface internal priceFeedFIL;\n    AggregatorV3Interface internal priceFeedDAI;\n    AggregatorV3Interface internal priceFeedXMR;\n    AggregatorV3Interface internal priceFeedAAVE;\n    AggregatorV3Interface internal priceFeedGRT;\n    \n    \n    constructor() public {\n        priceFeedADA = AggregatorV3Interface(0xAE48c91dF1fE419994FFDa27da09D5aC69c30f55);\n        priceFeedBCH = AggregatorV3Interface(0x9F0F69428F923D6c95B781F89E165C9b2df9789D);\n        priceFeedBNB = AggregatorV3Interface(0x14e613AC84a31f709eadbdF89C6CC390fDc9540A);\n        priceFeedBTC = AggregatorV3Interface(0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c);\n        priceFeedCOIN = AggregatorV3Interface(0xb10a047f8db80d781D006F1401BEB7d70Eb4da1a);\n        priceFeedDOGE = AggregatorV3Interface(0x2465CefD3b488BE410b941b1d4b2767088e2A028);\n        priceFeedDOT = AggregatorV3Interface(0x1C07AFb8E2B827c5A4739C6d59Ae3A5035f28734);\n        priceFeedEOS = AggregatorV3Interface(0x10a43289895eAff840E8d45995BBa89f9115ECEe);\n        priceFeedETC = AggregatorV3Interface(0xaEA2808407B7319A31A383B6F8B60f04BCa23cE2);\n        priceFeedETH = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\n        priceFeedHT = AggregatorV3Interface(0xE1329B3f6513912CAf589659777b66011AEE5880);\n        priceFeedOKB = AggregatorV3Interface(0x22134617Ae0f6CA8D89451e5Ae091c94f7D743DC);\n        priceFeedTRX = AggregatorV3Interface(0xacD0D1A29759CC01E8D925371B72cb2b5610EA25);\n        priceFeedUNI = AggregatorV3Interface(0x553303d460EE0afB37EdFf9bE42922D8FF63220e);\n        priceFeedXRP = AggregatorV3Interface(0xCed2660c6Dd1Ffd856A5A82C67f3482d88C50b12);\n        priceFeedLINK = AggregatorV3Interface(0x2c1d072e956AFFC0D435Cb7AC38EF18d24d9127c);\n        priceFeedLTC = AggregatorV3Interface(0x6AF09DF7563C363B5763b9102712EbeD3b9e859B);\n        priceFeedMATIC = AggregatorV3Interface(0x7bAC85A8a13A4BcD8abb3eB7d6b4d632c5a57676);\n        priceFeedAVAX = AggregatorV3Interface(0xFF3EEb22B5E3dE6e705b44749C2559d704923FD7);\n        priceFeedFIL = AggregatorV3Interface(0x1A31D42149e82Eb99777f903C08A2E41A00085d3);\n        priceFeedDAI = AggregatorV3Interface(0xAed0c38402a5d19df6E4c03F4E2DceD6e29c1ee9);\n        priceFeedXMR = AggregatorV3Interface(0xFA66458Cce7Dd15D8650015c4fce4D278271618F);\n        priceFeedAAVE = AggregatorV3Interface(0x547a514d5e3769680Ce22B2361c10Ea13619e8a9);\n        priceFeedGRT = AggregatorV3Interface(0x86cF33a451dE9dc61a2862FD94FF4ad4Bd65A5d2);\n    }\n\n    function getADALatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedADA.latestRoundData();\n        return price;\n    }\n    \n    function getBCHLatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedBCH.latestRoundData();\n        return price;\n    }\n    \n    function getBNBLatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedBNB.latestRoundData();\n        return price;\n    }\n  \n    function getCOINLatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedCOIN.latestRoundData();\n        return price;\n    }\n    \n    function getGODELatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedDOGE.latestRoundData();\n        return price;\n    }\n    \n    function getDOTLatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedDOT.latestRoundData();\n        return price;\n    }\n    \n    function getEOSLatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedEOS.latestRoundData();\n        return price;\n    }\n    \n    function getETCLatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedETC.latestRoundData();\n        return price;\n    }\n    \n    function getETHLatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedETH.latestRoundData();\n        return price;\n    }\n    \n    function getHTLatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedHT.latestRoundData();\n        return price;\n    }\n    \n    function getOKBLatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedOKB.latestRoundData();\n        return price;\n    }\n    \n    function getTRXLatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedTRX.latestRoundData();\n        return price;\n    }\n    \n    function getUNILatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedUNI.latestRoundData();\n        return price;\n    }\n    \n    function getXRPLatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedXRP.latestRoundData();\n        return price;\n    }\n    \n    function getLINKLatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedLINK.latestRoundData();\n        return price;\n    }\n    \n    function getLTCLatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedLTC.latestRoundData();\n        return price;\n    }\n\n    function getMATICLatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedMATIC.latestRoundData();\n        return price;\n    }\n    \n    function getAVAXLatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedAVAX.latestRoundData();\n        return price;\n    }\n    \n    function getFILLatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedFIL.latestRoundData();\n        return price;\n    }\n    \n    function getDAILatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedDAI.latestRoundData();\n        return price;\n    }\n    \n    function getXMRLatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedXMR.latestRoundData();\n        return price;\n    }\n    \n    function getAAVELatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedAAVE.latestRoundData();\n        return price;\n    }\n        \n    function getGRTLatestPrice() public view returns (int) {\n        (\n            uint80 roundID, \n            int price,\n            uint startedAt,\n            uint timeStamp,\n            uint80 answeredInRound\n        ) = priceFeedGRT.latestRoundData();\n        return price;\n    }    \n    \n}"}}}