{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/test.sol":{"content":"/* \n        Shinji Capital - $SHINJICAPITAL\n        \n\n        Telegram: https://t.me/shinjicapital\n*/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n\n\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 9;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ncontract ShinjiCapital is ERC20, Ownable {\n    using SafeMath for uint256;\n\n    IUniswapV2Router02 public immutable uniswapV2Router;\n    address public immutable uniswapV2Pair;\n\n    mapping (address => bool) public isSniper;\n    bool private _swapping;\n    uint256 private _launchTime;\n\n    address public feeWallet;\n    address public burnAddress = 0x000000000000000000000000000000000000dEaD;\n    \n    uint256 public maxTransactionAmount;\n    uint256 public swapTokensAtAmount;\n    uint256 public maxWallet;\n        \n    bool public limitsInEffect = false;\n    bool public dynamicFeesInEffect = false;\n    bool public tradingActive = true;\n\n    uint256 public fireSaleActive;\n    uint256 public fireSaleTimer;\n    uint256 public fireSaleAmt;\n    uint256 public fireSaleRequirement;\n\n    uint256 public resetRequirement;\n    mapping (address => uint256) public userBurned;\n\n    uint256 public buyFeeThreshold;\n    uint256 public buyFeeRate;\n    uint256 public buyTotalFees;\n    uint256 private _buyMarketingFee;\n    uint256 private _buyLiquidityFee;\n    uint256 private _buyDevFee;\n    \n    uint256 public sellFeeThreshold;\n    uint256 public sellFeeRate;\n    uint256 public sellTotalFees;\n    uint256 private _sellMarketingFee;\n    uint256 private _sellLiquidityFee;\n    uint256 private _sellDevFee;\n    \n    uint256 private _tokensForMarketing;\n    uint256 private _tokensForLiquidity;\n    uint256 private _tokensForDev;\n    \n    /******************/\n\n    // exlcude from fees and max transaction amount\n    mapping (address => bool) public isExcludedFromFees;\n    mapping (address => bool) public isExcludedMaxTransactionAmount;\n\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\n    // could be subject to a maximum transfer amount\n    mapping (address => bool) public automatedMarketMakerPairs;\n\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);\n    event Burn(uint256 burnAmount);\n    event FeesReset();\n    event FireSaleBy(address user);\n    event FireSale();\n\n    constructor() ERC20(\"Shinji Capital\", \"SHINJICAPITAL\") {\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        \n        isExcludedMaxTransactionAmount[address(_uniswapV2Router)] = true;\n        uniswapV2Router = _uniswapV2Router;\n        \n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n        isExcludedMaxTransactionAmount[address(uniswapV2Pair)] = true;\n        automatedMarketMakerPairs[address(uniswapV2Pair)] = true;\n\n        uint256 totalSupply = 1e12 * 1e9;\n        \n        _buyMarketingFee = 5;\n        _buyLiquidityFee = 2;\n        _buyDevFee = 2;\n        buyTotalFees = _buyMarketingFee + _buyLiquidityFee + _buyDevFee;\n        \n        _sellMarketingFee = 5;\n        _sellLiquidityFee = 2;\n        _sellDevFee = 2;\n        sellTotalFees = _sellMarketingFee + _sellLiquidityFee + _sellDevFee;\n\n        buyFeeRate = totalSupply * 5 / 1000;  // 0.5%\n        sellFeeRate = totalSupply * 25 / 10000;  // 0.25%\n\n        resetRequirement = totalSupply * 1 / 10000;  // 0.01%\n        fireSaleRequirement = totalSupply * 1 / 100;  // 1%\n\n        maxTransactionAmount = totalSupply * 1 / 100; // 1%\n        maxWallet = totalSupply * 2 / 100; // 2%\n        swapTokensAtAmount = totalSupply * 2 / 1000; // 0.2%\n        \n        feeWallet = address(owner());\n\n        // exclude from paying fees or having max transaction amount\n        excludeFromFees(owner(), true);\n        excludeFromFees(address(this), true);\n        excludeFromFees(address(burnAddress), true);\n        \n        isExcludedMaxTransactionAmount[owner()] = true;\n        isExcludedMaxTransactionAmount[address(this)] = true;\n        isExcludedMaxTransactionAmount[address(burnAddress)] = true;\n        \n        /*\n            _mint is an internal function in ERC20.sol that is only called here,\n            and CANNOT be called ever again\n        */\n        _mint(msg.sender, totalSupply);\n    }\n\n    // once enabled, can never be turned off\n    function enableTrading() external onlyOwner {\n        tradingActive = true;\n    }\n    \n    // remove limits after token is stable\n    function removeLimits() external onlyOwner returns (bool) {\n        limitsInEffect = false;\n        dynamicFeesInEffect = true;\n        fireSaleTimer = block.timestamp + 1 days;\n        return true;\n    }\n    \n     // change the minimum amount of tokens to sell from fees\n    function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner returns (bool) {\n  \t    require(newAmount >= totalSupply() * 1 / 100000, \"Swap amount cannot be lower than 0.001% total supply.\");\n  \t    require(newAmount <= totalSupply() * 5 / 1000, \"Swap amount cannot be higher than 0.5% total supply.\");\n  \t    swapTokensAtAmount = newAmount;\n  \t    return true;\n  \t}\n    \n    function excludeFromFees(address account, bool excluded) public onlyOwner() {\n        isExcludedFromFees[account] = excluded;\n    }\n    \n    function updateFeeWallet(address newWallet) external onlyOwner {\n        feeWallet = newWallet;\n    }\n    \n    function setSnipers(address[] memory snipers_) external onlyOwner() {\n        for (uint i = 0; i < snipers_.length; i++) {\n            if (snipers_[i] != uniswapV2Pair && snipers_[i] != address(uniswapV2Router)) {\n                isSniper[snipers_[i]] = true;\n            }\n        }\n    }\n    \n    function delSnipers(address[] memory snipers_) external onlyOwner() {\n        for (uint i = 0; i < snipers_.length; i++) {\n            isSniper[snipers_[i]] = false;\n        }\n    }\n    \n    function setResetRequirement(uint256 requirement) external onlyOwner() {\n        require(requirement >= totalSupply() * 1 / 100000, \"Burn requirement cannot be lower than 0.001% total supply.\");\n  \t    require(requirement <= totalSupply() * 5 / 1000, \"Burn requirement cannot be higher than 0.5% total supply.\");\n  \t    resetRequirement = requirement;\n    }\n\n    function setfireSaleRequirement(uint256 requirement) external onlyOwner() {\n        require(requirement >= totalSupply() * 1 / 100000, \"Burn requirement cannot be lower than 0.001% total supply.\");\n  \t    require(requirement <= totalSupply() * 5 / 1000, \"Burn requirement cannot be higher than 0.5% total supply.\");\n  \t    fireSaleRequirement = requirement;\n    }\n\n    function _resetFees() private {\n        _buyMarketingFee = 6;\n        _buyLiquidityFee = 2;\n        _buyDevFee = 2;\n        buyTotalFees = _buyMarketingFee + _buyLiquidityFee + _buyDevFee;\n        \n        _sellMarketingFee = 6;\n        _sellLiquidityFee = 2;\n        _sellDevFee = 2;\n        sellTotalFees = _sellMarketingFee + _sellLiquidityFee + _sellDevFee;\n    }\n\n    function resetFees() external {\n        require(balanceOf(msg.sender) > resetRequirement, \"You do not have enough tokens to reset fees!\");\n\n        _resetFees();\n\n        fireSaleAmt += resetRequirement;\n\n        transfer(burnAddress, resetRequirement);\n        emit FeesReset();\n    }\n\n    function fireSale() public {\n        require(balanceOf(msg.sender) > fireSaleRequirement, \"You do not have enough tokens to start a fire sale!\");\n        fireSaleActive = block.timestamp + 2 hours;\n        fireSaleTimer = block.timestamp + 1 days;\n        fireSaleAmt = 0;\n\n        transfer(burnAddress, fireSaleRequirement);\n        emit FireSaleBy(msg.sender);\n    }\n\n    function _startFireSale() private {\n        fireSaleActive = block.timestamp + 2 hours;\n        fireSaleTimer = block.timestamp + 1 days;\n        fireSaleAmt = 0;\n        \n        emit FireSale();\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(!isSniper[from], \"Your address has been marked as a sniper, you are unable to transfer or swap.\");\n        \n         if (amount == 0) {\n            super._transfer(from, to, 0);\n            return;\n        }\n        \n        // if (block.timestamp <= _launchTime) isSniper[to] = true;\n        \n        if (limitsInEffect) {\n            if (\n                from != owner() &&\n                to != owner() &&\n                to != address(0) &&\n                to != address(burnAddress) &&\n                !_swapping\n            ) {\n                if (!tradingActive) require(isExcludedFromFees[from] || isExcludedFromFees[to], \"Trading is not active.\");\n                 \n                // when buy\n                if (automatedMarketMakerPairs[from] && !isExcludedMaxTransactionAmount[to]) {\n                    require(amount <= maxTransactionAmount, \"Buy transfer amount exceeds the maxTransactionAmount.\");\n                    require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\n                }\n                \n                // when sell\n                else if (automatedMarketMakerPairs[to] && !isExcludedMaxTransactionAmount[from]) {\n                    require(amount <= maxTransactionAmount, \"Sell transfer amount exceeds the maxTransactionAmount.\");\n                }\n            }\n        }\n        \n\t\tuint256 contractTokenBalance = balanceOf(address(this));\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\n        if (\n            canSwap &&\n            !_swapping &&\n            !automatedMarketMakerPairs[from] &&\n            !isExcludedFromFees[from] &&\n            !isExcludedFromFees[to]\n        ) {\n            _swapping = true;\n            swapBack();\n            _swapping = false;\n        }\n\n        \n        // dynamic change\n        if (dynamicFeesInEffect && block.timestamp > fireSaleActive) {\n            // on sell\n            if (automatedMarketMakerPairs[to]) {\n                sellFeeThreshold += amount;\n                \n                uint256 feeAdd = sellFeeThreshold.div(sellFeeRate);\n                if (feeAdd > 0) {\n                    if (_sellLiquidityFee < 12) {\n                        if (feeAdd > 10) {\n                            _sellLiquidityFee += 10;\n                        } else {\n                            _sellLiquidityFee += feeAdd;\n                        }\n                    }\n\n                    sellFeeThreshold -= feeAdd.mul(sellFeeRate);\n                }\n            } \n            // on buy\n            else if (automatedMarketMakerPairs[from]) {\n                buyFeeThreshold += amount;\n                \n                uint256 feeAdd = buyFeeThreshold.div(buyFeeRate);\n                if (feeAdd > 0) {\n                    if (_buyLiquidityFee > 0) {\n                        if (feeAdd > 2) {\n                            _buyLiquidityFee -= 2;\n                        } else {\n                            _buyLiquidityFee -= feeAdd;\n                        }\n                    }\n\n                    buyFeeThreshold -= feeAdd.mul(buyFeeRate);\n                }\n            }\n        }\n\n        // set new totals\n        buyTotalFees = _buyMarketingFee + _buyLiquidityFee + _buyDevFee;\n        sellTotalFees = _sellMarketingFee + _sellLiquidityFee + _sellDevFee;\n\n        bool takeFee = !_swapping;\n\n        // if any account belongs to _isExcludedFromFee account then remove the fee\n        if (isExcludedFromFees[from] || isExcludedFromFees[to]) takeFee = false;\n        \n        uint256 fees = 0;\n        // only take fees on buys/sells, do not take on wallet transfers\n        if (takeFee) {\n            // on sell\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {\n                fees = amount.mul(sellTotalFees).div(100);\n                _tokensForLiquidity += fees * _sellLiquidityFee / sellTotalFees;\n                _tokensForDev += fees * _sellDevFee / sellTotalFees;\n                _tokensForMarketing += fees * _sellMarketingFee / sellTotalFees;\n            }\n            // on buy\n            else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {\n        \t    fees = amount.mul(buyTotalFees).div(100);\n        \t    _tokensForLiquidity += fees * _buyLiquidityFee / buyTotalFees;\n                _tokensForDev += fees * _buyDevFee / buyTotalFees;\n                _tokensForMarketing += fees * _buyMarketingFee / buyTotalFees;\n            }\n            \n            if (fees > 0) super._transfer(from, address(this), fees);\n        \t\n        \tamount -= fees;\n        }\n\n        if (block.timestamp > fireSaleActive && fireSaleActive > 0) {\n            fireSaleActive = 0;\n            _resetFees();\n        }\n\n        // reset firesale if time passed\n        if (block.timestamp > fireSaleTimer) {\n            fireSaleTimer = block.timestamp + 1 days;\n            fireSaleAmt = 0;\n        }\n\n        // if it's a burn\n        if (to == burnAddress) {\n            userBurned[msg.sender] += amount;\n            fireSaleAmt += amount;\n\n            if (fireSaleAmt >= fireSaleRequirement) _startFireSale();\n            \n            emit Burn(amount);\n        }\n\n        super._transfer(from, to, amount);\n    }\n\n    function _swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n    \n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // add the liquidity\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            owner(),\n            block.timestamp\n        );\n    }\n\n    function swapBack() private {\n        uint256 contractBalance = balanceOf(address(this));\n        uint256 totalTokensToSwap = _tokensForLiquidity + _tokensForMarketing + _tokensForDev;\n        \n        if (contractBalance == 0 || totalTokensToSwap == 0) return;\n        if (contractBalance > swapTokensAtAmount * 20) contractBalance = swapTokensAtAmount * 20;\n        \n        \n        // Halve the amount of liquidity tokens\n        uint256 liquidityTokens = contractBalance * _tokensForLiquidity / totalTokensToSwap / 2;\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\n        \n        uint256 initialETHBalance = address(this).balance;\n\n        _swapTokensForEth(amountToSwapForETH); \n        \n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\n        uint256 ethForMarketing = ethBalance.mul(_tokensForMarketing).div(totalTokensToSwap);\n        uint256 ethForDev = ethBalance.mul(_tokensForDev).div(totalTokensToSwap);\n        uint256 ethForLiquidity = ethBalance - ethForMarketing - ethForDev;\n        \n        _tokensForLiquidity = 0;\n        _tokensForMarketing = 0;\n        _tokensForDev = 0;\n                \n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\n            _addLiquidity(liquidityTokens, ethForLiquidity);\n            emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, _tokensForLiquidity);\n        }\n    }\n\n    function withdrawFees() external {\n        payable(feeWallet).transfer(address(this).balance);\n    }\n\n    receive() external payable {}\n}"}}}