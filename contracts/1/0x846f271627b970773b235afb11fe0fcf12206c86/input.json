{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"Registry.sol":{"content":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/Registry.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/// @notice The handler registry database for Furucombo\r\ncontract Registry is Ownable {\r\n    mapping(address => bytes32) handlers;\r\n\r\n    bytes32 constant DEPRECATED = bytes10(0x64657072656361746564);\r\n\r\n    /**\r\n     * @notice Register a handler with a bytes32 information.\r\n     * @param registration Handler address.\r\n     * @param info Info string.\r\n     * @dev Dapps that triggers callback function should also be registered.\r\n     * In this case, registration is the Dapp address and the leading 20 bytes\r\n     * of info is the handler address.\r\n     */\r\n    function register(address registration, bytes32 info) external onlyOwner {\r\n        require(registration != address(0), \"zero address\");\r\n        require(handlers[registration] == bytes32(0), \"registered\");\r\n        handlers[registration] = info;\r\n    }\r\n\r\n    /**\r\n     * @notice Unregister a handler. The handler will be deprecated.\r\n     * @param registration The handler to be unregistered.\r\n     */\r\n    function unregister(address registration) external onlyOwner {\r\n        require(registration != address(0), \"zero address\");\r\n        require(handlers[registration] != bytes32(0), \"no registration\");\r\n        require(handlers[registration] != DEPRECATED, \"unregistered\");\r\n        handlers[registration] = DEPRECATED;\r\n    }\r\n\r\n    /**\r\n     * @notice Check if the handler is valid.\r\n     * @param handler The handler to be verified.\r\n     */\r\n    function isValid(address handler) external view returns (bool result) {\r\n        if (handlers[handler] == 0 || handlers[handler] == DEPRECATED)\r\n            return false;\r\n        else return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the information of a registration.\r\n     * @param handler The handler address to be queried.\r\n     */\r\n    function getInfo(address handler) external view returns (bytes32 info) {\r\n        return handlers[handler];\r\n    }\r\n}"}}}