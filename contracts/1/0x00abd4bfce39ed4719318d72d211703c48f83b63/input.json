{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "devpool.sol": {
      "content": "pragma solidity 0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n// import ierc20 & safemath & non-standard\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\ninterface ILinearVesting {\r\n    \r\n    event ScheduleCreated(address indexed _beneficiary);\r\n    \r\n    /// @notice event emitted when a successful drawn down of vesting tokens is made\r\n    event DrawDown(address indexed _beneficiary, uint256 indexed _amount);\r\n\r\n    function createVestingSchedules(\r\n        address[] calldata _beneficiaries,\r\n        uint256[] calldata _amounts\r\n    ) external returns (bool);\r\n\r\n    function createVestingSchedule(address _beneficiary, uint256 _amount) external returns (bool);\r\n\r\n    function transferOwnership(address _newOwner) external;\r\n\r\n    function tokenBalance() external view returns (uint256) ;\r\n    \r\n    function vestingScheduleForBeneficiary(address _beneficiary)\r\n    external view\r\n    returns (uint256 _amount, uint256 _totalDrawn, uint256 _lastDrawnAt, uint256 _remainingBalance);\r\n\r\n    function availableDrawDownAmount(address _beneficiary) external view returns (uint256 _amount);\r\n\r\n    function remainingBalance(address _beneficiary) external view returns (uint256);\r\n    \r\n    function drawDown() external returns (bool);\r\n}\r\n\r\ncontract devpool {\r\n    address[] public approvers;\r\n    uint public votes;\r\n    struct Transfer {\r\n        uint id;\r\n        uint amount;\r\n        address payable to;\r\n        uint approvals;\r\n        bool sent;\r\n        IERC20 token;\r\n    }\r\n    Transfer[] public transfers;\r\n    mapping(address => mapping(uint => bool)) public approvals;\r\n    \r\n    IERC20 public dai;\r\n    ILinearVesting public linearVesting;\r\n    \r\n    constructor(address[] memory _approvers, uint _votes,address _linearvesting) public {\r\n        approvers = _approvers;\r\n        votes = _votes;\r\n        linearVesting = ILinearVesting(_linearvesting);\r\n    }\r\n    \r\n    function drawdownpool() public {\r\n         linearVesting.drawDown();\r\n    }\r\n    \r\n    function getApprovers() external view returns(address[] memory) {\r\n        return approvers;\r\n    }\r\n    \r\n    function getTransfers() external view returns(Transfer[] memory) {\r\n        return transfers;\r\n    }\r\n\r\n    function createTransfer(uint amount,IERC20 _token,address payable to) external onlyApprover() {\r\n        transfers.push(Transfer(\r\n            transfers.length,\r\n            amount,\r\n            to,\r\n            0,\r\n            false,\r\n            _token\r\n        ));\r\n    }\r\n    \r\n    function approveTransfer(uint id) external onlyApprover() {\r\n        require(transfers[id].sent == false, 'transfer has already been sent');\r\n        require(approvals[msg.sender][id] == false, 'cannot approve transfer twice');\r\n        \r\n        approvals[msg.sender][id] = true;\r\n        transfers[id].approvals++;\r\n        \r\n        if(transfers[id].approvals >= votes && approvals[approvers[0]][id]) {\r\n            transfers[id].sent = true;\r\n            address payable to = transfers[id].to;\r\n            uint amount = transfers[id].amount;\r\n            transfers[id].token.transfer(to,amount);\r\n        }\r\n    }\r\n    \r\n    function getContractTokenBalance(IERC20 _token) public view returns (uint256) {\r\n        return _token.balanceOf(address(this));\r\n    }\r\n    \r\n    modifier onlyApprover() {\r\n        bool allowed = false;\r\n        for(uint i = 0; i < approvers.length; i++) {\r\n            if(approvers[i] == msg.sender) {\r\n                allowed = true;\r\n            }\r\n        }\r\n        require(allowed == true, 'only approver allowed');\r\n        _;\r\n    }\r\n    \r\n}"
    }
  }
}