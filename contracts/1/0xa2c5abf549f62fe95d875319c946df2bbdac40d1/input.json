{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/HANZOO.sol": {
      "content": "pragma solidity ^0.6.0;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Owner {\r\n   address private owner;\r\n   constructor() public {\r\n      owner = msg.sender;\r\n   }\r\n   modifier onlyOwner {\r\n      require(msg.sender == owner);\r\n      _;\r\n   }\r\n}\r\n\r\n\r\ncontract ERC20Basic is IERC20,Owner {\r\n\r\n    string public constant name = \"Hanzoo\";\r\n    string public constant symbol = \"HNZ\";\r\n    uint8 public constant decimals = 18;\r\n\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n    mapping (address => bool) private _isBlackListedBot;\r\n    uint256 public _maxTxAmount;\r\n    address public _isExludedFromTxSender;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n   constructor(uint256 total,uint256 maxTxPercent) public {\r\n    totalSupply_ = total;\r\n    balances[msg.sender] = totalSupply_;\r\n    _maxTxAmount=maxTxPercent;\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n    return totalSupply_;\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public override view returns (uint256) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function transfer(address receiver, uint256 numTokens) public override returns (bool) {\r\n        require(numTokens <= balances[msg.sender]);\r\n        require(numTokens > 0, \"Transfer amount must be greater than zero\");\r\n        require(!_isBlackListedBot[msg.sender], \"You have no power here!\");\r\n        require(!_isBlackListedBot[receiver], \"You have no power here!\");\r\n        if (msg.sender != _isExludedFromTxSender) {\r\n            require(numTokens < _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n        }\r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        balances[receiver] = balances[receiver].add(numTokens);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function mint(address account, uint256 amount) public onlyOwner {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        totalSupply_ = totalSupply_.add(amount);\r\n        balances[account] = balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     function burn(address account, uint256 value) public onlyOwner {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        totalSupply_ = totalSupply_.sub(value);\r\n        balances[account] = balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n  function setMaxTxAmount(uint256 maxTxPercent) public onlyOwner {\r\n        _maxTxAmount = maxTxPercent;\r\n    }\r\n\r\n    function setExluded(address excludedTxSender) public onlyOwner {\r\n        _isExludedFromTxSender = excludedTxSender;\r\n    }\r\n\r\n    function addBotToBlackList(address account) external onlyOwner() {\r\n        require(account != address(this));\r\n        require(!_isBlackListedBot[account], \"Account is already blacklisted\");\r\n        _isBlackListedBot[account] = true;\r\n    }\r\n\r\n    function removeBotFromBlackList(address account) external onlyOwner() {\r\n        require(_isBlackListedBot[account], \"Account is not blacklisted\");\r\n                _isBlackListedBot[account] = false;\r\n    }\r\n\r\n    function approve(address delegate, uint256 numTokens) public override returns (bool) {\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address delegate) public override view returns (uint) {\r\n        return allowed[owner][delegate];\r\n    }\r\n\r\n    function transferFrom(address owner, address buyer, uint256 numTokens) public override returns (bool) {\r\n        require(numTokens <= balances[owner]);\r\n        require(numTokens <= allowed[owner][msg.sender]);\r\n        require(numTokens > 0, \"Transfer amount must be greater than zero\");\r\n        require(!_isBlackListedBot[owner], \"You have no power here!\");\r\n        require(!_isBlackListedBot[buyer], \"You have no power here!\");\r\n        if (owner != _isExludedFromTxSender) {\r\n            require(numTokens < _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n        }\r\n        balances[owner] = balances[owner].sub(numTokens);\r\n        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\r\n        balances[buyer] = balances[buyer].add(numTokens);\r\n        emit Transfer(owner, buyer, numTokens);\r\n        return true;\r\n    }\r\n    \r\n    \r\n}\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n    \r\n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n"
    }
  }
}