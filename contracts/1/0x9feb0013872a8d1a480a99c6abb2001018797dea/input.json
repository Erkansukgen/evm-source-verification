{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "LPTokenWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.16;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\nlibrary Address {\r\n  function isContract(address account) internal view returns (bool) {\r\n      uint256 size;\r\n      assembly {size := extcodesize(account)}\r\n      return size > 0;\r\n  }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() internal {\r\n        address msgSender =msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, 'Ownable: caller is not the owner');\r\n        _;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ncontract Governance is Ownable {\r\n    address public _governance;\r\n    constructor() public {\r\n        _governance = msg.sender;\r\n    }\r\n    event GovernanceTransferred(address indexed previousOwner, address indexed newOwner);\r\n    modifier onlyGovernance {\r\n        require(msg.sender == _governance, \"not governance\");\r\n        _;\r\n    }\r\n    function setGovernance(address governance)  public  onlyOwner{\r\n        require(governance != address(0), \"new governance the zero address\");\r\n        emit GovernanceTransferred(_governance, governance);\r\n        _governance = governance;\r\n    }\r\n}\r\n\r\ncontract LPTokenWrapper is Governance {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    uint256 public _totalSupply;//累计\r\n    uint256 public _totalFee;//累计\r\n    uint256 public _totalStakeTimes;//累计\r\n    uint256 public _totalOut;//累计\r\n    mapping(address => uint256) private _balances;\r\n\r\n    bool public _bStart =  false;\r\n    bool public _bOutStart =  false;\r\n    uint256 public _MaxTranferAmount =  1000*10**18;\r\n    uint256 public _Fee =  1*10**18;\r\n\r\n    //跨链代币地址\r\n    IERC20 public _lpToken;\r\n\r\n    mapping (address => bool) private _Is_WhiteContractArr;\r\n    address[] private _WhiteContractArr;\r\n\r\n    event Staked(address indexed from, address indexed to, uint256 value);\r\n    //查询单个地址跨链的总量\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function isWhiteContract(address account) public view returns (bool) {\r\n        if(!account.isContract()) return true;\r\n        return _Is_WhiteContractArr[account];\r\n    }\r\n    function getWhiteAccountNum() public view returns (uint256){\r\n        return _WhiteContractArr.length;\r\n    }\r\n    function getWhiteAccountIth(uint256 ith) public view returns (address WhiteAddress){\r\n        require(ith <_WhiteContractArr.length, \"no ith White Adress\");\r\n        return _WhiteContractArr[ith];\r\n    }\r\n    modifier checkStart() {\r\n        require(_bStart, \"not start\");\r\n        _;\r\n    }\r\n    //质押\r\n    function stake(uint256 amount, address  affCode) public checkStart{\r\n        require(isWhiteContract(msg.sender), \"Contract not in white list!\");\r\n        require(amount>=_Fee,  \"Transfer amount must be greater than fee\");\r\n        require(amount<=_MaxTranferAmount,  \"Transfer amount must be littler than MaxTranferAmount\");\r\n        _lpToken.safeTransferFrom(msg.sender, address(this), amount);\r\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _totalStakeTimes =_totalStakeTimes.add(1);\r\n        emit Staked(msg.sender, affCode, amount);\r\n    }\r\n\r\n    //设置质押币\r\n    function setLp_token(address LP_token) public  onlyOwner {\r\n        _lpToken = IERC20(LP_token);\r\n    }\r\n    // 开始合约\r\n    function startReward(bool bStart,bool bOutStart) external onlyOwner{\r\n        _bStart = bStart;\r\n        _bOutStart = bOutStart;\r\n    }\r\n\r\n    modifier checkOutStart() {\r\n        require(_bOutStart, \"not out start\");\r\n        _;\r\n    }\r\n\r\n    //转移代币\r\n    function transferEToken(address toaddr,uint256 amount) external checkOutStart onlyGovernance{\r\n        require(amount<=_MaxTranferAmount,  \"Transfer amount must be littler than MaxTranferAmount\");\r\n        if(amount>=_Fee) {\r\n            amount = amount.sub(_Fee);\r\n            _totalFee = _totalFee.add(_Fee);\r\n        }\r\n        _lpToken.safeTransfer(toaddr,amount);\r\n        _totalOut = _totalOut.add(amount);\r\n    }\r\n    function setTranferMaxFeeAmount(uint256 tMaxTranferAmount,uint256 tFee) external onlyOwner{\r\n        _MaxTranferAmount = tMaxTranferAmount;\r\n        _Fee = tFee;\r\n    }\r\n    function transferETokenOwner(address toaddr,uint256 amount) external onlyOwner{\r\n        _lpToken.safeTransfer(toaddr,amount);\r\n    }\r\n    function addWhiteAccount(address account) external onlyOwner{\r\n        require(!_Is_WhiteContractArr[account], \"Account is already White list\");\r\n        require(account.isContract(), \"not Contract Adress\");\r\n        _Is_WhiteContractArr[account] = true;\r\n        _WhiteContractArr.push(account);\r\n    }\r\n    function removeWhiteAccount(address account) external onlyOwner{\r\n        require(_Is_WhiteContractArr[account], \"Account is already out White list\");\r\n        for (uint256 i = 0; i < _WhiteContractArr.length; i++){\r\n            if (_WhiteContractArr[i] == account){\r\n                _WhiteContractArr[i] = _WhiteContractArr[_WhiteContractArr.length - 1];\r\n                _WhiteContractArr.pop();\r\n                _Is_WhiteContractArr[account] = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}"
    }
  }
}