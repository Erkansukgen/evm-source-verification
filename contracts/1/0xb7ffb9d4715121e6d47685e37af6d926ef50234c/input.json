{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/pasteKing.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary Types {\r\n    enum AssetDenomination { Wei, Par }\r\n    enum AssetReference { Delta, Target }\r\n    struct AssetAmount {\r\n        bool sign;\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n}\r\n\r\nlibrary Account {\r\n    struct Info {\r\n        address owner;\r\n        uint256 number;\r\n    }\r\n}\r\n\r\nlibrary Actions {\r\n    enum ActionType {\r\n        Deposit, Withdraw, Transfer, Buy, Sell, Trade, Liquidate, Vaporize, Call\r\n    }\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        Types.AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n}\r\n\r\ninterface ISoloMargin {\r\n    function operate(Account.Info[] memory accounts, Actions.ActionArgs[] memory actions) external;\r\n}\r\n\r\ninterface ICallee {\r\n    function callFunction(address sender, Account.Info memory accountInfo, bytes memory data) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUSDC is IERC20 {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n}\r\n\r\ninterface CurveMetapool {\r\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external payable;\r\n}\r\n\r\ninterface OriginVault {\r\n    function mint(address _asset, uint256 _amount, uint256 _minimumOusdAmount) external payable;\r\n}\r\n\r\ncontract FlashLoanTemplate is ICallee {\r\n    IUSDC private USDC = IUSDC(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    ISoloMargin private soloMargin = ISoloMargin(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);\r\n\r\n    constructor() {\r\n        USDC.approve(address(soloMargin), uint(-1));\r\n    }\r\n\r\n    function execute (uint loanAmount) external {\r\n        \r\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\r\n\r\n        operations[0] = Actions.ActionArgs({\r\n            actionType: Actions.ActionType.Withdraw,\r\n            accountId: 0,\r\n            amount: Types.AssetAmount({\r\n                sign: false,\r\n                denomination: Types.AssetDenomination.Wei,\r\n                ref: Types.AssetReference.Delta,\r\n                value: loanAmount \r\n            }),\r\n            primaryMarketId: 2, \r\n            secondaryMarketId: 0,\r\n            otherAddress: address(this),\r\n            otherAccountId: 0,\r\n            data: \"\"\r\n        });\r\n        \r\n        operations[1] = Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Call,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: 0\r\n                }),\r\n                primaryMarketId: 2,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: abi.encode(\r\n                    msg.sender,\r\n                    loanAmount\r\n                )\r\n            });\r\n        \r\n        operations[2] = Actions.ActionArgs({\r\n            actionType: Actions.ActionType.Deposit,\r\n            accountId: 0,\r\n            amount: Types.AssetAmount({\r\n                sign: true,\r\n                denomination: Types.AssetDenomination.Wei,\r\n                ref: Types.AssetReference.Delta,\r\n                value: loanAmount + 2 \r\n            }),\r\n            primaryMarketId: 2, \r\n            secondaryMarketId: 0,\r\n            otherAddress: address(this),\r\n            otherAccountId: 0,\r\n            data: \"\"\r\n        });\r\n\r\n        Account.Info[] memory accountInfos = new Account.Info[](1);\r\n        accountInfos[0] = Account.Info({owner: address(this), number: 1});\r\n\r\n        soloMargin.operate(accountInfos, operations);\r\n    }\r\n\r\n    function callFunction(address sender, Account.Info memory accountInfo, bytes memory data) external override {\r\n        (\r\n            address payable actualSender,\r\n            uint loanAmount\r\n        ) = abi.decode(data, (\r\n            address, uint\r\n        ));\r\n\r\n        address OriginAddress = 0xE75D77B1865Ae93c7eaa3040B038D7aA7BC02F70;\r\n        OriginVault(OriginAddress).mint(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, loanAmount, 0);\r\n\r\n        address CurveAddress = 0x87650D7bbfC3A9F10587d7778206671719d9910D;\r\n        CurveMetapool(CurveAddress).exchange_underlying(0, 2, loanAmount, 1); \r\n\r\n        require(USDC.balanceOf(address(this)) > loanAmount + 2, \"CANNOT REPAY LOAN\");\r\n        USDC.withdraw(USDC.balanceOf(address(this)) - loanAmount - 2);\r\n        actualSender.transfer(address(this).balance);\r\n    }\r\n}"
    }
  }
}