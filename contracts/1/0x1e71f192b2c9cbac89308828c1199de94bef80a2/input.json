{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/2_Owner.sol": {
      "content": "pragma solidity >=0.4.22 <0.7.0;\n\n/**\n * @title Owner\n * @dev Set & change owner\n */\ncontract HelloSolidity {\n\n    address private owner;\n    mapping(address => uint) public addressMap;\n    \n    // event for EVM logging\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n    \n    // modifier to check if caller is owner\n    modifier isOwner() {\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n    \n    /**\n     * @dev Set contract deployer as owner\n     */\n    constructor() public {\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\n        emit OwnerSet(address(0), owner);\n    }\n\n    /**\n     * @dev Change owner\n     * @param newOwner address of new owner\n     */\n    function changeOwner(address newOwner) public isOwner {\n        emit OwnerSet(owner, newOwner);\n        owner = newOwner;\n    }\n\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n    \n    function deposit() public payable {\n        addressMap[msg.sender] += msg.value;\n    }\n    \n    function withdraw() public payable {\n        if(addressMap[msg.sender] > 0) {\n            msg.sender.call.value(addressMap[msg.sender])(\"\");\n        }\n    }\n    \n    function send(address receiver, uint amount) public payable {\n        if(addressMap[msg.sender] >= amount) {\n            receiver.call.value(amount)(\"\");\n        }\n    }\n}"
    }
  }
}