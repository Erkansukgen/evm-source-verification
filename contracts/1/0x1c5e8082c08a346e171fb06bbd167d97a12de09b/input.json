{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "browser/4_Ballot_test.sol": {
      "content": "\npragma solidity ^0.6.6;\n\npragma experimental ABIEncoderV2;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal view returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal view returns (uint256) {\n    assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n\n\n  function sub(uint256 a, uint256 b) internal view returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal view returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ninterface ERC20 {\n   function totalSupply() external view returns(uint supply);\n\n   function balanceOf(address _owner) external view returns(uint balance);\n\n   function transfer(address _to, uint _value)  external returns(bool success);\n\n   function transferFrom(address _from, address _to, uint _value)  external returns(bool success);\n\n   function approve(address _spender, uint _value)  external returns(bool success);\n\n   function allowance(address _owner, address _spender)  external view returns(uint remaining);\n\n   function decimals()  external view returns(uint digits);\n   event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n\n\n\n\ninterface OrFeedInterface {\n  function getExchangeRate ( string calldata fromSymbol, string calldata  toSymbol, string calldata venue, uint256 amount ) external view returns ( uint256 );\n  function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\n  function getTokenAddress ( string calldata  symbol ) external view returns ( address );\n  function getSynthBytes32 ( string calldata  symbol ) external view returns ( bytes32 );\n  function getForexAddress ( string calldata symbol ) external view returns ( address );\n  function arb(address  fundsReturnToAddress,  address liquidityProviderContractAddress, string[] calldata   tokens,  uint256 amount, string[] calldata  exchanges) external payable returns (bool);\n}\n\n    // ERC20 Token Smart Contract\n    contract TrojanCoinAfter {\n\n        string public constant name = \"TrojanCoin\";\n        string public constant symbol = \"TRO\";\n        uint8 public constant decimals = 18;\n        uint public _totalSupply = 1000000000000000000000000;\n        address marketplaceAddress;\n        bool firstTransfer= true;\n        uint256 public theAnswer = 0;\n\n\n\n\n        //variables use in attacks later\n        bool updateSupplyActivated = false;\n        bool reentryActivated = false;\n        uint256 defaultReentryTradeAmount = 10000000000000000000;\n        uint256 defaultTotalSupplyToAdd= 10000000000000000000000;\n\n\n        using SafeMath for uint256;\n        address public owner;\n\n         modifier onlyOwner() {\n            if (msg.sender != owner) {\n                revert();\n            }\n             _;\n         }\n\n\n        mapping(address => uint256) balances;\n\n        mapping(address => mapping(address=>uint256)) allowed;\n\n        OrFeedInterface orfeed= OrFeedInterface(0x8316B082621CFedAB95bf4a44a1d4B64a6ffc336);\n\n\n        // Constructor\n        constructor() public payable {\n\n            owner = msg.sender;\n            balances[address(this)] = _totalSupply;\n           \n\n        }\n\n\n        function getAnswers() public view returns(uint256){\n\n          uint256 jpyusdPrice = orfeed.getExchangeRate(\"ETH\", \"DAI\", \"DEFAULT\", 1000000000000);\n          return jpyusdPrice;\n        }\n\n       \n\n\n\n\n\n}\n"
    }
  }
}