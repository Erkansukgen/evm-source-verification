{"language":"Solidity","settings":{"libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":false,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["*"],"":["*"]}}},"sources":{"ArbProxy.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.1;\n\nimport \"IUniswapV2Router02.sol\";\nimport \"IERC20.sol\";\nimport \"IWETH.sol\";\n\ncontract ArbProxy {\n  address internal constant UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n  address internal constant SUSHISWAP_ROUTER_ADDRESS = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\n  IWETH private constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n  address payable owner;\n  \n  modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n  IUniswapV2Router02 public uniswapRouter;\n  IUniswapV2Router02 public sushiswapRouter;\n\n  constructor() {\n    uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\n    sushiswapRouter = IUniswapV2Router02(SUSHISWAP_ROUTER_ADDRESS);\n    owner = msg.sender;\n\n  }\n\n  //Uni -> Sushiswap\n  function convertEthToTokenAndBackUni2Sushi(uint _tokenAmountToBuy, address _tokenAddress, address[] calldata _pathIn, address[] calldata _pathOut, uint _deadline, bool _enforcePositiveEV, uint256 _ethAmountToCoinbase) public payable {\n    require(msg.sender == owner);\n    \n    //Check if Positive EV TX @ UNI\n    uint256 estimatedETH = getEstimatedETHForTokenAtSUSHI(_tokenAmountToBuy, _pathOut)[1];\n    if(_enforcePositiveEV){\n          //Assert that this tx will have a positve expected value otherwise revert and burn gas\n          require((msg.value) <= estimatedETH,  \"Not Positive EV\");\n    }    \n    //Leg one of TX UNI WETH Sell -> UNI Buy Token\n    uniswapRouter.swapExactETHForTokens{ value: msg.value }(_tokenAmountToBuy, _pathIn, address(this), _deadline);\n\n    //Intermediate Logic, confirm amount of tokens received, approve next exchange to sell\n    uint256 tokensReceived = IERC20(_tokenAddress).balanceOf(address(this));\n    IERC20(_tokenAddress).approve(address(SUSHISWAP_ROUTER_ADDRESS), 2**256 - 1);\n    sushiswapRouter.swapExactTokensForETH(tokensReceived, estimatedETH, _pathOut, address(this), _deadline);\n\n    // refund leftover ETH to user\n    \n        if (_ethAmountToCoinbase == 0) return;\n\n        uint256 _ethBalance = address(this).balance;\n        if (_ethBalance < _ethAmountToCoinbase) {\n            WETH.withdraw(_ethAmountToCoinbase - _ethBalance);\n        }\n        block.coinbase.transfer(_ethAmountToCoinbase);\n    (bool success,) = msg.sender.call{value:address(this).balance}(\"\");\n    \n    \n    require(success, \"Refund Failed\");\n  }\n\n  function convertEthToTokenAndBackSushi2Uni(uint _tokenAmountToBuy, address _tokenAddress, address[] calldata _pathIn, address[] calldata _pathOut, uint _deadline, bool _enforcePositiveEV, uint256 _ethAmountToCoinbase) public payable {\n    require(msg.sender == owner);\n    \n    //Check if Positive EV TX @ UNI\n    uint256 estimatedETH = getEstimatedETHForTokenAtUNI(_tokenAmountToBuy, _pathOut)[1];\n    if(_enforcePositiveEV){\n          //Assert that this tx will have a positve expected value otherwise revert and burn gas\n          require((msg.value) <= estimatedETH,  \"Not Positive EV\");\n    }    \n    //Leg one of TX UNI WETH Sell -> UNI Buy Token\n    sushiswapRouter.swapExactETHForTokens{ value: msg.value }(_tokenAmountToBuy, _pathIn, address(this), _deadline);\n\n    //Intermediate Logic, confirm amount of tokens received, approve next exchange to sell\n    uint256 tokensReceived = IERC20(_tokenAddress).balanceOf(address(this));\n    IERC20(_tokenAddress).approve(address(UNISWAP_ROUTER_ADDRESS), 2**256 - 1);\n    uniswapRouter.swapExactTokensForETH(tokensReceived, estimatedETH, _pathOut, address(this), _deadline);\n\n    // refund leftover ETH to user\n    \n        if (_ethAmountToCoinbase == 0) return;\n\n        uint256 _ethBalance = address(this).balance;\n        if (_ethBalance < _ethAmountToCoinbase) {\n            WETH.withdraw(_ethAmountToCoinbase - _ethBalance);\n        }\n        block.coinbase.transfer(_ethAmountToCoinbase);\n    (bool success,) = msg.sender.call{value:address(this).balance}(\"\");\n    require(success, \"Refund Failed\");\n  }\n\n  function getEstimatedETHForTokenAtUNI(uint _tokenAmount, address[] calldata _pathOut) public view returns (uint[] memory) {\n    require(msg.sender == owner);\n    return uniswapRouter.getAmountsOut(_tokenAmount, _pathOut);\n  }\n  function getEstimatedETHForTokenAtSUSHI(uint _tokenAmount, address[] calldata _pathOut) public view returns (uint[] memory) {\n    require(msg.sender == owner);\n    return sushiswapRouter.getAmountsOut(_tokenAmount, _pathOut);\n  }\n\n  function withdrawBalanceToken(address _tokenAddress) public{\n    require(msg.sender == owner);\n    IERC20(_tokenAddress).transfer(msg.sender, IERC20(_tokenAddress).balanceOf(address(this)));\n  }\n\n    function changeOwner(address payable _newOwner) public{\n    require(msg.sender == owner);\n    owner = _newOwner;\n\n  }\n  function call(address payable _to, uint256 _value, bytes calldata _data) external onlyOwner payable returns (bytes memory) {\n        require(_to != address(0));\n        (bool _success, bytes memory _result) = _to.call{value: _value}(_data);\n        require(_success);\n        return _result;\n    }\n  function withdrawBalanceETH() public{\n    // withdraw all eth \n    require(msg.sender == owner);\n    msg.sender.call{ value: address(this).balance }(\"\");\n  }\n  \n  // important to receive ETH\n  receive() payable external {}\n}\n"},"IERC20.sol":{"content":"pragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"},"IUniswapV2Router01.sol":{"content":"pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"IUniswapV2Router02.sol":{"content":"pragma solidity >=0.6.2;\n\nimport 'IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"IWETH.sol":{"content":"pragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n"}}}